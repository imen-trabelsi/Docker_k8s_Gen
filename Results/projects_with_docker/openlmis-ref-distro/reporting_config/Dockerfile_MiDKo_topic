# Use an official Python runtime based on Alpine 3.11 as a parent image
FROM alpine:3.11

# The application's working directory
WORKDIR /app

# Add the application's binaries to the PATH
ENV PATH="/app/bin:${PATH}"

# Install Python and pip
RUN apk add --no-cache python3 && \
    python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --upgrade pip setuptools && \
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \

# Copy the current directory contents into the container at /app
COPY ./services /config
COPY ./init.sh /init.sh

# Install any required packages specified in requirements.txt
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Make scripts executable
RUN chmod +x /init.sh

# Define environment variables
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Set timezone, if you need, replace it by yours
RUN apk --update add tzdata \
    && cp /usr/share/zoneinfo/America/Los_Angeles /etc/localtime  \

# Use the official PostgreSQL image from the Docker Hub
FROM postgres:11-alpine

# Define environment variable
ENV POSTGRES_DB mydatabase

# Run the necessary command
RUN apk add --update curl && rm -rf /var/cache/apk/*

EXPOSE 80

# Allows for nice output in the terminal
ENV PYTHONUNBUFFERED 1

CMD ["/bin/true"]

# Run the service
ENTRYPOINT [ "/init.sh" ]
