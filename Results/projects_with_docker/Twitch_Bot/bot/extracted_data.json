{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "requirements.txt": "Adafruit_IO==2.5.0\naiofile==3.7.1\naiohttp==3.7.4.post0\nalembic==1.7.3\ndropbox==11.19.0\ngmqtt==0.6.10\nmysql-connector-python==8.0.26\npip==21.2.4\npython-dateutil==2.8.2\nPythonTwitchBotFramework==2.3.9\npytz==2021.1\nSQLAlchemy==1.4.23\nsqlalchemy_json==0.4.0\nurwid==2.1.2\n"
        },
        "database": "MySQL",
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nservices:\n  bot:\n    container_name: twitchbot_bot\n    build:\n      context: ./bot/\n      args: #Passing these in as Args allow it to be used during the build process\n        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n        ENVIRONMENT: ${ENVIRONMENT}\n\n    restart: unless-stopped\n    depends_on:\n      - mysql\n    volumes:\n      - ./bot/configs:/workspace/bot/configs/\n      - ./bot/irc_logs:/workspace/bot/irc_logs/\n      - ./bot/pubsub_logs:/workspace/bot/pubsub_logs/\n      - ./bot/jsons:/workspace/bot/jsons/\n      - ./models.py:/workspace/bot/models.py\n      - ./mysql/db_backup:/db_backup\n      - ./questions.txt:/workspace/bot/questions.txt\n      - ./mqtt_logger/logs:/workspace/bot/mqtt_logs/\n      # - ./bot:/workspace/bot/\n    environment:\n      client_id: ${TWITCH_CLIENT_ID} #Lower cased because a framework issue\n      client_secret: ${TWITCH_CLIENT_SECRET}\n      nick: ${TWITCH_NICK}\n      ADAFRUIT_IO_USER: ${ADAFRUIT_IO_USER}\n      ADAFRUIT_IO_KEY: ${ADAFRUIT_IO_KEY}\n      ENABLE_AIO_BRIDGE: ${ENABLE_AIO_BRIDGE}\n      WEB_HOSTNAME: ${WEB_HOSTNAME}\n      TWITCH_CHANNEL: ${TWITCH_CHANNEL}\n      MQTT_USER: ${MQTT_USER}\n      MQTT_KEY: ${MQTT_KEY}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n\n\n    labels:\n      - \"deck-chores.process-dropbox.command=sh -c /workspace/bot/dropbox_sync.py &> /proc/1/fd/1\"\n      - \"deck-chores.process-dropbox.cron=* * * * * * 10 0\" #Hourly @ 10 after\n\n  webserver:\n    container_name: twitchbot_webserver\n    build:\n      context: ./web/\n      args: #Passing these in as Args allow it to be used during the build process\n        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n\n    restart: unless-stopped\n    expose:\n      - 5000\n    depends_on:\n      - mysql\n\n    volumes:\n      - ./web/web_user_db.json:/workspace/web/web_user_db.json\n      - ./models.py:/workspace/web/models.py\n      - ./web/static_files/trivia/images:/workspace/web/static_files/trivia/images\n      - ./web/static_files/trivia/sounds:/workspace/web/static_files/trivia/sounds\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.fastapi.rule=Host(`${WEB_HOSTNAME}`)\"\n      - \"traefik.http.routers.fastapi.tls=true\"\n      - \"traefik.http.routers.fastapi.tls.certresolver=letsencrypt\"\n      - \"deck-chores.webhook-subscribe.command=sh -c /workspace/web/eventsub_manage.py &> /proc/1/fd/1\"\n      - \"deck-chores.webhook-subscribe.interval=daily\"\n\n    environment:\n      WEB_HOSTNAME: ${WEB_HOSTNAME}\n      CLIENT_ID: ${TWITCH_CLIENT_ID}\n      CLIENT_SECRET: ${TWITCH_CLIENT_SECRET}\n      TWITCH_CHANNEL: ${TWITCH_CHANNEL}\n      ADAFRUIT_IO_USER: ${ADAFRUIT_IO_USER}\n      ADAFRUIT_IO_KEY: ${ADAFRUIT_IO_KEY}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n      WEB_API_KEY: ${WEB_API_KEY}\n      TWITCH_SIGNING_SECRET: ${TWITCH_SIGNING_SECRET}\n      WEB_COOKIE_KEY: ${WEB_COOKIE_KEY}\n      MQTT_USER: ${MQTT_USER}\n      MQTT_KEY: ${MQTT_KEY}\n      FORWARDED_ALLOW_IPS: '*'\n      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}\n      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}\n      SESSION_KEY: ${SESSION_KEY}\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n\n    # Uncommenting these disables the requirement to re-build on updates, useful for dev.\n    # volumes:\n    #   - ./web:/workspace/web/\n\n  mysql:\n    container_name: twitchbot_mysql\n    image: mysql:latest\n    restart: unless-stopped\n    volumes:\n      - ./mysql/db_data:/var/lib/mysql\n      - ./mysql/mysql.cnf:/etc/mysql/conf.d/custom.cnf\n      - ./mysql/db_backup:/db_backup\n    ports:\n      - 3306:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}\n      MYSQL_DATABASE: ${MYSQL_DATABASE}\n      MYSQL_USER: ${MYSQL_USER}\n      MYSQL_PASSWORD: ${MYSQL_PASSWORD}\n      MYSQL_TEST_LOGIN_FILE: /var/lib/mysql/.mylogin.cnf #Run mysql_config_editor set -p in container to set password\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n\n    cap_add:\n      - SYS_NICE # CAP_SYS_NICE\n\n    labels:\n      - deck-chores.mysqldump.command=sh -c \"mysqldump --all-databases > /db_backup/twitchbot.sql\"\n      - deck-chores.mysqldump.cron=* * * * * 5 0 0 # Daily at 5am\n      - deck-chores.mysqldump-weekly.command=sh -c \"mysqldump --all-databases > /db_backup/twitchbot-weekly.sql\"\n      - deck-chores.mysqldump-weekly.cron=* * * * sat 3 0 0 # Saturday 3am\n      - deck-chores.mysqldump-monthly.command=sh -c \"mysqldump --all-databases > /db_backup/twitchbot-monthly.sql\"\n      - deck-chores.mysqldump-monthly.cron= * * 1 * * 1 0 0 # Monthly on the 1st, 1am\n\n  traefik:\n    container_name: twitchbot_traefik\n    image: traefik:v2.3\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      - \"./traefik/traefik.toml:/etc/traefik/traefik.toml\"\n      - \"./traefik/acme.json:/acme.json\"\n      - \"./traefik/log:/var/log\"\n    environment:\n      TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL: \"TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL\"\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n\n  fail2ban:\n    container_name: twitchbot_fail2ban\n    image: crazymax/fail2ban:latest\n    network_mode: \"host\"\n    environment:\n      F2B_DB_PURGE_AGE: \"1d\"\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n    cap_add:\n      - NET_ADMIN\n      - NET_RAW\n    restart: unless-stopped\n    volumes:\n      - ./traefik/log:/var/log/traefik:ro\n      - ./fail2ban/data:/data\n\n  chores:\n    container_name: twitchbot_chores\n    image: funkyfuture/deck-chores:1\n    restart: unless-stopped\n    environment:\n      TIMEZONE: America/Chicago\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\n  mqtt:\n    container_name: twitchbot_mqtt\n    image: eclipse-mosquitto:2-openssl\n    restart: unless-stopped\n    volumes:\n      - ./mosquitto/config:/mosquitto/config\n      - ./mosquitto/data:/mosquitto/data\n      - ./mosquitto/log:/mosquitto/log\n      - ./traefik/certs/${WEB_HOSTNAME}:/mosquitto/certs/site\n      - ./traefik/certs/private/:/mosquitto/certs/private\n    environment:\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n    ports:\n      - 8883:8883\n      - 9883:9883\n\n    expose:\n      - 1883 # For inter-container communication, and is not over SSL. Do not open to host\n\n  mqtt_logger:\n    container_name: twitchbot_mqtt_logger\n    build:\n      context: ./mqtt_logger/\n      args: #Passing these in as Args allow it to be used during the build process\n        PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n        PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n\n    restart: unless-stopped\n    depends_on:\n      - mqtt\n    volumes:\n      - ./mqtt_logger/logs:/workspace/mqtt_logger/logs\n\n    environment:\n      MQTT_USER: ${MQTT_USER}\n      MQTT_KEY: ${MQTT_KEY}\n      WEB_HOSTNAME: ${WEB_HOSTNAME}\n\n  traefik-certs-dumper:\n    image: ldez/traefik-certs-dumper:v2.7.4\n    environment:\n      PIP_INDEX_URL: ${PIP_INDEX_URL} #Redirects pip to use a local pip cache instead of downloading\n      PIP_TRUSTED_HOST: ${PIP_TRUSTED_HOST}\n    entrypoint: sh -c '\n      apk add jq\n      ; while ! [ -e /data/acme.json ]\n      || ! [ `jq \".[] | .Certificates | length\" /data/acme.json` != 0 ]; do\n      sleep 1\n      ; done\n      && traefik-certs-dumper file --clean=false --version v2 --watch\n      --domain-subdir --crt-name=certificate --key-name=privkey\n      --source /data/acme.json --dest /data/certs'\n    volumes:\n      - ./traefik:/data\n",
            "bot/Dockerfile": "FROM python:3.9@sha256:5caa9a0f034e56693e096ac4562097d9167a2509d22fb970cb4a2b5465a48d95\n\nARG PIP_INDEX_URL\nARG PIP_TRUSTED_HOST\nARG ENVIRONMENT\n\n# Any environment variables that are stored in\n# the .env file must be loaded in docker-compose.yml\n# Set pip to have cleaner logs and no saved cache\nENV PIP_NO_CACHE_DIR=false \\\n    PYTHONUNBUFFERED=1 \\\n    PIP_INDEX_URL=$PIP_INDEX_URL\\\n    PIP_TRUSTED_HOST=$PIP_TRUSTED_HOST\n\n\n#Setup sudo if debug is true\nRUN if [ \"$ENVIRONMENT\" = \"dev\" ] ; then apt-get update -y && apt-get install -y sudo; fi\nRUN if [ \"$ENVIRONMENT\" = \"dev\" ] ; then echo 'twitch_bot   ALL=(ALL:ALL) NOPASSWD: ALL' >>  /etc/sudoers.d/twitch_bot; fi\n\n\n\n#Create non-root user\nRUN useradd --uid 1000 -U -m twitch_bot\nUSER twitch_bot\nENV PATH=\"/home/twitch_bot/.local/bin:${PATH}\"\n\n#Copy the dependencies first so they are built as their own layer\nCOPY --chown=twitch_bot:twitch_bot ./requirements.txt /workspace/bot/\n\n# Install python dependencies\nRUN pip install --upgrade -r /workspace/bot/requirements.txt\n\n# Install needed libraries\n# RUN apt-get update && apt-get install -y \\\n#     git\n\n\n# Create the working directory\nWORKDIR /workspace/bot/\n\nEXPOSE 13337\n\n#Copy the bot to a working directory\nCOPY --chown=twitch_bot:twitch_bot ./ /workspace/bot/\n\n\n# Expose port for debugging\n#EXPOSE 5678:5678\n\nCMD ./wait_for_it.sh mysql:3306 --timeout=60 --strict -- ./wait_for_it.sh api.twitch.tv:443 --timeout=60 --strict -- ./wait_for_it.sh tmi.twitch.tv:443 --timeout=60 --strict -- ./start.sh\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "alembic.ini",
            "alembic_update.py",
            "command_console.py",
            "data.py",
            "dropbox_sync.py",
            "main.py",
            "mqtt.py",
            "requirements.txt",
            "start.sh",
            "temp_bridge.py",
            "trivia_import.py",
            "version_check.py",
            "wait_for_it.sh"
        ],
        "folders": [
            ".vscode",
            "alembic",
            "commands",
            "configs",
            "helpers",
            "irc_logs",
            "jsons",
            "mods",
            "pubsub_logs"
        ]
    }
}