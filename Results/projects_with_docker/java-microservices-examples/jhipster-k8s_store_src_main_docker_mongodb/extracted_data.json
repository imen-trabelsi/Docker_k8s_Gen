{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "build.gradle": "buildscript {\n    repositories {\n        gradlePluginPortal()\n    }\n    dependencies {\n        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here\n    }\n}\n\nplugins {\n    id \"java\"\n    id \"maven-publish\"\n    id \"idea\"\n    id \"eclipse\"\n    id \"jacoco\"\n    id \"org.springframework.boot\"\n    id \"com.google.cloud.tools.jib\"\n    id \"com.gorylenko.gradle-git-properties\"\n    id \"org.sonarqube\"\n    id \"io.spring.nohttp\"\n    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here\n}\n\ngroup = \"com.okta.developer.store\"\nversion = \"0.0.1-SNAPSHOT\"\n\ndescription = \"\"\n\nsourceCompatibility=11\ntargetCompatibility=11\nassert System.properties[\"java.specification.version\"] == \"1.8\" || \"1.9\" || \"10\" || \"11\" || \"12\" || \"13\" || \"14\" || \"15\"\n\napply from: \"gradle/docker.gradle\"\napply from: \"gradle/sonar.gradle\"\n//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here\n\nif (project.hasProperty(\"prod\") || project.hasProperty(\"gae\")) {\n    apply from: \"gradle/profile_prod.gradle\"\n} else {\n    apply from: \"gradle/profile_dev.gradle\"\n}\n\nif (project.hasProperty(\"war\")) {\n    apply from: \"gradle/war.gradle\"\n}\n\nif (project.hasProperty(\"gae\")) {\n    apply plugin: 'maven'\n    apply plugin: 'org.springframework.boot.experimental.thin-launcher'\n    apply plugin: 'io.spring.dependency-management'\n\n    dependencyManagement {\n        imports {\n            mavenBom \"tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}\"\n        }\n    }\n    appengineStage.dependsOn thinResolve\n}\n\nif (project.hasProperty(\"zipkin\")) {\n    apply from: \"gradle/zipkin.gradle\"\n}\n\nidea {\n    module {\n        excludeDirs += files(\"node_modules\")\n    }\n}\n\neclipse {\n    sourceSets {\n        main {\n            java {\n                srcDirs += [\"build/generated/sources/annotationProcessor/java/main\"]\n            }\n        }\n    }\n}\n\ndefaultTasks \"bootRun\"\n\nspringBoot {\n    mainClassName = \"com.okta.developer.store.StoreApp\"\n}\n\ntest {\n    useJUnitPlatform()\n    exclude \"**/*IT*\", \"**/*IntTest*\"\n\n    testLogging {\n        events 'FAILED', 'SKIPPED'\n    }\n    // uncomment if the tests reports are not generated\n    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484\n    // ignoreFailures true\n    reports.html.enabled = false\n}\n\ntask integrationTest(type: Test) {\n    useJUnitPlatform()\n    description = \"Execute integration tests.\"\n    group = \"verification\"\n    include \"**/*IT*\", \"**/*IntTest*\"\n\n    testLogging {\n        events 'FAILED', 'SKIPPED'\n    }\n\n\n    // uncomment if the tests reports are not generated\n    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484\n    // ignoreFailures true\n    reports.html.enabled = false\n}\n\ncheck.dependsOn integrationTest\ntask testReport(type: TestReport) {\n    destinationDir = file(\"$buildDir/reports/tests\")\n    reportOn test\n}\n\ntask integrationTestReport(type: TestReport) {\n    destinationDir = file(\"$buildDir/reports/tests\")\n    reportOn integrationTest\n}\n\n\ngitProperties {\n    failOnNoGitDirectory = false\n    keys = [\"git.branch\", \"git.commit.id.abbrev\", \"git.commit.id.describe\"]\n}\n\ncheckstyle {\n    toolVersion \"${checkstyleVersion}\"\n    configFile file(\"checkstyle.xml\")\n    checkstyleTest.enabled = false\n}\nnohttp {\n    source.include \"build.gradle\", \"README.md\"\n}\n\nconfigurations {\n    providedRuntime\n    implementation.exclude module: \"spring-boot-starter-tomcat\"\n    all {\n        resolutionStrategy {\n            // Inherited version from Spring Boot can't be used because of regressions:\n            // To be removed as soon as spring-boot use the same version\n            force 'org.liquibase:liquibase-core:4.3.2'\n        }\n    }\n}\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n    //jhipster-needle-gradle-repositories - JHipster will add additional repositories\n}\n\ndependencies {\n    // import JHipster dependencies BOM\n    if (!project.hasProperty(\"gae\")) {\n        implementation platform(\"tech.jhipster:jhipster-dependencies:${jhipsterDependenciesVersion}\")\n    }\n\n    // Use \", version: jhipsterDependenciesVersion, changing: true\" if you want\n    // to use a SNAPSHOT release instead of a stable release\n    implementation group: \"tech.jhipster\", name: \"jhipster-framework\", {\n        exclude group: \"org.springframework\", module: \"spring-webmvc\"\n    }\n    implementation \"javax.annotation:javax.annotation-api\"\n    implementation \"io.dropwizard.metrics:metrics-core\"\n    implementation \"io.micrometer:micrometer-registry-prometheus\"\n    implementation \"com.fasterxml.jackson.datatype:jackson-datatype-hppc\"\n    implementation \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\"\n    implementation \"com.fasterxml.jackson.core:jackson-annotations\"\n    implementation \"com.fasterxml.jackson.core:jackson-databind\"\n    implementation \"org.apache.commons:commons-lang3\"\n    implementation \"javax.transaction:javax.transaction-api\"\n    implementation \"org.springframework.boot:spring-boot-loader-tools\"\n    implementation \"org.springframework.boot:spring-boot-starter-mail\"\n    implementation \"org.springframework.boot:spring-boot-starter-logging\"\n    implementation \"org.springframework.boot:spring-boot-starter-actuator\"\n    implementation \"org.springframework.boot:spring-boot-starter-data-mongodb-reactive\"\n    // Mongock doesn't support reactive yet, so this dependency is necessary.\n    // See https://github.com/jhipster/generator-jhipster/pull/12536#issuecomment-696683592 for more information.\n    implementation \"org.springframework.boot:spring-boot-starter-data-mongodb\"\n    implementation \"org.springframework.boot:spring-boot-starter-security\"\n    implementation (\"org.springframework.boot:spring-boot-starter-webflux\") {\n        exclude module: \"spring-boot-starter-tomcat\"\n    }\n    implementation \"org.springframework.boot:spring-boot-starter-validation\"\n    implementation \"io.netty:netty-tcnative-boringssl-static\"\n    implementation \"org.springframework.boot:spring-boot-starter-thymeleaf\"\n    implementation \"org.zalando:problem-spring-webflux\"\n    implementation \"org.springframework.cloud:spring-cloud-starter\"\n    implementation \"org.springframework.cloud:spring-cloud-starter-netflix-hystrix\"\n    implementation \"org.springframework.retry:spring-retry\"\n    implementation \"org.springframework.cloud:spring-cloud-starter-bootstrap\"\n    implementation \"org.springframework.cloud:spring-cloud-starter-netflix-eureka-client\"\n    implementation \"org.springframework.cloud:spring-cloud-starter-config\"\n    implementation \"org.springframework.cloud:spring-cloud-starter-openfeign\"\n    implementation \"org.springframework.security:spring-security-config\"\n    implementation \"org.springframework.security:spring-security-web\"\n    implementation \"org.springframework.boot:spring-boot-starter-oauth2-client\"\n    implementation \"org.springframework.boot:spring-boot-starter-oauth2-resource-server\"\n    implementation \"com.github.cloudyrock.mongock:mongock-spring-v5\"\n    implementation \"com.github.cloudyrock.mongock:mongodb-springdata-v3-driver\"\n    implementation (\"io.springfox:springfox-oas\")\n    implementation (\"io.springfox:springfox-swagger2\")\n    implementation \"io.springfox:springfox-bean-validators\"\n    implementation \"org.mapstruct:mapstruct:${mapstructVersion}\"\n    annotationProcessor \"org.mapstruct:mapstruct-processor:${mapstructVersion}\"\n    annotationProcessor \"org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}\"\n    testImplementation \"org.springframework.boot:spring-boot-starter-test\"\n    testImplementation \"org.springframework.security:spring-security-test\"\n    testImplementation \"org.springframework.boot:spring-boot-test\"\n    testImplementation \"io.projectreactor.tools:blockhound-junit-platform:${blockhoundJunitPlatformVersion}\"\n    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:${junitPlatformLauncherVersion}'\n    testImplementation \"com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}\"\n    testRuntimeOnly \"com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}\"\n    testImplementation \"de.flapdoodle.embed:de.flapdoodle.embed.mongo\"\n    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here\n}\n\nif (project.hasProperty(\"gae\")) {\n    task createPom {\n        def basePath = 'build/resources/main/META-INF/maven'\n        doLast {\n            pom {\n                withXml(dependencyManagement.pomConfigurer)\n            }.writeTo(\"${basePath}/${project.group}/${project.name}/pom.xml\")\n        }\n    }\n    bootJar.dependsOn = [createPom]\n}\n\ntask cleanResources(type: Delete) {\n    delete \"build/resources\"\n}\n\nwrapper {\n    gradleVersion = \"6.8.3\"\n}\n\ncompileJava.dependsOn processResources\nprocessResources.dependsOn bootBuildInfo\n"
        },
        "database": "MongoDB",
        "build_system": "Gradle",
        "config_files": {},
        "static_files": {
            "jhipster-k8s/store/src/main/resources/logback-spring.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration>\n\n<configuration scan=\"true\">\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\"/>\n\n<!-- The FILE and ASYNC appenders are here as examples for a production configuration -->\n<!--\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <charset>utf-8</charset>\n            <Pattern>%d %-5level [%thread] %logger{0}: %msg%n</Pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\"/>\n    </appender>\n\n    <root level=\"${logging.level.root}\">\n        <appender-ref ref=\"ASYNC\"/>\n    </root>\n-->\n\n    <logger name=\"javax.activation\" level=\"WARN\"/>\n    <logger name=\"javax.mail\" level=\"WARN\"/>\n    <logger name=\"javax.management.remote\" level=\"WARN\"/>\n    <logger name=\"javax.xml.bind\" level=\"WARN\"/>\n    <logger name=\"ch.qos.logback\" level=\"WARN\"/>\n    <logger name=\"com.netflix\" level=\"WARN\"/>\n    <logger name=\"com.netflix.config.sources.URLConfigurationSource\" level=\"ERROR\"/>\n    <logger name=\"com.netflix.discovery\" level=\"INFO\"/>\n    <logger name=\"com.ryantenney\" level=\"WARN\"/>\n    <logger name=\"com.sun\" level=\"WARN\"/>\n    <logger name=\"com.zaxxer\" level=\"WARN\"/>\n    <logger name=\"io.netty\" level=\"WARN\"/>\n    <logger name=\"org.apache\" level=\"WARN\"/>\n    <logger name=\"org.apache.catalina.startup.DigesterFactory\" level=\"OFF\"/>\n    <logger name=\"org.bson\" level=\"WARN\"/>\n    <logger name=\"org.hibernate.validator\" level=\"WARN\"/>\n    <logger name=\"org.mongodb.driver\" level=\"WARN\"/>\n    <logger name=\"org.reflections\" level=\"WARN\"/>\n    <logger name=\"org.springframework\" level=\"WARN\"/>\n    <logger name=\"org.springframework.web\" level=\"WARN\"/>\n    <logger name=\"org.springframework.security\" level=\"WARN\"/>\n    <logger name=\"org.springframework.cache\" level=\"WARN\"/>\n    <logger name=\"org.synchronoss\" level=\"WARN\"/>\n    <logger name=\"org.thymeleaf\" level=\"WARN\"/>\n    <logger name=\"org.xnio\" level=\"WARN\"/>\n    <logger name=\"reactor\" level=\"WARN\"/>\n    <logger name=\"springfox\" level=\"WARN\"/>\n    <logger name=\"sun.rmi\" level=\"WARN\"/>\n    <logger name=\"springfox.documentation.schema.property\" level=\"ERROR\"/>\n    <logger name=\"sun.net.www\" level=\"INFO\"/>\n    <logger name=\"sun.rmi.transport\" level=\"WARN\"/>\n    <!-- jhipster-needle-logback-add-log - JHipster will add a new log with level -->\n\n    <!-- https://logback.qos.ch/manual/configuration.html#shutdownHook and https://jira.qos.ch/browse/LOGBACK-1090 -->\n    <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/>\n\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n\n</configuration>\n"
        }
    },
    "project_structure": {
        "files": [
            "MongoDB.Dockerfile"
        ],
        "folders": [
            "scripts"
        ]
    }
}