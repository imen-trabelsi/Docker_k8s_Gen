{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "Flask==3.1.0\nrequests==2.32.3\nhttpx[http2]"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "services:\n  database-service:\n    build: './database_server'\n    container_name: database-server\n    restart: always\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=gs1resolver\n      - MONGO_INITDB_ROOT_PASSWORD=gs1resolver\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - resolver-database-volume:/data/db\n    networks:\n      - resolver-internal-network\n\n  data-entry-service:\n    build: './data_entry_server'\n    container_name: data-entry-server\n    environment:\n      - SESSION_TOKEN=secret\n      - MONGO_URI=mongodb://gs1resolver:gs1resolver@database-service:27017\n    depends_on:\n      - database-service\n    restart: always\n    networks:\n      - resolver-internal-network\n\n  web-service:\n    build: './web_server'\n    container_name: resolver-web-server\n    depends_on:\n      - database-service\n    restart: always\n    networks:\n      - resolver-internal-network\n\n  frontend-proxy-service:\n    build: './frontend_proxy_server'\n    container_name: frontend-proxy-server\n    depends_on:\n      - web-service\n      - data-entry-service\n    restart: always\n    ports:\n      - \"8080:80\"\n    networks:\n      - resolver-internal-network\n\n  test-service:\n    build: './test_suite'\n    container_name: test-service\n    restart: always\n    ports:\n      - \"4001:5000\"\n    networks:\n      - resolver-internal-network\n\nvolumes:\n  resolver-database-volume: {}\n\nnetworks:\n  resolver-internal-network:\n    name: resolver-internal-network",
            "frontend_proxy_server/Dockerfile": "FROM nginx:1.25.1-alpine\nLABEL authors=\"nick\"\n\nCOPY nginx.conf /etc/nginx/nginx.conf",
            "frontend_proxy_server/nginx.conf": "user  nginx;\n     worker_processes  1;\n\n     error_log  /var/log/nginx/error.log warn;\n     pid        /var/run/nginx.pid;\n\n     events {\n         worker_connections  1024;\n     }\n\n     http {\n         include       /etc/nginx/mime.types;\n         default_type  application/octet-stream;\n\n         log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                           '$status $body_bytes_sent \"$http_referer\" '\n                           '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n         access_log  /var/log/nginx/access.log  main;\n\n         sendfile        on;\n         #tcp_nopush     on;\n         keepalive_timeout  65;\n         gzip  on;\n\n         server {\n             listen 80;\n\n             location / {\n                 proxy_pass http://web-service:4000/api/;\n                 proxy_buffer_size 16k;\n                 proxy_buffers 4 16k;\n                 proxy_busy_buffers_size 16k;\n             }\n\n             # Use a single location block with a prefix location match\n             location /api {\n                 proxy_pass http://data-entry-service:3000;\n                 proxy_set_header Host $host;\n                 proxy_set_header X-Real-IP $remote_addr;\n                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                 proxy_set_header X-Forwarded-Proto $scheme;\n             }\n\n             location /test {\n                 proxy_pass http://test-service:2000/;\n                 proxy_set_header Host $host;\n                 proxy_set_header X-Real-IP $remote_addr;\n                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                 proxy_set_header X-Forwarded-Proto $scheme;\n             }\n         }\n     }"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "nginx.conf"
        ],
        "folders": []
    }
}