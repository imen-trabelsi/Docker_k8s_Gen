{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.ubikingenierie.ubikloadpack</groupId>\n    <artifactId>jmeter-maven-plugin-demo</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <!--  \n        <jmeter-maven-plugin.version>DEV-SNAPSHOT</jmeter-maven-plugin.version>\n        -->\n        <jmeter-maven-plugin.version>2.9.0</jmeter-maven-plugin.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>commons-codec</groupId>\n            <artifactId>commons-codec</artifactId>\n            <version>1.11</version>\n        </dependency>\n        <dependency>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-api</artifactId>\n            <version>1.7.25</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.jmeter</groupId>\n            <artifactId>ApacheJMeter_core</artifactId>\n            <version>5.1</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            \n        </plugins>\n    </build>\n    <profiles>\n        <profile>\n            <id>standalone</id>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>com.lazerycode.jmeter</groupId>\n                        <artifactId>jmeter-maven-plugin</artifactId>\n                        <version>${jmeter-maven-plugin.version}</version>\n                        <configuration>\n                            <generateReports>true</generateReports>\n                            <errorRateThresholdInPercent>61</errorRateThresholdInPercent>\n                            <testResultsTimestamp>false</testResultsTimestamp>\n                            <propertiesJMeter>\n                                <BUILD_TAG>${project.version}</BUILD_TAG>\n                                <threads>7</threads>\n                                <duration>30</duration>\n                            </propertiesJMeter>\n                            <jmeterExtensions>\n                                <artifact>kg.apc:jmeter-plugins-casutg:2.8</artifact>\n                            </jmeterExtensions>\n                            <testPlanLibraries>\n                                <artifact>com.ubikingenierie.ubikloadpack:jmeter-maven-plugin-demo:${project.version}</artifact>\n                            </testPlanLibraries>\n                            <excludedArtifacts>\n                               <exclusion>org.slf4j:slf4j-nop</exclusion>\n                               <exclusion>avalon-framework:*</exclusion>\n                               <exclusion>org.apache.tika:*</exclusion>\n                               <exclusion>excalibur-datasource:excalibur-datasource</exclusion>\n                               <exclusion>excalibur-instrument:excalibur-instrument</exclusion>\n                               <exclusion>excalibur-logger:excalibur-logger</exclusion>\n                               <exclusion>excalibur-pool:*</exclusion>\n                               <exclusion>org.beanshell:bsh:jar:2.0b5</exclusion>\n                            </excludedArtifacts>\n                            <jMeterProcessJVMSettings>\n                                <arguments>\n                                    <argument>-XX:MaxMetaspaceSize=256m</argument>\n                                    <argument>-Xmx1024m</argument>\n                                    <argument>-Xms1024m</argument>\n                                </arguments>\n                            </jMeterProcessJVMSettings>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>jmeter-tests</id>\n                                <phase>verify</phase>\n                                <goals>\n                                    <!-- Required after 2.9.0 -->\n                                    <!-- \n                                    <goal>configure</goal>\n                                    -->\n                                    <goal>jmeter</goal>\n                                    <goal>results</goal>\n                                </goals>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        <profile>\n            <id>worker</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>org.codehaus.groovy.maven</groupId>\n                        <artifactId>gmaven-plugin</artifactId>\n                        <version>1.0</version>\n                        <executions>\n                            <execution>\n                                <phase>generate-resources</phase>\n                                <goals>\n                                    <goal>execute</goal>\n                                </goals>\n                                <configuration>\n                                    <source>\n                                        project.properties[\"hostname\"] = InetAddress.getLocalHost().getHostName()\n                                    </source>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                    <plugin>\n                        <groupId>com.lazerycode.jmeter</groupId>\n                        <artifactId>jmeter-maven-plugin</artifactId>\n                        <version>${jmeter-maven-plugin.version}</version>\n                        <configuration>\n                            <propertiesJMeter>\n                                <server.rmi.ssl.disable>true</server.rmi.ssl.disable>\n                            </propertiesJMeter>\n                            <jmeterExtensions>\n                                <artifact>kg.apc:jmeter-plugins-casutg:2.8</artifact>\n                            </jmeterExtensions>\n                            <testPlanLibraries>\n                                <artifact>com.ubikingenierie.ubikloadpack:jmeter-maven-plugin-demo:${project.version}</artifact>\n                            </testPlanLibraries>\n                            <excludedArtifacts>\n                               <exclusion>org.slf4j:slf4j-nop</exclusion>\n                               <exclusion>avalon-framework:*</exclusion>\n                               <exclusion>org.apache.tika:*</exclusion>\n                               <exclusion>excalibur-datasource:excalibur-datasource</exclusion>\n                               <exclusion>excalibur-instrument:excalibur-instrument</exclusion>\n                               <exclusion>excalibur-logger:excalibur-logger</exclusion>\n                               <exclusion>excalibur-pool:*</exclusion>\n                               <exclusion>org.beanshell:bsh:jar:2.0b5</exclusion>\n                            </excludedArtifacts>\n                            <jMeterProcessJVMSettings>\n                                <arguments>\n                                    <argument>-XX:MaxMetaspaceSize=256m</argument>\n                                    <argument>-Xmx1024m</argument>\n                                    <argument>-Xms1024m</argument>\n                                </arguments>\n                            </jMeterProcessJVMSettings>\n                            <exportedRmiHostname>${hostname}</exportedRmiHostname>\n                            <serverPort>3010</serverPort>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>start-jmeter-server</id>\n                                <goals>\n                                    <!-- Required after 2.9.0 -->\n                                    <!-- \n                                    <goal>configure</goal>\n                                    -->\n                                    <goal>remote-server</goal>\n                                </goals>\n                                <phase>verify</phase>\n                                <configuration>\n                                    <runInBackground>false</runInBackground>\n                                </configuration>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n        \n        <profile>\n            <id>controller</id>\n            <build>\n                <plugins>\n                    <plugin>\n                        <groupId>com.lazerycode.jmeter</groupId>\n                        <artifactId>jmeter-maven-plugin</artifactId>\n                        <version>${jmeter-maven-plugin.version}</version>\n                        <configuration>\n                            <propertiesUser>\n                                <server.rmi.ssl.disable>true</server.rmi.ssl.disable>\n                            </propertiesUser>\n                            <propertiesGlobal>\n                                <BUILD_TAG>${project.version}</BUILD_TAG>\n                                <threads>7</threads>\n                                <duration>30</duration>\n                            </propertiesGlobal>\n                            <generateReports>true</generateReports>\n                            <jmeterExtensions>\n                                <artifact>kg.apc:jmeter-plugins-casutg:2.8</artifact>\n                            </jmeterExtensions>\n                            <testPlanLibraries>\n                                <artifact>com.ubikingenierie.ubikloadpack:jmeter-maven-plugin-demo:${project.version}</artifact>\n                            </testPlanLibraries>\n                            <excludedArtifacts>\n                               <exclusion>org.slf4j:slf4j-nop</exclusion>\n                               <exclusion>avalon-framework:*</exclusion>\n                               <exclusion>org.apache.tika:*</exclusion>\n                               <exclusion>excalibur-datasource:excalibur-datasource</exclusion>\n                               <exclusion>excalibur-instrument:excalibur-instrument</exclusion>\n                               <exclusion>excalibur-logger:excalibur-logger</exclusion>\n                               <exclusion>excalibur-pool:*</exclusion>\n                               <exclusion>org.beanshell:bsh:jar:2.0b5</exclusion>\n                            </excludedArtifacts>\n                            <jMeterProcessJVMSettings>\n                                <arguments>\n                                    <argument>-XX:MaxMetaspaceSize=256m</argument>\n                                    <argument>-Xmx1024m</argument>\n                                    <argument>-Xms1024m</argument>\n                                </arguments>\n                            </jMeterProcessJVMSettings>\n                            <remoteConfig>\n                                <serverList>${serverList}</serverList>\n                                <startAndStopServersForEachTest>true</startAndStopServersForEachTest>\n                            </remoteConfig>\n                        </configuration>\n                        <executions>\n                            <execution>\n                                <id>performance-test</id>\n                                <goals>\n                                    <!-- Required after 2.9.0 -->\n                                    <!-- \n                                    <goal>configure</goal>\n                                    -->\n                                    <goal>jmeter</goal>\n                                    <goal>results</goal>\n                                </goals>\n                                <phase>verify</phase>\n                            </execution>\n                        </executions>\n                    </plugin>\n                </plugins>\n            </build>\n        </profile>\n    </profiles>\n</project>"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "local/kafka/docker-compose.yml": "version: \"2\"\nservices:\n  zookeeper:\n    image: wurstmeister/zookeeper\n    ports:\n      - \"2181:2181\"\n    environment:\n      zk_id: \"1\"\n  kafka:\n    image: wurstmeister/kafka\n    container_name: tc-common-kafka\n    depends_on:\n      - zookeeper\n    ports:\n      - \"9092:9092\"\n    environment:\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n  kafka-client:\n    build: ./kafka-client\n    depends_on:\n      - kafka\n      - zookeeper\n",
            "Dockerfile": "FROM debian:11.6\nENV NVM_VERSION=v0.39.3\nENV NODE_VERSION=12.16.1\nRUN apt update\nRUN apt install -y \\\n    gnupg curl wget netbase procps git \\\n    apt-transport-https ca-certificates openssh-client \\\n    python3-pip\nRUN apt install -y \\\n    yarn \\\n    libpq-dev   \nRUN pip3 install awscli     \nRUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash\nENV NVM_DIR=/root/.nvm\nRUN . \"$NVM_DIR/nvm.sh\" && nvm install ${NODE_VERSION}\nRUN . \"$NVM_DIR/nvm.sh\" && nvm use v${NODE_VERSION}\nRUN . \"$NVM_DIR/nvm.sh\" && nvm alias default v${NODE_VERSION}\nENV PATH=\"/root/.nvm/versions/node/v${NODE_VERSION}/bin/:${PATH}\"\nRUN node --version\nRUN npm --version\n# Create app directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n\n# Bundle app source\nCOPY . /usr/src/app\n# Install app dependencies\nRUN npm install\nRUN npm run -s build\n\nEXPOSE 3000\n\nENTRYPOINT [\"npm\",\"run\"]\n#CMD [\"npm\", \"start\"]\n",
            ".circleci/config.yml": "version: 2.1\npython_env: &python_env\n  docker:\n    - image: cimg/python:3.11.11-browsers\ninstall_awscli: &install_awscli\n  name: \"Install awscli\"\n  command: |\n    sudo apt update\n    sudo apt install jq python3-pip\n    sudo pip3 install awscli --upgrade\ninstall_deploysuite: &install_deploysuite\n  name: Installation of install_deploysuite.\n  command: |\n    git clone --branch v1.4.15 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript\n    cp ./../buildscript/master_deploy.sh .\n    cp ./../buildscript/buildenv.sh .\n    cp ./../buildscript/awsconfiguration.sh .\n\n# Instructions of deployment\ndeploy_steps: &deploy_steps\n  - checkout\n  - attach_workspace:\n      at: ./workspace\n  - run: *install_awscli\n  - run: *install_deploysuite\n  - setup_remote_docker\n  - run: docker build -t ${APPNAME}:latest .\n  - deploy:\n      name: \"Running Masterscript -  deploy tc-project-service \"\n      command: |\n        ./awsconfiguration.sh $DEPLOY_ENV\n        source awsenvconf\n        ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-deployvar\n        source buildenvvar\n        ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${LOGICAL_ENV}-global-appvar,${LOGICAL_ENV}-${APPNAME}-appvar -i ${APPNAME} -p FARGATE\n\n         echo \"======= Running Masterscript - deploy projects-api-consumers ===========\"\n        if [ -e ${LOGICAL_ENV}-${APPNAME}-appvar.json ]; then  sudo rm -vf ${LOGICAL_ENV}-${APPNAME}-appvar.json; fi\n        ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-consumers-deployvar\n        source buildenvvar\n        ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${LOGICAL_ENV}-global-appvar,${LOGICAL_ENV}-${APPNAME}-appvar -i ${APPNAME} -p FARGATE\n\njobs:\n  UnitTests:\n    docker:\n      - image: cimg/node:12.22.12\n      - image: circleci/postgres:9.6.2-alpine\n        environment:\n        - POSTGRES_USER: circle_test\n        - POSTGRES_DB: circle_test\n      - image: elasticsearch:2.3\n    environment:\n      DEPLOY_ENV: \"DEV\"\n      LOGICAL_ENV: \"dev\"\n      APPNAME: \"projects-api\"\n    steps:\n      - checkout\n      - run:\n          name: \"Install dependeency\"\n          command: |\n              sudo apt update\n              sudo apt install curl\n              sudo apt install python3-pip\n      - run: *install_awscli\n      - run: *install_deploysuite\n      - setup_remote_docker\n      - restore_cache:\n          key: test-node-modules-{{ checksum \"package.json\" }}\n      - run: npm install\n      - save_cache:\n          key: test-node-modules-{{ checksum \"package.json\" }}\n          paths:\n            - node_modules\n      - run: npm run lint\n      - run:\n          name: \"Running Masterscript -  deploy tc-project-service \"\n          command: |\n            ./awsconfiguration.sh $DEPLOY_ENV\n            source awsenvconf\n            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-testvar\n            source buildenvvar\n            npm run test\n            rm -f buildenvvar\n      - run: npm run build\n      - persist_to_workspace:\n          root: .\n          paths:\n            - dist\n\n  deployProd:\n    <<: *python_env\n    environment:\n      DEPLOY_ENV: \"PROD\"\n      LOGICAL_ENV: \"prod\"\n      APPNAME: \"projects-api\"\n    steps: *deploy_steps\n\n  deployDev:\n    <<: *python_env\n    environment:\n      DEPLOY_ENV: \"DEV\"\n      LOGICAL_ENV: \"dev\"\n      APPNAME: \"projects-api\"\n    steps: *deploy_steps\n\n  Connect-Performance-Testing:\n    docker:\n      # specify the version you desire here\n      - image: circleci/openjdk:8-jdk\n\n      # Specify service dependencies here if necessary\n      # CircleCI maintains a library of pre-built images\n      # documented at https://circleci.com/docs/2.0/circleci-images/\n      # - image: circleci/postgres:9.4\n\n    working_directory: ~/repo\n\n    environment:\n      # Customize the JVM maximum heap limit\n      MAVEN_OPTS: -Xmx3200m\n\n    steps:\n      - checkout\n\n      # Download and cache dependencies\n      - restore_cache:\n          keys:\n          - v1-dependencies-{{ checksum \"pom.xml\" }}\n          # fallback to using the latest cache if no exact match is found\n          - v1-dependencies-\n\n      - run: mvn dependency:go-offline\n\n      - save_cache:\n          paths:\n            - ~/.m2\n          key: v1-dependencies-{{ checksum \"pom.xml\" }}\n\n      - run: mvn verify\n\n      - store_artifacts:\n          path: target/jmeter/reports\n\nworkflows:\n  version: 2\n  Connect Project Services:\n    jobs:\n      - deployDev:\n          context : org-global\n          filters:\n            branches:\n              only: ['develop', 'migration-setup']\n      - deployProd:\n          context : org-global\n          filters:\n            branches:\n              only: ['master']       \n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "create-multiple-postgresql-databases.sh"
        ],
        "folders": []
    }
}