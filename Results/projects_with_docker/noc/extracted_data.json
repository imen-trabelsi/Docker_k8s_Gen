{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "# Black section\n[tool.black]\nline-length = 100 # Must be same as tool.ruff.line-length\ntarget-version = ['py310'] \n\n[tool.coverage.run]\nomit = ['*tests*']\n\n[tool.coverage.report]\nignore_errors = true\n\n[tool.coverage.html]\ndirectory = \"build/coverage\"\n\n[tool.ruff]\n# Exclude a variety of commonly ignored directories.\nexclude = [\".git\", \"build\", \"dist\", \"var\", \"share\", \"collections\"] \nline-length = 100 # Must be same as tool.black.line-length\n# Assume Python 3.10\ntarget-version = \"py310\"\n# Enable\nlint.select = [\n  # \"E\", # Pycodestyle Error\n  \"F\", # Pyflakes\n  \"W\", # Pycodestyle Warning\n  # \"C90\", # mccabe\n  # \"I\", # isort\n  # \"D\", # Pydocstyle\n  # \"YTT\", # flake8-2020\n  # \"ANN\", # flake8-annotations\n  # \"S\", # flake8-bandit\n  # \"BLE\", # flake8-blind-except\n  # \"B\", # flake8-bugbear\n  \"A\", # flake8-builtins\n  # \"C4\", # flake8-comprehensions \n  # \"EM\", # flake8-errmsg\n  # \"ISC\", # flake8-implicit-str-concat\n  # \"ICN\", # flake8-import-conventions\n  # \"PT\", # flake8-pytest-style\n  # \"RET\", # flake8-return\n  # \"SIM\", # flake8-simplify\n  \"PLC\", # pylint\n  \"PLE\", # pylint\n  \"PLR\", # pylint\n  # \"PLW\", # pylint\n  # \"PIE\", # flake8-pie\n  # \"RUF\", # ruff specific\n]\n# Always autofix, but never try to fix `F401` (unused imports).\nfix = false #fix = true\nlint.ignore = [\n  \"A001\", # A001 Variable `{name}` is shadowing a python builtin\n  \"A002\", # A002 Argument `{name}` is shadowing a python builtin\n  \"A003\", # Class attribute `{name}` is shadowing a python builtin\"\n  \"D203\",\n  \"D212\",\n  \"D107\",\n  \"PLR0912\", # Too many branches\n  \"PLR0911\", # Too many return statements\n  \"PLR0913\", # Too many arguments to function call\n  \"PLR0915\", # Too many statements\n  \"PLR2004\", # Magic value used in comparison, consider replacing {v} with a constant variable\n  \"PLR2044\", # Line with empty comment\n  \"PLR5501\", # Use `elif` instead of `else` then `if`, to reduce indentation\n  \"PLR1714\", # Consider merging multiple comparisons: `f1 not in (f0, f2)`. Use a `set` if the elements are hashable.\n  \"PLR1730\", # Replace `if` statement with `width = max(width, max_column_data_length[c])`\n  \"PLR1704\", # Redefining argument with the local name `name`\n  \"PLR1711\", # Useless `return` statement at end of function\n  \"F811\", # Redefinition of unused `ReportBand` from line 66\n] \nlint.unfixable = [\n  \"F401\",\n  \"F841\", # unused-variable\n] \n\n[tool.ruff.lint.flake8-quotes]\ndocstring-quotes = \"double\"\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.lint.mccabe]\nmax-complexity = 12\n\n[tool.ruff.lint.per-file-ignores]\n\"*/migrations/*.py\" = [\n  \"D100\", # Missing docstring in public module\n  \"D101\", # Missing docstring in public class\n  \"D102\", # Missing docstring in public method\n  \"D103\", # Missing docstring in public function\n  \"D104\", # Missing docstring in public package\n]\n\"cmibs/*.py\" = [\n  \"D100\", # Missing docstring in public module\n  \"D101\", # Missing docstring in public class\n  \"D102\", # Missing docstring in public method\n  \"D103\", # Missing docstring in public function\n  \"D104\", # Missing docstring in public package\n]\n\"tests/*.py\" = [\n  \"D100\", # Missing docstring in public module\n  \"D101\", # Missing docstring in public class\n  \"D102\", # Missing docstring in public method\n  \"D103\", # Missing docstring in public function\n  \"D104\", # Missing docstring in public package\n  \"S101\", # Use of assert detected\n  \"PLR2004\", # Magic value used in comparison, consider replacing {value} with a constant variable\n  \"PT011\", # {exc} is to broad\n]\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            "Dockerfile": "# Basic Python image\nFROM python:3.11-slim-bookworm AS python\n\n# Build speedups\nFROM python AS build\nCOPY .requirements/ /build/.requirements\nCOPY speedup/ /build/speedup/\nWORKDIR /build\nRUN \\\n    set -x\\\n    && apt-get update\\\n    && apt-get install -y --no-install-recommends \\\n    build-essential \\\n    && pip install --upgrade pip \\\n    && pip install -r .requirements/cython.txt \\\n    && cythonize -i speedup/*.pyx\n\n# Base layer containing system packages and requirements\nFROM python AS code\nENV\\\n    DJANGO_SETTINGS_MODULE=noc.settings \\\n    NOC_THREAD_STACK_SIZE=524288 \\\n    NOC_PYTHON_INTERPRETER=/usr/local/bin/python3 \\\n    NOC_LISTEN=\"auto:1200\" \\\n    PYTHONPATH=/opt \\\n    PROJ_DIR=/usr \\\n    NOC_SPEEDUP_PATH=/opt/nocspeedup\nCOPY . /opt/noc/\nCOPY --from=build /build/speedup/*.so /opt/nocspeedup/\nWORKDIR /opt/noc/\n\nRUN \\\n    set -x \\\n    && apt-get update\\\n    && apt-get install -y --no-install-recommends \\\n    bzip2 \\\n    curl \\\n    libjemalloc2 \\\n    libpq-dev \\\n    && pip3 install --upgrade pip \\\n    && pip3 install\\\n    -r ./.requirements/node.txt\\\n    -r ./.requirements/bh.txt\\\n    -r ./.requirements/activator.txt\\\n    -r ./.requirements/classifier.txt\\\n    -r ./.requirements/cache-redis.txt\\\n    -r ./.requirements/login-ldap.txt\\\n    -r ./.requirements/login-pam.txt\\\n    -r ./.requirements/login-radius.txt\\\n    -r ./.requirements/prod-tools.txt\\\n    -r ./.requirements/testing.txt\\\n    -r ./.requirements/sender-kafka.txt\\\n    -r ./.requirements/ping.txt\\\n    && python3 ./scripts/deploy/install-packages requirements/web.json \\\n    && python3 ./scripts/deploy/install-packages requirements/card.json \\\n    && python3 ./scripts/deploy/install-packages requirements/bi.json \\\n    && python3 ./scripts/deploy/install-packages requirements/theme-noc.json \\\n    && (curl -L https://get.static-web-server.net/ | sed 's/sudo //g' | sh) \\\n    && find /opt/noc/ -type f -name \"*.py\" -print0 | xargs -0 python3 -m py_compile \\\n    && pip cache purge \\\n    && rm -rf /var/lib/apt/lists/* /tmp/*.whl\\\n    && useradd -d /opt/noc -M -r -u 1200 -U noc -s /bin/sh \\\n    && chown noc /opt/noc\n\n# https://code.getnoc.com/noc/noc/-/issues/1480\n#HEALTHCHECK --interval=10s --timeout=1s \\\n#    CMD curl -f http://0.0.0.0:1200/health/ || exit 1\n\n#\n# Developer's container\n#\nFROM code AS dev\n\nRUN \\\n    apt-get update\\\n    && apt-get install -y --no-install-recommends \\\n    snmp \\\n    vim \\\n    git \\\n    nodejs \\\n    npm \\\n    && pip3 install\\\n    -r ./.requirements/dev.txt\\\n    -r ./.requirements/lint.txt\\\n    -r ./.requirements/test.txt\\\n    -r ./.requirements/docs.txt\\\n    && npm install -g eslint@8\\\n    && rm -rf /var/lib/apt/lists/*\n\n#\n# Self-serving static ui files\n#\nFROM nginx:alpine AS static\n\nRUN apk add --no-cache curl\n\nCOPY --from=code /usr/local/lib/python3.11/site-packages/django /usr/lib/python3.11/site-packages/django\nCOPY --from=code /opt/noc/ui /opt/noc/ui\n",
            ".gitlab-ci.yml": "---\nstages:\n  - Lint\n  - Prebuild\n  - Test\n  - Build\n  - Upload\n\ninclude:\n  - project: \"noc/common-jobs\"\n    ref: stable\n    file:\n      - /templates/upload.yml\n  - local: /ansible/.ansible-ci.yml\n\nworkflow:\n  rules:\n    - if: $CI_MERGE_REQUEST_IID\n    - if: $CI_COMMIT_TAG\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n    - if: '$CI_PIPELINE_SOURCE == \"web\"'\n    - if: '$CI_PIPELINE_SOURCE == \"schedule\"'\n\n#Linters section\ncheck labels:\n  stage: Lint\n  image: registry.getnoc.com/infrastructure/noc-py-lint:master\n  script:\n    - FLIST=$(git --no-pager diff --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA)\n    - python ./scripts/check-labels.py --verbose --junit-report=build/reports/labels-junit.xml $FLIST\n  only:\n    - merge_requests\n  tags:\n    - docker\n  artifacts:\n    reports:\n      junit: ./build/reports/labels-junit.xml\n    expire_in: 7 days\n  allow_failure: true\n  retry: 2\n\npy-lint:\n  stage: Lint\n  image: python:3.11-bullseye\n  script:\n    - set -x\n    # Install python dependencies\n    - pip install --upgrade pip\n    - pip install -r .requirements/lint.txt\n    # Create directory for reports\n    - mkdir -p build/reports\n    # Check formatting\n    - black --target-version py310 --check --diff . 2>&1 | ./scripts/ci/black-junit.py --tee --output=build/reports/junit-black.xml\n    - STATUS_BLACK=$?\n    # Ruff linter\n    - ruff check --output-format=grouped . || true # To see full errors list in stdout\n    - ruff check --diff --output-format=grouped -q . || true  # To see stdout in joblog\n    - ruff check -q --output-format=junit . > build/reports/junit-ruff.xml\n    - STATUS_RUFF=$?\n    # Final result\n    - test $STATUS_BLACK -a $STATUS_RUFF\n  only:\n    refs:\n      - merge_requests\n    changes:\n      - \"*.py\"\n      - \"**/*.py\"\n      - \".requirements/*.txt\"\n      - \".gitlab-ci.yml\"\n      - \"pyproject.toml\"\n  tags:\n    - docker\n  artifacts:\n    reports:\n      junit: ./build/reports/junit-*.xml\n    expire_in: 7 days\n  allow_failure: false\n\nmypy:\n  stage: Lint\n  image: registry.getnoc.com/infrastructure/noc-py-lint:master\n  script:\n    - set -x\n    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep \".py$\" | grep -v \".docker/\"|| true)\n    - >\n      if [ ! -z \"$FLIST\" ];\n      then\n        mypy --follow-imports=skip --ignore-missing-imports $FLIST;\n      else\n        echo \"No files to lint\"\n        true;\n      fi\n  only:\n    refs:\n      - merge_requests\n    changes:\n      - \"*.py\"\n      - \"**/*.py\"\n  tags:\n    - docker\n  allow_failure: true\n\neslint:\n  stage: Lint\n  image: node:22-bookworm\n  script:\n    - set -x\n    - export ESLINT_USE_FLAT_CONFIG=false\n    # Get list of changed files\n    # @todo: Deprecated, remove in future\n    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep \"\\.js$\" | grep -v \".docker/\"|| true)\n    - >\n      if [ ! -z \"$FLIST\" ];\n      then\n        npm install -g eslint\n        eslint $FLIST\n      else\n        echo \"No files to lint\"\n        true;\n      fi\n  only:\n    refs:\n      - merge_requests\n    changes:\n      - \"*.js\"\n      - \"**/*.js\"\n  tags:\n    - docker\n  allow_failure: true\n\nprettier:\n  stage: Lint\n  image: registry.getnoc.com/infrastructure/prettier:master\n  script:\n    - set -x\n    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep \"\\.(js|json|yml|css|md)$\" | grep -v \".docker/\"|| true)\n    - >\n      if [ ! -z \"$FLIST\" ];\n      then\n        /usr/local/bin/prettier --config=.prettierrc --check $FLIST\n      else\n        echo \"No files to lint\"\n        true;\n      fi\n  only:\n    refs:\n      - merge_requests\n    changes:\n      - \"*.json\"\n      - \"*.css\"\n      - \"*.yml\"\n      - \"*.md\"\n      - \"**/*.json\"\n      - \"**/*.css\"\n      - \"**/*.yml\"\n      - \"**/*.md\"\n  tags:\n    - docker\n  allow_failure: false\n\n# Test python code section\npy:test:\n  stage: Test\n  before_script:\n    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests\n    - mv .dockerignore .dockerignore.prod\n    - cp .dockerignore.tests .dockerignore\n    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY\n  script:\n    # see docker/docker-compose.yml for complete list of migrations\n    - ls -al\n    - >\n      docker-compose\n      -f .docker/docker-compose.yml\n      -p \"${DOCKER_COMPOSE_PROJECT}\"\n      build pytests\n    - >\n      docker-compose\n      -f .docker/docker-compose.yml\n      -p \"${DOCKER_COMPOSE_PROJECT}\"\n      up\n      --exit-code-from pytests\n      pytests\n  after_script:\n    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests\n    - JUNIT_XML_REPORT=build/reports/py-test-junit.xml\n    - mkdir -p build/reports/\n    - >\n      docker cp\n      \"${DOCKER_COMPOSE_PROJECT}_pytests_1:/opt/noc/${JUNIT_XML_REPORT}\"\n      \"${JUNIT_XML_REPORT}\"\n    - mv .dockerignore.prod .dockerignore\n    - >\n      docker-compose\n      -f .docker/docker-compose.yml\n      -p \"${DOCKER_COMPOSE_PROJECT}\"\n      down -v\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n      changes:\n        - \"*.py\"\n        - \"**/*.py\"\n        - requirements.txt\n        - \"**/*.json\"\n  tags:\n    - shell\n  allow_failure: false\n  artifacts:\n    reports:\n      junit: ./build/reports/py-test-junit.xml\n    expire_in: 7 days\n\n# Build Docs section\nbuild:Docs:\n  stage: Build\n  environment: docs\n  image: python:3.11-bullseye\n  script:\n    - set -e -x\n    - pip3 install -r .requirements/docs.txt\n    - mkdocs build\n    - python3 scripts/docs/minify.py\n  tags:\n    - docker\n  artifacts:\n    paths:\n      - build/docs\n    expire_in: 2 hours\n  rules:\n    - if: ('$CI_PIPELINE_SOURCE == \"merge_request_event\"' || '$CI_COMMIT_BRANCH == \"master\"')\n      changes:\n        - \"docs/*\"\n        - \"docs/**/*\"\n        - \"mkdocs.yml\"\n        - \"macros.py\"\n        - \".requirements/docs.txt\"\n\n#Build Image section\nbuild:Release Image:\n  stage: Build\n  script:\n    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY\n    # registry.getnoc.com/noc/noc/code:stable\n    - docker build --target code -t $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG -f Dockerfile .\n    # registry.getnoc.com/noc/noc/dev:stable\n    - docker build --target dev -t $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG -f Dockerfile .\n    # registry.getnoc.com/noc/noc/static:stable\n    - docker build --target static -t $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG -f Dockerfile .\n    - docker push $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG\n    - docker push $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG\n    - docker push $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG\n    - docker rmi $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG\n  tags:\n    - shell\n  only:\n    - tags\n\nbuild:Master Image:\n  stage: Build\n  script:\n    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY\n    # registry.getnoc.com/noc/noc/code:stable\n    - docker build --target code -t $CI_REGISTRY_IMAGE/code:master -f Dockerfile .\n    # registry.getnoc.com/noc/noc/dev:stable\n    - docker build --target dev -t $CI_REGISTRY_IMAGE/dev:master -f Dockerfile .\n    # registry.getnoc.com/noc/noc/static:stable\n    - docker build --target static -t $CI_REGISTRY_IMAGE/static:master -f Dockerfile .\n    - docker push $CI_REGISTRY_IMAGE/code:master\n    - docker push $CI_REGISTRY_IMAGE/dev:master\n    - docker push $CI_REGISTRY_IMAGE/static:master\n    - docker rmi $CI_REGISTRY_IMAGE/code:master $CI_REGISTRY_IMAGE/dev:master $CI_REGISTRY_IMAGE/static:master\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"schedule\" && $BUILD_MASTER == \"true\"'\n  tags:\n    - shell\n\n#Build web section\nbuild:web:\n  stage: Build\n  image: node:12\n  script:\n    - cd scripts/build/web\n    - npm install\n    - node src/index.js\n  tags:\n    - docker\n  only:\n    refs:\n      - merge_requests\n    changes:\n      - \"ui/web/**/*.js\"\n      - \"ui/web/**/*.css\"\n      - \"scripts/build/web/**/*\"\n  artifacts:\n    paths:\n      - dist/ui/pkg/web\n      - dist/ui/pkg/web.debug\n\n.build_rust:\n  image: rust:1.63\n  script:\n    - set -x\n    - cd rust/$BUILD_TARGET\n    - export CARGO_TARGET_DIR=../../build/rust\n    - cargo check\n    - cargo test\n    - cargo build --release\n  rules:\n    - if: ('$CI_PIPELINE_SOURCE == \"merge_request_event\"' || '$CI_COMMIT_BRANCH == \"master\"')\n      changes:\n        - rust/$BUILD_TARGET/*\n        - rust/$BUILD_TARGET/**/*\n  tags:\n    - docker\n  artifacts:\n    paths:\n      - build/rust/release\n    expire_in: 7 days\n\n# Upload section\nupload docs:\n  stage: Upload\n  environment: docs\n  extends: .upload\n  variables:\n    SOURCE: build/docs/*\n    DEST: cdn/$S3_BUCKET/\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"schedule\"'\n      when: never\n    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH\n      changes:\n        - \"docs/*\"\n        - \"docs/**/*\"\n        - \"mkdocs.yml\"\n        - \"macros.py\"\n        - \".requirements/docs.txt\"\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".ansible-lint",
            ".dockerignore",
            ".dockerignore.tests",
            ".eslintrc.json",
            ".flake8",
            ".gitignore",
            ".gitlab-ci.yml",
            ".prettierrc",
            ".yamllint",
            "AUTHORS",
            "CODEOWNERS",
            "Dockerfile",
            "INSTALL",
            "LICENSE.md",
            "README.md",
            "VERSION",
            "__init__.py",
            "config.py",
            "macros.py",
            "mkdocs.yml",
            "models.py",
            "noc",
            "pyproject.toml",
            "settings.py",
            "setup.py",
            "unittest.cfg",
            "urls.py"
        ],
        "folders": [
            ".devcontainer",
            ".docker",
            ".gitlab",
            ".requirements",
            "aaa",
            "ansible",
            "bi",
            "cm",
            "cmibs",
            "collections",
            "commands",
            "core",
            "crm",
            "dev",
            "dns",
            "docker",
            "docs",
            "examples",
            "features",
            "fixes",
            "fm",
            "gis",
            "inv",
            "ip",
            "kb",
            "main",
            "maintenance",
            "peer",
            "phone",
            "pm",
            "project",
            "requirements",
            "rust",
            "sa",
            "scripts",
            "services",
            "share",
            "sla",
            "speedup",
            "support",
            "templates",
            "templatetags",
            "tests",
            "ui",
            "vc",
            "wf"
        ]
    }
}