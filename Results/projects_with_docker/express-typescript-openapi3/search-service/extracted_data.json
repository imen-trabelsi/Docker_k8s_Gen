{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"express-ts-openapi3\",\n  \"version\": \"1.0.0\",\n  \"repository\": \"express-ts-openapi3\",\n  \"description\": \"express-ts-openapi3\",\n  \"main\": \"dist/index.js\",\n  \"dependencies\": {\n    \"async-retry\": \"^1.2.3\",\n    \"aws-lambda\": \"^0.1.2\",\n    \"aws-serverless-express\": \"^3.3.6\",\n    \"bluebird\": \"^3.5.5\",\n    \"cls-hooked\": \"^4.2.2\",\n    \"compression\": \"^1.7.4\",\n    \"cors\": \"2.8.5\",\n    \"db-migrate\": \"^0.11.6\",\n    \"db-migrate-mysql\": \"^1.1.10\",\n    \"debug\": \"^4.1.1\",\n    \"elastic-apm-node\": \"^2.11.6\",\n    \"express\": \"4.17.1\",\n    \"helmet\": \"^3.18.0\",\n    \"inversify\": \"^5.0.1\",\n    \"js-yaml\": \"^3.13.1\",\n    \"jsonapi-serializer\": \"^3.6.4\",\n    \"moment\": \"^2.24.0\",\n    \"multer\": \"^1.4.1\",\n    \"node-fetch\": \"^2.6.0\",\n    \"node-uuid\": \"^1.4.8\",\n    \"oas-tools\": \"^2.1.6\",\n    \"opossum\": \"^2.2.0\",\n    \"perfy\": \"^1.1.2\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"request\": \"^2.88.0\",\n    \"request-promise\": \"^4.2.4\",\n    \"serverless-mysql\": \"^1.4.0\",\n    \"shelljs\": \"^0.8.3\",\n    \"source-map-support\": \"^0.5.12\",\n    \"winston\": \"^3.2.1\"\n  },\n  \"devDependencies\": {\n    \"@types/chai\": \"4.1.7\",\n    \"@types/chai-http\": \"4.2.0\",\n    \"@types/cls-hooked\": \"^4.3.0\",\n    \"@types/debug\": \"4.1.4\",\n    \"@types/express\": \"4.17.0\",\n    \"@types/mocha\": \"5.2.6\",\n    \"@types/node\": \"12.0.6\",\n    \"@types/node-uuid\": \"0.0.28\",\n    \"@types/opossum\": \"^1.10.1\",\n    \"@types/swagger-tools\": \"0.10.6\",\n    \"@types/winston\": \"^2.3.7\",\n    \"chai\": \"4.2.0\",\n    \"chai-http\": \"^4.3.0\",\n    \"codecov\": \"^3.5.0\",\n    \"cpx\": \"1.5.0\",\n    \"kill-port\": \"^1.5.1\",\n    \"mocha\": \"^5.2.0\",\n    \"nodemon\": \"^1.19.1\",\n    \"nyc\": \"^14.1.1\",\n    \"serverless\": \"^1.45.1\",\n    \"serverless-plugin-warmup\": \"^4.5.3-rc.1\",\n    \"sinon\": \"^7.3.2\",\n    \"supertest\": \"4.0.2\",\n    \"ts-mocha\": \"1.2.0\",\n    \"ts-node\": \"8.2.0\",\n    \"tslint\": \"5.17.0\",\n    \"typescript\": \"3.5.1\"\n  },\n  \"scripts\": {\n    \"clean\": \"rm -rf dist\",\n    \"build:copy\": \"cpx ./src/definition/* ./dist/src/definition\",\n    \"build:dev\": \"nodemon --exec ts-node -- ./src/index.ts\",\n    \"build:live\": \"npm run clean && npm run lint && tsc -p tsconfig.json && npm run build:copy && cp package* ./dist && npm install --production --prefix ./dist\",\n    \"start\": \"DEBUG=app:* node dist/src/index.js\",\n    \"dev\": \"DEBUG=app:*,fetch-circuit-breaker TS_NODE_CACHE=false npm run build:dev\",\n    \"lint\": \"tslint -p tsconfig.json\",\n    \"test\": \"DEBUG=app:* TS_NODE_CACHE=false tsc -p tsconfig.json --noEmit --skipLibCheck && nyc mocha --timeout 10000 --require ts-node/register 'test/**/*.ts' --exit\",\n    \"testOne\": \"TS_NODE_CACHE=false tsc -p tsconfig.json --noEmit --skipLibCheck && nyc mocha --timeout 10000 --require ts-node/register \",\n    \"integration-test\": \"nyc mocha integration-test/index.js\",\n    \"jmeter\": \"rm -f integration-test/log.jtl && rm -rf integration-test/report && jmeter -n -t integration-test/movie-service-api.jmeter.test.jmx -l integration-test/log.jtl -e -o integration-test/report\",\n    \"codecov\": \"nyc report --reporter=lcovonly && codecov\",\n    \"deploy\": \"npm run build:live && serverless deploy\",\n    \"chrome-debug\": \"node --debug-brk --inspect --require ts-node/register src/index.ts\"\n  },\n  \"nyc\": {\n    \"include\": [\n      \"src/**/*.ts\"\n    ],\n    \"extension\": [\n      \".ts\"\n    ],\n    \"require\": [\n      \"ts-node/register\"\n    ],\n    \"reporter\": [\n      \"text\",\n      \"text-summary\",\n      \"html\"\n    ],\n    \"sourceMap\": true\n  },\n  \"engines\": {\n    \"node\": \"10.15.3\",\n    \"npm\": \"6.4.1\"\n  },\n  \"author\": \"Daisuke Hirata\",\n  \"license\": \"ISC\"\n}\n"
        },
        "database": "MySQL",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "---\nversion: '3.7'\n\nvolumes:\n  elk-vol:   # Volume to host elk service data locally.\n    driver: 'local'\n  data-vol:  # Volume to host db service data locally.\n    driver: 'local'\n\nservices:\n  db:\n    image: mysql:5.6.44\n    command: |\n      --character-set-server=utf8 --collation-server=utf8_unicode_ci\n    ports:\n      - \"3306:3306\"  # host:container\n    volumes:\n      - data-vol:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=mysql\n    container_name: db-cont\n\n  elk:\n    build: ./elk\n    environment:\n      - LOGSTASH_START=0\n    ports:\n      - \"5601:5601\"  # host:container kibana\n      - \"9200:9200\"  # host:container elasticsearch\n    volumes:\n      - elk-vol:/usr/share/elasticsearch/data\n    container_name: elk-cont\n\n  apm:\n    image: docker.elastic.co/apm/apm-server:7.1.0\n    volumes:\n      - ./elk/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro  # apm config\n    links:\n      - elk:elk\n    depends_on:\n      - elk\n    container_name: apm-cont\n\n  cinema-catalog-service:\n    build: ./cinema-catalog-service\n    links:\n      - db:db\n      - elk:elk\n      - movies-service:movies-service\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8001:8001\"  # host:container\n    volumes:\n      - ./cinema-catalog-service:/home/nupp/app\n    container_name: cinema-catalog-service-cont\n    environment:\n      - COGNITO_USER_POOL_ID    # pass host enviroment var\n      - COGNITO_CLIENT_ID       # pass host enviroment var\n\n  movies-service:\n    build: ./movies-service\n    links:\n      - db:db\n      - elk:elk\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8002:8001\"  # host:container\n    volumes:\n      - ./movies-service:/home/nupp/app\n    container_name: movies-service-cont\n    environment:\n      - COGNITO_USER_POOL_ID    # pass host enviroment var\n      - COGNITO_CLIENT_ID       # pass host enviroment var\n\n  search-service:\n    build: ./search-service\n    links:\n      - db:db\n      - elk:elk\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8003:8001\"  # host:container\n    volumes:\n      - ./search-service:/home/nupp/app\n    container_name: search-service-cont\n",
            "search-service/Dockerfile": "FROM node:10.15.3-alpine\n\nRUN addgroup -S nupp && adduser -S -g nupp nupp\n\nENV HOME=/home/nupp\n\nCOPY . $HOME/app/\n\nADD https://github.com/Yelp/dumb-init/releases/download/v1.1.1/dumb-init_1.1.1_amd64 /usr/local/bin/dumb-init\n\nWORKDIR $HOME/app\n\nRUN chown -R nupp:nupp $HOME/* /usr/local/ && \\\n    chmod +x /usr/local/bin/dumb-init && \\\n    npm cache clean --force && \\\n    npm install && \\\n    chown -R nupp:nupp $HOME/*\n\nUSER nupp\n\nCMD [\"dumb-init\", \"npm\", \"run\", \"dev\"]\n",
            ".circleci/config.yml": "---\nversion: 2.1\n\norbs:\n  slack: circleci/slack@2.5.0\n\nexecutors:\n  default:\n    docker:\n      - image: circleci/node:10.15.3\n    working_directory: ~/repo\n\ncommands:\n  movies_service_npm_install:\n    steps:\n      - restore_cache:\n          name: movies service restore cache\n          keys:\n            - v1-dependencies-{{ checksum \"movies-service/package.json\" }}\n      - run:\n          name: movies service temporary remove .git from oas-tools\n          command: rm -rf /home/circleci/repo/movies-service/node_modules/oas-tools/.git\n          working_directory: movies-service\n      - run:\n          name: movies service npm install\n          command: npm install\n          working_directory: movies-service\n      - save_cache:\n          name: movies service save cache\n          paths:\n            - movies-service/node_modules\n          key: v1-dependencies-{{ checksum \"movies-service/package.json\" }}\n  cinema_catalog_service_npm_install:\n    steps:\n      - restore_cache:\n          name: cinema catalog service restore cache\n          keys:\n            - v1-dependencies-{{ checksum \"cinema-catalog-service/package.json\" }}\n      - run:\n          name: cinema catalog service temporary remove .git from oas-tools\n          command: rm -rf /home/circleci/repo/cinema-catalog-service/node_modules/oas-tools/.git\n          working_directory: cinema-catalog-service\n      - run:\n          name: cinema catalog service npm install\n          command: npm install\n          working_directory: cinema-catalog-service\n      - save_cache:\n          name: cinema catalog service save cache\n          paths:\n            - cinema-catalog-service/node_modules\n          key: v1-dependencies-{{ checksum \"cinema-catalog-service/package.json\" }}\n  serverless_install:\n    steps:\n      - run:\n          name: install serverless\n          command: sudo npm install -g serverless@1.40.0\n      - run:\n          name: init serverless config\n          command: serverless config credentials -k ${AWS_ACCESS_KEY} -s ${AWS_SECRET_KEY} -p aws\n\njobs:\n  movies_service_lint:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - run:\n          name: movies service lint\n          command: npm run lint\n          working_directory: movies-service\n  movies_service_test:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - run:\n          name: movies service test\n          command: npm run test\n          working_directory: movies-service\n      # should be considered to use codecov\n      - run:\n          name: movies service codecov\n          command: npm run codecov\n          working_directory: movies-service\n  movies_service_deploy:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - serverless_install\n      - run:\n          name: movies service db migrate\n          command: serverless invoke -f db-migrate-up -l | grep 500\n          working_directory: movies-service\n      - deploy:\n          name: movies service deploy\n          command: npm run deploy\n          working_directory: movies-service\n      - slack/notify:\n          color: \"#42e2f4\"\n          mentions: \"dh\"\n          message: \"movies_service_deploy is done\"\n\n  cinema_catalog_service_lint:\n    executor: default\n    steps:\n      - checkout\n      - cinema_catalog_service_npm_install\n      - run:\n          name: cinema catalog service lint\n          command: npm run lint\n          working_directory: cinema-catalog-service\n  cinema_catalog_service_test:\n    executor: default\n    steps:\n      - checkout\n      - cinema_catalog_service_npm_install\n      - run:\n          name: cinema catalog service test\n          command: npm run test\n          working_directory: cinema-catalog-service\n      # should be considered to use codecov\n      - run:\n          name: cinema catalog service codecov\n          command: npm run codecov\n          working_directory: cinema-catalog-service\n\nworkflows:\n  movies_service:\n    jobs:\n      - movies_service_lint\n      - movies_service_test:\n          requires:\n            - movies_service_lint\n      - movies_service_deploy:\n          requires:\n            - movies_service_test\n          filters:\n            branches:\n              only: deploy-movies-service\n  cinema_catalog_service:\n    jobs:\n      - cinema_catalog_service_lint\n      - cinema_catalog_service_test:\n          requires:\n            - cinema_catalog_service_lint\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "README.md",
            "deploy.sh",
            "docker-compose.yml",
            "package-lock.json",
            "package.json",
            "serverless.yml",
            "webpack.config.js",
            "yarn.lock"
        ],
        "folders": [
            ".serverless",
            "config",
            "secrets",
            "src"
        ]
    }
}