{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"image-resizer-service\",\n  \"version\": \"1.0.0\",\n  \"license\": \"MIT\",\n  \"author\": \"Dasiuke Hirata\",\n  \"scripts\": {\n    \"eslint\": \"eslint ./src\",\n    \"deploy\": \"SLS_DEBUG=* sls deploy --stage $STAGE --region $REGION --verbose\",\n    \"deploy:local\": \"export $(cat ./config/.env | xargs) && serverless deploy --stage $STAGE --region $REGION --verbose\",\n    \"remove:stack\": \"export $(cat ./config/.env | xargs) && sls remove -s $STAGE\",\n    \"offline\": \"export $(cat ./config/.env | xargs) && serverless offline start --stage $STAGE\",\n    \"add:env\": \"./config/push-secret.sh\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.3.1\",\n    \"babel-runtime\": \"^7.0.0-beta.3\",\n    \"lodash\": \"^4.17.11\",\n    \"serverless-offline\": \"^4.7.0\",\n    \"serverless-webpack\": \"^5.2.0\",\n    \"sharp\": \"^0.21.3\",\n    \"source-map-support\": \"^0.5.10\",\n    \"stream\": \"^0.0.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.2.3\",\n    \"@babel/core\": \"^7.3.4\",\n    \"@babel/plugin-transform-runtime\": \"^7.2.0\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"aws-sdk\": \"^2.409.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-jest\": \"^24.1.0\",\n    \"babel-loader\": \"^8.0.5\",\n    \"babel-plugin-source-map-support\": \"^2.0.1\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-stage-3\": \"^6.24.1\",\n    \"jest\": \"^23.6.0\",\n    \"serverless\": \"^1.47.0\",\n    \"webpack\": \"^4.28.3\",\n    \"webpack-node-externals\": \"^1.7.2\"\n  },\n  \"resolutions\": {\n    \"babel-core\": \"7.0.0-bridge.0\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "---\nversion: '3.7'\n\nvolumes:\n  elk-vol:   # Volume to host elk service data locally.\n    driver: 'local'\n  data-vol:  # Volume to host db service data locally.\n    driver: 'local'\n\nservices:\n  db:\n    image: mysql:5.6.44\n    command: |\n      --character-set-server=utf8 --collation-server=utf8_unicode_ci\n    ports:\n      - \"3306:3306\"  # host:container\n    volumes:\n      - data-vol:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=mysql\n    container_name: db-cont\n\n  elk:\n    build: ./elk\n    environment:\n      - LOGSTASH_START=0\n    ports:\n      - \"5601:5601\"  # host:container kibana\n      - \"9200:9200\"  # host:container elasticsearch\n    volumes:\n      - elk-vol:/usr/share/elasticsearch/data\n    container_name: elk-cont\n\n  apm:\n    image: docker.elastic.co/apm/apm-server:7.1.0\n    volumes:\n      - ./elk/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro  # apm config\n    links:\n      - elk:elk\n    depends_on:\n      - elk\n    container_name: apm-cont\n\n  cinema-catalog-service:\n    build: ./cinema-catalog-service\n    links:\n      - db:db\n      - elk:elk\n      - movies-service:movies-service\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8001:8001\"  # host:container\n    volumes:\n      - ./cinema-catalog-service:/home/nupp/app\n    container_name: cinema-catalog-service-cont\n    environment:\n      - COGNITO_USER_POOL_ID    # pass host enviroment var\n      - COGNITO_CLIENT_ID       # pass host enviroment var\n\n  movies-service:\n    build: ./movies-service\n    links:\n      - db:db\n      - elk:elk\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8002:8001\"  # host:container\n    volumes:\n      - ./movies-service:/home/nupp/app\n    container_name: movies-service-cont\n    environment:\n      - COGNITO_USER_POOL_ID    # pass host enviroment var\n      - COGNITO_CLIENT_ID       # pass host enviroment var\n\n  search-service:\n    build: ./search-service\n    links:\n      - db:db\n      - elk:elk\n      # [other container]:[alias in this container]\n      # this will create environment variables in the node.js container\n      # with ip and port info for the postgres container\n      # also creates entries in /etc/hosts with ip info\n    depends_on:\n      - db\n      - elk\n    ports:\n      - \"8003:8001\"  # host:container\n    volumes:\n      - ./search-service:/home/nupp/app\n    container_name: search-service-cont\n",
            "image-resizer-service/Dockerfile": "FROM amazonlinux\nWORKDIR /deploy\nRUN yum -y install make gcc*\nRUN curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -\nRUN yum -y install nodejs\nRUN npm install -g serverless\nCOPY . .\nRUN npm i\n\nRUN [\"chmod\", \"+x\", \"deploy.sh\"]\nCMD ./deploy.sh ; sleep 2m\n",
            ".circleci/config.yml": "---\nversion: 2.1\n\norbs:\n  slack: circleci/slack@2.5.0\n\nexecutors:\n  default:\n    docker:\n      - image: circleci/node:10.15.3\n    working_directory: ~/repo\n\ncommands:\n  movies_service_npm_install:\n    steps:\n      - restore_cache:\n          name: movies service restore cache\n          keys:\n            - v1-dependencies-{{ checksum \"movies-service/package.json\" }}\n      - run:\n          name: movies service temporary remove .git from oas-tools\n          command: rm -rf /home/circleci/repo/movies-service/node_modules/oas-tools/.git\n          working_directory: movies-service\n      - run:\n          name: movies service npm install\n          command: npm install\n          working_directory: movies-service\n      - save_cache:\n          name: movies service save cache\n          paths:\n            - movies-service/node_modules\n          key: v1-dependencies-{{ checksum \"movies-service/package.json\" }}\n  cinema_catalog_service_npm_install:\n    steps:\n      - restore_cache:\n          name: cinema catalog service restore cache\n          keys:\n            - v1-dependencies-{{ checksum \"cinema-catalog-service/package.json\" }}\n      - run:\n          name: cinema catalog service temporary remove .git from oas-tools\n          command: rm -rf /home/circleci/repo/cinema-catalog-service/node_modules/oas-tools/.git\n          working_directory: cinema-catalog-service\n      - run:\n          name: cinema catalog service npm install\n          command: npm install\n          working_directory: cinema-catalog-service\n      - save_cache:\n          name: cinema catalog service save cache\n          paths:\n            - cinema-catalog-service/node_modules\n          key: v1-dependencies-{{ checksum \"cinema-catalog-service/package.json\" }}\n  serverless_install:\n    steps:\n      - run:\n          name: install serverless\n          command: sudo npm install -g serverless@1.40.0\n      - run:\n          name: init serverless config\n          command: serverless config credentials -k ${AWS_ACCESS_KEY} -s ${AWS_SECRET_KEY} -p aws\n\njobs:\n  movies_service_lint:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - run:\n          name: movies service lint\n          command: npm run lint\n          working_directory: movies-service\n  movies_service_test:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - run:\n          name: movies service test\n          command: npm run test\n          working_directory: movies-service\n      # should be considered to use codecov\n      - run:\n          name: movies service codecov\n          command: npm run codecov\n          working_directory: movies-service\n  movies_service_deploy:\n    executor: default\n    steps:\n      - checkout\n      - movies_service_npm_install\n      - serverless_install\n      - run:\n          name: movies service db migrate\n          command: serverless invoke -f db-migrate-up -l | grep 500\n          working_directory: movies-service\n      - deploy:\n          name: movies service deploy\n          command: npm run deploy\n          working_directory: movies-service\n      - slack/notify:\n          color: \"#42e2f4\"\n          mentions: \"dh\"\n          message: \"movies_service_deploy is done\"\n\n  cinema_catalog_service_lint:\n    executor: default\n    steps:\n      - checkout\n      - cinema_catalog_service_npm_install\n      - run:\n          name: cinema catalog service lint\n          command: npm run lint\n          working_directory: cinema-catalog-service\n  cinema_catalog_service_test:\n    executor: default\n    steps:\n      - checkout\n      - cinema_catalog_service_npm_install\n      - run:\n          name: cinema catalog service test\n          command: npm run test\n          working_directory: cinema-catalog-service\n      # should be considered to use codecov\n      - run:\n          name: cinema catalog service codecov\n          command: npm run codecov\n          working_directory: cinema-catalog-service\n\nworkflows:\n  movies_service:\n    jobs:\n      - movies_service_lint\n      - movies_service_test:\n          requires:\n            - movies_service_lint\n      - movies_service_deploy:\n          requires:\n            - movies_service_test\n          filters:\n            branches:\n              only: deploy-movies-service\n  cinema_catalog_service:\n    jobs:\n      - cinema_catalog_service_lint\n      - cinema_catalog_service_test:\n          requires:\n            - cinema_catalog_service_lint\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "README.md",
            "deploy.sh",
            "docker-compose.yml",
            "package-lock.json",
            "package.json",
            "serverless.yml",
            "webpack.config.js",
            "yarn.lock"
        ],
        "folders": [
            ".serverless",
            "config",
            "secrets",
            "src"
        ]
    }
}