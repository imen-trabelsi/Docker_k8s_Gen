{
    "source_code_info": {
        "language": "Python",
        "framework": "Django",
        "dependencies": {
            "requirements.txt": "# REST Api\nDjango==3.2.13\ndjangorestframework==3.11.2\ndjangorestframework_jwt==1.11.0\ncoreapi==2.3.3\nopenapi-codec==1.3.2\nsimplejson==3.17.0\ndjango-filter==2.4.0\ndjango-cors-headers==3.2.1\ndjango-extensions==2.2.8\n\n# PostGreSQL\npsycopg2==2.8.4\n# Multiple instances\ngunicorn==20.0.4\n# Static files\nwhitenoise==5.0.1\n\n\n# Notification\nchannels==2.4.0\nchannels-redis==2.4.2"
        },
        "database": "PostgreSQL",
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: '3'\n\nservices:\n\n  postgres_korek:\n    build: ./database\n    environment:\n      - POSTGRES_DB=korek_db\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_USER=postgres\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n\n  redis:\n    image: 'bitnami/redis:5.0-debian-9'\n    environment:\n      # ALLOW_EMPTY_PASSWORD is recommended only for development.\n      - ALLOW_EMPTY_PASSWORD=yes\n    ports:\n      - '6379:6379'\n    volumes:\n      - redis_data:/bitnami/redis/data\n    command: /run.sh --maxmemory 500mb\n\n  web_socket:\n    restart: always\n    build: ./django-notifier\n    environment:\n      - DEBUG=True\n    links:\n      - postgres_korek\n      - redis\n    depends_on:\n      - postgres_korek\n      - redis\n      - web_rest\n    ports:\n      - \"8000:8000\"\n\n  postgres_interface:\n    image: dpage/pgadmin4\n    environment:\n      - PGADMIN_DEFAULT_EMAIL=user@domain.com\n      - PGADMIN_DEFAULT_PASSWORD=postgres\n    links:\n      - postgres_korek:postgres\n    ports:\n      - \"5050:80\"\n\n  web_rest:\n    restart: always\n    build: ./django-rest-swagger\n    environment:\n      - DEBUG=True\n      # PUBLIC PRIVATE PRIVATE-VALIDATION\n      - PRIVACY_MODE=PRIVATE-VALIDATION\n      - EMAIL_HOST=smtp.gmail.com\n      - EMAIL_HOST_USER=xxxx.yyy@gmail.com\n      - EMAIL_HOST_PASSWORD=changeme\n    links:\n      - postgres_korek\n    depends_on:\n      - postgres_korek\n    volumes:\n      - media:/code/myapp/app/media/\n\n  nginx:\n    build: ./nginx\n    depends_on:\n      - web_socket\n    volumes:\n      - media:/media/:ro\n      - ssl_cetificate:/etc/letsencrypt/\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n\n\n  # Logs Monitoring\n  logs:\n    build: ./monitoring/logs\n    privileged: true\n    depends_on:\n      - nginx\n      - influxdb\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n\n  influxdb:\n    image: influxdb:1.7\n    ports:\n      - \"8083:8083\"\n      - \"8086:8086\"\n      - \"25826:25826/udp\"\n    volumes:\n      - influxdata:/var/lib/influxdb\n      - ./monitoring/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf\n      - ./monitoring/influxdb/types.db:/usr/share/collectd/types.db:ro\n\n\n  # Metrics Monitoring\n  prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    ports:\n      - 9090:9090\n    command:\n      - --config.file=/etc/prometheus/prometheus.yml\n    volumes:\n      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro\n    depends_on:\n      - cadvisor\n      - nginx-exporter\n      - node-exporter\n    links:\n      - cadvisor:cadvisor\n      - node-exporter:node-exporter\n      - nginx-exporter:nginx-exporter\n\n  node-exporter:\n    image: prom/node-exporter:latest\n    container_name:  node-exporter\n\n  nginx-exporter:\n    image: nginx/nginx-prometheus-exporter:0.4.0\n    container_name: nginx-exporter\n    depends_on:\n      - nginx\n    environment:\n      - SCRAPE_URI=http://nginx/nginx_status?auto\n\n  cadvisor:\n    image: gcr.io/cadvisor/cadvisor\n    container_name: cadvisor\n    ports:\n      - 8080:8080\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n    depends_on:\n      - nginx\n\n\n  # Display Logs & Metrics\n  grafana:\n    image: grafana/grafana:5.3.2\n    depends_on:\n      - prometheus\n      - postgres_korek\n      - cadvisor\n    links:\n      - postgres_korek:postgres\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./monitoring/grafana/:/var/lib/grafana/\n    user: $USER\n      \n\nvolumes:\n  pgdata: {}\n  influxdata: {}\n  redis_data: {}\n  serverlog: {}\n  media: {}\n  ssl_cetificate: {}",
            "monitoring/logs/Dockerfile": "FROM ubuntu:bionic\n\n\nRUN apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common && \\\n      rm -rf /tmp/* && \\\n      rm -rf /var/tmp/*\n\n# Install docker\nRUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\nRUN apt-key fingerprint 0EBFCD88\nRUN add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nRUN apt-get install -y docker-ce docker-ce-cli containerd.io && \\\n    rm -rf /usr/share/doc/* && \\\n    rm -rf /usr/share/info/* && \\\n    rm -rf /tmp/* && \\\n    rm -rf /var/tmp/*\n\nADD log_nginx.sh /log_nginx.sh\nRUN chmod -+x /log_nginx.sh\n\nENTRYPOINT bash -c \"/log_nginx.sh & tail -f /dev/null\"\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "anonymous.png",
            "requirements.txt",
            "runtests.py",
            "setup.sh"
        ],
        "folders": [
            "myapp",
            "tests"
        ]
    }
}