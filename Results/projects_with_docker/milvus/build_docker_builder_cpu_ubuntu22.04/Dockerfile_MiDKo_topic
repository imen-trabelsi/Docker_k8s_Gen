# Set the base image
FROM ubuntu:jammy-20240530 as builder

# Build-time metadata
ARG TARGETARCH

# Labels
LABEL maintainer="your-email@example.com"

# Install tools
RUN apt-get update && apt-get install -y --no-install-recommends wget curl ca-certificates gnupg2 \
g++ gcc gdb gdbserver ninja-build git make ccache libssl-dev zlib1g-dev zip unzip \
clang-format-12 clang-tidy-12 lcov libtool m4 autoconf automake python3 python3-pip \
pkg-config uuid-dev libaio-dev libopenblas-dev && \
apt-get remove --purge -y && \

# Use gcc-12 as default
RUN apt-get update && apt-get install -y gcc-12 g++-12 && cd /usr/bin \
&& unlink gcc && ln -s gcc-12 gcc \
&& unlink g++ && ln -s g++-12 g++ \

# Install conan
RUN pip3 install conan==1.64.1

# Fetch CMake, vcpkg, and go
RUN wget -qO- "https://cmake.org/files/v3.27/cmake-3.27.5-linux-`uname -m`.tar.gz" | tar --strip-components=1 -xz -C /usr/local
RUN mkdir /opt/vcpkg &&  \
wget -qO- vcpkg.tar.gz https://github.com/microsoft/vcpkg/archive/master.tar.gz | tar --strip-components=1 -xz -C /opt/vcpkg && \
rm -rf vcpkg.tar.gz && \
RUN vcpkg install azure-identity-cpp azure-storage-blobs-cpp gtest
RUN mkdir -p /usr/local/go && wget -qO- "https://go.dev/dl/go1.21.11.linux-$TARGETARCH.tar.gz" | tar --strip-components=1 -xz -C /usr/local/go

# Clean and setup Go directory
RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && go clean --modcache && chmod -R 777 "$GOPATH" && chmod -R a+w $(go env GOTOOLDIR)

# Install rust
RUN curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=1.83 -y

# Go environment variables
ENV GOPATH=/go
ENV GOROOT=/usr/local/go
ENV GO111MODULE=on
ENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH
ENV PATH=/root/.cargo/bin:$PATH
ENV VCPKG_FORCE_SYSTEM_BINARIES 1

# Create required directories
RUN mkdir /app && mkdir -p /home/milvus/.vscode-server/extensions /home/milvus/.vscode-server-insiders/extensions && chmod -R 777 /home/milvus

WORKDIR /app

# Copy go mod files and download dependencies
COPY go.mod .
RUN go mod download

# Copy the source code
COPY . . 

# Build the application
RUN make

# Stage 2: Final Image
FROM ubuntu:jammy-20240530
COPY --chown=0:0 build/docker/builder/entrypoint.sh /
WORKDIR /app

# Run the application
ENTRYPOINT ["/entrypoint.sh"]
CMD ["tail", "-f", "/dev/null"]
