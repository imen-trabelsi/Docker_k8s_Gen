# The base image
FROM debian:buster

# Setting the workdir
WORKDIR /app

# Defining arguments
ARG IMAGE_ARG
ARG GO_VERSION

# Setting the environment
ENV GOPATH="/usr/local/go/bin"
ENV PATH=$PATH:${GOPATH} 
ENV KRTE_IMAGE=${IMAGE_ARG}

# Copy the go.mod and download dependencies
COPY go.mod .
RUN go mod download

# Copy the rest of the application code
COPY . .

# Installing necessary packages for the go app
RUN echo "Installing Packages ..." && \
    apt-get update && \
    apt-get install -y --no-install-recommends apt-transport-https build-essential ca-certificates curl file git gnupg2 kmod lsb-release mercurial pkg-config procps python3 python3-dev python3-pip python3-setuptools rsync software-properties-common unzip jq && \
    python3 -m pip install --no-cache-dir --upgrade pip && \
    rm -rf /var/lib/apt/lists/* && \
    echo "Installing Go ..." && \
    export GO_TARBALL="go${GO_VERSION}.linux-amd64.tar.gz" && \
    curl -fsSL "https://golang.org/dl/${GO_TARBALL}" --output "${GO_TARBALL}" && \
    tar xzf "${GO_TARBALL}" -C /usr/local && \
    rm "${GO_TARBALL}" && \
    mkdir -p "${GOPATH}/bin" && \
    echo "Installing Docker ..." && \
    curl -fsSL "https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg" | apt-key add - && \
    add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
    $(lsb_release -cs) stable" && \
    apt-get update && \
    apt-get install -y --no-install-recommends docker-ce && \
    rm -rf /var/lib/apt/lists/* && \
    sed -i 's/cgroupfs_mount$/#cgroupfs_mount\n/' /etc/init.d/docker && \
    echo "Ensuring Legacy Iptables ..." && \
    update-alternatives --set iptables /usr/sbin/iptables-legacy && \

# Exposing port 
EXPOSE 8080

# Copying the wrapper script
COPY wrapper.sh /usr/local/bin/

# Using the wrapper script as the entrypoint 
ENTRYPOINT ["wrapper.sh"]
