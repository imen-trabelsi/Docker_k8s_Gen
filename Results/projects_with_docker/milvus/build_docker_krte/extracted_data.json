{
    "source_code_info": {
        "language": "Go",
        "framework": "Gin",
        "dependencies": {
            "go.mod": "module github.com/milvus-io/milvus\n\ngo 1.22\n\ntoolchain go1.22.7\n\nrequire (\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azcore v1.11.1\n\tgithub.com/Azure/azure-sdk-for-go/sdk/azidentity v1.6.0\n\tgithub.com/Azure/azure-sdk-for-go/sdk/storage/azblob v1.1.0\n\tgithub.com/aliyun/credentials-go v1.2.7\n\tgithub.com/apache/arrow/go/v17 v17.0.0\n\tgithub.com/bits-and-blooms/bloom/v3 v3.0.1\n\tgithub.com/blang/semver/v4 v4.0.0\n\tgithub.com/casbin/casbin/v2 v2.44.2\n\tgithub.com/casbin/json-adapter/v2 v2.0.0\n\tgithub.com/cockroachdb/errors v1.9.1\n\tgithub.com/gin-gonic/gin v1.9.1\n\tgithub.com/go-playground/validator/v10 v10.14.0\n\tgithub.com/gofrs/flock v0.8.1\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/btree v1.1.2\n\tgithub.com/grpc-ecosystem/go-grpc-middleware v1.3.0\n\tgithub.com/klauspost/compress v1.17.9\n\tgithub.com/mgutz/ansi v0.0.0-20200706080929-d51e80ef957d\n\tgithub.com/milvus-io/milvus-proto/go-api/v2 v2.5.0-beta.0.20250225103150-0a1988183e53\n\tgithub.com/minio/minio-go/v7 v7.0.73\n\tgithub.com/pingcap/log v1.1.1-0.20221015072633-39906604fb81\n\tgithub.com/prometheus/client_golang v1.14.0\n\tgithub.com/prometheus/client_model v0.3.0\n\tgithub.com/prometheus/common v0.42.0\n\tgithub.com/quasilyte/go-ruleguard/dsl v0.3.22\n\tgithub.com/samber/lo v1.27.0\n\tgithub.com/sbinet/npyio v0.6.0\n\tgithub.com/soheilhy/cmux v0.1.5\n\tgithub.com/spf13/cast v1.3.1\n\tgithub.com/spf13/viper v1.8.1\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common v1.0.865\n\tgithub.com/tikv/client-go/v2 v2.0.4\n\tgo.etcd.io/etcd/api/v3 v3.5.5\n\tgo.etcd.io/etcd/client/v3 v3.5.5\n\tgo.etcd.io/etcd/server/v3 v3.5.5\n\tgo.opentelemetry.io/otel v1.28.0\n\tgo.opentelemetry.io/otel/trace v1.28.0\n\tgo.uber.org/atomic v1.11.0\n\tgo.uber.org/multierr v1.11.0\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/oauth2 v0.21.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/text v0.21.0\n\tgoogle.golang.org/grpc v1.65.0\n\tgoogle.golang.org/grpc/examples v0.0.0-20220617181431-3e7b97febc7f\n)\n\nrequire (\n\tcloud.google.com/go/storage v1.43.0\n\tgithub.com/antlr4-go/antlr/v4 v4.13.1\n\tgithub.com/aws/aws-sdk-go-v2 v1.32.6\n\tgithub.com/aws/aws-sdk-go-v2/config v1.28.6\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.17.47\n\tgithub.com/aws/aws-sdk-go-v2/service/bedrockruntime v1.23.0\n\tgithub.com/bits-and-blooms/bitset v1.10.0\n\tgithub.com/bytedance/sonic v1.12.2\n\tgithub.com/cenkalti/backoff/v4 v4.2.1\n\tgithub.com/cockroachdb/redact v1.1.3\n\tgithub.com/goccy/go-json v0.10.3\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/greatroar/blobloom v0.0.0-00010101000000-000000000000\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.7\n\tgithub.com/jolestar/go-commons-pool/v2 v2.1.2\n\tgithub.com/magiconair/properties v1.8.5\n\tgithub.com/milvus-io/milvus/pkg/v2 v2.0.0-00010101000000-000000000000\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/remeh/sizedwaitgroup v1.0.0\n\tgithub.com/shirou/gopsutil/v4 v4.24.10\n\tgithub.com/tidwall/gjson v1.17.1\n\tgithub.com/valyala/fastjson v1.6.4\n\tgithub.com/zeebo/xxh3 v1.0.2\n\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.49.0\n\tgoogle.golang.org/api v0.187.0\n\tgoogle.golang.org/protobuf v1.34.2\n\tgopkg.in/yaml.v3 v3.0.1\n\tmosn.io/holmes v1.0.2\n)\n\nrequire (\n\tcloud.google.com/go v0.115.0 // indirect\n\tcloud.google.com/go/auth v0.6.1 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect\n\tcloud.google.com/go/compute/metadata v0.3.0 // indirect\n\tcloud.google.com/go/iam v1.1.8 // indirect\n\tgithub.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 // indirect\n\tgithub.com/99designs/keyring v1.2.1 // indirect\n\tgithub.com/AthenZ/athenz v1.10.39 // indirect\n\tgithub.com/Azure/azure-sdk-for-go/sdk/internal v1.8.0 // indirect\n\tgithub.com/AzureAD/microsoft-authentication-library-for-go v1.2.2 // indirect\n\tgithub.com/DataDog/zstd v1.5.0 // indirect\n\tgithub.com/JohnCGriffin/overflow v0.0.0-20211019200055-46fa312c352c // indirect\n\tgithub.com/Knetic/govaluate v3.0.1-0.20171022003610-9aa49832a739+incompatible // indirect\n\tgithub.com/StackExchange/wmi v0.0.0-20190523213315-cbe66965904d // indirect\n\tgithub.com/alibabacloud-go/debug v0.0.0-20190504072949-9472017b5c68 // indirect\n\tgithub.com/alibabacloud-go/tea v1.1.8 // indirect\n\tgithub.com/andybalholm/brotli v1.1.0 // indirect\n\tgithub.com/apache/pulsar-client-go v0.6.1-0.20210728062540-29414db801a7 // indirect\n\tgithub.com/apache/thrift v0.20.0 // indirect\n\tgithub.com/ardielle/ardielle-go v1.5.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.21 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.24.7 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.33.2 // indirect\n\tgithub.com/aws/smithy-go v1.22.1 // indirect\n\tgithub.com/benesch/cgosymbolizer v0.0.0-20190515212042-bec6fe6e597b // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/bytedance/sonic/loader v0.2.0 // indirect\n\tgithub.com/campoy/embedmd v1.0.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/cilium/ebpf v0.11.0 // indirect\n\tgithub.com/cloudwego/base64x v0.1.4 // indirect\n\tgithub.com/cloudwego/iasm v0.2.0 // indirect\n\tgithub.com/cockroachdb/logtags v0.0.0-20211118104740-dabe8e521a4f // indirect\n\tgithub.com/confluentinc/confluent-kafka-go v1.9.1 // indirect\n\tgithub.com/containerd/cgroups/v3 v3.0.3 // indirect\n\tgithub.com/coreos/go-semver v0.3.0 // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.3.2 // indirect\n\tgithub.com/cznic/mathutil v0.0.0-20181122101859-297441e03548 // indirect\n\tgithub.com/danieljoos/wincred v1.1.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2 // indirect\n\tgithub.com/docker/go-units v0.4.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/dvsekhvalnov/jose2go v1.6.0 // indirect\n\tgithub.com/ebitengine/purego v0.8.1 // indirect\n\tgithub.com/expr-lang/expr v1.15.7 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/form3tech-oss/jwt-go v3.2.3+incompatible // indirect\n\tgithub.com/fsnotify/fsnotify v1.4.9 // indirect\n\tgithub.com/gabriel-vasile/mimetype v1.4.2 // indirect\n\tgithub.com/getsentry/sentry-go v0.12.0 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-ini/ini v1.67.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-ole/go-ole v1.2.6 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 // indirect\n\tgithub.com/godbus/dbus/v5 v5.0.4 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible // indirect\n\tgithub.com/golang-jwt/jwt/v5 v5.2.1 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/golang/mock v1.6.0 // indirect\n\tgithub.com/golang/snappy v0.0.4 // indirect\n\tgithub.com/google/flatbuffers v24.3.25+incompatible // indirect\n\tgithub.com/google/s2a-go v0.1.7 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.2 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.12.5 // indirect\n\tgithub.com/gorilla/websocket v1.4.2 // indirect\n\tgithub.com/grpc-ecosystem/go-grpc-prometheus v1.2.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway v1.16.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.16.0 // indirect\n\tgithub.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c // indirect\n\tgithub.com/hashicorp/errwrap v1.0.0 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.1 // indirect\n\tgithub.com/hashicorp/go-syslog v1.0.0 // indirect\n\tgithub.com/hashicorp/hcl v1.0.0 // indirect\n\tgithub.com/ianlancetaylor/cgosymbolizer v0.0.0-20221217025313-27d3c9f66b6a // indirect\n\tgithub.com/jonboulle/clockwork v0.2.2 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/klauspost/asmfmt v1.3.2 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.8 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/kylelemons/godebug v1.1.0 // indirect\n\tgithub.com/leodido/go-urn v1.2.4 // indirect\n\tgithub.com/linkedin/goavro/v2 v2.11.1 // indirect\n\tgithub.com/lufia/plan9stats v0.0.0-20211012122336-39d0f177ccd0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect\n\tgithub.com/minio/asm2plan9s v0.0.0-20200509001527-cdd76441f9d8 // indirect\n\tgithub.com/minio/c2goasm v0.0.0-20190812172519-36a3d3bbc4f3 // indirect\n\tgithub.com/minio/highwayhash v1.0.2 // indirect\n\tgithub.com/minio/md5-simd v1.1.2 // indirect\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/mtibben/percent v0.2.1 // indirect\n\tgithub.com/nats-io/jwt/v2 v2.5.5 // indirect\n\tgithub.com/nats-io/nats-server/v2 v2.10.12 // indirect\n\tgithub.com/nats-io/nats.go v1.34.1 // indirect\n\tgithub.com/nats-io/nkeys v0.4.7 // indirect\n\tgithub.com/nats-io/nuid v1.0.1 // indirect\n\tgithub.com/opencontainers/runtime-spec v1.0.2 // indirect\n\tgithub.com/opentracing/opentracing-go v1.2.0 // indirect\n\tgithub.com/panjf2000/ants/v2 v2.7.2 // indirect\n\tgithub.com/pelletier/go-toml v1.9.3 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.0.8 // indirect\n\tgithub.com/petermattis/goid v0.0.0-20180202154549-b0b1615b78e5 // indirect\n\tgithub.com/pierrec/lz4 v2.5.2+incompatible // indirect\n\tgithub.com/pierrec/lz4/v4 v4.1.21 // indirect\n\tgithub.com/pingcap/errors v0.11.5-0.20211224045212-9687c2b0f87c // indirect\n\tgithub.com/pingcap/failpoint v0.0.0-20210918120811-547c13e3eb00 // indirect\n\tgithub.com/pingcap/goleveldb v0.0.0-20191226122134-f82aafb29989 // indirect\n\tgithub.com/pingcap/kvproto v0.0.0-20221129023506-621ec37aac7a // indirect\n\tgithub.com/pkg/browser v0.0.0-20240102092130-5ac0b6a4141c // indirect\n\tgithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20210106213030-5aafc221ea8c // indirect\n\tgithub.com/prometheus/procfs v0.9.0 // indirect\n\tgithub.com/rcrowley/go-metrics v0.0.0-20200313005456-10cdbea86bc0 // indirect\n\tgithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect\n\tgithub.com/rogpeppe/go-internal v1.12.0 // indirect\n\tgithub.com/rs/xid v1.5.0 // indirect\n\tgithub.com/sasha-s/go-deadlock v0.3.1 // indirect\n\tgithub.com/shirou/gopsutil v3.20.11+incompatible // indirect\n\tgithub.com/shirou/gopsutil/v3 v3.22.9 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/spaolacci/murmur3 v1.1.0 // indirect\n\tgithub.com/spf13/afero v1.6.0 // indirect\n\tgithub.com/spf13/jwalterweatherman v1.1.0 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/stathat/consistent v1.0.0 // indirect\n\tgithub.com/streamnative/pulsarctl v0.5.0 // indirect\n\tgithub.com/stretchr/objx v0.5.2 // indirect\n\tgithub.com/subosito/gotenv v1.2.0 // indirect\n\tgithub.com/tecbot/gorocksdb v0.0.0-20191217155057-f0fad39f321c // indirect\n\tgithub.com/tiancaiamao/gp v0.0.0-20221230034425-4025bc8a4d4a // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.0 // indirect\n\tgithub.com/tikv/pd/client v0.0.0-20221031025758-80f0d8ca4d07 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.12 // indirect\n\tgithub.com/tklauser/numcpus v0.6.1 // indirect\n\tgithub.com/tmc/grpc-websocket-proxy v0.0.0-20201229170055-e5319fda7802 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/twmb/murmur3 v1.1.3 // indirect\n\tgithub.com/uber/jaeger-client-go v2.30.0+incompatible // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xiang90/probing v0.0.0-20190116061207-43a291ad63a2 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n\tgo.etcd.io/bbolt v1.3.6 // indirect\n\tgo.etcd.io/etcd/client/pkg/v3 v3.5.5 // indirect\n\tgo.etcd.io/etcd/client/v2 v2.305.5 // indirect\n\tgo.etcd.io/etcd/pkg/v3 v3.5.5 // indirect\n\tgo.etcd.io/etcd/raft/v3 v3.5.5 // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.49.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/jaeger v1.13.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.20.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.20.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp v1.20.0 // indirect\n\tgo.opentelemetry.io/otel/exporters/stdout/stdouttrace v1.20.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.28.0 // indirect\n\tgo.opentelemetry.io/otel/sdk v1.28.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.0.0 // indirect\n\tgo.uber.org/automaxprocs v1.5.3 // indirect\n\tgolang.org/x/arch v0.3.0 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/term v0.27.0 // indirect\n\tgolang.org/x/time v0.5.0 // indirect\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgolang.org/x/xerrors v0.0.0-20231012003039-104605ab7028 // indirect\n\tgonum.org/v1/gonum v0.15.0 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20240624140628-dc46fd24d27d // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240617180043-68d350f18fd4 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240730163845-b1a4ccb954bf // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/ini.v1 v1.67.0 // indirect\n\tgopkg.in/natefinch/lumberjack.v2 v2.0.0 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tk8s.io/apimachinery v0.28.6 // indirect\n\tmosn.io/api v0.0.0-20210204052134-5b9a826795fd // indirect\n\tmosn.io/pkg v0.0.0-20211217101631-d914102d1baf // indirect\n\tsigs.k8s.io/yaml v1.3.0 // indirect\n)\n\nreplace (\n\tgithub.com/apache/arrow/go/v17 => github.com/milvus-io/arrow/go/v17 v17.0.0\n\tgithub.com/apache/pulsar-client-go => github.com/milvus-io/pulsar-client-go v0.12.1\n\tgithub.com/bketelsen/crypt => github.com/bketelsen/crypt v0.0.4 // Fix security alert for core-os/etcd\n\tgithub.com/expr-lang/expr => github.com/SimFG/expr v0.0.0-20241226082220-a9a764953bf8\n\tgithub.com/go-kit/kit => github.com/go-kit/kit v0.1.0\n\tgithub.com/greatroar/blobloom => github.com/milvus-io/blobloom v0.0.0-20240603110411-471ae49f3b93\n\tgithub.com/ianlancetaylor/cgosymbolizer => github.com/milvus-io/cgosymbolizer v0.0.0-20240722103217-b7dee0e50119\n\tgithub.com/milvus-io/milvus/pkg/v2 => ./pkg\n\tgithub.com/streamnative/pulsarctl => github.com/xiaofan-luan/pulsarctl v0.5.1\n\tgithub.com/tecbot/gorocksdb => github.com/milvus-io/gorocksdb v0.0.0-20220624081344-8c5f4212846b // indirect\n)\n\nexclude github.com/apache/pulsar-client-go/oauth2 v0.0.0-20211108044248-fe3b7c4e445b\n"
        },
        "database": null,
        "build_system": "go mod",
        "config_files": {
            ".env": "# to define environment variables available to docker-compose.yml\n\nIMAGE_REPO=milvusdb\nIMAGE_ARCH=amd64\nOS_NAME=ubuntu22.04\n\n# for services.builder.image in docker-compose.yml\nDATE_VERSION=20250120-cb959cd\nLATEST_DATE_VERSION=20250120-cb959cd\n# for services.gpubuilder.image in docker-compose.yml\nGPU_DATE_VERSION=20240806-d8668fe\nLATEST_GPU_DATE_VERSION=20240806-d8668fe\n\n# for other services in docker-compose.yml\nMINIO_ADDRESS=minio:9000\nPULSAR_ADDRESS=pulsar://pulsar:6650\nETCD_ENDPOINTS=etcd:2379\nAZURITE_CONNECTION_STRING=\"DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;\"\nENABLE_GCP_NATIVE=ON\n\n",
            "docker-compose.yml": "version: '3.5'\n\nx-ccache: &ccache\n  CCACHE_COMPILERCHECK: content\n  CCACHE_COMPRESS: 1\n  CCACHE_COMPRESSLEVEL: 5\n  CCACHE_MAXSIZE: 2G\n  CCACHE_DIR: /ccache\n\nservices:\n  builder:\n    image: ${IMAGE_REPO}/milvus-env:${OS_NAME}-${DATE_VERSION}\n    # Build devcontainer\n    build:\n      context: .\n      dockerfile: build/docker/builder/cpu/${OS_NAME}/Dockerfile\n      args:\n        TARGETARCH: ${IMAGE_ARCH}\n      cache_from:\n        - ${IMAGE_REPO}/milvus-env:${OS_NAME}-${LATEST_DATE_VERSION}\n    platform: linux/${IMAGE_ARCH}\n    shm_size: 2G\n    # expose 19530 port so we can directly access milvus inside build container\n    # ports:\n    #  - \"19530:19530\"\n    environment:\n      <<: *ccache\n      OS_NAME: ${OS_NAME}\n      PULSAR_ADDRESS: ${PULSAR_ADDRESS}\n      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS}\n      MINIO_ADDRESS: ${MINIO_ADDRESS}\n      CONAN_USER_HOME: /home/milvus\n      AZURE_STORAGE_CONNECTION_STRING: ${AZURITE_CONNECTION_STRING}\n      ENABLE_GCP_NATIVE: ${ENABLE_GCP_NATIVE}\n    volumes: &builder-volumes\n      - .:/go/src/github.com/milvus-io/milvus:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker}/${IMAGE_ARCH}-${OS_NAME}-ccache:/ccache:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker}/${IMAGE_ARCH}-${OS_NAME}-go-mod:/go/pkg/mod:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker}/${IMAGE_ARCH}-${OS_NAME}-vscode-extensions:/home/milvus/.vscode-server/extensions:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker}/${IMAGE_ARCH}-${OS_NAME}-conan:/home/milvus/.conan:delegated\n    working_dir: '/go/src/github.com/milvus-io/milvus'\n    depends_on:\n      - etcd\n      - minio\n      - pulsar\n      - azurite\n      - gcpnative\n    # Command\n    command: &builder-command >\n      /bin/bash -c \"\n        make check-proto-product && make verifiers && make unittest\"\n\n  gpubuilder:\n    image: ${IMAGE_REPO}/milvus-env:gpu-${OS_NAME}-${GPU_DATE_VERSION}\n    # Build devcontainer\n    build:\n      context: .\n      dockerfile: build/docker/builder/gpu/${OS_NAME}/Dockerfile\n      args:\n        TARGETARCH: ${IMAGE_ARCH}\n      cache_from:\n        - ${IMAGE_REPO}/milvus-env:gpu-${OS_NAME}-${LATEST_GPU_DATE_VERSION}\n    # user: {{ CURRENT_ID }}\n    shm_size: 2G\n    # expose 19530 port so we can directly access milvus inside build container\n    # ports:\n    #  - \"19530:19530\"\n    environment:\n      <<: *ccache\n      OS_NAME: ${OS_NAME}\n      PULSAR_ADDRESS: ${PULSAR_ADDRESS}\n      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS}\n      MINIO_ADDRESS: ${MINIO_ADDRESS}\n      CONAN_USER_HOME: /home/milvus\n      AZURE_STORAGE_CONNECTION_STRING: ${AZURITE_CONNECTION_STRING}\n      ENABLE_GCP_NATIVE: ${ENABLE_GCP_NATIVE}\n    volumes: &builder-volumes-gpu\n      - .:/go/src/github.com/milvus-io/milvus:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker-gpu}/${OS_NAME}-ccache:/ccache:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker-gpu}/${OS_NAME}-go-mod:/go/pkg/mod:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker-gpu}/${OS_NAME}-vscode-extensions:/home/milvus/.vscode-server/extensions:delegated\n      - ${DOCKER_VOLUME_DIRECTORY:-.docker-gpu}/${OS_NAME}-conan:/home/milvus/.conan:delegated\n    working_dir: '/go/src/github.com/milvus-io/milvus'\n    depends_on:\n      - etcd\n      - minio\n      - pulsar\n      - azurite\n      - gcpnative\n    # Command\n    command: &builder-command-gpu >\n      /bin/bash -c \"\n        make check-proto-product && make verifiers && make unittest\"\n\n  etcd:\n    image: milvusdb/etcd:3.5.5-r2\n    environment:\n      - ALLOW_NONE_AUTHENTICATION=yes\n      - ETCD_AUTO_COMPACTION_MODE=revision\n      - ETCD_AUTO_COMPACTION_RETENTION=1000\n      - ETCD_QUOTA_BACKEND_BYTES=4294967296\n      - ETCD_SNAPSHOT_COUNT=50000\n    healthcheck:\n      test: [ 'CMD', '/opt/bitnami/scripts/etcd/healthcheck.sh' ]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  pulsar:\n    image: apachepulsar/pulsar:2.8.2\n    command: |\n      /bin/bash -c \\\n      \"bin/apply-config-from-env.py conf/standalone.conf && \\\n      exec bin/pulsar standalone --no-functions-worker --no-stream-storage\"\n    environment:\n      # 10MB\n      - PULSAR_PREFIX_maxMessageSize=10485760\n      # this is 104857600 + 10240 (padding)\n      - nettyMaxFrameSizeBytes=104867840\n      - PULSAR_GC=-XX:+UseG1GC\n\n  minio:\n    image: minio/minio:RELEASE.2023-03-20T20-16-18Z\n    environment:\n      MINIO_ACCESS_KEY: minioadmin\n      MINIO_SECRET_KEY: minioadmin\n    command: minio server /minio_data\n    healthcheck:\n      test: [ 'CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live' ]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  azurite:\n    image: mcr.microsoft.com/azure-storage/azurite\n    command: azurite-blob --blobHost 0.0.0.0\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n\n  gcpnative:\n    image: fsouza/fake-gcs-server\n    command: -scheme http -public-host storage.gcs.127.0.0.1.nip.io:4443 -external-url \"http://storage.gcs.127.0.0.1.nip.io:4443\"\n    hostname: storage.gcs.127.0.0.1.nip.io\n    ports:\n      - \"4443:4443\"\n\nnetworks:\n  default:\n    name: milvus_dev\n",
            "build/docker/krte/Dockerfile": "FROM debian:buster\n\n# arg that specifies the image name (for debugging)\nARG IMAGE_ARG\n\n# arg that specifies the go version to install\nARG GO_VERSION\n\n# add envs:\n# - so we can debug with the image name:tag\n# - adding gsutil etc. to path (where we will install them)\n# - disabling prompts when installing gsutil etc.\n# - hinting that we are in a docker container\nENV KRTE_IMAGE=${IMAGE_ARG} \\\n    GOPATH=/home/go \\\n    PATH=/home/go/bin:/usr/local/go/bin:${PATH} \\\n    KIND_VERSION=0.11.1 \\\n    DOCKER_COMPOSE_VERSION=1.29.1 \\\n    CONTAINER=docker\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Install tools needed to:\n# - install docker\n# - build kind (dockerized)\n# - build kubernetes (dockerized, or with bazel)\n#\n# TODO: the `sed` is a bit of a hack, look into alternatives.\n# Why this exists: `docker service start` on debian runs a `cgroupfs_mount` method,\n# We're already inside docker though so we can be sure these are already mounted.\n# Trying to remount these makes for a very noisy error block in the beginning of\n# the pod logs, so we just comment out the call to it... :shrug:\nRUN echo \"Installing Packages ...\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends \\\n            apt-transport-https \\\n            build-essential \\\n            ca-certificates \\\n            curl \\\n            file \\\n            git \\\n            gnupg2 \\\n            kmod \\\n            lsb-release \\\n            mercurial \\\n            pkg-config \\\n            procps \\\n            python3 \\\n            python3-dev \\\n            python3-pip \\\n            python3-setuptools \\\n            rsync \\\n            software-properties-common \\\n            unzip \\\n            jq \\\n        && python3 -m pip install --no-cache-dir --upgrade pip \\\n        && rm -rf /var/lib/apt/lists/* \\\n    && echo \"Installing Go ...\" \\\n        && export GO_TARBALL=\"go${GO_VERSION}.linux-amd64.tar.gz\"\\\n        && curl -fsSL \"https://golang.org/dl/${GO_TARBALL}\" --output \"${GO_TARBALL}\" \\\n        && tar xzf \"${GO_TARBALL}\" -C /usr/local \\\n        && rm \"${GO_TARBALL}\"\\\n        && mkdir -p \"${GOPATH}/bin\" \\\n    && echo \"Installing kubectl, helm ...\" \\\n        && curl -fsSL \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\" --output /usr/local/bin/kubectl \\\n        && chmod 755 /usr/local/bin/kubectl \\\n        && ln -s /usr/local/bin/kubectl /usr/bin/kubectl \\\n        && curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 \\\n        && chmod 700 get_helm.sh \\\n        && ./get_helm.sh \\\n        && rm ./get_helm.sh \\\n    && echo \"Installing Docker ...\" \\\n        && curl -fsSL \"https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg\" | apt-key add - \\\n        && add-apt-repository \\\n            \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") \\\n            $(lsb_release -cs) stable\" \\\n        && apt-get update \\\n        && apt-get install -y --no-install-recommends docker-ce \\\n        && rm -rf /var/lib/apt/lists/* \\\n        && sed -i 's/cgroupfs_mount$/#cgroupfs_mount\\n/' /etc/init.d/docker \\\n    && echo \"Installing Docker Compose ...\" \\\n        && curl -fsSL \"https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose \\\n        && chmod +x /usr/local/bin/docker-compose \\\n        && ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \\\n    && echo \"Installing KinD ...\" \\\n        && curl -fsSL -o /usr/local/bin/kind \"https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64\" \\\n        && chmod +x /usr/local/bin/kind \\\n    && echo \"Ensuring Legacy Iptables ...\" \\\n        && update-alternatives --set iptables /usr/sbin/iptables-legacy \\\n        && update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy\n\n# copy in image utility scripts\nCOPY wrapper.sh /usr/local/bin/\n\n# entrypoint is our wrapper script, in Prow you will need to explicitly re-specify this\nENTRYPOINT [\"wrapper.sh\"]\n# volume for docker in docker, use an emptyDir in Prow\nVOLUME [\"/var/lib/docker\"]\n"
        },
        "static_files": {
            "build/README.md": "# Building Milvus with Docker\n\nBuilding Milvus is easy if you take advantage of the containerized build environment. This document will guide you through this build process.\n\n1. Docker, using one of the following configurations:\n\n- **macOS** Install Docker for Mac. See installation instructions [here](https://docs.docker.com/docker-for-mac/).\n  **Note**: You will want to set the Docker VM to have at least 2 vCPU and 8GB of initial memory or building will likely fail.\n- **Linux with local Docker** Install Docker according to the [instructions](https://docs.docker.com/installation/#installation) for your OS.\n- **Windows with Docker Desktop WSL2 backend** Install Docker according to the [instructions](https://docs.docker.com/desktop/windows/wsl/). Be sure to store your sources in the local Linux file system, not the Windows remote mount at `/mnt/c`.\n\n2. **Optional** [Google Cloud SDK](https://developers.google.com/cloud/sdk/)\n\nYou must install and configure Google Cloud SDK if you want to upload your release to Google Cloud Storage and may safely omit this otherwise.\n\n## Overview\n\nWhile it is possible to build Milvus using a local golang installation, we have a build process that runs in a Docker container. This simplifies initial set up and provides a very consistent build and test environment.\n\n## Before You Begin\n\nBefore building Milvus, you must check the eligibility of Docker, Docker Compose, and hardware in line with Milvus' requirements.\n\n<details><summary>Check Docker and Docker Compose version</summary>\n\n<li>Docker version 19.03 or higher is required. </li>\n\n<div class=\"alert note\">\nFollow <a href=\"https://docs.docker.com/get-docker/\">Get Docker</a> to install Docker on your system.\n</div>\n\n<li>Docker Compose version 1.25.1 or higher is required. </li>\n\n<div class=\"alert note\">\nSee <a href=\"https://docs.docker.com/compose/install/\">Install Docker Compose</a> for Docker Compose installation guide.\n</div>\n\n</details>\n\n<details><summary>Check whether your CPU supports SIMD extension instruction set</summary>\n\nMilvus' computing operations depend on CPU\u2019s support for SIMD (Single Instruction, Multiple Data) extension instruction set. Whether your CPU supports SIMD extension instruction set is crucial to index building and vector similarity search within Milvus. Ensure that your CPU supports at least one of the following SIMD instruction sets:\n\n- SSE4.2\n- AVX\n- AVX2\n- AVX512\n\nRun the lscpu command to check if your CPU supports the SIMD instruction sets mentioned above:\n\n```\nlscpu | grep -e sse4_2 -e avx -e avx2 -e avx512\n```\n\nCheck Wikipedia [CPU with AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#CPUs_with_AVX) for more details.\n\n</details>\n\n## Key scripts\n\nThe following scripts are found in the [`build/`](.) directory. Note that all scripts must be run from the Milvus root directory.\n\n- [`build/builder.sh`](builder.sh): Run a command in a build docker container. Common invocations are:\n  - `build/builder.sh make`: Build just linux binary in the container. Pass options and packages as necessary.\n  - `build/builder.sh make verifiers`: Run all pre-submission verification check.\n  - `build/builder.sh make unittest`: Run all unit tests.\n  - `build/builder.sh make clean`: Clean up all the generated files.\n\nYou can specify different OS for builder by setting `OS_NAME` which defaults to `ubuntu20.04`. Valid OS are `ubuntu20.04`, `amazonlinux2023`.\n\nTo specify `amazonlinux2023` builder, use these commands:\n\n```shell\nexport OS_NAME=amazonlinux2023\nbuild/builder.sh make\n```\n\n## Dev Containers\n\nYou can also get into the dev containers for development.\n\nEnter root path of Milvus project on your host machine, execute the following commands:\n\n```shell\n$ ./scripts/devcontainer.sh up\n\nCreating network \"milvus-dev\" with the default driver\nCreating milvus_jaeger_1  ... done\nCreating milvus_minio_1   ... done\nCreating milvus_pulsar_1  ... done\nCreating milvus_etcd_1    ... done\nCreating milvus_builder_1 ... done\n```\n\nCheck running state of Dev Container:\n\n```shell\n$ docker compose -f docker-compose-devcontainer.yml ps\n\n      Name                    Command                  State                                      Ports\n---------------------------------------------------------------------------------------------------------------------------------------\nmilvus_builder_1   /tini -- autouseradd --use ...   Up\nmilvus_etcd_1      etcd -advertise-client-url ...   Up             2379/tcp, 2380/tcp\nmilvus_jaeger_1    /go/bin/all-in-one-linux         Up             14250/tcp, 14268/tcp, 16686/tcp, 5775/udp, 5778/tcp, 6831/udp,\n                                                                   6832/udp\nmilvus_minio_1     /usr/bin/docker-entrypoint ...   Up (healthy)   9000/tcp\nmilvus_pulsar_1    bin/pulsar standalone --no ...   Up\n```\n\n`milvus_builder_1` is the docker of milvus dev, other containers are used as unit test dependencies. you can run compilation and unit test inside the container, enter it:\n\n```shell\ndocker exec -ti milvus_builder_1 bash\n```\n\nCompile the project and run unit test, see details at the [DEVELOPMENT.md](../DEVELOPMENT.md)\n\n```shell\nmake milvus\n```\n\n```shell\nmake unittest\n```\n\nStop Dev Container\n\n```shell\n./scripts/devcontainer.sh down\n```\n\n## E2E Tests\n\nMilvus uses Python SDK to write test cases to verify the correctness of Milvus functions. Before running E2E tests, you need a running Milvus:\n\n```shell\ncd deployments/docker/dev\ndocker compose up -d\ncd ../../../\nbuild/builder.sh /bin/bash -c \"export ROCKSMQ_PATH='/tmp/milvus/rdb_data' && ./scripts/start_standalone.sh && cat\"\n```\n\nor\n\n```shell\nbuild/builder.sh /bin/bash -c \"./scripts/start_cluster.sh && cat\"\n```\n\nTo run E2E tests, use these commands:\n\n```shell\nMILVUS_SERVICE_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker compose ps -q builder))\ncd tests/docker\ndocker compose run --rm pytest /bin/bash -c \"pytest --host ${MILVUS_SERVICE_IP}\"\n```\n\n## Basic Flow\n\nThe scripts under [`build/`](.) are used to build and test. They will ensure that the `builder` Docker image is built (based on [`build/docker/builder`] ) and then execute the appropriate command in that container. These scripts will both ensure that the right data is cached from run to run for incremental builds and will copy the results back out of the container. You can specify a different registry/name for `builder` by setting `IMAGE_REPO` which defaults to `milvusdb`.\n\nThe `builder.sh` is executed by first creating a \u201cdocker volume\u201c directory in `.docker/`. The `.docker/` directory is used to cache the third-party package and compiler cache data. It speeds up recompilation by caching previous compilations and detecting when the same compilation is being done again.\n\n## Debug on Host Machine\n\n### Integrate vscode with docker\n\n- Install [Visual Studio Code](https://code.visualstudio.com/)\n\n- Install [Remote Development extension pack](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack)\n\n- Integrate with VS Code\n\nThe working principle is as follows: mount the local file system to the workspace inside the container, or copy it to the container. The extension of vs code is installed inside the container and runs in it, so that the vs Code of the host can fully access the tools, platforms and file systems inside the container. This means that you just need to connect to different containers to switch the entire development environment seamlessly.\n\n![image](../docs/imgs/vscode.png)\n\nTaking the Milvus project as an example, there is a file named **.devcontainer.json** in the root directory of the project. This file describes how vs code accesses (or creates) a development container environment, and defines the container environment, working directory, extension tool set, etc.\n\n- The steps to configure the development environment are as follows:\n\nStart VS Code\uff0cin the command panel ( F1 ) input **\u201cRemote-Containers: Open Folder in Container\u201d** , then select the project folder which contains devcontainer.json file.\n\nor click right-bottom corner button > < , choose **\u201cRemote-Containers: Open Folder in Container\u201d**\uff0cthen select the project folder which contains devcontainer.json file.\n\n![image](../docs/imgs/remote.png)\n\nVS Code begin load and construct Devcontainer, the progress bar display the construction state.\n\n![image](../docs/imgs/bar.png)\n\nAfter Construction, VS Code automatically connects to the container. Now you can code and debug in VS Code, just like developing in your host machine.\n\nYou can also use terminal of VS Code to enter the Dev container to do something. Choose **Terminal >> New Terminal** in the navigation bar, then you can enter the container:\n\n![image](../docs/imgs/terminal.png)\n\nModify vscode go setups if necessary, the setting path is **code -> preference -> settings**\n\n```shell\n\"go.testFlags\": [\"-v\"]  //if you want say detailed output when running unit test\n\"go.coverOnSave\": true  //if you want to show coverage\n\"go.lintOnSave\": true   //if you want to auto golint and check code style\n```\n\n![image](../docs/imgs/settings.png)\n\n### Integrate goland with docker\n\nTBD\n",
            "build/config/topology/multicluster.json": "[\n  {\n    \"kind\": \"Kubernetes\",\n    \"clusterName\": \"primary\",\n    \"podSubnet\": \"10.10.0.0/16\",\n    \"svcSubnet\": \"10.255.10.0/24\",\n    \"network\": \"network-1\"\n  },\n  {\n    \"kind\": \"Kubernetes\",\n    \"clusterName\": \"remote\",\n    \"podSubnet\": \"10.20.0.0/16\",\n    \"svcSubnet\": \"10.255.20.0/24\",\n    \"network\": \"network-1\",\n    \"primaryClusterName\": \"primary\",\n    \"meta\": {\n      \"fakeVM\": false\n    }\n  },\n  {\n    \"kind\": \"Kubernetes\",\n    \"clusterName\": \"cross-network-primary\",\n    \"podSubnet\": \"10.30.0.0/16\",\n    \"svcSubnet\": \"10.255.30.0/24\",\n    \"network\": \"network-2\"\n  }\n]\n",
            "build/deb/README.md": "# Building Deb package with Docker\n\nBuilding Milvus Deb package is easy if you take advantage of the containerized build environment. This document will guide you through this build process.\n\n1. Docker, using one of the following configurations:\n\n- **Linux with local Docker** Install Docker according to the [instructions](https://docs.docker.com/installation/#installation) for your OS.\n\n2. Get the opensource milvus code\n```bash\ngit clone https://github.com/milvus-io/milvus.git\ncp -r milvus/build/deb .\ncd deb\n```\n\n3. Start the milvus container and build the deb package\n```bash\n# Replace the VERSION with your own\nsudo docker run -v .:/deb -ti --entrypoint /bin/bash milvusdb/milvus:v$VERSION\n# in the container\ncd /deb\nbash build_deb.sh $VERSION $VERSION $MAINTAINER $DEBEMAIL\n```\n\n4. Install the deb package on ubuntu system\n```bash\nsudo apt-get update\nsudo dpkg -i milvus_$VERSION-1_amd64.deb # This package is in the milvus-deb directory\nsudo apt-get -f install\n```\n\n5. Check the status of Milvus\n```bash\nsudo systemctl status milvus\n```\n\n6. Connect to Milvus\n\nPlease refer to [Hello Milvus](https://milvus.io/docs/v2.3.x/example_code.md), then run the example code. \n\n7. Uninstall Milvus\n```bash\nsudo dpkg -P milvus\n```\n\n8. (Optional) By default, Milvus is started in embed mode. If you rely on external etcd and minio, you can modify the following configuration and then restart Milvus.\n```bash\nsudo vim /etc/milvus/configs/milvus.yaml\n``` \n```yaml\netcd:\n  endpoints: etcd-ip:2379\n  ...\n  use:\n    embed: false\nminio:\n  address: minio-ip\n  ...\ncommon:\n  storageType: remote\n```\n"
        }
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}