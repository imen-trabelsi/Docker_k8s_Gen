{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\nCopyright (c) 2016 The Ontario Institute for Cancer Research. All rights reserved.\n\nThis program and the accompanying materials are made available under the terms of the GNU Public License v3.0.\nYou should have received a copy of the GNU General Public License along with\nthis program. If not, see <http://www.gnu.org/licenses/>.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\nSHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\nANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>bio.overture</groupId>\n  <artifactId>score</artifactId>\n  <version>5.12.0-SNAPSHOT</version>\n  <packaging>pom</packaging>\n  <name>${project.artifactId}</name>\n  <description>${project.name}</description>\n\n  <modules>\n    <module>score-core</module>\n    <module>score-client</module>\n    <module>score-fs</module>\n    <module>score-server</module>\n    <module>score-test</module>\n  </modules>\n\n  <repositories>\n      <repository>\n          <id>spring-releases</id>\n          <name>Spring Releases</name>\n          <url>https://repo.spring.io/release</url>\n          <snapshots>\n              <enabled>false</enabled>\n          </snapshots>\n      </repository>\n      <repository>\n          <id>spring-snapshots</id>\n          <name>Spring Snapshots</name>\n          <url>https://repo.spring.io/snapshot</url>\n          <releases>\n              <enabled>false</enabled>\n          </releases>\n          <snapshots>\n              <enabled>true</enabled>\n          </snapshots>\n      </repository>\n  </repositories>\n\n  <dependencies>\n\n    <!-- Utilities -->\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <scope>provided</scope>\n      <version>${lombok.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.google.code.findbugs</groupId>\n      <artifactId>annotations</artifactId>\n      <scope>provided</scope>\n      <version>${findbugs.version}</version>\n    </dependency>\n\n  </dependencies>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>score-core</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>score-client</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>score-fs</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>${project.groupId}</groupId>\n        <artifactId>score-server</artifactId>\n        <version>${project.version}</version>\n      </dependency>\n\n      <!-- Spring -->\n      <dependency>\n        <groupId>org.springframework.security.oauth</groupId>\n        <artifactId>spring-security-oauth2</artifactId>\n        <version>${spring-security-oauth2.version}</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>jackson-mapper-asl</artifactId>\n            <groupId>org.codehaus.jackson</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework.retry</groupId>\n        <artifactId>spring-retry</artifactId>\n        <version>${spring-retry.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-jwt</artifactId>\n        <version>${spring-security-jwt.version}</version>\n      </dependency>\n\n      <!-- Spring Cloud -->\n      <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-dependencies</artifactId>\n        <version>${spring-cloud.version}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n\n      <!-- Amazon -->\n      <dependency>\n        <groupId>com.amazonaws</groupId>\n        <artifactId>aws-java-sdk-s3</artifactId>\n        <version>${aws-java-sdk.version}</version>\n      </dependency>\n\n      <dependency>\n        <groupId>com.microsoft.azure</groupId>\n        <artifactId>azure-storage</artifactId>\n        <version>${azure-storage.version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>org.slf4j</groupId>\n            <artifactId>slf4j-simple</artifactId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n\n    </dependencies>\n\n  </dependencyManagement>\n\n  <build>\n    <defaultGoal>install</defaultGoal>\n    <plugins>\n      <plugin>\n        <groupId>com.spotify.fmt</groupId>\n        <artifactId>fmt-maven-plugin</artifactId>\n        <version>2.21.1</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>format</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>${maven-compiler-plugin.version}</version>\n          <inherited>true</inherited>\n          <configuration>\n            <source>${maven-compiler-plugin.source}</source>\n            <target>${maven-compiler-plugin.target}</target>\n            <showWarnings>true</showWarnings>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <profiles>\n    <!-- Profile that enables static code analysis -->\n    <profile>\n      <id>delombok</id>\n      <properties>\n        <generateSources.skipDelombok>false</generateSources.skipDelombok>\n      </properties>\n    </profile>\n    <profile>\n      <id>jenkins</id>\n      <properties>\n        <test.redirectTestOutputToFile>false</test.redirectTestOutputToFile>\n        <test.useFile>false</test.useFile>\n      </properties>\n    </profile>\n    <profile>\n      <id>release</id>\n      <properties>\n        <package.attach>true</package.attach>\n      </properties>\n    </profile>\n    <profile>\n      <id>code-analysis</id>\n      <properties>\n        <install.skipFindbugs>false</install.skipFindbugs>\n      </properties>\n      <build>\n        <plugins>\n          <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-pmd-plugin</artifactId>\n          </plugin>\n          <plugin>\n            <artifactId>maven-resources-plugin</artifactId>\n            <inherited>false</inherited>\n            <executions>\n              <execution>\n                <phase>compile</phase>\n                <goals>\n                  <goal>copy-resources</goal>\n                </goals>\n                <configuration>\n                  <outputDirectory>${pmd.targetdir}</outputDirectory>\n                  <resources>\n                    <resource>\n                      <directory>${pmd.sourcedir}/config/style</directory>\n                    </resource>\n                  </resources>\n                </configuration>\n              </execution>\n            </executions>\n          </plugin>\n        </plugins>\n      </build>\n    </profile>\n  </profiles>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <jdk.version>11</jdk.version>\n\n    <lombok.version>1.18.4</lombok.version>\n    <findbugs.version>3.0.1u2</findbugs.version>\n\n    <maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>\n    <maven-compiler-plugin.source>${jdk.version}</maven-compiler-plugin.source>\n    <maven-compiler-plugin.target>${jdk.version}</maven-compiler-plugin.target>\n\n    <!-- Versions - Spring -->\n    <spring-boot.version>2.6.6</spring-boot.version>\n    <spring-retry.version>1.1.2.RELEASE</spring-retry.version>\n    <spring-security-oauth2.version>2.5.1.RELEASE</spring-security-oauth2.version>\n    <spring-security-jwt.version>1.1.1.RELEASE</spring-security-jwt.version>\n    <spring-cloud.version>2021.0.8</spring-cloud.version>\n\n    <!-- Versions - Amazon -->\n    <aws-java-sdk.version>1.11.219</aws-java-sdk.version>\n\n    <azure-storage.version>8.6.6</azure-storage.version>\n\n    <!-- Versions - Utilities -->\n    <jcommander.version>1.69</jcommander.version>\n    <guava.version>19.0</guava.version>\n    <joda-time.version>2.2</joda-time.version>\n    <jsr305.version>1.3.9</jsr305.version>\n    <logback.version>1.1.7</logback.version>\n    <junit.version>4.13.2</junit.version>\n\n    <!-- Maven Enforce version  -->\n    <maven-enforcer-plugin.version>1.3.1</maven-enforcer-plugin.version>\n    <maven-enforcer-plugin.versionRange>[1.0.0,)</maven-enforcer-plugin.versionRange>\n    <maven-enforcer-plugin.requireMavenVersion>[3.0.0,)</maven-enforcer-plugin.requireMavenVersion>\n    <maven-enforcer-plugin.requireJavaVersion>[11,)</maven-enforcer-plugin.requireJavaVersion>\n\n    <!-- PMD -->\n    <pmd.sourcedir>${basedir}/src/main/pmd</pmd.sourcedir>\n    <pmd.targetdir>${project.build.directory}</pmd.targetdir>\n\n\n    <fasterxml-jackson.version>2.10.0.pr1</fasterxml-jackson.version>\n  </properties>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3.7'\nservices:\n  keycloak-server:\n    image: docker.io/bitnami/keycloak:22\n    environment:\n      - KC_DB=postgres\n      - KC_DB_URL=jdbc:postgresql://keycloak-postgresql/bitnami_keycloak\n      - KC_DB_USERNAME=bn_keycloak\n      # default expiration days of apiKeys is 365\n      # - APIKEY_DURATION_DAYS=365\n    ports:\n      - \"9082:8080\"\n    depends_on:\n      - keycloak-postgresql\n    volumes:\n      - type: bind\n        source: ./docker/keycloak-init/data_import\n        target: /opt/bitnami/keycloak/data/import\n    command:\n      - /bin/bash\n      - -c\n      - |\n        curl -sL https://github.com/oicr-softeng/keycloak-apikeys/releases/download/1.0.1/keycloak-apikeys-1.0.1.jar -o /opt/bitnami/keycloak/providers/keycloak-apikeys-1.0.1.jar\n        kc.sh start-dev --import-realm\n  keycloak-postgresql:\n    image: docker.io/bitnami/postgresql:11\n    environment:\n      # ALLOW_EMPTY_PASSWORD is recommended only for development.\n      - ALLOW_EMPTY_PASSWORD=yes\n      - POSTGRESQL_USERNAME=bn_keycloak\n      - POSTGRESQL_DATABASE=bitnami_keycloak\n    expose:\n      - \"5432\"\n    ports:\n      - \"9444:5432\"\n  object-storage:\n    #NOTE: must use 2018-05-11 version, since the ETag rules are different. 2018 will return the part md5, anything newer will not, and score-server expects etag==md5\n    image: minio/minio:RELEASE.2018-05-11T00-29-24Z\n    environment:\n      MINIO_ACCESS_KEY: minio\n      MINIO_SECRET_KEY: minio123\n    command: server /data\n    healthcheck:\n      test: [ \"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\" ]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n    ports:\n      - \"8085:9000\"\n  score-server:\n    build:\n      context: ./\n      dockerfile: \"$DOCKERFILE_NAME\"\n      target: server\n    environment:\n      SPRING_PROFILES_ACTIVE: s3,prod,secure\n      SERVER_PORT: 8080\n      OBJECT_SENTINEL: heliograph\n      BUCKET_NAME_OBJECT: score.data\n      BUCKET_NAME_STATE: score.data\n      COLLABORATORY_DATA_DIRECTORY: data\n      METADATA_URL: http://song-server:8080\n      S3_ENDPOINT:  http://object-storage:9000\n      # enable this to test s3 host override\n      #S3_PRESIGNEDURL_OVERRIDE_HOST: http://localhost:8085\n      S3_ACCESSKEY: minio\n      S3_SECRETKEY: minio123\n      S3_SIGV4ENABLED: \"true\"\n      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak-server:8080/realms/myrealm/protocol/openid-connect/certs\n      AUTH_SERVER_URL: http://keycloak-server:8080/realms/myrealm/apikey/check_api_key/\n      AUTH_SERVER_TOKENNAME: apiKey\n      AUTH_SERVER_CLIENTID: system\n      AUTH_SERVER_CLIENTSECRET: systemsecret\n      AUTH_SERVER_PROVIDER: keycloak\n      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak-server:8080\n      AUTH_SERVER_KEYCLOAK_REALM: myrealm\n      AUTH_SERVER_SCOPE_STUDY_PREFIX: PROGRAMDATA.\n      AUTH_SERVER_SCOPE_UPLOAD_SUFFIX: .WRITE\n      AUTH_SERVER_SCOPE_DOWNLOAD_SUFFIX: .READ\n      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.WRITE\n      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.READ\n      SERVER_SSL_ENABLED: \"false\"\n      UPLOAD_PARTSIZE: 1073741824\n      UPLOAD_CONNECTION_TIMEOUT: 1200000\n      LOGGING_LEVEL_BIO_OVERTURE_SCORE_SERVER: DEBUG\n      LOGGING_LEVEL_ORG_APACHE_HTTP_WIRE: DEBUG\n      LOGGING_LEVEL_ORG_APACHE_HTTP_HEADERS: DEBUG\n      ENDPOINTS_DUMP_ENABLED: \"false\"\n      ENDPOINTS_ENV_ENABLED: \"true\"\n      ENDPOINTS_INFO_ENABLED: \"true\"\n      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,address=*:5006,server=y,suspend=n\n    ports:\n      - \"8087:8080\"\n      - \"5006:5006\"\n    depends_on:\n      - object-storage\n      - song-server\n    volumes:\n      - \"./docker/scratch/storage-server-logs:/opt/dcc/storage_server_logs\"\n  score-client:\n    build:\n      context: ./\n      dockerfile: \"$DOCKERFILE_NAME\"\n      target: client\n    environment:\n      ACCESSTOKEN: 07a5a12e-a85f-4248-a9a1-851a8062b6ac\n      METADATA_URL: http://song-server:8080\n      STORAGE_URL: http://score-server:8080\n      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n\n    ports:\n      - \"5005:5005\"\n    volumes:\n      - \"./docker/score-client-init:/data\"\n      - \"./docker/scratch/score-client-logs:/score-client/logs\"\n    command: bin/score-client\n    user: \"$MY_UID:$MY_GID\"\n  song-db:\n    image: \"postgres:11.1\"\n    environment:\n      POSTGRES_DB: song\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n    expose:\n      - \"5432\"\n    ports:\n      - \"12345:5432\"\n    volumes:\n      - \"./docker/song-db-init:/docker-entrypoint-initdb.d\"\n    healthcheck:\n      test: [ \"CMD-SHELL\", \"pg_isready -U postgres\" ]\n      interval: 15s\n      timeout: 15s\n      retries: 5\n  aws-cli:\n    image: \"mesosphere/aws-cli:latest\"\n    environment:\n      AWS_ACCESS_KEY_ID: minio\n      AWS_SECRET_ACCESS_KEY: minio123\n      AWS_DEFAULT_REGION: us-east-1\n    volumes:\n      - \"./docker/object-storage-init/data/score.data/data:/score-data:ro\"\n  song-server:\n    image: ghcr.io/overture-stack/song-server:438c2c42\n    environment:\n      SERVER_PORT: 8080\n      SPRING_PROFILES_ACTIVE: \"prod,secure,default\"\n      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak-server:8080/realms/myrealm/protocol/openid-connect/certs\n      AUTH_SERVER_INTROSPECTIONURI: http://keycloak-server:8080/realms/myrealm/apikey/check_api_key/\n      AUTH_SERVER_TOKENNAME: apiKey\n      AUTH_SERVER_CLIENTID: system\n      AUTH_SERVER_CLIENTSECRET: systemsecret\n      AUTH_SERVER_PROVIDER: keycloak\n      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak-server:8080\n      AUTH_SERVER_KEYCLOAK_REALM: myrealm\n      AUTH_SERVER_SCOPE_STUDY_PREFIX: PROGRAMDATA.\n      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE\n      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE\n      SCORE_URL: http://score-server:8080\n      SCORE_ACCESSTOKEN: 07a5a12e-a85f-4248-a9a1-851a8062b6ac\n      MANAGEMENT_SERVER_PORT: 8081\n      ID_USELOCAL: \"true\"\n      SPRING_DATASOURCE_USERNAME: postgres\n      SPRING_DATASOURCE_PASSWORD: password\n      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db/song?stringtype=unspecified\n      SPRING_FLYWAY_ENABLED: \"true\"\n      SPRING_FLYWAY_LOCATIONS: \"classpath:db/migration\"\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      song-db:\n        condition: service_healthy\n    volumes:\n      - \"./docker/scratch/song-server-logs:/opt/dcc/server_logs\"\n\nvolumes:\n    object-storage-data: {}\n",
            "Dockerfile": "###############################\n# Maven builder\n###############################\n# JDK image as builder\nFROM adoptopenjdk/openjdk11:jdk-11.0.6_10-slim as builder\n\nENV SERVER_JAR_FILE    /score-server.jar\nENV CLIENT_DIST_DIR    /score-client-dist\n\nWORKDIR /srv\nCOPY . /srv\n\n# Build project\nRUN ./mvnw package -DskipTests\n\n# Prepare server jar\nRUN cd score-server/target \\\n    && mv score-server-*-dist.tar.gz score-server.tar.gz \\\n    && tar zxvf score-server.tar.gz -C /tmp \\\n    && mv -f /tmp/score-server-*  /tmp/score-server-dist  \\\n    && cp -f /tmp/score-server-dist/lib/score-server.jar $SERVER_JAR_FILE\n\n# Prepare client dist\nRUN cd score-client/target \\\n\t&& mv score-client-*-dist.tar.gz score-client.tar.gz \\\n    && tar zxvf score-client.tar.gz -C /tmp \\\n    && mv -f /tmp/score-client-*  /tmp/score-client-dist  \\\n    && cp -r /tmp/score-client-dist $CLIENT_DIST_DIR \\\n\t&& mkdir -p $CLIENT_DIST_DIR/logs \\\n\t&& touch $CLIENT_DIST_DIR/logs/client.log \\\n\t&& chmod 777 $CLIENT_DIST_DIR/logs/client.log \n\n###############################\n# Score Client\n###############################\nFROM --platform=linux/amd64 ubuntu:22.04 as client\n\nENV CLIENT_DIST_DIR    /score-client-dist\nENV JDK_DOWNLOAD_URL https://download.java.net/openjdk/jdk17/ri/openjdk-17+35_linux-x64_bin.tar.gz\nENV SCORE_CLIENT_HOME /score-client\nENV PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$SCORE_CLIENT_HOME/bin\nENV SCORE_USER score\n\n# Add score user, update apt, add FUSE support and basic command line tools\nRUN useradd $SCORE_USER  \\\n  \t&& apt-get update \\\n  \t&& apt-get -y upgrade \\\n    && apt-get install -y libfuse-dev fuse curl wget software-properties-common \\\n\t&& mkdir $SCORE_CLIENT_HOME\n\n# Copy client dist from previous docker build staget\nCOPY --from=builder $CLIENT_DIST_DIR/ $SCORE_CLIENT_HOME\n\n# Install Open JDK 17, and remove unused things at runtime\nRUN mkdir /usr/lib/jvm \\\n\t&& cd /usr/lib/jvm \\\n\t&& wget $JDK_DOWNLOAD_URL -O openjdk17.tar.gz \\\n\t&& tar zxvf openjdk17.tar.gz \\\n\t&& rm -rf openjdk17.tar.gz \\\n\t&& echo 'PATH=$PATH:/usr/lib/jvm/jdk-17/bin' >> /etc/environment \\\n\t&& echo 'JAVA_HOME=/usr/lib/jvm/jdk-17' >> /etc/environment \\\n\t&& rm -rf /usr/lib/jvm/jdk-17/jmods \\\n\t&& rm -rf /usr/lib/jvm/jdk-17/lib/src.zip \\\n\t&& update-alternatives --install \"/usr/bin/java\" \"java\" \"/usr/lib/jvm/jdk-17/bin/java\" 0 \\\n\t&& update-alternatives --install \"/usr/bin/javac\" \"javac\" \"/usr/lib/jvm/jdk-17/bin/javac\" 0 \\\n\t&& update-alternatives --set java /usr/lib/jvm/jdk-17/bin/java \\\n\t&& update-alternatives --set javac /usr/lib/jvm/jdk-17/bin/javac \\\n\t&& update-alternatives --list java \\\n\t&& update-alternatives --list javac \\\n\t&& java -version \\\n\t&& chown -R $SCORE_USER:$SCORE_USER $SCORE_CLIENT_HOME\n\n# Set working directory for convenience with interactive usage\nWORKDIR $SCORE_CLIENT_HOME\n\n###############################\n# Score Server\n###############################\nFROM adoptopenjdk/openjdk11:jre-11.0.6_10 as server\n\n# Paths\nENV SCORE_HOME /score-server\nENV SCORE_LOGS $SCORE_HOME/logs\nENV JAR_FILE            /score-server.jar\nENV SCORE_USER score\nENV SCORE_UID 9999\nENV SCORE_GID 9999\n\nRUN addgroup --system --gid $SCORE_GID $SCORE_USER  \\\n    && adduser --system --uid $SCORE_UID --ingroup $SCORE_USER $SCORE_USER  \\\n    && mkdir $SCORE_HOME $SCORE_LOGS \\\n    && chown -R $SCORE_UID:$SCORE_GID $SCORE_HOME\n\nCOPY --from=builder $JAR_FILE $JAR_FILE\n\nUSER $SCORE_UID\n\nWORKDIR $SCORE_HOME\n\nCMD java -Dlog.path=$SCORE_LOGS \\\n    -jar $JAR_FILE \\\n    --spring.config.location=classpath:/application.yml,classpath:/bootstrap.properties\n",
            "Jenkinsfile": "@Library(value='jenkins-pipeline-library@master', changelog=false) _\npipelineOVERTUREScore()"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}