{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "build.gradle": "buildscript {\n    repositories {\n        mavenCentral()\n        jcenter()\n    }\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}\"\n        classpath \"io.spring.gradle:dependency-management-plugin:$springDependencyManagementPluginVersion\"\n        classpath \"com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion\"\n        classpath \"org.springframework.cloud:spring-cloud-contract-gradle-plugin:$springCloudContractDependenciesVersion\"\n    }\n}\n\napply plugin: WaitForMySqlPlugin\napply plugin: 'docker-compose'\n\nsubprojects {\n\n    apply plugin: \"java\"\n\n    // TODO apply plugin: 'pmd'\n\n    sourceCompatibility = '1.8'\n    targetCompatibility = '1.8'\n\n    group = \"net.chrisrichardson.ftgo\"\n\n    repositories {\n        eventuateMavenRepoUrl.split('[ ,]').each { repoUrl -> maven { url repoUrl.trim() } }\n\n        mavenCentral()\n        jcenter()\n\n        maven {\n            url 'https://jitpack.io'\n        }\n\n        maven {\n            url \"${project.rootDir}/build/repo\"\n        }\n\n    }\n\n    dependencies {\n\n        implementation(platform(\"io.eventuate.platform:eventuate-platform-dependencies:$eventuatePlatformVersion\"))\n        constraints {\n                compile (\"io.netty:netty-codec-http2\") {\n                    version {\n                        strictly(\"4.1.72.Final\")\n                    }\n                }\n        }\n\n\n    }\n}\n\ntask buildContracts(type: GradleBuild) {\n  tasks = subprojects.collect { it.name }.findAll { it.endsWith(\"-contracts\") }.collect { \":\" + it + \":publish\"}\n}\n\ntask compileAll(type: GradleBuild) {\n  tasks = [\"testClasses\", \"compileIntegrationTestJava\", \"compileComponentTestJava\"]\n}\n\ndockerCompose {\n\n  environment.put \"EVENTUATE_COMMON_VERSION\", eventuateCommonImageVersion\n  environment.put \"EVENTUATE_CDC_VERSION\", eventuateCdcImageVersion\n  environment.put \"EVENTUATE_SAGA_VERSION\", eventuateTramSagasImageVersion\n  environment.put \"EVENTUATE_JAVA_BASE_IMAGE_VERSION\", eventuateExamplesBaseImageVersion\n  environment.put \"EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION\", eventuateMessagingKafkaImageVersion\n\n  projectName = null\n  removeOrphans = true\n  retainContainersOnStartupFailure = true\n\n  if (project.hasProperty('startedServices'))\n    startedServices= project.ext.startedServices.split(',')\n\n  mysql {\n      projectName = null\n      startedServices = [\"mysql\"]\n  }    \n  \n  infrastructure {\n      projectName = null\n      startedServices = [\"mysql\", \"cdc-service\", \"dynamodblocal-init\", \"kafka\", \"zookeeper\"]\n  }    \n  \n  kafkaGui {\n      projectName = null\n      startedServices = [\"kafka-gui\"]\n  }  \n}\n\ncomposeUp.dependsOn(infrastructureComposeUp)\n\nsubprojects.each {\n  if (it.name.endsWith(\"-service\") || it.name.endsWith(\"-gateway\")) {\n    composeBuild.dependsOn(\":\" + it.name + \":assemble\")\n    composeUp.dependsOn(\":\" + it.name + \":assemble\")\n  }\n }"
        },
        "database": "MySQL",
        "build_system": "Gradle",
        "config_files": {
            "docker-compose.yml": "version: '3'\nservices:\n  zookeeper:\n    image: eventuateio/eventuate-zookeeper:$EVENTUATE_COMMON_VERSION\n    ports:\n      - 2181:2181\n    environment:\n      ZOOKEEPER_CLIENT_PORT: 2181\n      KAFKA_HEAP_OPTS: -Xmx64m\n\n  kafka:\n    image: \"eventuateio/eventuate-kafka:$EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION\"\n    ports:\n      - 9092:9092\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_LISTENERS: LC://kafka:29092,LX://kafka:9092\n      KAFKA_ADVERTISED_LISTENERS: LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LC:PLAINTEXT,LX:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LC\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_HEAP_OPTS: -Xmx192m\n  mysql:\n    build:\n      context: ./mysql\n      args:\n        EVENTUATE_COMMON_VERSION: ${EVENTUATE_COMMON_VERSION?}\n        EVENTUATE_SAGA_VERSION: ${EVENTUATE_SAGA_VERSION?}\n    ports:\n      - 3306:3306\n    environment:\n      - MYSQL_ROOT_PASSWORD=rootpassword\n      - MYSQL_USER=mysqluser\n      - MYSQL_PASSWORD=mysqlpw\n  cdc-service:\n    image: eventuateio/eventuate-cdc-service:$EVENTUATE_CDC_VERSION\n    ports:\n      - \"8099:8080\"\n    depends_on:\n      - mysql\n      - kafka\n    environment:\n      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n      EVENTUATE_CDC_PIPELINE_PIPELINE1_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE1_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE1_EVENTUATEDATABASESCHEMA: ftgo_consumer_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE2_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE2_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE2_EVENTUATEDATABASESCHEMA: ftgo_order_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE3_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE3_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE3_EVENTUATEDATABASESCHEMA: ftgo_kitchen_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE4_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE4_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE4_EVENTUATEDATABASESCHEMA: ftgo_restaurant_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE5_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE5_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE5_EVENTUATEDATABASESCHEMA: ftgo_accounting_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE6_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE6_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE6_EVENTUATEDATABASESCHEMA: ftgoorderhistoryservice\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE7_TYPE: eventuate-local\n      EVENTUATE_CDC_PIPELINE_PIPELINE7_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE7_EVENTUATEDATABASESCHEMA: ftgo_accounting_service\n\n      EVENTUATE_CDC_PIPELINE_PIPELINE8_TYPE: eventuate-tram\n      EVENTUATE_CDC_PIPELINE_PIPELINE8_READER: reader1\n      EVENTUATE_CDC_PIPELINE_PIPELINE8_EVENTUATEDATABASESCHEMA: ftgo_delivery_service\n\n      EVENTUATE_CDC_READER_READER1_TYPE: mysql-binlog\n      EVENTUATE_CDC_READER_READER1_DATASOURCEURL: jdbc:mysql://mysql:3306/eventuate\n      EVENTUATE_CDC_READER_READER1_DATASOURCEUSERNAME: root\n      EVENTUATE_CDC_READER_READER1_DATASOURCEPASSWORD: rootpassword\n      EVENTUATE_CDC_READER_READER1_DATASOURCEDRIVERCLASSNAME: com.mysql.jdbc.Driver\n      EVENTUATE_CDC_READER_READER1_LEADERSHIPLOCKPATH: /eventuate/cdc/leader/common\n      EVENTUATE_CDC_READER_READER1_CDCDBUSERNAME: root\n      EVENTUATE_CDC_READER_READER1_CDCDBPASSWORD: rootpassword\n      EVENTUATE_CDC_READER_READER1_READOLDDEBEZIUMDBOFFSETSTORAGETOPIC: \"false\"\n      EVENTUATE_CDC_READER_READER1_MYSQLBINLOGCLIENTUNIQUEID: 1\n      EVENTUATE_CDC_READER_READER1_OFFSETSTOREKEY: MySqlBinlog\n      EVENTUATE_CDC_READER_READER1_OFFSETSTORAGETOPICNAME: db.history.common\n      EVENTUATE_CDC_READER_READER1_OUTBOXID: 1\n\n  ftgo-consumer-service:\n    build: \n      context: ./ftgo-consumer-service\n      args:\n          baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n    ports:\n      - \"8081:8080\"\n    depends_on:\n      - mysql\n      - kafka\n      - cdc-service\n    environment:\n      SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_consumer_service\n      SPRING_DATASOURCE_USERNAME: ftgo_consumer_service_user\n      SPRING_DATASOURCE_PASSWORD: ftgo_consumer_service_password\n      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n      EVENTUATE_DATABASE_SCHEMA: ftgo_consumer_service\n  ftgo-order-service:\n    build: \n      context: ./ftgo-order-service\n      args:\n          baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n    ports:\n      - \"8082:8080\"\n    depends_on:\n      - mysql\n      - kafka\n      - cdc-service\n      - zipkin\n    environment:\n      SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_order_service\n      SPRING_DATASOURCE_USERNAME: ftgo_order_service_user\n      SPRING_DATASOURCE_PASSWORD: ftgo_order_service_password\n      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n      SPRING_SLEUTH_ENABLED: \"true\"\n      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1\n      SPRING_ZIPKIN_BASE_URL: http://zipkin:9411/\n      EVENTUATE_DATABASE_SCHEMA: ftgo_order_service\n  ftgo-kitchen-service:\n      build: \n        context: ./ftgo-kitchen-service\n        args:\n            baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n      ports:\n        - \"8083:8080\"\n      depends_on:\n        - mysql\n        - kafka\n        - zookeeper\n        - cdc-service\n      environment:\n        SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_kitchen_service\n        SPRING_DATASOURCE_USERNAME: ftgo_kitchen_service_user\n        SPRING_DATASOURCE_PASSWORD: ftgo_kitchen_service_password\n        SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n        EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n        EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n        EVENTUATE_DATABASE_SCHEMA: ftgo_kitchen_service\n  ftgo-restaurant-service:\n      build: \n        context: ./ftgo-restaurant-service\n        args:\n            baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n      ports:\n        - \"8084:8080\"\n      depends_on:\n        - mysql\n        - kafka\n        - zookeeper\n        - cdc-service\n      environment:\n        SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_restaurant_service\n        SPRING_DATASOURCE_USERNAME: ftgo_restaurant_service_user\n        SPRING_DATASOURCE_PASSWORD: ftgo_restaurant_service_password\n        SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n        EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n        EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n        EVENTUATE_DATABASE_SCHEMA: ftgo_restaurant_service\n  ftgo-accounting-service:\n        build: \n          context: ./ftgo-accounting-service\n          args:\n              baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n        ports:\n          - \"8085:8080\"\n        depends_on:\n          - mysql\n          - kafka\n          - zookeeper\n          - cdc-service\n        environment:\n          SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_accounting_service\n          SPRING_DATASOURCE_USERNAME: ftgo_accounting_service_user\n          SPRING_DATASOURCE_PASSWORD: ftgo_accounting_service_password\n          SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n          EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n          EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n          EVENTUATE_DATABASE_SCHEMA: ftgo_accounting_service\n  ftgo-delivery-service:\n    build: \n      context: ./ftgo-delivery-service\n      args:\n          baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n    ports:\n      - \"8089:8080\"\n    depends_on:\n      - mysql\n      - kafka\n      - cdc-service\n      - zipkin\n    environment:\n      SPRING_DATASOURCE_URL: jdbc:mysql://mysql/ftgo_delivery_service\n      SPRING_DATASOURCE_USERNAME: ftgo_delivery_service_user\n      SPRING_DATASOURCE_PASSWORD: ftgo_delivery_service_password\n      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.jdbc.Driver\n      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n      SPRING_SLEUTH_ENABLED: \"true\"\n      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1\n      SPRING_ZIPKIN_BASE_URL: http://zipkin:9411/\n      EVENTUATE_DATABASE_SCHEMA: ftgo_delivery_service\n  ftgo-order-history-service:\n    build: \n      context: ./ftgo-order-history-service\n      args:\n          baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n    ports:\n      - \"8086:8080\"\n    depends_on:\n      - kafka\n      - zookeeper\n      - cdc-service\n      - dynamodblocal\n      - dynamodblocal-init\n    environment:\n      EVENTUATELOCAL_KAFKA_BOOTSTRAP_SERVERS: kafka:29092\n      EVENTUATELOCAL_ZOOKEEPER_CONNECTION_STRING: zookeeper:2181\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-id_key}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-access_key}\n      AWS_DYNAMODB_ENDPOINT_URL: http://dynamodblocal:8000\n      AWS_REGION: ${AWS_REGION:-us-west-2}\n  ftgo-api-gateway:\n    build: \n      context: ./ftgo-api-gateway\n      args:\n          baseImageVersion: ${EVENTUATE_JAVA_BASE_IMAGE_VERSION}\n    ports:\n      - \"8087:8080\"\n    environment:\n      ORDER_DESTINATIONS_ORDERSERVICEURL: http://ftgo-order-service:8080\n      ORDER_DESTINATIONS_ORDERHISTORYSERVICEURL: http://ftgo-order-history-service:8080\n      CONSUMER_DESTINATIONS_CONSUMERSERVICEURL: http://ftgo-consumer-service:8080\n      SPRING_SLEUTH_ENABLED: \"true\"\n      SPRING_SLEUTH_SAMPLER_PROBABILITY: 1\n      SPRING_ZIPKIN_BASE_URL: http://zipkin:9411/\n\n  zipkin:\n      image: openzipkin/zipkin:2.21\n      ports:\n       - \"9411:9411\"\n      environment:\n        JAVA_OPTS: -Xmx128m\n\n  dynamodblocal:\n    build: ./dynamodblocal\n    ports:\n     - \"8000:8000\"\n    environment:\n      JAVA_OPTS: -Xmx128m\n\n  dynamodblocal-init:\n    build: ./dynamodblocal-init\n    depends_on:\n      - dynamodblocal\n    restart: on-failure\n    environment:\n      AWS_DYNAMODB_ENDPOINT_URL: http://dynamodblocal:8000\n      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-id_key}\n      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-access_key}\n      AWS_REGION: ${AWS_REGION:-us-west-2}\n\n  kafka-gui:\n    image: quay.io/cloudhut/kowl:master-1d07695\n    ports:\n      - 9088:8080\n    depends_on:\n      - kafka\n    environment:\n      KAFKA_BROKERS: kafka:29092",
            "dynamodblocal/Dockerfile": "FROM amazon/dynamodb-local:1.18.0\nENTRYPOINT java -jar DynamoDBLocal.jar -inMemory -sharedDb -port 8000\nHEALTHCHECK --start-period=5s --interval=5s CMD curl http://localhost:8000 || exit 1\n",
            ".circleci/config.yml": "version: 2.1\nsetup: true\norbs:\n  eventuate-gradle-build-and-test: \"eventuate_io/eventuate-gradle-build-and-test@0.2.1\"\n  continuation: circleci/continuation@0.1.2\njobs:\n  setup:\n    executor: continuation/default\n    steps:\n      - checkout # checkout code\n      - run: # run a command\n          name: Generate config\n          command: |\n            ./.circleci/generate-config.sh > generated_config.yml\n      - continuation/continue:\n          configuration_path: generated_config.yml\n\nworkflows:\n  setup:\n    jobs:\n      - setup\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "compile-schema-per-service.sh"
        ],
        "folders": []
    }
}