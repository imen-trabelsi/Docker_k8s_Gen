{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "blinker==1.8.2\ncached_property==1.5.1\nclick==8.1.7\ncolorama==0.4.6\nfactory-boy==2.12.0\nFlask==2.3.2\nFlask-APScheduler==1.11.0\nFlask-Caching==2.0.2\nFlask-Cors==4.0.1\nflask-compress==1.4.0\nFlask-Migrate==2.5.2\nflask-restx==1.1.0\nFlask-SQLAlchemy==3.0.5\nflask_jwt_oidc==0.1.5\nitsdangerous==2.2.0\nJinja2==3.1.4\nMarkupSafe==2.1.5\npostgres==3.0.0\npsycopg2==2.9.6\npsycopg2-binary==2.9.6\npy-healthcheck==1.10.1\npytest==4.5.0\npytest-cov==2.7.1\npython-dateutil==2.8.0\npython-dotenv==0.10.2\npython-magic==0.4.18\nredis==3.2.1\nrequests==2.32.0\nSQLAlchemy==2.0.19\nuwsgi==2.0.23\nuwsgitop==0.11\nWerkzeug==3.0.3\n"
        },
        "database": "PostgreSQL",
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nservices:\n###############################################################################\n###                     PostgreSQL Database Definition                      ###\n###############################################################################\n  postgres:\n    restart: always\n    container_name: primedb\n    image: postgres:10.6\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USERNAME: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - local_postgres_data:/var/lib/postgresql/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                           MongoDB Definition                            ###\n###############################################################################\n  mongo:\n    restart: always\n    container_name: prime-mongodb\n    image: mongo:3\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: prime\n    ports:\n      - 8081:8081\n    volumes:\n      - local_mongodb_data:/var/lib/mongodb/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                            Redis Definition                             ###\n###############################################################################\n  redis:\n    image: redis:3.2-alpine\n    container_name: prime-redis\n    restart: always\n    command: redis-server --requirepass redis-password\n    ports:\n      - \"6379:6379\"\n    networks:\n      - prime-net\n\n###############################################################################\n##                      Verifiable Credential Agent Definition               ##\n###############################################################################\n  # agent:\n  #   image: bcgovimages/aries-cloudagent:py36-1.16-1_0.7.0\n  #   environment:\n  #     ACAPY_LABEL: ${AGENT_NAME}\n  #     ACAPY_ENDPOINT: ${AGENT_ENDPOINT}\n  #     ACAPY_GENESIS_URL: ${LEDGER_URL}/genesis\n  #     ACAPY_WALLET_NAME: ${AGENT_WALLET_NAME}\n  #     ACAPY_WALLET_TYPE: \"indy\"\n  #     ACAPY_WALLET_KEY: ${AGENT_WALLET_ENCRYPTION_KEY}\n  #     ACAPY_WALLET_SEED: ${AGENT_WALLET_SEED}\n  #     ACAPY_WALLET_STORAGE_TYPE: ${AGENT_WALLET_STORAGE_TYPE}\n  #     ACAPY_AUTO_PROVISION: \"true\"\n  #     ACAPY_WEBHOOK_URL: ${AGENT_WEBHOOK_URL}\n  #     ACAPY_LOG_LEVEL: ${AGENT_LOG_LEVEL}\n  #     ACAPY_AUTO_ACCEPT_INVITES: \"true\"\n  #     ACAPY_AUTO_ACCEPT_REQUESTS: \"true\"\n  #     ACAPY_AUTO_PING_CONNECTION: \"true\"\n  #     ACAPY_AUTO_RESPOND_MESSAGES: \"true\"\n  #     ACAPY_TAILS_SERVER_BASE_URL: ${TAILS_SERVER_URL}\n  #     AGENT_HTTP_IN_PORT: ${AGENT_HTTP_IN_PORT}\n  #     AGENT_WS_IN_PORT: ${AGENT_WS_IN_PORT}\n  #     AGENT_ADMIN_PORT: ${AGENT_ADMIN_PORT}\n  #     WALLET_HOST: ${WALLET_HOST}\n  #     WALLET_PORT: ${WALLET_PORT}\n  #     WALLET_USER: ${WALLET_USER}\n  #     WALLET_PASSWORD: ${WALLET_PASSWORD}\n  #   networks:\n  #     - prime-net\n  #   ports:\n  #     - ${AGENT_HTTP_IN_PORT}:${AGENT_HTTP_IN_PORT}\n  #     - ${AGENT_WS_IN_PORT}:${AGENT_WS_IN_PORT}\n  #     - ${AGENT_ADMIN_PORT}:${AGENT_ADMIN_PORT}\n  #   depends_on:\n  #     - wallet\n  #   entrypoint: /bin/bash\n  #   command: [\n  #       \"-c\",\n  #       \"curl -d '{\\\"seed\\\":\\\"${AGENT_WALLET_SEED}\\\", \\\"role\\\":\\\"ENDORSER\\\", \\\"alias\\\":\\\"${AGENT_WALLET_NAME}\\\"}' -X POST ${LEDGER_URL}/register; \\\n  #       sleep 5; \\\n  #       aca-py start \\\n  #       --inbound-transport http '0.0.0.0' ${AGENT_HTTP_IN_PORT} \\\n  #       --inbound-transport ws '0.0.0.0' ${AGENT_WS_IN_PORT} \\\n  #       --outbound-transport ws \\\n  #       --outbound-transport http \\\n  #       --wallet-storage-config '{\\\"url\\\":\\\"${WALLET_HOST}:${WALLET_PORT}\\\",\\\"max_connections\\\":5}' \\\n  #       --wallet-storage-creds '{\\\"account\\\":\\\"${WALLET_USER}\\\",\\\"password\\\":\\\"${WALLET_PASSWORD}\\\",\\\"admin_account\\\":\\\"${WALLET_USER}\\\",\\\"admin_password\\\":\\\"${WALLET_PASSWORD}\\\"}' \\\n  #       --admin '0.0.0.0' ${AGENT_ADMIN_PORT} \\\n  #       --${AGENT_ADMIN_MODE}\",\n  #     ]\n\n#######################################################################################\n##                      Verifiable Credential Wallet Definition                      ##\n#######################################################################################\n  # wallet:\n  #   image: postgres:12-alpine\n  #   environment:\n  #     POSTGRES_USER: DB_USER\n  #     POSTGRES_PASSWORD: DB_PASSWORD\n  #   networks:\n  #     - prime-net\n  #   ports:\n  #     - 5434:5432\n  #   volumes:\n  #     - wallet:/var/lib/postgresql/data\n\n###############################################################################\n##                        API Backend Definition                             ##\n###############################################################################\n  dotnet-webapi:\n    container_name: prime-webapi-backend\n    restart: always\n    build:\n      context: prime-dotnet-webapi/\n      args:\n        DB_HOST: primedb\n        PGPASSWORD: postgres\n        POSTGRESQL_ADMIN_PASSWORD: postgres\n        POSTGRESQL_USERNAME: postgres\n        POSTGRESQL_DATABASE: postgres\n        DB_CONNECTION_STRING: \"host=primedb;port=5432;database=postgres;username=postgres;password=postgres\"\n        ASPNETCORE_HTTPS_PORT: \"5001\"\n        ASPNETCORE_ENVIRONMENT: \"Development\"\n        ASPNETCORE_URLS: \"http://+:8080\"\n        DOTNET_CLI_HOME: \"/tmp/DOTNET_CLI_HOME\"\n    environment:\n      DB_HOST: primedb\n      PGPASSWORD: postgres\n      POSTGRESQL_ADMIN_PASSWORD: postgres\n      POSTGRESQL_USERNAME: postgres\n      POSTGRESQL_DATABASE: postgres\n      DB_CONNECTION_STRING: \"host=primedb;port=5432;database=postgres;username=postgres;password=postgres\"\n      ASPNETCORE_HTTPS_PORT: \"5001\"\n      ASPNETCORE_ENVIRONMENT: \"Development\"\n      ASPNETCORE_URLS: \"http://+:8080\"\n      DOTNET_CLI_HOME: \"/tmp/DOTNET_CLI_HOME\"\n    volumes:\n      - ./prime-dotnet-webapi/:/app\n      - prime-dotnet-webapi-bin:/app/bin\n      - prime-dotnet-webapi-obj:/app/obj\n      - ${APPDATA}/Microsoft/UserSecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81:/root/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81\n      # Use the following instead if developing on Mac/Linux:\n      # - ${HOME}/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81:/root/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81\n    ports:\n      - \"5000:8080\"\n      - \"5001:5001\"\n    networks:\n      - prime-net\n    depends_on:\n      - postgres\n    entrypoint: /bin/bash\n    command: [\n      \"-c\",\n      \"echo Waiting for Database...;\n      sleep 15;\n      echo \\\"Running Database Migrations...\\\";\n      dotnet ef database update;\n      echo \\\"Starting API...\\\";\n      dotnet watch run --urls=http://+:8080\"\n    ]\n\n###############################################################################\n###                         Web Frontend Definition                         ###\n###############################################################################\n  nginx-angular:\n    container_name: prime-frontend\n    build:\n      context: ./prime-angular-frontend/\n      dockerfile: openshift.dockerfile\n      args:\n        KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}\n        KEYCLOAK_REALM: ${KEYCLOAK_REALM}\n        KEYCLOAK_URL: ${KEYCLOAK_URL}\n        REDIRECT_URL: ${REDIRECT_URL}\n        JWT_WELL_KNOWN_CONFIG: ${JWT_WELL_KNOWN_CONFIG}\n    # command: \"nginx -g 'daemon off;'\"\n    restart: always\n    ports:\n       - \"8080:8080\"\n       - \"4200:8080\"\n    expose:\n       - \"8080\"\n       - \"4200\"\n    networks:\n      - prime-net\n    depends_on:\n      - dotnet-webapi\n\n###############################################################################\n###                      Local SMTP Server Definition                       ###\n###############################################################################\n  mailhog:\n    container_name: mailhog\n    restart: always\n    image: mailhog/mailhog:latest\n    ports:\n      - 25:1025\n      - 1025:1025\n      - 8025:8025 # Visit localhost:8025 to see the list of captured emails\n    networks:\n      - prime-net\n\n###############################################################################\n###                     Database Inspection Definition                      ###\n###############################################################################\n  schema-spy:\n    container_name: schema-spy\n    build:\n      context: schemaspy/\n    image: openjdk:jre-alpine\n    ports:\n      - \"8069:8069\"\n      - \"80:8069\"\n    depends_on:\n      - postgres\n    networks:\n      - prime-net\n\n###############################################################################\n###                            Backup Definition                            ###\n###############################################################################\n  backup:\n    container_name: backup\n    build:\n      context: prime-database-backup\n    ports:\n      - 6432:5432\n      - 9081:8081\n    depends_on:\n      - postgres\n      - mongo\n    volumes:\n      - db_backup_data:/opt/backup\n      - local_postgres_data:/var/lib/postgresql/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                       Document Manager Definition                       ###\n###############################################################################\n  document_manager_backend:\n    restart: always\n    container_name: document-manager-backend\n    build:\n      context: document-manager/backend\n    ports:\n      - 6001:6001\n    volumes:\n      - ./document-manager/backend/:/app/\n    depends_on:\n      - postgres\n      - redis\n      - document_manager_migrate\n    env_file: ./document-manager/backend/.env-local\n    networks:\n      - prime-net\n\n  document_manager_migrate:\n    restart: on-failure\n    container_name: document-manager-migrate\n    build:\n      context: document-manager/backend\n      dockerfile: Dockerfile.migrate\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - ./document-manager/backend/:/app/\n    env_file: ./document-manager/backend/.env-local\n    networks:\n      - prime-net\n\n###############################################################################\n###                           Networks Definition                           ###\n###############################################################################\nnetworks:\n  prime-net:\n    driver: bridge\n\n###############################################################################\n###                            Volumes Definition                           ###\n###############################################################################\nvolumes:\n  local_postgres_data:\n  local_mongodb_data:\n  db_backup_data:\n  wallet:\n  prime-dotnet-webapi-bin:\n  prime-dotnet-webapi-obj:\n",
            "document-manager/backend/Dockerfile": "FROM python:3.12.4\nSHELL [\"/bin/bash\",\"-c\"]\n\n# Update installation utility\nRUN apt-get update -yqq\n\n# Create working directory\nRUN mkdir /app\nWORKDIR /app\n\n# Install the requirements\nCOPY requirements.txt .\nRUN set -x && \\\n    pip3 install -r requirements.txt\n\nCOPY . .\n\n# Run the server\nEXPOSE 5001 9191\nENTRYPOINT [\"./init-backend.sh\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "parse_api_response.py",
            "populate-practitioner-table.cron.yml",
            "populate-transaction-log-temp.cron.yml",
            "refresh-materialized-view.cron.yml",
            "rerun-enrollee-application-rules.cron.yml",
            "retrieve-pnet-logs.cron.yml",
            "retrieve-pnet-logs.sh",
            "send-renewal-emails.cron.yml",
            "send-unsigned-toa-emails.cron.yml",
            "update-email-statuses.cron.yml",
            "update-practitioner-table.cron.yml"
        ],
        "folders": []
    }
}