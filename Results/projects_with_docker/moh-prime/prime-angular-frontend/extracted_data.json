{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"angular-frontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"start:ie\": \"ng serve --configuration es5\",\n    \"preci\": \"rm -fr node_modules\",\n    \"ci\": \"yarn install --frozen-lockfile\",\n    \"build\": \"NG_PERSISTENT_BUILD_CACHE=1 ng build --subresource-integrity\",\n    \"test\": \"ng test --watch=false --code-coverage --browsers=ChromeHeadlessCustom\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\",\n    \"reporter\": \"ng build --configuration production --stats-json --source-map\",\n    \"bundle-report\": \"npm run reporter && webpack-bundle-analyzer dist/angular-frontend/stats-es2015.json\",\n    \"source-report\": \"npm run reporter && source-map-explorer dist/angular-frontend/main-es2015.**.js\",\n    \"postinstall\": \"ngcc\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^13.3.12\",\n    \"@angular/cdk\": \"^13.3.9\",\n    \"@angular/common\": \"^13.3.12\",\n    \"@angular/compiler\": \"^13.3.12\",\n    \"@angular/core\": \"^13.3.12\",\n    \"@angular/forms\": \"^13.3.12\",\n    \"@angular/material\": \"^13.3.9\",\n    \"@angular/material-moment-adapter\": \"^13.3.9\",\n    \"@angular/platform-browser\": \"^13.3.12\",\n    \"@angular/platform-browser-dynamic\": \"^13.3.12\",\n    \"@angular/router\": \"^13.3.12\",\n    \"@auth0/angular-jwt\": \"^5.0.2\",\n    \"@ngneat/until-destroy\": \"^8.1.4\",\n    \"@tinymce/tinymce-angular\": \"^4.2.4\",\n    \"bootstrap\": \"^4.5.3\",\n    \"classlist.js\": \"^1.1.20150312\",\n    \"filepond\": \"^4.22.1\",\n    \"filepond-plugin-file-validate-size\": \"^2.2.1\",\n    \"filepond-plugin-file-validate-type\": \"^1.2.5\",\n    \"keycloak-angular\": \"^9.1.0\",\n    \"keycloak-js\": \"^15.1.1\",\n    \"moment\": \"^2.29.3\",\n    \"ng-busy\": \"^13.1.1\",\n    \"ngx-filepond\": \"^6.0.1\",\n    \"ngx-mask\": \"^12.0.0\",\n    \"ngx-progressbar\": \"^6.1.1\",\n    \"popper.js\": \"^1.16.0\",\n    \"rxjs\": \"~7.5.4\",\n    \"smoothscroll-polyfill\": \"^0.4.4\",\n    \"tinymce\": \"^7.0.0\",\n    \"tslib\": \"^2.0.0\",\n    \"tus-js-client\": \"^1.8.0\",\n    \"web-animations-js\": \"^2.3.2\",\n    \"zone.js\": \"~0.11.5\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~13.3.11\",\n    \"@angular-eslint/builder\": \"13.3.0\",\n    \"@angular-eslint/eslint-plugin\": \"13.3.0\",\n    \"@angular-eslint/eslint-plugin-template\": \"13.3.0\",\n    \"@angular-eslint/schematics\": \"13.3.0\",\n    \"@angular-eslint/template-parser\": \"13.3.0\",\n    \"@angular/cli\": \"^13.3.11\",\n    \"@angular/compiler-cli\": \"^13.3.12\",\n    \"@angular/language-service\": \"^13.3.12\",\n    \"@types/faker\": \"^4.1.12\",\n    \"@types/jasmine\": \"~3.10.3\",\n    \"@types/jasminewd2\": \"^2.0.8\",\n    \"@types/node\": \"^12.11.1\",\n    \"@types/smoothscroll-polyfill\": \"^0.3.1\",\n    \"@types/tus-js-client\": \"^1.8.0\",\n    \"@typescript-eslint/eslint-plugin\": \"4.33.0\",\n    \"@typescript-eslint/parser\": \"4.31.1\",\n    \"eslint\": \"^7.26.0\",\n    \"faker\": \"^4.1.0\",\n    \"jasmine-core\": \"~3.6.0\",\n    \"jasmine-spec-reporter\": \"~5.0.0\",\n    \"karma\": \"~6.3.15\",\n    \"karma-chrome-launcher\": \"~3.1.0\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"~4.0.2\",\n    \"karma-jasmine-html-reporter\": \"^1.5.0\",\n    \"protractor\": \"~7.0.0\",\n    \"source-map-explorer\": \"^2.4.1\",\n    \"ts-node\": \"~7.0.0\",\n    \"typescript\": \"~4.6\",\n    \"webpack-bundle-analyzer\": \"^3.6.1\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nservices:\n###############################################################################\n###                     PostgreSQL Database Definition                      ###\n###############################################################################\n  postgres:\n    restart: always\n    container_name: primedb\n    image: postgres:10.6\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USERNAME: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - local_postgres_data:/var/lib/postgresql/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                           MongoDB Definition                            ###\n###############################################################################\n  mongo:\n    restart: always\n    container_name: prime-mongodb\n    image: mongo:3\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: prime\n    ports:\n      - 8081:8081\n    volumes:\n      - local_mongodb_data:/var/lib/mongodb/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                            Redis Definition                             ###\n###############################################################################\n  redis:\n    image: redis:3.2-alpine\n    container_name: prime-redis\n    restart: always\n    command: redis-server --requirepass redis-password\n    ports:\n      - \"6379:6379\"\n    networks:\n      - prime-net\n\n###############################################################################\n##                      Verifiable Credential Agent Definition               ##\n###############################################################################\n  # agent:\n  #   image: bcgovimages/aries-cloudagent:py36-1.16-1_0.7.0\n  #   environment:\n  #     ACAPY_LABEL: ${AGENT_NAME}\n  #     ACAPY_ENDPOINT: ${AGENT_ENDPOINT}\n  #     ACAPY_GENESIS_URL: ${LEDGER_URL}/genesis\n  #     ACAPY_WALLET_NAME: ${AGENT_WALLET_NAME}\n  #     ACAPY_WALLET_TYPE: \"indy\"\n  #     ACAPY_WALLET_KEY: ${AGENT_WALLET_ENCRYPTION_KEY}\n  #     ACAPY_WALLET_SEED: ${AGENT_WALLET_SEED}\n  #     ACAPY_WALLET_STORAGE_TYPE: ${AGENT_WALLET_STORAGE_TYPE}\n  #     ACAPY_AUTO_PROVISION: \"true\"\n  #     ACAPY_WEBHOOK_URL: ${AGENT_WEBHOOK_URL}\n  #     ACAPY_LOG_LEVEL: ${AGENT_LOG_LEVEL}\n  #     ACAPY_AUTO_ACCEPT_INVITES: \"true\"\n  #     ACAPY_AUTO_ACCEPT_REQUESTS: \"true\"\n  #     ACAPY_AUTO_PING_CONNECTION: \"true\"\n  #     ACAPY_AUTO_RESPOND_MESSAGES: \"true\"\n  #     ACAPY_TAILS_SERVER_BASE_URL: ${TAILS_SERVER_URL}\n  #     AGENT_HTTP_IN_PORT: ${AGENT_HTTP_IN_PORT}\n  #     AGENT_WS_IN_PORT: ${AGENT_WS_IN_PORT}\n  #     AGENT_ADMIN_PORT: ${AGENT_ADMIN_PORT}\n  #     WALLET_HOST: ${WALLET_HOST}\n  #     WALLET_PORT: ${WALLET_PORT}\n  #     WALLET_USER: ${WALLET_USER}\n  #     WALLET_PASSWORD: ${WALLET_PASSWORD}\n  #   networks:\n  #     - prime-net\n  #   ports:\n  #     - ${AGENT_HTTP_IN_PORT}:${AGENT_HTTP_IN_PORT}\n  #     - ${AGENT_WS_IN_PORT}:${AGENT_WS_IN_PORT}\n  #     - ${AGENT_ADMIN_PORT}:${AGENT_ADMIN_PORT}\n  #   depends_on:\n  #     - wallet\n  #   entrypoint: /bin/bash\n  #   command: [\n  #       \"-c\",\n  #       \"curl -d '{\\\"seed\\\":\\\"${AGENT_WALLET_SEED}\\\", \\\"role\\\":\\\"ENDORSER\\\", \\\"alias\\\":\\\"${AGENT_WALLET_NAME}\\\"}' -X POST ${LEDGER_URL}/register; \\\n  #       sleep 5; \\\n  #       aca-py start \\\n  #       --inbound-transport http '0.0.0.0' ${AGENT_HTTP_IN_PORT} \\\n  #       --inbound-transport ws '0.0.0.0' ${AGENT_WS_IN_PORT} \\\n  #       --outbound-transport ws \\\n  #       --outbound-transport http \\\n  #       --wallet-storage-config '{\\\"url\\\":\\\"${WALLET_HOST}:${WALLET_PORT}\\\",\\\"max_connections\\\":5}' \\\n  #       --wallet-storage-creds '{\\\"account\\\":\\\"${WALLET_USER}\\\",\\\"password\\\":\\\"${WALLET_PASSWORD}\\\",\\\"admin_account\\\":\\\"${WALLET_USER}\\\",\\\"admin_password\\\":\\\"${WALLET_PASSWORD}\\\"}' \\\n  #       --admin '0.0.0.0' ${AGENT_ADMIN_PORT} \\\n  #       --${AGENT_ADMIN_MODE}\",\n  #     ]\n\n#######################################################################################\n##                      Verifiable Credential Wallet Definition                      ##\n#######################################################################################\n  # wallet:\n  #   image: postgres:12-alpine\n  #   environment:\n  #     POSTGRES_USER: DB_USER\n  #     POSTGRES_PASSWORD: DB_PASSWORD\n  #   networks:\n  #     - prime-net\n  #   ports:\n  #     - 5434:5432\n  #   volumes:\n  #     - wallet:/var/lib/postgresql/data\n\n###############################################################################\n##                        API Backend Definition                             ##\n###############################################################################\n  dotnet-webapi:\n    container_name: prime-webapi-backend\n    restart: always\n    build:\n      context: prime-dotnet-webapi/\n      args:\n        DB_HOST: primedb\n        PGPASSWORD: postgres\n        POSTGRESQL_ADMIN_PASSWORD: postgres\n        POSTGRESQL_USERNAME: postgres\n        POSTGRESQL_DATABASE: postgres\n        DB_CONNECTION_STRING: \"host=primedb;port=5432;database=postgres;username=postgres;password=postgres\"\n        ASPNETCORE_HTTPS_PORT: \"5001\"\n        ASPNETCORE_ENVIRONMENT: \"Development\"\n        ASPNETCORE_URLS: \"http://+:8080\"\n        DOTNET_CLI_HOME: \"/tmp/DOTNET_CLI_HOME\"\n    environment:\n      DB_HOST: primedb\n      PGPASSWORD: postgres\n      POSTGRESQL_ADMIN_PASSWORD: postgres\n      POSTGRESQL_USERNAME: postgres\n      POSTGRESQL_DATABASE: postgres\n      DB_CONNECTION_STRING: \"host=primedb;port=5432;database=postgres;username=postgres;password=postgres\"\n      ASPNETCORE_HTTPS_PORT: \"5001\"\n      ASPNETCORE_ENVIRONMENT: \"Development\"\n      ASPNETCORE_URLS: \"http://+:8080\"\n      DOTNET_CLI_HOME: \"/tmp/DOTNET_CLI_HOME\"\n    volumes:\n      - ./prime-dotnet-webapi/:/app\n      - prime-dotnet-webapi-bin:/app/bin\n      - prime-dotnet-webapi-obj:/app/obj\n      - ${APPDATA}/Microsoft/UserSecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81:/root/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81\n      # Use the following instead if developing on Mac/Linux:\n      # - ${HOME}/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81:/root/.microsoft/usersecrets/2144bc8e-373b-4888-a0ca-b0ff7798bd81\n    ports:\n      - \"5000:8080\"\n      - \"5001:5001\"\n    networks:\n      - prime-net\n    depends_on:\n      - postgres\n    entrypoint: /bin/bash\n    command: [\n      \"-c\",\n      \"echo Waiting for Database...;\n      sleep 15;\n      echo \\\"Running Database Migrations...\\\";\n      dotnet ef database update;\n      echo \\\"Starting API...\\\";\n      dotnet watch run --urls=http://+:8080\"\n    ]\n\n###############################################################################\n###                         Web Frontend Definition                         ###\n###############################################################################\n  nginx-angular:\n    container_name: prime-frontend\n    build:\n      context: ./prime-angular-frontend/\n      dockerfile: openshift.dockerfile\n      args:\n        KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}\n        KEYCLOAK_REALM: ${KEYCLOAK_REALM}\n        KEYCLOAK_URL: ${KEYCLOAK_URL}\n        REDIRECT_URL: ${REDIRECT_URL}\n        JWT_WELL_KNOWN_CONFIG: ${JWT_WELL_KNOWN_CONFIG}\n    # command: \"nginx -g 'daemon off;'\"\n    restart: always\n    ports:\n       - \"8080:8080\"\n       - \"4200:8080\"\n    expose:\n       - \"8080\"\n       - \"4200\"\n    networks:\n      - prime-net\n    depends_on:\n      - dotnet-webapi\n\n###############################################################################\n###                      Local SMTP Server Definition                       ###\n###############################################################################\n  mailhog:\n    container_name: mailhog\n    restart: always\n    image: mailhog/mailhog:latest\n    ports:\n      - 25:1025\n      - 1025:1025\n      - 8025:8025 # Visit localhost:8025 to see the list of captured emails\n    networks:\n      - prime-net\n\n###############################################################################\n###                     Database Inspection Definition                      ###\n###############################################################################\n  schema-spy:\n    container_name: schema-spy\n    build:\n      context: schemaspy/\n    image: openjdk:jre-alpine\n    ports:\n      - \"8069:8069\"\n      - \"80:8069\"\n    depends_on:\n      - postgres\n    networks:\n      - prime-net\n\n###############################################################################\n###                            Backup Definition                            ###\n###############################################################################\n  backup:\n    container_name: backup\n    build:\n      context: prime-database-backup\n    ports:\n      - 6432:5432\n      - 9081:8081\n    depends_on:\n      - postgres\n      - mongo\n    volumes:\n      - db_backup_data:/opt/backup\n      - local_postgres_data:/var/lib/postgresql/data\n    networks:\n      - prime-net\n\n###############################################################################\n###                       Document Manager Definition                       ###\n###############################################################################\n  document_manager_backend:\n    restart: always\n    container_name: document-manager-backend\n    build:\n      context: document-manager/backend\n    ports:\n      - 6001:6001\n    volumes:\n      - ./document-manager/backend/:/app/\n    depends_on:\n      - postgres\n      - redis\n      - document_manager_migrate\n    env_file: ./document-manager/backend/.env-local\n    networks:\n      - prime-net\n\n  document_manager_migrate:\n    restart: on-failure\n    container_name: document-manager-migrate\n    build:\n      context: document-manager/backend\n      dockerfile: Dockerfile.migrate\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - ./document-manager/backend/:/app/\n    env_file: ./document-manager/backend/.env-local\n    networks:\n      - prime-net\n\n###############################################################################\n###                           Networks Definition                           ###\n###############################################################################\nnetworks:\n  prime-net:\n    driver: bridge\n\n###############################################################################\n###                            Volumes Definition                           ###\n###############################################################################\nvolumes:\n  local_postgres_data:\n  local_mongodb_data:\n  db_backup_data:\n  wallet:\n  prime-dotnet-webapi-bin:\n  prime-dotnet-webapi-obj:\n",
            "prime-angular-frontend/Dockerfile": "# base image\nFROM node:14.16 as buildDeps\n#SHELL [ \"/bin/bash\",\"-c\"]\n# set working directory\nUSER 0\nENV NODE_ROOT /usr/src/app\nENV REDIRECT_URL $REDIRECT_URL\nRUN mkdir -p /usr/src/app\n\nRUN printenv && \\\n    pwd && \\\n    ls -alh\nWORKDIR /usr/src/app\n\nCOPY . .\nRUN apt-get update && \\\n    apt-get install yarn && \\\n    apt-get install -y nginx gettext-base && \\\n    mkdir -p /var/cache/nginx && \\\n    mkdir -p /var/cache/nginx/client_temp && \\\n    touch /etc/nginx/conf.d/default.conf && \\\n    chmod -R 777 /etc/nginx && \\\n    chmod -R 777 /var/cache/nginx && \\\n    chmod -R 777 /var/run\nCOPY nginx.conf /etc/nginx/\nCOPY nginxdev.conf /etc/nginx/nginx.template.conf\nCOPY entrypoint.sh /\n\nRUN cat /usr/src/app/src/environments/environment.prod.ts\nRUN npm install @angular/cli -g && \\\n    yarn && \\\n    ng build --configuration=production && \\\n    echo \"NPM packages installed...\"\n\n# RUN npm audit fix && \\\n# FROM nginx:1.15-alpine\n# COPY --from=buildDeps /usr/src/app/dist/angular-frontend /usr/share/nginx/html\n# RUN rm -f /etc/nginx/conf.d/default.conf\n# COPY --from=buildDeps /usr/src/app/nginx.conf /etc/nginx/\n# COPY --from=buildDeps /usr/src/app/nginx.template.conf /etc/nginx/nginx.template.conf\n# COPY --from=build-deps /usr/src/app/nginx${OC_APP}.conf /etc/nginx/nginx.template.conf\n# COPY --from=buildDeps /usr/src/app/entrypoint.sh /etc/nginx\n\nRUN chmod +x /entrypoint.sh && \\\n    chmod 777 /entrypoint.sh && \\\n    echo \"Build completed.\"\n\n#WORKDIR /\n\nCOPY ./entrypoint.sh /\nRUN chmod +x /entrypoint.sh\n\nEXPOSE 80 8080 4200:8080\n\n#CMD /etc/nginx/entrypoint.sh\nCMD /entrypoint.sh\n",
            "prime-angular-frontend/nginx.conf": "# Not used in OpenShift deployments\n\n#user nobody;\nworker_processes  16;\nerror_log  /var/log/nginx/error.log warn;\npid /run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    # log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                   '$status $body_bytes_sent \"$http_referer\" '\n    #                   '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    # w3c standard log format\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                      'rt=$request_time urt=$upstream_response_time $pipe';\n\n    access_log  /var/log/nginx/access.log  main;\n    sendfile        on;\n    #tcp_nopush     on;\n    keepalive_timeout  65;\n    #gzip  on;\n    include /etc/nginx/conf.d/*.conf;\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "parse_api_response.py",
            "populate-practitioner-table.cron.yml",
            "populate-transaction-log-temp.cron.yml",
            "refresh-materialized-view.cron.yml",
            "rerun-enrollee-application-rules.cron.yml",
            "retrieve-pnet-logs.cron.yml",
            "retrieve-pnet-logs.sh",
            "send-renewal-emails.cron.yml",
            "send-unsigned-toa-emails.cron.yml",
            "update-email-statuses.cron.yml",
            "update-practitioner-table.cron.yml"
        ],
        "folders": []
    }
}