# Base image
FROM mcr.microsoft.com/dotnet/sdk:5.0 AS build

# Install required tools and libraries
RUN apt-get update \
    && apt-get install -y --no-install-recommends unzip libgdiplus libc6-dev apt-utils procps \
    && curl -sSL https://aka.ms/getvsdbgsh | bash /dev/stdin -v latest -l /vsdbg \
    && rm -rf /var/lib/apt/lists/* \

# Setting environment
ENV PATH="${PATH}:/root/.dotnet/tools"
ENV DB_HOST=${DB_HOST}
ENV PGPASSWORD=${POSTGRESQL_PASSWORD}
ENV POSTGRESQL_ADMIN_PASSWORD=${POSTGRESQL_PASSWORD}
ENV POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
ENV POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
ENV DB_CONNECTION_STRING="host=${DB_HOST};port=5432;database=${POSTGRESQL_DATABASE};username=${POSTGRESQL_USERNAME};password=${POSTGRESQL_DATABASE}"
ENV ASPNETCORE_HTTPS_PORT ${ASPNETCORE_HTTPS_PORT}
ENV ASPNETCORE_ENVIRONMENT ${ASPNETCORE_ENVIRONMENT}
ENV ASPNETCORE_URLS ${ASPNETCORE_URLS}
ENV DOTNET_CLI_HOME "/tmp/DOTNET_CLI_HOME"
ENV DOTNET_USE_POLLING_FILE_WATCHER 1
ENV API_PORT 8080

# Set work directory
WORKDIR /vsdbg
WORKDIR /app

# Copy project files
COPY . . 

#  Build and publish the project
RUN dotnet restore 
RUN dotnet publish -c Release -o out

# Runtime image
FROM mcr.microsoft.com/dotnet/aspnet:5.0

# Expose the port the app listens on
EXPOSE 8080

# Set work directory in the container
WORKDIR /app

# Copy from build image
    
# Provide application command
ENTRYPOINT ["dotnet", "watch", "run", "--urls=http://+:8080"]
