{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"atom\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My Moleculer microservices project\",\n  \"scripts\": {\n    \"build\": \"npm run grunt && tsc\",\n    \"dev\": \"npm run nodemon & npm run start-service\",\n    \"start-service\": \"cross-var node --inspect=0.0.0.0:$NODE_INSPECT_PORT -r ts-node/register ./node_modules/moleculer/bin/moleculer-runner.js --hot --repl --config moleculer.config.ts services/*.service.ts\",\n    \"nodemon\": \"./node_modules/nodemon/bin/nodemon.js --config nodemon.json --exec npm run build\",\n    \"grunt\": \"grunt\",\n    \"cli\": \"moleculer connect NATS\",\n    \"start\": \"moleculer-runner services\",\n    \"ci\": \"jest --watch\",\n    \"test\": \"jest --coverage\",\n    \"lint\": \"tslint -p tsconfig.json\",\n    \"dc:up\": \"docker-compose up --build -d\",\n    \"dc:down\": \"docker-compose down\"\n  },\n  \"keywords\": [\n    \"microservices\",\n    \"moleculer\"\n  ],\n  \"author\": \"\",\n  \"devDependencies\": {\n    \"@types/bluebird\": \"^3.5.29\",\n    \"@types/jest\": \"25.1.3\",\n    \"@types/node\": \"^10.17.17\",\n    \"autoprefixer\": \"^9.7.4\",\n    \"cross-var\": \"^1.1.0\",\n    \"cssnano\": \"^4.1.10\",\n    \"grunt\": \"^1.0.4\",\n    \"grunt-postcss\": \"^0.9.0\",\n    \"jest\": \"^25.1.0\",\n    \"jest-cli\": \"^25.1.0\",\n    \"moleculer-repl\": \"^0.6.3\",\n    \"nodemon\": \"2.0.2\",\n    \"pixrem\": \"^5.0.0\",\n    \"postcss-import\": \"^12.0.1\",\n    \"ts-jest\": \"25.2.1\",\n    \"ts-node\": \"^8.6.2\",\n    \"tslint\": \"6.0.0\",\n    \"typescript\": \"^3.8.3\"\n  },\n  \"dependencies\": {\n    \"graphql\": \"^14.6.0\",\n    \"ioredis\": \"^4.16.0\",\n    \"jaeger-client\": \"^3.17.2\",\n    \"moleculer\": \"0.14.3\",\n    \"moleculer-apollo-server\": \"0.2.0\",\n    \"moleculer-db\": \"^0.8.5\",\n    \"moleculer-web\": \"^0.9.1\",\n    \"nats\": \"^1.4.2\",\n    \"node-fetch\": \"^2.6.0\",\n    \"pug\": \"^2.0.4\",\n    \"querystring\": \"^0.2.0\",\n    \"tailwindcss\": \"^1.2.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 8.x.x\"\n  },\n  \"jest\": {\n    \"coverageDirectory\": \"<rootDir>/coverage\",\n    \"testEnvironment\": \"node\",\n    \"moduleFileExtensions\": [\n      \"ts\",\n      \"tsx\",\n      \"js\"\n    ],\n    \"transform\": {\n      \"^.+\\\\.(ts|tsx)$\": \"ts-jest\"\n    },\n    \"testMatch\": [\n      \"**/*.spec.(ts|js)\"\n    ],\n    \"globals\": {\n      \"ts-jest\": {\n        \"tsConfig\": \"tsconfig.json\"\n      }\n    }\n  },\n  \"browserslist\": {\n    \"browsers\": \"last 2 versions\"\n  }\n}\n"
        },
        "database": "Redis",
        "build_system": "npm",
        "config_files": {
            ".env": "# //////////////////\n# General Project Config\n# //////////////////\nHOST_NAME=YOUR_DOMAIN.com\n\n# --- DB Setup ---\nPOSTGRES_HOST=postgresd\nPOSTGRES_USER=postgres\nPOSTGRES_PORT=5432\nPOSTGRES_PASSWORD=NEED_TO_CHANGE_TO_UNIQUE\nPOSTGRES_DB=postgres\n\n# //////////////////\n# Service Configs\n# //////////////////\n\n# --- Email Sevice ---\nEMAIL_API_KEY=NEED_TO_CHANGE_TO_UNIQUE\nEMAIL_DOMAIN=YOUR_DOMAIN.com\nEMAIL_PROVIDER=mailgun\n\n# //////////////////\n# Ory Config\n# //////////////////\nBROWSER_HYDRA_HOST=localhost\nBROWSER_CONSUMER_HOST=localhost\nBROWSER_IDP_HOST=localhost\nBROWSER_OATHKEEPER_PROXY_HOST=localhost\n\n# Ory Image Versions\nHYDRA_VERSION=v1.0.8-alpine\nOATHKEEPER_VERSION=v0.32.1\nKETO_VERSION=v0.3.6\n\n# Ory Hydra Admin Client\nADMIN_OAUTH2_CLIENT_ID=catalyst_admin\nADMIN_OAUTH2_CLIENT_SECRET=NEED_TO_CHANGE_TO_UNIQUE\n\n# Keto Org Identified\nROOT_ORG_IDENTIFIER=org.catalyst",
            "docker-compose.yml": "version: \"3.0\"\n\nservices:\n\n  # service container\n  verification_code:\n    build:\n      context: ./verification_code\n    image: catalyst_verification_code\n    env_file: docker-compose.env\n    container_name: verification_code\n    networks:\n      - catalyst-backend\n    volumes:\n      - verification_code_vol:/app/node_modules\n      - ./verification_code:/app/:delegated #delegates speeds up mac os volumes\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      SERVICES: verification_code\n      DB_NAME: verification_code\n      NODE_INSPECT_PORT: 9033\n      TRACING_ENABLED: 'true'\n      POSTGRES_HOST: ${POSTGRES_HOST}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PORT: ${POSTGRES_PORT}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_DB: ${POSTGRES_DB}\n    ports:\n      - \"9033:9033\"\n    links:\n      - nats\n      - redis\n      - jaeger\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n\n  # service container\n  email:\n    build:\n      context: ./email\n    image: catalyst_email\n    env_file: docker-compose.env\n    container_name: email\n    networks:\n      - catalyst-backend\n    volumes:\n      - email_vol:/app/node_modules\n      - ./email:/app/:delegated #delegates speeds up mac os volumes\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      SERVICES: email\n      EMAIL_DOMAIN: ${EMAIL_DOMAIN}\n      EMAIL_API_KEY: ${EMAIL_API_KEY}\n      EMAIL_PROVIDER: ${EMAIL_PROVIDER}\n      NODE_INSPECT_PORT: 9031\n      TRACING_ENABLED: 'true'\n    ports:\n      - \"9031:9031\"\n    links:\n      - nats\n      - redis\n      - jaeger\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n\n  # service container\n  client:\n    build:\n      context: ./client\n    container_name: client\n    image: catalyst_client\n    env_file: docker-compose.env\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    volumes:\n      - ./client:/app:delegated #delegates speeds up mac os volumes\n      - client_vol:/app/node_modules\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      - ADMIN_OAUTH2_CLIENT_ID=${ADMIN_OAUTH2_CLIENT_ID}\n      - ADMIN_OAUTH2_CLIENT_SECRET=${ADMIN_OAUTH2_CLIENT_SECRET}\n      - HOST_NAME=${HOST_NAME}\n      - SUB_PATH=admin\n    ports:\n      - 9089:80\n      - 19000:19000\n      - 19001:19001\n      - 19002:19002\n    links:\n      - nats\n      - redis\n      - hydra\n      - jaeger\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n      - traefik\n      - api\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.backend=client\"\n      - \"traefik.port=8080\"\n      - \"traefik.frontend.rule=Host:${HOST_NAME};PathPrefix:/\"\n\n  # service container\n  admin:\n    build:\n      context: ./admin\n    container_name: admin\n    image: catalyst_admin\n    env_file: docker-compose.env\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    volumes:\n      - ./admin:/app:delegated #delegates speeds up mac os volumes\n      - admin_vol:/app/node_modules\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      - ADMIN_OAUTH2_CLIENT_ID=${ADMIN_OAUTH2_CLIENT_ID}\n      - ADMIN_OAUTH2_CLIENT_SECRET=${ADMIN_OAUTH2_CLIENT_SECRET}\n      - HOST_NAME=${HOST_NAME}\n      - SUB_PATH=admin\n    links:\n      - nats\n      - redis\n      - hydra\n      - jaeger\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n      - traefik\n      - api\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.backend=admin\"\n      - \"traefik.port=3000\"\n      - \"traefik.frontend.rule=Host:${HOST_NAME};PathPrefix:/admin\"\n\n  # service container\n  api:\n    build:\n      context: ./api\n    image: catalyst_api\n    container_name: api\n    env_file: docker-compose.env\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    volumes:\n      - ./api:/app:delegated #delegates speeds up mac os volumes\n      - api_vol:/app/node_modules\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      SERVICES: api\n      PORT: 3000\n      LOGLEVEL: trace\n      HOST_NAME: ${HOST_NAME}\n      HYDRA_ADMIN_URL: http://hydra:4445\n      KETO_ADMIN_URL: http://keto:4466\n      NODE_INSPECT_PORT: 9030\n    ports:\n      - \"9030:9030\"\n    links:\n      - nats\n      - redis\n      - hydra\n      - keto\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n      - traefik\n      - hydra\n      - keto\n      - jaeger\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.backend=api\"\n      - \"traefik.port=3000\"\n      - \"traefik.frontend.rule=Host:${HOST_NAME}\"\n\n  # service container\n  user:\n    build:\n      context: ./user\n    container_name: user\n    image: catalyst_user\n    env_file: docker-compose.env\n    networks:\n      - catalyst-backend\n    volumes:\n      - user_vol:/app/node_modules\n      - ./user:/app/:delegated #delegates speeds up mac os volumes\n    command:\n      - ./wait-for-it.sh\n      - postgresd:5432\n      - --\n      - make\n      - start-service\n    environment:\n      SERVICES: user\n      DB_NAME: user\n      NODE_INSPECT_PORT: 9032\n      TRACING_ENABLED: 'true'\n      POSTGRES_HOST: ${POSTGRES_HOST}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PORT: ${POSTGRES_PORT}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_DB: ${POSTGRES_DB}\n    ports:\n      - \"9032:9032\"\n    links:\n      - nats\n      - redis\n    depends_on:\n      - nats\n      - redis\n      - postgresd\n      - traefik\n      - jaeger\n\n  # microeservices messaging hub\n  nats:\n    image: nats\n    container_name: nats\n    ports:\n      - \"4222:4222\"\n    networks:\n      - catalyst-backend\n\n  # services cache container. Services containers\n  # will use this for faster response rates\n  redis:\n    image: redis:alpine\n    container_name: redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - catalyst-backend\n    volumes:\n      - redis-data:/data\n\n\n  # database\n  postgresd:\n    image: postgres:9.6\n    container_name: postgresd\n    env_file: .env\n    restart: always\n    networks:\n      - catalyst-backend\n    volumes:\n      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql\n      - ./postgres/data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  # router for microservices\n  traefik:\n    image: traefik:alpine\n    container_name: traefik\n    command:\n      - --configFile=/traefik.toml\n      - --web\n      - --logLevel=INFO\n    ports:\n      - \"80:80\"\n      - \"8080:8080\"\n      - \"443:443\"\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./traefik/traefik.toml:/traefik.toml\n      - ./traefik/acme.json:/acme.json\n\n  # migration container to setup postgres,\n  # this usually will only migrate once\n  # unless you delete ./postgres/data\n  hydra-migrate:\n    image: oryd/hydra:v1.3.2-alpine\n    networks:\n      - catalyst-backend\n    environment:\n      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4\n    command:\n      migrate sql -e --yes\n    depends_on:\n      - postgresd\n    restart: on-failure\n\n  # the main hydra container providing\n  # http(s)://hydra:4444(4445)\n  hydra:\n    image: oryd/hydra:v1.3.2-alpine\n    container_name: hydra\n    build:\n      context: ./hydra\n    links:\n      - postgresd:postgresd\n    depends_on:\n      - postgresd\n      - hydra-migrate\n      - jaeger\n      - traefik\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    ports:\n      # public port\n      - \"4444:4444\"\n      # public port\n      - \"4445:4445\"\n      # port for hydra token user\n      - \"5555:5555\"\n    command:\n      serve all --dangerous-force-http\n    env_file: docker-compose.env\n    environment:\n      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4\n      - LOG_LEVEL=debug\n      - OAUTH2_ISSUER_URL=https://${HOST_NAME}/oauth\n      - OAUTH2_CONSENT_URL=https://${HOST_NAME}/consent\n      - OAUTH2_LOGIN_URL=https://${HOST_NAME}/login\n      - SYSTEM_SECRET=youReallyNeedToChangeThis\n      - OAUTH2_SHARE_ERROR_DEBUG=1\n      - OIDC_SUBJECT_TYPES_SUPPORTED=public,pairwise\n      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=youReallyNeedToChangeThis\n      - ADMIN_OAUTH2_CLIENT_ID=${ADMIN_OAUTH2_CLIENT_ID}\n      - ADMIN_OAUTH2_CLIENT_SECRET=${ADMIN_OAUTH2_CLIENT_SECRET}\n      - TRACING_PROVIDER=jaeger\n      - TRACING_PROVIDER_JAEGER_SAMPLING_SERVER_URL=http://jaeger:5778/sampling\n      - TRACING_PROVIDER_JAEGER_LOCAL_AGENT_HOST_PORT=jaeger:6831\n      - TRACING_OMIT_SQL_ARGUMENTS_FROM_SPANS=false\n    restart: on-failure\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.hydra.backend=oauth\"\n      - \"traefik.hydra.port=4444\" # callback\n      - \"traefik.hydra.frontend.rule=Host:${HOST_NAME};PathPrefixStrip:/oauth/\"\n\n  keto-migrate:\n    image: oryd/keto:v0.4\n    networks:\n      - catalyst-backend\n    links:\n      - postgresd:postgresd\n    environment:\n      - LOG_LEVEL=debug\n    command: migrate sql postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable&max_conns=20&max_idle_conns=4\n    restart: on-failure\n\n  keto:\n    image: oryd/keto:v0.4\n    container_name: keto\n    networks:\n      - catalyst-backend\n    ports:\n      - \"4466:4466\"\n    command: serve\n    links:\n      - postgresd:postgresd\n    depends_on:\n      - keto-migrate\n    environment:\n      - LOG_LEVEL=debug\n      - PORT=4466\n      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresd:5432/${POSTGRES_DB}?sslmode=disable\n    restart: on-failure\n\n  configurator:\n    build:\n      context: ./configurator\n      dockerfile: Dockerfile\n      args:\n        - HYDRA_VERSION=$HYDRA_VERSION\n        - KETO_VERSION=$KETO_VERSION\n        - OATHKEEPER_VERSION=$OATHKEEPER_VERSION\n    depends_on:\n      - hydra\n      - keto\n      # - oathkeeper-api Omit until oauthkeeper is needed\n    networks:\n      - catalyst-backend\n    environment:\n      - HOST_NAME=${HOST_NAME}\n      \n      # All of these URLs MUST NOT end with a trailing slash. This is very important!\n      - HYDRA_URL=http://hydra:4444\n      - HYDRA_ADMIN_URL=http://hydra:4445\n      - KETO_URL=http://keto:4466\n      # - RESOURCE_SERVER_URL=http://resource-server:4478 Omit until oauthkeeper is needed\n\n      # This sets the prefix for all resource, action, and subject names. Be aware that this prefix is automatically\n      # applied to all OAuth2 Clients as well.\n      - \"HYDRA_SUBJECT_PREFIX=subjects:hydra:\"\n      - \"HYDRA_RESOURCE_PREFIX=resources:hydra:\"\n      - \"HYDRA_ACTION_PREFIX=actions:hydra:\"\n      \n      - \"OATHKEEPER_RESOURCE_PREFIX=resources:oathkeeper:\"\n      - \"OATHKEEPER_ACTION_PREFIX=actions:oathkeeper:\"\n      \n      - \"KETO_RESOURCE_PREFIX=resources:${ROOT_ORG_IDENTIFIER}:\"\n      - \"KETO_ACTION_PREFIX=actions:${ROOT_ORG_IDENTIFIER}:\"\n      - \"KETO_SUBJECT_PREFIX=subjects:${ROOT_ORG_IDENTIFIER}:\"\n\n      - ADMIN_OAUTH2_CLIENT_ID=${ADMIN_OAUTH2_CLIENT_ID}\n      - ADMIN_OAUTH2_CLIENT_SECRET=${ADMIN_OAUTH2_CLIENT_SECRET}\n\n      - OATHKEEPER_HYDRA_JWK_SET_ID=jwk:oathkeeper\n      - OATHKEEPER_HYDRA_CLIENT_ID=clients:oathkeeper-client\n      - OATHKEEPER_HYDRA_CLIENT_SECRET=dummy-oathkeeper-secret\n    restart: on-failure\n\n  # tracing container for all tracing reporting\n  # includes hydra and microservices\n  jaeger:\n    networks:\n      - catalyst-frontend\n      - catalyst-backend\n    image: jaegertracing/all-in-one:latest\n    container_name: jaeger\n    ports:\n      - \"5775:5775/udp\"\n      - \"6831:6831/udp\"\n      - \"6832:6832/udp\"\n      - \"5778:5778\"\n      - \"16686:16686\"\n      - \"14268:14268\"\n      - \"9411:9411\"\n    depends_on:\n      - traefik\n    environment:\n      - QUERY_BASE_PATH=/jaeger\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.jaeger.frontend=jaeger\"\n      - \"traefik.jaeger.port=16686\"\n      - 'traefik.jaeger.frontend.rule=Host:${HOST_NAME};PathPrefix:/jaeger/'\n  \n  prometheus:\n    image: prom/prometheus:v2.1.0\n    container_name: prometheus\n    volumes:\n      - ./prometheus/:/etc/prometheus/\n      - prometheus_data:/prometheus\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/usr/share/prometheus/console_libraries'\n      - '--web.console.templates=/usr/share/prometheus/consoles'\n    ports:\n      - 9090:9090\n    links:\n      - cadvisor:cadvisor\n      - alertmanager:alertmanager\n      - user\n      - verification_code\n      - api\n      - email\n    depends_on:\n      - cadvisor\n    networks:\n      - catalyst-backend\n    restart: always\n\n  node-exporter:\n    image: prom/node-exporter\n    container_name: node-exporter\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n    command: \n      - '--path.procfs=/host/proc' \n      - '--path.sysfs=/host/sys'\n      - --collector.filesystem.ignored-mount-points\n      - \"^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)\"\n    ports:\n      - 9100:9100\n    networks:\n      - catalyst-backend\n    restart: always\n\n  alertmanager:\n    image: prom/alertmanager\n    container_name: alertmanager\n    ports:\n      - 9093:9093\n    volumes:\n      - ./alertmanager/:/etc/alertmanager/\n    networks:\n      - catalyst-backend\n    restart: always\n    command:\n      - '--config.file=/etc/alertmanager/config.yml'\n      - '--storage.path=/alertmanager'\n\n  cadvisor:\n    image: google/cadvisor\n    container_name: cadvisor\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n    ports:\n      - 8085:8080\n    networks:\n      - catalyst-backend\n    restart: always\n\n  grafana:\n    image: grafana/grafana\n    container_name: grafana\n    user: \"104\"\n    depends_on:\n      - prometheus\n      - traefik\n    ports:\n      - 3005:3000\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./grafana/provisioning/:/etc/grafana/provisioning/\n    env_file:\n      - ./grafana.env\n    links:\n      - prometheus:prometheus\n    networks:\n      - catalyst-backend\n      - catalyst-frontend\n    restart: always\n    environment:\n      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/grafana\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.frontend.rule=Path:/grafana/\"\n      - \"traefik.port=3000\"\n      - \"traefik.frontend.rule=Host:${HOST_NAME};PathPrefixStrip:/grafana\"\n      - 'traefik.frontend.redirect.entryPoint=https'\n\nvolumes:\n  verification_code_vol:\n    driver: local\n  client_vol:\n    driver: local\n  email_vol:\n    driver: local\n  admin_vol:\n    driver: local\n  redis-data:\n    driver: local\n  api_vol:\n    driver: local\n  user_vol:\n    driver: local\n  prometheus_data:\n    driver: local\n  grafana_data:\n    driver: local\n\nnetworks:\n  catalyst-backend:\n    driver: bridge\n  catalyst-frontend:\n    driver: bridge\n",
            "api/Dockerfile": "FROM node:12-alpine\n\nENV SUPPORTING_FILES /app\nARG DEV\n\n# install bash for wait-for-it script\nRUN apk update && apk add --update alpine-sdk build-base bash python nano\n\nRUN npm i -g pnpm\n\nRUN mkdir -p $SUPPORTING_FILES\nRUN mkdir -p /node_modules\n\nWORKDIR $SUPPORTING_FILES\n\nADD package.json .\n\nRUN pnpm install\n\nCOPY . $SUPPORTING_FILES\n\nRUN npm run test\n\nRUN npm run build\n\n# CMD [\"npm\", \"run\"]"
        },
        "static_files": {
            "api/public/asset-manifest.json": "{\n  \"app.js\": \"/static/js/app.d6e23bc1.chunk.js\",\n  \"app.c81850348a8e8447eb02.map\": \"/c81850348a8e8447eb02.map\",\n  \"runtime~app.js\": \"/static/js/runtime~app.8d6b8e22.js\",\n  \"runtime~app.fcd2ca09e1d83038dbb1.map\": \"/fcd2ca09e1d83038dbb1.map\",\n  \"static/js/2.f13548ee.chunk.js\": \"/static/js/2.f13548ee.chunk.js\",\n  \"2d281d72d0c4b895a1a9.map\": \"/2d281d72d0c4b895a1a9.map\",\n  \"fonts/AntDesign.ttf\": \"/./fonts/AntDesign.ttf\",\n  \"fonts/Entypo.ttf\": \"/./fonts/Entypo.ttf\",\n  \"fonts/Feather.ttf\": \"/./fonts/Feather.ttf\",\n  \"fonts/FontAwesome.ttf\": \"/./fonts/FontAwesome.ttf\",\n  \"fonts/FontAwesome5_Brands.ttf\": \"/./fonts/FontAwesome5_Brands.ttf\",\n  \"fonts/FontAwesome5_Solid.ttf\": \"/./fonts/FontAwesome5_Solid.ttf\",\n  \"fonts/Foundation.ttf\": \"/./fonts/Foundation.ttf\",\n  \"fonts/Ionicons.ttf\": \"/./fonts/Ionicons.ttf\",\n  \"fonts/MaterialCommunityIcons.ttf\": \"/./fonts/MaterialCommunityIcons.ttf\",\n  \"fonts/MaterialIcons.ttf\": \"/./fonts/MaterialIcons.ttf\",\n  \"fonts/SimpleLineIcons.ttf\": \"/./fonts/SimpleLineIcons.ttf\",\n  \"apple/icons/icon_192x192.png\": \"/apple/icons/icon_192x192.png\",\n  \"apple/icons/icon_512x512.png\": \"/apple/icons/icon_512x512.png\",\n  \"expo-service-worker.js\": \"/expo-service-worker.js\",\n  \"expo-service-worker.js.gz\": \"/expo-service-worker.js.gz\",\n  \"favicon.ico\": \"/favicon.ico\",\n  \"index.html\": \"/index.html\",\n  \"manifest.json\": \"/manifest.json\",\n  \"precache-manifest.385a8f71e53f44dfff012a93e35e2f02.js\": \"/precache-manifest.385a8f71e53f44dfff012a93e35e2f02.js\",\n  \"serve.json\": \"/serve.json\",\n  \"service-worker.js\": \"/service-worker.js\",\n  \"static/js/2.f13548ee.chunk.js.gz\": \"/static/js/2.f13548ee.chunk.js.gz\",\n  \"static/js/app.d6e23bc1.chunk.js.gz\": \"/static/js/app.d6e23bc1.chunk.js.gz\",\n  \"static/js/runtime~app.8d6b8e22.js.gz\": \"/static/js/runtime~app.8d6b8e22.js.gz\",\n  \"static/media/back-icon-mask.png\": \"/static/media/back-icon-mask.6165c9d7.png\"\n}",
            "api/public/manifest.json": "{\n  \"background_color\": \"#ffffff\",\n  \"description\": \"A Neat Expo App\",\n  \"dir\": \"auto\",\n  \"display\": \"standalone\",\n  \"lang\": \"en\",\n  \"name\": \"Catalyst\",\n  \"orientation\": \"any\",\n  \"prefer_related_applications\": true,\n  \"related_applications\": [],\n  \"short_name\": \"Catalyst\",\n  \"start_url\": \".\",\n  \"theme_color\": \"#4630EB\",\n  \"icons\": [\n    {\n      \"src\": \"/apple/icons/icon_192x192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    },\n    {\n      \"src\": \"/apple/icons/icon_512x512.png\",\n      \"sizes\": \"512x512\",\n      \"type\": \"image/png\"\n    }\n  ]\n}"
        }
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "Makefile"
        ],
        "folders": []
    }
}