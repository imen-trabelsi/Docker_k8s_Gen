{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Next.js",
        "dependencies": {
            "package.json": "{\n    \"private\": true,\n    \"scripts\": {\n        \"dev\": \"npm run development\",\n        \"development\": \"mix\",\n        \"watch\": \"mix watch\",\n        \"watch-poll\": \"mix watch -- --watch-options-poll=1000\",\n        \"hot\": \"mix watch --hot\",\n        \"prod\": \"npm run production\",\n        \"production\": \"mix --production\"\n    },\n    \"devDependencies\": {\n        \"axios\": \"^0.25\",\n        \"bootstrap\": \"^4.3.1\",\n        \"font-awesome\": \"^4.7.0\",\n        \"jquery\": \"^3.5.0\",\n        \"laravel-mix\": \"^6.0.12\",\n        \"laravel-mix-bundle-analyzer\": \"^1.0.5\",\n        \"lodash\": \"^4.17.21\",\n        \"popper.js\": \"^1.12\",\n        \"postcss\": \"^8.2.8\",\n        \"resolve-url-loader\": \"^2.3.1\",\n        \"sass\": \"^1.56.1\",\n        \"sass-loader\": \"^12.6.0\",\n        \"vue\": \"^2.5.17\",\n        \"vue-template-compiler\": \"^2.6.12\",\n        \"webpack-shell-plugin-next\": \"^2.3.1\"\n    },\n    \"dependencies\": {\n        \"@hapi/cryptiles\": \"^4.2.0\",\n        \"@hapi/hoek\": \"^8.1.0\",\n        \"add\": \"^2.0.6\",\n        \"atob\": \"^2.1.0\",\n        \"bootstrap-vue\": \"^2.21.2\",\n        \"debug\": \"^2.6.9\",\n        \"deep-extend\": \"^0.5.1\",\n        \"lang.js\": \"^1.1.14\",\n        \"macaddress\": \"^0.2.9\",\n        \"randomatic\": \"^3.0.0\",\n        \"url-parse\": \"^1.5.0\",\n        \"vue-loader\": \"^15.10.1\"\n    }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker/docker-compose.yml": "version: '2'\n\nservices:\n\n  ############################\n  ######## Databases #########\n  ############################\n  database:\n    image: mysql:5.7\n    volumes:\n      - ./database/default/local:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=restartproject\n      - MYSQL_DATABASE=restartproject\n      - MYSQL_USER=restartproject\n      - MYSQL_PASSWORD=restartproject\n    networks:\n      - restartproject\n    restart: always\n\n  database_testing:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=restartproject\n      - MYSQL_DATABASE=restartproject\n      - MYSQL_USER=restartproject\n      - MYSQL_PASSWORD=restartproject\n    volumes:\n      - ./database/default/testing:/var/lib/mysql\n    networks:\n      - restartproject\n    restart: always\n\n  db.restart-project.local:\n    depends_on:\n      - database\n    image: phpmyadmin/phpmyadmin:latest\n    environment:\n      - MYSQL_ROOT_PASSWORD=restartproject\n      - MYSQL_USER=restartproject\n      - MYSQL_PASSWORD=restartproject\n      - PMA_HOSTS=database,fixometer_db,database_testing\n      - VIRTUAL_HOST=db.restart-project.local\n    networks:\n      - proxy-tier\n      - restartproject\n    restart: always\n\n  ############################\n  ####### Email Server #######\n  ############################\n\n  mail.restart-project.local:\n    image: djfarrelly/maildev:1.0.0-rc2\n    command: bin/maildev --web 80 --smtp 25 --hide-extensions STARTTLS\n    environment:\n      - VIRTUAL_HOST=mail.restart-project.local\n      - LETSENCRYPT_HOST=mail.restart-project.local\n      - LETSENCRYPT_EMAIL=admin@restart-project.local\n    networks:\n      - proxy-tier\n      - restartproject\n    restart: always\n\n  ############################\n  ######### Reports ##########\n  ############################\n\n  cc.restart-project.local:\n    image: nginx\n    volumes:\n      - ../reports/codecoverage:/usr/share/nginx/html:ro\n    environment:\n      - VIRTUAL_HOST=cc.restart-project.local\n      - LETSENCRYPT_HOST=cc.restart-project.local\n      - LETSENCRYPT_EMAIL=admin@restart-project.local\n      - NGINX_HOST=cc.restart-project.local\n      - NGINX_PORT=80\n    networks:\n      - proxy-tier\n    restart: always\n\n  docs.restart-project.local:\n    image: nginx\n    volumes:\n      - ../reports/docs:/usr/share/nginx/html:ro\n    environment:\n      - VIRTUAL_HOST=docs.restart-project.local\n      - LETSENCRYPT_HOST=docs.restart-project.local\n      - LETSENCRYPT_EMAIL=admin@restart-project.local\n      - NGINX_HOST=docs.restart-project.local\n      - NGINX_PORT=80\n    networks:\n      - proxy-tier\n    restart: always\n\n  ############################\n  ####### Web Servers ########\n  ############################\n\n  restart-project.local:\n    depends_on:\n      - database\n      - mail.restart-project.local\n    build: ./php\n    image: restartproject_php\n    volumes:\n      - ../:/app\n    working_dir: \"/app/public\"\n    env_file:\n      - ./php/application.env\n    environment:\n      - VIRTUAL_HOST=restart-project.local\n      - LETSENCRYPT_HOST=restart-project.local\n      - LETSENCRYPT_EMAIL=admin@restart-project.local\n    command: [\"php\", \"-S\", \"0.0.0.0:80\", \"server.php\"]\n    networks:\n      - proxy-tier\n      - restartproject\n    restart: always\n\n  test.restart-project.local:\n    depends_on:\n      - database_testing\n      - mail.restart-project.local\n    build: ./php\n    image: restartproject_php\n    volumes:\n      - ../:/app\n    working_dir: \"/app/public\"\n    env_file:\n      - ./php/application.env\n    environment:\n      - APP_ENV=testing\n      - DB_HOST=database_testing\n      - FIXOMETER_DB_HOST=database_testing\n      - APP_URL=http://test.restart-project.local\n      - VIRTUAL_HOST=test.restart-project.local\n      - LETSENCRYPT_HOST=restart-project.local\n      - LETSENCRYPT_EMAIL=admin@restart-project.local\n    command: [\"php\", \"-S\", \"0.0.0.0:80\", \"server.php\"]\n    networks:\n      - proxy-tier\n      - restartproject\n    restart: always\n\n  ############################\n  ########## Tools ###########\n  ############################\n\n  php:\n    depends_on:\n      - database\n      - mail.restart-project.local\n    build: ./php\n    image: restartproject_php\n    volumes:\n      - ../:/app\n    env_file:\n      - ./php/application.env\n    command: [\"--version\"]\n    networks:\n      - restartproject\n\n  node:\n    build: ./node\n    image: restartproject_node\n    volumes:\n      - ../:/app\n    command: [\"node\", \"--version\"]\n    networks:\n      - restartproject\n\n  xdebug:\n    depends_on:\n      - database\n      - mail.restart-project.local\n    build: ./xdebug\n    image: restartproject_xdebug\n    working_dir: /app\n    volumes:\n      - ../:/app\n    env_file:\n      - ./php/application.env\n    environment:\n      - XDEBUG_CONFIG=\"idekey=PHPSTORM\"\n    command: [\"php\", \"--version\"]\n    networks:\n      - restartproject\n\n  composer:\n    depends_on:\n      - database\n      - mail.restart-project.local\n    build: ./composer\n    image: restartproject_composer\n    volumes:\n      - ../:/app\n    env_file:\n      - ./php/application.env\n    command: [\"install\"]\n    networks:\n      - restartproject\n\n  selenium:\n    image: selenium/standalone-chrome\n    networks:\n      - restartproject\n\n  dusk:\n    depends_on:\n      - database_testing\n      - test.restart-project.local\n      - selenium\n      - mail.restart-project.local\n    build: ./php\n    image: restartproject_php\n    volumes:\n      - ../:/app\n    env_file: php/application.env\n    environment:\n      - APP_ENV=testing\n      - DB_HOST=database_testing\n      - FIXOMETER_DB_HOST=database_testing\n      - APP_URL=http://test.restart-project.local\n    command: [\"php\", \"artisan\", \"dusk\"]\n    networks:\n      - restartproject\n\nnetworks:\n  proxy-tier:\n    external:\n      name: reverse-proxy\n  restartproject:",
            "docker/composer/Dockerfile": "FROM restartproject_php\n\nWORKDIR /\n\nRUN apk --no-cache add curl git subversion openssh openssl mercurial tini bash\n\nRUN echo \"memory_limit=-1\" > \"$PHP_INI_DIR/conf.d/memory-limit.ini\" \\\n && echo \"date.timezone=${PHP_TIMEZONE:-UTC}\" > \"$PHP_INI_DIR/conf.d/date_timezone.ini\"\n\nENV PATH \"/composer/vendor/bin:$PATH\"\nENV COMPOSER_ALLOW_SUPERUSER 1\nENV COMPOSER_HOME /composer\nENV COMPOSER_VERSION 1.4.2\n\nRUN curl -s -f -L -o /tmp/installer.php https://raw.githubusercontent.com/composer/getcomposer.org/da290238de6d63faace0343efbdd5aa9354332c5/web/installer \\\n && php -r \" \\\n    \\$signature = '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410'; \\\n    \\$hash = hash('SHA384', file_get_contents('/tmp/installer.php')); \\\n    if (!hash_equals(\\$signature, \\$hash)) { \\\n        unlink('/tmp/installer.php'); \\\n        echo 'Integrity check failed, installer is either corrupt or worse.' . PHP_EOL; \\\n        exit(1); \\\n    }\" \\\n && php /tmp/installer.php --no-ansi --install-dir=/usr/bin --filename=composer --version=${COMPOSER_VERSION} \\\n && rm /tmp/installer.php \\\n && composer --ansi --version --no-interaction\n\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\nWORKDIR /app\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\n\nCMD [\"composer\"]\n",
            ".gitlab-ci.yml": "stages:\n  - build\n  - test\n  - cleanup\n#  - deploy\n\nbuild:php:\n  image: registry.outlandish.com/the-restart-project/repair-directory/composer\n  stage: build\n  script:\n  - composer run-script fixometer:config\n  - composer install\n  - composer run-script post-root-package-install\n  - composer run-script key:generate\n  tags:\n  - docker\n  only:\n  - master\n  - /^feature-.*$/\n  artifacts:\n    paths:\n    - ./\n    name: \"${CI_BUILD_REF_NAME}\"\n    expire_in: 1 hour\n\nbuild:node:\n  image: node:6\n  stage: build\n  script:\n  - yarn\n  - npm run production\n  - rm -rf node_modules\n  tags:\n  - docker\n  only:\n  - master\n  - /^feature-.*$/\n  artifacts:\n    paths:\n    - ./\n    name: \"${CI_BUILD_REF_NAME}\"\n    expire_in: 1 hour\n\ntest:static-analysis:\n  image: registry.outlandish.com/the-restart-project/repair-directory/composer\n  dependencies:\n    - build:php\n  stage: test\n  allow_failure: true\n  script:\n  - composer run-script code\n  tags:\n  - docker\n  only:\n  - master\n  - /^feature-.*$/\n\ntest:unittests:\n  image: registry.outlandish.com/the-restart-project/repair-directory/composer\n  dependencies:\n    - build:php\n  stage: test\n  script:\n  - composer run-script test:unit\n  tags:\n  - docker\n  only:\n  - master\n  - /^feature-.*$/\n\ncleanup:\n  image: registry.outlandish.com/the-restart-project/repair-directory/composer\n  dependencies:\n    - build:php\n    - build:node\n  stage: cleanup\n  script:\n  - composer install --no-dev\n  - rm -rf .git\n  - rm .env\n  tags:\n  - docker\n  only:\n  - master\n  artifacts:\n    paths:\n    - ./\n    name: \"${CI_BUILD_REF_NAME}\"\n    expire_in: 1 day\n\n#deploy:heroku:\n#  dependencies:\n#    - build:php\n#    - build:node\n#  image: ruby:2.2\n#  stage: deploy\n#  tags:\n#    - docker\n#  before_script:\n#    - gem install dpl\n#  script:\n#    - \"echo 'web: php artisan doctrine:migrations:refresh && php artisan restart:import:businesses data/all.csv && $(composer config bin-dir)/heroku-php-apache2 public/' > ./Procfile\"\n#    - dpl --provider=heroku --app=restartproject --api-key=$HEROKU_STAGING_API_KEY --skip-cleanup\n#  environment:\n#    name: staging\n#    url: https://restartproject.herokuapp.com/\n#  only:\n#    - master\n\n#deploy:staging:\n#  dependencies:\n#    - cleanup\n#  stage: deploy\n#  before_script:\n#    - \"apt-get update && apt-get install sshpass\"\n#  script:\n#    - 'sed -i \"s|APP_URL=.*|APP_URL=http://community-staging.therestartproject.org|\" .env'\n#    - 'sed -i \"s|APP_DEBUG=.*|APP_DEBUG=true|\" .env'\n#    - 'sed -i \"s|APP_ENV=.*|APP_ENV=production|\" .env'\n#    - 'sed -i \"s|DB_HOST=.*|DB_HOST=${}|\".env'\n#    - 'sed -i \"s|DB_HOST=.*|DB_HOST=${}|\".env'\n#  tags:\n#    - docker\n#  only:\n#    - master\n#    - new-deploy-process\n\n# deploy:production:\n#   dependencies:\n#   - build\n#   stage: deploy\n#   script:\n#   - php composer.phar install --no-dev\n#   - rm composer.phar\n#   - rm -rf .git\n#   tags:\n#   - docker\n#   only:\n#   - tags\n#   artifacts:\n#     paths:\n#     - ./\n#     name: \"${CI_BUILD_REF_NAME}\"\n#     expire_in: 1 week",
            ".circleci/config.yml": "version: 2\n\ndependencies:\n  pre:\n    - curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n    - sudo dpkg -i google-chrome.deb\n    - sudo sed -i 's|HERE/chrome\\\"|HERE/chrome\\\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome\n    - rm google-chrome.deb\njobs:\n  build:\n    docker:\n      - image: cimg/php:8.1.12-node\n        name: map.restarters.test\n        environment:\n          - DB_CONNECTION: mysql\n          - DB_HOST: 127.0.0.1\n          - DB_PORT: 3306\n          - DB_DATABASE: repairdir_dev\n          - DB_USERNAME: repairdir_dev\n          - DB_PASSWORD: secret\n      - image: circleci/mysql:5.7.36\n        environment:\n          # You can connect once ssh'd in using  mysql -u root -p -h 127.0.0.1\n          - MYSQL_ROOT_PASSWORD: secret\n          - MYSQL_DATABASE: repairdir_dev\n          - MYSQL_USER: repairdir_dev\n          - MYSQL_PASSWORD: secret\n      - image: mcr.microsoft.com/playwright:focal\n        environment:\n          NODE_ENV: development\n    steps:\n      - checkout\n      - run: sudo apt update\n      - run: sudo apt install dnsutils openssl zip unzip git libxml2-dev libzip-dev zlib1g-dev libcurl4-openssl-dev iputils-ping default-mysql-client vim libpng-dev libgmp-dev libjpeg-turbo8-dev\n      - run: sudo apt-get install php-xmlrpc php8.1-intl php8.1-xdebug php8.1-mbstring php8.1-simplexml php8.1-curl php8.1-zip postgresql-client php8.1-gd php8.1-xmlrpc php8.1-mysql php-mysql\n      - run: sudo pecl install xdebug\n\n      # We now need Node 14 for Playwright.\n      - run: sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo bash -\n      - run: sudo apt update\n      - run: sudo apt -y install nodejs\n      - run: sudo rm /usr/local/bin/node\n\n      - run: cp fixometer/config/config.dist.php fixometer/config/config.php\n      - run: cp .env.example .env\n\n      # Playwright needs the debug bar not to appear\n      - run: sed -i 's/APP_DEBUG=.*$/APP_DEBUG=FALSE/g' .env\n\n      # ...and runs on localhost.\n      - run: sed -i 's/SESSION_DOMAIN=.*$/SESSION_DOMAIN=localhost/g' .env\n\n      # ...and needs honeypot rate-limiting needs to be turned off.\n      - run: sed -i 's/HONEYPOT_DISABLE=.*$/HONEYPOT_DISABLE=TRUE/g' .env\n\n      # Add in private values.\n      - run: sudo sed -ie \"s/GOOGLE_MAPS_API_KEY=zzz/GOOGLE_MAPS_API_KEY=$GOOGLE_MAPS_API_KEY/g\" .env\n      - run: sudo sed -ie \"s/GRAVITYFORMS_KEY=zzz/GRAVITYFORMS_KEY=$GRAVITYFORMS_KEY/g\" .env\n      - run: sudo sed -ie \"s/GRAVITYFORMS_SECRET=zzz/GRAVITYFORMS_SECRET=$GRAVITYFORMS_SECRET/g\" .env\n      - run: sudo sed -ie \"s/GRAVITYFORMS_SUBMISSION_FORM_ID=zzz/GRAVITYFORMS_SUBMISSION_FORM_ID=$GRAVITYFORMS_SUBMISSION_FORM_ID/g\" .env\n\n      - run: wget https://getcomposer.org/composer-2.phar -O composer.phar; rm -rf vendor; echo Y | php8.1 composer.phar install\n      - run: npm install\n      - run: npx playwright install\n      - run: npx playwright install-deps\n      - run: npm install -D @playwright/test\n\n      - run: php artisan key:generate\n      - run: php artisan migrate\n\n      - run: wget -O phpunit https://phar.phpunit.de/phpunit-9.phar ; chmod +x phpunit\n\n      - run: export XDEBUG_MODE=coverage;./phpunit -d memory_limit=512M --bootstrap vendor/autoload.php -dxdebug.coverage_enable=1 --coverage-clover tests/clover.xml --configuration ./phpunit.xml\n\n      # Coveralls is pernickety about the location it uploads from existing.\n      - run: mkdir build; mkdir build/logs; php vendor/bin/php-coveralls -v -x tests/clover.xml\n\n      # Run the Playwright tests.\n      # TODO"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "docker-entrypoint.sh"
        ],
        "folders": []
    }
}