{
    "source_code_info": {
        "language": "Python",
        "framework": "Django",
        "dependencies": {
            "requirements.txt": "asgiref==3.7.2\nboto3==1.35.97\ncachetools==5.5.1\ncelery==5.4.0\ndjango==5.0.13\ndjango-cache-memoize==0.2.1\ndjango-celery-beat==2.7.0\ndjango-cors-headers==4.6.0\ndjango-db-geventpool==4.0.7\ndjango-debug-toolbar\ndjango-debug-toolbar-force\ndjango-environ==0.12.0\ndjango-extensions==3.2.3\ndjango-filter==25.1\ndjango-imagekit==5.0.0\ndjango-model-utils==5.0.0\ndjango-redis==5.4.0\ndjango-s3-storage==0.15.0\ndjango-timezone-field==7.0\ndjangorestframework==3.15.2\ndjangorestframework-camel-case==1.4.2\ndocutils==0.21.2\ndrf-spectacular==0.28.0\nfirebase-admin==6.6.0\nflower==2.0.1\ngunicorn[gevent]==22.0.0\nhiredis==3.1.0\npackaging>=21.0\npika==1.3.2\npillow==11.1.0\npsycogreen==1.0.2\npsycopg[binary]==3.2.5\nredis==5.2.1\nrequests==2.32.3\nsafe-eth-py[django]==7.1.1\nweb3==7.8.0\n"
        },
        "database": "PostgreSQL",
        "build_system": "pip",
        "config_files": {
            ".env.local": "PYTHONPATH=/app/\nDJANGO_SETTINGS_MODULE=config.settings.local\nDEBUG=0\nDATABASE_URL=psql://postgres:postgres@db:5432/postgres\nETHEREUM_NODE_URL=http://172.17.0.1:8545\nETHEREUM_TRACING_NODE_URL=http://172.17.0.1:8545\nETH_L2_NETWORK=0\nREDIS_URL=redis://redis:6379/0\nCELERY_BROKER_URL=amqp://guest:guest@rabbitmq/\n",
            ".env.test": "# Test project outside docker\nPYTHONPATH=/app/\nDEBUG=0\nDJANGO_SETTINGS_MODULE=config.settings.test\nDJANGO_SECRET_KEY=test-secret#-!key\nDATABASE_URL=psql://postgres:postgres@localhost:5432/postgres\nREDIS_URL=redis://localhost/0\nCELERY_BROKER_URL=redis://localhost/0\n# ETHEREUM_MAINNET_NODE=  # Set it to test some features with a real node\nETHEREUM_NODE_URL=http://localhost:8545\nETHEREUM_TRACING_NODE_URL=http://localhost:8545\nETH_HASH_BACKEND=pysha3\nENABLE_ANALYTICS=True\nEVENTS_QUEUE_URL=amqp://guest:guest@localhost:5672/\n",
            "docker-compose.yml": "volumes:\n  nginx-shared:\n\nservices:\n  nginx:\n    image: nginx:alpine\n    hostname: nginx\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - nginx-shared:/nginx\n    depends_on:\n      - web\n\n  redis:\n    image: redis:alpine\n    ports:\n      - \"6379:6379\"\n    healthcheck:\n      test: [ \"CMD\", \"redis-cli\", \"ping\"]\n      timeout: 5s\n      retries: 3\n\n\n  rabbitmq:\n    image: rabbitmq:alpine\n    ports:\n      - \"5672:5672\"\n    healthcheck:\n      test: rabbitmq-diagnostics -q ping\n      interval: 30s\n      timeout: 30s\n      retries: 3\n\n  db:\n    image: postgres:16-alpine\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      timeout: 5s\n      retries: 3\n\n  web:\n    build:\n      context: .\n      dockerfile: docker/web/Dockerfile\n    env_file:\n      - .env\n    depends_on:\n      - db\n      - redis\n    working_dir: /app\n    ports:\n      - \"8888:8888\"\n    volumes:\n      - nginx-shared:/nginx\n    command: docker/web/run_web.sh\n\n  indexer-worker: &worker\n    build:\n      context: .\n      dockerfile: docker/web/Dockerfile\n    env_file:\n      - .env\n    environment:\n      RUN_MIGRATIONS: 1\n      WORKER_QUEUES: \"default,indexing,processing\"\n    depends_on:\n      - db\n      - redis\n      - rabbitmq\n    command: docker/web/celery/worker/run.sh\n\n  contracts-tokens-worker:\n    <<: *worker\n    environment:\n      WORKER_QUEUES: \"contracts,tokens\"\n\n  scheduler:\n    <<: *worker\n    command: docker/web/celery/scheduler/run.sh\n\n  ganache:\n    image: trufflesuite/ganache:latest\n    ports:\n      - \"8545:8545\"\n    command: --defaultBalanceEther 10000 --gasLimit 10000000 -a 10 --chain.chainId 1337 --chain.networkId 1337 -d --host 0.0.0.0\n    healthcheck:\n      test: bash -c \"echo 'hello' > /dev/tcp/localhost/8545\"\n    profiles:\n      - develop\n\n  flower:\n    <<: *worker\n    command: docker/web/celery/flower/run.sh\n    ports:\n      - \"5555:5555\"\n    profiles:\n      - debug\n\n",
            "docker/web/Dockerfile": "FROM python:3.13-slim\n\nARG APP_HOME=/app\nWORKDIR ${APP_HOME}\nENV PYTHONUNBUFFERED=1\n\n# https://eth-hash.readthedocs.io/en/latest/quickstart.html#specify-backend-by-environment-variable\n# `pysha3` is way faster than `pycryptodome` for CPython\nENV ETH_HASH_BACKEND=pysha3\n\nCOPY requirements.txt ./\nRUN set -ex \\\n\t&& buildDeps=\" \\\n\t\tbuild-essential \\\n        git \\\n\t\tlibssl-dev \\\n        libpq-dev \\\n\t\t\" \\\n    && apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y --no-install-recommends $buildDeps tmux postgresql-client \\\n    && pip install -U --no-cache-dir wheel setuptools pip \\\n    && pip install --no-cache-dir -r requirements.txt \\\n    && apt-get purge -y --auto-remove $buildDeps \\\n    && rm -rf /var/lib/apt/lists/*\n\n# /nginx mount point must be created before so it doesn't have root permissions\n# ${APP_HOME} root folder will not be updated by COPY --chown, so permissions need to be adjusted\nRUN groupadd -g 999 python && \\\n    useradd -u 999 -r -g python python && \\\n    mkdir -p /nginx && \\\n    chown -R python:python /nginx ${APP_HOME}\nCOPY --chown=python:python . .\n\n# Use numeric ids so kubernetes identifies the user correctly\nUSER 999:999\n\nRUN DJANGO_SETTINGS_MODULE=config.settings.production DJANGO_DOT_ENV_FILE=.env.tracing.sample python manage.py collectstatic --noinput\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "Dockerfile_alpine",
            "run_web.sh"
        ],
        "folders": [
            "celery"
        ]
    }
}