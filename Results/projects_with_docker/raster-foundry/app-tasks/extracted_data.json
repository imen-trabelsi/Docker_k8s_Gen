{
    "source_code_info": {
        "language": "Scala",
        "framework": "Scala",
        "dependencies": {
            "build.sbt": "import xerial.sbt.Sonatype._\nimport explicitdeps.ExplicitDepsPlugin.autoImport.moduleFilterRemoveValue\n\n// NOTE: This file is at the root project directory so that scala-steward is happy. The app backend\n// code lives within a separate directory for code organization purposes. Build support files are\n// within the `project` directory (see\n// https://www.scala-sbt.org/1.x/docs/Directories.html#Build+support+files).\nval appBackendDir = \"app-backend\"\n\naddCommandAlias(\n  \"fix\",\n  \";scalafix;scalafmt;scalafmtSbt\"\n)\n\nscalafixDependencies in ThisBuild ++= Seq(\n  \"com.nequissimus\" %% \"sort-imports\" % \"0.3.2\",\n  \"org.scalatest\" %% \"autofix\" % \"3.1.0.0\"\n)\n\ncancelable in Global := true\n\nonChangedBuildSource := ReloadOnSourceChanges\n\nscapegoatVersion in ThisBuild := \"1.3.8\"\n\nscalaVersion in ThisBuild := Version.scala\n\n// We are overriding the default behavior of sbt-git which, by default,\n// only appends the `-SNAPSHOT` suffix if there are uncommitted\n// changes in the workspace.\nversion in ThisBuild := {\n  if (git.gitHeadCommit.value.isEmpty) \"dev\"\n  else if (git.gitCurrentTags.value.isEmpty || git.gitUncommittedChanges.value)\n    git.gitDescribedVersion.value.get + \"-SNAPSHOT\"\n  else\n    git.gitDescribedVersion.value.get\n}\n\nval scalaOptions = Seq(\n  \"-deprecation\",\n  \"-unchecked\",\n  \"-feature\",\n  \"-language:implicitConversions\",\n  \"-language:reflectiveCalls\",\n  \"-language:higherKinds\",\n  \"-language:postfixOps\",\n  \"-language:existentials\",\n  \"-language:experimental.macros\",\n  \"-Yrangepos\",\n  \"-Ywarn-value-discard\",\n  \"-Ywarn-macros:after\",\n  \"-Ywarn-unused\",\n  \"-Xfatal-warnings\",\n  \"-Ywarn-unused-import\",\n  \"-Ypartial-unification\",\n  \"-Ybackend-parallelism\",\n  \"4\",\n  \"-Ypatmat-exhaust-depth\",\n  \"100\"\n)\n\n/**\n  * Shared settings across all subprojects\n  */\nlazy val sharedSettings = Seq(\n  unusedCompileDependenciesFilter -= moduleFilter(\n    \"com.sksamuel.scapegoat\",\n    \"scalac-scapegoat-plugin\"\n  ),\n  unusedCompileDependenciesFilter -= moduleFilter(\n    \"io.jaegertracing\",\n    \"jaeger-client\"\n  ),\n  undeclaredCompileDependenciesFilter -= moduleFilter(\n    \"com.typesafe.scala-logging\",\n    \"scala-logging\"\n  ),\n  unusedCompileDependenciesFilter -= moduleFilter(\n    \"com.typesafe.scala-logging\",\n    \"scala-logging\"\n  ),\n  undeclaredCompileDependenciesFilter -= moduleFilter(\n    \"org.slf4j\",\n    \"slf4j-api\"\n  ),\n  unusedCompileDependenciesFilter -= moduleFilter(\n    \"org.slf4j\",\n    \"slf4j-api\"\n  ),\n  // Try to keep logging sane and make sure to use slf4j + logback\n  excludeDependencies ++= Seq(\n    \"log4j\" % \"log4j\",\n    \"org.slf4j\" % \"slf4j-log4j12\",\n    \"org.slf4j\" % \"slf4j-nop\"\n  ),\n  scalacOptions := scalaOptions,\n  // https://github.com/sbt/sbt/issues/3570\n  scalacOptions in (Compile, console) ~= (_.filterNot(\n    _ == \"-Ywarn-unused-import\"\n  ).filterNot(_ == \"-Xfatal-warnings\")\n    .filterNot(_ == \"-Ywarn-unused\")\n    .filterNot(_ == \"-Ywarn-unused-import\")),\n  updateOptions := updateOptions.value.withGigahorse(false),\n  externalResolvers := Seq(\n    \"Geotoolkit Repo\" at \"https://maven.geotoolkit.org\",\n    \"Open Source Geospatial Foundation Repo\" at \"https://download.osgeo.org/webdav/geotools/\",\n    \"boundless\" at \"https://repo.boundlessgeo.com/main/\",\n    \"imageio-ext Repository\" at \"https://maven.geo-solutions.it\",\n    DefaultMavenRepository,\n    Resolver.sonatypeRepo(\"snapshots\"),\n    \"eclipse-snapshots\" at \"https://repo.eclipse.org/content/groups/snapshots\",\n    \"locationtech-releases\" at \"https://repo.locationtech.org/content/groups/releases\",\n    \"locationtech-snapshots\" at \"https://repo.locationtech.org/content/groups/snapshots\",\n    (\"azavea-snapshots\" at \"http://nexus.internal.azavea.com/repository/azavea-snapshots/\")\n      .withAllowInsecureProtocol(true),\n    \"jitpack\" at \"https://jitpack.io\",\n    Classpaths.sbtPluginReleases,\n    Opts.resolver.sonatypeReleases,\n    Resolver.file(\"local\", file(Path.userHome.absolutePath + \"/.ivy2/local\"))(\n      Resolver.ivyStylePatterns\n    ) // important to pull deps from the local repo\n  ),\n  shellPrompt := { s =>\n    Project.extract(s).currentProject.id + \" > \"\n  },\n  assemblyMergeStrategy in assembly := {\n    case \"reference.conf\"                       => MergeStrategy.concat\n    case \"application.conf\"                     => MergeStrategy.concat\n    case n if n.startsWith(\"META-INF/services\") => MergeStrategy.concat\n    case n\n        if n.endsWith(\".SF\") || n.endsWith(\".RSA\") || n.endsWith(\".DSA\") || n\n          .endsWith(\".semanticdb\") =>\n      MergeStrategy.discard\n    case \"META-INF/MANIFEST.MF\" => MergeStrategy.discard\n    case _                      => MergeStrategy.first\n  },\n  // https://www.scala-sbt.org/0.13/docs/Compiler-Plugins.html\n  autoCompilerPlugins := true,\n  addCompilerPlugin(\n    \"org.scalamacros\" % \"paradise\" % \"2.1.0\" cross CrossVersion.full\n  ),\n  addCompilerPlugin(scalafixSemanticdb), // enable SemanticDB\n  addCompilerPlugin(\"com.olegpy\" %% \"better-monadic-for\" % \"0.2.4\"),\n  test in assembly := {}\n) ++ publishSettings\n\nlazy val noPublishSettings = Seq(\n  publish := {},\n  publishLocal := {},\n  publishArtifact := false\n)\n\nlazy val publishSettings = Seq(\n  organization := \"com.rasterfoundry\",\n  organizationName := \"Raster Foundry\",\n  organizationHomepage := Some(new URL(\"https://rasterfoundry.azavea.com/\")),\n  description := \"A platform to find, combine and analyze earth imagery at any scale.\"\n) ++ sonatypeSettings ++ credentialSettings\n\nlazy val sonatypeSettings = Seq(\n  publishMavenStyle := true,\n  sonatypeProfileName := \"com.rasterfoundry\",\n  sonatypeProjectHosting := Some(\n    GitHubHosting(\n      user = \"raster-foundry\",\n      repository = \"raster-foundry\",\n      email = \"info@rasterfoundry.com\"\n    )\n  ),\n  developers := List(\n    Developer(\n      id = \"azavea\",\n      name = \"Azavea Inc.\",\n      email = \"systems@azavea.com\",\n      url = url(\"https://azavea.com/\")\n    )\n  ),\n  licenses := Seq(\n    \"Apache-2.0\" -> url(\"https://www.apache.org/licenses/LICENSE-2.0.txt\")\n  ),\n  publishTo := sonatypePublishToBundle.value\n)\n\nlazy val credentialSettings = Seq(\n  credentials += Credentials(\n    \"GnuPG Key ID\",\n    \"gpg\",\n    System.getenv().get(\"GPG_KEY_ID\"),\n    \"ignored\"\n  ),\n  credentials += Credentials(\n    \"Sonatype Nexus Repository Manager\",\n    \"oss.sonatype.org\",\n    System.getenv().get(\"SONATYPE_USERNAME\"),\n    System.getenv().get(\"SONATYPE_PASSWORD\")\n  )\n)\n\nlazy val root = project\n  .in(file(\".\"))\n  .settings(sharedSettings: _*)\n  .settings(noPublishSettings)\n  .aggregate(\n    api,\n    akkautil,\n    db,\n    common,\n    datamodel,\n    http4sUtil,\n    batch,\n    backsplashCore,\n    backsplashServer,\n    notification\n  )\n\nlazy val loggingDependencies = Seq(\n  Dependencies.scalaLogging,\n  Dependencies.logbackClassic % Runtime\n)\n\n/**\n  * API Project Settings\n  */\nlazy val apiSettings = sharedSettings ++ Seq(\n  fork in run := true,\n  connectInput in run := true,\n  cancelable in Global := true\n)\n\nlazy val apiDependencies = Seq(\n  Dependencies.bcrypt,\n  Dependencies.betterFiles,\n  Dependencies.akkaActor,\n  Dependencies.akkaCirceJson,\n  Dependencies.akkaHttp,\n  Dependencies.akkaHttpCore,\n  Dependencies.akkaHttpCors,\n  Dependencies.akkaSlf4j,\n  Dependencies.akkaStream,\n  Dependencies.akkaStream,\n  Dependencies.awsCoreSdk,\n  Dependencies.awsS3,\n  Dependencies.awsStsSdk,\n  Dependencies.catsCore,\n  Dependencies.catsEffect,\n  Dependencies.catsFree,\n  Dependencies.catsKernel,\n  Dependencies.circeCore,\n  Dependencies.circeGeneric,\n  Dependencies.doobieCore,\n  Dependencies.doobieFree,\n  Dependencies.doobieHikari,\n  Dependencies.doobiePostgres,\n  Dependencies.dropbox,\n  Dependencies.geotrellisRaster,\n  Dependencies.geotrellisVector,\n  Dependencies.guava,\n  Dependencies.hikariCP,\n  Dependencies.javaFaker,\n  Dependencies.jts,\n  Dependencies.nimbusJose,\n  Dependencies.nimbusJoseJwt,\n  Dependencies.postgres,\n  Dependencies.refined,\n  Dependencies.scaffeine,\n  Dependencies.scalaCheck,\n  Dependencies.scalatest,\n  Dependencies.shapeless,\n  Dependencies.sourceCode,\n  Dependencies.sttpAkka,\n  Dependencies.sttpCirce,\n  Dependencies.sttpCore,\n  Dependencies.sttpJson,\n  Dependencies.sttpSharedCore,\n  Dependencies.sttpSharedAkka,\n  Dependencies.sttpModel,\n  Dependencies.typesafeConfig\n)\n\nlazy val api = project\n  .in(file(appBackendDir + \"/api\"))\n  .dependsOn(db, common % \"test->test;compile->compile\", akkautil, notification)\n  .settings(apiSettings: _*)\n  .settings({\n    libraryDependencies ++= apiDependencies ++ loggingDependencies\n  })\n  .settings(\n    assemblyJarName in assembly := \"api-assembly.jar\"\n  )\n\nlazy val apiIntegrationTest = project\n  .in(file(appBackendDir + \"/api-it\"))\n  .configs(IntegrationTest)\n  .dependsOn(db)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.http4sBlazeClient,\n      Dependencies.http4sCirce,\n      Dependencies.http4sClient,\n      Dependencies.scalaCsv % \"test\",\n      Dependencies.scalatest\n    )\n  })\n  .settings(Defaults.itSettings)\n  .settings(\n    unusedCompileDependenciesFilter -= moduleFilter(\n      \"com.sksamuel.scapegoat\",\n      \"scalac-scapegoat-plugin\"\n    )\n  )\n\n/**\n  * Common Settings\n  */\nlazy val common = project\n  .in(file(appBackendDir + \"/common\"))\n  .dependsOn(datamodel)\n  .settings(apiSettings: _*)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.algebra,\n      Dependencies.apacheHttpClient,\n      Dependencies.apacheHttpCore,\n      Dependencies.awsBatchSdk,\n      Dependencies.awsCoreSdk,\n      Dependencies.awsS3,\n      Dependencies.awsUtilsSdkV2,\n      Dependencies.awsS3SdkV2,\n      Dependencies.catsKernel,\n      Dependencies.catsCore,\n      Dependencies.catsEffect,\n      Dependencies.catsScalacheck,\n      Dependencies.chronoscala,\n      Dependencies.circeCore,\n      Dependencies.circeGeneric,\n      Dependencies.circeOptics,\n      Dependencies.circeParser,\n      Dependencies.circeTest,\n      Dependencies.commonsIO,\n      Dependencies.elasticacheClient,\n      Dependencies.geotrellisProj4,\n      Dependencies.geotrellisRaster,\n      Dependencies.geotrellisS3,\n      Dependencies.geotrellisStore,\n      Dependencies.geotrellisUtil,\n      Dependencies.geotrellisVector,\n      Dependencies.geotrellisVectorTestkit,\n      Dependencies.jts,\n      Dependencies.logbackClassic % Runtime,\n      Dependencies.mamlJvm,\n      Dependencies.monocleCore,\n      Dependencies.rollbar,\n      Dependencies.scalaCheck,\n      Dependencies.shapeless,\n      Dependencies.spire,\n      Dependencies.typesafeConfig\n    ) ++ loggingDependencies\n  })\n\nlazy val datamodel = project\n  .in(file(appBackendDir + \"/datamodel\"))\n  .settings(apiSettings: _*)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.awsS3,\n      Dependencies.catsCore,\n      Dependencies.catsKernel,\n      Dependencies.catsLaws,\n      Dependencies.circeCore,\n      Dependencies.circeGeneric,\n      Dependencies.circeGenericExtras,\n      Dependencies.circeOptics,\n      Dependencies.circeParser,\n      Dependencies.circeRefined,\n      Dependencies.circeTest,\n      Dependencies.disciplineScalatest,\n      Dependencies.geotrellisGdal,\n      Dependencies.geotrellisProj4,\n      Dependencies.geotrellisRaster,\n      Dependencies.geotrellisVector,\n      Dependencies.geotrellisVectorTestkit,\n      Dependencies.jts,\n      Dependencies.monocleCore,\n      Dependencies.refined,\n      Dependencies.scalaCheck,\n      Dependencies.shapeless,\n      Dependencies.spire,\n      Dependencies.stac4s\n    ) ++ loggingDependencies\n  })\n\n/**\n  * DB Settings\n  */\nlazy val db = project\n  .in(file(appBackendDir + \"/db\"))\n  .dependsOn(\n    common % \"compile->compile;test->test\",\n    datamodel % \"test->test;compile->compile\",\n    notification\n  )\n  .settings(name := \"database\")\n  .settings(sharedSettings: _*)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.apacheCommonsEmail,\n      Dependencies.awsCoreSdk,\n      Dependencies.awsS3,\n      Dependencies.catsCore,\n      Dependencies.catsEffect,\n      Dependencies.catsFree,\n      Dependencies.catsKernel,\n      Dependencies.circeCore,\n      Dependencies.commonsCodec,\n      Dependencies.doobieCore,\n      Dependencies.doobieFree,\n      Dependencies.doobieFree,\n      Dependencies.doobieHikari,\n      Dependencies.doobiePostgres,\n      Dependencies.doobiePostgresCirce,\n      Dependencies.doobieRefined,\n      Dependencies.doobieScalatest,\n      Dependencies.elasticacheClient,\n      Dependencies.flyway % Test,\n      Dependencies.fs2,\n      Dependencies.geotrellisGdal,\n      Dependencies.geotrellisLayer,\n      Dependencies.geotrellisProj4,\n      Dependencies.geotrellisRaster,\n      Dependencies.geotrellisStore,\n      Dependencies.geotrellisVector,\n      Dependencies.geotrellisVectorTile,\n      Dependencies.guava,\n      Dependencies.hikariCP,\n      Dependencies.jts,\n      Dependencies.mamlJvm,\n      Dependencies.monocleCore % \"test\",\n      Dependencies.newtype,\n      Dependencies.postgis,\n      Dependencies.postgres,\n      Dependencies.refined,\n      Dependencies.scalaCheck,\n      Dependencies.scalaCheck,\n      Dependencies.scalacacheCaffeine,\n      Dependencies.scalacacheCats,\n      Dependencies.scalacacheCirce,\n      Dependencies.scalacacheCore,\n      Dependencies.scalacacheMemcached,\n      Dependencies.scalatestplusScalaCheck,\n      Dependencies.shapeless,\n      Dependencies.sourceCode,\n      Dependencies.stac4s,\n      Dependencies.typesafeConfig\n    ) ++ loggingDependencies\n  })\n  .settings(testOptions in Test += Tests.Argument(\"-oD\"))\n\n/**\n  * Batch Settings\n  */\nlazy val batch = project\n  .in(file(appBackendDir + \"/batch\"))\n  .dependsOn(common, backsplashCore, notification)\n  .settings(sharedSettings: _*)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.awsCoreSdk,\n      Dependencies.awsS3,\n      Dependencies.betterFiles,\n      Dependencies.catsCore,\n      Dependencies.catsEffect,\n      Dependencies.catsFree,\n      Dependencies.catsKernel,\n      Dependencies.circeCore,\n      Dependencies.circeGeneric,\n      Dependencies.circeOptics,\n      Dependencies.circeParser,\n      Dependencies.commonsIO,\n      Dependencies.doobieCore,\n      Dependencies.doobieFree,\n      Dependencies.doobieHikari,\n      Dependencies.doobiePostgres,\n      Dependencies.dropbox,\n      Dependencies.ficus,\n      Dependencies.fs2,\n      Dependencies.fs2io,\n      Dependencies.geotrellisGdal,\n      Dependencies.geotrellisLayer,\n      Dependencies.geotrellisProj4,\n      Dependencies.geotrellisRaster,\n      Dependencies.geotrellisUtil,\n      Dependencies.geotrellisVector,\n      Dependencies.guava,\n      Dependencies.hadoop,\n      Dependencies.hikariCP,\n      Dependencies.jts,\n      Dependencies.log4cats,\n      Dependencies.log4catsSlf4j,\n      Dependencies.monocleCore,\n      Dependencies.monocleMacro,\n      Dependencies.newtype,\n      Dependencies.refined,\n      Dependencies.scalatest,\n      Dependencies.scopt,\n      Dependencies.shapeless,\n      Dependencies.slf4j,\n      Dependencies.sourceCode,\n      Dependencies.spire,\n      Dependencies.stac4s,\n      Dependencies.typesafeConfig\n    ) ++ loggingDependencies\n  })\n  .settings({\n    dependencyOverrides ++= Seq(\n      \"com.fasterxml.jackson.core\" % \"jackson-core\" % \"2.9.2\",\n      \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.9.2\",\n      \"com.fasterxml.jackson.module\" % \"jackson-module-scala_2.11\" % \"2.9.2\"\n    )\n  })\n  .settings(\n    assemblyShadeRules in assembly := Seq(\n      ShadeRule\n        .rename(\"shapeless.**\" -> \"com.azavea.shaded.shapeless.@1\")\n        .inAll,\n      ShadeRule\n        .rename(\n          \"com.amazonaws.services.s3.**\" -> \"com.azavea.shaded.amazonaws.services.s3.@1\"\n        )\n        .inAll,\n      ShadeRule\n        .rename(\n          \"com.amazonaws.**\" -> \"com.azavea.shaded.amazonaws.@1\"\n        )\n        .inAll\n    )\n  )\n  .settings(assemblyJarName in assembly := \"batch-assembly.jar\")\n\n/**\n  * Akkautil Settings\n  */\nlazy val akkautil = project\n  .in(file(appBackendDir + \"/akkautil\"))\n  .dependsOn(common, db, datamodel)\n  .settings(sharedSettings: _*)\n  .settings({\n    libraryDependencies ++= Seq(\n      Dependencies.akkaCirceJson,\n      Dependencies.akkaHttp,\n      Dependencies.akkaHttpCore,\n      Dependencies.awsS3,\n      Dependencies.catsCore,\n      Dependencies.catsEffect,\n      Dependencies.catsFree,\n      Dependencies.catsKernel,\n      Dependencies.circeCore,\n      Dependencies.doobieCore,\n      Dependencies.doobieFree,\n      Dependencies.nimbusJose,\n      Dependencies.nimbusJoseJwt,\n      Dependencies.postgres,\n      Dependencies.refined,\n      Dependencies.scalacacheCore,\n      Dependencies.scalacacheCaffeine,\n      Dependencies.shapeless,\n      Dependencies.typesafeConfig\n    )\n  })\n\n/**\n  * Backsplash Core Settings\n  */\nlazy val backsplashCore =\n  Project(\"backsplash-core\", file(appBackendDir + \"/backsplash-core\"))\n    .dependsOn(common, db)\n    .settings(sharedSettings: _*)\n    .settings(\n      fork in run := true,\n      libraryDependencies ++= Seq(\n        Dependencies.catsCore,\n        Dependencies.catsEffect,\n        Dependencies.catsFree,\n        Dependencies.catsKernel,\n        Dependencies.circeCore,\n        Dependencies.circeParser,\n        Dependencies.doobieCore,\n        Dependencies.doobieFree,\n        Dependencies.geotrellisGdal,\n        Dependencies.geotrellisLayer,\n        Dependencies.geotrellisProj4,\n        Dependencies.geotrellisRaster,\n        Dependencies.geotrellisServer,\n        Dependencies.geotrellisUtil,\n        Dependencies.geotrellisVector,\n        Dependencies.http4sCore,\n        Dependencies.http4sDSL,\n        Dependencies.jts,\n        Dependencies.log4cats,\n        Dependencies.mamlJvm,\n        Dependencies.opentracingCore,\n        Dependencies.opentracingContext,\n        Dependencies.scalaCheck,\n        Dependencies.scalacacheCaffeine,\n        Dependencies.scalacacheCats,\n        Dependencies.scalacacheCore,\n        Dependencies.spatial4j,\n        Dependencies.spire,\n        Dependencies.typesafeConfig\n      ) ++ loggingDependencies,\n      addCompilerPlugin(\"org.spire-math\" %% \"kind-projector\" % \"0.9.6\"),\n      addCompilerPlugin(\n        \"org.scalamacros\" % \"paradise\" % \"2.1.0\" cross CrossVersion.full\n      )\n    )\n\n/**\n  * Backsplash Server Settings\n  */\nlazy val backsplashServer =\n  Project(\"backsplash-server\", file(appBackendDir + \"/backsplash-server\"))\n    .dependsOn(http4sUtil, db, backsplashCore)\n    .settings(sharedSettings: _*)\n    .settings(noPublishSettings)\n    .settings(fork in run := true)\n    .settings({\n      libraryDependencies ++= Seq(\n        Dependencies.awsS3,\n        Dependencies.catsCore,\n        Dependencies.catsEffect,\n        Dependencies.catsFree,\n        Dependencies.catsMeow,\n        Dependencies.circeCore,\n        Dependencies.circeGeneric,\n        Dependencies.circeParser,\n        Dependencies.cron4s,\n        Dependencies.doobieCore,\n        Dependencies.doobieFree,\n        Dependencies.doobieHikari,\n        Dependencies.fs2,\n        Dependencies.fs2Cron,\n        Dependencies.geotrellisLayer,\n        Dependencies.geotrellisProj4,\n        Dependencies.geotrellisRaster,\n        Dependencies.geotrellisServer,\n        Dependencies.geotrellisVector,\n        Dependencies.guava,\n        Dependencies.hikariCP,\n        Dependencies.http4sBlaze,\n        Dependencies.http4sCirce,\n        Dependencies.http4sCore,\n        Dependencies.http4sDSL,\n        Dependencies.http4sServer,\n        Dependencies.jts,\n        Dependencies.log4cats,\n        Dependencies.log4catsSlf4j,\n        Dependencies.mamlJvm,\n        Dependencies.opentracingApi,\n        Dependencies.opentracingCore,\n        Dependencies.opentracingContext,\n        Dependencies.scalacacheCaffeine,\n        Dependencies.scalacacheCats,\n        Dependencies.scalacacheCore,\n        Dependencies.shapeless,\n        Dependencies.sourceCode,\n        Dependencies.sup,\n        Dependencies.typesafeConfig,\n        Dependencies.vault\n      ) ++ loggingDependencies\n    })\n    .settings(addCompilerPlugin(\"org.spire-math\" %% \"kind-projector\" % \"0.9.7\"))\n    .settings(assemblyJarName in assembly := \"backsplash-assembly.jar\")\n\n/**\n  * http4s Utility project\n  */\nlazy val http4sUtil =\n  Project(\"http4s-util\", file(appBackendDir + \"/http4s-util\"))\n    .dependsOn(db)\n    .settings(sharedSettings: _*)\n    .settings({\n      libraryDependencies ++= Seq(\n        Dependencies.awsXrayRecorder,\n        Dependencies.awsXraySdk,\n        Dependencies.catsCore,\n        Dependencies.catsEffect,\n        Dependencies.catsFree,\n        Dependencies.catsKernel,\n        Dependencies.circeCore,\n        Dependencies.circeGeneric,\n        Dependencies.circeParser,\n        Dependencies.doobieCore,\n        Dependencies.doobieFree,\n        Dependencies.http4sCore,\n        Dependencies.jaegerClient,\n        Dependencies.jaegerCore,\n        Dependencies.nimbusJose,\n        Dependencies.nimbusJoseJwt,\n        Dependencies.opentracingApi,\n        Dependencies.opentracingCore,\n        Dependencies.opentracingContext,\n        Dependencies.scalacacheCaffeine,\n        Dependencies.scalacacheCats,\n        Dependencies.scalacacheCore,\n        Dependencies.shapeless,\n        Dependencies.typesafeConfig\n      )\n    })\n    .settings(addCompilerPlugin(\"org.spire-math\" %% \"kind-projector\" % \"0.9.7\"))\n\n/** Notification project\n  *\n  * For holding all of our shared code related to letting people know about things\n  */\nlazy val notification =\n  Project(\"notification\", file(appBackendDir + \"/notification\"))\n    .dependsOn(datamodel)\n    .settings(sharedSettings: _*)\n    .settings({\n      libraryDependencies ++= Seq(\n        Dependencies.apacheCommonsEmail,\n        Dependencies.catsCore,\n        Dependencies.catsEffect,\n        Dependencies.circeCore,\n        Dependencies.http4sCore,\n        Dependencies.http4sBlazeClient,\n        Dependencies.http4sCirce,\n        Dependencies.http4sClient,\n        Dependencies.javaMail,\n        Dependencies.log4cats,\n        Dependencies.log4catsSlf4j,\n        Dependencies.newtype\n      )\n    })\n"
        },
        "database": "PostgreSQL",
        "build_system": "sbt",
        "config_files": {
            "docker-compose.yml": "version: \"2.3\"\nservices:\n  postgres:\n    image: quay.io/azavea/postgis:3-postgres12.2-slim\n    volumes:\n      - ./data/:/tmp/data/\n    env_file: .env\n    expose:\n      - \"5432\"\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"${POSTGRES_USER}\"]\n      interval: 5s\n      timeout: 5s\n      retries: 3\n      start_period: 10s\n    command: postgres -c log_statement=all\n\n  memcached:\n    image: memcached:1.4-alpine\n    command: -m 4096 -c 8192 -I 5242880b\n\n  nginx-api:\n    image: raster-foundry-nginx-api\n    build:\n      context: .\n      dockerfile: ./nginx/Dockerfile.api\n    environment:\n      - API_SERVER_HOST=api-server:9000\n    ports:\n      - \"9100:443\"\n    links:\n      - api-server\n\n  api-server:\n    # If changing container, make sure to update app-backend/api/Dockerfile as well\n    image: quay.io/azavea/openjdk-gdal:2.4-jdk8-slim\n    links:\n      - postgres:database.service.rasterfoundry.internal\n      - memcached:memcached.service.rasterfoundry.internal\n    depends_on:\n      postgres:\n        condition: service_healthy\n    env_file: .env\n    environment:\n      - HIKARI_LOG_LEVEL=WARN\n      - RF_LOG_LEVEL=INFO\n      - TILE_SERVER_LOCATION\n      - COURSIER_CACHE=/root/.coursier\n      - BACKSPLASH_ENABLE_MULTITIFF=false\n      - AWS_DEFAULT_PROFILE=raster-foundry\n      - GROUNDWORK_URL_BASE=http://localhost:3000\n    ports:\n      - \"9000:9000\"\n      - \"9010:9010\"\n    volumes:\n      - ./app-backend/:/opt/raster-foundry/app-backend/\n      - ./scratch/:/opt/raster-foundry/scratch/\n      - ./data/:/opt/data/\n      - $HOME/.sbt:/root/.sbt\n      - $HOME/.coursier:/root/.coursier\n      - $HOME/.ivy2:/root/.ivy2\n      - $HOME/.aws:/root/.aws:ro\n    working_dir: /opt/raster-foundry/app-backend/api/target/scala-2.12/\n    entrypoint: java\n    command:\n      - \"-Dcom.sun.management.jmxremote.rmi.port=9010\"\n      - \"-Dcom.sun.management.jmxremote=true\"\n      - \"-Dcom.sun.management.jmxremote.port=9010\"\n      - \"-Dcom.sun.management.jmxremote.ssl=false\"\n      - \"-Dcom.sun.management.jmxremote.authenticate=false\"\n      - \"-Dcom.sun.management.jmxremote.local.only=false\"\n      - \"-Djava.rmi.server.hostname=localhost\"\n      - \"-jar\"\n      - \"api-assembly.jar\"\n\n  batch:\n    image: raster-foundry-batch\n    ports:\n      - \"9040:9040\"\n    volumes:\n      - ./app-tasks/rf/:/opt/raster-foundry/app-tasks/rf/\n      - ./app-backend/batch/target/scala-2.12/batch-assembly.jar:/opt/raster-foundry/jars/batch-assembly.jar\n      - ./data/:/opt/data/\n      - $HOME/.aws:/root/.aws:ro\n    build:\n      context: ./app-tasks\n      dockerfile: Dockerfile\n    external_links:\n      - postgres:database.service.rasterfoundry.internal\n      - api-server:rasterfoundry.com\n      - memcached:memcached.service.rasterfoundry.internal\n    env_file: .env\n    environment:\n      - RF_HOST=http://rasterfoundry.com:9000\n      - GROUNDWORK_URL_BASE=http://localhost:3000\n      - POSTGRES_DB_POOL_SIZE=2\n      - LOCAL_INGEST_CORES=2\n      - LOCAL_INGEST_MEM_GB=4\n      - EXPORT_TILE_SIZE=1024\n      - AWS_DEFAULT_PROFILE=raster-foundry\n      - BACKSPLASH_ENABLE_GDAL=true\n      - RF_LOG_LEVEL=DEBUG\n      - AWS_BATCH_JOB_ATTEMPT\n      - RF_DEBUG_DATA_BUCKET\n    command: rf\n    links:\n      - postgres:database.service.rasterfoundry.internal\n      - memcached:memcached.service.rasterfoundry.internal\n\n  batch-hitl:\n    image: raster-foundry-batch-hitl\n    runtime: \"${GPU_RUNTIME}\"\n    ports:\n      - \"9050:9050\"\n    volumes:\n      - ./app-hitl/hitl/:/opt/raster-foundry/app-hitl/hitl/\n      - ./app-hitl/hitl/out/:/tmp/hitl/out/\n      - $HOME/.aws:/root/.aws:ro\n    build:\n      context: ./app-hitl\n      dockerfile: Dockerfile\n    external_links:\n      - api-server:rasterfoundry.com\n    env_file: .env\n    environment:\n      - RF_HOST=http://rasterfoundry.com:9000\n      - GROUNDWORK_URL_BASE=http://localhost:3000\n      - AWS_DEFAULT_PROFILE=raster-foundry\n      - AWS_BATCH_JOB_ATTEMPT\n      - HITL_OUTPUT_BUCKET\n    command: hitl\n\n  xray:\n    image: amazon/aws-xray-daemon\n    env_file: .env\n    volumes:\n      - $HOME/.aws:/root/.aws:ro\n    ports:\n      - 2000\n    command:\n      - \"-t\"\n      - \"0.0.0.0:2000\"\n      - \"-b\"\n      - \"0.0.0.0:2000\"\n\n  backsplash:\n    # If changing container, make sure to update app-backend/backsplash-server/Dockerfile as well\n    image: quay.io/azavea/openjdk-gdal:2.4-jdk8-slim\n    depends_on:\n      postgres:\n        condition: service_healthy\n    links:\n      - postgres:database.service.rasterfoundry.internal\n      - memcached:memcached.service.rasterfoundry.internal\n      - jaeger:jaeger.service.internal\n      - xray:xray.service.internal\n    env_file: .env\n    environment:\n      - RF_LOG_LEVEL=INFO\n      - HIKARI_LOG_LEVEL=INFO\n      - TRACING_LOG_LEVEL=WARN\n      - COURSIER_CACHE=/root/.coursier\n      - DB_THREADPOOL_THREADS=16\n      - HTTP4S_THREADPOOL_THREADS=16\n      - BLAZE_THREADPOOL_THREADS=4\n      - BLAZE_CONNECTOR_POOL_SIZE=4\n      - POSTGRES_DB_POOL_SIZE=32\n      - HIKARI_CONNECTION_THREADS=16\n      - RF_AUTHENTICATION_CACHE_ENABLE=true\n      - BACKSPLASH_HISTOGRAM_CACHE_ENABLE=true\n      - AWS_DEFAULT_PROFILE=raster-foundry\n      - BACKSPLASH_AUTHORIZATION_CACHE_ENABLE=true\n      - BACKSPLASH_ENABLE_GDAL=false\n      - BACKSPLASH_CORE_STREAM_CONCURRENCY=16\n      - BACKSPLASH_ENABLE_MULTITIFF=false\n      - BACKSPLASH_SERVER_ACCESS_LOGGING=true\n      - AWS_REQUEST_PAYER=requester\n      - DB_SCENE_SEARCH_BUFFER_PERCENTAGE=0.1\n      - DB_TASK_STATUS_EXPIRATION_SECONDS=3600\n    ports:\n      - \"8081:8080\"\n      - \"9030:9030\"\n    volumes:\n      - ./app-backend/:/opt/raster-foundry/app-backend/\n      - ./data/:/opt/data/\n      - $HOME/.sbt:/root/.sbt\n      - $HOME/.coursier:/root/.coursier\n      - $HOME/.ivy2:/root/.ivy2\n      - $HOME/.aws:/root/.aws:ro\n    working_dir: /opt/raster-foundry/app-backend/backsplash-server/target/scala-2.12/\n    entrypoint: java\n    command:\n      - \"-Dcom.sun.management.jmxremote.rmi.port=9030\"\n      - \"-Dcom.sun.management.jmxremote=true\"\n      - \"-Dcom.sun.management.jmxremote.port=9030\"\n      - \"-Dcom.sun.management.jmxremote.ssl=false\"\n      - \"-Dcom.sun.management.jmxremote.authenticate=false\"\n      - \"-Dcom.sun.management.jmxremote.local.only=false\"\n      - \"-Djava.rmi.server.hostname=localhost\"\n      - \"-jar\"\n      - \"backsplash-assembly.jar\"\n\n  sbt:\n    image: quay.io/azavea/openjdk-gdal:2.4-jdk8-slim\n    depends_on:\n      postgres:\n        condition: service_healthy\n    links:\n      - postgres:database.service.rasterfoundry.internal\n      - memcached:memcached.service.rasterfoundry.internal\n      - api-server:api.service.rasterfoundry.internal\n    env_file: .env\n    environment:\n      - RF_LOG_LEVEL=INFO\n      - COURSIER_CACHE=/root/.coursier\n    volumes:\n      - ./app-backend/:/opt/raster-foundry/app-backend/\n      - ./build.sbt:/opt/raster-foundry/build.sbt\n      - ./sbt:/opt/raster-foundry/sbt\n      - ./.sbtopts:/opt/raster-foundry/.sbtopts\n      - ./.jvmopts:/opt/raster-foundry/.jvmopts\n      - ./project:/opt/raster-foundry/project\n      - ./data/:/opt/data/\n      - $HOME/.sbt:/root/.sbt\n      - $HOME/.coursier:/root/.coursier\n      - $HOME/.ivy2:/root/.ivy2\n      - $HOME/.aws:/root/.aws:ro\n    working_dir: /opt/raster-foundry\n    entrypoint: ./sbt\n\n  app-backend-migrations:\n    image: flyway/flyway:6.0.8\n    environment:\n      - FLYWAY_DRIVER=org.postgresql.Driver\n      - FLYWAY_URL=jdbc:postgresql://database.service.rasterfoundry.internal/\n      - FLYWAY_USER=rasterfoundry\n      - FLYWAY_PASSWORD=rasterfoundry\n      - FLYWAY_LOCATIONS=filesystem:/opt/raster-foundry/app-backend/db/src/main/resources/migrations\n      - FLYWAY_SCHEMAS=public\n      - FLYWAY_BASELINE_ON_MIGRATE=true\n    depends_on:\n      postgres:\n        condition: service_healthy\n    links:\n      - postgres:database.service.rasterfoundry.internal\n    volumes:\n      - ./app-backend/:/opt/raster-foundry/app-backend/\n\n  jaeger:\n    image: jaegertracing/all-in-one:1.8\n    expose:\n      - 5775/udp\n      - 6831/udp\n      - 6832/udp\n      - 5778\n      - 16686\n      - 14268\n      - 9411\n    ports:\n      - 16686:16686\n    environment:\n      - COLLECTOR_ZIPKIN_HTTP_PORT=9411\n",
            "app-tasks/Dockerfile": "FROM quay.io/azavea/openjdk-gdal:3.1-jdk8-slim\n# did you change the image here, possibly to upgrade gdal?\n# if so, make sure that you verify that tifs that have trouble\n# becoming COGs due to the tiling scheme can still be processed\n# successfully.\n# https://github.com/raster-foundry/raster-foundry/pull/5573\n\nCOPY rf/requirements.txt /tmp/\nRUN set -ex \\\n    && gdalDeps=' \\\n       python3-pip \\\n       python3-setuptools \\\n       python3-dev \\\n       python3-requests \\\n       build-essential \\\n       imagemagick \\\n    ' \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends ${gdalDeps} wget \\\n    && pip3 install --no-cache-dir -r /tmp/requirements.txt \\\n    && apt-get purge -y build-essential python-dev \\\n    && apt-get -y autoremove \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY jars/ /opt/raster-foundry/jars/\n\nCOPY rf/ /tmp/rf\nCOPY completion.bash /tmp/rf/completion.bash\n\nRUN (cat /tmp/rf/completion.bash | tee -a /root/.bashrc && cd /tmp/rf && python3 setup.py install)\n\nENV CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt\n",
            "Jenkinsfile": "#!groovy\n\nnode {\n  try {\n    // Checkout the proper revision into the workspace.\n    stage('checkout') {\n      checkout([\n        $class: 'GitSCM',\n        branches: scm.branches,\n        extensions: scm.extensions + [[$class: 'CloneOption', noTags: false, reference: '', shallow: false]],\n        userRemoteConfigs: scm.userRemoteConfigs\n      ])\n    }\n\n    env.AWS_DEFAULT_REGION = 'us-east-1'\n    env.RF_ARTIFACTS_BUCKET = 'rasterfoundry-global-artifacts-us-east-1'\n\n    // Execute `cibuild` wrapped within a plugin that translates\n    // ANSI color codes to something that renders inside the Jenkins\n    // console.\n    stage('cibuild') {\n      env.RF_SETTINGS_BUCKET = 'rasterfoundry-testing-config-us-east-1'\n\n      wrap([$class: 'AnsiColorBuildWrapper']) {\n        sh 'scripts/cibuild'\n      }\n    }\n\n    env.RF_SETTINGS_BUCKET = 'rasterfoundry-staging-config-us-east-1'\n\n    if (env.BRANCH_NAME == 'develop' || env.BRANCH_NAME =~ /test\\// || env.BRANCH_NAME =~ /hotfix\\//) {\n        env.RF_DEPLOYMENT_BRANCH = 'develop'\n        env.RF_DEPLOYMENT_ENVIRONMENT = \"Staging\"\n\n      // Publish container images built and tested during `cibuild`\n      // to the private Amazon Container Registry tagged with the\n      // first seven characters of the revision SHA.\n      stage('cipublish') {\n        // Decode the `AWS_ECR_ENDPOINT` credential stored within\n        // Jenkins. In includes the Amazon ECR registry endpoint.\n        withCredentials([[$class: 'StringBinding',\n                          credentialsId: 'AWS_ECR_ENDPOINT',\n                          variable: 'AWS_ECR_ENDPOINT'], \n                          [$class: 'StringBinding',\n                          credentialsId: 'SONATYPE_USERNAME',\n                          variable: 'SONATYPE_USERNAME'],\n                          [$class: 'StringBinding',\n                          credentialsId: 'SONATYPE_PASSWORD',\n                          variable: 'SONATYPE_PASSWORD'],\n                          [$class: 'StringBinding',\n                          credentialsId: 'GPG_KEY',\n                          variable: 'GPG_KEY'],\n                          [$class: 'StringBinding',\n                          credentialsId: 'GPG_KEY_ID',\n                          variable: 'GPG_KEY_ID']]) {\n          wrap([$class: 'AnsiColorBuildWrapper']) {\n            sh './scripts/cipublish'\n          }\n        }\n      }\n\n      // Plan and apply the current state of the instracture as\n      // outlined by the `master` branch of the deployment repository.\n      //\n      // Also, use the container image revision referenced above to\n      // cycle in the newest version of the application into Amazon\n      // ECS.\n      stage('infra') {\n        // Use `git` to get the primary repository's current commmit SHA and\n        // set it as the value of the `GIT_COMMIT` environment variable.\n        env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n\n        checkout scm: [$class: 'GitSCM',\n                       branches: [[name: env.RF_DEPLOYMENT_BRANCH]],\n                       extensions: [[$class: 'RelativeTargetDirectory',\n                                     relativeTargetDir: 'raster-foundry-deployment']],\n                       userRemoteConfigs: [[credentialsId: '3bc1e878-814a-43d1-864e-2e378ebddb0f',\n                                            url: 'https://github.com/azavea/raster-foundry-deployment.git']]]\n\n        dir('raster-foundry-deployment') {\n          wrap([$class: 'AnsiColorBuildWrapper']) {\n            sh 'docker-compose -f docker-compose.yml -f docker-compose.ci.yml run --rm terraform ./scripts/infra plan'\n            withCredentials([[$class: 'StringBinding',\n                              credentialsId: 'ROLLBAR_ACCESS_TOKEN',\n                              variable: 'ROLLBAR_ACCESS_TOKEN']]) {\n              sh 'docker-compose -f docker-compose.yml -f docker-compose.ci.yml run --rm terraform ./scripts/infra apply'\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    // Some exception was raised in the `try` block above. Assemble\n    // an appropirate error message for Slack.\n    def slackMessage = \":jenkins-angry: *raster-foundry (${env.BRANCH_NAME}) #${env.BUILD_NUMBER}*\"\n    if (env.CHANGE_TITLE) {\n      slackMessage += \"\\n${env.CHANGE_TITLE} - ${env.CHANGE_AUTHOR}\"\n    }\n    slackMessage += \"\\n<${env.BUILD_URL}|View Build>\"\n    slackSend color: 'danger', message: slackMessage\n\n    // Re-raise the exception so that the failure is propagated to\n    // Jenkins.\n    throw err\n  } finally {\n    // Pass or fail, ensure that the services and networks\n    // created by Docker Compose are torn down.\n    sh 'docker-compose down -v --remove-orphans'\n  }\n}\n"
        },
        "static_files": {
            "static/assets/favicon/browserconfig.xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<browserconfig>\r\n  <msapplication>\r\n    <tile>\r\n      <square150x150logo src=\"images/favicon/mstile-150x150.png\"/>\r\n      <TileColor>#464f77</TileColor>\r\n    </tile>\r\n  </msapplication>\r\n</browserconfig>\r\n",
            "static/assets/favicon/manifest.json": "{\n\t\"name\": \"\",\n\t\"icons\": [\n\t\t{\n\t\t\t\"src\": \"images\\/favicon\\/android-chrome-192x192.png\",\n\t\t\t\"sizes\": \"192x192\",\n\t\t\t\"type\": \"image\\/png\"\n\t\t},\n\t\t{\n\t\t\t\"src\": \"images\\/favicon\\/android-chrome-512x512.png\",\n\t\t\t\"sizes\": \"512x512\",\n\t\t\t\"type\": \"image\\/png\"\n\t\t}\n\t],\n\t\"theme_color\": \"#ffffff\"\n}\n"
        }
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            "Dockerfile",
            "completion.bash"
        ],
        "folders": [
            "jars",
            "rf"
        ]
    }
}