{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <parent>\n        <groupId>io.confluent</groupId>\n        <artifactId>rest-utils-parent</artifactId>\n        <version>7.9.0</version>\n    </parent>\n\n    <groupId>io.confluent</groupId>\n    <artifactId>GitHub-Actions-Schema-Registry-Test-Compatibility</artifactId>\n    <version>1.0</version>\n\n    <properties>\n        <schemaRegistryUrl></schemaRegistryUrl>\n        <schemaRegistryBasicAuthUserInfo></schemaRegistryBasicAuthUserInfo>\n        <newSchema>schemas/Count.avsc</newSchema>\n        <confluent.version>7.9.0</confluent.version>\n    </properties>\n\n    <repositories>\n      <repository>\n        <id>confluent</id>\n        <name>Confluent</name>\n        <url>https://packages.confluent.io/maven/</url>\n      </repository>\n    </repositories>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>io.confluent</groupId>\n                <artifactId>kafka-schema-registry-maven-plugin</artifactId>\n                <version>${confluent.version}</version>\n                <configuration>\n                    <schemaRegistryUrls>\n                        <param>${schemaRegistryUrl}</param>\n                    </schemaRegistryUrls>\n                    <userInfoConfig>${schemaRegistryBasicAuthUserInfo}</userInfoConfig>\n                    <subjects>\n                        <t3-avro-value>${newSchema}</t3-avro-value>\n                    </subjects>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>test-compatibility</id>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>test-compatibility</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n        </plugins>\n    </build>\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "cp-all-in-one-security/oauth/docker-compose.yml": "---\nservices:\n  keycloak:\n    image: quay.io/keycloak/keycloak:23.0.5\n    hostname: keycloak\n    container_name: keycloak\n    command: [\"start-dev\", \"--health-enabled=true\", \"--import-realm\"]\n    healthcheck:\n      test: [\"CMD-SHELL\", \"exec 3<>/dev/tcp/127.0.0.1/8080; echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost:8080\\r\\nConnection: close\\r\\n\\r\\n' >&3;cat <&3 | grep -q '\\\"status\\\": \\\"UP\\\"' && exit 0 || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    environment:\n      - KEYCLOAK_ADMIN=admin\n      - KEYCLOAK_ADMIN_PASSWORD=admin\n      - KC_PROXY=edge\n      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/realm-export.json\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./templates/realm-export.json:/opt/keycloak/data/import/realm-export.json\n\n  init_certificates:\n    image: alpine/openssl\n    container_name: init_certificates\n    volumes:\n      - ./helper/init_certificates.sh:/usr/bin/init_certificates.sh\n      - ./keypair:/data\n    entrypoint: /bin/sh\n    command: \"/usr/bin/init_certificates.sh\"\n    deploy: \n      restart_policy: \n        condition: none\n\n  broker:\n    image: ${DOCKER_REGISTRY}confluentinc/cp-server:${CONFLUENT_DOCKER_TAG:-latest}\n    hostname: broker\n    container_name: broker\n    depends_on:\n      keycloak:\n        condition: service_healthy\n      init_certificates:\n        condition: service_completed_successfully\n    healthcheck:\n      test: curl -fail --silent --insecure http://broker:8091/v1/metadata/id || exit 1\n      interval: 10s\n      retries: 5\n      start_period: 20s\n    ports:\n      - \"9092:9092\"\n      - \"9101:9101\"\n      - \"9095:9095\"\n      - \"8091:8091\"\n      - \"1234:1234\"\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:SASL_PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT\n      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092,INTERNAL://broker:9093,EXTERNAL://broker:9095\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092,INTERNAL://broker:9093,EXTERNAL://broker:9095\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_PROCESS_ROLES: 'broker,controller'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'\n      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN\n      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'\n      CLUSTER_ID: 'vHCgQyIrRHG8Jv27qI2h3Q'\n      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL\n      KAFKA_SUPER_USERS: User:admin;User:$SUPERUSER_CLIENT_ID\n      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO\n      KAFKA_LOG4J_LOGGERS: \"kafka.authorizer.logger=INFO,io.confluent.rest-utils=INFO,io.confluent.rbacapi=INFO,io.confluent.tokenapi=INFO,io.confluent.security.auth=INFO,io.confluent.security.store=INFO,io.confluent.common.security.jetty=INFO\"\n      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN\n      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN, OAUTHBEARER\n\n      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN\n      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |\n        org.apache.kafka.common.security.plain.PlainLoginModule required \\\n        username=\"admin\" \\\n        password=\"admin-secret\" \\\n        user_admin=\"admin-secret\" \\\n        user_mds=\"mds-secret\";\n\n      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN\n      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |\n        org.apache.kafka.common.security.plain.PlainLoginModule required \\\n        username=\"admin\" \\\n        password=\"admin-secret\" \\\n        user_admin=\"admin-secret\" \\\n        user_mds=\"mds-secret\";\n\n      # Configure OAuth Token listener\n      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER\n      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}\n      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: $EXPECTED_AUDIENCE\n      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_SUB_CLAIM_NAME: $SUB_CLAIM_NAME\n      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |\n        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n        unsecuredLoginStringClaim_sub=\"thePrincipalName\" \\\n        publicKeyPath=\"/tmp/conf/public.pem\" \\\n        scope=\"$GROUP_CLAIM_NAME\";\n\n      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.CompositeBearerValidatorCallbackHandler\n      KAFKA_LISTENER_NAME_EXTERNAL_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder\n      KAFKA_LISTENER_NAME_CONTROLLER_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder\n      KAFKA_CONFLUENT_OAUTH_GROUPS_CLAIM_NAME: $GROUP_CLAIM_NAME\n\n      # Configure Confluent Server Authorizer\n      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer\n      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL\n\n      # MDS\n      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER\n      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8091\n      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://broker:8091\n      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/keypair.pem\n      KAFKA_CONFLUENT_METADATA_SERVER_OPENAPI_ENABLE: 'true'\n      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: OAUTH\n      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}\n      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}\n      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}\n      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}\n      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}\n\n      # EmbeddedKafkaRest: Kafka Client Configuration\n      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://broker:9095\n      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: SASL_PLAINTEXT\n\n      # EmbeddedKafkaRest: HTTP Auth Configuration\n      KAFKA_KAFKA_REST_KAFKA_REST_RESOURCE_EXTENSION_CLASS: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension\n      KAFKA_KAFKA_REST_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler\n      KAFKA_KAFKA_REST_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}\n      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}\n      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}\n      KAFKA_KAFKA_REST_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}\n      KAFKA_KAFKA_REST_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}\n      KAFKA_KAFKA_REST_PUBLIC_KEY_PATH: /tmp/conf/public.pem\n\n      # EmbeddedKafkaRest: MDS Client configuration\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker:8091\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${RP_CLIENT_ID}\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${RP_CLIENT_SECRET}\n      KAFKA_KAFKA_REST_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000\n      KAFKA_KAFKA_REST_CLIENT_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000\n\n      # Enable SSO for Control Center\n      KAFKA_CONFLUENT_METADATA_SERVER_SSO_MODE: oidc\n      KAFKA_CONFLUENT_OIDC_IDP_ISSUER: ${IDP_EXPECTED_ISSUER}\n      KAFKA_CONFLUENT_OIDC_IDP_JWKS_ENDPOINT_URI: ${IDP_JWKS_ENDPOINT}\n      KAFKA_CONFLUENT_OIDC_IDP_AUTHORIZE_BASE_ENDPOINT_URI: ${IDP_AUTH_ENDPOINT}\n      KAFKA_CONFLUENT_OIDC_IDP_TOKEN_BASE_ENDPOINT_URI: ${IDP_TOKEN_ENDPOINT}\n      KAFKA_CONFLUENT_OIDC_IDP_CLIENT_ID: ${SSO_CLIENT_ID}\n      KAFKA_CONFLUENT_OIDC_IDP_CLIENT_SECRET: ${SSO_CLIENT_SECRET}\n      KAFKA_CONFLUENT_OIDC_IDP_DEVICE_AUTHORIZATION_ENDPOINT_URI: ${IDP_DEVICE_AUTH_ENDPOINT}\n      KAFKA_CONFLUENT_OIDC_IDP_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}\n      KAFKA_CONFLUENT_OIDC_IDP_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}\n      KAFKA_CONFLUENT_OIDC_IDP_REFRESH_TOKEN_ENABLED: 'true'\n\n      # Other configurations\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_ENABLED: 'false'\n      KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'false'\n      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLED: 'false'\n      KAFKA_LOG_RETENTION_HOURS: 1\n      KAFKA_AUTO_CREATE_TOPICS_ENABLED: 'true'\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_AUTHENTICATION_ENABLE: 'true'\n      EXTRA_ARGS: \"-javaagent:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar=1234:/usr/bin/jmx/exporter.yml\"\n\n    volumes:\n      - ./keypair:/tmp/conf\n      - ./mount:/etc/confluent/configs\n      - ./bin/confluent:/usr/bin/confluent\n      - ./bin/jmx_prometheus_javaagent-0.15.0.jar:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar\n      - ./metrics/exporter.yml:/usr/bin/jmx/exporter.yml\n\n    command: \"bash -c 'if [ ! -f /tmp/conf/keypair.pem ]; then echo \\\"ERROR: Did you forget the create-certificates.sh file that came with this docker-compose.yml file?\\\" && exit 1 ; else /etc/confluent/docker/run ; fi'\"\n\n  init_permissions:\n  # Just use the cp-server image as it has the curl command\n    image: ${DOCKER_REGISTRY}confluentinc/cp-server:${CONFLUENT_DOCKER_TAG:-latest}\n    container_name: init_permissions\n    depends_on:\n      broker:\n        condition: service_healthy\n    volumes:\n      - ./helper/init_permissions.sh:/usr/bin/init_permissions.sh\n      - ./keypair:/data\n      - ./mount:/etc/confluent/configs\n    environment:\n      SUPERUSER_CLIENT_ID: ${SUPERUSER_CLIENT_ID}\n      SUPERUSER_CLIENT_SECRET: ${SUPERUSER_CLIENT_SECRET}\n      SSO_SUPER_USER_GROUP: ${SSO_SUPER_USER_GROUP}\n      SR_CLIENT_ID: ${SR_CLIENT_ID}\n      CONNECT_CLIENT_ID: ${CONNECT_CLIENT_ID}\n      CONNECT_SECRET_PROTECTION_CLIENT_ID: ${CONNECT_SECRET_PROTECTION_CLIENT_ID}\n      KSQL_CLIENT_ID: ${KSQL_CLIENT_ID}\n      C3_CLIENT_ID: ${C3_CLIENT_ID}\n      CLIENT_APP_ID: ${CLIENT_APP_ID}\n      IDP_TOKEN_ENDPOINT: ${IDP_TOKEN_ENDPOINT}\n    entrypoint: /bin/bash\n    command: \"/usr/bin/init_permissions.sh\"\n    deploy: \n      restart_policy: \n        condition: none\n\n  schema-registry:\n    image: ${DOCKER_REGISTRY}confluentinc/cp-schema-registry:${CONFLUENT_DOCKER_TAG:-latest}\n    hostname: schema-registry\n    container_name: schema-registry\n    depends_on:\n      broker:\n        condition: service_healthy\n      init_permissions:\n        condition: service_completed_successfully\n    ports:\n      - \"8081:8081\"\n      - \"1235:1235\"\n    volumes:\n      - ./keypair:/tmp/conf\n      - ./bin/confluent:/usr/bin/confluent\n      - ./mount:/etc/confluent/configs\n      - ./bin/jmx_prometheus_javaagent-0.15.0.jar:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar\n      - ./metrics/exporter.yml:/usr/bin/jmx/exporter.yml\n    environment:\n\n      EXTRA_ARGS: \"-javaagent:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar=1235:/usr/bin/jmx/exporter.yml\"\n      SCHEMA_REGISTRY_HOST_NAME: schema-registry\n      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081\n      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9095'\n      SCHEMA_REGISTRY_GROUP_ID: schema-registry-demo\n\n      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: 'OAUTHBEARER'\n      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      SCHEMA_REGISTRY_KAFKASTORE_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      SCHEMA_REGISTRY_KAFKASTORE_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$SR_CLIENT_ID\" \\\n              clientSecret=\"$SR_CLIENT_SECRET\";\n\n      #Enable Schema Linking handler\n      SCHEMA_REGISTRY_KAFKASTORE_UPDATE_HANDLERS: 'io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler'\n      SCHEMA_REGISTRY_PASSWORD_ENCODER_SECRET: random\n\n      # Enable OAuth in SR server\n      SCHEMA_REGISTRY_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler\n      SCHEMA_REGISTRY_OAUTHBEARER_JWKS_ENDPOINT_URL: $IDP_JWKS_ENDPOINT\n      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_ISSUER: $IDP_EXPECTED_ISSUER\n      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_AUDIENCE: $EXPECTED_AUDIENCE\n      SCHEMA_REGISTRY_OAUTHBEARER_SUB_CLAIM_NAME: $SUB_CLAIM_NAME\n      SCHEMA_REGISTRY_OAUTHBEARER_GROUPS_CLAIM_NAME: $GROUP_CLAIM_NAME\n\n      SCHEMA_REGISTRY_RESOURCE.EXTENSION.CLASS: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension, io.confluent.schema.exporter.SchemaExporterResourceExtension\n      SCHEMA_REGISTRY_CONFLUENT.SCHEMA.REGISTRY.AUTHORIZER.CLASS: io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer\n      SCHEMA_REGISTRY_CONFLUENT.SCHEMA.REGISTRY.AUTH.MECHANISM: JETTY_AUTH\n      SCHEMA_REGISTRY_PUBLIC_KEY_PATH: /tmp/conf/public.pem\n\n      # Enable Rest monitoring\n      SCHEMA_REGISTRY_REST_AUTH_JMX_ENABLED: 'true'\n\n      # For connecting to MDS\n      SCHEMA_REGISTRY_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker:8091\n      SCHEMA_REGISTRY_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER\n      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: $SR_CLIENT_ID\n      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: $SR_CLIENT_SECRET\n\n  connect:\n    container_name: connect\n    hostname: connect\n    build:\n      context: .\n      args:\n        CONFLUENT_DOCKER_TAG: ${CONFLUENT_DOCKER_TAG}\n#    restart: always\n    # healthcheck:\n    #   interval: 10s\n    #   retries: 20\n    #   test: curl --user connectAdmin:connectAdmin --fail --silent --insecure https://connect:8083/ --output /dev/null || exit 1\n    depends_on:\n      broker:\n        condition: service_healthy\n      init_permissions:\n        condition: service_completed_successfully\n    volumes:\n      - ./keypair:/tmp/conf\n      - ./bin/confluent:/usr/bin/confluent\n      - ./mount:/etc/confluent/configs\n      - ./bin/jmx_prometheus_javaagent-0.15.0.jar:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar\n      - ./metrics/exporter.yml:/usr/bin/jmx/exporter.yml\n    ports:\n      - 8083:8083\n      - 1236:1236\n    environment:\n      CUB_CLASSPATH: '/usr/share/java/confluent-security/connect/*:/usr/share/java/kafka/*:/usr/share/java/cp-base-new/*:/usr/share/java/confluent-secret-registry/*'\n      EXTRA_ARGS: \"-javaagent:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar=1236:/usr/bin/jmx/exporter.yml\"\n      CONNECT_BOOTSTRAP_SERVERS: broker:9095\n      CONNECT_LISTENERS: http://0.0.0.0:8083\n      CONNECT_GROUP_ID: \"connect-cluster\"\n      CONNECT_PRODUCER_CLIENT_ID: \"connect-worker-producer\"\n      CONNECT_PRODUCER_ENABLE_IDEMPOTENCE: 'true'\n\n      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs\n      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets\n      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses\n\n      CONNECT_REPLICATION_FACTOR: 1\n      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1\n      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1\n      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1\n\n      CONNECT_KEY_CONVERTER: \"org.apache.kafka.connect.storage.StringConverter\"\n      CONNECT_VALUE_CONVERTER: \"org.apache.kafka.connect.storage.StringConverter\"\n\n      CONNECT_REST_ADVERTISED_HOST_NAME: connect\n      CONNECT_PLUGIN_PATH: \"/usr/share/java,/usr/share/confluent-hub-components\"\n      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO\n      CLASSPATH: \"/usr/share/java/monitoring-interceptors/*\"\n\n      # Connect Worker\n      CONNECT_SECURITY_PROTOCOL: SASL_PLAINTEXT\n\n      # Connect Producer\n      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor\"\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT\n\n      # Connect Consumer\n      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor\"\n\n      # RBAC\n      CONNECT_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONNECT_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$CONNECT_CLIENT_ID\" \\\n              clientSecret=\"$CONNECT_CLIENT_SECRET\";\n\n      # Allow overriding configs on the connector level\n      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'\n\n      # Producer\n      CONNECT_PRODUCER_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_PRODUCER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$CONNECT_CLIENT_ID\" \\\n              clientSecret=\"$CONNECT_CLIENT_SECRET\";\n\n      # Consumer\n      CONNECT_CONSUMER_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_CONSUMER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$CONNECT_CLIENT_ID\" \\\n              clientSecret=\"$CONNECT_CLIENT_SECRET\";\n\n      # Default admin config\n      CONNECT_ADMIN_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      CONNECT_ADMIN_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_ADMIN_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_ADMIN_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONNECT_ADMIN_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$CONNECT_CLIENT_ID\" \\\n              clientSecret=\"$CONNECT_CLIENT_SECRET\";\n\n      CONNECT_ADMIN_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.truststore.jks\n      CONNECT_ADMIN_SSL_TRUSTSTORE_PASSWORD: confluent\n      CONNECT_ADMIN_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.keystore.jks\n      CONNECT_ADMIN_SSL_KEYSTORE_PASSWORD: confluent\n      CONNECT_ADMIN_SSL_KEY_PASSWORD: confluent\n\n      # io.confluent.connect.security.ConnectSecurityExtension - RBAC\n      # io.confluent.connect.secretregistry.ConnectSecretRegistryExtension - Secret Registry\n      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.security.ConnectSecurityExtension, io.confluent.connect.secretregistry.ConnectSecretRegistryExtension\n      CONNECT_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler\n      CONNECT_PUBLIC_KEY_PATH: /tmp/conf/public.pem\n\n      CONNECT_OAUTHBEARER_JWKS_ENDPOINT_URL: $IDP_JWKS_ENDPOINT\n      CONNECT_OAUTHBEARER_EXPECTED_ISSUER: $IDP_EXPECTED_ISSUER\n      CONNECT_OAUTHBEARER_EXPECTED_AUDIENCE: $EXPECTED_AUDIENCE\n      CONNECT_OAUTHBEARER_SUB_CLAIM_NAME: $SUB_CLAIM_NAME\n      CONNECT_OAUTHBEARER_GROUPS_CLAIM_NAME: $GROUP_CLAIM_NAME\n\n       # For connecting to MDS\n      CONNECT_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker:8091\n      CONNECT_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER\n      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: $CONNECT_CLIENT_ID\n      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: $CONNECT_CLIENT_SECRET\n\n      # Enable Rest monitoring\n      CONNECT_REST_AUTH_JMX_ENABLED: 'true'\n\n      # Secret Registry\n      CONNECT_CONFIG_PROVIDERS: 'secret'\n      CONNECT_CONFIG_PROVIDERS_SECRET_CLASS: 'io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider'\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_MASTER_ENCRYPTION_KEY: 'password1234'\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_BOOTSTRAP_SERVERS: broker:9095\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.truststore.jks\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: confluent\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.keystore.jks\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEYSTORE_PASSWORD: confluent\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEY_PASSWORD: confluent\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_MECHANISM: 'OAUTHBEARER'\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_JAAS_CONFIG: |\n             org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n             clientId=\"$CONNECT_CLIENT_ID\" \\\n             clientSecret=\"$CONNECT_CLIENT_SECRET\";\n\n#      CONNECT_SSL_CIPHER_SUITES: ${SSL_CIPHER_SUITES}\n\n      # Reduce Connect memory utilization\n      KAFKA_JVM_PERFORMANCE_OPTS: -server -XX:+UseG1GC -XX:GCTimeRatio=1\n                  -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20\n                  -XX:MaxGCPauseMillis=10000 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent\n                  -XX:MaxInlineLevel=15 -Djava.awt.headless=true\n\n  ksqldb-server:\n    image: ${DOCKER_REGISTRY}confluentinc/cp-ksqldb-server:${CONFLUENT_DOCKER_TAG:-latest}\n    hostname: ksqldb-server\n    container_name: ksqldb-server\n    depends_on:\n      broker:\n        condition: service_healthy\n      init_permissions:\n        condition: service_completed_successfully\n    volumes:\n      - ./keypair:/tmp/conf\n    ports:\n      - \"8088:8088\"\n      - \"1238:1238\"\n    environment:\n      KSQL_OPTS: '-Dconfluent.support.metrics.enable=false'\n      CUB_CLASSPATH: '/usr/share/java/confluent-security/ksql/*:/usr/share/java/ksqldb-server/*:/usr/share/java/cp-base-new/*'\n\n      KSQL_LOG4J_ROOT_LOGLEVEL: INFO\n\n      KSQL_KSQL_SERVICE_ID: \"ksql-cluster\"\n      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1\n      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1\n\n      # For Demo purposes: improve resource utilization and avoid timeouts\n      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1\n\n      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1\n      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'\n      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'\n\n      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'\n\n      KSQL_BOOTSTRAP_SERVERS: broker:9095\n      KSQL_HOST_NAME: ksqldb-server\n      KSQL_LISTENERS: \"http://0.0.0.0:8088\"\n      KSQL_CACHE_MAX_BYTES_BUFFERING: 0\n\n      # Enable RBAC on ksqlDB server\n      KSQL_KSQL_SECURITY_EXTENSION_CLASS: io.confluent.ksql.security.KsqlConfluentSecurityExtension\n\n      # Enable bearer token authentication which allows the identity of the ksqlDB end user to be propagated to Kafka for authorization\n      KSQL_KSQL_AUTHENTICATION_PLUGIN_CLASS: io.confluent.ksql.security.VertxAuthenticationHandlerPlugin\n      KSQL_PUBLIC_KEY_PATH: /tmp/conf/public.pem\n      KSQL_OAUTHBEARER_JWKS_ENDPOINT_URL: $IDP_JWKS_ENDPOINT\n      KSQL_OAUTHBEARER_EXPECTED_ISSUER: $IDP_EXPECTED_ISSUER\n      KSQL_OAUTHBEARER_EXPECTED_AUDIENCE: $EXPECTED_AUDIENCE\n      KSQL_OAUTHBEARER_SUB_CLAIM_NAME: $SUB_CLAIM_NAME\n      KSQL_OAUTHBEARER_GROUPS_CLAIM_NAME: $GROUP_CLAIM_NAME\n\n      # Used by ksqlDB's REST layer to connect to MDS to verify tokens and authenticate clients\n      KSQL_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker:8091\n      KSQL_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: 'OAUTHBEARER'\n      KSQL_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      KSQL_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: $KSQL_CLIENT_ID\n      KSQL_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: $KSQL_CLIENT_SECRET\n\n      # ksqlDB to SR on OAuth\n      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081\n      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CREDENTIALS_SOURCE: 'OAUTHBEARER'\n      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_ISSUER_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CLIENT_ID: $KSQL_CLIENT_ID\n      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CLIENT_SECRET: $KSQL_CLIENT_SECRET\n      # Workaround for broken permission endpoint check in ksqldb\n      KSQL_KSQL_SECURITY_EXTENSION_SR___PERMISSIONS_VALIDATOR_ENABLED: false\n      # ksql.security.extension.sr-permissions.validator.enabled=false\n\n      # Enable OAuth for ksqlDB's embedded Kafka clients that access and manage consumer groups and topics\n      KSQL_SASL_MECHANISM: 'OAUTHBEARER'\n      KSQL_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      KSQL_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'\n      KSQL_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      KSQL_SASL_JAAS_CONFIG: |\n        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n        clientId=\"$KSQL_CLIENT_ID\" \\\n        clientSecret=\"$KSQL_CLIENT_SECRET\";   \n\n      # Confluent Monitoring Interceptors for Control Center streams monitoring\n      KSQL_PRODUCER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor\"\n      KSQL_CONSUMER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor\"\n      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: OAUTHBEARER\n      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\n      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |\n        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$KSQL_CLIENT_ID\" \\\n              clientSecret=\"$KSQL_CLIENT_SECRET\";\n\n  control-center:\n    image: ${DOCKER_REGISTRY}confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG:-latest}\n    hostname: control-center\n    container_name: control-center\n    healthcheck:\n      start_period: 10s\n      interval: 10s\n      retries: 20\n      test: curl --fail --silent http://control-center:9021 --output /dev/null || exit 1\n    depends_on:\n      broker:\n        condition: service_healthy\n      init_permissions:\n        condition: service_completed_successfully\n    volumes:\n      - ./keypair:/tmp/conf\n      - ./mount:/etc/confluent/configs\n      - ./bin/jmx_prometheus_javaagent-0.15.0.jar:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar\n      - ./metrics/exporter.yml:/usr/bin/jmx/exporter.yml\n    # command: \"rm -rf /usr/share/java/confluent-control-center/protobuf-java-util-3.24.4.jar && /etc/confluent/docker/launch;'\"\n    ports:\n      - 9021:9021\n      - 9022:9022\n      - 1237:1237\n    environment:\n      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'\n      EXTRA_ARGS: \"-javaagent:/usr/bin/jmx/jmx_prometheus_javaagent-0.15.0.jar=1237:/usr/bin/jmx/exporter.yml\"\n\n      # If using Confluent Health+ for monitoring and alerting, uncomment the line below to run in management mode.\n      # CONTROL_CENTER_MODE_ENABLE: \"management\"\n      # You can now remove all Control Center \"STREAMS\", \"MONITORING\", and \"METRICS\" configurations\n      \n      # general settings\n      CONTROL_CENTER_BOOTSTRAP_SERVERS: EXTERNAL://broker:9095\n      CONTROL_CENTER_REPLICATION_FACTOR: 1\n      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1\n      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO\n      CONTROL_CENTER_LOG4J_LOGLEVEL: INFO\n#      CONTROL_CENTER_MODE_ENABLE: \"management\"\n\n      # Control Center uses Kafka Streams to process metrics\n      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SASL_PLAINTEXT\n      CONTROL_CENTER_STREAMS_SASL_MECHANISM: OAUTHBEARER\n      CONTROL_CENTER_STREAMS_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\n      CONTROL_CENTER_STREAMS_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONTROL_CENTER_STREAMS_SASL_JAAS_CONFIG: |\n              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n              clientId=\"$C3_CLIENT_ID\" \\\n              clientSecret=\"$C3_CLIENT_SECRET\";\n  \n\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_JASS_CONFIG: |\n        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \\\n        clientId=\"$C3_CLIENT_ID\" \\\n        clientSecret=\"$C3_CLIENT_SECRET\";\n\n      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1\n      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1\n\n      # Amount of heap to use for internal caches. Increase for better throughput\n      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000\n      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: \"960032\"\n      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1\n\n      # HTTP and HTTPS to Control Center UI \n      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_REST_LISTENERS: http://0.0.0.0:9021\n      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_REST_ADVERTISED_URL: http://control-center:9021\n\n      # Connect\n      CONTROL_CENTER_CONNECT_CONNECT1_CLUSTER: http://connect:8083\n      CONTROL_CENTER_CONNECT_CONNECT1_BEARER_AUTH_CREDENTIALS_SOURCE: OAUTHBEARER\n\n      # Schema Registry\n      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081\n      CONTROL_CENTER_SCHEMA_REGISTRY_BEARER_AUTH_CREDENTIALS_SOURCE: OAUTHBEARER\n\n      # KsqlDB\n      CONTROL_CENTER_KSQL_KSQLDB_URL: http://ksqldb-server:8088\n\n      # RBAC\n      CONTROL_CENTER_REST_AUTHENTICATION_METHOD: BEARER\n      PUBLIC_KEY_PATH: /tmp/conf/public.pem\n\n\n      # Used by Control Center to connect to MDS to verify tokens and authenticate clients\n      CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker:8091\n      CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER\n      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CREDENTIALS_SOURCE: OAUTHBEARER\n      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: $C3_CLIENT_ID\n      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: $C3_CLIENT_SECRET\n      CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: $IDP_TOKEN_ENDPOINT\n\n      CONTROL_CENTER_AUTH_SSO_MODE: oidc\n      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_LICENCE_MANAGER_ENABLE: \"false\"\n\n      CONTROL_CENTER_STREAMS_CONFLUENT_METADATA_SERVER_URLS_FAIL_ON_401: 'false'\n      CONTROL_CENTER_STREAMS_CONFLUENT_METADATA_ENABLE_SERVER_URLS_REFRESH: 'false'\n\n  prometheus:\n    image: prom/prometheus\n    hostname: prometheus\n    container_name: prometheus\n    depends_on:\n      broker:\n        condition: service_healthy\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml\n\n  grafana:\n    image: grafana/grafana\n    hostname: grafana\n    container_name: grafana\n    depends_on:\n      broker:\n        condition: service_healthy\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./metrics/grafana/provisioning:/etc/grafana/provisioning\n      - ./metrics/grafana/grafana_default_dashboard.json:/var/lib/grafana/dashboards/grafana_default_dashboard.json\n",
            "Dockerfile": "FROM tiangolo/docker-with-compose\n\nCOPY entrypoint.sh /entrypoint.sh\nRUN chmod +x /entrypoint.sh\n\nENTRYPOINT [\"/entrypoint.sh\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "pom.xml",
            "requirements.txt"
        ],
        "folders": [
            "checkstyle",
            "configs",
            "images",
            "schemas",
            "src",
            "tests",
            "workflows"
        ]
    }
}