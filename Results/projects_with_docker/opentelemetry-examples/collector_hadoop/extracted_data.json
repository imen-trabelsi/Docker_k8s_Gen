{
    "source_code_info": {
        "language": "Go",
        "framework": "Go",
        "dependencies": {
            "go.mod": "module github.com/lightstep/ls-examples/go/opentracing/client\n\ngo 1.17\n\nrequire (\n\tgithub.com/lightstep/lightstep-tracer-go v0.26.0\n\tgithub.com/opentracing/opentracing-go v1.2.0\n)\n\nrequire (\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/protobuf v1.3.1 // indirect\n\tgithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20210210170715-a8dfcb80d3a7 // indirect\n\tgolang.org/x/net v0.0.0-20201021035429-f5854403a974 // indirect\n\tgolang.org/x/sys v0.0.0-20210217105451-b926d437f341 // indirect\n\tgolang.org/x/text v0.3.3 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101 // indirect\n\tgoogle.golang.org/grpc v1.21.0 // indirect\n)\n"
        },
        "database": null,
        "build_system": "go mod",
        "config_files": {
            "collector/hadoop/docker-compose.yml": "version: \"3\"\n\nservices:\n  namenode:\n    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8\n    container_name: namenode\n    restart: always\n    ports:\n      - 9870:9870\n      - 9000:9000\n      - 8004:8004\n    volumes:\n      - hadoop_namenode:/hadoop/dfs/name\n      - ./conf/hadoop-env.sh:/opt/hadoop-3.2.1/etc/hadoop/hadoop-env.sh\n      - ./conf/yarn-env.sh:/opt/hadoop-3.2.1/etc/hadoop/yarn-env.sh\n    environment:\n      - CLUSTER_NAME=test\n    env_file:\n      - ./hadoop.env\n    networks:\n          - integrations\n\n  datanode:\n    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8\n    container_name: datanode\n    restart: always\n    volumes:\n      - hadoop_datanode:/hadoop/dfs/data\n    environment:\n      SERVICE_PRECONDITION: \"namenode:9870\"\n    env_file:\n      - ./hadoop.env\n    networks:\n        - integrations\n  \n  resourcemanager:\n    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8\n    container_name: resourcemanager\n    restart: always\n    environment:\n      SERVICE_PRECONDITION: \"namenode:9000 namenode:9870 datanode:9864\"\n    env_file:\n      - ./hadoop.env\n    networks:\n        - integrations\n\n  nodemanager1:\n    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8\n    container_name: nodemanager\n    restart: always\n    environment:\n      SERVICE_PRECONDITION: \"namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088\"\n    env_file:\n      - ./hadoop.env\n    networks:\n        - integrations\n  \n  historyserver:\n    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8\n    container_name: historyserver\n    restart: always\n    environment:\n      SERVICE_PRECONDITION: \"namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088\"\n    volumes:\n      - hadoop_historyserver:/hadoop/yarn/timeline\n    env_file:\n      - ./hadoop.env\n    networks:\n        - integrations\n\n  otel-collector:\n    container_name: otel-collector\n    restart: always\n    build: .\n    command: [\"--config=/conf/collector.yml\"]\n    environment:\n        LS_ACCESS_TOKEN: ${LS_ACCESS_TOKEN}\n    networks:\n        - integrations\n    volumes:\n        - ./collector.yml:/conf/collector.yml:rw\n\nnetworks:\n    integrations:\n  \nvolumes:\n  hadoop_namenode:\n  hadoop_datanode:\n  hadoop_historyserver:",
            "collector/hadoop/Dockerfile": "FROM curlimages/curl:7.82.0 as curler\nARG JMX_JAR_VERSION=v1.14.0\nUSER root\nRUN curl -L \\\n    --output /opentelemetry-jmx-metrics.jar \\\n    \"https://github.com/open-telemetry/opentelemetry-java-contrib/releases/download/${JMX_JAR_VERSION}/opentelemetry-jmx-metrics.jar\"\n\nRUN curl -L -s \\\n    \"https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.53.0/otelcol-contrib_0.53.0_linux_amd64.tar.gz\" | \\\n    tar -xvz -C /\n\nFROM ibmjava:8-jre\nWORKDIR /\n\nCOPY --from=curler /opentelemetry-jmx-metrics.jar /opt/opentelemetry-jmx-metrics.jar\nCOPY --from=curler /otelcol-contrib /otelcol-contrib\n\nENTRYPOINT [ \"/otelcol-contrib\" ]\nCMD [\"--config\", \"/etc/otel/config.yaml\"]"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "collector.yml",
            "docker-compose.yml"
        ],
        "folders": []
    }
}