{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "#\n# This file is autogenerated by pip-compile with python 3.10\n# To update, run:\n#\n#    pip-compile --allow-unsafe --generate-hashes requirements.in\n#\nblinker==1.6.2 \\\n    --hash=sha256:4afd3de66ef3a9f8067559fb7a1cbe555c17dcbe15971b05d1b625c3e7abe213 \\\n    --hash=sha256:c3d739772abb7bc2860abf5f2ec284223d9ad5c76da018234f6f50d6f31ab1f0\n    # via flask\nclick==8.1.3 \\\n    --hash=sha256:7682dc8afb30297001674575ea00d1814d808d6a36af415a82bd481d37ba7b8e \\\n    --hash=sha256:bb4d8133cb15a609f44e8213d9b391b0809795062913b383c62be0ee95b1db48\n    # via flask\nflask==2.3.2 \\\n    --hash=sha256:77fd4e1249d8c9923de34907236b747ced06e5467ecac1a7bb7115ae0e9670b0 \\\n    --hash=sha256:8c2f9abd47a9e8df7f0c3f091ce9497d011dc3b31effcf4c85a6e2b50f4114ef\n    # via -r requirements.in\nitsdangerous==2.1.2 \\\n    --hash=sha256:2c2349112351b88699d8d4b6b075022c0808887cb7ad10069318a8b0bc88db44 \\\n    --hash=sha256:5dbbc68b317e5e42f327f9021763545dc3fc3bfe22e6deb96aaf1fc38874156a\n    # via flask\njinja2==3.1.2 \\\n    --hash=sha256:31351a702a408a9e7595a8fc6150fc3f43bb6bf7e319770cbc0db9df9437e852 \\\n    --hash=sha256:6088930bfe239f0e6710546ab9c19c9ef35e29792895fed6e6e31a023a182a61\n    # via flask\nmarkupsafe==2.1.1 \\\n    --hash=sha256:0212a68688482dc52b2d45013df70d169f542b7394fc744c02a57374a4207003 \\\n    --hash=sha256:089cf3dbf0cd6c100f02945abeb18484bd1ee57a079aefd52cffd17fba910b88 \\\n    --hash=sha256:10c1bfff05d95783da83491be968e8fe789263689c02724e0c691933c52994f5 \\\n    --hash=sha256:33b74d289bd2f5e527beadcaa3f401e0df0a89927c1559c8566c066fa4248ab7 \\\n    --hash=sha256:3799351e2336dc91ea70b034983ee71cf2f9533cdff7c14c90ea126bfd95d65a \\\n    --hash=sha256:3ce11ee3f23f79dbd06fb3d63e2f6af7b12db1d46932fe7bd8afa259a5996603 \\\n    --hash=sha256:421be9fbf0ffe9ffd7a378aafebbf6f4602d564d34be190fc19a193232fd12b1 \\\n    --hash=sha256:43093fb83d8343aac0b1baa75516da6092f58f41200907ef92448ecab8825135 \\\n    --hash=sha256:46d00d6cfecdde84d40e572d63735ef81423ad31184100411e6e3388d405e247 \\\n    --hash=sha256:4a33dea2b688b3190ee12bd7cfa29d39c9ed176bda40bfa11099a3ce5d3a7ac6 \\\n    --hash=sha256:4b9fe39a2ccc108a4accc2676e77da025ce383c108593d65cc909add5c3bd601 \\\n    --hash=sha256:56442863ed2b06d19c37f94d999035e15ee982988920e12a5b4ba29b62ad1f77 \\\n    --hash=sha256:671cd1187ed5e62818414afe79ed29da836dde67166a9fac6d435873c44fdd02 \\\n    --hash=sha256:694deca8d702d5db21ec83983ce0bb4b26a578e71fbdbd4fdcd387daa90e4d5e \\\n    --hash=sha256:6a074d34ee7a5ce3effbc526b7083ec9731bb3cbf921bbe1d3005d4d2bdb3a63 \\\n    --hash=sha256:6d0072fea50feec76a4c418096652f2c3238eaa014b2f94aeb1d56a66b41403f \\\n    --hash=sha256:6fbf47b5d3728c6aea2abb0589b5d30459e369baa772e0f37a0320185e87c980 \\\n    --hash=sha256:7f91197cc9e48f989d12e4e6fbc46495c446636dfc81b9ccf50bb0ec74b91d4b \\\n    --hash=sha256:86b1f75c4e7c2ac2ccdaec2b9022845dbb81880ca318bb7a0a01fbf7813e3812 \\\n    --hash=sha256:8dc1c72a69aa7e082593c4a203dcf94ddb74bb5c8a731e4e1eb68d031e8498ff \\\n    --hash=sha256:8e3dcf21f367459434c18e71b2a9532d96547aef8a871872a5bd69a715c15f96 \\\n    --hash=sha256:8e576a51ad59e4bfaac456023a78f6b5e6e7651dcd383bcc3e18d06f9b55d6d1 \\\n    --hash=sha256:96e37a3dc86e80bf81758c152fe66dbf60ed5eca3d26305edf01892257049925 \\\n    --hash=sha256:97a68e6ada378df82bc9f16b800ab77cbf4b2fada0081794318520138c088e4a \\\n    --hash=sha256:99a2a507ed3ac881b975a2976d59f38c19386d128e7a9a18b7df6fff1fd4c1d6 \\\n    --hash=sha256:a49907dd8420c5685cfa064a1335b6754b74541bbb3706c259c02ed65b644b3e \\\n    --hash=sha256:b09bf97215625a311f669476f44b8b318b075847b49316d3e28c08e41a7a573f \\\n    --hash=sha256:b7bd98b796e2b6553da7225aeb61f447f80a1ca64f41d83612e6139ca5213aa4 \\\n    --hash=sha256:b87db4360013327109564f0e591bd2a3b318547bcef31b468a92ee504d07ae4f \\\n    --hash=sha256:bcb3ed405ed3222f9904899563d6fc492ff75cce56cba05e32eff40e6acbeaa3 \\\n    --hash=sha256:d4306c36ca495956b6d568d276ac11fdd9c30a36f1b6eb928070dc5360b22e1c \\\n    --hash=sha256:d5ee4f386140395a2c818d149221149c54849dfcfcb9f1debfe07a8b8bd63f9a \\\n    --hash=sha256:dda30ba7e87fbbb7eab1ec9f58678558fd9a6b8b853530e176eabd064da81417 \\\n    --hash=sha256:e04e26803c9c3851c931eac40c695602c6295b8d432cbe78609649ad9bd2da8a \\\n    --hash=sha256:e1c0b87e09fa55a220f058d1d49d3fb8df88fbfab58558f1198e08c1e1de842a \\\n    --hash=sha256:e72591e9ecd94d7feb70c1cbd7be7b3ebea3f548870aa91e2732960fa4d57a37 \\\n    --hash=sha256:e8c843bbcda3a2f1e3c2ab25913c80a3c5376cd00c6e8c4a86a89a28c8dc5452 \\\n    --hash=sha256:efc1913fd2ca4f334418481c7e595c00aad186563bbc1ec76067848c7ca0a933 \\\n    --hash=sha256:f121a1420d4e173a5d96e47e9a0c0dcff965afdf1626d28de1460815f7c4ee7a \\\n    --hash=sha256:fc7b548b17d238737688817ab67deebb30e8073c95749d55538ed473130ec0c7\n    # via\n    #   jinja2\n    #   werkzeug\nwerkzeug==3.0.1 \\\n    --hash=sha256:507e811ecea72b18a404947aded4b3390e1db8f826b494d76550ef45bb3b1dcc \\\n    --hash=sha256:90a285dc0e42ad56b34e696398b8122ee4c681833fb35b8334a095d82c56da10\n    # via flask\n"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: \"3.7\"\nservices:\n    ###########################\n    ####### Go examples #######\n    ###########################\n    go-opentracing-server:\n        container_name: go-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-server\n        build: ./go/opentracing/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=go-opentracing-server\n            - LS_SERVICE_VERSION=5\n        stop_grace_period: 1s\n    go-opentracing-client:\n       container_name: go-opentracing-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-client\n       build: ./go/opentracing/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentracing-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=go-opentracing-client\n           - LS_SERVICE_VERSION=1.2.7\n           - DESTINATION_URL=http://go-opentracing-server:8081/ping\n       stop_grace_period: 1s\n    go-opentelemetry-collector-server:\n        container_name: go-opentelemetry-collector-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-server\n        build: ./go/opentelemetry/collector/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        depends_on:\n            - otel-collector\n        environment:\n            - LS_SATELLITE_URL=otel-collector:4317\n            - LS_INSECURE=1\n            - LS_SERVICE_NAME=go-opentelemetry-collector-server\n            - LS_SERVICE_VERSION=9.9.1\n        stop_grace_period: 1s\n    go-opentelemetry-collector-client:\n       container_name: go-opentelemetry-collector-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-client\n       build: ./go/opentelemetry/collector/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentelemetry-collector-server\n           - otel-collector\n       env_file:\n           - .env\n       environment:\n           - LS_SATELLITE_URL=otel-collector:4317\n           - LS_INSECURE=1\n           - LS_SERVICE_NAME=go-opentelemetry-collector-client\n           - LS_SERVICE_VERSION=9.9.2\n           - DESTINATION_URL=http://go-opentelemetry-collector-server:8081/ping\n       stop_grace_period: 1s\n    go-opentelemetry-otlp-server:\n        container_name: go-opentelemetry-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-server\n        build: ./go/opentelemetry/otlp/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SATELLITE_URL=ingest.lightstep.com:443\n            - LS_INSECURE=1\n            - LS_SERVICE_NAME=go-opentelemetry-otlp-server\n            - LS_SERVICE_VERSION=9.9.1\n        stop_grace_period: 1s\n    go-opentelemetry-otlp-client:\n       container_name: go-opentelemetry-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-client\n       build: ./go/opentelemetry/otlp/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentelemetry-otlp-server\n       env_file:\n           - .env\n       environment:\n           - LS_SATELLITE_URL=ingest.lightstep.com:443\n           - LS_INSECURE=1\n           - LS_SERVICE_NAME=go-opentelemetry-otlp-client\n           - LS_SERVICE_VERSION=9.9.2\n           - DESTINATION_URL=http://go-opentelemetry-otlp-server:8081/ping\n       stop_grace_period: 1s\n    ###############################\n    ####### Python examples #######\n    ###############################\n    py-opentelemetry-auto-collector-client:\n       container_name: py-opentelemetry-auto-collector-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client\n       build:\n           context: ./python/opentelemetry/auto_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-auto-collector-server\n           - otel-collector\n       env_file:\n           - .env\n       environment:\n           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-client,service.version=1.2.9\n           - DESTINATION_URL=http://py-opentelemetry-auto-collector-server:8081/ping\n       stop_grace_period: 1s\n    py-opentelemetry-auto-collector-server:\n        container_name: py-opentelemetry-auto-collector-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server\n        build:\n            context: ./python/opentelemetry/auto_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - otel-collector\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-server,service.version=0.2.8\n        stop_grace_period: 1s\n    py-opentelemetry-auto-otlp-client:\n       container_name: py-opentelemetry-auto-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client\n       build:\n           context: ./python/opentelemetry/auto_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-auto-otlp-server\n       env_file:\n           - .env\n       environment:\n           # NOTE: Using TOKEN environment variable from integration.yml\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-client,service.version=10.10.10\n           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443\n           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443\n           - DESTINATION_URL=http://py-opentelemetry-auto-otlp-server:8081/ping\n           - OTEL_EXPORTER_OTLP_HEADERS=lightstep-access-token=${TOKEN}\n       stop_grace_period: 1s\n    py-opentelemetry-auto-otlp-server:\n        container_name: py-opentelemetry-auto-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server\n        build:\n            context: ./python/opentelemetry/auto_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            # NOTE: Using TOKEN environment variable from integration.yml\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-server,service.version=10.10.9\n            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443\n            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443\n            - OTEL_EXPORTER_OTLP_HEADERS=lightstep-access-token=${TOKEN}\n        stop_grace_period: 1s\n    py-opentelemetry-manual-otlp-client:\n       container_name: py-opentelemetry-manual-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-manual-client\n       build:\n           context: ./python/opentelemetry/manual_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-manual-otlp-server\n       env_file:\n           - .env\n       environment:\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-manual-otlp-client,service.version=10.10.10\n           - DESTINATION_URL=http://py-opentelemetry-manual-otlp-server:8081/ping\n       stop_grace_period: 1s\n    py-opentelemetry-manual-otlp-server:\n        container_name: py-opentelemetry-manual-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-manual-server\n        build:\n            context: ./python/opentelemetry/manual_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-manual-otlp-server,service.version=10.10.9\n        stop_grace_period: 1s\n    demo-client-otlp:\n       container_name: demo-client-otlp\n       build:\n           context: ./demo-client/otlp\n           dockerfile: Dockerfile\n       networks:\n           - demo\n       env_file:\n           - .env\n       environment:\n           - INTEGRATION_CONFIG_FILE=/config/integration.yml\n           - LS_SERVICE_NAME=demo-client-otlp\n           - LS_SERVICE_VERSION=0.1.1\n       volumes:\n           - ./config:/config/:ro\n       stop_grace_period: 1s\n    py-opentracing-client:\n       container_name: py-opentracing-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-client\n       build:\n           context: ./python/opentracing\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentracing-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=py-opentracing-client\n           - LS_SERVICE_VERSION=10.10.10\n           - DESTINATION_URL=http://py-opentracing-server:5000/ping\n       stop_grace_period: 1s\n    py-opentracing-server:\n        container_name: py-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-server\n        build:\n            context: ./python/opentracing\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=py-opentracing-server\n            - LS_SERVICE_VERSION=10.10.9\n        stop_grace_period: 1s\n    ###################################\n    ####### Javascript examples #######\n    ###################################\n    ####### Java examples ########\n    ##############################\n    java-specialagent-server:\n        container_name: java-specialagent-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-server\n        build: ./java/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=java-specialagent-server\n            - LS_SERVICE_VERSION=4.3.2\n        stop_grace_period: 1s\n    java-specialagent-client:\n       container_name: java-specialagent-client\n       image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-client\n       build: ./java/client\n       networks:\n           - demo\n       depends_on:\n           - java-specialagent-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=java-specialagent-client\n           - LS_SERVICE_VERSION=3.2.1\n           - DESTINATION_URL=http://java-specialagent-server:8083/ping\n       stop_grace_period: 1s\n    java-otlp-client:\n       container_name: java-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-client\n       build:\n           context: ./java/otlp\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - java-otlp-server\n       env_file:\n           - .env\n       environment:\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-client,service.version=11.11.10\n           - LS_SATELLITE_URL=ingest.lightstep.com:443\n           - DESTINATION_URL=http://java-otlp-server:8083/ping\n       stop_grace_period: 1s\n    java-otlp-server:\n        container_name: java-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-server\n        build:\n            context: ./java/otlp\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-server,service.version=11.11.11\n            - LS_SATELLITE_URL=ingest.lightstep.com:443\n        stop_grace_period: 1s\n    java-opentracing-server:\n        container_name: java-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-opentracing-server\n        build:\n            context: ./java/microdonuts\n            dockerfile: Dockerfile\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=java-opentracing-server\n            - OTEL_RESOURCE_ATTRIBUTES=service.version=19.19.19\n            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=ingest.lightstep.com\n            - DESTINATION_URL=http://java-opentracing-server:10001/order\n        stop_grace_period: 1s\n    ################################\n    ####### Integration test #######\n    ################################\n    integration-test:\n        container_name: integration-test\n        image: ghcr.io/lightstep/opentelemetry-examples:integration-test\n        build:\n            context: ./tools/integration\n        networks:\n            - demo\n        depends_on:\n            - go-opentracing-server\n            - go-opentelemetry-collector-server\n            - go-opentelemetry-otlp-server\n            - py-opentelemetry-auto-collector-server\n            - py-opentelemetry-auto-otlp-server\n            - py-opentelemetry-manual-otlp-server\n            - py-opentracing-server\n            - java-specialagent-server\n            - java-otlp-server\n            - java-opentracing-server\n        env_file:\n            - .env\n        environment:\n            - OTEL_LOG_LEVEL=error\n            - LS_SERVICE_NAME=integration-test\n            - OTEL_RESOURCE_ATTRIBUTES=service.version=2020.10.02\n            - OTEL_PROPAGATORS=b3,b3multi,tracecontext\n        volumes:\n            - ./config:/config/:ro\n        stop_grace_period: 1s\n    ################################\n    ####### Config generator #######\n    ################################\n    config-generator:\n        container_name: config-generator\n        image: ghcr.io/lightstep/opentelemetry-examples:config-generator\n        build:\n            context: ./tools/integration\n        environment:\n            - DOCKER_COMPOSE_PATH=/docker-compose.yml\n            - OUTPUT_PATH=/config/integration.yml\n        volumes:\n            - ./docker-compose.yml:/docker-compose.yml/:ro\n            - ./config:/config/:rw\n        command: python /app/generate_config.py\n        stop_grace_period: 1s\n    ##############################\n    ####### Extra services #######\n    ##############################\n    mongo:\n        container_name: mongo\n        image: mongo:latest\n        networks:\n            - demo\n        stop_grace_period: 1s\n        ports:\n            - 0.0.0.0:27017:27017\n    mysql:\n        container_name: mysql\n        image: mysql:5.7\n        restart: always\n        environment:\n            MYSQL_USER: testuser\n            MYSQL_PASSWORD: testpassword\n            MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n            MYSQL_DATABASE: opentelemetry-tests\n        networks:\n            - demo\n        stop_grace_period: 1s\n    postgres:\n        container_name: postgres\n        image: postgres:10.5-alpine\n        environment:\n            POSTGRES_USER: testuser\n            POSTGRES_PASSWORD: testpassword\n            POSTGRES_DB: opentelemetry-tests\n        networks:\n            - demo\n        ports:\n            - 0.0.0.0:5432:5432\n        stop_grace_period: 1s\n    redis:\n        container_name: redis\n        image: redis:7.0-alpine\n        networks:\n            - demo\n        ports:\n            - 0.0.0.0:6379:6379\n        stop_grace_period: 1s\n    apache:\n        build: ./collector/apache/httpd\n        container_name: apache\n        ports:\n            - '8080:80'\n        networks:\n            - demo\n        volumes:\n            - ./collector/apache/httpd/website:/usr/local/apache2/htdocs\n        stop_grace_period: 1s\n    otel-collector:\n        container_name: otel-collector\n        image: otel/opentelemetry-collector-contrib:0.50.0\n        command: [\"--config=/conf/collector-config.yaml\"]\n        networks:\n            - demo\n        volumes:\n            - ./config:/conf/:rw\n        ports:\n            - \"0.0.0.0:8889:8889\"   # Prometheus exporter metrics\n            - \"0.0.0.0:4317:4317\" # OTLP receiver\n    # aws-otel-collector:\n    #     image: amazon/aws-otel-collector:latest\n    #     networks:\n    #         - demo\n    #     command: [\"--config=/etc/otel-agent-config.yaml\", \"--log-level=DEBUG\"]\n    #     ports:\n    #         - \"0.0.0.0:55680:55680\" # OTLP receiver\n    #     volumes:\n    #         - ./collector/collector-config.yaml:/etc/otel-agent-config.yaml\n    #     env_file:\n    #         - .env\n    # jaeger:\n    #     container_name: jaeger\n    #     image: jaegertracing/all-in-one:latest\n    #     ports:\n    #         - \"0.0.0.0:16686:16686\"\n    #     networks:\n    #         - demo\n    #         # docker run -p 16686:16686 -p 14268:14268 -p 6831:6831/udp -p 14250:14250 \n    #     stop_grace_period: 1s\n    # optionally configure a satellite here\n    # satellite:\n    #     container_name: satellite\n    #     image: satlocal:latest\n    #     env_file:\n    #         - .env\n    #     networks:\n    #         - demo\n    #     ports:\n    #         - \"0.0.0.0:8360:8360\"   # Satellite ingest port\n    #     stop_grace_period: 1s\nnetworks:\n    demo:\n",
            "collector/envoy/app/flask/Dockerfile": "FROM python:3.10-slim-bullseye\n\nADD requirements.txt /tmp/flask-requirements.txt\nRUN pip3 install -r /tmp/flask-requirements.txt\nRUN mkdir /code\n\nENTRYPOINT [\"python3\", \"/code/service.py\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "collector.yml",
            "docker-compose.yml"
        ],
        "folders": []
    }
}