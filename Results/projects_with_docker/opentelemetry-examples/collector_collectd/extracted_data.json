{
    "source_code_info": {
        "language": "Go",
        "framework": "Go",
        "dependencies": {
            "go.mod": "module github.com/lightstep/ls-examples/go/opentracing/client\n\ngo 1.17\n\nrequire (\n\tgithub.com/lightstep/lightstep-tracer-go v0.26.0\n\tgithub.com/opentracing/opentracing-go v1.2.0\n)\n\nrequire (\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/protobuf v1.3.1 // indirect\n\tgithub.com/lightstep/lightstep-tracer-common/golang/gogo v0.0.0-20210210170715-a8dfcb80d3a7 // indirect\n\tgolang.org/x/net v0.0.0-20201021035429-f5854403a974 // indirect\n\tgolang.org/x/sys v0.0.0-20210217105451-b926d437f341 // indirect\n\tgolang.org/x/text v0.3.3 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20190530194941-fb225487d101 // indirect\n\tgoogle.golang.org/grpc v1.21.0 // indirect\n)\n"
        },
        "database": null,
        "build_system": "go mod",
        "config_files": {
            "docker-compose.yml": "version: \"3.7\"\nservices:\n    ###########################\n    ####### Go examples #######\n    ###########################\n    go-opentracing-server:\n        container_name: go-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-server\n        build: ./go/opentracing/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=go-opentracing-server\n            - LS_SERVICE_VERSION=5\n        stop_grace_period: 1s\n    go-opentracing-client:\n       container_name: go-opentracing-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentracing-client\n       build: ./go/opentracing/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentracing-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=go-opentracing-client\n           - LS_SERVICE_VERSION=1.2.7\n           - DESTINATION_URL=http://go-opentracing-server:8081/ping\n       stop_grace_period: 1s\n    go-opentelemetry-collector-server:\n        container_name: go-opentelemetry-collector-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-server\n        build: ./go/opentelemetry/collector/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        depends_on:\n            - otel-collector\n        environment:\n            - LS_SATELLITE_URL=otel-collector:4317\n            - LS_INSECURE=1\n            - LS_SERVICE_NAME=go-opentelemetry-collector-server\n            - LS_SERVICE_VERSION=9.9.1\n        stop_grace_period: 1s\n    go-opentelemetry-collector-client:\n       container_name: go-opentelemetry-collector-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-collector-client\n       build: ./go/opentelemetry/collector/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentelemetry-collector-server\n           - otel-collector\n       env_file:\n           - .env\n       environment:\n           - LS_SATELLITE_URL=otel-collector:4317\n           - LS_INSECURE=1\n           - LS_SERVICE_NAME=go-opentelemetry-collector-client\n           - LS_SERVICE_VERSION=9.9.2\n           - DESTINATION_URL=http://go-opentelemetry-collector-server:8081/ping\n       stop_grace_period: 1s\n    go-opentelemetry-otlp-server:\n        container_name: go-opentelemetry-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-server\n        build: ./go/opentelemetry/otlp/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SATELLITE_URL=ingest.lightstep.com:443\n            - LS_INSECURE=1\n            - LS_SERVICE_NAME=go-opentelemetry-otlp-server\n            - LS_SERVICE_VERSION=9.9.1\n        stop_grace_period: 1s\n    go-opentelemetry-otlp-client:\n       container_name: go-opentelemetry-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:go-opentelemetry-otlp-client\n       build: ./go/opentelemetry/otlp/client\n       networks:\n           - demo\n       depends_on:\n           - go-opentelemetry-otlp-server\n       env_file:\n           - .env\n       environment:\n           - LS_SATELLITE_URL=ingest.lightstep.com:443\n           - LS_INSECURE=1\n           - LS_SERVICE_NAME=go-opentelemetry-otlp-client\n           - LS_SERVICE_VERSION=9.9.2\n           - DESTINATION_URL=http://go-opentelemetry-otlp-server:8081/ping\n       stop_grace_period: 1s\n    ###############################\n    ####### Python examples #######\n    ###############################\n    py-opentelemetry-auto-collector-client:\n       container_name: py-opentelemetry-auto-collector-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client\n       build:\n           context: ./python/opentelemetry/auto_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-auto-collector-server\n           - otel-collector\n       env_file:\n           - .env\n       environment:\n           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-client,service.version=1.2.9\n           - DESTINATION_URL=http://py-opentelemetry-auto-collector-server:8081/ping\n       stop_grace_period: 1s\n    py-opentelemetry-auto-collector-server:\n        container_name: py-opentelemetry-auto-collector-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server\n        build:\n            context: ./python/opentelemetry/auto_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - otel-collector\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4317\n            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4317\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-collector-server,service.version=0.2.8\n        stop_grace_period: 1s\n    py-opentelemetry-auto-otlp-client:\n       container_name: py-opentelemetry-auto-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-client\n       build:\n           context: ./python/opentelemetry/auto_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-auto-otlp-server\n       env_file:\n           - .env\n       environment:\n           # NOTE: Using TOKEN environment variable from integration.yml\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-client,service.version=10.10.10\n           - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443\n           - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443\n           - DESTINATION_URL=http://py-opentelemetry-auto-otlp-server:8081/ping\n           - OTEL_EXPORTER_OTLP_HEADERS=lightstep-access-token=${TOKEN}\n       stop_grace_period: 1s\n    py-opentelemetry-auto-otlp-server:\n        container_name: py-opentelemetry-auto-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-auto-server\n        build:\n            context: ./python/opentelemetry/auto_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            # NOTE: Using TOKEN environment variable from integration.yml\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-auto-otlp-server,service.version=10.10.9\n            - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=ingest.lightstep.com:443\n            - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=ingest.lightstep.com:443\n            - OTEL_EXPORTER_OTLP_HEADERS=lightstep-access-token=${TOKEN}\n        stop_grace_period: 1s\n    py-opentelemetry-manual-otlp-client:\n       container_name: py-opentelemetry-manual-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-manual-client\n       build:\n           context: ./python/opentelemetry/manual_instrumentation\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentelemetry-manual-otlp-server\n       env_file:\n           - .env\n       environment:\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-manual-otlp-client,service.version=10.10.10\n           - DESTINATION_URL=http://py-opentelemetry-manual-otlp-server:8081/ping\n       stop_grace_period: 1s\n    py-opentelemetry-manual-otlp-server:\n        container_name: py-opentelemetry-manual-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentelemetry-manual-server\n        build:\n            context: ./python/opentelemetry/manual_instrumentation\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=py-opentelemetry-manual-otlp-server,service.version=10.10.9\n        stop_grace_period: 1s\n    demo-client-otlp:\n       container_name: demo-client-otlp\n       build:\n           context: ./demo-client/otlp\n           dockerfile: Dockerfile\n       networks:\n           - demo\n       env_file:\n           - .env\n       environment:\n           - INTEGRATION_CONFIG_FILE=/config/integration.yml\n           - LS_SERVICE_NAME=demo-client-otlp\n           - LS_SERVICE_VERSION=0.1.1\n       volumes:\n           - ./config:/config/:ro\n       stop_grace_period: 1s\n    py-opentracing-client:\n       container_name: py-opentracing-client\n       image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-client\n       build:\n           context: ./python/opentracing\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - py-opentracing-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=py-opentracing-client\n           - LS_SERVICE_VERSION=10.10.10\n           - DESTINATION_URL=http://py-opentracing-server:5000/ping\n       stop_grace_period: 1s\n    py-opentracing-server:\n        container_name: py-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:py-opentracing-server\n        build:\n            context: ./python/opentracing\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        depends_on:\n            - redis\n            - postgres\n            - mysql\n            - mongo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=py-opentracing-server\n            - LS_SERVICE_VERSION=10.10.9\n        stop_grace_period: 1s\n    ###################################\n    ####### Javascript examples #######\n    ###################################\n    ####### Java examples ########\n    ##############################\n    java-specialagent-server:\n        container_name: java-specialagent-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-server\n        build: ./java/server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=java-specialagent-server\n            - LS_SERVICE_VERSION=4.3.2\n        stop_grace_period: 1s\n    java-specialagent-client:\n       container_name: java-specialagent-client\n       image: ghcr.io/lightstep/opentelemetry-examples:java-specialagent-client\n       build: ./java/client\n       networks:\n           - demo\n       depends_on:\n           - java-specialagent-server\n       env_file:\n           - .env\n       environment:\n           - LS_SERVICE_NAME=java-specialagent-client\n           - LS_SERVICE_VERSION=3.2.1\n           - DESTINATION_URL=http://java-specialagent-server:8083/ping\n       stop_grace_period: 1s\n    java-otlp-client:\n       container_name: java-otlp-client\n       image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-client\n       build:\n           context: ./java/otlp\n           dockerfile: Dockerfile.client\n       networks:\n           - demo\n       depends_on:\n           - java-otlp-server\n       env_file:\n           - .env\n       environment:\n           - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-client,service.version=11.11.10\n           - LS_SATELLITE_URL=ingest.lightstep.com:443\n           - DESTINATION_URL=http://java-otlp-server:8083/ping\n       stop_grace_period: 1s\n    java-otlp-server:\n        container_name: java-otlp-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-otlp-server\n        build:\n            context: ./java/otlp\n            dockerfile: Dockerfile.server\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - OTEL_RESOURCE_ATTRIBUTES=service.name=java-otlp-server,service.version=11.11.11\n            - LS_SATELLITE_URL=ingest.lightstep.com:443\n        stop_grace_period: 1s\n    java-opentracing-server:\n        container_name: java-opentracing-server\n        image: ghcr.io/lightstep/opentelemetry-examples:java-opentracing-server\n        build:\n            context: ./java/microdonuts\n            dockerfile: Dockerfile\n        networks:\n            - demo\n        env_file:\n            - .env\n        environment:\n            - LS_SERVICE_NAME=java-opentracing-server\n            - OTEL_RESOURCE_ATTRIBUTES=service.version=19.19.19\n            - OTEL_EXPORTER_OTLP_SPAN_ENDPOINT=ingest.lightstep.com\n            - DESTINATION_URL=http://java-opentracing-server:10001/order\n        stop_grace_period: 1s\n    ################################\n    ####### Integration test #######\n    ################################\n    integration-test:\n        container_name: integration-test\n        image: ghcr.io/lightstep/opentelemetry-examples:integration-test\n        build:\n            context: ./tools/integration\n        networks:\n            - demo\n        depends_on:\n            - go-opentracing-server\n            - go-opentelemetry-collector-server\n            - go-opentelemetry-otlp-server\n            - py-opentelemetry-auto-collector-server\n            - py-opentelemetry-auto-otlp-server\n            - py-opentelemetry-manual-otlp-server\n            - py-opentracing-server\n            - java-specialagent-server\n            - java-otlp-server\n            - java-opentracing-server\n        env_file:\n            - .env\n        environment:\n            - OTEL_LOG_LEVEL=error\n            - LS_SERVICE_NAME=integration-test\n            - OTEL_RESOURCE_ATTRIBUTES=service.version=2020.10.02\n            - OTEL_PROPAGATORS=b3,b3multi,tracecontext\n        volumes:\n            - ./config:/config/:ro\n        stop_grace_period: 1s\n    ################################\n    ####### Config generator #######\n    ################################\n    config-generator:\n        container_name: config-generator\n        image: ghcr.io/lightstep/opentelemetry-examples:config-generator\n        build:\n            context: ./tools/integration\n        environment:\n            - DOCKER_COMPOSE_PATH=/docker-compose.yml\n            - OUTPUT_PATH=/config/integration.yml\n        volumes:\n            - ./docker-compose.yml:/docker-compose.yml/:ro\n            - ./config:/config/:rw\n        command: python /app/generate_config.py\n        stop_grace_period: 1s\n    ##############################\n    ####### Extra services #######\n    ##############################\n    mongo:\n        container_name: mongo\n        image: mongo:latest\n        networks:\n            - demo\n        stop_grace_period: 1s\n        ports:\n            - 0.0.0.0:27017:27017\n    mysql:\n        container_name: mysql\n        image: mysql:5.7\n        restart: always\n        environment:\n            MYSQL_USER: testuser\n            MYSQL_PASSWORD: testpassword\n            MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n            MYSQL_DATABASE: opentelemetry-tests\n        networks:\n            - demo\n        stop_grace_period: 1s\n    postgres:\n        container_name: postgres\n        image: postgres:10.5-alpine\n        environment:\n            POSTGRES_USER: testuser\n            POSTGRES_PASSWORD: testpassword\n            POSTGRES_DB: opentelemetry-tests\n        networks:\n            - demo\n        ports:\n            - 0.0.0.0:5432:5432\n        stop_grace_period: 1s\n    redis:\n        container_name: redis\n        image: redis:7.0-alpine\n        networks:\n            - demo\n        ports:\n            - 0.0.0.0:6379:6379\n        stop_grace_period: 1s\n    apache:\n        build: ./collector/apache/httpd\n        container_name: apache\n        ports:\n            - '8080:80'\n        networks:\n            - demo\n        volumes:\n            - ./collector/apache/httpd/website:/usr/local/apache2/htdocs\n        stop_grace_period: 1s\n    otel-collector:\n        container_name: otel-collector\n        image: otel/opentelemetry-collector-contrib:0.50.0\n        command: [\"--config=/conf/collector-config.yaml\"]\n        networks:\n            - demo\n        volumes:\n            - ./config:/conf/:rw\n        ports:\n            - \"0.0.0.0:8889:8889\"   # Prometheus exporter metrics\n            - \"0.0.0.0:4317:4317\" # OTLP receiver\n    # aws-otel-collector:\n    #     image: amazon/aws-otel-collector:latest\n    #     networks:\n    #         - demo\n    #     command: [\"--config=/etc/otel-agent-config.yaml\", \"--log-level=DEBUG\"]\n    #     ports:\n    #         - \"0.0.0.0:55680:55680\" # OTLP receiver\n    #     volumes:\n    #         - ./collector/collector-config.yaml:/etc/otel-agent-config.yaml\n    #     env_file:\n    #         - .env\n    # jaeger:\n    #     container_name: jaeger\n    #     image: jaegertracing/all-in-one:latest\n    #     ports:\n    #         - \"0.0.0.0:16686:16686\"\n    #     networks:\n    #         - demo\n    #         # docker run -p 16686:16686 -p 14268:14268 -p 6831:6831/udp -p 14250:14250 \n    #     stop_grace_period: 1s\n    # optionally configure a satellite here\n    # satellite:\n    #     container_name: satellite\n    #     image: satlocal:latest\n    #     env_file:\n    #         - .env\n    #     networks:\n    #         - demo\n    #     ports:\n    #         - \"0.0.0.0:8360:8360\"   # Satellite ingest port\n    #     stop_grace_period: 1s\nnetworks:\n    demo:\n",
            "collector/collectd/Dockerfile": "FROM debian:stable-slim\n\nENV DEBIAN_FRONTEND noninteractive\nCOPY 50docker-apt-conf /etc/apt/apt.conf.d/\n\nCOPY rootfs_prefix/ /usr/src/rootfs_prefix/\n\nRUN apt-get update \\\n && apt-get upgrade \\\n && apt-get install \\\n    collectd-core \\\n    collectd-utils \\\n    build-essential \\\n    zsh \\\n && make -C /usr/src/rootfs_prefix/ \\\n && apt-get --purge remove build-essential \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\nCOPY collectd.conf /etc/collectd/collectd.conf\nCOPY run-collectd.sh /usr/local/sbin/run-collectd.sh\n\nRUN chmod u+x /usr/local/sbin/run-collectd.sh\n\nENV LD_PRELOAD /usr/src/rootfs_prefix/rootfs_prefix.so\n\nEXPOSE 9103\n\nENTRYPOINT [\"/usr/local/sbin/run-collectd.sh\", \"8\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "collector.yml",
            "docker-compose.yml"
        ],
        "folders": []
    }
}