{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "setup.py": "#!/usr/bin/env python\n#\n# Copyright (C) 2023 by eHealth Africa : http://www.eHealthAfrica.org\n#\n# See the NOTICE file distributed with this work for additional information\n# regarding copyright ownership.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with\n# the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nfrom io import open\nfrom setuptools import find_packages, setup\n\n\ndef read(f):\n    return open(f, 'r', encoding='utf-8').read()\n\n\nsetup(\n    version=read('/var/tmp/VERSION').strip(),\n    name='aether.odk',\n    description='An Aether module with ODK functionality',\n\n    url='https://github.com/eHealthAfrica/aether/',\n    author='eHealth Africa',\n    author_email='aether@ehealthafrica.org',\n    license='Apache2 License',\n\n    packages=find_packages(),\n)\n"
        },
        "database": null,
        "build_system": "setuptools",
        "config_files": {
            "docker-compose.yml": "# ------------------------------------------------------------------------------\n# Config file for these containers:\n#\n#  * Databases + NGINX + Minio + Keycloak\n#  * Aether Kernel\n#  * Entity Extractor\n#  * ODK Module\n#  * Aether UI & UI Assets\n# ------------------------------------------------------------------------------\n\nnetworks:\n  # docker network create ${NETWORK_NAME}\n  internal:\n    # if this isn't explicitly set it inherits from the containing folder name (aether or not)\n    name: ${NETWORK_NAME}\n    external: true\n\nvolumes:\n  # docker volume create ${DB_VOLUME}\n  database_data:\n    name: ${DB_VOLUME}\n    external: true\n  redis_data: {}\n\nservices:\n\n  # -------------------------------------\n  # Databases + NGINX + Minio + Keycloak\n  # -------------------------------------\n\n  db:\n    extends:\n      file: ./docker-compose-base.yml\n      service: postgres-base\n    volumes:\n      - database_data:/var/lib/postgresql/data\n    networks:\n      - internal\n\n  redis:\n    extends:\n      file: ./docker-compose-base.yml\n      service: redis-base\n    volumes:\n      - redis_data:/var/lib/redis/data\n    networks:\n      - internal\n\n  nginx:\n    extends:\n      file: ./docker-compose-base.yml\n      service: nginx-base\n    networks:\n      internal:\n        ipv4_address: ${NETWORK_NGINX_IP}\n\n  minio:\n    extends:\n      file: ./docker-compose-base.yml\n      service: minio-base\n    depends_on:\n      nginx:\n        condition: service_healthy\n    networks:\n      - internal\n\n  keycloak:\n    extends:\n      file: ./docker-compose-base.yml\n      service: keycloak-base\n    depends_on:\n      db:\n        condition: service_healthy\n      nginx:\n        condition: service_healthy\n    networks:\n      - internal\n    extra_hosts:\n      - ${NETWORK_DOMAIN}:${NETWORK_NGINX_IP}\n\n\n  # ---------------------------------\n  # Entity Extractor\n  # ---------------------------------\n  exm:\n    extends:\n      file: ./docker-compose-base.yml\n      service: exm-base\n    depends_on:\n      redis:\n        condition: service_started\n    networks:\n      - internal\n\n\n  # ---------------------------------\n  # Aether Kernel\n  # ---------------------------------\n\n  kernel:\n    extends:\n      file: ./docker-compose-base.yml\n      service: kernel-base\n    volumes:\n      # static folder\n      - ./.persistent_data/static/kernel:/var/www/static\n      # backup folder\n      - ./.persistent_data/backups/kernel:/backups\n    depends_on:\n      db:\n        condition: service_healthy\n      keycloak:\n        condition: service_started\n      minio:\n        condition: service_started\n      nginx:\n        condition: service_healthy\n      redis:\n        condition: service_started\n    networks:\n      - internal\n    extra_hosts:\n      - ${NETWORK_DOMAIN}:${NETWORK_NGINX_IP}\n\n\n  # ---------------------------------\n  # Aether UI\n  # ---------------------------------\n\n  ui-assets:\n    extends:\n      file: ./docker-compose-base.yml\n      service: ui-assets-base\n    networks:\n      - internal\n\n  ui:\n    extends:\n      file: ./docker-compose-base.yml\n      service: ui-base\n    volumes:\n      # static folder\n      - ./.persistent_data/static/ui:/var/www/static\n      # backup folder\n      - ./.persistent_data/backups/ui:/backups\n    depends_on:\n      db:\n        condition: service_healthy\n      keycloak:\n        condition: service_started\n      nginx:\n        condition: service_healthy\n      redis:\n        condition: service_started\n      kernel:\n        condition: service_started\n      ui-assets:\n        condition: service_started\n    networks:\n      - internal\n    extra_hosts:\n      - ${NETWORK_DOMAIN}:${NETWORK_NGINX_IP}\n\n\n  # ---------------------------------\n  # ODK module\n  # ---------------------------------\n\n  odk:\n    extends:\n      file: ./docker-compose-base.yml\n      service: odk-base\n    volumes:\n      # static folder\n      - ./.persistent_data/static/odk:/var/www/static\n      # backup folder\n      - ./.persistent_data/backups/odk:/backups\n    depends_on:\n      db:\n        condition: service_healthy\n      keycloak:\n        condition: service_started\n      minio:\n        condition: service_started\n      nginx:\n        condition: service_healthy\n      redis:\n        condition: service_started\n      kernel:\n        condition: service_started\n    networks:\n      - internal\n    extra_hosts:\n      - ${NETWORK_DOMAIN}:${NETWORK_NGINX_IP}\n",
            "aether-odk-module/Dockerfile": "FROM python:3.10-slim\n\nLABEL description=\"Aether ODK Module\" \\\n      name=\"aether-odk\" \\\n      author=\"eHealth Africa\"\n\n################################################################################\n## set up container\n################################################################################\n\nCOPY ./conf/docker/* /tmp/\nRUN /tmp/setup.sh\n\nWORKDIR /code\nENTRYPOINT [\"/code/entrypoint.sh\"]\n\n################################################################################\n## install dependencies\n## copy files one by one and split commands to use docker cache\n################################################################################\n\nCOPY --chown=aether:aether ./conf/pip /code/conf/pip\n\nENV VIRTUAL_ENV=/var/run/aether/venv\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\nRUN mkdir -p $VIRTUAL_ENV && \\\n    python3 -m venv $VIRTUAL_ENV && \\\n    pip install -q --upgrade pip && \\\n    pip install -q -r /code/conf/pip/requirements.txt\n\nCOPY --chown=aether:aether ./ /code\n\n################################################################################\n## create application version and revision files\n################################################################################\n\nARG VERSION=0.0.0\nARG GIT_REVISION\n\nRUN mkdir -p /var/tmp && \\\n    echo $VERSION > /var/tmp/VERSION && \\\n    echo $GIT_REVISION > /var/tmp/REVISION\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            "Dockerfile",
            "entrypoint.sh",
            "manage.py",
            "setup.cfg",
            "setup.py"
        ],
        "folders": [
            "aether",
            "conf"
        ]
    }
}