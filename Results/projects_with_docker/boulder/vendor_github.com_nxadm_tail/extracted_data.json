{
    "source_code_info": {
        "language": "Go",
        "framework": "Go",
        "dependencies": {
            "go.mod": "module github.com/letsencrypt/boulder\n\ngo 1.23.0\n\nrequire (\n\tgithub.com/aws/aws-sdk-go-v2 v1.32.2\n\tgithub.com/aws/aws-sdk-go-v2/config v1.27.43\n\tgithub.com/aws/aws-sdk-go-v2/service/s3 v1.65.3\n\tgithub.com/aws/smithy-go v1.22.0\n\tgithub.com/eggsampler/acme/v3 v3.6.2-0.20250208073118-0466a0230941\n\tgithub.com/go-jose/go-jose/v4 v4.0.5\n\tgithub.com/go-logr/stdr v1.2.2\n\tgithub.com/go-sql-driver/mysql v1.5.0\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da\n\tgithub.com/google/certificate-transparency-go v1.1.6\n\tgithub.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus v1.0.1\n\tgithub.com/jmhodges/clock v1.2.0\n\tgithub.com/letsencrypt/borp v0.0.0-20240620175310-a78493c6e2bd\n\tgithub.com/letsencrypt/challtestsrv v1.2.1\n\tgithub.com/letsencrypt/pkcs11key/v4 v4.0.0\n\tgithub.com/letsencrypt/validator/v10 v10.0.0-20230215210743-a0c7dfc17158\n\tgithub.com/miekg/dns v1.1.61\n\tgithub.com/miekg/pkcs11 v1.1.1\n\tgithub.com/nxadm/tail v1.4.11\n\tgithub.com/prometheus/client_golang v1.15.1\n\tgithub.com/prometheus/client_model v0.4.0\n\tgithub.com/redis/go-redis/extra/redisotel/v9 v9.5.3\n\tgithub.com/redis/go-redis/v9 v9.5.3\n\tgithub.com/titanous/rocacheck v0.0.0-20171023193734-afe73141d399\n\tgithub.com/weppos/publicsuffix-go v0.40.3-0.20250307081557-c05521c3453a\n\tgithub.com/zmap/zcrypto v0.0.0-20231219022726-a1f61fb1661c\n\tgithub.com/zmap/zlint/v3 v3.6.4\n\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.55.0\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.55.0\n\tgo.opentelemetry.io/otel v1.30.0\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc v1.30.0\n\tgo.opentelemetry.io/otel/sdk v1.30.0\n\tgo.opentelemetry.io/otel/trace v1.30.0\n\tgolang.org/x/crypto v0.36.0\n\tgolang.org/x/net v0.37.0\n\tgolang.org/x/sync v0.12.0\n\tgolang.org/x/term v0.30.0\n\tgolang.org/x/text v0.23.0\n\tgoogle.golang.org/grpc v1.66.1\n\tgoogle.golang.org/protobuf v1.34.2\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/aws/aws-sdk-go-v2/aws/protocol/eventstream v1.6.6 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.17.41 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.16.17 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.3.21 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.6.21 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.8.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/v4a v1.3.21 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/accept-encoding v1.12.0 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/checksum v1.4.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.12.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/s3shared v1.18.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.24.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.28.2 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.32.2 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/dgryski/go-rendezvous v0.0.0-20200823014737-9f7001d12a5f // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/fsnotify/fsnotify v1.6.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/grpc-ecosystem/go-grpc-middleware/v2 v2.1.0 // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.22.0 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect\n\tgithub.com/pelletier/go-toml v1.9.5 // indirect\n\tgithub.com/poy/onpar v1.1.2 // indirect\n\tgithub.com/prometheus/common v0.42.0 // indirect\n\tgithub.com/prometheus/procfs v0.9.0 // indirect\n\tgithub.com/redis/go-redis/extra/rediscmd/v9 v9.5.3 // indirect\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.30.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.30.0 // indirect\n\tgo.opentelemetry.io/proto/otlp v1.3.1 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/sys v0.31.0 // indirect\n\tgolang.org/x/time v0.10.0\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240903143218-8af14fe29dc1 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240903143218-8af14fe29dc1 // indirect\n\tgopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 // indirect\n\tk8s.io/klog/v2 v2.100.1 // indirect\n)\n\n// Versions of go-sql-driver/mysql >1.5.0 introduce performance regressions for\n// us, so we exclude them.\n\n// This version is required by parts of the honeycombio/beeline-go package\nexclude github.com/go-sql-driver/mysql v1.6.0\n\n// This version is required by borp\nexclude github.com/go-sql-driver/mysql v1.7.1\n"
        },
        "database": "MySQL",
        "build_system": "go mod",
        "config_files": {
            "docker-compose.yml": "services:\n  boulder:\n    # The `letsencrypt/boulder-tools:latest` tag is automatically built in local\n    # dev environments. In CI a specific BOULDER_TOOLS_TAG is passed, and it is\n    # pulled with `docker compose pull`.\n    image: &boulder_tools_image letsencrypt/boulder-tools:${BOULDER_TOOLS_TAG:-latest}\n    build:\n      context: test/boulder-tools/\n      # Should match one of the GO_CI_VERSIONS in test/boulder-tools/tag_and_upload.sh.\n      args:\n        GO_VERSION: 1.24.1\n    environment:\n      # To solve HTTP-01 and TLS-ALPN-01 challenges, change the IP in FAKE_DNS\n      # to the IP address where your ACME client's solver is listening.\n      # FAKE_DNS: 172.17.0.1\n      FAKE_DNS: 10.77.77.77\n      BOULDER_CONFIG_DIR: test/config\n      GOCACHE: /boulder/.gocache/go-build\n      GOFLAGS: -mod=vendor\n    volumes:\n      - .:/boulder:cached\n      - ./.gocache:/root/.cache/go-build:cached\n      - ./test/certs/.softhsm-tokens/:/var/lib/softhsm/tokens/:cached\n    networks:\n      bouldernet:\n        ipv4_address: 10.77.77.77\n      integrationtestnet:\n        ipv4_address: 10.88.88.88\n      redisnet:\n        ipv4_address: 10.33.33.33\n      consulnet:\n        ipv4_address: 10.55.55.55\n    # Use consul as a backup to Docker's embedded DNS server. If there's a name\n    # Docker's DNS server doesn't know about, it will forward the query to this\n    # IP (running consul).\n    # (https://docs.docker.com/config/containers/container-networking/#dns-services).\n    # This is used to look up service names via A records (like ra.service.consul) that\n    # are configured via the ServerAddress field of cmd.GRPCClientConfig.\n    # TODO: Remove this when ServerAddress is deprecated in favor of SRV records\n    # and DNSAuthority.\n    dns: 10.55.55.10\n    extra_hosts:\n      # Allow the boulder container to be reached as \"ca.example.org\", so that\n      # we can put that name inside our integration test certs (e.g. as a crl\n      # url) and have it look like a publicly-accessible name.\n      - \"ca.example.org:10.77.77.77\"\n    ports:\n      - 4001:4001 # ACMEv2\n      - 4002:4002 # OCSP\n      - 4003:4003 # SFE\n    depends_on:\n      - bmysql\n      - bproxysql\n      - bredis_1\n      - bredis_2\n      - bredis_3\n      - bredis_4\n      - bconsul\n      - bjaeger\n      - bpkilint\n    entrypoint: test/entrypoint.sh\n    working_dir: &boulder_working_dir /boulder\n\n  bsetup:\n    image: *boulder_tools_image\n    volumes:\n      - .:/boulder:cached\n      - ./.gocache:/root/.cache/go-build:cached\n      - ./test/certs/.softhsm-tokens/:/var/lib/softhsm/tokens/:cached\n    entrypoint: test/certs/generate.sh\n    working_dir: *boulder_working_dir\n    profiles:\n      # Adding a profile to this container means that it won't be started by a\n      # normal \"docker compose up/run boulder\", only when specifically invoked\n      # with a \"docker compose up bsetup\".\n      - setup\n\n  bmysql:\n    image: mariadb:10.5\n    networks:\n      bouldernet:\n        aliases:\n          - boulder-mysql\n    environment:\n      MYSQL_ALLOW_EMPTY_PASSWORD: \"yes\"\n    # Send slow queries to a table so we can check for them in the\n    # integration tests. For now we ignore queries not using indexes,\n    # because that seems to trigger based on the optimizer's choice to not\n    # use an index for certain queries, particularly when tables are still\n    # small.\n    command: mysqld --bind-address=0.0.0.0 --slow-query-log --log-output=TABLE --log-queries-not-using-indexes=ON\n    logging:\n      driver: none\n  bproxysql:\n    image: proxysql/proxysql:2.5.4\n    # The --initial flag force resets the ProxySQL database on startup. By\n    # default, ProxySQL ignores new configuration if the database already\n    # exists. Without this flag, new configuration wouldn't be applied until you\n    # ran `docker compose down`.\n    entrypoint: proxysql -f --idle-threads -c /test/proxysql/proxysql.cnf --initial\n    volumes:\n      - ./test/:/test/:cached\n    depends_on:\n      - bmysql\n    networks:\n      bouldernet:\n        aliases:\n          - boulder-proxysql\n\n  bredis_1:\n    image: redis:6.2.7\n    volumes:\n      - ./test/:/test/:cached\n    command: redis-server /test/redis-ocsp.config\n    networks:\n      redisnet:\n        ipv4_address: 10.33.33.2\n\n  bredis_2:\n    image: redis:6.2.7\n    volumes:\n      - ./test/:/test/:cached\n    command: redis-server /test/redis-ocsp.config\n    networks:\n      redisnet:\n        ipv4_address: 10.33.33.3\n\n  bredis_3:\n    image: redis:6.2.7\n    volumes:\n      - ./test/:/test/:cached\n    command: redis-server /test/redis-ratelimits.config\n    networks:\n      redisnet:\n        ipv4_address: 10.33.33.4\n\n  bredis_4:\n    image: redis:6.2.7\n    volumes:\n      - ./test/:/test/:cached\n    command: redis-server /test/redis-ratelimits.config\n    networks:\n      redisnet:\n        ipv4_address: 10.33.33.5\n\n  bconsul:\n    image: hashicorp/consul:1.15.4\n    volumes:\n     - ./test/:/test/:cached\n    networks:\n      consulnet:\n        ipv4_address: 10.55.55.10\n      bouldernet:\n        ipv4_address: 10.77.77.10\n    command: \"consul agent -dev -config-format=hcl -config-file=/test/consul/config.hcl\"\n\n  bjaeger:\n    image: jaegertracing/all-in-one:1.50\n    networks:\n      bouldernet:\n        ipv4_address: 10.77.77.17\n\n  bpkilint:\n    image: ghcr.io/digicert/pkilint:v0.10.1\n    networks:\n      bouldernet:\n        ipv4_address: 10.77.77.9\n    command: \"gunicorn -w 8 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:80 pkilint.rest:app\"\n\nnetworks:\n  # This network is primarily used for boulder services. It is also used by\n  # challtestsrv, which is used in the integration tests.\n  bouldernet:\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.77.77.0/24\n\n  # This network is used for two things in the integration tests:\n  #  - challtestsrv binds to 10.88.88.88:443 for its tls-alpn-01 challenge\n  #    responder, to avoid interfering with the HTTPS port used for testing\n  #    HTTP->HTTPS redirects during http-01 challenges. Note: this could\n  #    probably be updated in the future so that challtestsrv can handle\n  #    both tls-alpn-01 and HTTPS on the same port.\n  #  - test/v2_integration.py has some test cases that start their own HTTP\n  #    server instead of relying on challtestsrv, because they want very\n  #    specific behavior. For these cases, v2_integration.py creates a Python\n  #    HTTP server and binds it to 10.88.88.88:80.\n  integrationtestnet:\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.88.88.0/24\n\n  redisnet:\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.33.33.0/24\n\n  consulnet:\n    driver: bridge\n    ipam:\n      driver: default\n      config:\n        - subnet: 10.55.55.0/24\n",
            "vendor/github.com/nxadm/tail/Dockerfile": "FROM golang\n\nRUN mkdir -p $GOPATH/src/github.com/nxadm/tail/\nADD . $GOPATH/src/github.com/nxadm/tail/\n\n# expecting to fetch dependencies successfully.\nRUN go get -v github.com/nxadm/tail\n\n# expecting to run the test successfully.\nRUN go test -v github.com/nxadm/tail\n\n# expecting to install successfully\nRUN go install -v github.com/nxadm/tail\nRUN go install -v github.com/nxadm/tail/cmd/gotail\n\nRUN $GOPATH/bin/gotail -h || true\n\nENV PATH $GOPATH/bin:$PATH\nCMD [\"gotail\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            "CONTRIBUTING.md",
            "Dockerfile",
            "LICENSE",
            "Makefile",
            "PULL_REQUEST_TEMPLATE.md",
            "README.md",
            "SECURITY.md",
            "azure-pipelines.yml",
            "benchmark.sh",
            "doc.go",
            "example-crlf.toml",
            "example.toml",
            "fuzz.go",
            "fuzz.sh",
            "keysparsing.go",
            "lexer.go",
            "localtime.go",
            "marshal.go",
            "marshal_OrderPreserve_test.toml",
            "marshal_test.toml",
            "parser.go",
            "position.go",
            "token.go",
            "toml.go",
            "tomlpub.go",
            "tomltree_create.go",
            "tomltree_write.go",
            "tomltree_writepub.go"
        ],
        "folders": []
    }
}