{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  ~  Created under not commercial project \"Make it fine\"\n  ~\n  ~  Copyright 2017-2021\n  ~  @author stingion\n  -->\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns=\"http://maven.apache.org/POM/4.0.0\"\n        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <parent>\n        <groupId>com.stingion</groupId>\n        <artifactId>makeitfine</artifactId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>intro-service</artifactId>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-mongodb</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>de.flapdoodle.embed</groupId>\n            <artifactId>de.flapdoodle.embed.mongo</artifactId>\n            <version>2.2.0</version>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <addResources>false</addResources>\n                    <jvmArguments>\n                        ${jvmargsIntroService}\n                    </jvmArguments>\n                    <profiles>\n                        <profile>dev</profile>\n                    </profiles>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>com.spotify</groupId>\n                <artifactId>dockerfile-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>build</goal>\n                        </goals>\n                        <id>default</id>\n                        <phase>install</phase>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>"
        },
        "database": "MongoDB",
        "build_system": "Maven",
        "config_files": {
            ".env": "## Elastic Stack\n#version\nESV=7.2.0\n\nmongo_root_user=root\nmongo_root_pass=rootpass\n\nrabbitmq_user=guest\nrabbitmq_pass=guest\n\nredis_pass=redispass",
            "docker-compose.yml": "## Todo: Info for docker-compose console commands:\n# todo: start: dcu; status: dcp; stop: dcdw;\n# todo: Build for docker: mci -Pdocker\n\n#todo: Build locally: $> wd && mcv && c mainside/ && m spring-boot:run\n#todo: Build locally debug: $> wd && mcv && c mainside/ && m spring-boot:run -Pdebug\n#todo: Build docker: $> wd && mci -Pdocker && dcu\n\n#todo: Info for Elastic Stack:\n#todo:Info: elastic, filebeat, logstash folders should be writeable (chmod 777 -R ..)\n#todo:Info: filebeat.docker.yml >>> https://github.com/primait/docker-filebeat/issues/13 >>>\n# (sudo chown root filebeat/filebeat.docker.yml)\n# (sudo chmod 600 filebeat/filebeat.docker.yml)\n\n#todo: run $>./run/elastic/elastic.sh to up Elastic Stack\nversion: '3.7'\n\nservices:\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:${ESV}\n    container_name: mif_elasticsearch\n    ports:\n      - \"10200:9200\"\n    environment:\n      - \"discovery.type=single-node\"\n    volumes:\n      - ./elasticstack/elasticsearch/data:/usr/share/elasticsearch/data:rw # Persistence data\n\n  logstash:\n    image: docker.elastic.co/logstash/logstash:${ESV}\n    container_name: mif_logstash\n    ports:\n      - \"25826:25826\"\n      - \"5044:5044\"\n    volumes:\n      - ./elasticstack/logstash/pipeline:/usr/share/logstash/pipeline:ro # Pipeline configuration\n    restart: on-failure\n    depends_on:\n      - elasticsearch\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:${ESV}\n    container_name: mif_kibana\n    ports:\n      - \"5601:5601\"\n    restart: on-failure\n    depends_on:\n      - elasticsearch\n\n  filebeat:\n    image: docker.elastic.co/beats/filebeat:${ESV}\n    container_name: mif_filebeat\n    volumes:\n      - ./elasticstack/filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs\n      - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers\n      - ./elasticstack/filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data\n    user: root                                                             # Allow access to log files and docker.sock\n    restart: on-failure\n    depends_on:\n      - logstash\n\n  mysql:\n    image: mysql:5.7.22\n    container_name: mif_mysql\n    restart: on-failure\n    ports:\n      - 3311:3306\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassdocker\n      MYSQL_DATABASE: makeitfinemysqldocker\n      MYSQL_USER: makeitfineuser\n      MYSQL_PASSWORD: makeitfinepass\n\n  flyway:\n    depends_on:\n      - mysql\n    image: flyway/flyway:6.1.3\n    container_name: mif_flyway\n    command: -url=jdbc:mysql://mysql/makeitfinemysqldocker -user=makeitfineuser -password=makeitfinepass -connectRetries=60 migrate\n    volumes:\n      - ./mainside/src/main/resources/db/migration/mysql:/flyway/sql\n\n  mongo:\n    image: mongo:4.2.2\n    container_name: mif_mongo\n    restart: always\n    ports:\n      - 27117:27017\n    volumes:\n      - ./intro-service/src/main/resources/db/migration/mongo/init/:/docker-entrypoint-initdb.d:ro\n    environment:\n      MONGO_INITDB_DATABASE: admin\n      MONGO_INITDB_ROOT_USERNAME: ${mongo_root_user}\n      MONGO_INITDB_ROOT_PASSWORD: ${mongo_root_pass}\n\n  mongo-express:\n    image: mongo-express:0.49.0\n    container_name: mif_mongo-express\n    restart: always\n    ports:\n      - 8101:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: ${mongo_root_user}\n      ME_CONFIG_MONGODB_ADMINPASSWORD: ${mongo_root_pass}\n\n  rabbitmq:\n    image: rabbitmq:3.8.2-management\n    container_name: mif_rabbitmq\n    restart: always\n    ports:\n      - 5772:5672\n      - 15772:15672\n    environment:\n      RABBITMQ_DEFAULT_USER: ${rabbitmq_user}\n      RABBITMQ_DEFAULT_PASS: ${rabbitmq_pass}\n\n  redis:\n    image: bitnami/redis:5.0.7\n    container_name: mif_redis\n    restart: always\n    ports:\n      - 6479:6379\n    environment:\n      REDIS_PASSWORD: ${redis_pass}\n    command: /run.sh --maxmemory 256mb\n\n  zookeeper:\n    image: bitnami/zookeeper:3.6.1\n    container_name: mif_zookeeper\n    ports:\n      - 2281:2182\n    environment:\n      - ALLOW_ANONYMOUS_LOGIN=yes\n\n  kafka-broker1:\n    depends_on:\n      - zookeeper\n    image: bitnami/kafka:2.6.0\n    container_name: mif_kafka-broker1\n    ports:\n      - 9192:9092\n    environment:\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false\n\n  kafka-broker2:\n    depends_on:\n      - zookeeper\n    image: bitnami/kafka:2.6.0\n    container_name: mif_kafka-broker2\n    ports:\n      - 9193:9092\n    environment:\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false\n\n  kafka-broker3:\n    depends_on:\n      - zookeeper\n    image: bitnami/kafka:2.6.0\n    container_name: mif_kafka-broker3\n    ports:\n      - 9194:9092\n    environment:\n      - ALLOW_PLAINTEXT_LISTENER=yes\n      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false\n\n  kafka-tool:\n    depends_on:\n      - kafka-broker1\n      - kafka-broker2\n      - kafka-broker3\n    image: obsidiandynamics/kafdrop:3.27.0\n    container_name: mif_kafka-tool\n    ports:\n      - 9100:9000\n    environment:\n      - KAFKA_BROKERCONNECT=kafka-broker1:9092,kafka-broker2:9092\n\n  mainside:\n    depends_on:\n      - flyway\n    image: koresmosto/mainside\n    container_name: mif_mainside\n    ports:\n      - 8085:8080\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n\n  intro-service:\n    depends_on:\n      - mongo\n    image: koresmosto/intro-service\n    container_name: mif_intro-service\n    ports:\n      - 8086:8081\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n\n  mq-publish:\n    depends_on:\n      - rabbitmq\n    image: koresmosto/mq-publish\n    container_name: mif_mq-publish\n    ports:\n      - 8087:8082\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n\n  mq-consume:\n    depends_on:\n      - rabbitmq\n    image: koresmosto/mq-consume\n    container_name: mif_mq-consume\n    ports:\n      - 8088:8083\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n\n  cache-service:\n    depends_on:\n      - redis\n    image: koresmosto/cache-service\n    container_name: mif_cache-service\n    ports:\n      - 8089:8084\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n\n  kafka:\n    depends_on:\n      - kafka-broker1\n      - kafka-broker2\n      - kafka-broker3\n    image: koresmosto/kafka\n    container_name: mif_kafka\n    ports:\n      - 8090:8085\n      - 5010:5010\n    labels:\n      collect_logs_with_filebeat: \"true\"\n      decode_log_event_to_json_object: \"true\"\n",
            "intro-service/Dockerfile": "###\n#  Created under not commercial project \"Make it fine\"\n#\n#  Copyright 2017-2021\n###\n\nFROM openjdk:11-jre\nMAINTAINER Kores Mosto <koresmosto@gmail.com>\n\nVOLUME /tmp\n\nCOPY target/intro-service-1.0-SNAPSHOT.jar /app.jar\n\nCMD [\"java\", \"-jar\", \"-Dspring.profiles.active=docker\", \"/app.jar\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}