{
    "source_code_info": {
        "language": "Go",
        "framework": "Go",
        "dependencies": {
            "go.mod": "module github.com/mozilla-services/autograph-edge\n\nrequire (\n\tgithub.com/golang/mock v1.6.0\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/sirupsen/logrus v1.9.3\n\tgo.mozilla.org/hawk v0.0.0-20160602144717-b9704677ebef\n\tgo.mozilla.org/mozlogrus v2.0.0+incompatible\n\tgo.mozilla.org/sops v0.0.0-20180531162322-5e8d1390eb4c\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tcloud.google.com/go/compute v1.19.1 // indirect\n\tcloud.google.com/go/compute/metadata v0.2.3 // indirect\n\tgithub.com/aws/aws-sdk-go v1.37.25 // indirect\n\tgithub.com/fatih/color v1.10.0 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/google/uuid v1.3.0 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.2.3 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.7.1 // indirect\n\tgithub.com/goware/prefixer v0.0.0-20160118172347-395022866408 // indirect\n\tgithub.com/howeyc/gopass v0.0.0-20170109162249-bf9dde6d0d2c // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/lib/pq v0.0.0-20180523175426-90697d60dd84 // indirect\n\tgithub.com/mattn/go-colorable v0.1.8 // indirect\n\tgithub.com/mattn/go-isatty v0.0.12 // indirect\n\tgithub.com/mitchellh/go-wordwrap v0.0.0-20150314170334-ad45545899c7 // indirect\n\tgithub.com/mozilla-services/yaml v0.0.0-20201007153854-c369669a6625 // indirect\n\tgo.mozilla.org/gopgagent v0.0.0-20170926210634-4d7ea76ff71a // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgolang.org/x/crypto v0.21.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/oauth2 v0.7.0 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgolang.org/x/term v0.18.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n\tgoogle.golang.org/api v0.114.0 // indirect\n\tgoogle.golang.org/appengine v1.6.7 // indirect\n\tgoogle.golang.org/genproto v0.0.0-20230410155749-daa745c078e1 // indirect\n\tgoogle.golang.org/grpc v1.56.3 // indirect\n\tgoogle.golang.org/protobuf v1.33.0 // indirect\n)\n\ngo 1.22.5\n"
        },
        "database": "PostgreSQL",
        "build_system": "go mod",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\nservices:\n  app:\n    image: mozilla/autograph\n    ports:\n      - \"8000:8000\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/__heartbeat__\"]\n      interval: 60s\n      timeout: 10s\n      retries: 3\n\n  edge:\n    build:\n      context: .\n    depends_on:\n      app:\n        condition: service_healthy\n    ports:\n      - \"8080:8080\"\n    command:\n      [\n        \"/usr/local/bin/autograph-edge\",\n        \"-u\",\n        \"http://app:8000/\",\n      ]\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/__heartbeat__\"]\n      interval: 60s\n      timeout: 10s\n      retries: 3\n\n  test:\n    build:\n      context: ./integration_test\n    depends_on:\n      edge:\n        condition: service_healthy\n",
            "Dockerfile": "ARG GO_VERSION=1.22\n\n#------------------------------------------------------------------------------\n# Base Debian Image\n#------------------------------------------------------------------------------\nFROM debian:bookworm AS base\nARG GO_VERSION\n\nENV DEBIAN_FRONTEND='noninteractive' \\\n    PATH=\"${PATH}:/usr/lib/go-${GO_VERSION}/bin:/go/bin\" \\\n    GOPATH='/go'\n\n## Enable bookworm-backports\nRUN echo \"deb http://deb.debian.org/debian/ bookworm-backports main\" > /etc/apt/sources.list.d/bookworm-backports.list\nRUN echo \"deb-src http://deb.debian.org/debian/ bookworm-backports main\" >> /etc/apt/sources.list.d/bookworm-backports.list\n\nRUN apt-get update && \\\n    apt-get -y upgrade && \\\n    apt-get -y install --no-install-recommends \\\n        clang \\\n        gcc \\\n        libltdl-dev \\\n        git \\\n        golang-${GO_VERSION} \\\n        curl \\\n        ca-certificates && \\\n    # Cleanup inline with installation to avoid this layer being bloated with\n    # deb packages and other cached data.\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n#------------------------------------------------------------------------------\n# Build Stage\n#------------------------------------------------------------------------------\nFROM base AS builder\nENV GO111MODULE=on\nENV CGO_ENABLED=1\n\nADD . /app/src\n\nRUN cd /app/src && go install .\n\n#------------------------------------------------------------------------------\n# Deployment Stage\n#------------------------------------------------------------------------------\nFROM base\nEXPOSE 8080\n\n# Copy compiled appliation from the builder.\nRUN mkdir /app\nADD autograph-edge.yaml /app\nADD version.json /app\nCOPY --from=builder /go/bin/autograph-edge /usr/local/bin/autograph-edge\n\n# Setup the worker and entrypoint.\nRUN useradd --uid 10001 --home-dir /app --shell /sbin/nologin app\nUSER app\nWORKDIR /app\nCMD /usr/local/bin/autograph-edge\n",
            ".circleci/config.yml": "# These environment variables must be set in CircleCI UI\n#\n# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>\n# DOCKER_USER\n# DOCKER_PASS\n#\nversion: 2.1\njobs:\n  unit-test:\n    docker:\n        - image: cimg/go:1.22\n    steps:\n      - checkout\n\n      - run:\n          name: Run unit tests\n          command: |\n              sudo apt update && sudo apt -y install libltdl-dev\n              PATH=/usr/local/go/bin:$PATH make test\n\n  test:\n    docker:\n        - image: cimg/go:1.22\n    environment:\n      # docker-compose will default to the project directory which\n      # defaults to 'project' on CCI and conflicts with other CCI\n      # builds for network and container names\n      COMPOSE_PROJECT_NAME: autograph_edge\n    steps:\n      - checkout\n      - setup_remote_docker\n\n      - run:\n          name: Create a version.json\n          command: ./version.sh | tee version.json\n\n      - run:\n          name: Install Autograph\n          command: |\n              docker pull mozilla/autograph\n\n      - run:\n          name: Build Autograph Edge Images\n          command: |\n              docker-compose build\n\n      - run:\n          name: Sign test APKs and XPIs and verify the APK\n          command: |\n              docker-compose run test\n\n      - run:\n          name: stop and clean up docker-compose containers and images\n          command: |\n              docker-compose stop && docker-compose rm -f\n\n  build:\n    docker:\n        - image: cimg/go:1.22\n    steps:\n      - checkout\n      - setup_remote_docker\n\n      - run:\n          name: Create a version.json\n          command: ./version.sh | tee version.json\n\n      - run:\n          name: Build Docker image\n          command: docker build -t app:build .\n\n      # save the built docker container into CircleCI's cache. This is\n      # required since Workflows do not have the same remote docker instance.\n      - run:\n          name: docker save app:build\n          command: mkdir -p docker-cache; docker save -o docker-cache/docker.tar \"app:build\"\n      - save_cache:\n          key: v1-{{ .Branch }}-{{epoch}}\n          paths:\n            - docker-cache/docker.tar\n\nworkflows:\n  version: 2\n  test-verify-build-deploy:\n    jobs:\n      - unit-test:\n          filters:\n            tags:\n              only: /.*/\n\n      - test:\n          filters:\n            tags:\n              only: /.*/\n\n      - build:\n          requires:\n            - test\n          filters:\n            tags:\n              only: /.*/\n\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "sign_test_apk.sh",
            "sign_test_xpi.sh",
            "test.apk",
            "test.xpi",
            "verify_apk.sh"
        ],
        "folders": []
    }
}