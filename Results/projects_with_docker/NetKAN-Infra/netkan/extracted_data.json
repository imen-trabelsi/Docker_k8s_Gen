{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "pyproject.toml": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"netkan\"\nversion = \"1.0\"\ndependencies = [\n    \"boto3\",\n    \"click\",\n    \"gitpython\",\n    \"pynamodb\",\n    # 2019-11-01 capping to 2.8.0 - https://github.com/boto/botocore/commit/e87e7a745fd972815b235a9ee685232745aa94f9\n    \"python-dateutil>=2.1,<2.8.1\",\n    \"requests\",\n    \"flask\",\n    \"jinja2\",\n    \"internetarchive!=3.0.1\",\n    \"gunicorn>=19.9,!=20.0.0\",\n    \"discord.py>=1.6.0,<=1.7.3\",\n    \"PyGithub\",\n    \"ruamel.yaml\",\n]\nrequires-python = \">=3.8\"\nauthors = [{ name = \"Leon Wright\", email = \"techman83@gmail.com\" }]\ndescription = \"NetKAN Infra\"\n\n[project.urls]\nRepository = \"https://github.com/KSP-CKAN/NetKAN-infra/\"\nIssues = \"https://github.com/KSP-CKAN/NetKAN-infra/issues\"\n\n[project.scripts]\nnetkan = \"netkan.cli:netkan\"\n\n[project.optional-dependencies]\ndevelopment = [\n    \"ptvsd\",\n    \"autopep8\",\n    \"boto3-stubs[essential,cloudwatch]\",\n    \"coverage\",\n    \"troposphere\",\n    \"pytest\",\n    \"mypy\",\n    \"pytest-mypy\",\n    \"pylint\",\n    \"pytest-pylint\",\n    \"types-python-dateutil\",\n    \"types-click\",\n    \"types-requests\",\n    \"types-Flask\",\n    \"types-Jinja2\",\n]\ntest = [\n    \"boto3-stubs[essential,cloudwatch]\",\n    \"coverage\",\n    \"pytest\",\n    \"mypy\",\n    \"pytest-mypy\",\n    \"pylint\",\n    \"pytest-pylint\",\n    \"types-python-dateutil\",\n    \"types-click\",\n    \"types-requests\",\n    \"types-Flask\",\n    \"types-Jinja2\",\n]\n\n[tool.coverage.run]\nbranch = true\nomit = [\"tests/*\"]\n\n[tool.coverage.report]\nexclude_lines = [\"if TYPE_CHECKING:\", \"    pass\"]\n\n[tool.pytest.ini_options]\npython_files = \"tests/__init__.py\"\naddopts = \"-p no:cacheprovider --mypy --pylint\"\nfilterwarnings = [\"ignore\", \"default:::netkan.*\", \"default:::tests.*\"]\n\n[tool.mypy]\nignore_missing_imports = true\nwarn_redundant_casts = true\nshow_error_context = true\nshow_column_numbers = true\nshow_error_codes = true\n\n[[tool.mypy.overrides]]\nmodule = \"netkan.*\"\ncheck_untyped_defs = true\ndisallow_incomplete_defs = true\ndisallow_untyped_defs = true\ndisallow_any_generics = true\nwarn_unreachable = true\nstrict_equality = true\n\n[tool.pylint.\"MESSAGES CONTROL\"]\ndisable = \"\"\"\n    line-too-long,\n    duplicate-code,\n    missing-module-docstring,\n    missing-class-docstring,\n    missing-function-docstring,\n    too-few-public-methods,\n    too-many-instance-attributes,\n    too-many-statements,\n    too-many-return-statements,\n    too-many-branches,\n    too-many-arguments,\n    too-many-positional-arguments,\n    consider-using-with,\n\"\"\"\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            "docker-compose.yml": "volumes:\n  certbot:\n\nservices:\n  indexer:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      SSH_KEY: ${CKAN_NETKAN_SSHKEY}\n      CKANMETA_REMOTES: ${CKAN_METADATA_PATHS}\n      CKAN_USER: ${CKAN_METADATA_USER}\n      CKAN_REPOS: ${CKAN_METADATA_REPOS}\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n      GH_Token: ${CKAN_GH_Token}\n      SQS_QUEUE: OutboundDev.fifo\n      SQS_TIMEOUT: 30\n      STATUS_DB: DevMultiKANStatus\n      DISCORD_WEBHOOK_ID: ${DISCORD_WEBHOOK_ID}\n      DISCORD_WEBHOOK_TOKEN: ${DISCORD_WEBHOOK_TOKEN}\n    volumes:\n      - ./netkan:/home/netkan/netkan\n    command: indexer\n  scheduler:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      GH_Token: ${CKAN_GH_Token}\n      NETKAN_REMOTES: ${NETKAN_METADATA_PATHS}\n      SSH_KEY: ${CKAN_NETKAN_SSHKEY}\n      CKANMETA_REMOTES: ${CKAN_METADATA_PATHS}\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n      INFLATION_QUEUES: ksp=InboundDevKsp.fifo ksp2=InboundDevKsp2.fifo\n      MAX_QUEUED: 1\n      DISCORD_WEBHOOK_ID: ${DISCORD_WEBHOOK_ID}\n      DISCORD_WEBHOOK_TOKEN: ${DISCORD_WEBHOOK_TOKEN}\n    volumes:\n      - ./netkan:/home/netkan/netkan\n    command: scheduler --dev\n  inflator:\n    image: kspckan/inflator\n    environment:\n      QUEUES: InboundDevKsp.fifo,OutboundDev.fifo\n      GAME: KSP\n      GH_Token: ${CKAN_GH_Token}\n      AWS_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n    volumes:\n      # Docker will create this with root perms if\n      # it's not created first. First user on most\n      # distros is 1000:1000, which will match the\n      # user in the container.\n      - ${HOME}/ckan_cache:/home/netkan/ckan_cache\n  inflator-ksp2:\n    image: kspckan/inflator\n    environment:\n      QUEUES: InboundDevKsp2.fifo,OutboundDev.fifo\n      GAME: KSP2\n      GH_Token: ${CKAN_GH_Token}\n      AWS_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n    volumes:\n      # Docker will create this with root perms if\n      # it's not created first. First user on most\n      # distros is 1000:1000, which will match the\n      # user in the container.\n      - ${HOME}/ckan_cache:/home/netkan/ckan_cache\n  webhooks:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      XKAN_GHSECRET: test\n      SSH_KEY: ${CKAN_NETKAN_SSHKEY}\n      NETKAN_REMOTES: ${NETKAN_METADATA_PATHS}\n      INFLATION_SQS_QUEUES: ksp=InboundDevKsp.fifo ksp2=InboundDevKsp2.fifo\n      MIRROR_SQS_QUEUE: MirroringDev.fifo\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n      DISCORD_WEBHOOK_ID: ${DISCORD_WEBHOOK_ID}\n      DISCORD_WEBHOOK_TOKEN: ${DISCORD_WEBHOOK_TOKEN}\n      CKANMETA_REMOTES: ${CKAN_METADATA_PATHS}\n      CKAN_USER: ${CKAN_METADATA_USER}\n      CKAN_REPOS: ${CKAN_METADATA_REPOS}\n    entrypoint: .local/bin/gunicorn\n    command: -b 0.0.0.0:5000 --access-logfile - \"netkan.webhooks:create_app()\"\n  adder:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      SQS_QUEUE: AddingDev.info\n      NETKAN_REMOTES: ${NETKAN_METADATA_PATHS}\n      NETKAN_USER: ${CKAN_NETKAN_USER}\n      NETKAN_REPO:  ${CKAN_NETKAN_REPO}\n    command: spacedock-adder\n  mirrorer:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      SQS_QUEUE: MirroringDev.fifo\n      SQS_TIMEOUT: 30\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n      CKANMETA_REMOTES: ${CKAN_METADATA_PATHS}\n      IA_access: test\n      IA_secret: test\n      IA_collection: test\n    volumes:\n      - ${HOME}/ckan_cache:/home/netkan/ckan_cache\n    command: mirrorer\n  status:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      STATUS_DB: DevMultiKANStatus\n      STATUS_BUCKET: ckan-test-status\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n      STATUS_INTERVAL: 0\n      DISCORD_WEBHOOK_ID: ${DISCORD_WEBHOOK_ID}\n      DISCORD_WEBHOOK_TOKEN: ${DISCORD_WEBHOOK_TOKEN}\n    volumes:\n      - ./netkan:/home/netkan/netkan\n    command: export-status-s3\n  certbot:\n    image: certbot/dns-route53\n    command: certonly -n --agree-tos --email ${CKAN_EMAIL} --dns-route53 -d local.test.ksp-ckan.space --test-cert\n    environment:\n      AWS_DEFAULT_REGION: ${CKAN_AWS_DEFAULT_REGION}\n      AWS_SECRET_ACCESS_KEY: ${CKAN_AWS_SECRET_ACCESS_KEY}\n      AWS_ACCESS_KEY_ID: ${CKAN_AWS_ACCESS_KEY_ID}\n    volumes:\n      - certbot:/etc/letsencrypt\n  nginx:\n    build:\n      context: nginx/.\n    ports:\n      - \"8080:80\"\n      - \"8443:443\"\n    volumes:\n      - certbot:/etc/letsencrypt\n      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf\n  clean:\n    build:\n      context: netkan/.\n      target: dev\n    volumes:\n      - ./netkan:/home/netkan/netkan\n      - ${HOME}/ckan_cache:/home/netkan/ckan_cache\n    command: clean-cache --days 1\n  counts:\n    build:\n      context: netkan/.\n      target: dev\n    environment:\n      SSH_KEY: ${CKAN_NETKAN_SSHKEY}\n      NETKAN_REMOTES: ${NETKAN_METADATA_PATHS}\n      CKANMETA_REMOTES: ${CKAN_METADATA_PATHS}\n      GH_Token: ${CKAN_GH_Token}\n      DISCORD_WEBHOOK_ID: ${DISCORD_WEBHOOK_ID}\n      DISCORD_WEBHOOK_TOKEN: ${DISCORD_WEBHOOK_TOKEN}\n    volumes:\n      - ./netkan:/home/netkan/netkan\n    command: download-counter\n",
            "netkan/Dockerfile": "FROM ubuntu:24.04 AS ubuntu_with_python\n\n# Don't prompt for time zone\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install Git and Python\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    git libffi-dev openssh-client \\\n    python3 python-is-python3 ca-certificates curl && \\\n    apt-get clean && \\\n    curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \\\n    rm /usr/lib/python3.12/EXTERNALLY-MANAGED && \\\n    python3 get-pip.py --no-input && rm get-pip.py\nRUN groupmod -n 'netkan' 'ubuntu' && \\\n    usermod -l 'netkan' -d /home/netkan -m ubuntu\n\nFROM ubuntu_with_python AS base\nCOPY . /netkan\nWORKDIR /netkan\nRUN chown -R netkan:netkan /netkan\nUSER netkan\nRUN pip install --user . --no-warn-script-location\n\nFROM ubuntu_with_python AS production\nCOPY --from=base /home/netkan/.local /home/netkan/.local\nRUN chown -R netkan:netkan /home/netkan\nWORKDIR /home/netkan\nUSER netkan\nCOPY .gitconfig .\nENV PATH=\"$PATH:/home/netkan/.local/bin\"\nENV PYTHONPATH=/home/netkan/.local/lib/python3.12/site-packages\nRUN /home/netkan/.local/bin/netkan --help\nENTRYPOINT [\"/home/netkan/.local/bin/netkan\"]\nCMD [\"--help\"]\n\nFROM production AS test\nUSER root\nCOPY . /netkan\nRUN chown -R netkan:netkan /netkan\nUSER netkan\nWORKDIR /netkan\nRUN pip install --user .[test]\nRUN /home/netkan/.local/bin/pytest -v\n\nFROM production AS dev\nUSER root\nADD . /netkan\nRUN chown -R netkan:netkan /netkan\nCOPY run_dev.sh /usr/local/bin/\nUSER netkan\nRUN pip install --user /netkan/.[development]\nENTRYPOINT [\"/usr/local/bin/run_dev.sh\"]\n\nFROM production\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitconfig",
            "Dockerfile",
            "MANIFEST.in",
            "pyproject.toml",
            "run_dev.sh"
        ],
        "folders": [
            "netkan",
            "tests"
        ]
    }
}