{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "JavaScript",
        "dependencies": {
            "package.json": "{\n  \"name\": \"jx-docs\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Jenkins X Documentation\",\n  \"author\": \"budparr\",\n  \"license\": \"CC-BY-SA-4.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jenkins-x/jx-docs.git\"\n  },\n  \"dependencies\": {\n    \"@docsearch/js\": \"^3.0.0\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss-cli\": \"^10.1.0\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: \"2\"\nservices:\n  server:\n    image: klakegg/hugo:0.101.0-ext-alpine\n    command:\n      [\"server\", \"-s\", \"/src\", \"-D\", \"--bind\", \"0.0.0.0\", \"--ignoreCache\"]\n    volumes:\n      - .:/src\n    ports:\n      - \"1313:1313\"\n  spellchecker:\n    image: tmaier/markdown-spellcheck:latest\n    command: '--en-us --ignore-numbers --ignore-acronyms --report \"content/**/*.md\"'\n    volumes:\n      - .:/workdir\n  linkchecker:\n    image: chabad360/htmlproofer:latest\n    command: 'htmlproofer ./public --allow-hash-href --disable-external --check-html --checks-to-ignore ScriptCheck --empty-alt-ignore --file-ignore /.*apidocs.*/,/.*\\/zh.*/,/.*\\/es.*/,/.*\\/docs\\/reference\\/api.*/,/.*\\/docs\\/reference\\/config.*/,/.*\\/community\\/events.*/'\n    volumes:\n      - ./public:/public\n",
            "Dockerfile": "FROM abiosoft/caddy\nEXPOSE 2015\nWORKDIR /srv\nCOPY tmp-website .\n",
            "config.toml": "baseURL = \"/\"\ntitle = \"Jenkins X - Cloud Native CI/CD Built On Kubernetes\"\n\nenableRobotsTXT = true\n\nignorefiles = [ \"docs/labs/.*\" ]\n# getting an error on the contributors plugin\nignoreErrors = [\"error-remote-getjson\"]\n\n# Hugo allows theme composition (and inheritance). The precedence is from left to right.\ntheme = [\"github.com/google/docsy\", \"github.com/google/docsy/dependencies\"]\n\n# Setting this to false to keep builds from breaking: https://github.com/gohugoio/hugo/issues/6035\n# Will give values to .Lastmod etc.\nenableGitInfo = false\n\n###\n# Language configuration\n###\n\ncontentDir = \"content/en\"\ndefaultContentLanguage = \"en\"\ndefaultContentLanguageInSubdir = false\n\n# Useful when translating.\nenableMissingTranslationPlaceholders = true\n\n[languages]\n[languages.en]\n\ttitle = \"Jenkins X - Cloud Native CI/CD Built On Kubernetes\"\n\tdescription = \"Documentation, guides and support for Jenkins X\"\n\tlanguageName =\"English\"\n\t# Weight used for sorting.\n\tweight = 1\n[languages.zh]\n\tlanguageCode = \"zh-CN\"\n\tweight = 2\n\tlanguageName = \"\u4e2d\u6587\"\n\tcontentDir = \"content/zh\"\n[languages.es]\n\tlanguageCode = \"es-ES\"\n\tweight = 3\n\tlanguageName = \"Espa\u00f1ol\"\n\tcontentDir = \"content/es\"\n\ndisableKinds = [\"taxonomy\", \"taxonomyTerm\"]\n\n###\n# Configure how URLs look like per section.\n###\n[permalinks]\n\tblog = \"/:section/:year/:month/:day/:slug/\"\n\n###\n# Configuration for Goldmark markdown parser\n###\n[markup]\n  [markup.goldmark]\n    [markup.goldmark.renderer]\n      hardWraps = false\n      unsafe = true\n      xhtml = false\n    [markup.goldmark.parser]\n      attribute = true\n      autoHeadingID = true\n      autoHeadingIDType = \"github\"\n    [markup.goldmark.extensions]\n      definitionList = true\n      footnote = true\n      linkify = true\n      strikethrough = true\n      table = true\n      taskList = true\n      typographer = true\n  [markup.highlight]\n    codeFences = true\n    guessSyntax = false\n    hl_Lines = \"\"\n    lineNoStart = 1\n    lineNos = false\n    lineNumbersInTable = true\n    noClasses = true\n    style = \"monokai\"\n    tabWidth = 4\n\n###\n# Image processing configuration.\n###\n[imaging]\n\tresampleFilter = \"CatmullRom\"\n\tquality = 75\n\tanchor = \"smart\"\n\n###\n# Services\n###\n\n[services]\n\t[services.googleAnalytics]\n\t# Comment out the next line to disable GA tracking. Also disables the feature described in [params.ui.feedback].\n\t\tid = \"UA-4216293-7\"\n\n###\n# Everything below this are Site Params\n###\n\n[params]\n## Used for views in rendered HTML (i.e., rather than using the .Hugo variable)\nrelease = \"3.11.56\"\n\n## the jx-lens version\njx_lens_version = \"1.0.18\"\n\ncopyright = \"The Jenkins X Authors.\"\nprivacy_policy = \"https://policies.google.com/privacy\"\n\n# First one is picked as the Twitter card image if not set on page.\n# images = [\"images/project-illustration.png\"]\n\n# Menu title if your navbar has a versions selector to access old versions of your site.\n# This menu appears only if you have at least one [params.versions] set.\nversion_menu = \"Documentation\"\n\n# Repository configuration (URLs for in-page links to opening issues and suggesting changes)\ngithub_repo = \"https://github.com/jenkins-x/jx-docs\"\n# An optional link to a related project repo. For example, the sibling repository where your product code lives.\ngithub_project_repo = \"https://github.com/jenkins-x/jx\"\n\n# Specify a value here if your content directory is not in your repo's root directory\n# github_subdir = \"\"\n\n# Google Custom Search Engine ID. Remove or comment out to disable search.\ngcs_engine_id = \"011737558837375720776:fsdu1nryfng\"\n\n# Enable syntax highlighting and copy buttons on code blocks with Prism\nprism_syntax_highlighting = true\n\n# User interface configuration\n[params.ui]\n# Enable to show the side bar menu in its compact state.\nsidebar_menu_compact = true\n#  Set to true to disable breadcrumb navigation.\nbreadcrumb_disable = false\n#  Set to true to hide the sidebar search box (the top nav search box will still be displayed if search is enabled)\nsidebar_search_disable = true\n#  Set to false if you don't want to display a logo (/assets/icons/logo.svg) in the top nav bar\nnavbar_logo = true\n# Set to true to disable the About link in the site footer\nfooter_about_disable = false\n\n# Adds a H2 section titled \"Feedback\" to the bottom of each doc. The responses are sent to Google Analytics as events.\n# This feature depends on [services.googleAnalytics] and will be disabled if \"services.googleAnalytics.id\" is not set.\n# If you want this feature, but occasionally need to remove the \"Feedback\" section from a single page,\n# add \"hide_feedback: true\" to the page's front matter.\n[params.ui.feedback]\nenable = true\n# The responses that the user sees after clicking \"yes\" (the page was helpful) or \"no\" (the page was not helpful).\nyes = 'Glad to hear it! Please <a href=\"https://github.com/jenkins-x/jx-docs/issues/new\">tell us how we can improve</a>.'\nno = 'Sorry to hear that. Please <a href=\"https://github.com/jenkins-x/jx-docs/issues/new\">tell us how we can improve</a>.'\n\n[params.links]\n# End user relevant links. These will show up on left side of footer and in the community page if you have one.\n[[params.links.user]]\n\tname = \"Calendar\"\n\turl = \"/community/calendar/\"\n\ticon = \"fas fa-calendar-alt\"\n\tdesc = \"Google Calendar for Jenkins X\"\n[[params.links.user]]\n\tname = \"Youtube\"\n\turl = \"https://www.youtube.com/channel/UCN2kblPjXKMcjjVYmwvquvg\"\n\ticon = \"fab fa-youtube\"\n\tdesc = \"Subscribe to the youtube Channel\"\n[[params.links.user]]\n\tname = \"Github\"\n\turl = \"https://github.com/jenkins-x/jx\"\n\ticon = \"fab fa-github\"\n\tdesc = \"Development takes place here!\"\n[[params.links.user]]\n\tname = \"Contribute\"\n\turl = \"https://jenkins-x.io/community/documentation/\"\n\ticon = \"fas fa-edit\"\n\tdesc = \"Contribute to the Jenkins X website\"\n[[params.links.user]]\n\tname = \"User Slack Channel\"\n\turl = \"https://kubernetes.slack.com/messages/C9MBGQJRH\"\n\ticon = \"fab fa-slack\"\n\tdesc = \"Discussion and help from your fellow users\"\n\n# Developer relevant links. These will show up on right side of footer and in the community page if you have one.\n[[params.links.developer]]\n\tname = \"GitHub\"\n\turl = \"https://github.com/jenkins-x/jx\"\n\ticon = \"fab fa-github\"\n  desc = \"Development takes place here!\"\n[[params.links.developer]]\n\tname = \"Developer Slack Channel\"\n\turl = \"https://kubernetes.slack.com/messages/C9LTHT2BB\"\n\ticon = \"fab fa-slack\"\n  desc = \"Chat with other project developers\"\n\n# Versioning\n[[params.versions]]\nversion = \"v3.x (Current)\"\nurl = \"/v3/about\"\ndirpath = \"v3\"\n\n[[params.versions]]\nversion = \"v2.x (Unmaintained)\"\nurl = \"/docs\"\ndirpath = \"docs\"\n"
        },
        "static_files": {
            "static/browserconfig.xml": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<browserconfig><msapplication><tile><square70x70logo src=\"/tile70x70.png\"/><square150x150logo src=\"/tile150x150.png\"/><square310x310logo src=\"/tile310x310.png\"/><TileColor>#ffffff</TileColor></tile></msapplication></browserconfig>",
            "static/favicons/manifest.json": "{\n \"name\": \"App\",\n \"icons\": [\n  {\n   \"src\": \"\\/android-icon-36x36.png\",\n   \"sizes\": \"36x36\",\n   \"type\": \"image\\/png\",\n   \"density\": \"0.75\"\n  },\n  {\n   \"src\": \"\\/android-icon-48x48.png\",\n   \"sizes\": \"48x48\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-72x72.png\",\n   \"sizes\": \"72x72\",\n   \"type\": \"image\\/png\",\n   \"density\": \"1.5\"\n  },\n  {\n   \"src\": \"\\/android-icon-96x96.png\",\n   \"sizes\": \"96x96\",\n   \"type\": \"image\\/png\",\n   \"density\": \"2.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-144x144.png\",\n   \"sizes\": \"144x144\",\n   \"type\": \"image\\/png\",\n   \"density\": \"3.0\"\n  },\n  {\n   \"src\": \"\\/android-icon-192x192.png\",\n   \"sizes\": \"192x192\",\n   \"type\": \"image\\/png\",\n   \"density\": \"4.0\"\n  }\n ]\n}",
            "static/schemas/jx-requirements.json": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"$ref\": \"#/definitions/RequirementsConfig\",\n  \"definitions\": {\n    \"AutoUpdateConfig\": {\n      \"properties\": {\n        \"enabled\": {\n          \"type\": \"boolean\"\n        },\n        \"schedule\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"AzureConfig\": {\n      \"properties\": {\n        \"registrySubscription\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"BuildPackConfig\": {\n      \"properties\": {\n        \"buildPackLibrary\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/BuildPackLibrary\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"BuildPackLibrary\": {\n      \"properties\": {\n        \"gitRef\": {\n          \"type\": \"string\"\n        },\n        \"gitURL\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ClusterConfig\": {\n      \"properties\": {\n        \"azure\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/AzureConfig\"\n        },\n        \"chartRepository\": {\n          \"type\": \"string\"\n        },\n        \"clusterName\": {\n          \"type\": \"string\"\n        },\n        \"devEnvApprovers\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"dockerRegistryOrg\": {\n          \"type\": \"string\"\n        },\n        \"environmentGitOwner\": {\n          \"type\": \"string\"\n        },\n        \"environmentGitPublic\": {\n          \"type\": \"boolean\"\n        },\n        \"externalDNSSAName\": {\n          \"type\": \"string\"\n        },\n        \"gitKind\": {\n          \"type\": \"string\"\n        },\n        \"gitName\": {\n          \"type\": \"string\"\n        },\n        \"gitPublic\": {\n          \"type\": \"boolean\"\n        },\n        \"gitServer\": {\n          \"type\": \"string\"\n        },\n        \"gke\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/GKEConfig\"\n        },\n        \"helmMajorVersion\": {\n          \"type\": \"string\"\n        },\n        \"kanikoSAName\": {\n          \"type\": \"string\"\n        },\n        \"namespace\": {\n          \"type\": \"string\"\n        },\n        \"project\": {\n          \"type\": \"string\"\n        },\n        \"provider\": {\n          \"type\": \"string\"\n        },\n        \"region\": {\n          \"type\": \"string\"\n        },\n        \"registry\": {\n          \"type\": \"string\"\n        },\n        \"strictPermissions\": {\n          \"type\": \"boolean\"\n        },\n        \"vaultName\": {\n          \"type\": \"string\"\n        },\n        \"vaultSAName\": {\n          \"type\": \"string\"\n        },\n        \"zone\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"EnvironmentConfig\": {\n      \"properties\": {\n        \"gitKind\": {\n          \"type\": \"string\"\n        },\n        \"gitServer\": {\n          \"type\": \"string\"\n        },\n        \"ingress\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/IngressConfig\"\n        },\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"owner\": {\n          \"type\": \"string\"\n        },\n        \"promotionStrategy\": {\n          \"type\": \"string\"\n        },\n        \"remoteCluster\": {\n          \"type\": \"boolean\"\n        },\n        \"repository\": {\n          \"type\": \"string\"\n        },\n        \"urlTemplate\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"GKEConfig\": {\n      \"properties\": {\n        \"projectNumber\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"GithubAppConfig\": {\n      \"properties\": {\n        \"enabled\": {\n          \"type\": \"boolean\"\n        },\n        \"schedule\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"IngressConfig\": {\n      \"properties\": {\n        \"cloud_dns_secret_name\": {\n          \"type\": \"string\"\n        },\n        \"domain\": {\n          \"type\": \"string\"\n        },\n        \"domainIssuerURL\": {\n          \"type\": \"string\"\n        },\n        \"exposer\": {\n          \"type\": \"string\"\n        },\n        \"externalDNS\": {\n          \"type\": \"boolean\"\n        },\n        \"ignoreLoadBalancer\": {\n          \"type\": \"boolean\"\n        },\n        \"namespaceSubDomain\": {\n          \"type\": \"string\"\n        },\n        \"tls\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/TLSConfig\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"RequirementsConfig\": {\n      \"properties\": {\n        \"autoUpdate\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/AutoUpdateConfig\"\n        },\n        \"bootConfigURL\": {\n          \"type\": \"string\"\n        },\n        \"buildPacks\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/BuildPackConfig\"\n        },\n        \"cluster\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ClusterConfig\"\n        },\n        \"environments\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/EnvironmentConfig\"\n          },\n          \"type\": \"array\"\n        },\n        \"githubApp\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/GithubAppConfig\"\n        },\n        \"gitops\": {\n          \"type\": \"boolean\"\n        },\n        \"helmfile\": {\n          \"type\": \"boolean\"\n        },\n        \"ingress\": {\n          \"$ref\": \"#/definitions/IngressConfig\"\n        },\n        \"kaniko\": {\n          \"type\": \"boolean\"\n        },\n        \"repository\": {\n          \"type\": \"string\"\n        },\n        \"secretStorage\": {\n          \"type\": \"string\"\n        },\n        \"storage\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/StorageConfig\"\n        },\n        \"terraform\": {\n          \"type\": \"boolean\"\n        },\n        \"vault\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/VaultConfig\"\n        },\n        \"velero\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/VeleroConfig\"\n        },\n        \"versionStream\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/VersionStreamConfig\"\n        },\n        \"webhook\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"StorageConfig\": {\n      \"properties\": {\n        \"backup\": {\n          \"$ref\": \"#/definitions/StorageEntryConfig\"\n        },\n        \"logs\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/StorageEntryConfig\"\n        },\n        \"reports\": {\n          \"$ref\": \"#/definitions/StorageEntryConfig\"\n        },\n        \"repository\": {\n          \"$ref\": \"#/definitions/StorageEntryConfig\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"StorageEntryConfig\": {\n      \"properties\": {\n        \"enabled\": {\n          \"type\": \"boolean\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"TLSConfig\": {\n      \"properties\": {\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"enabled\": {\n          \"type\": \"boolean\"\n        },\n        \"production\": {\n          \"type\": \"boolean\"\n        },\n        \"secretName\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VaultAWSConfig\": {\n      \"properties\": {\n        \"autoCreate\": {\n          \"type\": \"boolean\"\n        },\n        \"dynamoDBRegion\": {\n          \"type\": \"string\"\n        },\n        \"dynamoDBTable\": {\n          \"type\": \"string\"\n        },\n        \"iamUserName\": {\n          \"type\": \"string\"\n        },\n        \"kmsKeyId\": {\n          \"type\": \"string\"\n        },\n        \"kmsRegion\": {\n          \"type\": \"string\"\n        },\n        \"s3Bucket\": {\n          \"type\": \"string\"\n        },\n        \"s3Prefix\": {\n          \"type\": \"string\"\n        },\n        \"s3Region\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VaultConfig\": {\n      \"properties\": {\n        \"aws\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/VaultAWSConfig\"\n        },\n        \"bucket\": {\n          \"type\": \"string\"\n        },\n        \"disableURLDiscovery\": {\n          \"type\": \"boolean\"\n        },\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"keyring\": {\n          \"type\": \"string\"\n        },\n        \"kubernetesAuthPath\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"namespace\": {\n          \"type\": \"string\"\n        },\n        \"recreateBucket\": {\n          \"type\": \"boolean\"\n        },\n        \"secretEngineMountPoint\": {\n          \"type\": \"string\"\n        },\n        \"serviceAccount\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VeleroConfig\": {\n      \"properties\": {\n        \"namespace\": {\n          \"type\": \"string\"\n        },\n        \"schedule\": {\n          \"type\": \"string\"\n        },\n        \"serviceAccount\": {\n          \"type\": \"string\"\n        },\n        \"ttl\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VersionStreamConfig\": {\n      \"properties\": {\n        \"ref\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    }\n  }\n}\n",
            "static/schemas/jx-schema.json": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"$ref\": \"#/definitions/ProjectConfig\",\n  \"definitions\": {\n    \"AWSElasticBlockStoreVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"partition\": {\n          \"type\": \"integer\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"volumeID\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"AddonConfig\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"version\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Agent\": {\n      \"properties\": {\n        \"container\": {\n          \"type\": \"string\"\n        },\n        \"dir\": {\n          \"type\": \"string\"\n        },\n        \"image\": {\n          \"type\": \"string\"\n        },\n        \"label\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"AzureDiskVolumeSource\": {\n      \"properties\": {\n        \"cachingMode\": {\n          \"type\": \"string\"\n        },\n        \"diskName\": {\n          \"type\": \"string\"\n        },\n        \"diskURI\": {\n          \"type\": \"string\"\n        },\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"AzureFileVolumeSource\": {\n      \"properties\": {\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretName\": {\n          \"type\": \"string\"\n        },\n        \"shareName\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"CSIVolumeSource\": {\n      \"properties\": {\n        \"driver\": {\n          \"type\": \"string\"\n        },\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"nodePublishSecretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"volumeAttributes\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"CephFSVolumeSource\": {\n      \"properties\": {\n        \"monitors\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretFile\": {\n          \"type\": \"string\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"user\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ChatConfig\": {\n      \"properties\": {\n        \"developerChannel\": {\n          \"type\": \"string\"\n        },\n        \"kind\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        },\n        \"userChannel\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"CinderVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"volumeID\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ConfigMapKeySelector\": {\n      \"properties\": {\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ConfigMapProjection\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/KeyToPath\"\n          },\n          \"type\": \"array\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ConfigMapVolumeSource\": {\n      \"properties\": {\n        \"defaultMode\": {\n          \"type\": \"integer\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/KeyToPath\"\n          },\n          \"type\": \"array\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Container\": {\n      \"additionalProperties\": true,\n      \"type\": \"object\"\n    },\n    \"DownwardAPIProjection\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/DownwardAPIVolumeFile\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"DownwardAPIVolumeFile\": {\n      \"properties\": {\n        \"fieldRef\": {\n          \"$ref\": \"#/definitions/ObjectFieldSelector\"\n        },\n        \"mode\": {\n          \"type\": \"integer\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"resourceFieldRef\": {\n          \"$ref\": \"#/definitions/ResourceFieldSelector\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"DownwardAPIVolumeSource\": {\n      \"properties\": {\n        \"defaultMode\": {\n          \"type\": \"integer\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/DownwardAPIVolumeFile\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"EmptyDirVolumeSource\": {\n      \"properties\": {\n        \"medium\": {\n          \"type\": \"string\"\n        },\n        \"sizeLimit\": {\n          \"$ref\": \"#/definitions/Quantity\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"EnvVar\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"type\": \"string\"\n        },\n        \"valueFrom\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/EnvVarSource\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"EnvVarSource\": {\n      \"properties\": {\n        \"configMapKeyRef\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ConfigMapKeySelector\"\n        },\n        \"fieldRef\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ObjectFieldSelector\"\n        },\n        \"resourceFieldRef\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ResourceFieldSelector\"\n        },\n        \"secretKeyRef\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/SecretKeySelector\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"FCVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"lun\": {\n          \"type\": \"integer\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"targetWWNs\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"wwids\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"FlexVolumeSource\": {\n      \"properties\": {\n        \"driver\": {\n          \"type\": \"string\"\n        },\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"options\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"FlockerVolumeSource\": {\n      \"properties\": {\n        \"datasetName\": {\n          \"type\": \"string\"\n        },\n        \"datasetUUID\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"GCEPersistentDiskVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"partition\": {\n          \"type\": \"integer\"\n        },\n        \"pdName\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"GitRepoVolumeSource\": {\n      \"properties\": {\n        \"directory\": {\n          \"type\": \"string\"\n        },\n        \"repository\": {\n          \"type\": \"string\"\n        },\n        \"revision\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"GlusterfsVolumeSource\": {\n      \"properties\": {\n        \"endpoints\": {\n          \"type\": \"string\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"HostPathVolumeSource\": {\n      \"properties\": {\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ISCSIVolumeSource\": {\n      \"properties\": {\n        \"chapAuthDiscovery\": {\n          \"type\": \"boolean\"\n        },\n        \"chapAuthSession\": {\n          \"type\": \"boolean\"\n        },\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"initiatorName\": {\n          \"type\": \"string\"\n        },\n        \"iqn\": {\n          \"type\": \"string\"\n        },\n        \"iscsiInterface\": {\n          \"type\": \"string\"\n        },\n        \"lun\": {\n          \"type\": \"integer\"\n        },\n        \"portals\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"targetPortal\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"IssueTrackerConfig\": {\n      \"properties\": {\n        \"kind\": {\n          \"type\": \"string\"\n        },\n        \"project\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"KeyToPath\": {\n      \"properties\": {\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"mode\": {\n          \"type\": \"integer\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"LocalObjectReference\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Loop\": {\n      \"properties\": {\n        \"steps\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        },\n        \"values\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"variable\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"NFSVolumeSource\": {\n      \"properties\": {\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"server\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ObjectFieldSelector\": {\n      \"properties\": {\n        \"apiVersion\": {\n          \"type\": \"string\"\n        },\n        \"fieldPath\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ParsedPipeline\": {\n      \"properties\": {\n        \"agent\": {\n          \"$ref\": \"#/definitions/Agent\"\n        },\n        \"dir\": {\n          \"type\": \"string\"\n        },\n        \"env\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"environment\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"options\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/RootOptions\"\n        },\n        \"post\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Post\"\n          },\n          \"type\": \"array\"\n        },\n        \"stages\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/Stage\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PersistentVolumeClaimVolumeSource\": {\n      \"properties\": {\n        \"claimName\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PhotonPersistentDiskVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"pdID\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PipelineConfig\": {\n      \"properties\": {\n        \"agent\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Agent\"\n        },\n        \"containerOptions\": {\n          \"$ref\": \"#/definitions/Container\"\n        },\n        \"env\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"environment\": {\n          \"type\": \"string\"\n        },\n        \"extends\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PipelineExtends\"\n        },\n        \"pipelines\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Pipelines\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PipelineExtends\": {\n      \"properties\": {\n        \"file\": {\n          \"type\": \"string\"\n        },\n        \"import\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PipelineLifecycle\": {\n      \"properties\": {\n        \"preSteps\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        },\n        \"replace\": {\n          \"type\": \"boolean\"\n        },\n        \"steps\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PipelineLifecycles\": {\n      \"properties\": {\n        \"build\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"pipeline\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ParsedPipeline\"\n        },\n        \"postBuild\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"preBuild\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"promote\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"setVersion\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"setup\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PipelineOverride\": {\n      \"properties\": {\n        \"agent\": {\n          \"$ref\": \"#/definitions/Agent\"\n        },\n        \"containerOptions\": {\n          \"$ref\": \"#/definitions/Container\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"pipeline\": {\n          \"type\": \"string\"\n        },\n        \"sidecars\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Container\"\n          },\n          \"type\": \"array\"\n        },\n        \"stage\": {\n          \"type\": \"string\"\n        },\n        \"step\": {\n          \"$ref\": \"#/definitions/Step\"\n        },\n        \"steps\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        },\n        \"type\": {\n          \"type\": \"string\"\n        },\n        \"volumes\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Volume\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Pipelines\": {\n      \"properties\": {\n        \"default\": {\n          \"$ref\": \"#/definitions/ParsedPipeline\"\n        },\n        \"feature\": {\n          \"$ref\": \"#/definitions/PipelineLifecycles\"\n        },\n        \"overrides\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/PipelineOverride\"\n          },\n          \"type\": \"array\"\n        },\n        \"post\": {\n          \"$ref\": \"#/definitions/PipelineLifecycle\"\n        },\n        \"pullRequest\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PipelineLifecycles\"\n        },\n        \"release\": {\n          \"$ref\": \"#/definitions/PipelineLifecycles\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PortworxVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"volumeID\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Post\": {\n      \"properties\": {\n        \"actions\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/PostAction\"\n          },\n          \"type\": \"array\"\n        },\n        \"condition\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PostAction\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"options\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"PreviewEnvironmentConfig\": {\n      \"properties\": {\n        \"disabled\": {\n          \"type\": \"boolean\"\n        },\n        \"maximumInstances\": {\n          \"type\": \"integer\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ProjectConfig\": {\n      \"properties\": {\n        \"addons\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/AddonConfig\"\n          },\n          \"type\": \"array\"\n        },\n        \"buildPack\": {\n          \"type\": \"string\"\n        },\n        \"buildPackGitRef\": {\n          \"type\": \"string\"\n        },\n        \"buildPackGitURL\": {\n          \"type\": \"string\"\n        },\n        \"chat\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ChatConfig\"\n        },\n        \"dockerRegistryHost\": {\n          \"type\": \"string\"\n        },\n        \"dockerRegistryOwner\": {\n          \"type\": \"string\"\n        },\n        \"env\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"issueTracker\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/IssueTrackerConfig\"\n        },\n        \"noReleasePrepare\": {\n          \"type\": \"boolean\"\n        },\n        \"pipelineConfig\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PipelineConfig\"\n        },\n        \"previewEnvironments\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PreviewEnvironmentConfig\"\n        },\n        \"wiki\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/WikiConfig\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ProjectedVolumeSource\": {\n      \"properties\": {\n        \"defaultMode\": {\n          \"type\": \"integer\"\n        },\n        \"sources\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/VolumeProjection\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Quantity\": {\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"QuobyteVolumeSource\": {\n      \"properties\": {\n        \"group\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"registry\": {\n          \"type\": \"string\"\n        },\n        \"tenant\": {\n          \"type\": \"string\"\n        },\n        \"user\": {\n          \"type\": \"string\"\n        },\n        \"volume\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"RBDVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"image\": {\n          \"type\": \"string\"\n        },\n        \"keyring\": {\n          \"type\": \"string\"\n        },\n        \"monitors\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"pool\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"user\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ResourceFieldSelector\": {\n      \"properties\": {\n        \"containerName\": {\n          \"type\": \"string\"\n        },\n        \"divisor\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Quantity\"\n        },\n        \"resource\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"RootOptions\": {\n      \"properties\": {\n        \"containerOptions\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Container\"\n        },\n        \"distributeParallelAcrossNodes\": {\n          \"type\": \"boolean\"\n        },\n        \"podLabels\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"retry\": {\n          \"type\": \"integer\"\n        },\n        \"sidecars\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Container\"\n          },\n          \"type\": \"array\"\n        },\n        \"timeout\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Timeout\"\n        },\n        \"tolerations\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/Toleration\"\n          },\n          \"type\": \"array\"\n        },\n        \"volumes\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/Volume\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ScaleIOVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"gateway\": {\n          \"type\": \"string\"\n        },\n        \"protectionDomain\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"sslEnabled\": {\n          \"type\": \"boolean\"\n        },\n        \"storageMode\": {\n          \"type\": \"string\"\n        },\n        \"storagePool\": {\n          \"type\": \"string\"\n        },\n        \"system\": {\n          \"type\": \"string\"\n        },\n        \"volumeName\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"SecretKeySelector\": {\n      \"properties\": {\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"SecretProjection\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/KeyToPath\"\n          },\n          \"type\": \"array\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"SecretVolumeSource\": {\n      \"properties\": {\n        \"defaultMode\": {\n          \"type\": \"integer\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/KeyToPath\"\n          },\n          \"type\": \"array\"\n        },\n        \"optional\": {\n          \"type\": \"boolean\"\n        },\n        \"secretName\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"ServiceAccountTokenProjection\": {\n      \"properties\": {\n        \"audience\": {\n          \"type\": \"string\"\n        },\n        \"expirationSeconds\": {\n          \"type\": \"integer\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Stage\": {\n      \"properties\": {\n        \"agent\": {\n          \"$ref\": \"#/definitions/Agent\"\n        },\n        \"dir\": {\n          \"type\": \"string\"\n        },\n        \"env\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"environment\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"options\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/StageOptions\"\n        },\n        \"parallel\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Stage\"\n          },\n          \"type\": \"array\"\n        },\n        \"post\": {\n          \"items\": {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"$ref\": \"#/definitions/Post\"\n          },\n          \"type\": \"array\"\n        },\n        \"stages\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Stage\"\n          },\n          \"type\": \"array\"\n        },\n        \"steps\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"StageOptions\": {\n      \"properties\": {\n        \"containerOptions\": {\n          \"$ref\": \"#/definitions/Container\"\n        },\n        \"distributeParallelAcrossNodes\": {\n          \"type\": \"boolean\"\n        },\n        \"podLabels\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"retry\": {\n          \"type\": \"integer\"\n        },\n        \"sidecars\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Container\"\n          },\n          \"type\": \"array\"\n        },\n        \"stash\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Stash\"\n        },\n        \"timeout\": {\n          \"$ref\": \"#/definitions/Timeout\"\n        },\n        \"tolerations\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Toleration\"\n          },\n          \"type\": \"array\"\n        },\n        \"unstash\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Unstash\"\n        },\n        \"volumes\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Volume\"\n          },\n          \"type\": \"array\"\n        },\n        \"workspace\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Stash\": {\n      \"properties\": {\n        \"files\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Step\": {\n      \"properties\": {\n        \"agent\": {\n          \"$ref\": \"#/definitions/Agent\"\n        },\n        \"args\": {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        \"command\": {\n          \"type\": \"string\"\n        },\n        \"comment\": {\n          \"type\": \"string\"\n        },\n        \"container\": {\n          \"type\": \"string\"\n        },\n        \"dir\": {\n          \"type\": \"string\"\n        },\n        \"env\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/EnvVar\"\n          },\n          \"type\": \"array\"\n        },\n        \"groovy\": {\n          \"type\": \"string\"\n        },\n        \"image\": {\n          \"type\": \"string\"\n        },\n        \"loop\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/Loop\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"options\": {\n          \"patternProperties\": {\n            \".*\": {\n              \"type\": \"string\"\n            }\n          },\n          \"type\": \"object\"\n        },\n        \"sh\": {\n          \"type\": \"string\"\n        },\n        \"step\": {\n          \"type\": \"string\"\n        },\n        \"steps\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/Step\"\n          },\n          \"type\": \"array\"\n        },\n        \"when\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"StorageOSVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"readOnly\": {\n          \"type\": \"boolean\"\n        },\n        \"secretRef\": {\n          \"$ref\": \"#/definitions/LocalObjectReference\"\n        },\n        \"volumeName\": {\n          \"type\": \"string\"\n        },\n        \"volumeNamespace\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Timeout\": {\n      \"properties\": {\n        \"time\": {\n          \"type\": \"integer\"\n        },\n        \"unit\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Toleration\": {\n      \"properties\": {\n        \"effect\": {\n          \"type\": \"string\"\n        },\n        \"key\": {\n          \"type\": \"string\"\n        },\n        \"operator\": {\n          \"type\": \"string\"\n        },\n        \"tolerationSeconds\": {\n          \"type\": \"integer\"\n        },\n        \"value\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Unstash\": {\n      \"properties\": {\n        \"dir\": {\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"Volume\": {\n      \"properties\": {\n        \"awsElasticBlockStore\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/AWSElasticBlockStoreVolumeSource\"\n        },\n        \"azureDisk\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/AzureDiskVolumeSource\"\n        },\n        \"azureFile\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/AzureFileVolumeSource\"\n        },\n        \"cephfs\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/CephFSVolumeSource\"\n        },\n        \"cinder\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/CinderVolumeSource\"\n        },\n        \"configMap\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ConfigMapVolumeSource\"\n        },\n        \"csi\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/CSIVolumeSource\"\n        },\n        \"downwardAPI\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/DownwardAPIVolumeSource\"\n        },\n        \"emptyDir\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/EmptyDirVolumeSource\"\n        },\n        \"fc\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/FCVolumeSource\"\n        },\n        \"flexVolume\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/FlexVolumeSource\"\n        },\n        \"flocker\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/FlockerVolumeSource\"\n        },\n        \"gcePersistentDisk\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/GCEPersistentDiskVolumeSource\"\n        },\n        \"gitRepo\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/GitRepoVolumeSource\"\n        },\n        \"glusterfs\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/GlusterfsVolumeSource\"\n        },\n        \"hostPath\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/HostPathVolumeSource\"\n        },\n        \"iscsi\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ISCSIVolumeSource\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"nfs\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/NFSVolumeSource\"\n        },\n        \"persistentVolumeClaim\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PersistentVolumeClaimVolumeSource\"\n        },\n        \"photonPersistentDisk\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PhotonPersistentDiskVolumeSource\"\n        },\n        \"portworxVolume\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/PortworxVolumeSource\"\n        },\n        \"projected\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ProjectedVolumeSource\"\n        },\n        \"quobyte\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/QuobyteVolumeSource\"\n        },\n        \"rbd\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/RBDVolumeSource\"\n        },\n        \"scaleIO\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ScaleIOVolumeSource\"\n        },\n        \"secret\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/SecretVolumeSource\"\n        },\n        \"storageos\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/StorageOSVolumeSource\"\n        },\n        \"vsphereVolume\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/VsphereVirtualDiskVolumeSource\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VolumeProjection\": {\n      \"properties\": {\n        \"configMap\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ConfigMapProjection\"\n        },\n        \"downwardAPI\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/DownwardAPIProjection\"\n        },\n        \"secret\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/SecretProjection\"\n        },\n        \"serviceAccountToken\": {\n          \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n          \"$ref\": \"#/definitions/ServiceAccountTokenProjection\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"VsphereVirtualDiskVolumeSource\": {\n      \"properties\": {\n        \"fsType\": {\n          \"type\": \"string\"\n        },\n        \"storagePolicyID\": {\n          \"type\": \"string\"\n        },\n        \"storagePolicyName\": {\n          \"type\": \"string\"\n        },\n        \"volumePath\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    },\n    \"WikiConfig\": {\n      \"properties\": {\n        \"kind\": {\n          \"type\": \"string\"\n        },\n        \"space\": {\n          \"type\": \"string\"\n        },\n        \"url\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false,\n      \"type\": \"object\"\n    }\n  }\n}\n",
            "content/en/about/_index.md": "---\ntitle: About\nlinktitle: About\ndescription: An overview of the concepts in Jenkins X\ntype: docs\ncascade:\n  type: docs\naliases:\n    - /getting-started/boot/\n    - /docs/reference/boot\n---\n\n## Concepts\n---\nJenkins X is designed to make it simple for developers to work to DevOps principles and best practices. The approaches taken\nare based on the comprehensive research done for the book [*ACCELERATE: Building and Scaling High Performing Technology Organisations*](https://goo.gl/vZ8BFN). You can read why we use [Accelerate](../about/overview/accelerate/) for the principles behind Jenkins X.\n\n\n## Principles\n---\n*\"DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.\"*\n\nThe goals of DevOps projects are:\n\n* Faster time to market\n* Improved deployment frequency\n* Shorter time between fixes\n* Lower failure rate of releases\n* Faster Mean Time To Recovery\n\nHigh performing teams should be able to deploy multiple times per day compared to the industry average that falls between once per week and once per month.\n\nThe lead time for code to migrate from 'code committed' to 'code in production' should be less than one hour and the change failure rate should be less than 15%, compared to an average of between 31-45%.\n\nThe Mean Time To Recover from a failure should also be less than one hour.\n\nJenkins X has been designed from first principles to allow teams to apply DevOps best practices to hit top-of-industry performance goals.\n\n## Practices\n---\nThe following best practices are considered key to operating a successful DevOps approach:\n\n* Loosely-coupled Architectures\n* Self-service Configuration\n* Automated Provisioning\n* Continuous Build / Integration and Delivery\n* Automated Release Management\n* Incremental Testing\n* Infrastructure Configuration as Code\n* Comprehensive configuration management\n* Trunk based development and feature flags\n\nJenkins X brings together a number of familiar methodologies and components into an integrated approach that minimises complexity.\n\n## Architecture\n\nJenkins X builds upon the DevOps model of loosely-coupled architectures and is designed to support you in deploying large numbers of distributed microservices in a repeatable and manageable fashion, across multiple teams.\n\n<img src=\"/images/jx-arch.png\" class=\"img-thumbnail\">\n\n### Conceptual model\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## Building Blocks\n\nJenkins X builds upon the following core components:  \n\n### Kubernetes & Docker\n---\nAt the heart of the system is Kubernetes, which has become the defacto virtual infrastructure platform for DevOps. Every major Cloud provider now offers Kubernetes infrastructure on demand and the platform may also be installed in-house on private infrastructure, if required.\n\nFunctionally, the Kubernetes platform extends the basic Containerisation principles provided by Docker to span across multiple physical Nodes.\n\nIn brief, Kubernetes provides a homogeneous virtual infrastructure that can be scaled dynamically by adding or removing Nodes. Each Node participates in a single large flat private virtual network space.\n\nThe unit of deployment in Kubernetes is the Pod, which comprises one or more Docker containers and some meta-data. All containers within a Pod share the same virtual IP address and port space. Deployments within Kubernetes are declarative, so the user specifies the number of instances of a given version of a Pod to be deployed and Kubernetes calculates the actions required to get from the current state to the desired state by deploying or deleting Pods across Nodes. The decision as to where specific instances of Pods will be instantiated is influenced by available resources, desired resources and label-matching. Once deployed, Kubernetes undertakes to ensure that the desired number of Pods of each type remain operational by performing periodic health checks and terminating and replacing non-responsive Pods.\n\nTo impose some structure, Kubernetes allows for the creation of virtual Namespaces which can be used to separate Pods logically, and to potentially associate groups of Pods with specific resources. Resources in a Namespace can share a single security policy, for example. Resource names are required to be unique within a Namespace but may be reused across Namespaces.\n\nIn the Jenkins X model, a Pod equates to a deployed instance of a Microservice (in most cases). Where horizontal scaling of the Microservice is required, Kubernetes allows multiple identical instances of a given Pod to be deployed, each with its own virtual IP address. These can be aggregated into a single virtual endpoint known as a Service which has a unique and static IP address and a local DNS entry that matches the Service name. Calls to the Service are dynamically remapped to the IP of one of the healthy Pod instances on a random basis. Services can also be used to remap ports. Within the Kubernetes virtual network, services can be referred to with a fully qualified domain name of the form: `<service-name>.<namespace-name>.svc.cluster.local` which may be shortened to `<service-name>.<namespace-name>` or just `<service-name>` in the case of services which fall within the same namespace. Hence, a RESTful service called 'payments' deployed in a namespace called 'finance' could be referred to in code via `http://payments.finance.svc.cluster.local`, `http://payments.finance` or just `http://payments`, dependent upon the location of the calling code.\n\nTo access Services from outside the local network, Kubernetes requires the creation of an Ingress for each Service. The most common form of this utilises one or more load balancers with static IP addresses, which sit outside the Kubernetes virtual infrastructure and route network requests to mapped internal Services. By creating a wildcard external DNS entry for the static IP address of the load balancer, it becomes possible to map services to external fully-qualified domain names. For example, if our load balancer is mapped to `*.jenkins-x.io` then our payments service could be exposed as `http://payments.finance.jenkins-x.io`.\n\nKubernetes represents a powerful and constantly improving platform for deploying services at massive scale, but is also complex to understand and can be difficult to configure correctly. Jenkins X brings to Kubernetes a set of default conventions and some simplified tooling, optimised for the purposes of DevOps and the management of loosely-coupled services.\n\nThe `jx` command line tool provides simple ways to perform common operations upon Kubernetes instances like viewing logs and connecting to container instances. In addition, Jenkins X extends the Kubernetes Namespace convention to create Environments which may be chained together to form a promotion hierarchy for the release pipeline.\n\nA Jenkins X Environment can represent a virtual infrastructure environment such as Dev, Staging, Production etc for a given code team. Promotion rules between Environments can be defined so that releases may be moved automatically or manually through the pipeline. Each Environment is managed following the GitOps methodology - the desired state of an Environment is maintained in a Git repository and committing or rolling back changes to the repository triggers an associated change of state in the given Environment in Kubernetes.\n\nKubernetes clusters can be created directly using the `jx create cluster` command, making it simple to reproduce clusters in the event of a failure. Similarly, the Jenkins X platform can be upgraded on an existing cluster using `jx upgrade platform`. Jenkins X supports working with multiple Kubernetes clusters through `jx context` and switching between multiple Environments within a cluster with `jx environment`.\n\nDevelopers should be aware of the capabilities that Kubernetes provides for distributing configuration data and security credentials across the cluster. ConfigMaps can be used to create sets of name/value pairs for non-confidential configuration meta-data and Secrets perform a similar but encrypted mechanism for security credentials and tokens. Kubernetes also provides a mechanism for specifying Resource Quotas for Pods which is necessary for optimising deployments across Nodes and which we shall discuss shortly.\n\nBy default, Pod state is transient. Any data written to the local file system of a Pod is lost when that Pod is deleted. Developers should be aware that Kubernetes may unilaterally decide to delete instances of Pods and recreate them at any time as part of the general load balancing process for Nodes so local data may be lost at any time. Where stateful data is required, Persistent Volumes should be declared and mounted within the file system of specific Pods.\n\n### Helm and Draft\n---\nInteracting directly with Kubernetes involves either manual configuration using the `kubectl` command line utility, or passing various flavours of YAML data to the API. This can be complex and is open to human error creeping in. In keeping with the DevOps principle of 'configuration as code', Jenkins X leverages Helm and Draft to create atomic blocks of configuration for your applications.\n\nHelm simplifies Kubernetes configuration through the concept of a Chart, which is a set of files that together specify the meta-data necessary to deploy a given application or service into Kubernetes. Rather than maintain a series of boilerplate YAML files based upon the Kubernetes API, Helm uses a templating language to create the required YAML specifications from a single shared set of values. This makes it possible to specify re-usable Kubernetes applications where configuration can be selectively over-ridden at deployment time.\n",
            "content/en/about/capabilities.md": "---\ntitle: Jenkins X Capabilities Matrix\nlinktitle: Capabilities Matrix\ndescription: Matrix that describes the current state of Jenkins X capabilities for major Kubernetes platforms\ntype: docs\nweight: 20\n---\n\n## Jenkins X Capabilities Matrix\n\n| Capability | GKE | EKS | OpenShift 3.11 |\n| --- | :---:| :---: | :---: |\n| **Terraform scripts for cluster creation** | Yes | Yes | No |\n| **`jx boot` for installation** | Yes | Yes | Yes |\n| **Vault for secret storage** | Yes | Yes | Self Provisioned |\n| **Bucket log storage** | Yes | Yes | No |\n| **Kubernetes Versions** | | | |\n| - 1.13 | Yes | No | N/A |\n| - 1.14 | Yes | Yes | N/A |\n| - 1.15 | Preview | Preview | N/A |\n| - 1.16 | Preview | Preview |  N/A |\n| **Source Control Providers** | | | |\n| - Github | Yes | Yes | Yes |\n| - Github Enterprise | Yes | Yes | Yes |\n| - Gitlab CE | Preview | Preview | Preview |\n| - Gitlab EE | Preview | Preview | Preview |\n| - Bitbucket Server | Preview | Preview | Preview |\n| - Bitbucket Cloud | No | No | No |\n",
            "content/en/about/concepts/_index.md": "---\ntitle: Concepts\nlinktitle: Concepts\ndescription: An overview of the concepts in Jenkins X.\nweight: 6\naliases:\n  - /about/concepts\n---\n\nJenkins X is designed to make it simple for developers to work to DevOps principles and best practices. The approaches taken\nare based on the comprehensive research done for the book [*ACCELERATE: Building and Scaling High Performing Technology Organizations*](https://goo.gl/vZ8BFN). You can read why we use [Accelerate](/about/overview/accelerate/) for the principles behind Jenkins X.\n\n\n## Principles\n---\n*\"DevOps is a set of practices intended to reduce the time between committing a change to a system and the change being placed into normal production, while ensuring high quality.\"*\n\nThe goals of DevOps projects are:\n\n* Faster time to market\n* Improved deployment frequency\n* Shorter time between fixes\n* Lower failure rate of releases\n* Faster Mean Time To Recovery\n\nHigh performing teams should be able to deploy multiple times per day compared to the industry average that falls between once per week and once per month. \n\nThe lead time for code to migrate from 'code committed' to 'code in production' should be less than one hour and the change failure rate should be less than 15%, compared to an average of between 31-45%.\n\nThe Mean Time To Recover from a failure should also be less than one hour. \n\nJenkins X has been designed from first principles to allow teams to apply DevOps best practices to hit top-of-industry performance goals. \n\n## Practices\n---\nThe following best practices are considered key to operating a successful DevOps approach:\n\n* Loosely-coupled Architectures\n* Self-service Configuration\n* Automated Provisioning\n* Continuous Build / Integration and Delivery\n* Automated Release Management\n* Incremental Testing\n* Infrastructure Configuration as Code\n* Comprehensive configuration management\n* Trunk based development and feature flags\n\nJenkins X brings together a number of familiar methodologies and components into an integrated approach that minimizes complexity.\n\n## Architecture\n\nJenkins X builds upon the DevOps model of loosely-coupled architectures and is designed to support you in deploying large numbers of distributed microservices in a repeatable and manageable fashion, across multiple teams.\n\n<img src=\"/images/jx-arch.png\" class=\"img-thumbnail\">\n\n### Conceptual model\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## Building Blocks\n\nJenkins X builds upon the following core components:  \n  \n### Kubernetes & Docker\n---\nAt the heart of the system is Kubernetes, which has become the de facto virtual infrastructure platform for DevOps. Every major Cloud provider now offers Kubernetes infrastructure on demand and the platform may also be installed in-house on private infrastructure, if required.\n\nFunctionally, the Kubernetes platform extends the basic Containerization principles provided by Docker to span across multiple physical Nodes. \n\nIn brief, Kubernetes provides a homogeneous virtual infrastructure that can be scaled dynamically by adding or removing Nodes. Each Node participates in a single large flat private virtual network space. \n\nThe unit of deployment in Kubernetes is the Pod, which comprises one or more Docker containers and some meta-data. All containers within a Pod share the same virtual IP address and port space. Deployments within Kubernetes are declarative, so the user specifies the number of instances of a given version of a Pod to be deployed and Kubernetes calculates the actions required to get from the current state to the desired state by deploying or deleting Pods across Nodes. The decision as to where specific instances of Pods will be instantiated is influenced by available resources, desired resources and label-matching. Once deployed, Kubernetes undertakes to ensure that the desired number of Pods of each type remain operational by performing periodic health checks and terminating and replacing non-responsive Pods.\n\nTo impose some structure, Kubernetes allows for the creation of virtual Namespaces which can be used to separate Pods logically, and to potentially associate groups of Pods with specific resources. Resources in a Namespace can share a single security policy, for example. Resource names are required to be unique within a Namespace but may be reused across Namespaces.\n\nIn the Jenkins X model, a Pod equates to a deployed instance of a Microservice (in most cases). Where horizontal scaling of the Microservice is required, Kubernetes allows multiple identical instances of a given Pod to be deployed, each with its own virtual IP address. These can be aggregated into a single virtual endpoint known as a Service which has a unique and static IP address and a local DNS entry that matches the Service name. Calls to the Service are dynamically remapped to the IP of one of the healthy Pod instances on a random basis. Services can also be used to remap ports. Within the Kubernetes virtual network, services can be referred to with a fully qualified domain name of the form: `<service-name>.<namespace-name>.svc.cluster.local` which may be shortened to `<service-name>.<namespace-name>` or just `<service-name>` in the case of services which fall within the same namespace. Hence, a RESTful service called 'payments' deployed in a namespace called 'finance' could be referred to in code via `http://payments.finance.svc.cluster.local`, `http://payments.finance` or just `http://payments`, dependent upon the location of the calling code.\n\nTo access Services from outside the local network, Kubernetes requires the creation of an Ingress for each Service. The most common form of this utilizes one or more load balancers with static IP addresses, which sit outside the Kubernetes virtual infrastructure and route network requests to mapped internal Services. By creating a wildcard external DNS entry for the static IP address of the load balancer, it becomes possible to map services to external fully-qualified domain names. For example, if our load balancer is mapped to `*.jenkins-x.io` then our payments service could be exposed as `http://payments.finance.jenkins-x.io`.\n\nKubernetes represents a powerful and constantly improving platform for deploying services at massive scale, but is also complex to understand and can be difficult to configure correctly. Jenkins X brings to Kubernetes a set of default conventions and some simplified tooling, optimized for the purposes of DevOps and the management of loosely-coupled services. \n\nThe `jx` command line tool provides simple ways to perform common operations upon Kubernetes instances like viewing logs and connecting to container instances. In addition, Jenkins X extends the Kubernetes Namespace convention to create Environments which may be chained together to form a promotion hierarchy for the release pipeline. \n\nA Jenkins X Environment can represent a virtual infrastructure environment such as Dev, Staging, Production etc for a given code team. Promotion rules between Environments can be defined so that releases may be moved automatically or manually through the pipeline. Each Environment is managed following the GitOps methodology - the desired state of an Environment is maintained in a Git repository and committing or rolling back changes to the repository triggers an associated change of state in the given Environment in Kubernetes.\n\nKubernetes clusters can be created directly using the `jx create cluster` command, making it simple to reproduce clusters in the event of a failure. Similarly, the Jenkins X platform can be upgraded on an existing cluster using `jx upgrade platform`. Jenkins X supports working with multiple Kubernetes clusters through `jx context` and switching between multiple Environments within a cluster with `jx environment`.\n\nDevelopers should be aware of the capabilities that Kubernetes provides for distributing configuration data and security credentials across the cluster. ConfigMaps can be used to create sets of name/value pairs for non-confidential configuration meta-data and Secrets perform a similar but encrypted mechanism for security credentials and tokens. Kubernetes also provides a mechanism for specifying Resource Quotas for Pods which is necessary for optimizing deployments across Nodes and which we shall discuss shortly.\n\nBy default, Pod state is transient. Any data written to the local file system of a Pod is lost when that Pod is deleted. Developers should be aware that Kubernetes may unilaterally decide to delete instances of Pods and recreate them at any time as part of the general load balancing process for Nodes so local data may be lost at any time. Where stateful data is required, Persistent Volumes should be declared and mounted within the file system of specific Pods.\n\n### Helm and Draft\n---\nInteracting directly with Kubernetes involves either manual configuration using the `kubectl` command line utility, or passing various flavors of YAML data to the API. This can be complex and is open to human error creeping in. In keeping with the DevOps principle of 'configuration as code', Jenkins X leverages Helm and Draft to create atomic blocks of configuration for your applications.\n\nHelm simplifies Kubernetes configuration through the concept of a Chart, which is a set of files that together specify the meta-data necessary to deploy a given application or service into Kubernetes. Rather than maintain a series of boilerplate YAML files based upon the Kubernetes API, Helm uses a templating language to create the required YAML specifications from a single shared set of values. This makes it possible to specify re-usable Kubernetes applications where configuration can be selectively over-ridden at deployment time.\n",
            "content/en/about/concepts/components.md": "---\ntitle: Components\nlinktitle: Components\ndescription: Component overview of a typical Jenkins X installation\nweight: 10\n---\n\nAn installation of Jenkins X consists of:\n\n* a Development Environment per team which is a [kubernetes namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\n* zero to many other [Permanent Environments](/about/concepts/features/#environments) \n  * the out of the box is for each team to get their own `Staging` and `Production` environments\n  * each team can have as many environments as they wish and can call them whatever they like \n* optional [Preview Environments](/about/concepts/features/#preview-environments) \n\nTypically each environment is associated with its own [kubernetes namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) which are usually different to ensure clean isolation between the environments. \n\nThough technically 2 teams could share the same underlying namespace for, say, `Staging` though we advise separation to keep things simple - otherwise changes in one git repo could conflict with changes in another if they both configure the same namespace; due to, say, service resource name or DNS conflicts. If you wish 2 teams to share the same underlying microservices its much simpler to just use `service linking` to link services in one namespace to another so that they appear as local services with local DNS.\n\nSee the full list of [components of Jenkins X](/docs/reference/components/)\n\n## Development Environment\n\nIn the dev environment we have installed a number of core applications we believe are required at a minimum to start folks off with CI/CD on Kubernetes. \n\nWe also support [addons](/about/concepts/features/#applications) to extend this core set. \n\nJenkins X comes with configuration that wires these services together meaning everything works together straight away. This dramatically reduces the time to get started with Kubernetes as all the passwords, environment variables and config files are all setup up to work with each other.\n\n1. __Jenkins__ \u200a\u2014\u200aprovides both CI and CD automation. There is an effort to decompose Jenkins over time to become more cloud native and make use of Kubernetes concepts around CRDs, storage and scaling for example.\n2. __Nexus__\u200a\u2014\u200aacts as a dependency cache for NodeJS and Java applications to dramatically improve build times. After an initial build of a SpringBoot application the build time is reduced from 12 minutes to 4. We have not yet but intend to demonstrate swapping this with Artifactory soon.\n3. __Docker registry__ \u200a\u2014\u200aan in cluster docker registry where our pipelines push application images, we will soon switch to using native cloud provider registries such as Google Container Registry, Azure Container Registry or Amazon Elastic Container Registry (ECR) for example.\n4. __ChartMuseum__\u200a\u2014\u200aa Repository for publishing Helm charts\n5. __Monocular__ \u200a\u2014\u200aa UI used for discovering and running Helm charts\n\n## Permanent Environments\n\nThese [environments](/about/concepts/features/#environments), like `Staging` and `Production` use GitOps to manage themselves and so each have a git repository containing the source code to configure all the applications and services which are deployed there.\n\nTypically we use Helm charts in these git repositories to define which charts are to be installed, which versions of them and any environment specific configuration and additional resources (e.g. Secrets or operational applications like Prometheus etc)\n\n## Preview Environments\n\n[Preview Environments](/about/concepts/features/#preview-environments) are similar to [Permanent Environments](/about/concepts/features/#environments) in that they are defined in source code using Helm charts.\n\nThe main difference is preview environments are configured inside the application source code in the `./chart/preview` folder.\n\nAlso they are not permanent but created on a Pull Request to an applications git repository and then deleted some time after (manually or via automatic garbage collection).\n\n\n## Ingress Custom Annotations\n\nTo learn how to add custom annotations to the ingress controller, please see [How To Add Custom Annotations to Ingress Controller?](/docs/resources/faq/using/#how-to-add-custom-annotations-to-ingress-controller)\n\n",
            "content/en/about/concepts/diagram.md": "---\ntitle: Diagram\nlinktitle: Diagram\ndescription: A diagram of the Jenkins X architecture\nweight: 20\n---\n\n## Jenkins X with Tekton & [Lighthouse](https://github.com/jenkins-x/lighthouse)\n\n<figure>\n<img src=\"/images/ArchitectureServerlessJenkinsLighthouse.png\"/>\n<figcaption>\n<h5>Architecture for a serverless deployment using Tekton Pipelines and Lighthouse</h5>\n</figcaption>\n</figure>\n",
            "content/en/about/concepts/features.md": "---\ntitle: Features\nlinktitle: Features\ndescription: How Jenkins X can help you deliver continuously\nweight: 30\n---\n\n\n## Command Line\n\nJenkins X comes with a handy [jx](/commands/jx/) command line tool to easily:\n\n* [install Jenkins X](/docs/install-setup/boot/) inside your existing kubernetes cluster\n* [create a new kubernetes cluster](/docs/getting-started/setup/create-cluster/) and install Jenkins X into it\n* [import projects](/docs/resources/guides/using-jx/creating/import/) into Jenkins X and their Continuous Delivery pipelines setup\n* [create new Spring Boot applications](/developing/create-spring/) which get imported into Jenkins X and their Continuous Delivery pipelines setup\n\n## Automated Pipelines\n\nJenkins X will automatically set up awesome pipelines for your projects that fully implement both CI and CD using [DevOps best practices](/about/concepts/).\n\n## Environments\n\nAn _environment_ is a place where applications get deployed. Developers often refer to environments using a short name like `Testing, Staging/UAT or Production`.\n\nWith Jenkins X each _team_ gets its own Environments. By default Jenkins X creates a `Staging` and `Production` environment for each team but you can create new environments via [jx create environment](/commands/jx_create_environment/).\n\nThere is also the `Dev` environment which is where tools like Tekton, Nexus or Prow are installed and where CI/CD pipelines run.\n\nWe use GitOps to manage the configuration and version of the kubernetes resources which are deployed to each environment. So each Environment has its own git repository that contains all the Helm Charts, their versions and the configuration for the applications be run in the environment.\n\nAn Environment maps to a namespace in a Kubernetes cluster. When Pull Requests are merged into the environments git repository the pipeline runs for the environment which then applies the helm charts in git to the environments namespace.\n\nThis means both developers and operations can use the same git repository to manage all the configuration and versions of all the applications and resources for an environment in the same git repository and all changes to the environment are captured in git. So its easy to see who made changes when and more importantly its then easy to revert changes which cause bad things to happen.\n\n<img src=\"/images/gitops.png\" class=\"img-thumbnail\">\n\n## Teams\n\nA Team in Jenkins X is represented by an install of Jenkins X in a separate namespace.\n\nYou can install Jenkins X into different namespaces in the same cluster if you wish using the `--namespace` command line argument in [jx create cluster](/commands/jx_create_cluster/) or [jx install](/commands/deprecation/). Note that to support multiple installs of Jenkins X in the same cluster you need to [avoid Tiller if you are using helm 2.x](/news/helm-without-tiller/).\n\nYou can also use the [jx create team](/commands/jx_create_team/) CLI which creates a new `Team` [Custom Resource](/docs/reference/components/custom-resources/) then in the background the team controller will create a new Jenkins X install in the teams namespaces, by default reusing the same underlying nexus and docker registry.\n\nSee the [configuration guide](/docs/resources/guides/managing-jx/common-tasks/config/) for more details on how to share resources like Nexus across Teams.\n\n\n## Promotion\n\nPromotion is implemented with GitOps by generating a pull request on the Environment's git repository  so that all changes go through git for audit, approval and so that any change is easy to revert.\n\nWhen a new change to an environments git repository is merged to master, the pipeline for the environment triggers which applies any changes to the resources via helm - using the source code from the git repository.\n\nThe CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a _promotion strategy_ property of `Auto`. By default the `Staging` environment uses automatic promotion and the `Production` environment uses `Manual` promotion.\n\nTo manually promote a version of an application to an environment you can use [jx promote](/developing/promote/) command.\n\n<img src=\"/images/overview.png\" class=\"img-thumbnail\">\n\n## Preview Environments\n\nJenkins X lets you spin up Preview Environments for your Pull Requests so you can get fast feedback before changes are merged to master. This gives you faster feedback for your changes before they are merged and released and allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master.\n\nWhen the Preview Environment is up and running Jenkins X will comment on your Pull Request with a link so in one click your team members can try out the preview!\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\n## Feedback\n\nAs you can see above Jenkins X automatically comments on your Pull Requests when using Preview Environments.\n\nIf the commit comments reference issues (e.g. via the text `fixes #123`) then Jenkins X pipelines will generate release notes like those of [the jx releases](https://github.com/jenkins-x/jx/releases).\n\nAlso as the version with those new commits is promoted to `Staging` or `Production` you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment. e.g.\n\n<img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n\n\n## Applications\n\nA collection of best of breed software tools packaged as helm charts that come pre-integrated with Jenkins X such as: Nexus, ChartMuseum, Monocular, Prometheus, Grafana etc\n\n### Addons\n\nSome of these applications are baked in; like: Nexus, ChartMuseum, Monocular.  Others are provided as an `Addon` like [Grafana](https://github.com/grafana/grafana)\n\nTo install an addon then use the [jx create addon](/commands/jx_create_addon/) command. e.g.\n\n```sh\njx create addon grafana\n```\n",
            "content/en/about/concepts/technology.md": "---\ntitle: Technology Questions\nlinktitle: Technology Questions\ndescription: Technology questions on Kubernetes and the associated opens source projects\nweight: 50\n---\n\n## What is Helm?\n\n[helm](https://www.helm.sh/) is the open source package manager for Kubernetes.\n\nIt works like other package mangers (brew, yum, npm etc) where there's one or more repositories with packages to install (called `charts` in helm to keep with the nautical kubernetes theme) which can be searched/installed and upgraded.\n\nA [helm chart is basically a versioned tarball of kubernetes yaml](https://docs.helm.sh/developing_charts/#charts) which can be easily installed on any kubnernetes cluster.\n\nHelm supports composition (a chart can contain other charts) via the `requirements.yaml` file.\n\n\n## What is Skaffold?\n\n[skaffold](https://github.com/GoogleContainerTools/skaffold) is an open source tool for building docker images on kubernetes clusters and then deploying/upgrading them via `kubectl` or `helm`.\n\nOne of the challenges of building docker images inside a kubernetes cluster is there are various different approaches to handle this:\n\n* use the local docker daemon and socket of your kubernetes cluster\n* use a cloud service such as Google Cloud Builder\n* use a docker-daemon less approach such as [kaniko](https://github.com/GoogleContainerTools/kaniko) which does not require access to the docker daemon\n\nWhats nice about skaffold is it abstracts your code or CLI away from those details; you can define the policy for building docker images in your `skaffold.yaml` file to switch between docker daemon, GCB or kaniko etc.\n\nSkaffold is also really useful inside [DevPods](/docs/reference/devpods/) for doing fast incremental builds if you change the source code.\n\n\n## How does Helm compare to Skaffold?\n\n`helm` lets you install/upgrade packages called charts which use one or more docker images which are in some docker registry along with some kubernetes YAML to install/upgrade apps in a kubernetes cluster.\n\n`skaffold` is a tool for performing docker builds and optionally redeploying apps via `kubectl` or `helm` - either inside a CI/CD pipeline or when developing locally.\n\nJenkins X uses `skaffold` in its CI/CD pipelines to create docker images. We release versioned docker images and helm charts on each merge to master. Then we promote to environments via `helm`.\n\n## Whats is exposecontroller?\n\nIt turns out that exposing services outside of the Kubernetes cluster can be complex. e.g.\n\n* What domain to use?\n* Should you use TLS & generate certificates and associate them with the domains?\n* Are you using OpenShift if so then maybe using `Route` is better than using `Ingress`?\n\nSo we simplify microservices in Jenkins X by delegation to a microservice called [exposecontroller](https://github.com/jenkins-x/exposecontroller) who's job is to take care of that stuff - expose all `Service` resources which have a label to indicate they are intended to be exposed using the current cluster and namespaces's expose rules like the domain and whether or not to use TLS or `Route` versus `Ingress` etc.\n\nIf you look inside your environment git repository you may notice 2 `exposecontroller` [charts are there by default](https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml)\n\nThose are 2 jobs we use by default to automate generating or cleaning `Ingress` resources to expose labeled `Services`resources that you want to access from outside of the cluster. Eg web apps or rest apis.\n\nYou can opt out of exposecontroller if you want - just don\u2019t use the exposecontroller labels on your services. You could remove the exposecontroller job from an environment if you want - though none of our QuickStarts will be accessible from outside the cluster if you do!\n\n",
            "content/en/about/concepts/version-stream.md": "---\ntitle: Version Stream\nlinktitle: Version Stream\ndescription: How we improve stability of Jenkins X and its Apps\nweight: 60\n---\n\nJenkins X is made up of a large number of command line _packages_, _images_ and helm _charts_, some of which are released by the Jenkins X community and others come from the wider open source ecosystem.\n\nTo improve the stability of Jenkins X when lots of packages and charts are changing all the time we have introduced the Jenkins X `Version Stream`\n\n<figure>\n<img src=\"/images/jx-version-stream-v1.png\"/>\n<figcaption>\n<h5>Diagram depicts how a new JX version will be propagated through the components.</h5>\n</figcaption>\n</figure>\n\n## How it works\n\nThe version stream is stored in the [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) git repository and stores the stable version of all packages and charts used by Jenkins X.\n\nWhen you run a command, such as to [create a cluster](/docs/getting-started/setup/create-cluster/), [install on an existing cluster](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) or run a [jx upgrade](/commands/jx_upgrade/) command the `jx` command will ensure you have a local clone of the  [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) git repository and it will then pull the stable version of any chart or package from that source - or log a warning if a version is not yet being maintained.\n\nThe [jx](https://github.com/jenkins-x/jx) release now defaults to being released as a [prerelease](https://help.github.com/en/articles/creating-releases). Each release of jx is only updated to a full release so long as that released version successfully makes its way to the jenkins-x-versions repository where it also needs to pass another round of BDD tests (_see diagram above for more information_).\n\n## How we upgrade the Version Stream\n\nWe use GitOps and CI/CD to manage the Version Stream.\n\nAs new packages or charts are released we generate Pull Requests on the [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) git repository. We then trigger our [BDD tests](https://github.com/jenkins-x/bdd-jx) via [jx step bdd](/commands/jx_step_bdd/) and verify the new chart/package version works before merging changes. Currently we manually trigger the BDD tests via a comment of `/test this` - but we hope to move to periodic triggering of the BDD tests (e.g. once per day).\n\nPull Request approvers can also choose to run their own manual tests on Pull Requests if they want.\n\nUpon the successful completion of all BDD tests executed on the PR it will merge the change and execute an update to all jx dependencies (homebrew-jx, jx-docs, jx-tutorial and dev-env-base).\n\n## Creating Pull Requests\n\nWe have a simple CLI command [jx step create pullrequest versions](/commands/jx_step_create_pullrequest_versions/) which can be used to automatically generate Pull Requests on the [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) git repository.\n\nIf you are the maintainer of an upstream chart that is used by Jenkins X it would be awesome to add this command at the end of your release pipeline to generate a Pull Request for us to upgrade Jenkins X to use your new release (after the BDD tests have run to verify things still work):\n\n```sh\njx step create pullrequest versions -n mychartName -v 1.2.3\n```\n\nwhere `mychartName` is the fully qualified chart name using the remote repository prefix. e.g. `jenkins-x/prow` is the name of the `prow` chart maintained in the `jenkins-x` chart repository.\n\n### Periodic updates\n\nIts not always easy/possible to update upstream pipelines to push version changes to Jenkins X via a Pull Request. So you can setup a periodic job to check for version upgrades for all charts or charts matching some kind of wildcard.\n\ne.g. to upgrade the versions of all the `jenkins-x` maintained charts you can run this command:\n\n\n```sh\njx step create version pr -f \"jenkins-x/*\"\n```\n\n## Running the BDD tests\n\nFrom a git clone of master or a Pull Request you can run the BDD tests against the Pull Requests version combination by using the [jx step bdd](/commands/jx_step_bdd/) command and specifying `--dir .` for the directory of the clone.\n\ne.g. you can run the BDD tests yourself via...\n\n```sh\ngit clone https://github.com/jenkins-x/jenkins-x-versions.git\n\n#\u00a0env vars for the git / jenkins secrets\nexport GIT_PROVIDER=github\nexport GIT_PROVIDER_URL=https://github.com\nexport BUILD_NUMBER=10\nexport JENKINS_CREDS_PSW=mypassword\nexport GIT_CREDS_PSW=XXXXXXX\nexport GIT_USER=YYYYY\n\njx step bdd --dir . --config jx/bdd/staticjenkins.yaml --gopath /tmp --git-provider=$GIT_PROVIDER --git-provider-url=$GIT_PROVIDER_URL --git-username $GIT_USER --git-owner $GIT_USER --git-api-token $GIT_CREDS_PSW --default-admin-password $JENKINS_CREDS_PSW --no-delete-app --no-delete-repo --tests test-create-spring\n```\n\nThe various YAML files in the [jx/bdd folder](https://github.com/jenkins-x/jenkins-x-versions/tree/master/jx/bdd) contains a selection of different cluster configurations that can be used\n\n",
            "content/en/about/overview/_index.md": "---\ntitle: \"Overview\"\nlinkTitle: \"Overview\"\nweight: 1\ndescription: >\n  What is Jenkins X?\n\nmenu:\n  docs:\n    title: \"Overview\"\n    weight: 8\n---\n\nTo understand **intricacies and inner workings** of Jenkins X, we need to understand Kubernetes. But, you do not need to understand Kubernetes to **use Jenkins X**. That is one of the main contributions of the project. Jenkins X allows us to harness the power of Kubernetes without spending an eternity learning the ever-growing list of the things it does. Jenkins X helps us by simplifying complex processes into concepts that can be adopted quickly and without spending months in trying to figure out \"the right way to do stuff.\" It helps by removing and simplifying some of the problems caused by the overall complexity of Kubernetes and its ecosystem. If you are indeed a Kubernetes ninja, you will appreciate all the effort put into Jenkins X. If you're not, you will be able to jump right in and harness the power of Kubernetes without ripping your hair out of frustration caused by Kubernetes complexity.\n\nI'll skip telling you that Kubernetes is a container orchestrator, how it manages our deployments, and how it took over the world by the storm. You hopefully already know all that. Instead, I'll define Kubernetes as a platform to rule them all. Today, most software vendors are building their next generation of software to be Kubernetes-native or, at least, to work better inside it. A whole ecosystem is emerging and treating Kubernetes as a blank canvas. As a result, new tools are being added on a daily basis, and it is becoming evident that Kubernetes offers near-limitless possibilities. However, with that comes increased complexity. It is harder than ever to choose which tools to use. How are we going to develop our applications? How are we going to manage different environments? How are we going to package our applications? Which process are we going to apply for application life cycles? And so on and so forth. Assembling a Kubernetes cluster with all the tools and processes takes time, and learning how to use what we assembled feels like a never-ending story. Jenkins X aims to remove those and quite a few other obstacles.\n\nJenkins X is opinionated. It defines many aspects of the software development life cycle, and it makes decisions for us. It tells us what to do and how. It is like a tour guide on your vacations that shows you where to go, what to look at, when to take a photo, and when it's time to take a break. At the same time, it is flexible and allows power users to tweak it to fit their own needs.\n\nThe real power behind Jenkins X is the process, the selection of tools, and the glue that wraps everything into one cohesive unit that is easy to learn and use. We (people working in the software industry) tend to reinvent the wheel all the time. We spend countless hours trying to figure out how to develop our applications faster and how to have a local environment that is as close to production as possible. We dedicate time searching for tools that will allow us to package and deploy our applications more efficiently. We design the steps that form a continuous delivery pipeline. We write scripts that automate repetitive tasks. And yet, we cannot escape the feeling that we are likely reinventing things that were already done by others. Jenkins X is designed to help us with those decisions, and it helps us to pick the right tools for a job. It is a collection of industry's best practices. In some cases, Jenkins X is the one defining those practices, while in others it helps us adopting those made by others.\n\nIf we are about to start working on a new project, Jenkins X will create the structure and the required files. If we need a Kubernetes cluster with all the tools selected, installed, and configured, Jenkins X will do that. If we need to create Git repositories, set webhooks, and create continuous delivery pipelines, all we need to do is execute a single `jx` command. The list of what Jenkins X does is vast, and it grows every day.\n\nI won't go into details of everything Jenkins X does. That will come later. For now, I hope I got your attention. The critical thing to note is that you need to clear your mind from any Jenkins experience you might already have. Sure, Jenkins is there, but it is only a part of the package. Jenkins X is very different from the \"traditional Jenkins\". The differences are so massive that the only way for you to embrace it is to forget what you know about Jenkins and start from scratch.\n\n",
            "content/en/about/overview/accelerate.md": "---\ntitle: Accelerate\nlinktitle: Accelerate\ndescription: Jenkins X uses Capabilities identified by the Accelerate book\nweight: 20\naliases:\n  - /about/accelerate\n---\n\n<img src=\"/images/accelerate.jpg\" class=\"img-thumbnail\">\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influenced by the State of DevOps reports and more recently the [Accelerate](https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339) book from [Nicole Forsgren](https://twitter.com/nicolefv), [Jez Humble](https://twitter.com/jezhumble) and [Gene Kim](https://twitter.com/RealGeneKim?).  \n\nYears of gathering data from real world teams and organizations which has been analyzed by inspiring thought leaders and data scientists from the DevOps world.  The Accelerate book recommends a number of capabilities that Jenkins X is implementing so users gain the scientifically proven benefits, out of the box.  We've started documenting the capabilities that are available today and will continue as more become available.\n\n<img src=\"/images/capabilities.png\" class=\"img-thumbnail\">\n\n# Use version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application, version upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have checks run against it like a form of CI for environments and approved by a team that has control over what goes into the related environment.  We now enable governance have full traceability for any change to an environment.\n\n_Related Accelerate capability:  Use version control for all production artifacts_\n\n# Automate your deployment process\n\n## Environments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using `jx create environment`.  Additionally when creating new applications via a quickstart (`jx create quickstart`), Java based SpringBoot (`jx create spring`) or importing existing applications (`jx import`), Jenkins X will both automatically add CI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customizable) permanent environments as well as temporary environments for preview applications from Pull Requests.\n\n### Previews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it's merged to master.  With the use of temporary dynamically created Preview Environments any Pull Request can have a preview version built and deployed, including libraries that feed into a downstream deployable application.  This means we can code review, test, collaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they can that when a change is merged to master it works as expected.  We want to be confident the proposed change does not negatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a short term PR through various stages of maturity and confidence where we begin to direct a percentage of real production traffic (either shadow traffic or even beta users).  We can then analyze the value of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.  This helps give us better understanding of how the change will perform when released to all users. Though we need to make sure PRs stay short lived for trunk based development; lets try avoid PRs turning into long term feature branches! \n\n_Related Accelerate capability: Foster and enable team experimentation_\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don't yet have examples of automated tests being run against a preview environment.  A simple test would be to ensure the application starts ok and Kubernetes liveness check pass for an amount of time. This relates to \n\n_Related Accelerate capability: Implement Test Automation_\n_Related Accelerate capability: Automate your deployment process_\n\n### Permanent Environments\n\nIn software development we're used to working with multiple environments in the lead up to a change being promoted to a live production environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any reason that it is deemed not fit via some process that didn't happen pre merge to master.  Subsequent commits then become blocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in a staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customizable to suite your own CI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data shadowed to it using a service mesh to understand the behavior.  This also helps when developing changes in preview where we can link to non production services in staging.\n\n_Related Accelerate capability: Automate your deployment process_\n\n# Use trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has always worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up Git repositories and CI/CD jobs.\n\n# Implement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via Pull Requests before it is merged to master.  Jenkins X will automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration out of the box.\n\n# Implement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it's been merged to master through to running in a live environment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we don't need to store the latest release version in the master branch.  Where release systems do store the last or next version in Git repos it means CD becomes hard, as a commit in a release pipeline back to master triggers a new release.  This results in a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on __every__ merge to master which can then potentially progress through to production.\n\n# Use loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop loosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container scheduling and orchestration to name just a few examples of where Kubernetes helps.\n\n# Architect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with language detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is provide a consistent Way Of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualization.  In this example centralized metrics help understand how your applications behave when built and deployed on Kubernetes.\n\n[DevPods](/docs/reference/devpods/) are another feature which enables developers to edit source code in their local IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and  feedback empowers them to make the best decisions - faster.\n",
            "content/en/about/overview/changelog.md": "---\ntitle: Changelog\nlinktitle: Changelog\ndescription: Current status of Jenkins X\ndate: 2018-02-01\npublishdate: 2018-02-01\nlastmod: 2018-02-01\nweight: 10\ntype: docs\n---\n\nRefer to the [Jenkins X Capabilities Matrix](/about/capabilities) for cloud provider support maturity.\n\n# Status Reports\n\nThis section describes any specific manual work arounds you may require above and beyond changes described in the [News section](/blog/news/) or using [jx upgrade](/commands/jx_upgrade/) to upgrade the [CLI](/commands/jx_upgrade_cli/) or [platform](/commands/deprecation/).\n\n\n## 25th June 2019: missing image: bitnami/monocular-api\n\nIt looks like the monocular docker images got removed today!\n\nIt turns out that monocular is not an absolute requirement for Jenkins X; it works great without it.\n\nSo a quick workaround to the problem is to scale down your monocular deployment:\n\n```sh\nkubectl scale deploy jenkins-x-monocular-api --replicas=0\nkubectl scale deploy jenkins-x-monocular-prerender --replicas=0\nkubectl scale deploy jenkins-x-monocular-ui --replicas=0\n```\n\nThe latest [version stream release](/about/concepts/version-stream/) has removed monocular so if you [upgrade your platform\n](/docs/resources/guides/managing-jx/common-tasks/upgrade-jx/) this issue should be resolved.\n\nWe can always add monocular back as an optional [App](/docs/contributing/addons/) later on when it works again.\n\n\n## 12th June 2019: Knative Build now deprecated\n\nKnative Build was our first attempt at building a serverless offering in Jenkins X. Since then Knative build got replaced with the more powerful Knative Build Pipelines which then got moved and renamed to [Tekton](https://tekton.dev/).\n\nSo we highly recommend anyone who has created a Jenkins X installation using Knative build to move to a [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) cluster using Tekton instead.\n\nNow the `jx` binary will warn that any attempt at using `--knative-build` when installing is deprecated.\n\n## 21st May 2019: Skaffold upgrade to v0.29.0\n\nWe have noticed an incompatibility with older Skaffold configuration files and the new v0.29.0 Skaffold release.  Freshly generated applications will not suffer from this problem, but for existing applications changes to the configuration file may be required.\n\nIf you are running a static master or serverless (Jenkins file runner) cluster and are having issues building existing applications with the following error `creating runner: invalid skaffold config: required value not set: image` you will need to modify your `skaffold.yaml`.\n\nIn the `dev` profile, remove the following section:\n\n```yaml\n    artifacts:\n    - docker: {}\n```\n\nFor more information, refer to this [PR](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/pull/50/files).\n\n## 16th April 2019: Jenkins X 2.x\n\nWe are pleased to announce 2.0.x of Jenkins X.\n\nWe have changed some of the default CLI arguments when installing Jenkins X.\n\n* we are now deprecating the use of Knative build with Prow / Serverless Jenkins in favor of [Jenkins X Pipelines and Tekton](/about/concepts/jenkins-x-pipelines/).\n* we default to using `--no-tiller`  to [disable the use of helm's tiller](/news/helm-without-tiller/). We recommend to avoid tiller. If you really still want to use it then use `--no-tiller false` on the CLI when installing Jenkins X.\n\n\n## 6th Feb 2019: Regression in `jx-install-config` secret.\n\nWe have spotted a regression in the install process that generates an invalid config file inside the secret `jx-install-config` secret.  Whilst the original defect has been fixed, the invalid secret will create an issue with `jx upgrade platform` causing the cluster to loose all secrets.\n\nTo work around this, we have added some logic into `jx upgrade platform` to detect the invalid secret and attempt to fix.  This feature is included in jx version `1.3.842`.  An extract of a running upgrade is shown below:\n\n```sh\nCreating /Users/garethjevans/.jx/adminSecrets.yaml from jx-install-config\nCreating /Users/garethjevans/.jx/extraValues.yaml from jx-install-config\nWe have detected that the /Users/garethjevans/.jx/adminSecrets.yaml file has an invalid format\n? Would you like to repair the file? Yes\n```\n\n## 1st Feb 2019: Changes to the default Nexus configuration\n\nAnonymous access to Nexus has been disabled by default, this has implications to those running Maven based builds.  To support this, the maven settings.xml injected into each build pod needs to be modified.\n\nThis can be done automatically using:\n\n```sh\njx upgrade platform --update-secrets\n```\n\nNOTE: this will regenerate the settings.xml from a defined template.\n\nIf you would prefer to apply this changes manually, edit the secret `jenkins-maven-settings`, duplicating the server block for `local-nexus`, changing the server id to `nexus` e.g.\n\n```xml\n<server>\n    <id>local-nexus</id>\n    <username>admin</username>\n    <password>%s</password>\n</server>\n<server>\n    <id>nexus</id>\n    <username>admin</username>\n    <password>%s</password>\n</server>\n```\n\n## 8 Jan 2019: Prow and Knative Build upgrade\n\nThere are three critical bugs with the prow based Jenkins X\nhttps://github.com/jenkins-x/jx/issues/2539\nhttps://github.com/jenkins-x/jx/issues/2561\nhttps://github.com/jenkins-x/jx/issues/2544\n\nThe fixes involve upgrading to a newer version of Prow and Knative Build, the latter caused an issue when performing a traditional `jx upgrade addon` so we recommend uninstalling Knative Build first (removes Knative Build related Custom Resource Definitions) and install the latest release.\n\n```sh\njx delete addon knative-build\n```\n\nAnd to be extra sure it\u2019s gone maybe do an extra:\n\n```sh\nhelm del --purge knative-build\n```\n\nthen:\n\n```sh\njx upgrade cli\njx upgrade addon prow\n```\n\nBut this means any existing builds or custom changes to `BuildTemplate` resources will be lost.\n\n\n## 5 Jan 2019: environment git repository issue\n\nThere was a regression added a few weeks ago which led to new installations setting up invalid `exposecontroller` configuration in your `Staging/Production` git repositories. See the [issue and workaround](https://github.com/jenkins-x/jx/issues/2591#issuecomment-451516674).\n\nMake sure that the `env/values.yaml` file for your environment git repository uses `expose:` as the key in the YAML and not `exposecontroller:` - if it uses `exposecontroller:` just edit it back to `expose:` and you should be good to go!\n\nAlso we have noticed a possible regression with helm where if you have multiple `expose:` sections in your environment `env/values.yaml` it can disable the `exposecontroller` post install helm hook which can break the creation of `Ingress` resources in your environment - if you have more than one `expose:` sections please combine them into a single entry.\n\n",
            "content/en/about/overview/license.md": "---\ntitle: Apache License\nlinktitle: License\ndescription: Jenkins X is released under the Apache 2.0 license.\ndate: 2018-02-01\npublishdate: 2018-02-01\nlastmod: 2018-03-02\ncategories: [\"about jenkins x\"]\nkeywords: [\"License\",\"apache\"]\nweight: 30\n---\n\n{{< pageinfo >}}\nJenkins X is released under the Apache 2.0 license.\n{{< /pageinfo >}}\n\n_Version 2.0, January 2004_ <br>\n<http://www.apache.org/licenses/LICENSE-2.0>\n\n*Terms and Conditions for use, reproduction, and distribution*\n\n## 1. Definitions\n\n\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \u201ccontrol\u201d means **(i)** the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or **(ii)** ownership of fifty percent (50%) or more of the\noutstanding shares, or **(iii)** beneficial ownership of such entity.\n\n\u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\u201cSource\u201d form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\u201cObject\u201d form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\u201cContribution\u201d shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\u201csubmitted\u201d means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \u201cNot a Contribution.\u201d\n\n\u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n## 2. Grant of Copyright License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n## 3. Grant of Patent License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n## 4. Redistribution\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\n* **(a)** You must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\n* **(b)** You must cause any modified files to carry prominent notices stating that You\nchanged the files; and\n* **\\(c)** You must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\n* **(d)** If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n## 5. Submission of Contributions\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n## 6. Trademarks\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n## 7. Disclaimer of Warranty\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n## 8. Limitation of Liability\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n## 9. Accepting Warranty or Additional Liability\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\n_END OF TERMS AND CONDITIONS_\n\n## APPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets `[]` replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives.\n\n```txt\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\nAdd this as a file called `apache-notice.txt` to the root of your repo.",
            "content/en/blog/_index.md": "---\ntitle: \"Jenkins X Blog\"\nlinkTitle: \"Blog\"\nmenu:\n  main:\n    weight: 30\n---\n\nAlso see [what others are writing about Jenkins X on the web](/docs/resources/demos-talks-posts/articles/) and [Talks and Conferences](/docs/resources/demos-talks-posts/talks/)\n",
            "content/en/blog/news/2019-hackathon-lisbon.md": "---\ntitle: \"Contribute to Jenkins X at our Hackathon in Lisbon on\n2 December\"\ndate: 2019-11-08\ndraft: false\ndescription: >\n  Jenkins X Hackathon, Monday December 2, 2019!\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-x-hackathon-lisbon\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure>\n<img src=\"/images/community/events/throwing-x-kubecon-china-2019.jpg\"/> \n</figure>\n\nWe're having a Jenkins X hackathon in Lisbon on December 2! The hackathon is free to attend and will be a joint hackathon with the [Jenkins project](https://jenkins.io/).\n\n[Register here](https://www.meetup.com/jenkinsmeetup/events/266201129) to participate in the hackathon. All levels of contributors are welcome!\n\nPlease note this hackathon takes place the day before [the Jenkins X Contributor Summit](/blog/2019/10/18/jenkins-x-contributor-summit-lisbon/), which is also free to attend and we would love to see you at both.\n\nThese events are being organised for the community in the days prior to [DevOps World | Jenkins World Lisbon](https://www.cloudbees.com/devops-world/lisbon). We realised many Jenkins X and Jenkins community members will be attending the conference and  wanted to create additional opportunities for community members to meet and collaborate. \n\nA [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/lisbon) conference pass is not necessary to attend the hackathon or [the Jenkins X Contributor Summit](/blog/2019/10/18/jenkins-x-contributor-summit-lisbon/). However, if you are planning on attending DevOps World | Jenkins World, the conference organizers are offering a 30% discount on registration with code **JWFOSS**.\n\n\n**Hackathon Agenda:**\n\n* 9:00 am - Welcome with coffee/pastries\n* 9:30 am - Introductions & topic discussions\n* 10:30 am - Hacking starts\n* 12:00 pm - Lunch\n* 1:00 pm - More hacking\n* 5:00 pm - Wrap-up\n\nHope to see you there! \n\nRemember to [register](https://www.meetup.com/jenkinsmeetup/events/266201129) if you can attend.\n\n",
            "content/en/blog/news/2019-outreachy-welcome.md": "---\ntitle: \"Welcome Neha Gupta to Jenkins X as our Outreachy intern\"\ndate: 2019-11-28\ndraft: false\ndescription: >\n  Jenkins X is thrilled to participate in Outreachy \ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-x-outreachy-welcome\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure> \n<img src=\"/images/community/events/outreachy_group_photo.png\"/> \n</figure>\n\nWith sponsorship from the [CDF (Continuous Delivery Foundation)](https://cd.foundation/), Jenkins X is participating in the [Outreachy mentorship program](https://www.outreachy.org/). This is the first time that Jenkins X will be participating in Outreachy and we are fortunate to be working with such a phenomenal organisation. You can read more about our decision to participate in Outreachy [here](/blog/2019/10/01/outreachy2019/).\n\nWe're excited to announce that an intern has been selected! [Neha Gupta](https://www.linkedin.com/in/neha-gup/) will be working with us to create a cloud storage backed Helm repository for Jenkins X to replace ChartMuseum.\n\nWe are grateful for the contributions that we received from all applicants. While we can only offer one paid internship at this time, [our community](/community/) is willing to help all newcomers to the Jenkins X project to learn and grow in their skills.\n\nWelcome to the team, Neha! \ud83c\udf89 ",
            "content/en/blog/news/2020-accelerate-tekton.md": "---\ntitle: \"Accelerate your Tekton with Jenkins X\"\ndate: 2020-11-11\ndraft: false\ndescription: how to reuse, share and customise Tekton Pipelines and the Tekton Catalog with Jenkins X\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"accelerate-tekton\"\naliases: []\nauthor: James Strachan\n---\n\nOne of the goals of [Jenkins X](https://jenkins-x.io/) has always been to help [accelerate](/about/overview/accelerate/) and automate Continuous Delivery so that developers can focus on delivering value to their customers; either by creating that new microservice or adding features to an existing project and not writing and managing pipelines.\n\nPipeline engines like [Jenkins](https://www.jenkins.io/) and [Tekton](https://tekton.dev/) are awesome - they can do anything! But they start as a blank sheet of paper where you have to fill in all the details of how to compile your code, test it, verify it, tag it, release, distribute and delivery it to production. Figuring all that stuff out can take a huge amount of time to create and maintain. This gets even more complex as we are all creating more and more microservices each with their own pipelines making more and more things to create and manage.\n\nWe want to be able to reuse pipelines and tasks to get work done. But at the same time we want flexibility; not all applications are the same and sometimes things need to be changed on a per team or application basis.\n\n## Version 2.x\n\nIn Jenkins X 2.x we went with a `jenkins-x.xml` approach to pipelines which let you inherit pipelines from reuable pipeline library and then use a composition DSL above [Tekton](https://tekton.dev/) which lets you add/remove/replace steps.\n\ne.g. to use the `javascript` pipeline library but override a step you could use:\n\n```yaml \nbuildPack: javascript\npipelineConfig:\n  pipelines:\n    overrides:\n      - pipeline: release\n        name: helm-release\n        step: \n          image: busybox\n          sh: echo \"this command is replaced\"\n``` \n\nThis was a pretty good approach; it lets us reuse common pipelines in a shared git repository and let's reuse a composition DSL.\n\nHowever we've found that this approach as a few downsides:\n\n* we have to create and maintain a DSL above Tekton which adds complexity and can be a leaky abstraction\n  * e.g. the DSL does not yet support all of the semantics of Tekton yet such as conditions, [runAfter](https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#using-the-runafter-parameter) or [finally tasks](https://github.com/tektoncd/pipeline/blob/master/docs/pipelines.md#adding-finally-to-the-pipeline)\n  * tekton moves fast; it's hard to keep up in a DSL ;)\n* its complex trying to understand how to make local modifications of pipelines\n  * particularly if you just want to add an environment variable; modify a command line argument or something\n* we can't use [IDE tooling](/v3/develop/pipeline-catalog/#ide-support) for [Tekton](https://tekton.dev/) to edit/visualise pipelines\n* we can't reuse [Tekton Catalog tasks](https://github.com/tektoncd/catalog)\n\n\n## Vision\n\nWe want developers to have reusable pipelines for all their applications lifecycles: \n\n* continuous integration\n* verification, testing, linting\n* releasing, packaging, promoting, deploying\n\nWe also want to:\n\n* automate the generation of pipelines so most of the time developers don't need to care about pipelines\n* reuse pipelines across applications\n  * usually all, say, spring boot microservices tend to be built and released in the same way\n* make it easy for developers to view/edit the pipelines if required\n  * maintain those changes over time as everything in the cloud native ecosystem is changing all the time\n\nFrom a technical perspective:\n\n* we believe [Tekton](https://tekton.dev/) is currently the best cloud native standard way to represent pipelines and tasks for Continuous Delivery and we want that to be the primary DSL for developers and tools \n* we want to work with the [Tekton Catalog](https://github.com/tektoncd/catalog) so its easy to share tasks among teams\n\n\n## Version 3.x\n\nFor [Jenkins X 3.x](/v3/) we really wanted to move closer to this vision: to _accelerate_ the adoption of Tekton and help give developers Tekton super powers.\n\nRe-reading [Brian Grant's document on Declarative application management in Kubernetes](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/architecture/declarative-application-management.md) really got us thinking about this problem of how to reuse complex YAML files for pipelines and tasks while also allowing local modifications while also avoiding a complex leaky DSL for composition.\n\nThen we tried out [kpt](https://googlecontainertools.github.io/kpt/) (pronounced `kept`) and everything fell into place pretty quickly.\n\n\n### Using Tekton in your repository\n\nWhen you [create a new quickstart](/v3/develop/create-project/#create-a-new-project-from-a-quickstart) or [import a repository](/v3/develop/create-project/#import-an-existing-project) into [Jenkins X 3.x](/v3/) you get a new folder: **.lighthouse/jenkins-x** added to your source code which contains the Tekton pipeline files you need for your application.\n\nSo for a typical application the **.lighthouse/jenkins-x** folder will contain: \n\n* **release.yaml** the Tekton `PipelineRun` for releasing your application \n* **pullrequest.yaml** the Tekton `PipelineRun` for perform continuous integration testing, verification and the creation of a Preview Environment for your proposed changes before they merge to the main branch\n* **triggers.yaml** to define the [lighthouse](https://github.com/jenkins-x/lighthouse) [TriggerConfig](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config) which defines the [ChatOps](/docs/resources/faq/using/chatops/#what-is-chatops) and triggering configuration via a [spec field](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec) which defines [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) and [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) (i.e. Pull Request and Release triggers).\n\nSee the [Pipeline Catalog documentation](/v3/develop/pipeline-catalog/) for more details on how this works and go to the [reference guide](/v3/develop/pipeline-catalog/#reference-guide) if you want to dive into the details.\n\nAs a developer you can mostly ignore the `.lighthouse` folder if you don't care about how the pipelines work. If you are interested you can look inside.\n\nIf you need to modify anything, just open the Tekton files in your [IDE](/v3/develop/pipeline-catalog/#ide-support) and modify them. No complex DSL to understand other than Tekton itself. Then the changes will be used when you submit your local changes via a Pull Request (for the pull request pipeline) or they get merged to the main branch (for release pipeline changes).\n\nTo handle change going forward from upstream pipeline catalogs while preserving any local modifications we use a generic [update mechanism on all git repositories](/v3/develop/pipeline-catalog/#upgrading-pipelines-and-helm-charts) which is powered by [kpt](https://googlecontainertools.github.io/kpt/)  \n\n\n### Reusing Tekton Catalog Tasks\n\nThe [Tekton Catalog](https://github.com/tektoncd/catalog) contains a ton of reusable Tekton `Tasks` for doing all kinds of things in the Continuous Delivery landscape with a variety of tools.\n \nWe want to make it super easy for you to reuse any of them easily in your project.\n\nSo now the new [jx pipeline import](https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_import.md) command can be used to import `Task` resources from the [Tekton Catalog](https://github.com/tektoncd/catalog) so you can use them inside your project. \n\nHere's a [demo of this in action](https://asciinema.org/a/368282):\n\n<script src=\"https://asciinema.org/a/368282.js\" id=\"asciicast-368282\" async></script>\n\nThe tekton Task resources are copied into your **.lighthouse** directory in a folder using [kpt](https://googlecontainertools.github.io/kpt/) so that you can modify things locally if you need to and can [upgrade your local copy with upstream changes](/v3/develop/pipeline-catalog/#upgrading-pipelines-and-helm-charts).\n\nThis lets you work with shared resources from the Tekton community and, when required, modify them to suit and manage them easily over time.\n\n\n### Sharing steps between Tasks\n\n[Tekton](https://tekton.dev/) makes it super easy to share `Task` resources between different `Pipeline` instances. Though there is a current [limitation](https://github.com/tektoncd/pipeline/issues/3476) where splitting a `Pipeline` into multiple reusable `Task` instances results in the pipeline being split among multiple `Pod` resources; which means to share state between the Tasks you need to use a `Persistent Volume` for each pipeline run which can be a bit of an overhead. \n\nFor example: you may think it's a nice idea to have a reusable `Task` to git clone your source code then use it with your other `Task` to run your tests. It turns out that can be quite expensive infrastructure wise; as it means your cluster will end up making a Persistent Volume for each pipeline invocation so that the git clone pod can clone git and store the state on the PV so that your real Task pod can start and mount the same volume to see the contents of git. Its much easier to just share the git clone steps in each Task; so that there's no need for the PV; just git clone in each separate Task directly.\n\nSo for cases where you want to reuse a collection of steps inside `Task` resources we added an annotation in [lighthouse](https://github.com/jenkins-x/lighthouse) so that we can import steps from a URL to avoid the copy/paste. \n\ne.g. in our [pipeline catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs) we use this approach to share the git clone Task steps such as [this example](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/javascript/.lighthouse/jenkins-x/release.yaml#L4-L5):\n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: Task\nmetadata:\n  annotations:        \n    # lets share the git clone tasks as the initial steps in this Task\n    lighthouse.jenkins-x.io/prependStepsURL: https://raw.githubusercontent.com/jenkins-x/jx3-pipeline-catalog/005e78cf69b643862344397a635736a51dd1bd89/tasks/git-clone/git-clone.yaml\nspec:\n  ...\n```\n\nHopefully we can migrate to a standard tekton based approach [if this issue is resolved](https://github.com/tektoncd/pipeline/issues/3476).  \n\n\n### Custom Pipeline Catalogs\n\n[Tekton Catalog](https://github.com/tektoncd/catalog) is an awesome way to reuse Tasks but it doesn't help when trying to reuse complete `PipelineRun` and `Pipeline` resources across projects and repositories while also being able to modify them as needed on a per team or repository basis.\n\n[Jenkins X 3.x](/v3/) comes with its own default [pipeline catalog for different languages, tools and frameworks](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs). This catalog contains reusable steps, Tasks and Pipelines you can use on any project. \n\nIt's easy for you to fork this catalog to make changes for your team or share between teams in your company. You can make as many catalogs as you like and put whichever catalogs you want in the `extensions/pipeline-catalogs.yaml` file of your cluster git repository of your [Jenkins X 3.x install](/v3/). For more detail there's the [configuration reference here](https://github.com/jenkins-x/jx-project/blob/master/docs/config.md#project.jenkins-x.io/v1alpha1.PipelineCatalog).\n\nThen when developers [create a new quickstart](/v3/develop/create-project/#create-a-new-project-from-a-quickstart) or [import a repository](/v3/develop/create-project/#import-an-existing-project) developers will be asked to pick the catalog they want from your list if there is more than one, or the configured catalog is silently used.\n\nThis gives you complete freedom to configure things at a global, team or repository level while also making it easy to share changes across projects, teams and companies.\n\n\n### Conclusion\n\nWe are super excited about the combination of [Jenkins X 3.x](/v3/), [Tekton](https://tekton.dev/), [Tekton Catalog](https://github.com/tektoncd/catalog) and ChatOps.  \n \nWe hope that you can use the above capabilities to solve your Continuous Delivery needs and over time you can take your Pipelines and make your own Pipeline Catalogs and share them with folks inside and outside of your company. \n\nHopefully this can help us all accelerate our Tekton pipelines and catalogs towards more continuous delivery awesome with flexible reusable tasks and pipelines! If you want to give this a try [check out Jenkins X 3.x](/v3/)\n\n\n\n\n",
            "content/en/blog/news/2020-cdcon.md": "---\ntitle: \"Jenkins X Talks at CDCon\"\ndate: 2020-09-16\ndraft: false\ndescription: Learn more about Jenkins X at CDCon on Oct 7-8\n  \ncategories: [blog]\nkeywords: [CICD, Pipeline as Code, GitOps, Machine Learning, CDCon, 2020]\nslug: \"cdcon2020\"\naliases: []\nauthor: Roxanne Joncas\n---\nThere will be six Jenkins X talks given by various speakers at the first-ever [CDCon](https://events.linuxfoundation.org/cdcon/) on October 7-8. The two-day virtual event, hosted by the Continuous Delivery Foundation, will focus on improving the world's capacity to deliver software with security and speed. \n\n[Register](https://events.linuxfoundation.org/cdcon/) to attend the virtual event for only 25 USD and get access to all of the following Jenkins X talks and more.\n\n## Wednesday, October 7\n\n**[A CI/CD Framework for Production Machine Learning at Massive Scale (using Jenkins X and Seldon Core)](https://cdcon2020.sched.com/event/dpvW/a-cicd-framework-for-production-machine-learning-at-massive-scale-using-jenkins-x-and-seldon-core-alejandro-saucedo-seldon)**\n**Speaker:** Alejandro Saucedo, Seldon\n**Time:** 1:15 PM PDT\n\nManaging production machine learning systems as internal data science infrastructure requirements grow, has uncovered new challenges which have required fundamentally different approaches to that of traditional CI/CD in software engineering. In this talk we will dive into the work we are doing at the SIG-MLOps and the CD Foundation towards developing the methodologies that encompass best practices to continuously integrate and deploy machine learning in production at massive scale. In this talk, we'll provide key insights on the core MLOps concepts, as well as a hands-on coding example where we take a text classification model through its training, deployment and promotion as canary and shadow deployments, which will also allow us to get deeper and more specific insight on our production environment.\n\n**[Dailymotion's Continuous Delivery Story](https://cdcon2020.sched.com/event/dpvQ/dailymotions-continuous-delivery-story-vincent-behar-dailymotion)**\n**Speaker:** Vincent Behar, Dailymotion\n**Time:** 3:30 PM PDT\n\nIn this session, Vincent will share Dailymotion's Continuous Delivery story with Jenkins, Jenkins X and Tekton. He will come back on the initial state and issues faced on the CI/CD topic, and how it was solved. He will insist on the practices that were put in place and the benefits that resulted from switching to Jenkins X. He will conclude with the new challenges brought by improving Dailymotion's Continuous Delivery platform. If you are wondering if Jenkins X is the right tool for you, and the impact it can have on your team(s), then this is the right session for you!\n\n## Thursday, October 8\n\n**[Moving from Jenkins to Jenkins X: Scaling and Accelerating CI/CD](https://cdcon2020.sched.com/event/e2NG/moving-from-jenkins-to-jenkins-x-scaling-and-accelerating-cicd-dr-michael-garbade-education-ecosystem)**\n**Speaker:** Dr Michael Garbade, Education Ecosystem\n**Time:** 12:00 PM PDT\n\nJenkins has served as a continuous integration (CI) tool long before the emergence of Kubernetes and distributed systems running on cloud-native platforms.\nWorking with Jenkins as a stand-alone open-source tool has proved to be extremely difficult for distributed systems engineers, as it is designed for small projects and not scalable to bigger projects.\nJenkins X has emerged as a way to both improve and automate continuous delivery pipelines to Kubernetes and cloud-native environments.\nIn this talk, we will discuss the limitations of Jenkins, how Jenkins X addresses those limitations, how it leverages open source and commercial CI/CD tools for easier bug fixes, faster deployments, stability, consistency and improved communication.\n\n**[Enable a Pipeline As Code Capability for 12,000 Developers](https://cdcon2020.sched.com/event/dpvc/enable-a-pipeline-as-code-capability-for-12000-developers-jimmy-mcnamara-fidelity-investments)**\n**Speaker:** Jimmy McNamara, Fidelity Investments\n**Time:** 1:00 PM PDT\n\nAoife Fitzmaurice and Jimmy McNamara take us through a journey on how Fidelity Investments plans to roll out a Pipeline As Code capability to 12,000 developers. Leveraging cloud-based Kubernetes platforms to ensure best operational outcomes the team is driven to enable this best practice capability across Fidelity. This capability is key to assisting the growth of both an inner-sourcing and open-sourcing culture throughout the firm.\n\n**[GitOps and Secrets](https://cdcon2020.sched.com/event/dqON/gitops-and-secrets-kara-de-la-marck-cloudbees)**\n**Speaker:** Kara de la Marck, CloudBees\n**Time:** 1:00 PM PDT\n\nGitOps uses Git as the \u201csingle source of truth\u201d for declarative infrastructure and enables developers to manage infrastructure with the same Git pull requests they use to manage a codebase. Having all configuration files version-controlled by Git has many advantages, but best practices for securely managing secrets with GitOps remain contested. Join us in this presentation about GitOps and secret management. Attendees will learn about the pros and cons of various approaches and why the Jenkins X project has chosen to standardize on Kubernetes external secrets for secret management.\n\n**[Kubernetes Chaos Engineering With Chaos Toolkit and Jenkins X](https://cdcon2020.sched.com/event/dpvT/kubernetes-chaos-engineering-with-chaos-toolkit-and-jenkins-x-viktor-farcic-cloudbees)**\n**Speaker:** Viktor Farcic, CloudBees\n**Time:** 3:15 PM PDT\n\nThe only thing more satisfying than being able to destroy things without consequences is to be awarded for destruction. If you do have destructive tendencies, but you'd like to convert them into something positive, chaos engineering might be just the thing you need. We'll explore through a hands-on demo on how to use Chaos Toolkit to define and run chaos experiments inside a Kubernetes cluster with Istio. We'll see a few use-cases of potential problems that can be detected and solved. We'll automate the deployment of chaos experiments using Jenkins X and make them an integral part of our continuous delivery pipelines.\n\n## Register for CDCon\n\nDon't miss out on these great talks. [Register for CDCon](https://events.linuxfoundation.org/cdcon/) to attend.\n\nCDCon has pledged to donate 100% of the proceeds received from CDCon 2020 registration to charitable causes: Black Girls Code, Women Who Code and the CDF Diversity Fund. Registrants indicate which charitable fund they want their 25 USD registration fees to go to during registration. If you can\u2019t afford the registration cost, please apply for the [diversity scholarship](https://events.linuxfoundation.org/cdcon/attend/scholarships/).\n\n![CDCon Banner](/images/cdcon-register.png)\n",
            "content/en/blog/news/2020-cjxd-upstreamjx-future.md": "---\ntitle: \"CJXD to upstream Jenkins X to the future\"\ndate: 2020-07-29\ndraft: false\ndescription: >\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"cjxdtoupstreamjxtofuture\"\naliases: []\nauthor: James Rawlings\n---\n\nCJXD was first introduced at the end of July 2019 with the aim to provide a more stable version of Jenkins X that was under heavy development.  The release cadence was reduced to one per month, the upgrade process well tested and a large focus on stability issues was taken on.  It is fair to say that this was not only expected but absolutely needed by users of Jenkins X to service their own software delivery. A little over a year on we are now in a better place, following the improvements above means we are now able to focus all attention back towards the upstream Jenkins X and look towards where Jenkins X needs to go next.  There is still much to do, areas which require attention in design, upgrades related to other projects and innovation to explore.  With that, the need for CJXD over and above using upstream Jenkins X is reduced.  CloudBees will stop releasing CJXD builds and focus purely upstream and it\u2019s engineering efforts towards working with the OSS community on JX3 Alpha, Beta, GA and beyond.\n\nJX3 is in a relatively early stage, we have an enhancement issue [here](https://github.com/jenkins-x/enhancements/issues/36) and plan to start showing some initial developments and design docs to help people get involved in the next week or two.\n\nWhile the OSS community works on getting JX3 to GA, users of CJXD have a few options.  Both option 1 and 2 below involve moving to the stable upstream JX2.  One important note here is you will need to remove the Jenkins X UI as this a CloudBees specific offering and will not continue in favour of the new extensible OSS UI powered by Octant.  This was demo\u2019d at the [recent office hours](https://youtu.be/Njl247hjRuU) as well as discussing some next steps we are working through for JX3.\n\n__Option 1:__ Upgrade your existing CJXD installation to upstream JX2.  There are some steps on how to do this below, there may be some edge cases in doing this but as in all the options here the OSS community in on hand to help https://jenkins-x.io/community/\n\n_Notes:_\n- You will continue to be able to apply JX2 upgrades.  \n- No backwards compatible upgrade for Vault if you are using it.  The migration configuration steps below will omit Vault from this and future upgrades.  Note for JX3 we are working on using external secrets as an abstraction above lots of secret store implementations.  So for now we recommend keeping on the Vault Operator 0.4.16 release and manage the Vault upgrade along with the JX 3 external secrets work.\n\n__Option 2:__ Create a brand new JX2 cluster and jx import your git repositories.\n\n__Option 3:__ Stay on CJXD and wait to move to JX3 although the timelines for this are unknown it is the primary development focus going forward so lots more details on this coming soon.  Note you won\u2019t be able to upgrade to obtain future JX 2 fixes.  \n\nThe Jenkins X OSS community is very active on Slack, we host regular open office hours zoom sessions and are building out a number of special interest groups in the coming weeks and months which we would love for you to be a part of.  Twitter is active and a good way to keep up to date with events, plus we are launching a new Discourse community forum.  There is no better time to be involved, if you are looking to contribute code, learn or share new things or help carve out the future direction of Jenkins X, we are eager for your involvement.\n\nAs a start please come and say hello on the slack channel or be brave and help kick off https://jenkinsx.discourse.group/ - you just need to sign up.\n\nLooking forward to seeing you soon.\n\n___\n\n# Migration steps for CJXD to upstream Jenkins X\n\n## Configuration changes\n\nGet the latest jx CLI https://github.com/jenkins-x/jx/releases\n\nChange version stream, boot config repos URL + tags, remove Jenkins X UI and remove the upgrade for Vault.\n\nChange the git repository for your development environment, get the URL using:\n```\n> jx get environments\n```\nand apply these changes:\n- remove the `env/jx-app-ui` folder and `jx-app-ui` from `env/requirements.yaml`\n- remove the `jx step boot vault` boot pipeline step \n- switch from the CJXD version stream to the upstream Jenkins X one\n\nThe exact changes described above can be found in this commit:\n\nhttps://github.com/cb-kubecd/environment-cjxdtest1-dev/commit/2596efdb51b812758ce847e16beb2035af4f61f1\n\nOnce these changes are merged into the mainline branch follow the boot pipeline using:\n```\n> jx get build logs\n```\nOnce the boot pipeline has finished successfully you can upgrade to the very latest release (the git sha\u2019s above are the latest at writing this blog)\n```\n> jx upgrade boot\n```\nReview and /approve the generated pull request, follow the boot pipeline logs to success.\n\nIf you run into problems, need any help or guidance please ask in the the Jenkins X community https://jenkins-x.io/community/",
            "content/en/blog/news/2020-fosdem-jx-talks.md": "---\ntitle: \"3 Jenkins X talks at FOSDEM 2020 \"\ndate: 2020-02-14\ndraft: false\ndescription: >\n  FOSDEM 2020 recap, including Jenkins X talks in CI/CD devroom\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jxfosdemtalks2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\n[FOSDEM 2020](https://fosdem.org/2020/) was fantastic! We were thrilled to be there, answering questions about Jenkins X at the Jenkins X - CDF - Jenkins booth. \n\n<figure>\n<img src=\"/images/community/events/fosdem_booth.jpg\" class=\"img-thumbnail\"/>\n</figure>\n\nThis was the first year there was a [CI/CD devroom](https://fosdem.org/2020/schedule/track/continuous_integration_and_continuous_deployment/) at FOSDEM. Among the excellent talks, three focused on Jenkins X in their demos:\n\n* Choosing The Right Deployment Strategy, by [Viktor Farcic](https://technologyconversations.com/)\n* Progressive Delivery: Continuous Delivery the Right Way, by [Carlos Sanchez](https://twitter.com/csanchez)\n* A Practical CI/CD Framework for Machine Learning at Massive Scale, by [Alejandro Saucedo](https://twitter.com/axsaucedo)\n\n### Choosing The Right Deployment Strategy\nby [Viktor Farcic](https://technologyconversations.com/)\n\n<section class=\"py-5\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n          <div class=\"embed-responsive embed-responsive-16by9\">\n              <iframe class=\"embed-responsive-item\" src=\"https://video.fosdem.org/2020/UB4.136/choosing_the_right_deployment_strategy.webm\" frameborder=\"0\"\n              allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n          </div>\n        </div>\n        <div class=\"col-sm-hidden col-lg-2\"></div>\n        <div class=\"col-sm-12 col-lg-4\">\n          <div class=\"w-100 w-50-ns tc\">\n            <p class=\"h3 m0 p0 pt3\">Pros and cons of different deployment strategies</p>\n            <p class=\"f3\">\n              Serverless\n            </p>\n            <p class=\"f3\">\n              Blue/Green\n            </p>\n            <p class=\"f3\">\n              Rolling update\n            </p>\n            <p class=\"f3\">\n              Canary\n            </p>\n            <p class=\"h3 m0 p0 pt3\">Demo</p>\n            <p class=\"f3\">\n              All strategies automated with Jenkins X\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n### Progressive Delivery: Continuous Delivery the Right Way\nby [Carlos Sanchez](https://twitter.com/csanchez)\n\n  <section class=\"py-5\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n          <div class=\"embed-responsive embed-responsive-16by9\">\n              <iframe class=\"embed-responsive-item\" src=\"https://video.fosdem.org/2020/UB4.136/progressive_delivery.webm\" frameborder=\"0\"\n              allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n          </div>\n        </div>\n        <div class=\"col-sm-hidden col-lg-2\"></div>\n        <div class=\"col-sm-12 col-lg-4\">\n          <div class=\"w-100 w-50-ns tc\">\n            <p class=\"f3\">\n              Progressive Delivery makes it easier to adopt Continuous Delivery\n            </p>\n            <p class=\"f3\">\n              Roll out new versions gradually\n            </p>\n            <p class=\"h3 m0 p0 pt3\">Demo</p>\n            <p class=\"f3\">\n              Automated Progressive Delivery pipeline\n            </p>\n            <p class=\"f3\">\n              Canary deployments and rollbacks in Kubernetes using Jenkins X\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n### A Practical CI/CD Framework for Machine Learning at Massive Scale\nby [Alejandro Saucedo](https://twitter.com/axsaucedo)\n\n<section class=\"py-5\">\n    <div class=\"container\">x\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n          <div class=\"embed-responsive embed-responsive-16by9\">\n              <iframe class=\"embed-responsive-item\" src=\"https://video.fosdem.org/2020/UB4.136/a_practical_cicd_framework_for_machine_learning_at_massive_scale.webm\" frameborder=\"0\"\n              allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n          </div>\n        </div>\n        <div class=\"col-sm-hidden col-lg-2\"></div>\n        <div class=\"col-sm-12 col-lg-4\">\n          <div class=\"w-100 w-50-ns tc\">\n            <p class=\"h3 m0 p0 pt3\"> Key insights on MLOps</p>\n            <p class=\"f3\">\n              Monitoring, deployment, orchestration and continuous delivery for machine learning\n            </p>\n            <p class=\"h3 m0 p0 pt3\">Demo</p>\n            <p class=\"f3\">\n              Jenkins X to deploy/promote models across multiple environments\n            </p>\n            <p class=\"f3\">\n              KIND (Kubernetes in Docker) to run integration tests in dev environment\n            </p>\n            <p class=\"f3\">\n              Seldon to orchestrate & monitor the models\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n",
            "content/en/blog/news/2020-fosdem-schedule.md": "---\ntitle: \"FOSDEM 2020\"\ndate: 2020-01-09\ndraft: false\ndescription: >\n  Join us for CI/CD discussions at FOSDEM! \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jxfosdem2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\n[FOSDEM](https://fosdem.org/2020/) is a free event for software developers to meet, share ideas, and collaborate. \n\n<figure>\n<img src=\"/images/community/events/2020-fosdem.png\" class=\"img-thumbnail\"/>\n</figure>\n\n\n## FOSDEM\n\n[FOSDEM](https://fosdem.org/2020/about/) (Free and Open source Software Developers\u2019 European Meeting) is a non-commercial, volunteer-organized European event centered on free and open source software development. It is aimed at developers and anyone interested in the free and open source software movement. FOSDEM will take place on 1 and 2 of February in Brussels, Belgium. See the [event site for more details](https://fosdem.org/2020/).\n\nThe vast majority of talks and events at FOSDEM are held in 'developer rooms' or 'devrooms', which are organised and managed by open source projects to foster discussion and collaboration. In the Jenkins X community, we are excited to participate in the Continuous Integration and Continuous Deployment (CI/CD) devroom at FOSDEM! \n\n## About the CI/CD Devroom\n\nThe [CI/CD devroom](https://fosdem.org/2020/schedule/track/continuous_integration_and_continuous_deployment/) will take place on **2nd of February 2020 in Brussels, Belgium**. The CI/CD devroom will focus on OSS projects that help \"improve the quality of our software by automating tests, deliveries or deployments\". \n\nThe [schedule for the CI/CD devroom](https://fosdem.org/2020/schedule/track/continuous_integration_and_continuous_deployment/) is up and is packed with 12 interesting talks. Many of the talks specifically address issues around CI/CD on Kubernetes and a number of the talks are on Jenkins X.\n\nThank you to the volunteer organisers of the CI/CD devroom, including [Olivier Vernin](https://twitter.com/0lblak) [Jan Willies](https://mobile.twitter.com/loswillios) and [Fabrizio Manfredi](https://mobile.twitter.com/thoulen), who have picked awesome talks during what must have been a difficult selection process. \n\n## Fringe and Jenkins X workshop\n\n[The FOSDEM Fringe](https://fosdem.org/2020/fringe/) consists of independent events involving free and open source software taking place in the days around the FOSDEM weekend. They are organised independently of FOSDEM by open source communities.\n\nOn **Thursday, January 30**, [Viktor Farcic](https://twitter.com/vfarcic) will be presenting a full day workshop on Jenkins X, as described in this abbreviated abstract:\n\n{{< alert >}} Jenkins X is a combination of best of breed tools and software for Kubernetes. It provides an interactive command-line interface to instantiate applications, repositories, environments, and pipelines and orchestrate continuous integration and continuous delivery.\n\nIt is the CI/CD solution for development of modern cloud applications on Kubernetes.\n\nWe'll explore how to create a fully operational continuous delivery pipeline using containers, Kubernetes, Jenkins X, and quite a few other tools. {{< /alert >}}\n\nThe workshop will take place from 8:30am to 5:00pm at the Marivaux Hotel Congress and Seminar Centre, Boulevard Adolphe Maxlaan 98, 1000 Brussels. There will be breakfast and snacks provided, for which there is a 25 Euro charge. Please sign up on the [eventbrite event page](https://www.eventbrite.com/e/workshop-cloud-native-kubernetes-first-serverless-continuous-delivery-with-jenkins-x-kubernetes-and-tickets-87082627483).\n\nThe Jenkins community will also be leading a [workshop on Jenkin Pipelines](https://www.eventbrite.com/e/jenkins-pipeline-fundamentals-training-tickets-87080214265) run by [Mark Waite](https://twitter.com/MarkEWaite). The workshop will be from 8:00am to 12:00pm and breakfast will be provided for a 22 Euro charge. \n\n## Important Dates\n\n* 30 January, 2020: Jenkins and Jenkins X workshops, FOSDEM Fringe\n* 2 February, 2020: CI/CD Devroom, FOSDEM\n\n\nWe look forward to seeing you at FOSDEM!\n\nFor those who can't make it, the talks in the CI/CD devroom will be recorded and made available under a Creative Commons license on the FOSDEM website.\n",
            "content/en/blog/news/2020-gsoc-consolidate-addons-and-apps-phase-1.md": "---\ntitle: \"Consolidate the use of Apps / Addons - Coding Phase 1\"\ndate: 2020-07-12\ndraft: false\ndescription: >\n  Share Jenkins X GSoC coding phase 1 work\ncategories: [blog]\nkeywords: [Jenkins,Community,2020]\nslug: \"GSoC2020\"\naliases: []\nauthor: Zixuan Liu\n---\n\nThe coding phase 1 of Google Summer of Code ended last week, I'm working on [Consolidate the use of Apps / Addons](https://www.jenkins.io/projects/gsoc/2020/projects/jenkins-x-apps-consolidation/), so I'd like to share my coding phase 1 work.\n\nIn the project, I mainly migrate addons to apps, the way is easier for improve jx apps and addons.\n\nDuring the time, I've migrated all addons to apps via Helm chart way.\n\nThe following is my make apps:\n\n- https://github.com/nodece/jx-app-kubeless\n- https://github.com/nodece/jx-app-owasp-zap\n- https://github.com/nodece/jx-app-flagger\n- https://github.com/nodece/jx-app-gloo\n- https://github.com/nodece/jx-app-istio\n- https://github.com/nodece/jx-app-ingress\n\nCurrent, we only move to jx-app-kubeless to the [jenkins-x-apps](https://github.com/jenkins-x-apps) repository, other apps haven't been moved to the [jenkins-x-apps](https://github.com/jenkins-x-apps) repository.\n\nYou can visit [here](https://docs.google.com/spreadsheets/d/1k2KEMdk5-9HrU-IUuataYD63Kl-JEsuy5aXus7Dcitc/edit?usp=sharing) for more details.\n\n#### Next phase work\n\nThe next phase is to add `jx delete app` command to jx, but it has been implemented by Jenkins X contributor, so I made a new plan for next phase.\n\nThe following is my plan for the next phase:\n\n- Improve `jx add app` - It will support to fetch any git repository to install app. I also consider migrate application to apps.\n\n- Perfect the work of phase 1, these apps haven't moved to jenkins-x-apps repository yet.\n\n- Follow up on jx issues to improve jx.\n\n### Demo for coding phase 1 \n\nI presentation my coding phase 1 demo on YouTube lase week. \n\n> Notes: the video language is Chinese.\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ka2Uor_oTWc\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nLast week, Jenkins hold a meeting for Jenkins GSoC students to present their phase 1 work, I also present my coding phase 1 work on the meeting. \n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HQLhakpx5mk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n#### Feedback\n\nIf you are interested in the project, or to guide me. Welcome to join #jenkins-x-gsoc channel on [CDF Slack](https://cdeliveryfdn.slack.com/join/shared_invite/enQtODM2NDI1NDc0MzIxLTA1MDcxMzUyMGU2NWVlNmQwN2M1N2M4MWJjOWFkM2UzMDY0OWNkNjAzNzM0NzVkNjQ5M2NkMmY2MTRkMWY4MWY#/). \ud83d\ude4c \n",
            "content/en/blog/news/2020-gsoc-consolidate-addons-and-apps-phase-2.md": "---\ntitle: \"Consolidate the use of Apps / Addons - Coding Phase 2\"\ndate: 2020-07-27\ndraft: false\ndescription: >\n  Share Jenkins X GSoC coding phase 2 work\ncategories: [blog]\nkeywords: [Jenkins,Community,2020]\nslug: \"GSoC2020\"\naliases: []\nauthor: Zixuan Liu\n---\n\nThe coding phase 2 of Google Summer of Code will end this week, so I'd like to share my coding phase 2 work.\n\nThe addons have been migrated to apps on coding phase 1, but these apps have not been hosted to OSS, so during the coding phase 2, Jenkins X team build OSS cluster to host my apps: \n\n- [jx-app-flagger](https://github.com/jenkins-x-apps/jx-app-flagger)\n\n- [jx-app-ingress](https://github.com/jenkins-x-apps/jx-app-ingress)\n\n- [jx-app-gloo](https://github.com/jenkins-x-apps/jx-app-gloo)\n\n- [jx-app-kubeless](https://github.com/jenkins-x-apps/jx-app-ingress)\n\nyou can use `jx add app` command to install the above apps, I also made a number of PR:\n\n- https://github.com/jenkins-x/jx/pull/7472 - fix `jx add app` command\n\n- https://github.com/jenkins-x/jx/pull/7441 - fix skip dir when looping Helm templates\n\n- https://github.com/jenkins-x/jx/pull/7440 - deprecate create addon kubeless\n\n- https://github.com/jenkins-x/jx/pull/7436 - support `jx add app` from git repository\n\nMy work is inseparable from my mentors and Jenkins X team, in particular, my mentor -  Kara de la Marck took good care of me in every way (such as language, English is my second language), so thank you for your time \u2764\ufe0f\n\n#### Next phase work\n\nIn the next phase I will write these apps document and add deprecate note to jx, and continue to explore apps. I will also follow up about apps/addons issues on jx then try to solve the issues. Jenkins X team is going to be releasing 3.x of Jenkins X, I also need to get familiar with it - https://github.com/jenkins-x/octant-jx. \n\n#### Feedback\n\nIf you are interested in the project, or to guide me. Welcome to join #jenkins-x-gsoc channel on [CDF Slack](https://cdeliveryfdn.slack.com/join/shared_invite/enQtODM2NDI1NDc0MzIxLTA1MDcxMzUyMGU2NWVlNmQwN2M1N2M4MWJjOWFkM2UzMDY0OWNkNjAzNzM0NzVkNjQ5M2NkMmY2MTRkMWY4MWY#/) \ud83d\ude4c \n",
            "content/en/blog/news/2020-gsoc-story-of-zixuan.md": "---\ntitle: \"My story with Jenkins X GSoC - Consolidate the use of Apps / Addons\"\ndate: 2020-06-18T22:55:25+08:00\ndraft: false\ndescription: >\n  Share Jenkins X and GSoC(Google Summer of Code) journey\ncategories: [blog]\nkeywords: [Jenkins,Community,2020]\nslug: \"GSoC2020\"\naliases: []\nauthor: Zixuan Liu\n---\n\nI'm Zixuan, and I'm very happy to be recognized by the Jenkins and Jenkins X teams in Google Summer of Code 2020. \n\nI'm working on [Consolidate the use of Apps / Addons](https://jenkins.io/projects/gsoc/2020/project-ideas/jenkins-x-apps-consolidation/).\n\n### Excellent mentor team\n\nJenkins and Jenkins X has an excellent team of mentors, everyone is very kind and super knowledgeable.\n\n* James Strachan\n* Kara de la Marck\n* markyjackson\n* Nikhil Da Rocha\n* Oleg Nenashev\n* Oscar Medina\n* Sahil Kalra\n* Sladyn\n\n### Work output\n\nI have been working on this project for some time.\nDuring this time, I have migrated some addons to apps.\n\nIf you want to test completed apps, you can open the repository below.\n\n#### Completed Work\n\n- [jx-app-kubeless](https://github.com/jenkins-x-apps/jx-app-kubeless)\n\n#### Work in Progress\n\n- [jx-app-owasp-zap](https://github.com/nodece/jx-app-owasp-zap)\n- [jx-app-flagger](https://github.com/nodece/jx-app-flagger)\n- [jx-app-gloo](https://github.com/nodece/jx-app-gloo)\n\n*\ud83d\ude4c I also welcome other developers of this project to guide me!*\n\nFor more about the project, see [here](https://www.jenkins.io/projects/gsoc/2020/projects/jenkins-x-apps-consolidation/).\n",
            "content/en/blog/news/2020-gsoc.md": "---\ntitle: \"Google Summer of Code 2020 \u2600\ufe0f\"\ndate: 2020-03-23T11:26:18Z\ndraft: false\ndescription: >\n  Jenkins X is participating in GSoC 2020!\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"GSoC2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\nJenkins X is incredibly happy to participate in [Google Summer of Code 2020](https://summerofcode.withgoogle.com/)!\n\nJenkins X has been open source from its inception and many of the founders and core contributors to Jenkins X have been deeply involved in open source for years. We love open source for many reasons, including how it enables rapid innovation and collaboration among remote, distributed teams and communities. For these reasons and more, we are very happy to participate in Google Summer of Code.\n\n<br>\n<figure>\n<img src=\"/images/community/events/GSoC-logo.png\"/>\n</figure>\n\n## What is Google Summer of Code\n\nGoogle Summer of Code is a global program focused on bringing more student developers into open source software development.\n\nWorking remotely, from anywhere in the world, successful student participants receive a stipend, enabling them to focus on their programming projects for three months. Volunteer mentors help students with project planning, provide guidance, answer questions, and introduce the student to the community. \n\n<section class=\"py-5\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n          <div class=\"embed-responsive embed-responsive-16by9\">\n              <iframe class=\"embed-responsive-item\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/S6IP_6HG2QE\" frameborder=\"0\"\n              allow=\"autoplay; encrypted-media\" allowfullscreen=\"\"></iframe>\n          </div>\n        </div>\n        <div class=\"col-sm-hidden col-lg-2\"></div>\n        <div class=\"col-sm-12 col-lg-4\">\n        </div>\n      </div>\n    </div>\n  </section>\n\n\nWhen applying to GSoC, students create a project proposal. Students often use as the basis for their proposal suggested project ideas. Jenkins X has three suggested project ideas. To find out more about each one click on the links below.\n\n* [Consolidate the use of Apps / Addons](https://jenkins.io/projects/gsoc/2020/project-ideas/jenkins-x-apps-consolidation/)\n\n* [Create Boot Apps](https://jenkins.io/projects/gsoc/2020/project-ideas/jenkins-x-boot-apps/)\n\n* [Personal Package Archive platform for OpenWrt](https://jenkins.io/projects/gsoc/2020/project-ideas/jenkins-x-openwrt-ppa/) \n  * Note: Jenkins X has been proposed as the CI/CD platform for this project\n\n\n## Resources\n\n\ud83d\udcbb To find out more about how to apply click [here](https://developers.google.com/open-source/gsoc/help/student-advice). \n\n\ud83d\udcc5 Please note the timeline for the programme [here](https://summerofcode.withgoogle.com/how-it-works/#timeline).\n\nWe look forward to reading your applications and working with you on the Jenkins X project! \n\n\n",
            "content/en/blog/news/2020-hacktoberfest.md": "---\ntitle: \"Hacktoberfest\"\ndate: 2020-09-23\ndraft: false\ndescription: >\n  Contribute to Jenkins X as part of Hacktoberfest\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"hacktoberfest2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure>\n<img src=\"/images/community/events/2020-hacktoberfest.jpg\"/>\n</figure>\n\nWe are excited to announce that Jenkins X will be participating in Hacktoberfest again this year! Hacktoberfest is a month-long global celebration of open source software.\n\nFrom October 1 to October 31, submit four pull requests to qualify for the limited edition Hacktoberfest shirt. All backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors.\n\n**Learn more about Hacktoberfest and sign up [here](https://hacktoberfest.digitalocean.com/).**\n\n### Contribute to Jenkins X\n\nWe welcome your contributions to the Jenkins X project!\n\n[Issues labelled \"hacktoberfest\"](https://github.com/jenkins-x/jx-docs/issues?q=is%3Aissue+is%3Aopen+hacktoberfest) generally indicate good first issues. However, all pull requests will count towards your Hacktoberfest challenge. Jenkins X welcomes contributors to both:\n\n* [the Jenkins X `jx` source code](https://github.com/jenkins-x/jx)\n* [the Jenkins X documentation website](https://github.com/jenkins-x/jx-docs)\n\n### Contribute to `jx` source code\n\nThere are plenty of [open issues](https://github.com/jenkins-x/jx/issues), and we welcome your help in making Jenkins X even more awesome.\n\nJenkins X is written largely in Go, but you don't need to be an expert to contribute! If you are new to the project, search for issues labelled \"good-first-issue\". Our [Contributing Guide](https://jenkins-x.io/community/code/) has advice for getting started with contributing to Jenkins X.\n\n### Contribute to the docs\n\nWe welcome your help in improving the Jenkins X documenation. If you see areas of the documentation that need fixing or augmentation please raise a pull request. Our guide for [Contributing to the Documentation](https://jenkins-x.io/community/documentation/) has advice for getting started with contributing to the Jenkins X docs.\n\n### Ask us questions\n\nWe're happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nWe also have online office hours, where we talk about new developments in Jenkins X and you are welcome to ask us questions. We meet for office hours **every other Tuesday** at 15:00 UTC (*See your timezone [here](https://time.is/1500_in_UTC)*).\n\nNext office hours are on **6 October**. Join us on this [meeting link](https://zoom.us/j/397862697). See the [Jenkins X calendar](https://jenkins-x.io/community/calendar/) for events that you are welcome to join.\n\nFind out more about becoming involved in the Jenkins X community [here](https://jenkins-x.io/community/).\n\n*We look forward to seeing you in open source, fixing all the things!*\n\n<img src=\"/images/404-page/GOPHER RIDING REX.png\" class=\"img-thumbnail\">\n\nimage by Ashley McNamara, [creative commons license](https://github.com/ashleymcnamara/gophers/blob/master/GOPHER%20RIDING%20REX.png)\n\n",
            "content/en/blog/news/2020-jx-open-innovation.md": "---\ntitle: \"Jenkins X & Open Innovation \"\ndate: 2020-07-08\ndraft: false\ndescription: >\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jxopeninnovation\"\naliases: []\nauthor: Tracy Miranda\n---\n\nJenkins X burst onto the CI/CD scene a couple of years ago - reimagining CI/CD on Kubernetes with pipeline automation, GitOps built-in and and preview environments to help teams collaborate and accelerate their software delivery at any scale. It has been evolving at a breakneck pace, keeping up with the changes in the wider Kubernetes ecosystem. \n\nWith the release of Helm 3, Jenkins X Labs nurtured an early experiment to adopt it. On May 15th, the primary sponsor of Jenkins X, CloudBees, [shared a post](https://jenkins-x.io/blog/2020/05/15/helm3/#why-isnt-this-all-more-open) talking about the future direction of Helm 3 and Jenkins X. \n\nOpen source projects rise to ubiquity thanks to a virtuous cycle of technology and business adoption. It is a constant challenge to balance these concerns and delineate what is open source and what can be commercialized. In a fast-changing open source and tech landscape, sometimes the line gets drawn in the wrong place. \n\nThe Jenkins X community is passionate and vocal and Mauricio Salatino, [Salaboy](https://twitter.com/salaboy), [shared a post](https://salaboy.com/2020/05/19/why-isnt-jenkins-xs-future-more-open/) strongly expressing his views on the new direction. The post was supported by a [Github issue](https://github.com/jenkins-x/jx/issues/7207) which allowed other community members to also share feedback on this topic. Many of CloudBees founders and leaders are veterans of open source projects. CloudBees is [committed to open source](https://www.previous.cloudbees.com/open-source). We demonstrate our commitment through deep involvement in open source projects and communities. So we took this feedback very seriously and listened to what the community was telling us.\n\nOne line that stood out in Salatino's post is this: *\"Jenkins X is unlike any other project that I worked on in the past\".* This is significant, especially given how many OSS projects Salatino contributes to. Salatino continues:\n\n\n>>\"The speed of changes in these projects is unprecedented and keeping up with all of it is a big challenge. Because of this, Jenkins X is more than a solution to a CI/CD problem, it is a shared community learning experience and a research project that pushes the boundaries of best practices for CI/CD in Kubernetes.\"\n\nJenkins X is a solution to a CI/CD problem, but it is more than that. It *is* a shared community learning experience. It *is* a research project that pushes the boundaries of best practices for CI/CD in Kubernetes. And the engine that powers all of this is the open source community. \n\nCI/CD right now is going through a renaissance with the onset of microservices, containers and cloud native technologies. The whole space is evolving rapidly. We have seen this earlier this year, with the rise of Tekton which was adopted as the main pipeline engine for Jenkins X. Jenkins X in a year's time is likely to be very different than it is today.  At CloudBees, we believe open source drives innovation, leads to better, more robust technology and benefits everyone. \n\nWe are very grateful to Salatino and the wider community for graciously speaking up and giving feedback on how the project should evolve. With this in mind we want to play our part by ensuring Jenkins X future is open and innovative. You may have already noticed some of the changes, such as the [open roadmap](https://jenkins-x.io/community/roadmap/) being discussed. Specifically, on Helm 3 we want this work to resume in the open as a community effort, in the form of a Jenkins X Helm 3 working group. These are just a couple of steps towards that north star of open innovation. \n\nJenkins X is unlike any other open source project out there, let's keep pushing the boundaries of what's possible - together and in the open.\n",
            "content/en/blog/news/2020-jx-v3-beta.md": "---\ntitle: \"Jenkins X 3.x beta is here!\"\ndate: 2020-12-09\ndraft: false\ndescription: say hello to Jenkins X 3.x beta!\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jx-v3-beta\"\naliases: []\nauthor: James Strachan\n---\n \nI'm super excited to announce the 3.0 beta of Jenkins X! Christmas has come early this year! \n\n<img width=\"387px\" src=\"/images/jxxx.png\">\n\nthe main documentation of the changes are:\n\n* [the new architecture](/v3/about/overview/) with modular plugins and improved [extension points](/v3/about/extending/)\n* [what has changed since 3.x started](/v3/about/changes/) \n* [how 3.x compares to 2.x](/v3/about/comparison/) \n  \nbut here's a brief summary of the differences:\n                   \n\n### User Changes\n\nAs a user the high level UX of Jenkins X is similar:\n\n* [automated Continuous Delivery pipelines](/about/concepts/features/#automated-pipelines) for using [tekton](/v3/develop/pipeline-catalog/) for your repositories with [automatic promotion](/about/concepts/features/#promotion) between your [environments](/about/concepts/features/#environments)\n* pull requests on your repositories create separate [Preview Environments](/about/concepts/features/#preview-environments) where your team can review your changes and give fast feedback before your changes are approved and merged into the main trunk.\n\n<img width=\"600\" src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n#### New features\n\n* we now default to [vanilla tekton YAML for defining pipelines](/v3/develop/pipeline-catalog/#source-changes) while [accelerating your tekton](/blog/2020/11/11/accelerate-tekton/) with [tekton catalog](/v3/develop/pipeline-catalog/#adding-tasks-from-the-tekton-catalog)\n* we include an open source [dashboard](/v3/develop/ui/dashboard/) for visualising pipelines and logs which you can invoke via:\n```bash \njx dash\n```\n* we have a full [Kubernetes and Jenkins X console](/v3/develop/ui/octant/) based on the excellent [octant](https://octant.dev/) which you can try out via:  \n```bash \njx ui\n```\n            \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n### Platform Changes\n\n* we now use [helm](https://helm.sh/) (3.x) and [helmfile](https://github.com/roboll/helmfile) along with optionally [kustomize](https://kustomize.io/) in a GitOps style to define and configure both Jenkins X itself, your tools and applications in any namespace\n* support [multi cluster](/v3/admin/guides/multi-cluster/) out of the box so you can keep `Staging` and `Production` in separate clusters to your development cluster where your pipelines run, you create and release immutable container images and other artifacts.\n* to [setup or upgrade](/v3/admin/) Jenkins X we use [terraform](https://www.terraform.io/) to setup your cloud resources on [Azure](/v3/admin/platforms/azure/), [Amazon](/v3/admin/platforms/eks/) or [Google](/v3/admin/platforms/google/) while also supporting on-premises, minkube and OpenShift - see the [Admin Guides](/v3/admin/) for more detail\n  * the actual installation of kubernetes resources takes place using the [git operator](/v3/admin/guides/operator/) so it runs reliably inside the cluster itself\n* we default to using [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to manage all secrets for Jenkins X itself, development tools and your applications too. \n  * This means we can support various secret backends such as Alibaba Cloud KMS Secret Manager, Amazon Secret Manager, Azure Key Vault, Hashicorp Vault or GCP Secret Manager\n  * It also means we can then check in all kubernetes resources and custom resources directly into git (apart from Kubernetes `Secrets`) so that it super easy to version, review and reason about your kubernetes resources in a GitOps way.\n* built in [TLS and DNS](/v3/admin/guides/tls_dns/) support along with [Heath](/v3/admin/guides/health/) reporting and visualising via [kuberhealthy](https://github.com/Comcast/kuberhealthy) \n* we now have an [LTS distribution](/v3/admin/setup/upgrades/lts/) which lets you switch to a much more slower cadence of releases of Jenkins X\n \nWe have been using Jenkins X 3.x in production now for many months (for CI/CD of all of the [3.x codebase](/v3/about/overview/source/) and [continuously upgrading our cluster in the standard way](/v3/admin/setup/upgrades/) and it's been much simpler and easier to use, operate and configure. \n\nIn general Jenkins X 3.x is now much simpler and more flexible. It supports [lots more platforms than before](/v3/admin/) and should be easy to extend and configure for other platforms too.\n\n{{< admincards >}}\n\n\n### Getting started\n\nIf you have never tried [3.x](/v3/about/) before then please follow the [Admin Guide](/v3/admin/) to get Jenkins X installed on your cloud provider, on-premises kubernetes cluster or minikube.\n\nIf you previously tried the 3.x alpha then the [migration instructions are here](/v3/admin/guides/migrate/v3-alpha/).\n\nFor folks on older 2.x versions of Jenkins X please see [the 2.x migration instructions](/v3/admin/guides/migrate/v2/)\n\nOnce your cluster has been installed or migrated then check out the [User Guide](/v3/develop/) on how to develop software continuously with Jenkins X.\n\n\n### Final thoughts\n\nA huge thanks goes out to all the [contributors](/community/#contributors), folks in the [Jenkins X community](/community/) and the [community around all the open source projects we reuse](/v3/about/overview/projects/) who've helped get this beta together. The improvements in Jenkins X 3.x since 2.x are totally amazing, well done everyone!\n\nPlease give Jenkins X a try and [let us know what you think](https://jenkins-x.io/community/#slack) or [raise an issue](https://github.com/jenkins-x/issues\n). All feedback highly appreciated - particularly how we can keep improving to help you develop faster.\n\nIf you are at all interested in Continuous Delivery with kubernetes using [tools](/v3/about/overview/projects/) like [helm](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [knative](https://knative.dev/),  [lighthouse](https://github.com/jenkins-x/lighthouse) and last but definitely not least, [tekton](https://github.com/tektoncd/cli)  then please join the [community](/community/) - its great fun!\n\nI hope you have a great break over the holiday season and 2021 is a little better and more fun than 2020!\n\nFor any questions and feedback please reach out on slack https://jenkins-x.io/community/#slack",
            "content/en/blog/news/2020-jx-v3-update.md": "---\ntitle: \"Jenkins X 3.x - beta is close!\"\ndate: 2020-12-04\ndraft: false\ndescription: Jenkins X 3.x - beta is close!\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jx-v3-update\"\naliases: []\nauthor: James Rawlings\n---\n \nIt has been 'all hands on deck' in recent months with the focus on Jenkins X 3 alpha.  First off a huge thankyou to everyone involved.  The OSS community spirit has really shone through what has been a very difficult year for everyone.  Knowing that people from all over the world come and help each other, share banter and work at all hours of the day to help build out a true open source cloud native continuous delivery solution for developers - it's quite fantastic to see and amazing to be apart of.\n \nAs a result of all this hard work the Beta is iminent so this is a good opportunity to thank all involved so far and to outline what to expect in the coming days.\n \nWhile we've been in the Alpha phase it has provided us with the opportunity to deprecate and remove APIs, commands and obsolete features that existed in v2.  This means we will not have any code dependency on the v2 codebase and so going forward v3 will be easier to maintain without the tech debt.\n \nWith that, we aim to make a big push and roll out a few last changes in preparation for Beta, here's a couple you will notice if you are already on the Alpha.  We recommend taking time to understand these, and avoid upgrading for a few days so that changes can be handled in one go, as there will be a constant stream of larger updates happening:\n \n- jx requirements - this is the yaml file used to describe install needs for Jenkins X, until now there have been options available that were unsupported, confusing and in some cases did nothing.  These have now all been removed and the structure of the file has changed to be CRD like including an API version.  Upon upgrade `jx gitops upgrade` will migrate your `jx-requirements.yml` and push the changes back to the cluster gitops repository.  You should not see any errors however there are some pipeline steps that need to be updated in order to work with the new structure, this is covered next.\n- pipeline catalog - currently Jenkins X 3.x defaults to in-repo pipelines where your Tekton resources are managed by kpt, these will need to be updated to work with the new or old requirements described above.  This means you will also need to run `jx gitops upgrade` in each your application git repos.  In the near future Jenkins X 3.x will make it easy to work with shared pipeline libraries / catalog repositories, referencing them via URL rather than in-repo.  This is so that users have the flexibility to choose which option is best for your use case.  In-repo pipelines and shared pipeline libraries have pros and cons for each, mainly about maintaining changes.  But for now, you will need to upgrade each application git repository.\n- nested helmfiles - this is a great feature from Chris Mellard which will be merged very soon.  The idea is that your cluster git repository will have support for multiple helmfiles, ones that will contain core Jenkins X charts and maintained by kpt via the `jx gitops upgrade` process, and others where you can add your own charts rather than extending the single helmfile that is there today.\n- nginx - for the alpha we have upgraded all the core helm charts we ship in a base Jenkins X installation, the last to land is Nginx thanks to Ankit!  This is not expected to cause issues however the change does involve moving to a different chart, there is a risk that there may be some very small window of downtime for the ingress controller so webhooks fired during the upgrade may fail to be delivered.\n \nBalancing upgrades with continuous delivery brings many challenges.  However with Kubernetes, GitOps, Jenkins X version streams (including the monthly LTS coming soon) and other tools like kpt makes the process more transparent and provides a greater level of high availability. \n \nJenkins X automatically upgrades its own infrastructure with every version stream release and we haven't experienced any disruption during the alpha period so far.  We aim to continue this, but when we know there will be disruption we endeavour to inform and explain why ahead of time.\n\nKeep an eye out for announcements of the Beta and thanks again to all involved in the community and we are very much looking forward to welcoming new people too.  We are very excited for the Beta release and given the feedback so far we understand users are too.\n \nFor any questions and feedback please reach out on slack https://jenkins-x.io/community/#slack",
            "content/en/blog/news/2020-jx-v3.md": "---\ntitle: \"Welcome to Jenkins X 3.x alpha!\"\ndate: 2020-09-16\ndraft: false\ndescription: awesome improvements in Jenkins X\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jx-v3-alpha\"\naliases: []\nauthor: James Strachan\n---\n\nWe are very pleased to announce the [alpha release of Jenkins X version 3](/v3/)\n\n<iframe style=\"border:none\" width=\"800\" height=\"450\" src=\"https://whimsical.com/embed/SnJBgXG6jz9pqQewiDTNRt@2Ux7TurymNDXVRa4FpLk\"></iframe>\n\nYou can read more about the [overview of the architecture and components here](/v3/about/overview/).\n\nThis release has lots of [benefits over version 2](/v3/about/benefits/) is much easier to use, understand and manage. It is more flexible and simpler to configure for different infrastructures and cloud providers. \n\nThe new release works well with any combination of helm 3, helmfile, kpt and/or kustomize.\n\nFor those who've used Jenkins X version 2 you can check out a [comparison of the two versions](/v3/about/comparison/)\n\nHere is a [demo video showing how to get started with Jenkins X on Google Cloud with Terraform and Vault](https://www.youtube.com/watch?v=RYgKvRpjkoY&feature=youtu.be):\n\n <iframe width=\"1292\" height=\"654\" src=\"https://www.youtube.com/embed/RYgKvRpjkoY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \nWe also [did a live demo of getting started and using version 3](https://www.youtube.com/watch?v=NZVp66YDl5s) at the [octant office hours last week](https://octant.dev/community/).\n\nWe also included the [helmfile based preview environments enhancement](https://github.com/jenkins-x/enhancements/issues/38) via the new [jx-preview](https://github.com/jenkins-x/jx-preview) plugin which makes it much easier to make more sophisticated previews such as\n \n* using multiple namespaces for you previews\n* using per preview namespaces or deploying previews into shared namespaces (e.g. via Canaries)\n* using helmfile to cleanly remove resources \n\nWe now have support, via Terraform for 2 of the big 3 public clouds: \n\n* [Amazon](/v3/admin/platform/eks/)\n* [Google](/v3/admin/platform/gke/)\n\nAzure support is getting really close; if you'd like to help get it ready [join us on slack](/community/#slack)\n\nAlso when using your laptop or local kubernetes cluster without terraform we support:\n \n* [Minikube](/v3/admin/platform/minikube/) so you can run Jenkins X on your laptop\n* [On-Premises](/v3/admin/platforms/on-premises/) so you can use any vanilla kubernetes cluster\n\n\nWe are working on improving the UX of the installation/upgrade; we're hoping to soon have a pure terraform (or Terraform Cloud) way to spin up a Jenkins X installation on a public cloud with a minimum of fuss. We'll hopefully blog about that soon... \n\nSo please take it for a spin and [let us know what you think](/community/)! If you can think of any ways we can improve let us know!\n\n",
            "content/en/blog/news/2020-octant-jx.md": "---\ntitle: \"Octant: the OSS UI for Jenkins X\"\ndate: 2020-08-06\ndraft: false\ndescription: a shiny new open source UI for Jenkins X\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"octant-jx\"\naliases: []\nauthor: James Strachan\n---\n\nA common question we have heard in the community over the years is [Is there an open source UI for Jenkins X?](/docs/resources/faq/config/#is-there-a-ui-available-for-jenkins-x). \n\nWell we now have an answer: its [Octant](https://github.com/vmware-tanzu/octant) using the [octant-jx](https://github.com/jenkins-x/octant-jx) plugin.\n\n## Why Octant?\n\nWe love [Octant](https://github.com/vmware-tanzu/octant) because:\n\n* open source and very easy to extend with plugins in Go or TypeScript/JavaScript\n* lets you visualise and work with all kubernetes and custom resources across multiple clusters\n* thanks to [octant-jx](https://github.com/jenkins-x/octant-jx)  has awesome integration with Jenkins X components like apps, environments, pipelines, repositories etc.\n\n## Features\n\nLonger term we're planning on making most of the developer and operations features of Jenkins X available through the UI via [octant-jx](https://github.com/jenkins-x/octant-jx). \n\ne.g. we hope as part of [Jenkins X 3.x](https://github.com/jenkins-x/enhancements/issues/36) you'll be able to install or upgrade Jenkins X and watch the installation proceed all via Octant.\n \nBut already right now today you can:\n\n* view applications, environments, pipelines, repositories\n* for a pipeline quickly navigate to:\n  * its Pod, Log, Pull Request or Preview Environment\n  * for each step you can view the step detail or log of the step\n* see the various jobs and pipelines used to operate Jenkins X itself\n* over time will add management UI capabilities for installing, upgrading and administering Jenkins  \n\nFind out [more about installing and using Octant here](https://github.com/vmware-tanzu/octant#usage).\n\n## Demo\n\nWe did a [demo of octant-jx](https://youtu.be/Njl247hjRuU?t=186) at the last [office hours](https://jenkins-x.io/community/office_hours/). We also [presented octant-jx](https://www.youtube.com/watch?v=Njl247hjRuU&t=2027s) at the [octant office hours this week](https://octant.dev/community/).\n\nHere is a [demo video showing octant in action with Jenkins X](https://www.youtube.com/watch?v=2LCPHi0BnUg&feature=youtu.be):\n\n <iframe width=\"1292\" height=\"654\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
            "content/en/blog/news/2020-pipelines-visualizer.md": "---\ntitle: \"New UI to visualize your pipelines and logs\"\ndate: 2020-09-23\ndraft: false\ndescription: jx-pipelines-visualizer is a new open-source UI from the community, to visualize the pipelines and logs\n  \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"jx-pipelines-visualizer\"\naliases: []\nauthor: Vincent Behar\n---\n\nWelcome to the [Jenkins X Pipelines Visualizer](https://github.com/dailymotion/jx-pipelines-visualizer): a new open-source read-only UI for Jenkins X, with a very specific goal and scope: visualize the pipelines and logs.\n\nThis project was started at [Dailymotion](https://www.dailymotion.com/) and quickly shared with the Jenkins X community.\n\n## Why a new UI?\n\nThere is already the [Octant-based UI](/blog/2020/08/06/octant-jx/), so why a new UI?\n\nThe main reason is that [Octant](https://octant.dev/) \"is an application and is intended as a single client tool and at this time there are no plans to support hosted versions of Octant\" - see [this thread on the Octant github repository](https://github.com/vmware-tanzu/octant/pull/450) for more information and details.\n\nSo while Octant answers to a lot of use-cases, there is one for which it is not suited: quickly printing the build logs on a browser, for a specific pipeline. We want to be able to click on a link from a Pull/Merge Request, and get the pipeline logs. This is the specific use-case covered by the Pipelines Visualizer.\n\n## Features\n\nWe want to keep it small, focused, and fast. It's a read-only UI, so there won't be \"actions\" to trigger a pipeline - because it can already be done using \"chatops\" commands in the Pull Request for example.\n\nBut there are a few interesting features already:\n- first, it's very fast to get the logs. Much faster than the old JXUI.\n- it can retrieve the logs from pipelines that have been garbage-collected - if you configure the URL of the buckets where the logs are stored.\n- it has URLs compatible with the old JXUI - so it's very easy to replace the old JXUI with this new UI and keep all the links working.\n\n## Roadmap\n\nThis project was shared very early with the community, after just a few hours of work. So our short-term goal is to improve the UI - make it beautiful.\n\n## Demo\n\nWe did a [demo of jx-pipelines-visualizer](https://youtu.be/zv0Dn9RYzwE?t=709) at the last [office hours](https://jenkins-x.io/community/office_hours/):\n\n <iframe width=\"80%\" height=\"460\" src=\"https://www.youtube.com/embed/zv0Dn9RYzwE?start=709\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Next steps\n\nCheck out the [jx-pipelines-visualizer github repository](https://github.com/dailymotion/jx-pipelines-visualizer) if you want to install it in your cluster - there is a Helm Chart which can be added to your Jenkins X Dev Environment.\n\nAnd any contributions are welcomed - either create an issue or pull request in the project's github repository, or come in the [#jenkins-x-dev](https://jenkins-x.io/community/#slack) Slack Channel.\n",
            "content/en/blog/news/2020-season-of-docs.md": "---\ntitle: \"Season of Docs 2020 \ud83d\udcc4\"\ndate: 2020-04-28T11:44:25+01:00\ndraft: false\ndescription: >\n  Jenkins X and Google Season of Docs\ncategories: [blog]\nkeywords: [Jenkins,Community,2020]\nslug: \"season-of-docs-2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\n[Google Season of Docs](https://developers.google.com/season-of-docs) fosters collaboration between open source projects and technical writers. This program brings the open source and technical writing communities together to improve documentation and increase awareness of open source. During the program, technical writers are given support in contributing to open source, information about the technical project to which they are contributing, and a stipend.\n\nJenkins X welcomes the opportunity to collaborate with technical writers on improving the Jenkins X documentation. We are excited to apply to participate in Google Season of Docs!\n\n<figure>\n<img src=\"/images/community/events/SeasonofDocs_Logo_.png\"/>\n</figure>\n\n### Project Ideas\n\nJenkins X invites technical writers to engage with our ongoing efforts to restructure and update the Jenkins X documentation. There are a number of ongoing projects, and technical writers are welcome to engage with them or to make their own proposals in any area of Jenkins X documentation. We welcome the experience and perspecitve of new contributors and encourage proposals based on a technical writer's interests and expertise.\n\n* Refactor the existing documentation to provide an improved user experience or a more accessible information architecture:\n\n    We are currently in the process of restructuring the information architecture on the docs site. We recognise this is an iterative process and would welcome input from a technical writer on further improvements to create an accessible information architecture and improve the user experience.\n\n* Improve our [contributor\u2019s guide](/community/documentation/) to ensure the information for new contributors is clear and well organised, including basic information about getting started as a contributor to Jenkins X, as well as any rules around licence agreements, processes for pull requests and reviews, building the project, and so on.\n\n* Create a tutorial for provisioning a Kubernetes cluster and installing Jenkins X with `jx boot` on platforms that are not covered with Terraform. Currently, the [Get started page](/docs/getting-started/) gives the incorrect impression that Jenkins X works only in GKE (Google Cloud Platform) and EKS (Amazon Web Services).\n\n<!-- * Write a how-to guide on using the new Terraform scripts to create Kubernetes clusters. Currently, on the docs site there is a [TODO for documentation on using Terraform to set up cloud resources](https://jenkins-x.io/docs/labs/boot/getting-started/cloud/terraform/). Using Terraform scripts to create clusters makes cluster creation more transparent and can increase default security. For more information on using Terraform scripts, please see a [recent office hours demo](https://www.youtube.com/watch?v=yujge0PHxd4) by [Hardy Ferentschik](https://github.com/hferentschik). -->\n\n* Build out [Creating Projects](/docs/getting-started/first-project/) section to include new or extended sections such as Understanding Buildpacks, New Project With Quickstart Or Import, Defining Environments, etc. The GSoD writer would work with the Jenkins X engineering team and community to build out those pages.\n\n* Create FAQs for select docs pages. The GSoD writer would read through our [Kubernetes slack channels](/community/#slack) and [closed issues](https://github.com/jenkins-x/jx/issues?q=is%3Aissue+is%3Aclosed) to identify the most common questions we are asked and to take the answers given to build out the FAQs.\n\n\n### \ud83d\udcc6 Important Dates\n\nThe main part of Season of Docs runs for three months, from September to December 2020, but the application period for technical writers ends on July 9, 2020. [Detailed GSoD Timeline can be found here](https://developers.google.com/season-of-docs/docs/timeline).\n\n* May 4, 2020: Deadline for Jenkins X to apply to Season of Docs\n* May 11 - June 8, 2020: Technical writers discuss project ideas with mentoring organisations\n* July 9, 2020: Deadline for technical writer applications\n* September 14 - December 5, 2020: Technical writers work on their projects with guidance from mentors\n\n\n### \ud83d\udc4b Come meet us and ask us questions\n\nWe welcome technical writers to join our slack channels and our office hours. We'd be happy to answer your questions and guide you with your pull requests!\n\nTalk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/), and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nWe also have online office hours, during which we talk about new developments in Jenkins X and you are welcome to ask us questions. We meet for office hours **every other Tuesday** at 15:00 UTC (*See your timezone [here](https://time.is/1500_in_UTC)*).\n\nNext office hours are on **5 May**. Join us here: https://zoom.us/j/397862697\n\n### Additional Information\n\n#### Technical Writers\n* [Contributing to the Jenkins X documentation](https://jenkins-x.io/community/documentation/)\n* [GSoD Technical Writer guide](https://developers.google.com/season-of-docs/docs/tech-writer-guide)\n* [GSoD Timeline](https://developers.google.com/season-of-docs/docs/timeline)\n\n#### Mentors\n* [GSoD Mentor Guide](https://developers.google.com/season-of-docs/docs/mentor-guide)\n* [GSoD Timeline](https://developers.google.com/season-of-docs/docs/timeline)\n* [Selecting projects](https://developers.google.com/season-of-docs/docs/project-selection)\n* [Working with a technical writer](https://developers.google.com/season-of-docs/docs/tech-writer-collaboration)\n\n*We'd love your help to make Jenkins X even more awesome and welcome your participation!*\n",
            "content/en/blog/news/2021-argo.md": "---\ntitle: \"Jenkins X 3 and Argo CD\"\ndate: 2021-06-28\ndraft: false\ndescription: Jenkins X 3 and Argo CD\ncategories: [blog]\nkeywords: [argo, jx3]\nslug: \"argo\"\naliases: []\nauthor: James Rawlings\n---\n\nThere have been a number of requests from the Jenkins X community to use [Argo CD](https://argoproj.github.io/argo-cd/) for the last mile deployment phase of their continuous delivery pipelines.  This blog explains some of the advantages of using Jenkins X and Argo CD all together.\n\nWhat's included?\n\n- Jenkins X for Cloud Infrastructure using Terraform, core installation management with GitOps, external secret management, ingress controller, quickstarts, automated CI + CD pipelines, ChatOps\n- Tekton for pipeline orchestration\n- Argo CD for end users application deployments (not the main installation)\nArgo CD provides a declarative GitOps approach to deploying Kubernetes based applications.  There is a GUI which helps construct the deployment definition (in the form of an `Application` custom resource) which offers a number of configuration options, as well and providing insight into your clusters applications.\n\n\n<img src=\"/images/v3/argocd.png\"/>\n\n---\n\nYou might be wondering why you would want to use BOTH Jenkins X and Argo CD together.\nJenkins X aims to embrace OSS, where possible providing a nice UX to integrate with other projects and help provide better solutions for building, developing and running software on Kubernetes.  Jenkins X indeed does have a git operator that applies Kubernetes YAML from a Git repository but there are some differences:\n \n- Jenkins X uses GitOps principles for the entire installation, i.e. the starting point is a Git repository which is used to provision a cluster and manage (automatic if users wish) upgrades whereas today Argo CD uses a manual `kubectl apply` to manage the Argo installation itself.\n \n- External Secrets integration for Vault, Google Secrets manager etc is something that Jenkins X provides out of the box.  When Kubernetes based applications require a secret we prefer the source is stored in a secrets manager and the value synchronised automatically into the cluster enabling easier secret rotation, avoiding local secrets on machines and an easier UX for working with secrets.  When adding an Application via Argo CD users can leverage the Jenkins X approach to working with secrets and rely on Argo to manage the deployments.  If users prefer to work with SOPS that is totally fine too and will work in the same way as they are used to.\n\n- If you do not wish to expose direct access for the Kubernetes cluster to developers then using a combination of Jenkins X UI for accessing logs and Argo CD for managing application deployments may be enough.\n\n- Using the Jenkins X approach to promoting via automated pull requests via pipelines to add new helm charts and update chart release version numbers.\n \n- In a Jenkins X [multi cluster](/v3/admin/guides/multi-cluster/multi-cluster/) setup you can choose to use jx-git-operator or Argo CD in the remote cluster to syncronise promoted applications into the staging or production clusters.  This way you get all the benefits of the integrated Jenkins X experience to manage the build infrastructure and provide the developer experience like preview environments and chatops etc.\n\nThis is done by creating a new Git repository that will contain a number of Argo CD `Application` Kubernetes resources.  This also means we handle disaster recovery scenarios and are able to recover the Jenkins X installation which includes Argo CD plus any applications managed by Argo CD itself.\n\nThere may be a couple of models to try but here we are going to describe an approach we have validated when using Jenkins X to manage the core Kubernetes installation, using Tekton for Continuous Integration, Jenkins X for application promotion and Argo CD for deployments.\n\n\n## Install Argo CD with Jenkins X\n\n- Prerequisite is a working Jenkins X 3 installation\n\n1. Add a Argo CD helmefile to your Jenkins X cluster git repository:\n```bash\nmkdir -p helmfiles/argocd\n```\n\nCreate a new file\n\n`./helmfiles/argocd/helmfile.yaml`\n\n```yaml\nnamespace: argocd\nreleases:\n- chart: argocd/argo-cd\n  name: argocd\n- chart: ../../charts/argo-applications\n  name: argo-applications\n```\n\nEdit the root `./helmfile.yaml` and add a new path reference to the helmfile above\n\n```yaml\n- path: helmfiles/argocd/helmfile.yaml\n```\n\nJenkins X will resolve default helm values from the Jenkins X version stream.\n\n2. Create a new git repository to contain the Argo CD `Application` Kubernetes resources, this means we can use Jenkins X pipelines to promote users applications via GitOps.\n\n3. Back in your clusters Git repository create a new folder:\n```bash\nmkdir -p charts/argo-applications\n```\ncreate a file in the new folder and replace the `repoURL:` with the Git URL from step 2 above.\n\n`charts/argo-applications/applications.yaml`\n\n```yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: staging\n  namespace: argocd\nfinalizers:\n- resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    name: ''\n    namespace: argocd\n    server: 'https://kubernetes.default.svc'\n  source:\n    path: .\n    repoURL: 'https://github.com/$REPLACE_WITH_GIT_OWNER/  $REPLACE_WITH_GIT_REPO'\n    targetRevision: HEAD\n    directory:\n      recurse: true\n  project: default\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n      - Replace=true\n      - CreateNamespace=true\n```\n\n4. commit your changes and push\n\n```bash\ngit add helmfiles/argocd/helmfile.yaml\ngit add charts/argo/applications.yaml\ngit commit -m 'feat: enable Argo CD'\ngit push\n```\n\nIf you are on a fork then PR your changes\n\n5. Follow Jenkins X admin logs to ensure Argo CD is installed\n\n```bash\njx admin logs\n```\n6. Get the Argo CD UI password using something like [ksd](https://github.com/mfuentesg/ksd) or `base64 -D` to decode the value:\n\n```bash\nkubectl get secret argocd-initial-admin-secret -n argocd -oyaml | ksd\n\n```\n7. Get the Argo CD UI hostname and login using the `admin` username + passowrd from step 6 above (you may need to accept insecure TLS browser prompt if not using production TLS)\n\n```bash\nkubectl get ing argocd-server -n argocd\n```\n\n8. Create a new quickstart or update an existing Jenkins X applications `./lighthouse/jenkins-x/release.yaml` pipeline, replaceing the Tekton `promote-jx-promote` step to use argo instead:\n\n```yaml\n- image: uses:jenkins-x/jx3-pipeline-catalog/tasks/updatebot/release.yaml@versionStream\n  name: promote-release\n  script: |\n    #!/usr/bin/env sh\n    source .jx/variables.sh\n    jx updatebot argo promote --target-git-url https://github.com/$REPLACE_WITH_GIT_OWNER/$REPLACE_WITH_GIT_REPO\n```\n \nNow merge a change to your application or manually trigger a release pipeline `jx pipeline start` to get a new release and promote using Argo CD.\nOnce the release pipeline finished for your application you should see a new `application.yaml` resource in your uber application Git repository we created in step 2 above.\nOnce this change is merged to the main branch Argo detects the new chart / version and applies it to the cluster.  You will be able to track the status and health of the deployment via the GUI that you logged in with step 7 above.\n\n# Conclusion\n\nI really did like the experience of Argo CD, there's some overlaps with Jenkins X across the wider projects however I think there's enough of a differentiation for both to complement each other.  What I loved was that both projects as well as others like [flux](https://www.weave.works/oss/flux/) promote the use of GitOps.  Anyways, congratulations to the Argo project and I hope users from both communities find this blog useful and / or interesting.",
            "content/en/blog/news/2021-cdcon-cfp.md": "---\ntitle: \"cdCon 2021 - Call for Jenkins X Proposals\"\ndate: 2021-02-25\ndraft: false\ndescription: Submit your cdCon talk by March 5!\ncategories: [blog]\nkeywords: [Community, cdCon, call for papers 2021]\nslug: \"cdcon-cfp\"\naliases: []\nauthor: CD Foundation\n---\nHear ye! Hear ye! Jenkins X Community,\n\ncdCon 2021 (the Continuous Delivery Foundation\u2019s annual flagship event) is happening June 23-24 and its call for papers is open! \n\nThis is your chance to share what you\u2019ve been doing with Jenkins X. Are you building something cool? Using it to solve real-world problems? Are you making things fast? Secure? Or maybe you\u2019re a contributor and want to share what\u2019s new. In all cases, we want to hear from you!\n\nSubmit your talk for [cdCon 2021](https://events.linuxfoundation.org/cdcon/) to be part of the conversation driving the future of software delivery for technology teams, enterprise leadership, and open-source communities.\n\n**Submission Deadline**: Friday, March 5 at 11:59 PM PST\n\n## Topics\nHere are the suggested tracks:\n* **Continuous Delivery Ecosystem** \u2013 This track spans the entire Continuous Delivery ecosystem, from workflow orchestration, configuration management, testing, security, release automation, deployment strategies, developer experience, and more.\n* **Advanced Delivery Techniques** \u2013 For talks on the very cutting edge of continuous delivery and emerging technology, for example, progressive delivery, observability, and MLOps.\n* **GitOps & Cloud-Native CD** \u2013 Submit to this track for talks related to continuous delivery involving containers, Kubernetes, and cloud*native technologies. This includes GitOps, cloud-native CD pipelines, chatops, best practices, etc.\n* **Continuous Delivery in Action** \u2013 This track is for showcasing real-world continuous delivery addressing challenges in specific domains e.g. fintech, embedded, healthcare, retail, etc. Talks may cover topics such as governance, compliance, security, etc.\n* **Leadership Track** \u2013 Talks for leaders and decision-makers on topics such as measuring DevOps, build vs buy, scaling, culture, security, FinOps, and developer productivity.\n* **Community Track** \u2013 There is more to open source than code contributions. This track covers topics such as growing open source project communities, diversity & inclusion, measuring community health, project roadmaps, and any other topic around sustaining open source and open source communities.\n\nSingular project focus and/or interoperability between:\n* Jenkins\n* Jenkins X\n* Ortelius\n* Spinnaker\n* Screwdriver\n* Tekton\n* Other \u2013 e.g. Keptn, Flagger, Argo, Flux\n\nView all tracks and read [CFP details here](https://events.linuxfoundation.org/cdcon/program/cfp/).\n\nWe look forward to reading your proposal!\n\n[Submit your talk](https://events.linuxfoundation.org/cdcon/program/cfp/)\n\n![cfp image](/images/cdcon-cfp-jx.png)\n",
            "content/en/blog/news/2021-cdcon.md": "---\ntitle: \"Jenkins X at cdCon\"\ndate: 2021-06-22\ndraft: false\ndescription: overview of Jenkins X related sessions at cdCon 2021\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx-cdCon-2021\"\naliases: []\nauthor: Jenkins Strachan\n---\n\n[cdCon 2021](https://events.linuxfoundation.org/cdcon/) is about to start with lots of [great sessions](https://events.linuxfoundation.org/cdcon/program/schedule/).\n\nHere' a list of the [Jenkins X related](https://jenkins-x.io/) sessions:\n            \n## Tuesday, June 22 GitOps Summit\n\n* [Best Practices for Secret Management with GitOps](https://sched.co/il6v) - [Kara de la Marck](https://gitopssummit2021.sched.com/speaker/kdelamarck), CloudBees\n    * GitOps uses Git as the \u201csingle source of truth\u201d for declarative infrastructure and enables developers to manage infrastructure with the same Git-based workflows they use to manage a codebase. Having all configuration files version-controlled by Git has many advantages, but best practices for securely managing secrets with GitOps remain contested. Join us in this presentation about GitOps and Secret Management. Attendees will learn about different approaches to secret management with GitOps, the issues involved, and the secret management solutions offered by various tools and platforms. We will discuss the pros and cons of Vault, SOPS, offerings by public cloud providers, and more.\n\n## Wednesday, June 23\n                 \n* [MLOps with Jenkins-X: Production-ready Machine Learning](https://sched.co/ios6) by [Terry Cox](https://cdcon2021.sched.com/speaker/terry289)\n    * Explore ways to treat Machine Learning assets as first class citizens within a DevOps process as Jenkins-X MLOps Lead, Terry Cox demonstrates how to automate your training and release pipeline in Cloud environments, using the library of ML template projects provided with Jenkins-X.\n* [Enabling a DevOps Mindset at Scale in an Enterprise](https://sched.co/iouo) by Jimmy McNamara & Nick Penston, Fidelity Investments\n    * Talk through the cultural enablers to create a strong DevOps culture within large organisations. Nick and Jimmy will talk through the cultural enablers to support large numbers of very talented and ambitious cloud engineers. Touching on strategies supporting strong communication and talent development for cloud engineers. Key themes: Talent Development Enabling DevOps culture Harnessing the voice of the developer/cloud engineer\n* [BoF Session: Jenkins X - James Strachan & James Rawlings, Cloudbees](https://sched.co/j06v) by James Strachan & James Rawlings\n    * This BoF will be an open discussion on anything related to Jenkins X, automating Continuous Delivery, Kubernetes, cloud and how to Accelerate delivering value to your customers\n\n\n## Thursday, June 24\n\n* [How Jenkins X is Integrating Observability from the Inside, and the Benefits for its Users](https://sched.co/ios0) by [Vincent Behar](https://cdcon2021.sched.com/speaker/vincent.behar1), Dailymotion\n    * In this session, we'll focus on observability for Jenkins X: what observability means for a Continuous Delivery platform such as Jenkins X, and why it's important.\n    * We'll see how Jenkins X v3 is integrating observability from the inside, using standards such as OpenTelemetry, and packaging a full observability stack using Grafana - with Loki, Promtail, Tempo, and Prometheus.\n    * And we'll highlight the benefits for the users:\n      * platform observability with alerting for all the Kubernetes components (Lighthouse, Tekton, Cert-Manager, ...)\n      * out-of-the-box dashboards for Continuous Delivery Indicators (Mean Lead Time, Time To Review, Release, and Deployment Frequency, ...)\n      * distributed traces for your pipelines\n* [What's new with Jenkins X 3](https://sched.co/iotV) by James Rawlings & James Strachan, CloudBees\n    * This session will cover the architectural improvements and new features of Jenkins X v3. \n    * We'll dive into the key areas that have undergone major development. \n    * GitOps: a better approach to installation and upgrades leveraging Helmfile, using an in-cluster operator to apply desired state stored in Git. \n    * Secrets: out of the box integration with external secret management solutions such as Google + Amazon cloud services Infrastructure: decoupled infrastructure management using Terraform UX: hosted dashboard to link your pull request logs along with a local Octant UI for deeper cluster visualisations\n    * Cloud Native Pipelines: now using vanilla Tekton pipelines with no abstraction layer. \n    * Along with Lighthouse to handle both in repo and shared pipeline definitions we now have a clean, extendable way to describe pipelines. Health: health checks and insight via Grafana\n    \n* [Embrace ChatOps by Following the git-flow as Usual](https://sched.co/iote) by [Rick Zhao](https://cdcon2021.sched.com/speaker/rick417), Qingcloud\n    * Simplicity matters. It\u2019s not desirable for us to invest in more systems or platforms. The best scenario is to keep our daily work unchanged. For example, software engineers usually spend a lot of time writing codes or documents and also have interactions with various pull requests. Lighthouse is similar to Prow, but it supports multiple git providers. We can speed up delivery no matter if you're using GitHub, Gitlab, or Gitea.\n",
            "content/en/blog/news/2021-databases.md": "---\ntitle: \"Continuous microservices with databases in Jenkins X\"\ndate: 2021-06-25\ndraft: false\ndescription: automate your CI/CD with microsevices, databases and preview environments\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx-cd-databases-2021\"\naliases: []\nauthor: Jenkins Strachan\n---\n\nA common question we get asked on the [Jenkins X project](https://jenkins-x.io/) is how to get started creating microservices that use databases with [automated CI/CD](/v3/develop/create-project/) with [GitOps Promotion](/v3/develop/environments/promotion/) and [Preview Environments](/v3/develop/environments/preview/).\n\nTo make things a little easier to get started we've created a new [node-postgresql](https://github.com/jenkins-x-quickstarts/node-postgresql) quickstart.\n\n## Before you start\n\nIf you are using the cloud then we prefer [cloud over kubernetes](/v3/devops/patterns/prefer_cloud_over_kube/) for things like databases, storage, ingress and secret managers so please try use your clouds managed databases if you can. \n\n\nSo ideally you'd set up your database via your infrastructure as code solution, such as [terraform](https://www.terraform.io/), and then associate your [kubernetes Service Account to a cloud IAM role](/v3/devops/patterns/map-sa-to-cloud-iam/) to access the database.\n\nHowever to provide something simple that just works in any kubernetes cluster this quickstart uses the [postgres-operator](https://github.com/zalando/postgres-operator) to manage setting up each database cluster in each environment. So to be able to use this quickstart you will need to install this operator into your cluster.\n\nYou can [add charts to your cluster via the CLI](/v3/develop/apps/#using-the-cli). From inside a git clone of your cluster git repository run the following command:\n\n```bash \njx gitops helmfile add --chart commonground/postgres-operator --repository https://charts.commonground.nl/ --namespace postgres --version 1.6.2\n```\n\nThis will modify the `helmfile.yaml` to point at a new `helmfiles/postgres/helmfile.yaml` file to deploy the [postgres-operator](https://github.com/zalando/postgres-operator) chart.\n\nThen git commit and push that change to your cluster. You can watch it run via `jx admin log -w`.\n\n\n## Create the quickstart\n\nMake sure you have an [up to date cluster](/v3/admin/setup/upgrades/cluster/) as this particular quickstart is new and only shows up in recent clusters. \n\nNow [create the quickstart](/v3/develop/create-project/#create-a-new-project-from-a-quickstart) in the usual way...\n\n```bash\njx project quickstart\n```\n\nIf you know you want to create the [node-postgresql](https://github.com/jenkins-x-quickstarts/node-postgresql) quickstart you can do this to pre-filter the list for you:\n\n```bash\njx project quickstart -f postgres\n```\n\nOnce you have finished the import process will [set up the webhooks and enable CI/CD](/v3/about/how-it-works/#importing--creating-quickstarts) and the application will be released and promoted to the staging environment.\n\nIf you want to know more about what happens as you create quickstarts or import projects [see how it works](/v3/about/how-it-works/#importing--creating-quickstarts).\n\nYou can watch via the various pipelines run in the various [UI options](/v3/develop/ui/) or via the CLI use:\n\n```bash \njx pipeline grid \n```\n\nWhen the release is done and the promotion has completed you should be able to try it out via:\n\n```bash \njx application get \n```\n       \nYou should be able to click on the URL for the new quickstart and try it out once the database is initialised and the pods start up.\n\nIt can take a few minutes first time you deploy the quickstart for the database cluster to be setup and initialised; so you can watch the pods run via\n\n```bash \nkubectl get pod -n jx-staging -w \n```\n\nFor a deeper look into whats going on try:\n\n```bash \njx ui\n```\n\nWhich will open the [Octant UI with the Jenkins X plugin](/v3/develop/ui/octant/) which lets you navigate around namespaces and look at all of your kubernetes resources, deployments, pods and so forth in real time.\n\n\n## How does it work\n\nIn many ways this chart is fairly similar to other quickstarts in that it uses the Jenkins X pipeline catalog with tekton to add automated CI/CD pipelines and so forth.\n\nHowever to support the database there is a custom chart included inside this quickstart that does a few different things...\n\n* it creates a `Postgresql` custom resource for the [postgres-operator](https://github.com/zalando/postgres-operator) which will instruct the [postgres-operator](https://github.com/zalando/postgres-operator) to spin up a database cluster and generate a `Secret` to access the database. You can view this in your file at `charts/$myAppName/templates/` or [this file in the quickstart](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/charts/templates/db-postgresql.yaml)\n* there is a `charts/$myAppName/init.sql` file or [this file in the quickstart](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/charts/init.sql) which is used to setup the database tables and populate any initial data. You can use this file to perform any startup schema migration or data population. For more realistic applications you could use a custom tool and image to implement schema migration in a more sophisticated way.\n* the `init.sql` script is then installed as a `ConfigMap` via the `charts/$myAppName/templates/initdb-cm.yaml` file or [this file in the quickstart](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/charts/templates/initdb-cm.yaml)\n* the `charts/$myAppName/templates/deployment.yaml` file or [this file in the quickstart](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/charts/templates/deployment.yaml#L41-L57) defines:\n  * an in [init container](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) which sets up the database before the application starts to run. The nice thing about using an init container for schema migration is that it runs before any new version of your application gets any network traffic so that you can keep iterating on your microservice and keep changing your database schema across all of your environments and things work well.\n    * Though make sure your init container performs database locking correctly so that multiple init containers running concurrently don't block each other unnecessarily. If this becomes an issue you could introduce something a little more complex. e.g. include a `Job` with a unique name for each release in your chart to perform the migration so that only one migration Job runs at once and have your [init container](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) wait for your job to complete.\n  * the Deployment also uses [a secret created by the postgresql operator](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/charts/templates/deployment.yaml#L69-L73) to be able to connect to the database     \n\n### Previews\n\nDatabases often need a fair amount of maintenance, backup, upgrading and clean up over time. e.g. you may periodically update your Staging database with data from Production (maybe anonymised in some way?).\n\nSo creating a whole new database from scratch for every [Preview Environment](/v3/develop/environments/preview/) to test every code change in your microservice is maybe overkill.\n\nBy default the preview environment of this quickstart is configured to reuse the Staging environments database. This speeds up the preview startup time and reduces your cloud footprint and infrastructure cost.\n\n\nThis is done via:\n\n* [configuring the preview environment](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/preview/values.yaml.gotmpl#L1-L7) to point at the database in the staging namespace and disabling the creation of the Posgresql custom resource to create a new database cluster in the preview environment\n* using the [helmfile hooks mechanism](https://github.com/roboll/helmfile#hooks) in previews to [copy the required database secrets from the staging namespace](https://github.com/jenkins-x-quickstarts/node-postgresql/blob/master/preview/helmfile.yaml#L32-L44) so that the preview can connect to the staging database.\n\n           \n## How we can improve\n\nThis quickstart is just a start but we can improve in a number of directions - fancy [helping out](https://jenkins-x.io/community/)?\n\n### More languages and frameworks\n\nIt should be easy to replicate the same kind of quickstart mechanism for other languages and frameworks if anyone fancies trying it out? :) We [love contributions](https://jenkins-x.io/community/)! Pop by and chat with us on [slack](https://jenkins-x.io/community/#slack) if you want to discuss it further.\n\n### Cloud databases \n\nLonger term it would be nice to support other kinds of database operators too. \n\nWe prefer [cloud over kubernetes](/v3/devops/patterns/prefer_cloud_over_kube/) so if you are using a cloud it would be better to default to a cloud database instead of a kubernetes hosted one.\n\nThere are a number of other ways to define cloud infrastructure via [Custom Resources](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) such as:\n              \n* [AWS Controllers for Kubernetes](https://aws-controllers-k8s.github.io/community/)\n* [Azure Service Operator](https://github.com/Azure/azure-service-operator)  \n* [Crossplane](https://crossplane.io/)\n* [Google Config Connector](https://cloud.google.com/config-connector/docs/overview)\n\nSo it'd be interesting to see if we can replicate this model for other kinds of cloud database on different cloud providers. Mostly it'd be a [Custom Resources](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) to define the database instance and a way to inject the host and secret.  Some database providers require an additional sidecar proxy too.\n\nIt would be easy to add optional configuration in the quickstart to support either the [postgres-operator](https://github.com/zalando/postgres-operator) or equivalents in [AWS Controllers for Kubernetes](https://aws-controllers-k8s.github.io/community/), [Azure Service Operator](https://github.com/Azure/azure-service-operator), [Crossplane](https://crossplane.io/) or [Google Config Connector](https://cloud.google.com/config-connector/docs/overview) via a simple flag in the `chart/$name/values.yaml` file\n\n### More modularity options\n\nIn a pure microservice kind of world, each database would be owned by a single microservice; so embedding the database definition and schema migration into a single helm chart is the simplest thing that can work across multiple environments and with progressive delivery etc. It makes it easier to tie changes to the microservice and schema together into a single chart.\n\nHowever sometimes you want to have multiple services sharing a database. For that you could have 1 microservice be the owner of the database and other services reuse it. Or you could separate out the database definition + migration to a separate helm chart which is released independently. \n\nSo it might make sense to make separate quickstart just to define the database definition and schema migration for these use cases: maybe via a `Job` rather than an [init container](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)).\n\n\n## Conclusion\n\nSo there's a really quick way to spin up a node based microservice using a database with an operator handling the setup of the database cluster which works well with [multiple environments](/v3/develop/environments/promotion/), progressive delivery and [Preview Environments](/v3/develop/environments/preview/).\n\nGive it a try and [let us know how you get on or if you can think of any more ways we can improve](/community/)\n\n",
            "content/en/blog/news/2021-debug-tekton.md": "---\ntitle: \"How to debug your Tekton pipelines\"\ndate: 2021-08-18\ndraft: false\ndescription: How do you easily debug and fix pipelines when they fail?\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"debug-tekton\"\naliases: []\nauthor: James Strachan\n---\n\n{{< alert color=\"warning\" >}}\n`TaskRun` breakpoint functionality is no longer supported since Tekton 0.29.0 upgrades in `3.2.298`. For more info see [Kubernetes 1.22 - Breaking change!](/blog/2022/04/22/kubernetes-1.22-tekton/).\n{{< /alert >}}\n\nTekton recently introduced a [debug feature](https://github.com/tektoncd/pipeline/blob/main/docs/debug.md#debug) when you create `TaskRun` resources so that steps can be paused at a breakpoint until told to move forwards so that you can diagnose why pipeline steps fail.\n\nThe latest Tekton release only supports breakpoints on `TaskRun` resources but there is a [Pull Request #4145](https://github.com/tektoncd/pipeline/pull/4145) to add support also to debugging `PipelineRun` resources as well. If you are reading this please add your thumbs up emoji feedback to the [PR #4145](https://github.com/tektoncd/pipeline/pull/4145)\n\nWe've switched Jenkins X to use a preview image of Tekton with [PR #4145](https://github.com/tektoncd/pipeline/pull/4145) included so that Jenkins X developers can easily debug their pipelines (which typically are `PipelineRun` resources).\n\n## How to debug Tekton Pipelines\n\nHere is a demo which shows how to debug pipelines:\n\n<iframe width=\"850\" height=\"500\" src=\"https://www.youtube.com/embed/QqTaclB6-oI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n### Prerequisites \n\nMake sure [your cluster is upgraded to the latest version stream](/v3/admin/setup/upgrades/cluster/). \n\nIf you intend to use the `jx` in the below examples make sure you [upgrade the CLI too](/v3/admin/setup/upgrades/cli/)\n\n\n### Enable a breakpoint\n\nTo enable a breakpoint you can: \n\n* use the [Lens UI](/v3/develop/ui/lens/) as shown in the above video by:\n  * right click on a `Pipeline` action menu \n  * select `Breakpoint -> Add`\n* you can use the [jx pipeline debug](https://jenkins-x.io/v3/develop/reference/jx/pipeline/debug/) command then select the pipeline to add/remove a breakpoint.\n                                      \n### Viewing breakpoints\n\nYou can view breakpoints in the [Lens UI](/v3/develop/ui/lens/) in the `Breakpoints` tab or via:\n\n```bash \nkubectl get lighthousebreakpoints\n\n# you can use the short name:\nkubectl get lhbp\n```\n\n\n### Using a breakpoint\n\nOnce you have set a breakpoint defined for a particular Pipeline you need to trigger the pipeline. e.g. perform a git commit on the git branch to trigger a new pipeline to execute.\n\nThe pipeline will execute as normal; you'll be able to view it execute via:\n\n* [Lens UI](/v3/develop/ui/lens/)\n* run [jx pipeline grid](https://jenkins-x.io/v3/develop/reference/jx/pipeline/grid/) to watch pipelines run and select the one you wish to view the log \n* run [jx pipeline log](https://jenkins-x.io/v3/develop/reference/jx/pipeline/log/) to watch the log of a specific pipeline\n\n### Opening a shell\n\nOnce your breakpoint is reached the pipeline pod will pause, waiting to continue.\n\nAt this point you can then open a shell inside the container.\n\nThe easiest way to do this is via the [Lens UI](/v3/develop/ui/lens/), click on the Pipeline action menu then `Shell` -> `latest step` and a shell will open.\n\nOtherwise you can use:\n \n```bash \nkubectl exec -it -c $name-of-container $name-of-pod (sh | bash | ash)\n```\n\n### Continuing after the breakpoint\n          \nIf you wish to continue the execution of a pipeline there are [multiple scripts you can run inside the shell](https://github.com/tektoncd/pipeline/blob/main/docs/debug.md#debug-scripts) you can run inside the shell in the pipeline to tell the pipeline to continue:\n\n| Script | Description |\n| --- | --- |\n| `/tekton/debug/scripts/debug-continue` | Mark the step as completed with success by writing to `/tekton/tools` so that the pipeline continues executing |\n| `/tekton/debug/scripts/debug-fail-continue` | Mark the step as completed with failure by writing to `/tekton/tools` which can lead to the pipeline terminating |\n\n### Removing breakpoints\n\nThere are a few ways to delete breakpoints. \n     \nYou can run [jx pipeline debug](https://jenkins-x.io/v3/develop/reference/jx/pipeline/debug/) and toggle off any existing breakpoints.\n\nYou can use the `Breakpoints` tab in [Lens UI](/v3/develop/ui/lens/) then click the breakpoints action menu then `Remove`\n\nOr find the one you want via: \n\n```bash \nkubectl get lhbp\nkubectl delete lhbp whatever-the-name-is\n```\n\n## Conclusion \n\nSo there you have it; nice and easy debugging of pipelines so you can diagnose why pipelines fail and try incrementally fix things up from inside the pipeline pods! Pretty cool eh!\n\nLet us know via [slack](https://jenkins-x.io/community/#slack) or the [issue tracker](https://github.com/jenkins-x/jx/issues) if you can think of any ways we can make this even easier to use! Also check out the [Tekton enhancement proposal 42](https://github.com/tektoncd/community/blob/main/teps/0042-taskrun-breakpoint-on-failure.md) that covers this capability in the underlying tekton controller and pods.\n\nFinally please add your thumbs up emoji to the [tekton PR #4145](https://github.com/tektoncd/pipeline/pull/4145) :) \n\n\n",
            "content/en/blog/news/2021-gitops-pipelines.md": "---\ntitle: \"GitOps your cloud native pipelines\"\ndate: 2021-02-25\ndraft: false\ndescription: overview of how to use GitOps to manage your cloud native pipelines\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"gitops-pipelines\"\naliases: []\nauthor: James Strachan\n---\n\n[Tekton pipelines](https://tekton.dev/) are cloud native and are designed from the ground up for kubernetes and the cloud:\n\n* there's no single point of failure and the pipelines are elastically scalable\n* each pipeline is completely declarative and self defined \n* each pipeline executes independently of any others \n* pipelines are orchestrated via the sophisticated kubernetes scheduler:\n    * can use pipeline specific metadata for resource limits and node selectors: memory, CPU, machine type (GPU, windows/macOS/linux etc)\n* its easy to associate pipelines with [Cloud IAM roles](/v3/devops/cloud-native/#map-iam-roles-to-kubernetes-service-accounts) to avoid you having to upload cluster admin secrets to your public CI service which really helps security and helps reduce accidental bitcoin mining on your cloud account\n\nIn a previous blog we talked about how you can [accelerate your use of tekton with Jenkins X](/blog/2020/11/11/accelerate-tekton/).\n\n## The problem\n\nWe are moving towards a microservice kind of world with many teams writing many bits of software in many repositories. So there are lots and lots of pipelines. These pipelines keep getting more sophisticated over time; doing much more (all kinds of building, analysis, reporting, testing, ChatOps etc) and the software/images/approaches they use change. \n\nSo how can we manage, configure and maintain them all so that there are many pipelines for many repositories; where each repository can customise anything it needs but we can easily maintain everything continuously and its easy to understand and tool around?\n                               \n\n### Previous solutions\n\nWe've tried to tackle this problem in a number of ways over the years; each has pros and cons.\n\nOne option is to put all your pipelines in a shared library. You can then reference the pipelines by name in each of your repositories. \n\nBut what if you want to change a bit of a pipeline for a specific repository? If you change it globally for everyone you can break things. You may just want local customisation for your repository only. \n\nYou can add parameters into your pipelines. They are [quite verbose on Pipelines and PipelineRuns](https://github.com/tektoncd/pipeline/issues/1484); but it's hard to think up front of every parameterisation that may be required by downstream repositories. e.g. changing any image; changing any command line argument in any step, adding/changing any environment variables or volumes? How about adding extra steps before/after a particular step? It can soon get very complex and results in very complex pipelines that are hard to understand and use.\n        \nAnother option is if you need to change a pipeline file you just copy the entire file or create a fork. But then you end up with 100s of copies or forks of pipelines that are hard to synchronise and manage. You end using ancient image versions or older approaches in some repositories which leads to maintenance nightmare. How do you roll out security updates to images in all those repositories, copies and forks?\n\nAnother approach we tried is using a tool like [kpt](https://googlecontainertools.github.io/kpt/) to share YAML files across git repositories and then upgrade them via git. This does work quite well; though the downside is whenever you upgrade a new version (e.g. we roll out a new pipeline catalog or a new image change to a tool for security reasons) you need to generate a pull request on every git repository to upgrade them and usually you end up with merge conflicts as the tekton YAML is not trivial; even fairly minor local customisations lead to merge conflict hell.\n\nSo how can you apply the benefits of [GitOps](/v3/devops/gitops/) to your cloud native pipelines while also avoiding copy-paste of lots of YAML into all of your repositories, keeping things easy to understand and flexible so any repository can customize things when required but at the same time make it painless to move reliably forward as the pipeline catalogs and images change?\n\n## GitOps your pipelines\n\nNow our recommendation on the [Jenkins X](https://jenkins-x.io/) project is to use [GitOps](/v3/devops/gitops/) for your pipelines as well as for your source code and deployment configuration:\n\n* store your pipelines as declarative YAML files inside each of your git repositories.\n* use the standard [Tekton YAML syntax](/v3/develop/reference/pipelines/) so that you get [IDE support](/v3/develop/pipelines/editing/#ide-support) and [easy linting](/v3/develop/pipelines/editing/#linting) \n\nThis lets each git repository configure what pipelines are triggered by what events with what pipeline steps.\n\nIf you need to [edit your pipelines in any repository](/v3/develop/pipelines/editing/) they are right there in git; it is then easy for each repository to use its own version and configuration if required. This lets pipelines and repositories change over time independently to help you accelerate.\n\n## Sharing Tasks and Steps across repositories\n\nRather than copy pasting [task and step YAML](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task) between repositories we can refer to a `Task` or a `Step` in a Task as follows:\n\n* refer to all the steps in a shared task by using\n\n```yaml\ntaskSpec:\n  steps:\n  - image: uses:sourceURI\n```\n\n* refer to a single _named_ step from a shared task\n\n```yaml\n  taskSpec:\n    stepTemplate:\n      image: uses:sourceURI\n    steps:\n    - name: mystep\n```\n\n### SourceURI notation\n\nThe source URI notation is enabled by a special `image` prefix of **uses:** on step or if an image on a step is blank and the `stepTemplate:` has an `image` prefix of **uses:**\n\nWe borrowed this idea from [ko](https://github.com/google/ko) and [mink](https://github.com/mattmoor/mink); the idea of using a custom prefix on image URIs.\n\nYou can refer to the [detailed documentation](https://github.com/jenkins-x/lighthouse/blob/master/docs/pipelines.md) on how the step inheritence and overriding works.\n\nFor a [github.com](https://github.com) source URI we use the syntax:\n\n```yaml\n- image: uses:owner/repository/pathToFile@version\n```\n\nThis references the https://github.com repository for `owner/repository` and **@version** can be a git tag, branch or SHA.\n\nIf you are not using [github.com](https://github.com) to host your git repositories you can access a pipeline task or step from your custom git serve use the **uses:lighthouse:** prefix before `owner`:\n\n```yaml\n- image: uses:lighthouse:owner/repository/pathToFile@version\n```\n\nWe [recommend you version everything with GitOps](/v3/devops/gitops/#recommendations) so you know exactly what versions are being used from git. \n\nHowever you can use **@HEAD** to reference the latest version.\n\nTo use a locked down version based on the _version stream_ of your cluster, you can use **@versionStream** which means use the git SHA for the repository which is configured in the version stream.\n\nThe nice thing about **@versionStream** is that the pipeline catalog you inherit tasks and steps from is locked down to an exact SHA in the version stream; but it avoids you having to go through every one of your git repositories whenever you upgrade a pipeline catalog.\n                \n\n## Reusing Tasks and Steps from Tekton Catalog\n                  \nThe [Tekton Catalog](https://github.com/tektoncd/catalog) git repository defines a ton of Tekton pipelines you can reuse in your pipelines\n\nYou can `image: uses:sourceURI` notation inside any pipeline file in your `.lighthouse/jenkins-x/mypipeline.yaml` file like this:\n\n```yaml \nsteps:\n  - image: uses:tektoncd/catalog/task/git-clone/0.2/git-clone.yaml@HEAD\n```\n\nThis will then include the steps from the [git-clone.yaml](https://github.com/tektoncd/catalog/blob/master/task/git-clone/0.2/git-clone.yaml) file \n\nIt's not just the [Tekton Catalog](https://github.com/tektoncd/catalog)  - you can use this same approach to reuse Tasks or steps from any git repository of your choosing; such as the [Jenkins X Pipeline catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks)\n\n\n## How it looks\n\nSo here is an [example release pipeline](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/javascript/.lighthouse/jenkins-x/release.yaml) generated via the [Jenkins X Pipeline catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks) if you create a [JavaScript quickstart](/v3/develop/pipelines/catalog)\n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      taskSpec:\n        stepTemplate:\n          env:\n          - name: NPM_CONFIG_USERCONFIG\n            value: /tekton/home/npm/.npmrc\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: 400m\n              memory: 512Mi\n          volumeMounts:\n          - mountPath: /tekton/home/npm\n            name: npmrc\n          workingDir: /workspace/source\n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n        - name: next-version\n        - name: jx-variables\n        - name: build-npm-install\n        - name: build-npm-test\n        - name: check-registry\n        - name: build-container-build\n        - name: promote-changelog\n        - name: promote-helm-release\n        - name: promote-jx-promote\n        volumes:\n        - name: npmrc\n          secret:\n            optional: true\n            secretName: npmrc\n  serviceAccountName: tekton-bot\n  timeout: 240h0m0s\n```\n\nYou can see it mounts an npm secret for using npm package management and specifies CPU and memory requirements. It then is using the **uses:** notation to inherit a bunch of steps from the [jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/javascript/release.yaml) as well as sharing the [jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/git-clone/git-clone.yaml) task\n\nAlso notice we don't have to copy and paste the exact details of the images, commands, arguments, environment variables and volume mounts required for each step; we can just reference them via Git. Also each pipeline in each repository can reference different versions if required.\n                                                               \n\n### Customizing an inherited step\n\nYou can edit the step in your [IDE](/v3/develop/pipelines/#ide-support) and add any custom properties such as `command`, `args`, `env`, `script` or `volumeMount` - those values then override the inherited step.\n\ne.g. you can then change any command line, add an environment variable or add a new volume mount without copy pasting the whole step. e.g. we change the `script` value of the `jx-variables` step below:\n     \n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nspec:\n  pipelineSpec:\n    tasks:\n    - taskSpec:\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n        steps:\n        - name: jx-variables\n          script: |\n            #!/usr/bin/env sh\n            echo my replacement command script goes here\n```\n\nAny extra properties in the steps are used to override the underlying uses step.\n       \n\n### Inlining a pipeline step locally\n\nIf you want to edit a step that is inherited from a pipeline catalog just run the [jx pipeline override](https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_override.md#jx-pipeline-override) command from a clone of your repository.\n\n```bash\njx pipeline override\n```\n\nThis will then prompt you to pick which pipeline and step that's inherited via the `image: uses:sourceURI` notation. When chosen the step will be inlined into your local file so you can [edit any of the properties](#customizing-an-inherited-step).\n\nYou can use the git compare to see the changes and remove any properties you don't wish to override.\n\n\n### Viewing the effective pipeline\n\nTo see the actual Tekton pipeline that would be executed from your local source directory you can run the [jx pipeline effective](https://github.com/jenkins-x/jx-pipeline/blob/master/docs/cmd/jx-pipeline_effective.md#jx-pipeline-effective) command:\n\n```bash\njx pipeline effective\n```\n\nIf you want to open the effective pipeline in your editor, such as [VS Code](https://code.visualstudio.com/) you can do:\n\n```bash\njx pipeline effective -e code\n```\n                   \nIf you use [Intellij](https://www.jetbrains.com/idea/) or any of [JetBrains other IDEs](https://www.jetbrains.com/products/#type=ide) you can do the following if you have [enabled](https://www.youtube.com/watch?v=SVANj3gAWt8) the `idea` [command line tool](https://www.youtube.com/watch?v=SVANj3gAWt8):\n\n```bash\njx pipeline effective -e idea\n```\n\nIf you want to always view an effective pipeline in your editor then define the `JX_EDITOR` environment variable...\n\n```bash\nexport JX_EDITOR=\"code\"\n\n# now we will always open effective pipelines inside VS Code\njx pipeline effective\n```\n\n                   \n## Summary\n\nWe've been on our own digital transformation journey in the world of pipelines and used many different approaches over the years to manage many pipelines across many repositories. \n\nA few months ago we moved to the above GitOps approach for our cloud native pipelines and we are absolutely loving it!\n\nIts super easy to:\n\n* share pipelines across all of your git repositories without copy/paste\n* easily customise pipelines in any project and be able to easily understand what the local changes are and roll them back if required  \n* upgrade pipelines across your repositories in a consistent way as you [upgrade your images, applications and cluster via GitOps](/v3/admin/setup/upgrades/cluster/) so that new versions of pipeline catalogs are upgraded once they pass the system tests.\n\nIf you are thinking about using cloud native pipelines with [Tekton](https://tekton.dev/) please try it out and see what you think. We'd love to hear your [feedback](/community/)\n",
            "content/en/blog/news/2021-gitops-secrets.md": "---\ntitle: \"How to use GitOps and Kubernetes External Secrets for better audit and security\"\ndate: 2021-08-17\ndraft: false\ndescription: How do you use GitOps and secrets nicely?\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"gitops-secrets\"\naliases: []\nauthor: James Strachan\n---\n\nSo **GitOps** is a cool approach to managing kubernetes resources in a cluster, by checking in the source code for:\n\n* the kubernetes YAMLs\n* details of the helm charts you want to install along with any configuration\n* kustomize scripts. \n\nThen everything is versioned and audited; you know who changed what, when and why. If a change breaks things, just revert via git like any other source code change.\n\nYou can then add pipelines to [verify](https://github.com/jenkins-x-plugins/jx-kube-test#readme) changes in the Pull Requests result in valid kubernetes YAML etc.\n\nThen if you merge changes to git then an operator detect the change and do the `kubectl apply` (or `helm install` or whatever). \n\nThere are a number of tools out there for doing this. e.g. [Anthos Config Management](https://cloud.google.com/anthos/config-management), [argo cd](https://argoproj.github.io/argo-cd/), [fleet](https://rancher.com/docs/rancher/v2.x/en/deploy-across-clusters/fleet/), [flux cd](https://fluxcd.io/) and [kapp controller](https://github.com/vmware-tanzu/carvel-kapp-controller)\n\nSo why did Jenkins X not use these tools and instead created its own [git operator](https://github.com/jenkins-x/jx-git-operator)?\n\n\n## Standardising GitOps layouts\n\nOver time it would be great to have more standardisation of the Git layout given the different tool.\n\nOur current recommended layout that works with many GitOps tools is [described here](https://github.com/jenkins-x-plugins/jx-gitops/blob/main/docs/git_layout.md).\n\n\n## Why Jenkins X uses helmfile template\n\nA number of solutions in the GitOps space define which helm charts to install in git with configuration files; or specify which kustomize templates to apply etc.\n\nHowever Jenkins X defaults to using [helmfile](https://github.com/roboll/helmfile) to manage installing, upgrading and configuring multiple helm charts. Then we use **`helmfile template`** to render the helm charts as kubernetes resources.\n\nWe do this for a very good reason; so that we can easily [version all kubernetes resources in git including those that come from a helm chart](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template) - which means you can easily view the entire history of changes of any kubernetes resources - whether they come from inside a helm chart, some configuration values of a chart or kustomize scripts etc. \n\nThis avoids you having to mentally understand how helm charts will change over time with the helm chart version and/or helm configuration; or the effect of kustommize scripts. You can just view the history of any kubernetes resource.\n\nWe use conventions to ensure that each kubernetes resource has a canonical file name in git to make this whole process much simpler.\n\ne.g. this is the git history of the [cert manager deployment resource in our production cluster](https://github.com/jenkins-x/jx3-eagle/commits/master/config-root/namespaces/cert-manager/cert-manager/cert-manager-cainjector-deploy.yaml) so you can see what changed when over time.\n\nThe exception to this rule is kubernetes `Secrets` which are stored instead as `ExternalSecrets` but which have their own history (e.g. in case you change the location of where the secrets are stored or modify the metadata, annotations or labels etc).\n\n\n## Why we use Kubernetes External Secrets\n\nJenkins X 3.x uses [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to manage populating secrets from your underlying secret store such as:\n\n* Alibaba Cloud KMS Secret Manager\n* Amazon Secret Manager\n* Azure Key Vault\n* Hashicorp Vault\n* GCP Secret Manager\n\n{{<mermaid>}}\ngraph TB\n    subgraph A[Kubernetes Cluster]\n        sqB[External Secrets Controller]\n        subgraph C[secrets-infra ns]\n            sqCV[Cloud Secret Manager]\n        end\n        subgraph D[Kube api server]\n        end\n        D -- Get ExternalSecrets --> sqB\n        sqB --> D\n        sqB -- Fetch secrets properties --> sqCV\n        sqCV --> sqB\n        subgraph E[app ns]\n            sqEP[pods]\n            sqES[secrets]\n        end\n        sqB -- Upsert Secrets --> sqES\n    end\n{{</mermaid>}}\n\nYou can then keep all your secrets inside your cloud native secret store which also allows:\n\n* easy to automatically rotate any secret  at any time independently of git\n* use fine grained RBAC on each secret\n\n\n## How to use this approach to GitOps and Secrets if not using Jenkins X\n\nIf you use [Jenkins X](/v3/admin/) then you get all of the above benefits. But what if you want to use some other kind of GitOps operator toolchain?\n\nOne option is to use the [jx-secret-postrenderer](https://github.com/jenkins-x-plugins/jx-secret-postrenderer#jx-secret-postrenderer) yourself if you use helm or [helmfile](https://github.com/roboll/helmfile) to then render the helm charts as raw YAML you can check into your git repository and implementing the conversion from `Secret` to `ExternalSecret`.\n\nAnother option is to reuse the Jenkins X `Makefile` and pipeline to setup the `config-root` [git layout](https://github.com/jenkins-x-plugins/jx-gitops/blob/main/docs/git_layout.md) after converting Secrets to ExternalSecretes and pre-populating any missing secret store values.\n \n\n## Summary\n\nIf you are looking at adopting GitOps then we highly recommend you [check into git all of your kubernetes resources including those that come from a helm charts or kustomize scripts](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template) (apart from `Secrets`!) as it massively simplifies understanding how kubernetes resources change over time using just pure git.\n\nIf you are using GitOps you may want to look into using [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to simplify integrating secrets for cloud native secret stores into your kubernetes cluster to provide finer grained RBAC and easier secret rotation.\n\n",
            "content/en/blog/news/2021-hacktoberfest-conclusion.md": "---\ntitle: \"Hacktoberfest conclusion 2021\"\ndate: 2021-11-22\ndraft: false\ndescription: >\n  Hacktoberfest 2021 conclusion\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"hacktoberfestconclusion2021\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\n[Hacktoberfest 2021](https://hacktoberfest.digitalocean.com/) is over, and we got quite a few contributions from the open source community.\n\nContributions included various document improvements, adding jira as an issue tracker for generating changelogs and adding initial support for external vault!\n\nThe top contributors to Jenkins X in hacktoberfest 2021 were:\n\n- Marten Svantesson\n- Christopher vig\n- James Rawlings\n- Hays Clark\n- Anatoli Babenia\n\nWe would also like to thank all the contributors who participated and made it a success.\nThe strength of Jenkins X lies in it's vast community, and we hope to see many more major contributions from them in the near and far future.\n\n### Ask us questions\n\nMissed this year's hacktoberfest?\nNo worries, you can always contribute to Jenkins X.\nWe're happy to help if you have any questions.\nTalk to us on our slack channels, which are part of the Kubernetes slack. Join Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n- #jenkins-x-dev for developers of Jenkins X\n- #jenkins-x-user for users of Jenkins X\n\n_We look forward to participating in the next hacktoberfest!_\n",
            "content/en/blog/news/2021-hacktoberfest.md": "---\ntitle: \"Hacktoberfest 2021\"\ndate: 2021-10-06\ndraft: false\ndescription: >\n  Contribute to Jenkins X as part of Hacktoberfest 2021\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"hacktoberfest2021\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\nWe are excited to announce that Jenkins X will be participating in Hacktoberfest again this year! Hacktoberfest is a month-long global celebration of open source software.\n\nAll backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors.\n\n**Learn more about Hacktoberfest and sign up [here](https://hacktoberfest.digitalocean.com/).**\n\n### Contribute to Jenkins X docs\n\nWe welcome your contributions to the [Jenkins X documentation project](https://github.com/jenkins-x/jx-docs)!\n\n[Issues labelled \"hacktoberfest\"](https://github.com/jenkins-x/jx-docs/issues?q=is%3Aissue+is%3Aopen+label%3Ahacktoberfest) generally indicate good first issues. However, all pull requests will count towards your Hacktoberfest challenge.\n\n### Ask us questions\n\nWe're happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nFind out more about becoming involved in the Jenkins X community [here](https://jenkins-x.io/community/).\n\n*We look forward to seeing you in open source, fixing all the things!*\n",
            "content/en/blog/news/2021-jx-v3-ga.md": "---\ntitle: \"Jenkins X 3.x GA is here!\"\ndate: 2021-04-15\ndraft: false\ndescription: Jenkins X 3.x is now Generally Available!\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx-v3-ga\"\naliases: []\nauthor: James Strachan\n---\n \nI'm super excited to announce the 3.0 GA (General Availability) release of Jenkins X! \n\n<img width=\"387px\" src=\"/images/jxxx.png\">\n\nJenkins X automates your CI/CD on kubernetes to help you [accelerate](/v3/devops/accelerate/):\n\n* [Automated CI/CD pipelines](/v3/develop/create-project/) lets you focus on your actually application code while Jenkins X automatically creates battle tested [Tekton](https://github.com/tektoncd/pipeline)  CI/CD pipelines for your project which are [managed via GitOps](/blog/2021/02/25/gitops-pipelines/) so that its super easy to keep your pipelines up to date across your repositories or to upgrade or [override pipelines or steps](/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally) for specific repositories.\n* [Automatic promotion of versioned artifacts](/v3/develop/environments/promotion) via [GitOps](/v3/devops/patterns/gitops/) through your [Environments](/v3/develop/environments/) such as `Staging`, `Pre-production` and `Production` whether they are running in the same kubernetes cluster or you are using [multiple clusters for your environments](/v3/admin/guides/multi-cluster/)  \n* [Preview Environments](/v3/develop/environments/preview/) lets you propose code changes via Pull Requests and have a Preview Environment automatically created, running your code in kubernetes to get fast feedback from your team before agreeing to merge changes to the main branch\n* [ChatOps](/v3/develop/developing/#using-chatops) comment on Pull Requests to give feedback, approve/hold changes, trigger optional pipelines for additional testing and other [ChatOps commands](/v3/develop/reference/chatops/)\n\n    \n## Demo\n\nHere's a [demo](/v3/develop/developing/#demo) of [how to develop code with Jenkins X](/v3/develop/developing/)\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4wqwulEzseM?t=279s\" title=\"Demo of developing with Jenkins X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Documentation\n\nthe main documentation of the changes are:\n\n* [the new architecture](/v3/about/overview/) with modular plugins and improved [extension points](/v3/about/extending/)\n* [what has changed since 3.x started](/v3/about/changes/) \n* [how 3.x compares to 2.x](/v3/about/comparison/) \n* [DevOps Guides](/v3/devops/) and [DevOps Patterns](/v3/devops/patterns/) provides an overview of our learnings in the DevOps space    \n\nhere's a brief summary of the differences:\n                          \n### Changes since the 3.x beta\n\nThe following [improvements have been made since the first beta](/v3/about/changes/):\n\n* [Integrated observability and monitoring](/blog/2021/04/01/jx3-builtin-observability/) with [Pipeline Tracing](/blog/2021/04/08/jx3-pipeline-trace/)\n* [Auto scale preview environments with Osiris](/blog/2021/04/01/jx3-osiris-preview-envs/)\n* [Enable auto upgrade](/v3/admin/setup/upgrades/cluster/#automatic-upgrades) to keep your cluster up to date\n\n### User Changes since 2.x\n\nAs a user the high level UX of Jenkins X is similar:\n\n* [automated Continuous Delivery pipelines](/about/concepts/features/#automated-pipelines) for using [tekton](/v3/develop/pipeline-catalog/) for your repositories with [automatic promotion](/about/concepts/features/#promotion) between your [environments](/about/concepts/features/#environments)\n* pull requests on your repositories create separate [Preview Environments](/about/concepts/features/#preview-environments) where your team can review your changes and give fast feedback before your changes are approved and merged into the main trunk.\n\n<img width=\"600\" src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n#### New features\n\n* we now default to [vanilla tekton YAML for defining pipelines](/v3/develop/pipeline-catalog/#source-changes) while [accelerating your tekton](/blog/2020/11/11/accelerate-tekton/) with [tekton catalog](/v3/develop/pipeline-catalog/#adding-tasks-from-the-tekton-catalog)\n* we include an open source [dashboard](/v3/develop/ui/dashboard/) for visualising pipelines and logs which you can invoke via:\n```bash \njx dash\n```\n* we have a full [Kubernetes and Jenkins X console](/v3/develop/ui/octant/) based on the excellent [octant](https://octant.dev/) which you can try out via:  \n```bash \njx ui\n```\n            \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n### Platform Changes\n\n* we now use [helm](https://helm.sh/) (3.x) and [helmfile](https://github.com/roboll/helmfile) along with optionally [kustomize](https://kustomize.io/) in a GitOps style to define and configure both Jenkins X itself, your tools and applications in any namespace\n* support [multi cluster](/v3/admin/guides/multi-cluster/) out of the box so you can keep `Staging` and `Production` in separate clusters to your development cluster where your pipelines run, you create and release immutable container images and other artifacts.\n* to [setup or upgrade](/v3/admin/) Jenkins X we use [terraform](https://www.terraform.io/) to setup your cloud resources on [Azure](/v3/admin/platforms/azure/), [Amazon](/v3/admin/platforms/eks/) or [Google](/v3/admin/platforms/google/) while also supporting on-premises, minkube and OpenShift - see the [Admin Guides](/v3/admin/) for more detail\n  * the actual installation of kubernetes resources takes place using the [git operator](/v3/admin/guides/operator/) so it runs reliably inside the cluster itself\n* we default to using [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to manage all secrets for Jenkins X itself, development tools and your applications too. \n  * This means we can support various secret backends such as Alibaba Cloud KMS Secret Manager, Amazon Secret Manager, Azure Key Vault, Hashicorp Vault or GCP Secret Manager\n  * It also means we can then check in all kubernetes resources and custom resources directly into git (apart from Kubernetes `Secrets`) so that it super easy to version, review and reason about your kubernetes resources in a GitOps way.\n* built in [TLS and DNS](/v3/admin/guides/tls_dns/) support along with [Heath](/v3/admin/guides/health/) reporting and visualising via [kuberhealthy](https://github.com/Comcast/kuberhealthy) \n* we now have an [LTS distribution](/v3/admin/setup/upgrades/lts/) which lets you switch to a much more slower cadence of releases of Jenkins X\n \nWe have been using Jenkins X 3.x in production now for many months (for CI/CD of all of the [3.x codebase](/v3/about/overview/source/) and [continuously upgrading our cluster in the standard way](/v3/admin/setup/upgrades/) and it's been much simpler and easier to use, operate and configure.\n\nWe have also been continuously delivering changes from Jenkins X into our production cluster for many months now and it's been working great - [GitOps](/v3/devops/patterns/gitops/) FTW!\n\nIn general Jenkins X 3.x is now much simpler and more flexible. It supports [lots more platforms than before](/v3/admin/) and should be easy to extend and configure for other platforms too.\n\n{{< admincards >}}\n\n\n### Getting started\n\nIf you have never tried [3.x](/v3/about/) before then please follow the [Admin Guide](/v3/admin/) to get Jenkins X installed on your cloud provider, on-premises kubernetes cluster or minikube.\n\nIf you previously tried the 3.x alpha then the [migration instructions are here](/v3/admin/guides/migrate/v3-alpha/).\n\nFor folks on older 2.x versions of Jenkins X please see [the 2.x migration instructions](/v3/admin/guides/migrate/v2/)\n\nOnce your cluster has been installed or migrated then check out the [User Guide](/v3/develop/) on how to develop software continuously with Jenkins X.\n\n\n### Final thoughts\n\nA huge thanks goes out to all the [contributors](/community/#contributors), folks in the [Jenkins X community](/community/) and the [community around all the open source projects we reuse](/v3/about/overview/projects/) who've helped get this beta together. The improvements in Jenkins X 3.x since 2.x are totally amazing, well done everyone!\n\nPlease give Jenkins X a try and [let us know what you think](https://jenkins-x.io/community/#slack) or [raise an issue](https://github.com/jenkins-x/issues\n). All feedback highly appreciated - particularly how we can keep improving to help you develop faster.\n\nIf you are at all interested in Continuous Delivery with kubernetes using [tools](/v3/about/overview/projects/) like [helm](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [knative](https://knative.dev/),  [lighthouse](https://github.com/jenkins-x/lighthouse) and last but definitely not least, [tekton](https://github.com/tektoncd/cli)  then please join the [community](/community/) - its great fun!\n\nFor any questions and feedback please reach out on slack https://jenkins-x.io/community/#slack",
            "content/en/blog/news/2021-jx3-apr-lts.md": "---\ntitle: \"Jenkins X 3 - April 2021 LTS\"\ndate: 2021-04-12\ndraft: false\ndescription: April '21 LTS release for Jenkins X 3\ncategories: [blog]\nkeywords: [lts, jx3, 2021]\nslug: \"jx3-lts-apr-21\"\naliases: []\nauthor: James Rawlings\n---\n \nThis is the second [LTS release](/v3/admin/setup/upgrades/lts/) for Jenkins X 3.x. \n \nLTS is a slower cadence version stream which contains a verified set of releases and configurations that have been used by teams tracking the bleeding edge Jenkins X.\n \nInitially when we decided to maintain an LTS version stream we thought we'd aim for monthly releases however this second release comes two months after the first.  This has given us more chances to run fixes and chart upgrades on Jenkins X own infrastructure to verify stability.\n \n__Note__ This LTS release is intended to be the final one before Jenkins X 3 is made Generally Available so stay tuned for the exciting news coming very soon!  We will of course continue to develop and release LTS post GA.\n \nIncluded in this release:\n- General beta bug fixes and helm chart upgrades\n- Enable [Observability](/v3/admin/guides/observability)\n- Enable [Slack](/v3/develop/ui/slack) notifications\n- Support for GitLab, Gitea, BitBucket Server and GitHub Enterprise\n \nPlease be aware of these changes\n- [Breaking changes](/v3/about/changes)\n- If using Vault move it outside of being managed by Jenkins X GitOps [important notes](/v3/develop/faq/config/vault/#after-an-upgrade-the-boot-job-is-waiting-for-vault-in-jx-vault)\n",
            "content/en/blog/news/2021-jx3-builtin-observability.md": "---\ntitle: \"Jenkins X v3: now with built-in observability\"\ndate: 2021-04-01\ndraft: false\ndescription: overview of the new built-in observability for Jenkins X\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx3-builtin-observability\"\naliases: []\nauthor: Vincent Behar\n---\n\nAs a Continuous Delivery platform, Jenkins X has a central part in your infrastructure. If it becomes unstable or unusable, it will impact the whole software delivery of your organization.\n\nThis is why observability is a critical topic for Jenkins X, and work has started to get observability built-in for Jenkins X v3:\n- **Platform Observability**: visualize logs and metrics for everything running in the Kubernetes cluster: Jenkins X's own components - Tekton, Lighthouse, cert-manager, ... - but also your own applications, that will be deployed either in preview environments or in the staging/prod environments.\n- **Continuous Delivery Indicators**: visualize pull requests, pipelines, releases, and deployments metrics, collected from cluster events and git events.\n\nWe're using [Grafana](https://grafana.com/) as the central visualization component: the main entry point from which you can get a complete overview of both your application's lifecycle - development, build, tests, releases, deployments, runtime - and your Continuous Delivery platform.\n\n## Platform Observability\n\nPlatform observability is not enabled by default for the moment, so the first step is to enable it, as explained in the [platform observability admin guide](/v3/admin/guides/observability/platform-observability/).\n\nOnce it's done, you'll get a running Grafana instance, pre-configured with data sources for applications logs - using [Loki](https://grafana.com/oss/loki/) - and applications metrics - using [Prometheus](https://prometheus.io/). But most important, it comes with a set of pre-defined [Grafana dashboards](https://github.com/jenkins-x-charts/grafana-dashboard) for the main platform components: Tekton, Lighthouse, cert-manager, ...\n\nHere is an example of such a dashboard, using a mix of data sources to display [cert-manager](https://cert-manager.io/) metrics collected by Prometheus - including the certificates expiration dates - and logs collected by Loki/Promtail:\n\n![cert-manager grafana dashboard for Jenkins X](/images/v3/observability_platform_cert-manager.png)\n\n## Continuous Delivery Indicators\n\nContinuous Delivery Indicators' main goal is to give people insights into their workflows/processes so that they can continuously improve them. This is based on the [DORA devops metrics](https://www.devops-research.com/research.html) and the [SPACE framework](https://queue.acm.org/detail.cfm?id=3454124k).\n\nThe [CD Indicators](https://github.com/jenkins-x/cd-indicators) addon is not enabled by default for the moment, so the first step is to enable it, as explained in the [continuous delivery indicators admin guide](/v3/admin/guides/observability/cd-indicators/).\n\nOnce it's done, you'll get a running collector, along with a PostgreSQL database. The collector will listen for various events, both from the cluster and the git repositories, and store pull requests, pipelines, releases, and deployments data in the PostgreSQL database. The addon will also expose a new Grafana data source along with pre-configured Grafana dashboards, which will be picked up by your running Grafana instance.\n\nHere is an example of such a dashboard, displaying various indicators for a single repository/application: contributors, reviews, pull requests, releases, deployments, ...\n\n![Continuous Delivery Indicators for a single repository](/images/v3/observability_cd_indicators_repository.png)\n\n## Roadmap\n\nThis is only the beginning! The next steps - in no particular order:\n- configure alerting - using Prometheus alertmanager and Grafana alerting features - with a set of pre-defined alerts\n- improve the dashboards\n- enable it by default, so that users can benefit from it out of the box\n\nContributions are welcomed:\n- [Grafana/loki/prometheus/... configuration in the versionstream](https://github.com/jenkins-x/jx3-versions)\n- [Grafana dashboards](https://github.com/jenkins-x-charts/grafana-dashboard)\n- [Continuous Delivery Indicators Collector & Grafana dashboards](https://github.com/jenkins-x/cd-indicators)\n",
            "content/en/blog/news/2021-jx3-feb-lts.md": "---\ntitle: \"Jenkins X 3 - February 2021 LTS\"\ndate: 2021-02-01\ndraft: false\ndescription: February '21 LTS release for Jenkins X 3\ncategories: [blog]\nkeywords: [lts, jx3, 2021]\nslug: \"jx3-lts-feb-21\"\naliases: []\nauthor: James Rawlings\n---\n\nThis is the first [LTS release](/v3/admin/setup/upgrades/lts/) for Jenkins X 3.x.  We are  still in the Beta release and the leadup to GA includes ensuring the process for LTS monthly releases is validated and working well.\nThis first releases focuses on:\n- community feedback following the Beta release\n- general helm chart upgrades\n- improved developer UX when editing Tekton pipelines [here](/v3/develop/pipelines/editing)\n- support for in-repo and shared Tekton pipeline libraries including git URI support,\ne.g.\n\n```bash\nuses:jenkins-x/jx3-pipeline-catalog/packs/javascript/.lighthouse/jenkins-x/pullrequest.yaml@v1.2.3`\n```\n\nmore documentation and examples can be found [here](https://github.com/jenkins-x/lighthouse/blob/master/docs/pipelines.md#configuring-pipelines)\n\n## What's the difference?\n\nBecause Jenkins X uses GitOps we can see the git diff of changes that will be brought in with a cluster upgrade.   Here is the Pull Request that has been verified for February LTS release.\nhttps://github.com/jenkins-x/jx3-lts-versions/pull/209/files\n \n## Anything else to be aware of?\n \nIncluded in the release is a switch of the NGINX Helm chart from the old Helm stable registry.  It was discussed on the community slack that some users on EKS and not using a custom domain had to change the domain in their cluster jx-requirements.yml file.\n \nThe change of Chart repository meant the old resources were removed and new ones added, resulting in a new Kubernetes LoadBalancer service was created, resulting in a new external IP address.  You may need to update the domain in your `jx-requirements.yml`.  To get the external IP run:\n \n```bash\nkubectl get service -n nginx\n```\nNote the external ip address and update your cluster git repository, `jx-requirements.yml`:\n```bash\ndomain: $EXTERNAL_IP_FROM_ABOVE.nip.io\n```\n```bash\ngit commit\ngit push\njx admin logs\n```\nAnd you should see the new ingress rules created when the boot job finishes:\n \n```bash\nkubectl get ing -n jx\n```\n\n# What's next?\nMarch LTS release aims to switch the incluster boot jobs to use https://carvel.dev/kapp/ rather than using `kubectl` to apply and prune Kubernetes resources.  `kapp` is a dependency aware approach to installing Kubernetes resources, this aims to help avoid timing issues when installing resources before certain services like cert-manager are fully up and running.\n \n",
            "content/en/blog/news/2021-jx3-lts-2021-05.md": "---\ntitle: \"Jenkins X 3 - May 2021 LTS\"\ndate: 2021-05-12\ndraft: false\ndescription: May '21 LTS release for Jenkins X 3\ncategories: [blog]\nkeywords: [lts, jx3, 2021]\nslug: \"jx3-lts-may-21\"\naliases: []\nauthor: James Rawlings\n---\n\nMay 2001 [LTS release](/v3/admin/setup/upgrades/lts/) is now available!\n\nLTS is a slower cadence version stream which contains a verified set of releases and configurations that have been used by teams tracking the bleeding edge Jenkins X.\n \nIncluded in this release:\n\n- Protect Pipeline Visualiser with OAuth2 [how to docs](/v3/admin/setup/ingress/oauth)\n- Terraform repositories are now protected by the Jenkins X version stream\n- external-dns helm chart upgrade to [v5.0.0](https://artifacthub.io/packages/helm/bitnami/external-dns/5.0.0)\n- Reduce external secrets polling of cloud services to reduce cloud costs\n- [Jenkins] for users using Jenkins the [Tekton Client plugin](https://github.com/jenkinsci/tekton-client-plugin) is now installed by default\n- Stackdriver format logging enabled when using GKE and services that use [jx-logging](https://github.com/jenkins-x/jx-logging) library.  If you enable the Stackdriver API in GCP you will get well formatted logs and alerts via Stackdriver.\n- Jenkins X Grafana dashboards updates with Lighthouse telemetry\n",
            "content/en/blog/news/2021-jx3-osiris-preview-envs.md": "---\ntitle: \"Scaling Preview Environments with Osiris\"\ndate: 2021-04-01\ndraft: false\ndescription: Jenkins X v3 now integrates Osiris to help you scale your preview environments\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx3-osiris-preview-envs\"\naliases: []\nauthor: Vincent Behar\n---\n\nOne of Jenkins X's core features is the [preview environments](/v3/develop/environments/preview/): temporary environments created automatically for each Pull Requests, to deploy your application and its dependencies. You can then use this preview environment to run integration tests, or manually use/test your application.\n\nThis is all great until you have more and more applications, each with a few dependencies (postgresql, mongodb, ...) and a few opened pull requests at any time. This means that you'll get more and more pods running in your Kubernetes cluster, in addition to Jenkins X's own components, your build pipelines, and of course your staging and production applications - unless you are using [multi-cluster](/v3/admin/guides/multi-cluster/). The result is that you'll need more nodes or bigger nodes. Which means more money.\n\nBut, these preview environments are in fact idle most of the time: they are only used for the integration tests, and sometimes when someone manually uses them. The rest of the time - including all night for example - they are just staying there, idle, and consuming resources. What if we could easily scale them down when they are idle, and automatically bring them up when we need them? So that a Pull Request staying opened for 2 weeks because someone went on vacation won't consume resources in your cluster.\n\n### Osiris\n\nEnter [Osiris](https://github.com/dailymotion-oss/osiris)! Initially created by the [Deislabs team](https://github.com/deislabs), Osiris is a Kubernetes component that will automatically scale down your \"idle\" pods, and scale them up when a request comes in. Although the [original project](https://github.com/deislabs/osiris) has been archived, the [Dailymotion team](https://github.com/dailymotion-oss) has taken over the maintenance of [a fork](https://github.com/dailymotion-oss/osiris). And they have been using it with success in their Jenkins X dev cluster for more than 2 years: they regularly have around 50 preview environments active at any time, and... 0 pods from these environments running at night - or on weekends. Coupled with a cluster autoscaler, it means that their Kubernetes cluster use between 3 and more than 20 nodes depending on the workload. Being able to scale down to a minimum number of nodes is a great benefit when using cloud resources.\n\n### How can you benefit from it in your own Jenkins X cluster?\n\n- first, you'll need to follow the [admin guide to enable Osiris in your dev cluster](/v3/admin/guides/preview-environments/)\n- and then, you'll need to add annotations to your Deployment/Statefulset and Service manifests - as explained in the [Osiris documentation](https://github.com/dailymotion-oss/osiris) - in your application's Helm chart\n\nNote that if you store data, you'll need to use persistent volumes (for postgresql, mongodb, ...) so that you won't lose your data after a scale down/up of your pods.\n\n### How does it work?\n\nOsiris will automatically inject itself as a proxy in front of all the pods with the right annotation, so that it can see all requests for your pods. If it doesn't see any request for a configurable amount of time - 10 minutes by default - it will scale down the deployment (or statefulset), and place itself behind the associated service. So that if a new request comes in, Osiris will be able to scale up the deployment (or statefulset), and then forward the request to the new pod.\n",
            "content/en/blog/news/2021-jx3-pipeline-trace.md": "---\ntitle: \"Traces for your pipelines\"\ndate: 2021-04-08\ndraft: false\ndescription: Jenkins X v3 now comes with tracing support for your pipelines out of the box\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx3-pipeline-trace\"\naliases: []\nauthor: Vincent Behar\n---\n\nNow that Jenkins X has solid integration with [Grafana](https://grafana.com/) for its [observability](/blog/2021/04/01/jx3-builtin-observability/), it's time to start building fun things!\n\nAnd the first one is **tracing for all your pipelines**:\n\n![](/images/jx-pipelines-visualizer/pipeline-trace.gif)\n\nWith it, you can easily see the timings of all your pipelines, stages, and steps. This is great to inspect a \"slow\" pipeline and quickly see the slower steps.\n\nWe are using [OpenTelemetry](https://opentelemetry.io/) to generate a \"logical\" view of the pipeline, with 1 trace per pipeline and 1 span for each stage and step.\n\n![](/images/v3/observability_pipeline_trace.png)\n\nBy default, these traces are ingested by [Grafana Tempo](https://github.com/grafana/tempo). But if you prefer to export them to a different destination, it's very easy, and thanks to the [OpenTelemetry Collector](https://opentelemetry.io/docs/collector/) you can export to a lot of different services. You can see the full list [here](https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter) and [here](https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter).\n\nThe trace identifier is also stored in the pipeline itself so that the [Jenkins X Pipelines Visualizer UI](https://github.com/jenkins-x/jx-pipelines-visualizer) can link directly to the trace.\n\n### How can you benefit from it in your own Jenkins X cluster?\n\nYou just need to enable the observability stack, as explained in the [observability admin guide](/v3/admin/guides/observability/).\n\nThen, trigger a pipeline, and once it's finished, go to the web UI, and click on the \"Trace\" button on the top-right. That's it!\n\n### What's next?\n\nThis is only the first step of native tracing support in Jenkins X. Stay tuned for more!\n",
            "content/en/blog/news/2021-jx3-walkthroughs.md": "---\ntitle: \"Jenkins X 3.x walkthroughs\"\ndate: 2021-01-26\ndraft: false\ndescription: A collections of Jenkins X 3 guides\ncategories: [blog]\nkeywords: [Community, jx3, 2021]\nslug: \"jx3-walkthroughs\"\naliases: []\nauthor: James Rawlings\n---\n \nJenkins X 3.x is now looking ahead towards a GA release, with that we are producing walkthroughs for key areas to help users not only get started but get the most out of Jenkins X.\n \nTo kick this off we are going to start with 9 videos that we'll follow up with more dedicated blogs over the coming weeks.  The complete playlist can be found [here](https://www.youtube.com/playlist?list=PLr_PmC4W69dKM3fo8OK729fdmX_MTqdHd) however the blog below gives a more context for each one.\n \nThere are a few key areas we are focusing on here:\n\n## Intro + high level architecture\n\nStarting off with a very quick introduction including what to expect from the walkthrough series.\n\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/kDCNDAyqwpo?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \nJenkins X 3.x has focussed on clearer lines of separation, making the architecture significantly more pluggable, extensible and maintainable.  With better tooling including UIs and more reliable guard rails for installations and upgrades.  Jenkins X 3 also minimises abstractions and wrapping; so it promotes the direct use of open source projects like Helm, Helmfile and Tekton.\n\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/bVp5_tZ21AA?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n# Installation and setup\n \n## Infrastructure and provisioning\nDecoupling the management of Cloud infrastructure away from Jenkins X to tools that are better suited for the job.  Jenkins X has started with Terraform and this manages all the cloud resources needed by Jenkins X\n\n- Kubernetes cluster\n- Cloud Service Accounts\n- IAM bindings\n- Storage buckets\n\nOver time Jenkins X plans to support other tools (aided by the [Kubernetes Cluster API](https://github.com/kubernetes-sigs/cluster-api)) users in the Kubernetes ecosystem leverage such as [crossplane.io](https://crossplane.io/), [Google Config Connector](https://cloud.google.com/config-connector/docs/overview), [AWS Controller](https://github.com/aws/aws-controllers-k8s) etc.  These make use of cloud resources declared as custom resources with a Kubernetes operator managing CRUD activities for them.\n\nOnce the cloud infrastructure is created, self provisioning happens using GitOps and incluster installation.  No more flakey client side installs.\n\n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/fKGZrNgs8So?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n## TLS and DNS\nA large number of deployments require inbound traffic, whether that is for access to their applications, websites, REST endpoints, Webhook handlers there is often a need for Ingress HTTP traffic into a cluster and to ensure communication is secure.\n \nTo achieve this there are two common efforts needed\n \nDNS - configuring a custom owned domain and using DNS to route traffic to endpoints\nTLS - providing end to end security for web traffic on the internet\n \nIn fact many web services do not accept working with insecure endpoints and others require manual override to accept the risk before being able to use the service.\n \nJenkins X uses two OSS projects to automatically manage DNS ([External DNS](https://github.com/kubernetes-sigs/external-dns)) and handle the management of TLS certificates ([Cert-manager](https://cert-manager.io/))\n \nOnce a domain is owned, External DNS will work with cloud providers to create A records that route traffic from the internet to users clusters.  Cert-manager will react to a request from Jenkins X to verify a cluster owns a domain and will issue a wildcard TLS certificate using Lets Encrypt that is used for all Ingress into the cluster.  Cert-manager will also handle certificate renewals.  This is all handled automatically following the setup of Jenkins X.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/OqsSqZqF0gY?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n# Using Jenkins X\n \n## GitOps\nInitially started out as an implementation detail of Jenkins X but has evolved much more into an administrators typical workflow.  Managing installs, upgrades and rollbacks via Git provides approvals, reviews, traceability, RBAC in the same way we manage code.  This is the backbone of Jenkins X and provides us with the peace of mind for disaster recovery.\n\nJenkins X ships with a git operator which is responsible for applying generated Kubernetes resources which live in the cluster Git repository.  Every application and configuration for the cluster is in this repository.\n\n## Health\nIn any Kubernetes installation there can be a lot of microservices each with the responsibility to provide functionality that is needed by the overall system.  Understanding when things go wrong and the impact of these issues can be difficult to evaluate.  It is also useful to have a status page of sorts to quickly check the health of your system.\n \nJenkins X uses [Kuberhealthy](https://github.com/Comcast/kuberhealthy) and a lot of custom health checks to periodically report on the health of a Jenkins X installation.  These custom health checks are easy to extend in any language, already the Jenkins X community has been contributing their own.\n \nThere is a CLI which can be used to query the health report as well and a UI.\n \nThe health statuses can be easily integrated into users operational alerting systems too.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/4wqwulEzseM?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n## Extending pipelines\nJenkins X uses vanilla Tekton pipeline resources and has deprecated the v2 `jenkins-x.yml`.\n \nWe will show a demo shortly of working with Tekton pipelines and inheriting shared Tasks but for now we can see it is easy using Lighthouse to trigger shared Pipelines from a git repository.  The demo uses the old favorite from the Jenkins project Chuck Norris, only here we are invoking a cloud native pipeline to comment with the joke on a Pull Request.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/cJcwV4jgE0Y?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n## Secrets\nSecrets management stores (e.g. AWS Secrets Manager, Hashicorp Vault, Google Secrets Manager) have gained popularity from both Administrators and Developers.  Having a single source of truth for a secret is extremely useful especially when obtaining and changing values, some solutions even offer automatic secret rotation.\n \nWith GitOps as described above we need a way to inject real secrets into a cluster rather than storing them in Git.\n \nJenkins X uses [External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) from which runs as a Kubernetes controller, using a Kubernetes Custom Resource it knows how to automatically map values from a Secret Management Store into Kubernetes Secrets.  This makes it easy for applications to leverage GitOps while keeping the benefits of using a secrets management solution.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/_gjGfwlxEY4?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n## Upgrades\nJenkins X now uses GitOps for the whole cluster, one repository keeps all applications and configurations that should be applied to a cluster.  This cluster repository also includes a copy of the version stream mentioned below.  Jenkins X uses a tool called [kpt](https://github.com/GoogleContainerTools/kpt) which reliable syncrosises released version configuration into their own repository that can then be committed and applied to your cluster.\n \n## Version Streams\nThe world of continuous delivery can bring challenges.  One of the biggest challenges Jenkins X itself had while embracing CD was how people handle receiving constant change via releases. \n \nSome people wanted to live on the bleeding edge, receiving fixes, improvements and new features as fast as possible so they can help provide feedback and continually improve.  Others had more stable requirements which expect more mature features along with corresponding complete documentation that gave better confidence an upgrade will not cause any adverse effects.\n \nJenkins X has had the concept of version streams which allows the project to collect a number of helm charts, CLI, Docker image version changes together, run further automated testing and release together for users to consume in an upgrade.  This acts as a quality gate.\n \nFor Jenkins X 3 we have extended this to include a second version stream which gets automatically updated via a Pull Request however that is merged on a slower cadence to cater for users that want greater confidence in the release.  We call this the [Long Term Support (LTS) version stream](/v3/guides/upgrades/lts).\n \nUsers can decide which version stream to track or even use a custom one that they maintain themselves.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/9ZaqdwD3cTs?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n \n## Cluster recovery\nClusters can be recreated if they move regions, are accidentally deleted or part of intentional housekeeping to continually verify disaster recovery processes.\n \nBecause Jenkins X uses Terraform for infrastructure checked into Git and a another Git repository specifically for the cluster, it means we can recreate a cluster and resume all services with very little manual intervention.  This video deletes and recovers a cluster on GCP using Jenkins X.\n \n<iframe width=\"600\" height=\"300\" src=\"https://www.youtube.com/embed/2QgX3cn0GqU?VQ=HD1080\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
            "content/en/blog/news/2021-kaniko-azure-resolution.md": "---\ntitle: \"Incident: Kaniko and ACR\"\ndate: 2021-12-28\ndraft: false\ndescription: >\n  Tracking and resolving an upstream kaniko issue & mitigation steps in the meantime\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"kanikoacrandjenkinsx\"\naliases: []\nauthor: Tom Hobson\n---\n\nWe've recently had an issue with one of our packages come to light. We wanted to talk through the resolution steps we're going to put into place.\n\n## So what happened?\n\nAzure users started reporting seeing the following error within the build step:\n```\nerror checking push permissions -- make sure you entered the correct tag name, and that you are authenticated correctly, and try again: checking push permission for \"xyz.azurecr.io/myorg/myrepo:0.0.1\": resolving authorization for xyz.azurecr.io failed: error getting credentials - err: exec: \"docker-credential-acr-env\": executable file not found in $PATH\n```\n\nThis seemed to be indicating to an authorization issues with the terraform module. Other users were seemingly unaffected by this issue.\n\nUpon further analysis, [kaniko](https://github.com/GoogleContainerTools/kaniko.git) seems to have issues with the latest version and grabbing credentials for acr. The latest working version that we are aware of is [1.3](https://github.com/GoogleContainerTools/kaniko/releases/tag/v1.3.0). There wasn't a massive influx of people seeing this issue due to it only occuring once versionstream had been updated with `jx gitops upgrade`.\n\n## So what are you going to do about it?\n\nFor starters, most users are probably using the latest kaniko features, so we're unable to just roll this back for everyone.\n\nWe're getting started by creating a PR to kaniko to resolve the issue. However, due to release schedules etc, this will mean that getting started with azure will be broken for quite a while.\n\n\n## How can I fix it in the meantime?\nIf you're on azure, the resolution is quite simple, here's a step by step guide:\n\n**1.  Find which [buildpack](https://github.com/jenkins-x/jx3-pipeline-catalog) you are using and navigate to the [build-container-build step](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/csharp/release.yaml#L55):**\n```\ndirectory: csharp/ date: 12/28/21  git: main \n\u203a cat .lighthouse/jenkins-x/release.yaml | grep \"  image: \"\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/csharp/release.yaml@versionStream\n```\n\n**2. Replace the build-container-build step to use the suggested kaniko image: `gcr.io/kaniko-project/executor:v1.3.0-debug`**\n\n**Before**\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  creationTimestamp: null\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      resources: {}\n      taskSpec:\n        metadata: {}\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/csharp/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          workingDir: /workspace/source\n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n          resources: {}\n        - name: next-version\n          resources: {}\n        - name: jx-variables\n          resources: {}\n        - name: check-registry\n          resources: {}\n        - name: build-container-build\n          resources: {}\n        - name: promote-changelog\n          resources: {}\n        - name: promote-helm-release\n          resources: {}\n        - name: promote-jx-promote\n          resources: {}\n  podTemplate: {}\n  serviceAccountName: tekton-bot\n  timeout: 12h0m0s\nstatus: {}\n```\n\n**After**\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  creationTimestamp: null\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      resources: {}\n      taskSpec:\n        metadata: {}\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/csharp/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: 200m\n              memory: 256Mi\n          workingDir: /workspace/source\n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n          resources: {}\n        - name: next-version\n          resources: {}\n        - name: jx-variables\n          resources: {}\n        - name: check-registry\n          resources: {}\n        - image: gcr.io/kaniko-project/executor:v1.3.0-debug\n          name: build-container-build\n          resources: {}\n          script: |\n            #!/busybox/sh\n            source .jx/variables.sh\n            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json\n            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION\n        - name: promote-changelog\n          resources: {}\n        - name: promote-helm-release\n          resources: {}\n        - name: promote-jx-promote\n          resources: {}\n  podTemplate: {}\n  serviceAccountName: tekton-bot\n  timeout: 12h0m0s\nstatus: {}\n```\n\n**3. Do this again for your `.lighthouse/jenkins-x/pullrequest.yaml` file**\n\n**4. Commit and push it to your repository.**\n\n### We're hoping to make this simpler\n\nWe're working on:\n* Fixing it upstream (the proper fix, but could take a while to be merged)\n* Making a temporary azure pipeline step for azure users\n* Making a script so that azure users don't have to go through this manual process each time\n* Allowing overriding images without having to specify a script within lighthouse\n\n\n### Help us find and fix things like this in future\n\nTalk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nFind out more about becoming involved in the Jenkins X community [here](https://jenkins-x.io/community/).\n",
            "content/en/blog/news/2021-moving-v2-infra.md": "---\ntitle: \"Moving Jenkins X v2 artifacts\"\ndate: 2021-08-26\ndraft: false\ndescription: Moving v2 artifacts\ncategories: [blog]\nkeywords: [moving, v2]\nslug: \"moving-v2-artifacts\"\naliases: []\nauthor: James Rawlings\n---\n \n# __ACTION REQUIRED__\n \nTL;DR - Jenkins X specific helm repositories and container registries hosted on GCP have been moved to GitHub.  This will mainly affect jx v2 users but there is expected to be a small impact on v3 users too.  Below describes the steps we believe are needed to keep Jenkins X installations working as normal but there will be some action needed.\n \n## Why the disruption?\n \nWhen Jenkins X first started we made heavy use of GCP's services for hosting the cloud infrastructure needed by users to install and run Jenkins X.  This was great as we could use the same IAM to push and maintain content from our own hosted build infrastructure and ensure we were validating the same experience of using cloud provider hosted services wherever possible.  As Jenkins X grew in popularity the cloud costs began to increase with the [pricing model from GCP](https://cloud.google.com/container-registry/pricing), specifically the networking costs of cross continent egress.\n \nGiven this, for jx3 we decided to see if switching to [GitHub packages for container images](https://github.com/orgs/jenkins-x/packages) and [GitHub pages](https://jenkins-x-charts.github.io/repo/) for helm repositories would be better, the result was it is better.  In fact we have made it super easy for users to switch to using GitHub pages for releasing [helm charts](https://jenkins-x.io/v3/develop/faq/config/registries/#how-do-i-switch-to-github-pages-for-charts) and using GitHub packages.\n \nNow that we have validated GitHub is more cost effective for hosting public images and helm charts for the Jenkins X project, we want to switch to using GitHub for all v2 plus v3 users, then shutdown the GCP services which are causing unnecessary cost.\n \nIt is expected that v3 users will need a small change and v2 slightly more.  Details for both will be described below but it is worth noting that there hasn't been a v2 release in 9 months and v3 was [GA in April](https://jenkins-x.io/blog/2021/04/15/jx-v3-ga/) earlier this year, so we aren't expecting too many folks on v2.  We are aiming to limit any disruption and help provide easy steps to handle the move.\n\nWe apologise for any extra work caused however, this is required to preserve the long running hosting of Jenkins X artifacts both past and present.  If you experience issues that are not covered by the steps below please reach out to the [community slack channel](https://jenkins-x.io/community/#slack) and we can help address and update this blog with details.\n \n## What is changing?\n \nWe will be shutting down a number of GCP projects that contain old helm charts plus container images and moving them to be hosted by GitHub packages and pages.\n \n#### Helm\n\n```\nhttps://chartmuseum.build.cd.jenkins-x.io\nhttp://chartmuseum.jenkins-x.io\nhttps://storage.googleapis.com/chartmuseum.jenkins-x.io\n``` \nhave been moved to\n```\nhttps://jenkins-x-charts.github.io/v2\n```\nAND\n```\nhttps://storage.googleapis.com/jenkinsxio/charts\n``` \nhas been moved to \n```\nhttps://jenkins-x-charts.github.io/repo\n```\n\n#### Images\n \nThe most recently versioned images from [gcr.io/jenkinsxio](https://console.cloud.google.com/gcr/images/jenkinsxio/GLOBAL) have been moved to [ghcr.io/jenkins-x](https://github.com/orgs/jenkins-x/packages)\n \n#### Labs\n \nThere are some old labs images and helm charts which should not be in use as they are either deprecated or replaced with GA versions in the v3 [helm repo](https://jenkins-x-charts.github.io/repo/) or [container registry](https://github.com/orgs/jenkins-x/packages).\n \n### v2 users\n \n1. The Jenkins X own v2 build infrastructure was retired at the start of the year as no more releases were planned and to reduce costs.  With that we are unable to perform a new release that automatically switches references to images from `gcr.io/jenkinsxio` to `ghcr.io/jenkins-x`.  If you are still using v2 then please update your references to this container registry.  An alternative __which has not yet been verified__ is to use a [image swap Kubernetes mutating admission controller](https://github.com/phenixblue/imageswap-webhook) which takes configuration to switch the registry on the fly.  [We have asked on slack](https://github.com/phenixblue/imageswap-webhook) for help validating the approach so if you do try it please share feedback and config used to help others in the channel, we can then update docs.\n \n2. In your boot git repository, run a search for references of `http://chartmuseum.jenkins-x.io` and `https://storage.googleapis.com/chartmuseum.jenkins-x.io` replace with `https://jenkins-x-charts.github.io/v2`\n\n3. Change the `lighthouse-jx-controller` deployment to use an environment variable\n```\nJX_DEFAULT_IMAGE=ghcr.io/jenkins-x/builder-maven:2.1.155-778-patch3\n```\n\n4. Environment controller (can be skipped if not using)\n\n   i) change the environment controller image to be `ghcr.io/jenkins-x/builder-maven:2.1.155-778-patch3`\n\n   ii) change the image used in the pipeline, needs to be changed in the jenkins-x.yaml of the enviromnet repo:\n   ```\n   agent:\n    container: ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3\n   ```\n   iii) add this environment variable in the deployment of the environment-controller\n   ```\n    - name: BUILDER_JX_IMAGE\n      value: ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3\n   ```\n \n5. In your boot git repository, set the following values for  `env/jenkins-x-platform` deployment:\n\n   |Value||\n   |---|---|\n   | **expose.Image** | ghcr.io/jenkins-x/exposecontroller |\n   | **expose.ImageTag** | 2.3.118 |\n   | **cleanup.Image** | ghcr.io/jenkins-x/exposecontroller |\n   | **cleanup.ImageTag** | 2.3.118 |\n   | **controllerbuild.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **controllerbuild.image.tag** | 2.1.155-778-patch3 |\n   | **controllerbuild.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n   | **postinstalljob.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **postinstalljob.image.tag** | 2.1.155-778-patch3 |\n   | **postinstalljob.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n   | **controllerrole.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **controllerrole.image.tag** | 2.1.155-778-patch3 |\n   | **controllerrole.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n   | **gcpreviews.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **gcpreviews.image.tag** | 2.1.155-778-patch3 |\n   | **gcpreviews.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n   | **gcactivities.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **gcactivities.image.tag** | 2.1.155-778-patch3 |\n   | **gcactivities.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n   | **gcpods.image.repository** | ghcr.io/jenkins-x/builder-jx |\n   | **gcpods.image.tag** | 2.1.155-778-patch3 |\n   | **gcpods.env.BUILDER_JX_IMAGE** | ghcr.io/jenkins-x/builder-jx:2.1.155-778-patch3 |\n\n6. In your boot git repository, set the following values for  `env/lighthouse-jx` deployment:\n\n   |Value||\n   |---|---|\n   | **image.parentRepository** | ghcr.io/jenkins-x |\n   | **image.tag** | 0.0.164 |\n   | **jxcontroller.image.repository** | ghcr.io/jenkins-x/lighthouse-jx-controller |\n   | **jxcontroller.image.tag** | 0.0.164 |\n   | **env.JX_DEFAULT_IMAGE** | ghcr.io/jenkins-x/builder-maven:2.1.155-778-patch3 |\n\n7. In your boot git repository, set the following values for  `env/lighthouse` deployment:\n\n   |Value||\n   |---|---|\n   | **image.parentRepository** | ghcr.io/jenkins-x |\n   | **image.repository** | ghcr.io/jenkins-x/lighthouse |\n   | **env.JX_DEFAULT_IMAGE** | ghcr.io/jenkins-x/builder-maven:2.1.155-778-patch3 |\n\n8. In your boot git repository, update the `jenkins-x.yml` replacing any reference to `image: gcr.io/jenkinsxio/builder-go:2.1.155-778` with `image: ghcr.io/jenkins-x/builder-go:2.1.155-778-patch3`\n\n9. In your boot git repository, update the `jenkins-x-release.yml` replacing any reference to `image: gcr.io/jenkinsxio/builder-go:2.1.155-778` with `image: ghcr.io/jenkins-x/builder-go:2.1.155-778-patch3`\n \n10. In your boot git repository, update the `systems/jxing/values.tmpl.yaml` setting\n\n   |Value||\n   |---|---|\n   | **nginx-ingress.controller.image.repository** | ghcr.io/jenkins-x/nginx-ingress-controller |\n\n11. In any environment managed repository (e.g. environment-*-staging | production) update `env/values.yaml`: \n\n   |Value||\n   |---|---|\n   | **expose.Image** | ghcr.io/jenkins-x/exposecontroller |\n   | **expose.ImageTag** | 2.3.118 |\n   | **cleanup.Image** | ghcr.io/jenkins-x/exposecontroller |\n   | **cleanup.ImageTag** | 2.3.118 |\n\n12. In any environment managed repository (e.g. environment-*-staging | production) update `env/requirements.yaml` replacing any exposecontroller repository url with `https://jenkins-x-charts.github.io/v2`\n    \n   ```\n   - alias: expose\n     name: exposecontroller\n     repository: https://jenkins-x-charts.github.io/v2\n     version: 2.3.118\n   - alias: cleanup\n     name: exposecontroller\n     repository: https://jenkins-x-charts.github.io/v2\n     version: 2.3.118\n   ```\n13. In any applications repositories who has already import into jx, update the `./jenkins-x.yaml` add or replace :\n    ```\n    pipelineConfig:\n      agent:\n        image: `ghcr.io/jenkins-x/BUILDER_YOU_NEED:2.1.155-778-patch3`\n    ```\n    Here is the list of the principal images who has migrated to new ghcr:\n\n   |Value| Version|\n   |---|---|\n   | **builder-jx**           | 2.1.155-778-patch3 |\n   | **builder-nodejs**       | 2.1.155-778-patch3 |\n   | **builder-nodejs12**     | 2.1.155-778-patch3 |\n   | **builder-nodejs14**     | 2.1.155-778-patch3 |\n   | **builder-maven-java11** | 2.1.155-778-patch3 |\n   | **builder-php5x**        | 2.1.155-778-patch3 |\n   | **builder-php7x**        | 2.1.155-778-patch3 |\n   | **builder-python37**     | 2.1.155-778-patch3 |\n   | **builder-dotnet**       | 2.1.155-778-patch3 |\n \nHave we missed anything? Please contribute to this blog or feedback on the slack channel.\n \n### v3 users\n\nThere is not expected to be significant disruption to v3 users but if there is anything needed beyond the steps below then we are asking users to reach out asap and we can update this blog.\n\n\n1. Run `jx gitops upgrade` to ensure you upgrade to the latest version stream with the old helm repository removed. If you are tracking the LTS version stream please delay until Wednesday 1st September to run this.\n \n2. In your cluster git repository, run a search for references of `https://storage.googleapis.com/jenkinsxio/charts` replace with `https://jenkins-x-charts.github.io/repo`\n \n3. In your cluster git repository, run a search for references of `http://chartmuseum.jenkins-x.io` and `https://storage.googleapis.com/chartmuseum.jenkins-x.io` replace with `https://jenkins-x-charts.github.io/v2`\n \n4. Switch `jx-verify` helm chart repository for any application you have which is built by Jenkins X 3.  This is under your applications git repository `./charts/preview/helmfile.yaml` change `https://storage.googleapis.com/jenkinsxio/charts` to `https://jenkins-x-charts.github.io/repo` .  [Here](https://github.com/jenkins-x/jx3-pipeline-catalog/commit/ed01d636b94b2ea51b878d9b5331bc4c88f6e8b1) is an example that changes the main pipeline catalog packs which are used when first creating or importing applications.\n\n5. Switch any `gcr.io/jenkinsxio` images to `ghcr.io/jenkins-x` in your application git repo `.lighthouse/*.yaml` files if you have references there\n\nHave we missed anything?  Please contribute to this blog or feedback on the slack channel.\n \n## When will all this take place?\n \n1. This blog is the initial notice which we will socialise, please help to raise awareness.\n \n2. Friday 27th August - the labs project will be scheduled to shutdown, short notice because we believe no services should be used, if they are it is an easy switch to upgrade to GA versions.  Labs efforts are never intended to be production grade and are used at risk.\n \n3. Monday 6th September - make the GCP container registry and helm repository bucket private, during which time any image versions that have not been transferred to GitHub can be requested via the community slack channel.  All helm versions have been moved to https://jenkins-x-charts.github.io/v2 as described above.\n \n4. Monday 13th September - schedule for shutdown the two GCP projects hosting the container registry and helm repository.\n \n## Why are only the most recent versions v2 images copied to GitHub packages and not all versions?\n \nThere are 14 Terabytes of data that make up the jenkinsxio container registry on GCP, it would be costly and wasteful to transfer all this to GitHub so we picked the last known version of each image that was released last year.  If there are specific images that you wish to use either pull / push them yourself to a container registry of your own or reach out and on a case by case effort, we can look to move them to GitHub while the read permissions are made private and before the project is shut down.\n\n## I'm on v2 and use a builder image which is not available on GitHub container registry, how do I build my own version to work with the new helm and image repositories?\n\nThe old v2 jx code [lives on a branch](https://github.com/jenkins-x/jx/tree/v2) you will need to:\n\n- fork this branch\n- apply search and replace changes for \n  i) gcr.io/jenkinsxio to ghcr.io/jenkins-x [example](https://github.com/jenkins-x/jx/commit/9d5f1aa6421a22e311d12482893586a45b485ac8)\n  ii) https://storage.googleapis.com/chartmuseum.jenkins-x.io to https://jenkins-x-charts.github.io/v2 [example](https://github.com/jenkins-x/jx/commit/88965b1696c81349f4e330aeb98ec5e26116341c)\n- run `make linux` to build the updated jx binary\n- build and push the images you require, for example\n```\ndocker build -f Dockerfile.builder-maven -t ghcr.io/jenkins-x/builder-maven:2.1.149-768-patch3 .\ndocker push ghcr.io/jenkins-x/builder-maven:2.1.149-768-patch3\n```\n\nonce the builder-jx/go/maven/etc.. are pushed, you will need to configure the charts:\n\n- if a chart allows the image to be overridden using a value you can add that to your env/values.tmpl.yaml, replacing current gcr.io/jenkinsxio images with ghcr.io/jenkins-x\ne.g.\n```\njenkins-x-platform:\n  gcpreviews:\n    image:\n      repository: ghcr.io/jenkins-x/builder-jx\n      tag: [your custom tag]\n```\nif you cannot override the image using a helm value you may need to:\n- download each needed chart/subchart needed to make jx work, exemple for jenkins-x-platform/, jxboot-resources/releases\n- for each charts/subcharts replace current gcr.io/jenkinsxio images with ghcr.io/jenkins-x if it exists or rebuild and host them on a private registry if not\n- host updated charts on a private chartmuseum\n- switch boot git repo to use custom charts\n\n## I'm getting a missing arg `--provider-values-dir` and helm repository https://jenkins-x-charts.github.io/v2 does not have an associated prefix in in the 'charts/repositories.yml' error\n\nA few users have been hitting this error, it is related to the jx version used.  This thread with the help of Francesco Capozzo contains both image tags and versions to use instead:\n\nhttps://kubernetes.slack.com/archives/C9MBGQJRH/p1631112970450800\n\nImages: \n```\nghcr.io/jenkins-x/builder-jx:2.1.142-761-patch3\nghcr.io/jenkins-x/builder-maven:2.1.142-761-patch3\nghcr.io/jenkins-x/builder-go:2.1.142-761-patch3\n```\n\nChart versions to use rather than relying on the version stream:\n\n```\ndependencies:\n* name: jxboot-resources\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.0.43\n* alias: tekton\n  name: tekton\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.0.63\n* alias: prow\n  condition: prow.enabled\n  name: prow\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.0.1773\n* alias: lighthouse\n  condition: lighthouse.enabled\n  name: lighthouse\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.0.843\n* alias: lighthouse-jx\n  condition: lighthouse.enabled\n  name: lighthouse-jx\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.0.121\n* alias: bucketrepo\n  condition: bucketrepo.enabled\n  name: bucketrepo\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 0.1.42\n* name: jenkins-x-platform\n  repository: https://jenkins-x-charts.github.io/v2\n  version: 2.0.2411\n* name: jx-pipelines-visualizer\n  repository: https://jenkins-x-charts.github.io/repo\n  version: 1.7.3\n```\n",
            "content/en/blog/news/2021-no-docker.md": "---\ntitle: \"Don't use docker, use kubernetes\"\ndate: 2021-05-17\ndraft: false\ndescription: If you are developing for kubernetes then don't use docker locally\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"dont-use-docker\"\naliases: []\nauthor: James Strachan\n---\n \nAre you developing software that's intended to run on kubernetes? If so we recommend not to use docker on your laptop.\n\nDocker on Windows/MacOS helps you run a VM that can then run linux containers easily. But why bother?\n\nWe highly recommend just use a development kubernetes cluster - build and run your containers there instead then you're closer to a production like environment. \n\n## Why use kubernetes instead of docker?\n\n* why test on a completely different VM and container orchestrator than production? It's better to test on a similar environment to where you are really going to deploy your code\n* test your kubernetes yaml / helm chart and associated configuration at the same time as you run your containers helps you catch mistakes earlier:\n    * it's not just about running the container image; it's about lots of other things too like networking, configuration, secrets, storage/volumes, cloud infrastructure, service mesh, liveness/readiness/startup probes - so why not test all of those things rather than just the image?\n* some corporate environments don't let you run VMs on your laptop anyway so running docker locally isn't an option\n\n## How to get kubernetes?\n\nFirst you'll need a kubernetes cluster.\n \nI fully agree with James Ward that [developers should not need to run kubernetes](https://twitter.com/_JamesWard/status/1393270529474408450?s=20). Friends don't let friends setup and manage kubernetes clusters by hand :). \n\nSo try ask your infrastructure team for a development cluster or, if you can, use the cloud to set-up a managed kubernetes cluster. All the public clouds have a relatively straightforward way to spin up a fully managed kubernetes cluster for you that will be relatively inexpensive & they are easy to scale down when you don't need them. \n\ne.g. on [Google Cloud](https://cloud.google.com/kubernetes-engine) it's a couple of clicks and about 5 minutes later you'll have a fully managed kubernetes cluster ready to use. Its easy to enable auto-scaling too. Plus there's a free tier. \n\nIf that's not easy for you to achieve you could try reuse a namespace in your staging cluster? Though we don't recommend developing on a production cluster; its too easy to accidentally mess up production; e.g. by using up too many resources or overwriting a cluster scoped resource like a `CustomResourceDefinition` or `ClusterRole` etc.\n\nIf you have zero budget you could try [minikube](https://minikube.sigs.k8s.io/docs/start/) or [kind](https://kind.sigs.k8s.io/docs/user/quick-start/) on top of docker; though its much better to reuse as close to the production setup of kubernetes as you can - there can be large variations in platform, version, setup, network, machine size and so forth.\n\nIf you are deploying software on kubernetes then I'd hope you've some managed kubernetes solution; so why not use that and spin up another cluster for your team for development?\n\nIf your budget is so stretched that you can't afford 2 kubernetes clusters; one for production and one for development + staging; maybe it's time to look at using just pure serverless / FaaS instead of kubernetes anyway? Even in that case it's better to use your serverless / FaaS infrastructure than docker locally for similar reasons.  \n         \n## How do I connect to kubernetes?\n\nSo first you'll need to [install kubectl](https://kubernetes.io/docs/tasks/tools/) and connect to your kubernetes cluster. This step is provider specific - so refer to your kubernetes provider / cloud vendor for that bit.\n\nYou can then verify you are connected by running some [kubectl get](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get) commands such as\n\n```bash \nkubectl get ns\nkubectl get node\nkubectl get pod\n```\n\n\n## How do I replace docker with kubernetes?\n\n### docker run => kubectl run \n\nInstead of `docker run` to run container images you can use [kubectl run](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run) to run a container image\n\nIf you wish to expose a DNS name for a pod you can use [kubectl expose](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#expose)\n\n### docker build => kubectl build\n\nA drop in replacement for `docker build` is this [kubectl plugin](https://github.com/vmware-tanzu/buildkit-cli-for-kubectl#buildkit-cli-for-kubectl)\n\n![Pants Cast](https://raw.githubusercontent.com/vmware-tanzu/buildkit-cli-for-kubectl/main/docs/pants-cast.svg)\n\n### compose => helm \n\nSome folks use docker compose files to define all of their various microservices; front end, back end, database etc.\n\nIf you have deployed your applications to staging/production then you are probably already using either [helm charts](https://helm.sh/) or kubernetes yaml to define those deployments and services already.\n\nSo just reuse all of them when running things locally in your own cluster/namespace.\n                                                                                     \nThen you don't have to keep 2 completely different configuration files in sync; you can usually just reuse the same helm charts in all environments and clusters.\n\nIf you have some compose files you could try out [kompose](https://github.com/kubernetes/kompose) to help use them more effectively on kubernetes  \n\n### testcontainers => sidecars / kubedock\n\nSome folks use [testcontainers](https://www.testcontainers.org/) for running extra containers in docker to make it easier to do testing. e.g. to run a database service to run tests using the database.\n\nYou could try [kubedock](https://github.com/joyrex2001/kubedock) with testcontainers to see if that solves your problem without requiring a local docker installation.\n\nIt does depend a little on what your solution is for CI. \n\nIf you are using [Jenkins X](https://jenkins-x.io/v3) or [tekton pipelines](https://github.com/tektoncd/pipeline) then you can [define sidecars](https://github.com/tektoncd/pipeline/blob/main/docs/taskruns.md#specifying-sidecars) in your pipeline to make sure you have whatever additional services you need when running your tests.\n\nIf you are using [Jenkins](https://www.jenkins.io/) then you can add the side cars to the `pod.yaml` you use with the [kubernetes plugin](https://plugins.jenkins.io/kubernetes/) or you could reuse the [tekton client plugin](https://www.jenkins.io/blog/2021/04/21/tekton-plugin/) and use tekton pipelines and sidecars \n\nIf you are [GitHub Actions](https://github.com/features/actions) then you can spin up a kubernetes cluster using [kind](https://kind.sigs.k8s.io/) via this [kind github action](https://github.com/marketplace/actions/kind-kubernetes-in-docker-action) - you can then spin up whatever services you need for your tests via [kubectl apply](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#apply) or `helm install`\n\n\n### help! we are not even using kubernetes yet\n\nIf you have not even started on your journey to kubernetes and have no idea what a [helm chart](https://helm.sh/) is, you could consider [setting up Jenkins X](https://jenkins-x.io/v3/admin/) in your cluster which will then: \n\n* [automate setting up the CI / CD](/v3/develop/create-project/) for your projects including automatically creating versioned container images and helm charts whenever you merge changes to the main branch\n* [automatic promotion through environments via GitOps](https://jenkins-x.io/v3/develop/environments/promotion/) so that new versions of your services are automatically promoted to your `Staging` environment and, by default, when approved are promoted to `Production`\n* [Preview Environments](https://jenkins-x.io/v3/develop/environments/preview/) automatically spin up Preview Environments for your Pull Requests so you can get fast feedback before changes are merged to the main branch\n    \nOnce someone on your team has [setup up Jenkins X](https://jenkins-x.io/v3/admin/) then please follow the [development guide](/v3/develop/developing/)\n          \n\n### other handy kubectl commands\n\nYou may find these handy:\n\n* [kubectl logs](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#logs) to view the logs of any running pod (which is kubernetes terminology for 1 or more containers deployed together as a single unit on the same node)\n\n* [kubectl port-forward](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward) lets you easily port forward from a pod to a local port so you can easily test things out without having to expose things via ingress\n                                                                                                    \n\n### inner loop\n\nIf you want to optimise your inner loop so you can edit source code and see the changes running quickly on kubernetes then please check out the options for [inner development loop](/v3/develop/pipelines/inner-loop/)\n\n\n## Conclusion\n\nLots of developers have grown fond of their docker installation over the years. Docker was a total game changer in its day!\n\nHowever if you are building/testing/debugging software to deploy on kubernetes we highly recommend you consider reclaiming the memory, CPU & disk from your laptop and stop running docker locally and just use more kubernetes. \n\nIt will help you go faster, find those kubernetes related issues sooner and help you learn more about kubernetes which will be useful for figuring out production issues whenever they happen. \n\n\n",
            "content/en/blog/news/2021-pipelines-visualizer-v1.md": "---\ntitle: \"New features in the pipelines visualizer UI\"\ndate: 2021-01-18\ndraft: false\ndescription: overview of the recent new features in the pipelines visualizer UI\ncategories: [blog]\nkeywords: [Community, 2021]\nslug: \"jx-pipelines-visualizer-v1\"\naliases: []\nauthor: Vincent Behar\n---\n\nThe [Jenkins X Pipelines Visualizer UI](https://github.com/jenkins-x/jx-pipelines-visualizer) has recently received a number of new features, so let's do a little tour of these new features!\n\n## Pipeline View\n\nWhen viewing a pipeline, the biggest new feature is the **collapsed logs**. No more hundreds - or thousands - of log lines, we now group the logs per-container (step), which are collapsed by default. Along with the status of the step and its duration, so it's easier to go to the interesting part of the logs.\n\n![](/images/jx-pipelines-visualizer/v1-pipeline-success.png)\n\nClicking on a log line will expand the logs for this specific container. You can also use the \"Toggle Steps\" button to expand/collapse the logs for all the steps at once.\n\nWhile we're talking about the logs, you can notice the 2 new buttons:\n- View raw logs\n- Download raw logs\n\nOn top of the logs, we now display some information about the pipeline:\n- the pipeline **meta information**: name, context, build, and a link to see the raw YAML representation of the pipeline\n- the pipeline **status**: status, started/finished date/time, and duration\n- the pipeline **source**: git repository, pull request or branch, commit SHA, author\n- the pipeline **stages**, with links to see the timeline of the steps in each stage. You can also click on the \"Show Timeline\" button to view the pipeline timeline with all stages and steps.\n\nThe **pipeline timeline** has been improved to include all the steps for all stages, but it is currently hidden by default - to avoid using too much space. Clicking on a stage will bring you to the steps, and clicking on a step will bring you to the logs for this step.\n\n![](/images/jx-pipelines-visualizer/v1-pipeline-success-with-timeline.png)\n\nNote that for a pipeline which includes a deployment to a Preview Environment, the UI will also display a link to the application's URL in that specific Preview Environment.\n\n## Homepage\n\nThe homepage got some love too, with:\n- a few stats about the pipelines: top statuses, repositories, authors and durations - with links to filter the pipelines\n- direct links to the git repositories and pull requests\n- the Jenkins X logo\n- and a favicon\n\n![](/images/jx-pipelines-visualizer/v1-home.png)\n\n## Roadmap\n\nWe started this project at v0, and we believe that now it has enough features to be a v1!\n\nOn our roadmap - without any specific order - we have:\n- [#73](https://github.com/jenkins-x/jx-pipelines-visualizer/issues/73) **live refresh of a running pipeline** - for now only the logs are updated live, not the meta information of the pipeline (status, stages/steps timings)\n- [#42](https://github.com/jenkins-x/jx-pipelines-visualizer/issues/42) **support local timezone** - for now everything is in UTC\n- **improve the support for archived pipelines**: load pipelines archived in the long-term storage\n\n### Contributing\n\nThanks to all the contributors! \n\nAll contributions are welcomed, the source code is: [github.com/jenkins-x/jx-pipelines-visualizer](https://github.com/jenkins-x/jx-pipelines-visualizer).\n",
            "content/en/blog/news/2022-02-15-survey-results-details.md": "---\ntitle: \"Jenkins X Survey Result Details\"\ndate: 2022-02-15\ndraft: false\ndescription: Some specific answers\ncategories: [other]\nkeywords: [Community, 2022]\nslug: \"survey-1-result-details-2022\"\ntoc_hide: true\nhide_summary: true \naliases: []\nauthor: Christoffer Vig\n---\n\nFor more information on the Jenkins X survey see [Survey results](/blog/2022/02/15/survey-1-results-2022/)\nSome highlights from the free text answers. \n\n\n### What do you enjoy the most with Jenkins X?\n\n \n#### KUBERNETES \n\n- Cloud-native feel, \"you know Kubernetes, you know how to use JX\", plugins-based architecture \n- Complete CI/CD platform in a k8s cluster \n\n\n#### GIT/CHAT/OPS/CONFIGURABILITY  \n\n- Configuration as code, auto generation of k8s files, flexibility \n-  easy to create preview/dev/staging/prod environments. \n-  modularity and ease to extend/change\n\n#### EASY \n- Everything works out of the box. \n- Very intuitive \n- Lightweight and easy to manage.\n \n \n\n#### COMMUNITY \n- The community is incredible. I really like how everything works together.  \n- love the community.\n   \n\n \n#### VARIOUS \n- scalability and how fast it is! \n- Integration with different secret backends is easy. Also love the community. \n- It's opinionated \n- No vendor lock in\n \n\n\n### What do you believe should be improved with Jenkins X? \n\n \n\n#### ON PREMISE \n\n-  run it against a local running cluster to test changes to Jenkins-X before updated in GitHub. \n- Integration with on-premise (Gitlab) as a lot of organizations are not using public cloud due to security policies, \n\n \n- Proper guide on installing into existing cluster without using terraform. Give us back something like `jx compliance`, `jx boot`. \n- Would be nice to not be tied to terraform to boot jenkins-x. Just like kubernetes, it would be great to have a jenkins-x the hard way where everything needs to be installed manually. \n \n \n\n#### DOCS \n- it's very difficult to just dive in without previous knowledge of the system \n - extreme lack of quality documentation. \n - Many conversations take place in slack and users cannot find information that somebody had the same problem beforehand and how it was solved\n- More documentation and guides, making sure quickstart guides work without hassle \n- Making it easier to get started\n- Very hard to find any information on how people solve a similar problem before\n- I very much enjoy your documentation, but it is very hard to find anything on google that is a huge disadvantage. \n- Documents need to be clear about what works, and what does not work (kubernetes versions for example, bitbucket etc ..) \n \n- Could also be nice with an arcitecture illustration or video that could compare jenkins with jenkins X \n - I find that when I'm looking for information I get a lot of mixed results (v3 vs v2).  \n \n\n \n#### DEBUGGING \n- Debugging the integration \n- Error handing and reporting \n\n \n#### MULTI \n- HA, multi-tenant\n- multi cluster setup \n - Remote clusters  \n\n\n#### GOVERNANCE \n- Needs focus on following up on K8s versions. \n- Needs a larger body of people governing it \n- PRs are being ignored for months at a time. The first PRs I've opened have been ignored to this day. I started getting some response after connecting with some devs in Slack.\n- A public Roadmap and prioritizing tasks by community demand would be the way to go. \n-  who will be providing development leadership and direction. \n\n \n \n\n#### SECURITY \n- permission management within Terraform repos (default settings are too wide for orgs) \n - separate JX permissions from per-project permissions - current pipelines gives a cluster admin scope to everyone as development teams can override steps and execute with any service account \n\n \n\n#### UI \n- pipelines dashboard needs Re-Run button. \n- A fully functional UI would be nice. \n \n\n#### VARIOUS \n\n- The install process \n- deploy speed \n- The parallel PR building causes issues. \n-  Support for Bitbucket Server \n- providing the capabilities to match CircleCI. lots of missing features or very difficult  to set up \n- Performance\n\n\n \n\n#### VARIOUS FEEDBACK \n \n- Integration with vault is confused. Why install vault in docker in k3s environment? \n \n- I strongly believe in this project! \n- I use Jenkins X as a learning tool.  It gives me the ability to build K8S clusters using different cloud providers and helps me to understand the mechanics of GitOps, helm charts, etc. \n- Better error handling when pipelines fail would be good (tekton pipeline fail, but jx pipelines dont update their status). \n- I'm excited to see how the product has grown in the short time I've used it.",
            "content/en/blog/news/2022-02-15-survey-results.md": "---\ntitle: \"Jenkins X Survey Results\"\ndate: 2022-02-15\ndraft: false\ndescription: Analyzing results\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"survey-1-results-2022\"\naliases: []\nauthor: Christoffer Vig\n---\n\nThe Jenkins X survey was active for four weeks and closed on February 11 2022. We received lots of valuable insights into how people are using Jenkins X. We need more contributors in the Jenkins X community, so if you feel strongly about how Jenkins X should evolve, your best bet is to dive in and get your hands dirty:) Some highlights of the free text responses we got are collected [here](/blog/2022/02/15/survey-1-result-details-2022/)\n\nAccording to the survey, a typical Jenkinx X user works with Devops and Software Engineering\n\n ![Area of Work](/images/survey-2022-1/area-of-work.png)\n\nThis person is using Jenkins X version 3 ![Jenkins X versions](/images/survey-2022-1/jx-versions.png/) \n\non Amazon\n ![Cloud Providers](/images/survey-2022-1/cloud-provider.png)\n \n working in a company of 1-50 people. ![Company size](/images/survey-2022-1/people-in-company.png) \n\nShe finds it somewhat difficult to find documentation, average 2.9 out of 5 ![Find documentation](/images/survey-2022-1/hard-to-find-information.png)\n\n The Jenkins X user tries to find information mainly on the main web site, sometimes on slack and less often on github. ![Information sources](/images/survey-2022-1/where-information.png)\nWhat he enjoys most about  Jenkins X is that it is an easy way to learn, play around and work with Kubernetes. The git(ops(ish)) style of configuration, the preview environments, and the staging /production environments. ![Enjoy the most](/images/survey-2022-1/enjoy-most.png)\n\n\nBut one thing is sure, documentation is confusing and shold be improved. ![Should be improved](/images/survey-2022-1/improving.png)\n\nThe typical Jenkins X user would like to run Jenkins X offline, either to run on a laptop, or behind a (corporate) firewall. Proper support for multi-tenancy would be nice, and who can ignore security in these times.  A clear governance of Jenkins X needs to be established, \n\nThe typical person who answers surveys on Jenkins X *is* planning to attend Jenkins X Office hours, which is great!\n![Office hours](/images/survey-2022-1/office-hours.png)\n\n\n [See you there next week then!](/community/#office-hours)\n  \n",
            "content/en/blog/news/2022-04-22-k8s-122-tekton.md": "---\ntitle: \"Kubernetes 1.22 - Breaking change!\"\ndate: 2022-04-22\ndraft: false\ndescription: >\n  Jenkins X goes to Kubernetes 1.22 \ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"kubernetes-1.22-tekton\"\naliases: []\nauthor: Jenkins X maintainers\n---\n\nTo allow Jenkins X to support Kubernetes 1.22, we had to update our version of Tekton. This updated version of Tekton contains breaking changes that has consequences if you made your own custom Jenkins X pipelines.\n\nTo make sure that your custom pipelines continue to work after this upgrade, you must edit the resource settings in your pipelines. Otherwise your pipelines will most likely not be able to start at all, or if they do, consume a lot of resources.\n\n\n#### Changes in Tekton version 28\nTekton made changes in how to calculate the resources needed to run a pipeline, in order to support the concept of [LimitRange](https://kubernetes.io/docs/concepts/policy/limit-range/) in Kubernetes (introduced in Kubernetes version 1.10). Previously, Tekton simply used the maximum requested cpu and memory of any single step, and set that as limits for the all steps in the pipeline. \n\nFor more details, please read the \n[Tekton documentation on LimitRange](https://tekton.dev/vault/pipelines-v0.30.x/limitrange/).\n\n\n#### How to prepare for upgrade\n\nIn the Tekton pipeline files, the StepTemplate needs to be changed to not specify resource `requests`, but only setting an empty resource `limits`:\n\n```yaml\nstepTemplate:\n  image: uses:jenkins-x/jx3-pipeline-catalog/tasks/go/release.yaml@a5ab19ebc5a074e0402c5016b11bc11b32cc5c83\n  name: \"\"\n  resources:\n    # override limits for all containers here\n    limits: {}\n```\n\n\nThe resource `requests` should be set on only one individual step:\n```yaml\nsteps:\n  - image: uses:Mentor-Medier/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream\n    name: \"\"\n    resources: {}\n  - name: jx-variables\n    resources:\n      requests:\n        cpu: 400m\n        memory: 512Mi\n```\n\nTo see examples of what changes you need to apply to your custom pipelines you may investigate [this PR](https://github.com/jenkins-x/jx3-pipeline-catalog/pull/984/files) on The Jenkins X pipeline catalog. The PR will be merged and released simultaneous with the upgrade of Tekton.\n\nIn the current version of Tekton used by Jenkins X, the resource `requests` are set on the stepTemplate. Running the old pipelines in the new version will lead to resource `requests` being multiplied by the number of steps. \n\nTo prepare for upgrade, you should create a PR applying the changes described above. We done some tests on applying the changes to the current version of Jenkins X/Tekton, and it seemed to work. But - that does not mean it will work on your machines or even pipelines! \n\nSo, please prepare for upgrade now! We want people to have a safe upgrade experience. If you have questions, you can find us on [Slack](https://kubernetes.slack.com/messages/C9MBGQJRH).\n",
            "content/en/blog/news/2022-GSoC-2022-Supply-Chain-Security-Final-Report.md": "---\ntitle: \"GSoC 2022 Final Report: Improving Supply Chain Security\"\ndate: 2022-11-08\ndraft: false\nweight: 100\ndescription: >\n  Going through my GSoC journey with Jenkins X, this works as a documentation for our work to improve supply chain security of Jenkins X\ncategories: [blog]\nkeywords: [Community, GSoC, 2022, supply chain security, Report]\nslug: \"gsoc-2022\"\naliases: []\nauthor: Osama Magdy\n---\n## Project Description\n\nSupply chain security is a rising concern in the current software era.\nSecuring the software supply chain encompasses vulnerability remediation and the implementation of controls throughout the software development process.\nDue to massive increase in attacks on software supply chain and the diversity of its [types](https://slsa.dev/spec/v0.1/threats), Jenkins X has to make efforts to ensure that the build process is secure.\nAs part of securing Jenkins X installation by default I worked on both securing our own components and enabling our users to use these features in their build and release steps..\n\n## Work Done\n\nThe work done so far covers these four sections.\n\n1. Enhancing the `jx version` output\n2. Integrating with Tekton Chains to sign TaskRuns and PipelineRuns\n3. Software Bill of Materials (SBOM)\n4. Signing Jenkins X artifacts\n\n### Enhancing the `jx version` output\n\nDescription:\n\nA first step towards securing Jenkins X supply chain is to increase the amount of information gained from running `jx version` command.\n\nImplementation\n\nThe issue created for this task is [here](https://github.com/jenkins-x/jx/issues/8249).\nThe PR to fix it is [here](https://github.com/jenkins-x/jx/pull/8291).\n\n### Integrating with Tekton Chains to sign TaskRuns and PipelineRuns\n\nDescription:\n\nAs Jenkins X uses tekton as its pipeline execution engine,` TaskRun` and ` PipelineRun` are considered the key components of Jenkins X pipeline `activities` and `steps`\nTekton Chains monitors the execution of all `TaskRun` and ` PipelineRun` inside the cluster and takes a snapshot upon completion of each of them to sign with user-provided cryptographic keys and store them on the backend storage.\nThe payload and signature cn be verified later using `cosign verify-blob`.\n\nImplementation\n\nI used the helm chart developed by [Chainguard](https://www.chainguard.dev/) for integrating Chains with Jenkins X.\nTo integrate the [chart](https://github.com/chainguard-dev/tekton-helm-charts/tree/main/charts/tekton-chains) and added support for it on [jx3-versions](https://github.com/jenkins-x/jx3-versions) to make installation of helm chart easy for our users.\nThe list of PRs for this:\n\n| PR                                                  | Short Description                                                           |\n| --------------------------------------------------- | --------------------------------------------------------------------------- |\n| https://github.com/jenkins-x/jx3-versions/pull/3359 | Supporting Tekton Chains helm chart with jx3-versions                       |\n| https://github.com/jenkins-x/jx-docs/pull/3660      | Documentation on how to install and integrate Tekton Chains with Jenknins X |\n\nNOTE: The integration is tested only on k3s cluster and work is in progress to test it on GKE and EKS.\n\n### Software Bill of Materials (SBOM)\n\nDescription:\n\n[Software Bill Of Materials](https://en.wikipedia.org/wiki/Software_supply_chain#:~:text=Software%20vendors%20often,could%20harm%20them.) (SBOM) is a complete formally structured list of the materials (components, packages, libraries, SDK) used to build (i.e. compile, link) a given piece of software and the supply chain relationships between all these materials.\nIt is an inventory of all the components developers used to make this software.\nIt has many formats and many generating tools but all have the same purpose in the end.\n\nImplementation:\n\nI first began with investigating available standards and formats for SBOMs and tools for generating them.\nThe results of my investigation were written to a blog post [here](https://jenkins-x.io/blog/2022/07/24/intro-to-sbom/).\n\nI've settled for using [syft](https://github.com/anchore/syft) for SBOM generation and [spdx](https://spdx.dev/) as the standard format for SBOMs.\nAlso, I've added those installation as pre-defined steps in the Jenkins X pipeline catalog so it will also be available for our users to use in their pipelines and applied those steps to Jenkins X own pipelines.\nThe list of PRs for this work are:\n\n| PR                                                          | Short Description                                                                                   |\n| ----------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| https://github.com/jenkins-x/jx/pull/8312                   | Install syft using github action and generate SBOM with goreleaser                                  |\n| https://github.com/jenkins-x/jx3-pipeline-catalog/pull/1166 | Add Syft Installation to JX3 pipeline Catalog so it can be used to generate SBOMs                   |\n| https://github.com/jenkins-x/jx3-pipeline-catalog/pull/1173 | Add Oras Steps to support pushing SBOMs as OCI artifacts                                            |\n| https://github.com/jenkins-x-plugins/jx-pipeline/pull/490   | Use Syft installation step in jx-pipeline from jx3-pipelines-catalog                                |\n| https://github.com/jenkins-x-plugins/jx-pipeline/pull/491   | Use Oras bushing SBOMs step from jx3-pipeline-catalog                                               |\n| https://github.com/jenkins-x/jx-docs/pull/3643              | Add documentation for supporting sbom generation and storing for other jx components\u00a0and our users |\n| https://github.com/jenkins-x/jx/pull/8351                   | Applying SBOM management to JX                                                                      |\n| https://github.com/jenkins-x/jx3-pipeline-catalog/pull/1190 | Add grype tasks for SBOM vulnerability scanning to jx3-pipeline-catalog                             |\n| https://github.com/cdfoundation/presentations/pull/44       | Add materials for my talk with the CDF Supply Chain Securtiy SIG about SBOMs with Jenkins X         |\n\nThere is also this issue to apply all steps on our active JX repositories [here](https://github.com/jenkins-x/jx/issues/8348) (WIP as there are many repositories to be updated) and the list of PRs are referenced in the issue (except those of JX because they included testing and fixing PRs at the beginning).\n\n### Signing Jenkins X artifacts\n\nDescription:\n\nJenkins X is a collection of many components and tools that are used to provide the end-to-end CI/CD solution.\nThose components are used by our users and are also used by Jenkins X itself.\nIt is important to sign those components to ensure the integrity of the components and the supply chain security of Jenkins X.\n\nImplementation:\n\nThere are a set of tools developed by [sigstore](https://sigstore.dev/) to sign and verify artifacts.\nThe most used tool in my implementation is [cosign](https://github.com/sigstore/cosign).\nI first started with signing the Jenkins X CLI with keys stored in github secrets and then moved to signing the Jenkins X docker images.\nAfter that, I switched to use cosign [keyless signing](https://github.com/sigstore/cosign/blob/main/KEYLESS.md) (an experimental feature using other Sigstore components (rekor and fulcio) to save end users from the hassles of key (mis)management ) The list of PRs for this work are:\n\n| PR                                        | Short Description                        |\n| ----------------------------------------- | ---------------------------------------- |\n| https://github.com/jenkins-x/jx/pull/8432 | Sign goreleaser artifacts with cosign    |\n| https://github.com/jenkins-x/jx/pull/8441 | Sign published images with cosign        |\n| https://github.com/jenkins-x/jx/pull/8461 | Keyless signing for goreleaser artifacts |\n\n## What's next?\n\nThe work for supply chain security is still in progress and there are many things to be done.\nAt Jenkins X, we are planning to develop new features and integrate more solutions to provide a better supply chain security for our users.\nThe list of things to be done are:\n\n* Add a cli subcommand in JX to verify sbom/signed binaries against the public keys.\n* Add [openSSF security scorecard](https://github.com/ossf/scorecard) to Jenkins X repositories.\n* Integrate [FRSCA](https://buildsec.github.io/frsca/) work with Jenkins X.\n\n## Acknowledgements\n\nOut of all internships and trainings I've done, this one was the most challenging, rewarding and educational experience. I would like to specially thank my mentor [Ankit Mohapatra](https://github.com/ankitm123) for his constant support and his patience to teach me a lot of his rich knowledge he gained by experience and thank the whole team of Jenkins X for their support and guidance and for welcoming me to the community. This internship was a great experience. I had a great time working on this project and I learned a lot from it. I hope to continue contributing to Jenkins X and the open-source community in the future. Thank you.\n",
            "content/en/blog/news/2022-gsoc-cbp.md": "---\ntitle: \"GSoC 2022 Community Bonding Period with Jenkins X\"\ndate: 2022-07-12\ndraft: false\ndescription: >\n  Jenkins X GSoC 2022 Community Bonding Period\ncategories: [blog]\nkeywords: [Community, gsoc, 2022]\nslug: \"GSoC2022-Community-Bonding-Period\"\naliases: []\nauthor: Rajat Gupta\n---\n\n## Introduction\n\nHello everyone, I am Rajat Gupta, pursuing my bachelor's in Information Technology.\nIn 2022, I have been selected as a student developer in Google Summer of Code under Jenkins X.\nWe will be building a new UI for Jenkins X. I got this news on May 20th, as I received an email from google.\n\n## How I started\n\nThe technologies needed were **Golang**, **Kubernetes**, and **GitOps**.\nI used golang only once before, while linting Jenkins X codebase, I only used Kubernetes once before while setting up a k3s cluster to run Jenkins X pipelines. These tasks were necessary to do for all GSoC participants. Apart from that, I was a total beginner.\n\n## What I learned during Community Bonding Period\n\nSo, when I got selected, I had a lot to learn, my mentors gave me a **30 Day plan**.\nThey also suggested some resources and conference talks which made it simple for me to start.\n\n30 Day plan was: \n- Learn **golang**\n- Getting started with **Kubernetes**\n- Learn what is a **CRD** and how they are used?\n- Complete a tutorial on **Kubebuilder**\n- Getting started with **Tekton** pipelines\n- Learn **Jenkins X**\n\nWe also had some amazing pair programming sessions, where I used to share my screen and my mentor guided me through, which is not common because mentors have a very busy schedule.\nBut my mentors helped me a lot.\nThese sessions helped me in working with the massive Jenkins X codebase and learning its complex workflows.\n\nI also learned that testing and documentation are very important as they make it easier for developers to understand these workflows.\nHence testing also became an important part of my learning period. \n\n\nWe also started the **UI-sig** a week or two after my selection where we work on Jenkins X UI. \nThe learning I did in this community bonding period was just amazing, I learned more in 3 weeks than that what I learned in the past 3 months.\n\n## Highlights\n\nI also attended the **kubeCon**, **cdCon**, and **Jenkins X Contributor Summit 2022** during this period.\nWhen I meet other contributors of Jenkins X, people from CD Foundation were very excited about our plans for the future.\nI also gave a small introduction to my project.\n\nIf you are looking for a project where you can learn about CI/CD, DevOps, Cloud, Golang, Jenkins X is the best place for you.\n\nThanks to all my mentors [@ankitm123](https://github.com/ankitm123), [@babadofar](https://github.com/babadofar), [@msvticket](https://github.com/msvticket), and [@tomhobson](https://github.com/tomhobson)\n",
            "content/en/blog/news/2022-gsoc-followup.md": "---\ntitle: \"Google Summer of Code 2022 \u2600\ufe0f\"\ndate: 2022-03-12\ndraft: false\ndescription: >\n  Jenkins X GSoC 2022 followup!\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"GSoC2022-followup\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\n{{< alert >}}\nProject proposal template can be found [here](/blog/2022/04/05/gsoc2022-proposal-template/).\n{{< /alert >}}\n\nWe are very happy to announce that Jenkins X has been selected to participate in the Google Summer of Code (GSoC) 2022!\n\nIf you are new to GSoC and want to learn more about it, check out their new [site](https://summerofcode.withgoogle.com/).\nYou can find the list of project ideas from Jenkins X [here](/blog/2022/02/20/gsoc2022-ideas/).\nIf you are interested in applying to Jenkins X, please check the [timeline](https://developers.google.com/open-source/gsoc/timeline).\nApply as early as possible.\n\nThis post aims to give GSoC contributors insight into the selection process and how to get started.\n\n### How many contributors are we looking for?\n\nWe have 3 mentors signed up at the moment and are looking to select a maximum of 2 applicants.\n\nWe want you to have a great experience contributing to Jenkins X and learn lots of new things!\n\n### What are we looking for in an ideal Jenkins X contributor?\n\n- Willingness to learn Jenkins X and engage with the community\n- Independence and a drive to investigate and propose solutions to complex issues that might occur during implementation\n- (Optional) Eventually become a Jenkins X maintainer (and some day mentor new GSoC contributors)!\n\n### What can prospective contributors do? (March 7 - April 19)\n\nYou do not have to complete all of these tasks.\nThis is presented here so that you have some clarity around where to start and which resources to follow.\n\n- Recommended: Join the jenkins X community [slack channels](https://jenkins-x.io/community/#slack) and say hello :)\n  - We prefer you post messages in the jenkins-x-dev channel\n  - Attend the [office hours](/community/#office-hours)\n- Recommended: Interact with potential mentors to understand/review the requirements of the projects.\n- Recommended: Start working on your proposal early on.\n- Optional: Learn about [docker](https://youtu.be/3c-iBn73dDE)\n- Optional: Learn about [kubernetes](https://youtu.be/X48VuDVv0do)\n- Optional: Learn the basics of [golang](https://go.dev/tour/list)\n- Optional: Understand Jenkins X concepts and fundamentals by going over the [documentation](https://jenkins-x.io/)\n- Optional: Set up Jenkins X locally and give it a go (Please don't spend money running Jenkins X in the cloud).\n  - We prefer you use [k3s](https://jenkins-x.io/v3/admin/platforms/k3s/) for this, as it's less resource intensive and can be installed locally on your workstation (linux). Mac users need to install something like multipass to first install k3s.\n\n### Interview process and selection criteria (April 19 and May 12)\n\nWe will start interviewing candidates between April 19 and May 12.\nWe want to talk to you individually, and get to know you better.\n\nContributors will be scored based on the following criteria:\n\nImportant:\n\n- Independent thinker and willingness to learn\n- Project proposal demonstrating good understanding of the project they are interested to work on\n\nNice to have:\n\n- Technical expertise (basic knowledge goes a long way):\n\n  - Past experience with container technology\n  - Past experience with kubernetes\n  - Past experience with golang\n  - Past experience with a Frontend UI library (if interested to contribute to the UI project)\n\n- Past open source contribution experience\n- Any level of familiarity with Jenkins X (or other CI/CD tools)\n- Complete one of the three tasks listed below (If you have any questions on these tasks, please ask in our slack channel and we'll be happy to answer your questions):\n  - If you have already contributed to Jenkins X, then share the GitHub links to your pull requests. Your mentor will be happy to discuss them with you and will want to know more about what you did and why you did it.\n  - Walk us through a local Jenkins X set up (Please don't spend money running Jenkins X in the cloud)\n  - Refactor a single function within the Jenkins X organization to improve the code quality. Clone the library, make refactoring changes, describe your changes and zip up and submit to a mentor via slack. Explain your refactoring changes and why you did them.\n- Previous GSoC experience (first time contributors are more than welcome)\n\nWe will make an effort to talk individually to all the Jenkins X GSoC contributor applicants.\n\nWe look forward to reviewing your application and working with you.\n",
            "content/en/blog/news/2022-gsoc-project-template.md": "---\ntitle: \"Google Summer of Code 2022 project proposal template \u2600\ufe0f\"\ndate: 2022-04-05\ndraft: false\ndescription: >\n  Project proposal template for Jenkins X GSoC 2022\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"GSoC2022-proposal-template\"\naliases: []\nauthor: Jenkins X maintainers\n---\n\n### Proposal template\n\n#### 1. Contact details\n\n- Full name:\n- Country:\n- Time zone:\n- Email:\n- Github ID:\n- Personal blog (optional):\n- Twitter/LinkedIn/others:\n\n#### 2. GSOC information\n\n- Have you participated in the Google Summer of Code previously? Please describe your experience.\n- Are you applying to any other organizations this year? If so, please list them.\n- How many hours will you devote to your GSoC project each week? Do you have any other commitments during the summer?\n- Have you ever contributed code to Jenkins X? If you have, post the Pull Request (PR) links (It's ok if they have not been merged/approved yet)\n- Do you plan on contributing to the Jenkins X project after GSoC is finished?\n- Were you able to install Jenkins X locally on your laptop?\n  - If no, please explain why (Unsupported architecture, missing documentation, time constraints etc)?\n  - If yes, how was the installation experience (missing documentation, complexity etc)?\n- Have you used kubernetes in the past? Please provide a brief description and if possible links to the work.\n- Have you used golang in the past? Please provide a brief description and if possible some code samples.\n- (If you are interested in the UI project) Have you worked with a frontend framework/library in the past? Please provide a brief description and if possible some code samples.\n\n#### 3. Project idea\n\nRepeat this section for as many project ideas as you want (Go in the order most likely to least likely).\n\n- Title of the idea that you are interested in\n- Brief description of the idea.\n- Have you worked on a similar project in the past? If yes, please provide a brief description (with links if possible)\n- How will the project benefit Jenkins X and the community\n  - Will it help in driving adoption of Jenkins X? If yes, then how/why?\n- Deliverables\n  - Include any milestones and deadlines\n  - Include time for investigation, coding and documentation\n",
            "content/en/blog/news/2022-gsoc-work-report.md": "---\ntitle: \"GSoC 2022 Final Report: Building Jenkins X UI\"\ndate: 2022-11-13\ndraft: false\ndescription: This project replaces the older UI with the new UI with more powerful features.\ncategories: [blog]\nkeywords: [Community, jenkins-x, gsoc, 2022]\nslug: \"GSoC-2022-work-report\"\naliases: []\nauthor: Rajat Gupta\n---\n\n## Jenkins X New UI\nIt is a web application built with [Golang](https://go.dev/) for the backend and [Sveltekit](https://kit.svelte.dev/) for the frontend, both of which are built together and used in the same container.\nTo function properly, it must be installed as a helm chart with Jenkins X CRDs.\n\n\ud83c\udf1f It has light and dark themes.\n\n![homepage.png](/images/gsoc-work-report-22/homepage.png)\n\n![pipelinesPage.png](/images/gsoc-work-report-22/pipelinesPage.png)\n\n## Why need a new UI?\nA good UI is essential for a CI/CD tool, as not everyone is familiar with the CLI.\nThe current UI (jx-pipeline-visualizer) is a read-only UI, the user can view the logs of PipelineActivity but neither can start nor stop the pipeline.\n\nFeatures that the UI will provide: \n- Start and Stop a PipelineActivity.\n- Have an audit trail.\n- A graphical representation of PipelineActivity.\n- RBAC to limit access to certain functionalities.\n\nNew Jenkins X UI focus on Simplicity, Security and a Superb User Experience.\n\nThis is NOT GA (General Availability) yet. Visit the project repo [here](https://github.com/jenkins-x/jx-ui) to try it.\n\n## How to use it?\n- Go to the `helmfiles/jx/helmfile.yaml` in your cluster repo.\n- Replace **jx-pipelines-visualizer** chart with the **jx-ui** chart.\n  ```bash\n  - chart: jxgh/jx-ui\n    version: <latest-version>\n    name: jx-ui\n    values:\n    - ../../versionStream/charts/jxgh/jx-ui/values.yaml.gotmpl\n    - jx-values.yaml\n  ```\n- Do `git push`.\n- Add the code snippet to **~/.config/ngrok/ngrok.yml** under `tunnels:`.\n  ```bash\n  ui:\n  proto: http\n  addr: 9200\n  schemes:\n    - http\n  ```\n- Add that domain to the ingress file, Run the following command and replace **dashboard.jx.change.me** with ngrok link.\n  ```bash\n  kubectl edit ing jx-ui\n  ```\n- And boom, visit localhost:9200 and it works, you should see the homepage screen.\n\n## Work Done\n### Stop a running or pending PipelineActivity from UI\n\nWe have added a button in pipelines page and pipelineDetails page, it asks for confirmation and on selecting **Yes** it will stop the PipelineActivity.\n\nWe can stop the PipelineActivity from the pipelines tables.\n![pipelinesPageStopBtn.png](/images/gsoc-work-report-22/pipelinesPageStopBtn.png)\n\nWe can also stop the PipelineActivity from the pipelines details page.\n![pipelineDetailsPageStopBtn.png](/images/gsoc-work-report-22/pipelineDetailsPageStopBtn.png)\n\n**Issue:** https://github.com/jenkins-x/jx-ui/issues/28\n\n**PRs:**\n- https://github.com/jenkins-x/jx-ui/pull/50\n- https://github.com/jenkins-x/jx-ui/pull/51\n- https://github.com/jenkins-x/jx-ui/pull/59\n- https://github.com/jenkins-x/jx-ui/pull/75\n\n\n### Show message with status of the PipelineActivity\n\nWhen a pipeline is cancelled or it has timedout, we update the status of the pipeline to cancelled or timed out.\nHowever, we do not show the reason why a job was timed out.\nThat information should be displayed on the pipeline details page (along with the step which has timed out).\n**Issue:** https://github.com/jenkins-x/jx-ui/issues/23\n\n**PRs:**\n- https://github.com/jenkins-x/jx-api/pull/171\n- https://github.com/jenkins-x-plugins/jx-pipeline/pull/481\n\n\n### Implement a DAG for PipelineActivity\n\nTo make the UI more user friendly and to explain the sequence of the steps in a PipelineActivity, we have added a [DAG](https://en.wikipedia.org/wiki/Directed_acyclic_graph) (Directed Acyclic Graph) chart to graphically visualize the PipelineActivity.\n\nWe used [D3.js](https://d3js.org/) library to create a custom component which create a DAG chart of PipelineActivity for us.\n[D3-hierarchy](https://github.com/d3/d3-hierarchy) is an important part of our component.\nWe're unit testing the component using [vitest](https://vitest.dev/).\n\n![pipelineDetailsPage.png](/images/gsoc-work-report-22/pipelineDetailsPage.png)\n\n**Issue:** https://github.com/jenkins-x/jx-ui/issues/48\n\n**PRs:**\n- https://github.com/jenkins-x/jx-ui/pull/57/files\n- https://github.com/jenkins-x/jx-ui/pull/65/files\n\n## What's next?\n\n- The UI project is just started, we have also start a seperate **UI-sig** which you can join from [calendar](https://jenkins-x.io/community/#office-hours).\n- There are some amazing features that we are planning to add to the new UI: \n  - Dynamically update the list of pipelines\n  - Upgrade version stream from the UI\n  - Import repositories using the UI\n  - Break down pipeline logs into individual steps\n  - Mask secrets in the logs\n  - Display logs for cancelled and timed out pipelines\n\nTo read more read the issues created [here](https://github.com/jenkins-x/jx-ui/issues)\n\n## Acknowledgements\n\nI never imagined I would be this sad\u00a0after finishing an internship.\nJust as Osama noted in his [work report](/blog/2022/11/08/gsoc-2022/), this was the most difficult experience we have had thus far, but the encouragement of the jx community and the direction of our mentor made it the best educational experience I have ever had.\n\nI learned a lot here, but there are still many things I need to learn (I haven't finished my 30-day plan yet). I knew I could learn a lot from open source, but I didn't expect this much.\nIn addition, I think the CD Foundation is very special, and the community and the ways in which we can collaborate with other projects are also very valuable.\n\nI started my intern by attending conferences like kubecon and CD Summit, we started **UI-SIG**, and in the last 2 months we've given 3 talks about Jenkins X.\nAs I mentioned above there are still thing to do in the UI project and since we all loved the GSoC program, I'd love to became a part of it in future with Jenkins X.\n\nAgain **Big Thanks** to all my mentor [Ankit](https://github.com/ankitm123), [Christoffer](https://github.com/babadofar), [Marten](https://github.com/msvticket), [Tom](https://github.com/tomhobson) and gsoc fellow [Osama](https://github.com/osamamagdy) and JX community for such a great opportunity.\n",
            "content/en/blog/news/2022-gsoc.md": "---\ntitle: \"Project ideas for Google Summer of Code 2022 \u2600\ufe0f\"\ndate: 2022-02-20\ndraft: false\ndescription: >\n  Project ideas for GSoC 2022!\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"GSoC2022-ideas\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\n{{< alert >}}\nJenkins X has been accepted into the Google Summer of Code 2022 program, take a look at the [follow up blog](/blog/2022/03/12/gsoc2022-followup/).\n\nProject proposal template can be found [here](/blog/2022/04/05/gsoc2022-proposal-template/).\n{{< /alert >}}\n\nWe have put together some project ideas as part of our application to participate in the Google Summer of Code 2022 program.\n\n### 1. Cloud events integration with Jenkins X\n\n##### Description\n\nThe only way to trigger jobs/workflows in Jenkins X at the moment is by listening to events from Source Control Management (SCM) providers like github, gitlab, bitbucket, however it would be nice to listen to other event sources and trigger jobs/pipelines in Jenkins X.\nOne interesting application would be to trigger some Jenkins X job in response to some alerting event (pagerduty, opsgenie).\nAs a start we should focus on (emitting and listening to) cloudevents which define a common format for events produced from different sources.\nThis will also help make Jenkins X compatible with other platforms.\n\n##### Expected Outcomes\n\n- Jenkins X should be able to emit cloud events\n- Jenkins X should be able to listen to cloud events, and run pipelines\n- Updated documentation\n\n##### Recommended skills\n\nGolang, kubernetes, cloudevents, familiarity with lighthouse would be great, but not required\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Resources\n\n- https://cloudevents.io/\n- https://www.youtube.com/watch?v=yg7RuDWHwV8\n- https://www.jenkins.io/projects/gsoc/2021/projects/cloudevents-plugin/\n- https://cdevents.dev/\n- https://github.com/jenkins-x/lighthouse\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### 2. Supply chain security: Improve integration with sigstore and look at tekton chains\n\n##### Description\n\nWith all the software breach that has happened recently, it has become necessary to add tooling to solve the issue around supply chain security.\nThere are some good open source tools which can help with that (sigstore tools).\nAs a CI/CD platform, Jenkins X needs to be integrated with them so that the end users can get this feature out of the box.\nJenkins X leverages tekton as it's pipeline execution engine.\nHowever, we dont integrate with tekton chain yet.\nAlso similar to tekton chains, we should have a jenkins X operator that can take a snapshot of the jx pipeline activities or lighthouse jobs, sign them and store them in a cloud store eventually.\nCatalog should be updated to include trivy tasks, so that users can start using them with no to minimal effort.\nAs a start, we should start signing the various artifacts produced by Jenkins X (binaries, docker images, helm charts).\n\n##### Expected Outcomes\n\n- Jenkins X artifacts (helm charts, docker images, binaries) are all cryptographically signed.\n- Integration with tekton chains\n- An operator which can take snapshot of the jx pipeline activities, sign them and store them in the cloud storage.\n\n##### Recommended skills\n\ngolang, kubernetes, (basic) understanding of security\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Resources\n\n- https://youtu.be/SqgkbCKp8kE\n- https://github.com/sigstore\n- https://itnext.io/sigstore-a-solution-to-software-supply-chain-security-35bc96bddad5\n- https://tekton.dev/docs/chains/\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nMedium\n\n### 3. New Jenkins X UI\n\n##### Description\n\nCurrently, the way to manage (CRUD) Jenkins X resources(pipelines) is by using the cli.\nWhile the CLI is very powerful and user friendly, it should be used by power users (release team who installs and manages jenkins x clusters).\nWe should not expect developers who are concerned with only the pipelines to install the cli (This does not scale when you have 100+ developers in the company)\nWe do have a UI/dashboard, but it is read only, so users cannot use it to trigger release pipelines or stop running pipelines.\nIn addition, we do not have an audit trail of who did what.\nSo, we propose a new UI/dashboard which has feature parity with the CLI (including SSO and RBAC)\nThe UI should make the JX cli redundant, and add more value to the user with easily available status and logs of the entire cluster\n\n##### Expected Outcomes\n\n- Fully functional Jenkins X Dashboard running in the kubernetes cluster\n- Drop in replacement for existing read only UI\n- Audit trail of who took what action in the UI\n- Updated documentation\n\n##### Recommended skills\n\ngolang, basic understanding of sveltejs (or any js framework), css, kubernetes\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Resources\n\n- https://youtu.be/AdNJ3fydeao\n- https://svelte.dev/\n- https://kit.svelte.dev/\n- https://tailwindcss.com/\n- https://go.dev/tour/welcome/1\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### 4. Quickstart Improvements\n\n##### Description\n\nCreate new quickstarts that showcase interesting features and kubernetes deployment best practices.\nThis includes prometheus integrations, database integrations for preview demos, documentation and a better interface for creating quickstarts, rootless containers.\nThe current quickstarts were created three years ago and are not up to date. It would be good to have them updated, and also add quick starts for newer languages and frameworks.\n\n##### Expected Outcomes\n\n- Updated quickstarts\n- Quickstarts for new languages and frameworks\n- Updated documentation\n\n##### Recommended skills\n\nSome knowledge on various programming languages and some deeper knowledge of Kubernetes deployment and operations.\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Resources\n\n- https://github.com/jenkins-x-quickstarts\n- https://github.com/jenkins-x/jx3-pipeline-catalog\n\n##### Expected Size of project\n\n175 hours\n\n##### Difficulty rating\n\nEasy\n\n### 5. Implement drift detection (gitops)\n\n##### Description\n\nJenkins X only applies changes to cluster when contents of the gitops repository changes. This does not satisfy one of the requirements of the gitops model. It would be nice to detect drift between the current state (kubernetes) and the desired state (git) and apply only those changes. This has the side effect of making the boot job faster.\n\n##### Expected Outcomes\n\n- Drift detection in Jenkins X\n- Configurable interval when Jenkins X will do a drift detection and apply the changes\n- Updated documentation\n\n##### Recommended skills\n\nKubernetes, golang, Jenkins X, basic understanding of gitops.\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Resources\n\n- https://opengitops.dev/\n\n##### Expected Size of project\n\n175 hours\n\n##### Difficulty rating\n\nMedium\n\n### 6. Multi-tenancy in Jenkins X\n\n##### Description\n\nInstalling multiple versions of Jenkins X in a single kubernetes cluster is not supported. There are both architectural and scalability issues around it. This would be beneficial for small teams within organizations who want to own their entire CI/CD platform instead of relying on a central release management team which can lead to more productive teams.\n\n##### Expected outcomes\n\n- A multi-tenant enabled Jenkins X install (jenkins X in different namespaces or a central jx install controlling pipelines running for different tenants)\n- Better scaling and security model for Jenkins X\n- Updated documentation\n\n##### Recommended skills\n\nGolang, kubernetes, event driven architecture\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christopher Vig](https://github.com/babadofar)\n- [Tom Hobson](https://github.com/tomhobson)\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### Next Steps\n\nIf Jenkins X gets selected, we will create a followup blog with additional details.\n",
            "content/en/blog/news/2022-gsod.md": "---\ntitle: \"Project proposal for Google Season of Docs 2022 \ud83d\udcc4\"\ndate: 2022-03-23\ndraft: false\ndescription: >\n  Project ideas for GSoD 2022!\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"GSoD2022-proposal\"\naliases: []\nauthor: Jenkins X maintainers\n---\n\nWe have put together a project proposal as part of our application to participate in the Google Season of Docs 2022 program.\n\n### Project proposal\n\n#### Better documentation for real world use cases - Jenkins X\n\n##### About us\n\nJenkins X provides automated CI/CD for Kubernetes with Preview Environments on Pull Requests using Cloud Native pipelines from Tekton.\n\n##### Problem\n\n- End users of Jenkins X are unable to find information on how to use Jenkins X for real world use cases which includes:\n  - Production best practices\n  - Scanning images in Jenkins X pipelines\n  - How to make your app use different configuration/secrets for each environment\n  - Observability for your apps, logging, metrics, tracing\n  - Tests (Integration, e2e)\n  - Artifact management\n  - Multi cluster\n  - Integration with other tools in the cloud native sector\n\n##### Project scope\n\n- Audit the current Jenkins X documentation and create a friction log\n- Use the friction log as a guide for understanding the gaps in the documentation\n- Interact with the Jenkins X community to create a list of top use cases\n  - Create a survey\n  - Look at the github issues and slack messages\n- Work with the volunteers to incorporate those changes into the documentation\n- Establish a feedback loop (the target customers are the end users of Jenkins X) to improve the documentation\n\n##### Measuring project success\n\n- Decrease in the number of github issues raised by end users on documentation related to common real world use cases\n- Short 1-2 minute videos on common tasks that end users of Jenkins X would like to perform.\n\n##### Recommended skills\n\n- Must have:\n  - Experience with github\n  - Communication skills to work with the Jenkins X community\n  - Creating online surveys\n- Nice to have:\n  - Basic experience with docker compose (local development scripts use compose)\n  - Good video editing skills.\n  - Some knowledge working with the documentation of other tools in the kubernetes ecosystem\n\n##### Mentors/Volunteers\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Christoffer Vig](https://github.com/babadofar)\n- [M\u00e5rten Svantesson](https://github.com/msvticket)\n- [Tom Hobson](https://github.com/tomhobson)\n\n### Timeline\n\nThe project will take roughly 6 months to complete.\nOnce the technical writer is selected, we will do an orientation to bring him up to speed.\nThis is the timeline we have in mind, but we are flexible.\n\n| Dates                   |                               Action Item                               |\n| ----------------------- | :---------------------------------------------------------------------: |\n| April 14 - May 16, 2022 |                          Hire technical writer                          |\n| April 14 - May 31, 2022 |                Orientation after hiring technical writer                |\n| June 1 - July 31        | Review documentation, create actions items, get familiar with Jenkins X |\n| August 1 - October 31   |                           Work on the project                           |\n| November                |                           Project completion                            |\n\n### Budget\n\n| Budget item              | Amount | Running Total | Notes                                       |\n| ------------------------ | :----: | ------------: | ------------------------------------------- |\n| Technical writer stipend |  6000  |          6000 |                                             |\n| Volunteer stipend        |  2000  |          8000 | 4 volunteer stipend (500 each) X 4          |\n| Jenkins X t-shirts       |  300   |          8300 | 20 t-shirts X 15                            |\n| Shipping for t-shirts    |  300   |          8600 | 15 dollars to ship, shipping rates can vary |\n\n#### Notes about budget\n\n- The cost of the t-shirt was taken from [here](https://store.cd.foundation/collections/jenkinsx).\n- The t-shirts are for the technical writer, volunteers and any member of the jenkins X community (not officially listed as a volunteer) who helps out by answering the technical writer's questions.\n\n### Additional information\n\n- Previous participation in Season of Docs, Google Summer of Code or others\n  - Jenkins X participated in the 2020 Season of [docs](/blog/2020/04/28/season-of-docs-2020/). The maturity level matrix created by the technical writer is still used by the community to evaluate if Jenkins X will work for their use case, as well as used by the Jenkins X maintainers to plan the roadmap for improving Jenkins X.\n  - Jenkins X is also participating in the [google summer of code 2022](/blog/2022/03/12/gsoc2022-followup/). We are seeing a lot of interest from new contributors. We are confident it will lead to some amazing improvements in the Jenkins X ecosystem and make it a sustainable open source project. We expect the technical writer will help the contributors create better documentation for their work.\n\n### Other ideas\n\n#### 2. Reorganize documentation to make it more user friendly and easy to search\n\n##### Problem\n\n- The documentation does not feel coherent, it does not read like a book from start to finish\n  - There's no clear flow about how people should read documentation and no \"next step\" once they've finished reading a page.\n  - There's also a lot of missing _assumed_ knowledge in the documentation which makes it hard for new users to form a mental picture of Jenkins X\n- Results from older documentation sometimes shows up higher than newer results creating confusion for users\n\n##### How would we measure success?\n\n- The number of repeated searches decrease (adding / removing terms)\n- Decrease in the number of github issues raised by users on documentation related to missing information\n- Decrease in slack messages from users not finding relevant information in the documentation.\n\n#### 3. Improve contributor/developer documentation on how to extend Jenkins X\n\n##### Problem\n\n- It is not clear from our documentation how to\n  - add support for a new cloud provider\n  - add support for a new git/scm provider\n  - add a new quick start\n  - add new language packs\n\n##### How would we measure success?\n\n- Increase in number of contributions to add support for more cloud providers\n- Increase in number of contributions to add add or extend quickstart guides\n- Decrease in slack messages from users not finding relevant information in the documentation.\n",
            "content/en/blog/news/2022-hacktoberfest.md": "---\ntitle: \"Hacktoberfest 2022\"\ndate: 2022-10-03\ndraft: false\ndescription: >\n  Contribute to Jenkins X as part of Hacktoberfest 2022\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"hacktoberfest2022\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\nWe are excited to announce that Jenkins X will be participating in Hacktoberfest again this year!\nHacktoberfest is a month-long global celebration of open source software.\n\nAll backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors.\n\n**Learn more about Hacktoberfest and sign up [here](https://hacktoberfest.digitalocean.com/).**\n\n### Contribute to Jenkins X\n\nWe welcome your contributions to the [Jenkins X project](https://github.com/jenkins-x/jx)!\n\n[Issues labelled \"hacktoberfest\"](https://github.com/jenkins-x/jx/issues?q=is%3Aissue+label%3Ahacktoberfest+is%3Aopen) generally indicate good first issues.\nHowever, all pull requests will count towards your Hacktoberfest challenge.\n\nRefer to the contribution guides for making [code](https://jenkins-x.io/community/code/) and [documentation](https://jenkins-x.io/community/documentation/) changes.\n\nRefer to [this document](https://jenkins-x.io/v3/about/overview/source/) to get an idea about the location of the different Jenkins X source code repositories.\nNormally the labels assigned to the ticket will help you in deciding which part of the Jenkins X codebase to look at.\nThe maintainers will also try to link the relevant repository for hacktoberfest issues in the issue comment.\n\nOnce you are done with the contribution, request a review from the maintainers by adding the comment in your pull request.\n\n```bash\n/cc @ankitm123 @babadofar @msvticket @osamamagdy @rajatgupta24 @tomhobson\n```\n\n### Ask us questions\n\nWe're happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n- #jenkins-x-dev for developers of Jenkins X\n- #jenkins-x-user for users of Jenkins X\n\nFind out more about becoming involved in the Jenkins X community [here](https://jenkins-x.io/community/).\n\n_We look forward to seeing you in open source, fixing all the things!_\n",
            "content/en/blog/news/2022-introduction-to-sbom.md": "---\ntitle: \"Introduction to Software Bill Of Materials\"\ndate: 2022-07-24\ndraft: false\nweight: 300\ndescription: >\n  Here we discuss the concepts of SBOM, how it can help in securing your software.\ncategories: [blog]\nkeywords: [Community, GSoC, 2022, supply chain security, BOM, SBOM]\nslug: \"intro-to-sbom\"\naliases: []\nauthor: Osama Magdy\n---\n\n## Introduction\n\nBefore going through Software Bill Of Materials (SBOMs), we need to set the ground for a rising concern in the software industry which is Software Supply Chain Security.\nLike traditional industries, deploying a piece of a software artifact goes through multiple stages composed of collecting source code components, libraries, tools, and processes used in those stages.\n\n![comparing the different steps in a real world supply chain with software supply chain](/images/sbom-guide/supply-chain.png)\n\nFig. 1 <https://blog.convisoappsec.com/en/is-your-software-supply-chain-secure/>\n\nA supply chain attack can occur along the chain from submitting unauthorized malicious code in your source, unauthorized injection of harmful dependencies, and even replacing packages after being built with other compromised artifacts.\nA more detailed explanation about those types of attacks is [here](https://slsa.dev/spec/v0.1/threats)\n\nDue to its importance and being a critical issue, generating SBOM for your software adds another layer of protection to this threat.\n\n## Definition: What is SBOM?\n\nAs far as we know, developers around the world are building web applications using hundreds of third-party open-source libraries and packages. You can confidently tell that 90% of the software products around the world are built over open-source components. With that in mind, we need to keep track of using these dependencies while building our applications. What if there are vulnerabilities in the libraries we use? How to efficiently protect ourselves against it?.\n\n**[Software Bill Of Materials](https://en.wikipedia.org/wiki/Software_supply_chain#:~:text=Software%20vendors%20often,could%20harm%20them.)** (SBOM) is a complete formally structured list of the materials (components, packages, libraries, SDK) used to build (i.e. compile, link) a given piece of software and the supply chain relationships between all these materials.\n\nIt is an inventory of all the components developers used to make this software. It has many formats and many generating tools but all have the same purpose in the end.\n***Example: a simple formatted SBOM of Ubuntu alpine docker image using [syft](https://anchore.com/sbom/how-to-generate-an-sbom-with-free-open-source-tools/)***\n\n``` bash\n\u2714 Loaded image  \n \u2714 Parsed image  \n \u2714 Cataloged packages      [14 packages]\nNAME                    VERSION      TYPE \nalpine-baselayout       3.2.0-r18    apk   \nalpine-keys             2.4-r1       apk   \napk-tools               2.12.7-r3    apk   \nbusybox                 1.34.1-r3    apk   \nca-certificates-bundle  20191127-r7  apk   \nlibc-utils              0.7.2-r3     apk   \nlibcrypto1.1            1.1.1l-r7    apk   \nlibretls                3.3.4-r2     apk   \nlibssl1.1               1.1.1l-r7    apk   \nmusl                    1.2.2-r7     apk   \nmusl-utils              1.2.2-r7     apk   \nscanelf                 1.3.3-r0     apk   \nssl_client              1.34.1-r3    apk   \nzlib                    1.2.11-r3    apk\n\n```\n\nHere it shows only softwares included in the final layer of the container (default choice by syft). If we want to view a detailed SBOM with one detailed format, we can run `syft alpine -o spdx-json`. This will view the output as `.json` file following the `spdx` format (will discuss that later)\n\n## Use cases in Supply chain security\n\nWhat makes a supply chain attack susceptible is the lack of transparency and visibility about whether the software gets affected by a recent exploit or not. This greatly affects both producers and customers of the product.\n\nOn the user's side if they know the components of the software and that there is one component affected by certain vulnerabilities, they are better aware and ready to protect against potential attacks. This is crucial in many cases, especially with open-source tools.\n\nOn the software producer's side, it happens a lot that they are not fully aware of all the third parties used inside the project, and in turn, they can not track vulnerabilities in the system that could pose a threat. Cases like the [Log4Shell](https://snyk.io/blog/log4shell-in-a-nutshell/) vulnerability are an example of a component (in this case, a logging library) that many producers never bothered to check because it isn't a direct software dependency, but rather a transitive one that is depended upon by other components.\n\nSBOM can also be useful in licensing and legal issues with some formats. SPDX (Software Package Data Exchange) standard for SBOM identifies the licenses of the used components and can be checked for compliance later.\n\nNext, we view the different standards and formats for SBOMs and the specifications of each one. See them [here](/blog/2022/07/24/sbom-formats)\n",
            "content/en/blog/news/2022-sbom-formats-comparison.md": "---\ntitle: \"Software Bill Of Materials Formats\"\ndate: 2022-07-24\ndraft: false\nweight: 200\ndescription: >\n  Previously, we discussed the main concepts of Software Bill Of Materials and their use cases. Now we talk about the different formats and standards of generating them.\ncategories: [blog]\nkeywords: [Community, GSoC, 2022, supply chain security, BOM, SBOM]\nslug: \"sbom-formats\"\naliases: []\nauthor: Osama Magdy\n---\n\n## Prerequisite ##\n\nIf you don't understand what is Software Bill of Materials (SBOM), please read this [blog post](/blog/2022/07/24/intro-to-sbom) first.\n\n## Different SBOM formats comparison ##\n\nThe National Telecommunications and Information Administration (NTIA) in the U.S. defined [minimum requirements for SBOM formats](https://www.ntia.doc.gov/report/2021/minimum-elements-software-bill-materials-sbom):\n\n* Identifying the supplier of the software component.\n* Identifying the details about the version of the component.\n* Including unique identifiers for the component like cryptographic hash functions.\n* Including the relationships between all dependencies inside the component.\n* Including a timestamp of when and by whom the SBOM report was created or last modified\n\n In this section, we discuss different kinds and formats for SBOM standards and make a brief comparison between them. Three commonly used standards achieved the NTIA minimum requirements for SBOM generation and each one results in a different final SBOM document.\n\n### 1 - The Software Package Data Exchange (SPDX) ##\n\n***History:***\n\n SPDX is an open-source machine-readable format adopted by the Linux Foundation as an industry standard. The specifications are implemented as a file format that identifies the software components within a larger piece of computer software and fulfilling the requirements of NTIA. The SPDX project started in 2010 and was initially dedicated to solving the issues around open source licensing compliance. It evolved over the years to adhere supply chain security challenges and has seen extensive uptake by companies and projects in the software industry. Companies like Hitachi, Fujitsu, and Toshiba contributed to furthering the standard in the [SPDX v2.2.2 specification release](https://spdx.github.io/spdx-spec/).\n\n***Specs:***\n\n The [SPDX specification](https://spdx.github.io/spdx-spec/) describes the necessary sections and fields to produce a valid SPDX document. Note that the only mandatory field in all spdx documents is the \"Document Creation Information\" section. The presence of other sections (and subset fields of each section) is dependent on your use case and the information you want to provide.\n\n![spdx-specification](/images/sbom-guide/spdx-2.2-document.png)\n\nFig 1: <https://spdx.dev/wp-content/uploads/sites/41/2020/05/spdx-2.2-document.png>\n\n* **Document Creation Information** \u2013 Denotes who created the document, how it was created, and other useful information related to its creation. It provides the necessary information for forward and backward compatibility for processing tools (version numbers, license for data, authors, etc. )\n* **Package Information** \u2013 This section provides information about the \u201cpackage\u201d. A package can be one or more files. These files could be one or more files of any type including but not limited to source, documents, binaries, containers, and so forth. The package information contains the originator, where it was sourced from, a download URL, a checksum, and so forth. It also contains summary licensing for the package.\n* **File Information** \u2013  This is information about a specific file. It can contain the file copyrights found in the file (if any), the license of the file, a checksum for the file, file contributors, and so forth.\n* **Snippet Information** \u2013 Snippets can optionally be used when a file is known to have some content that has been included from another source. They are useful for denoting when part of a file may have been created under another licenseSnippet information can be used to define licensing for ranges within files.\n* **Other Licensing Information** \u2013 Other licensing information provides a way to describe licenses that are not on the [SPDX License List](https://spdx.org/licenses/). You can create a local (to the SPDX document) identifier for the license and place the license text itself in the document as a well and then reference it for files just like you would a license from the license list.\n* **Relationships** \u2013  Relationships were introduced in the 2.0 specification and are a very powerful way of expressing how SPDX documents relate to one another. See an example of how the SPDX represents those [here](https://spdx.dev/resources/use/#:~:text=Packages%20and%20Relationships).\n* **Annotations** \u2013 Annotations are comments made by people on various entities and elements within the document. For example, someone reviewing the document may make an annotation about a file and its license. Annotations are useful for reviews of SPDX documents and for conveying specific information about the package, file, creation, license, file(s), etc.\n\nIn the [SPDX specification release 2.2.2](https://spdx.github.io/spdx-spec/), additional output formats of JSON, YAML, and XML are supported. A diverse set of examples for SPDX are available on this [github repo](https://github.com/spdx/spdx-examples)\n\nFurther information on the data model and SPDX guide can be found on the [SPDX website](https://spdx.dev/).\n\n---\n\n***Use Cases:***\n\n* SBOM for software components\n* Tracking of intellectual property (licensing, copyright) of software components\n* Listing contents of a software distribution\n* Container contents inventory\n* Associating CPEs with specific packages\n* Identifying provenance of lines of code embedded in files\n\n***Key Features:***\n\n* Documented artifacts can be checked using the provided hash values\n* Rich facilities for intellectual property and licensing information\n* Flexible model able to scale from snippets and files up to packages, containers, and even operating system distributions\n* Ability to add mappings to other package reference systems\n\n### 2 - Software Identification (SWID) Tags ##\n\n***History:***\n\n It is a standard implemented by the National Institute of Standards and Technology (NIST) in the U.S. that was published in 2009, then revised in 2015. They were designed to provide a transparent way for organizations to track the software installed on their managed devices. Standard SWID tags are not generated at the end of certain software creation, instead, they define a lifecycle where a new SWID tag is added to an endpoint with the software installation process and is deleted with the uninstall process. When this lifecycle is followed, the presence of a given SWID Tag corresponds directly to the presence of the software product that the Tag describes.\n\n ![swid-tag-lifecycle](/images/sbom-guide/swid-tags-lifecycle.png)\n\n Fig 2: <https://d3i71xaburhd42.cloudfront.net/496312d64dc77b223803a4ee1b717be8e528e86f/16-Figure1-1.png>\n\nNote that the present SWID tags change depending on the current state of the software.\n\n***Specs:***\n\nThe [NISTIR 8060](https://nvlpubs.nist.gov/nistpubs/ir/2016/NIST.IR.8060.pdf) Guideline identifies the standards of SWID tags and the components of each tag. We here go over the necessary types mentioned in the figure above. To capture the lifecycle of a software component, the SWID specification defines four types of SWID tags: primary, patch, corpus, and supplemental\n\n* **Corpus Tag** \u2013  A SWID Tag that identifies and describes an installable software product in its pre-installation state. A corpus tag can be used to represent metadata about an\n  installation package or installer for a software product, a software update, or a patch.\n* **Primary Tag** \u2013  A SWID Tag that identifies and describes a software product installed\n  on a computing device.\n* **Supplemental Tag** \u2013 A SWID Tag that allows additional information to be associated with any referenced SWID tag. This helps to ensure that SWID Primary and Patch Tags\n  provided by a software provider are not modified by software management tools while\n  allowing these tools to provide their software metadata.\n* **Patch Information** \u2013 A SWID Tag that identifies and describes an installed patch that has made incremental changes to a software product installed on a computing device.\n\n**Note** that Corpus, primary, and patch tags have similar functions in that they describe the existence and/or presence of different types of software (e.g., software installers, software installations, software patches), and, potentially, different states of software products. In contrast, supplemental tags furnish additional information not contained in the corpus, primary, or patch tags.\n\nSWID tags are mainly implemented in XML format while JSON format is under development. Some tag examples can be found [here](https://www.adelton.com/docs/security/minting-collecting-swid-tags)\n\n***Use Cases:***\n\n* SBOM for software components\n* Continuous monitoring of installed software inventory\n* Identifying vulnerable software on endpoints\n* Ensuring that installed software is properly patched\n* Preventing installation of unauthorized or corrupted software\n* Preventing the execution of corrupted software\n* Managing software entitlements\n\n***Key Features:***\n\n* Provides stable software identifiers created at build time\n* Standardizes software information that can be exchanged between software providers and consumers as part of the software installation process\n* Enables the correlation of information related to software including related patches or updates, configuration settings, security policies, and vulnerability and threat advisories.\n\n### 3 - CycloneDX ##\n\n***History:***\n\n CycloneDX is a lightweight SBOM standard designed for use in application security context and supply chain component analysis as it was originally intended to identify vulnerabilities and supply chain component analysis. It also supports checking for licensing compliance. The CycloneDX project was initiated in 2017 in the [OWASP](https://owasp.org/)community, then it became a dedicated open source project and included other working groups from [Sonatype](https://www.sonatype.com/)and [ServiceNow](https://www.servicenow.com/). Supported file formats for CycloneDX are (XML, JSON, and protocol buffers)\n\n***Specs:***\n\n CycloneDX provides schemas for both XML and JSON, defining a format for describing simple and complex compositions of software components. It's designed to be flexible, and easily adaptable, with implementations for popular build systems. The specification encourages the use of ecosystem-native naming conventions and supports SPDX license IDs and expressions, pedigree, and external references. It also natively supports the Package URL specification and correlating components to CPEs. The CycloneDX object model is defined in the figure.\n\n<p align=\"center\" width=\"100%\">\n    <img src=\"/images/sbom-guide/cyclonedx-high-level-object-model-small.svg\" width=\"480\" height=\"320\">\n</p>\n<br/>\n<br/>\n\nFig 3: <https://cyclonedx.org/theme/assets/images/high-level-object-model-small.svg>\n\n* **BOM Metadata Information** \u2013 BOM metadata includes the supplier, manufacturer, and the target component for which the BOM describes. It also includes the tools used to create the BOM, and license information for the BOM document itself.\n* **Components Information** \u2013 Components describe the complete inventory of first-party and third-party components. Component identity can be represented as:\n  -- Coordinates (group, name, version)\n  -- Package URL\n  -- Common Platform Enumerations (CPE)\n  -- SWID\n  -- Cryptographic hash functions (SHA-1, SHA-2, SHA-3, BLAKE2b, BLAKE3)\n* **Services Information** \u2013 Services describe external APIs that the software may call. Services describe endpoint URIs, authentication requirements, and trust boundary traversals. The flow of data between software and services can also be described including the data classifications and the flow direction of each type.\n* **Dependency Relationships** \u2013 CycloneDX provides the ability to describe components and their dependency on other components. The dependency graph is capable of representing both direct and transitive relationships. Components that depend on services can be represented in the dependency graph and services that depend on other services can be represented as well.\n* **Compositions** \u2013 Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The aggregate of each composition can be described as complete, incomplete, incomplete first-party only, incomplete third-party only, or unknown.\n* **Vulnerabilities** \u2013  Known vulnerabilities inherited from the use of third-party and open source software and the exploitability of the vulnerabilities can be communicated with CycloneDX. Previously unknown vulnerabilities affecting both components and services may also be disclosed using CycloneDX, making it ideal for both VEX and security advisory use cases.\n* **Extensions** \u2013 Multiple extension points exist throughout the CycloneDX object model allowing fast prototyping of new capabilities and support for specialized and future use cases. The CycloneDX project maintains extensions that are beneficial to the larger community. The project encourages community participation and the development of extensions that target specialized or industry-specific use cases.\n\n***Use Cases:***\n\n* Inventory of all software components.\n* Identifying known vulnerabilities.\n* Integrity verification using the hash functions.\n* Authenticity of the software components using a digital signature.\n* License compliance\n* Provenance\n\n## Generate SBOMs manually? definitely not ##\n\nSBOMs are frequently updated with each release of the software, so we need tools and packages to be integrated with our ci/cd pipeline. We talk about this [here](/blog/2022/07/24/sbom-tools)\n",
            "content/en/blog/news/2022-sbom-generation-tools.md": "---\ntitle: \"Software Bill Of Materials generation tools\"\ndate: 2022-07-24\ndraft: false\nweight: 100\ndescription: >\n  In the third blog post, we get to realize the actual implementation of Software Bill Of Materials (SBOM) generation through different tools and packages.\ncategories: [blog]\nkeywords: [Community, GSoC, 2022, supply chain security, BOM, SBOM]\nslug: \"sbom-tools\"\naliases: []\nauthor: Osama Magdy\n---\n\n\n## Prerequisite ##\n\nBefore you read this, you have to understand [what are SBOMs](/blog/2022/07/24/intro-to-sbom) and [what are different formats of SBOMs](/blog/2022/07/24/sbom-formats)\n\n## Different SBOM generation tools comparison ##\n\nIf you got this far, you already realize the importance of SBOM generation, and also it should meet certain requirements to achieve its purpose. Due to various requirements depending on what standard you're following, there has to be a way to automatically generate different output formats for different standards. Also, it has to be suited for ci/cd solutions to keep up with the increasing number of releases for each organization.\n\nNote: Here we're only considering open source tools\n\n### 1 - Anchore Syft ##\n\n***Introduction:***\n\n[Anchore](https://anchore.com/)is a platform that implements sbom-powered supply chain security solutions for developers and enterprises. For generating SBOMs, a CLI tool and library named [Syft](https://github.com/anchore/syft) was developed by Anchore that could be injected into your ci/cd pipeline to generate SBOMs from container images and filesystems at each step.\n\n***Integration and Support:***\n\nSyft is supported on Linux, Mac, and Windows and it can run as a docker container which makes it a great suit for CI systems. Other than the 3 SBOM standards, Syft can generate its JSON standard format to be input for other Anchore tools like [Grype](https://github.com/anchore/grype/) which is a vulnerability scanner for container images and filesystems. It supports projects based on the following package managers:\n\n* Alpine (apk)\n* C (conan)\n* C++ (conan)\n* Dart (pubs)\n* Debian (dpkg)\n* Dotnet (deps.json)\n* Objective-C (cocoapods)\n* Go (go.mod, Go binaries)\n* Haskell (cabal, stack)\n* Java (jar, ear, war, par, sar)\n* JavaScript (npm, yarn)\n* Jenkins Plugins (jpi, hpi)\n* PHP (composer)\n* Python (wheel, egg, poetry, requirements.txt)\n* Red Hat (rpm)\n* Ruby (gem)\n* Rust (cargo.lock)\n* Swift (cocoapods)\n\n***Features and Specs:***\n\n* Easy to use\n  * Syft can generate a simple basic sbom by just running `syft <image>` this will only include the softwares included in the image's final layer. Or `syft <image> --scope all-layers` for more verbose sbom to include all image layers\n* Different formats support the ability to convert between them.\n  * Syft JSON\n  * SPDX 2.2 JSON\n  * SPDX 2.2 tag-value\n  * CycloneDX 1.4 JSON\n  * CycloneDX 1.4 XML\n* Cryptographically sign and attest SBOMs\n  * Syft uses [in-toto attestations](https://github.com/in-toto/attestation) with `syft attest` command and the digital signature management is integrated with sigstore cosign. You can view more [here](https://anchore.com/sbom/creating-sbom-attestations-using-syft-and-sigstore/).\n* Support a variety of sources to generate SBOMs from\n  * OCI and docker image formats `syft <image>`\n  * Container images archives `syft path/to/image.tar`\n  * Filesystems and local directories `syft path/to/dir`\n\nFor more resources about Syft capabilities refer to the [source repo](https://github.com/anchore/syft) and [official documentation](https://anchore.com/sbom/how-to-generate-an-sbom-with-free-open-source-tools/)\n\n### 2- Opensbom's Spdx-Sbom-Generator ##\n\n***Introduction:***\n\n[Opensbom-Generator](https://github.com/opensbom-generator) is an open source project initiated by the Linux Foundation SPDX workgroup to generate SBOMs using CLI tools. Currently, they support the standard spdx 2.2 formats and JSON with their [spdx-sbom-generator](https://github.com/opensbom-generator/spdx-sbom-generator) tool based on golang. It can only be used to generate SBOMs from a repository containing package files (no container images or archives support yet). They aim to provide SBOM generation support in ci/cd solutions.\n\n***Integration and Support:***\n\nYou can download the binaries and install the tool on your system. The available binaries to install are for Linux, Windows, and macOS and it can also be used as a docker container from this spdx [repo](https://hub.docker.com/r/spdx/spdx-sbom-generator). It can detect which package managers or build systems are being used by the software. It is supporting the following package managers:\n\n`GoMod (go), Cargo (Rust), Composer (PHP), DotNet (.NET), Maven (Java), NPM (Node.js), Yarn (Node.js), PIP (Python), Pipenv (Python), Gems (Ruby), Swift Package Manager (Swift)`\n\n***Features and Specs:***\n\n* CLI easy to use and simple interface\n* Automatic detection of the package manager\n\n### 3- Kubernetes BOM ##\n\n***Introduction:***\n\n[BOM](https://github.com/kubernetes-sigs/bom) is a general-purpose CLI tool developed by [kubernetes-sigs](https://github.com/kubernetes-sigs) (Special Interest Groups) that can generate SBOMs from directories, container images, single files, and other sources. The utility has a built-in license classifier that can check for license compliance of your packages with around 400+ licenses in the [SPDX catalog.](https://spdx.org/licenses/)\n\n***Integration and Support:***\n\nBOM is supported as a Golang package that can be installed on any system having to go with `go install sigs.k8s.io/bom/cmd/bom` this adds the support for Linux, Mac, and Windows. It is compatible with creating SBOMs from files, images, and docker archives (images in tarballs). It also supports pulling images from remote container registries for analysis. BOM is mainly generating SBOMs in SPDX formats.\n\n***Features and Specs:***\n\n* CLI usage to support CI/CD solutions\n* Golang dependency analysis\n* Full `.gitignore` support when scanning git repositories\n* Ability to check for license compliance with SPDX catalog\n* Support for different sources to generate sboms\n* Other than the command `bom generate`, it uses `bom document` to work with already present SPDX documents to outline and draw a structure for them\n* It doesn't necessarily require a whole project directory but it can specify a single file to analyze with the `-f path/to/file` flag and it can have a collection of those files to be analyzed together.\n* It also supports the namespacing separation between SBOM documents using the `-n <URI>` flag to isolate each document from the other\n\n### 4- Microsoft SBOM tool ##\n\n***Introduction:***\n\nRecently, Microsoft open-sourced their SBOM generation tool which is described as a general purpose, enterprise-proven, build-time SBOM generator. They have been developing the tool internally since 2019 and tuning its feature according to their needs and providing other companies with the solution. What is new is that Microsoft has chosen to merge efforts with the Linux Foundation's work and use [Software Package Data Exchange (SPDX)](https://spdx.dev/) for all SBOMs generated, and to do this for all software produced. It has a promising number of features like including other SBOM documents recursively to provide its users with the ability to have a full dependency tree that goes to the origin of every package.\n\n***Integration and Support:***\n\nMicrosoft SBOM is supported on Linux, macOS, and Windows. It can be easily integrated into and auto-detects the following package managers\n\n`NPM, NuGet, PyPI, CocoaPods, Maven, Golang, Rust Crates, RubyGems, Linux packages within containers, Gradle, Ivy, GitHub public repositories`\n\nand Microsoft is adding more detectors to improve deeper integration with the community. The tool is currently committed to generating the SPDX 2.2.1 format for its users and is still in development to include all optional fields before integrating with other formats.\n\n***Features and Specs:***\n\n* Enterprise ready and highly scalable as already used at scale by Microsoft\n* Adding build provenance information to the SBOM\n* Auto-detection of the underlying package manager\n* Supports namespacing separation between SBOM documents with the `-nsb` flag\n* Validating SBOMs at release using hashes and digital signatures\n  \n  ![img](/images/sbom-guide/microsoft-sbom.png)\n\n  Fig 1: <https://devblogs.microsoft.com/engineering-at-microsoft/wp-content/uploads/sites/72/2021/10/adiglio-figure-1.png>\n\nFor more information about the tool visit the GitHub [repo](https://github.com/microsoft/sbom-tool)and refer to the documentation [here](https://github.com/microsoft/sbom-tool/tree/main/docs)\n\n### 5- Tern ##\n\n***Introduction:***\n\n[Tern](https://github.com/tern-tools/tern) is a VMware-originated open source inspection tool used to generate SBOMs following standard formats. It gathers metadata for the packages installed in container images and Dockerfiles. Tern starts to analyze the contents of a container (through the image itself or the Dockerfile), layer by layer, without requiring the user to have in-depth technical knowledge about how the container was built.\n\n***Integration and Support:***\n\nTern itself is available as a [Github Action](https://github.com/marketplace/actions/tern-action) but it is mainly supported to be installed as a CLI tool on Linux. With Linux installation, Tern is built with python so it requires python, pip, and jq installed mainly (more about installation [here](https://github.com/tern-tools/tern#getting-started)). Some features like analyzing Dockerfiles and the [lock function](https://automatecompliance.org/news/2020/04/23/tern-2-0-0-now-available/) require Docker installation in your Linux. Moreover, Tern can run as a docker container which makes it easy to use in ci systems and can be used as a workaround to run on other operating systems like Windows, and macOS. Also, this helps to deploy Tern as a Kubernetes job with a host mount to retrieve generated SBOMs.\n\nFor now, Tern only supports container images built using Docker using [image manifest version 2, schema 2](https://docs.docker.com/registry/spec/manifest-v2-2/) and it will support Docker images and it is aimed to support other images that follow the OCI standards in the future.\n\nFor license compliance, Term doesn't have its file-level license analyzer. So, it allows you to extend its analysis using an external CLI tool or Python packages as extensions. An example is [Scancode](https://github.com/tern-tools/tern#scancode) which is a CLI tool used for license compliance along with other supported integrations like [cve-bin-tool](https://github.com/tern-tools/tern#cve-bin-tool) for vulnerability scanning.\n\nTern supports generating reports with multiple formats:\n\n* Human Readable Simple format\n* JSON format\n* HTML format\n* YAML format\n* SPDX tag-value Format\n* SPDX JSON Format\n* CycloneDX JSON Format\n\n***Features and Specs:***\n\n* CLI is easy to use and can be installed as a docker container which makes it suitable for CI/CD solutions\n* Multiple supported output formats which are readable for both humans and machines\n* Ability to generate SBOMs following both SPDX and CycloneDX formats\n* Support for Dockerfile locking to create more reproducible Docker images which is a unique feature supported by Tern only, view more about it [here](https://automatecompliance.org/news/2020/04/23/tern-2-0-0-now-available/).\n* The concept of extensions/plugins is only supported by Tern between all the previously mentioned tools. This is a great feature that is proven to extend its capabilities in the coming future and open for creativity from the open source community (this was proven before to increase the functionality and popularity of other tools like Jenkins).\n\nFor more information about the tool visit the GitHub [repo](https://github.com/tern-tools/tern) and refer to the documentation [here](https://github.com/tern-tools/tern/tree/main/docs).\n",
            "content/en/blog/news/2022-survey.md": "---\ntitle: \"Jenkins X Survey\"\ndate: 2022-01-21\ndraft: false\ndescription: Please help us know your experience with Jenkins X and answer the survey.\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"survey-1-2022\"\naliases: []\nauthor: Christoffer Vig\n---\n\nWe have made a short survey where we try to gain insight into how people experience Jenkins X. This is meant to be used as guidelines going forward so we can be more focused on what areas to improve.\n\nAll contributions are welcome, if you are just browsing or have used it for years, we want to know you all!\n\nWe have extended the survey period and it will now be open untill Tuesday February 11 2022 midnight UTC. All submissions are anonymous and the results will be published. So don't hesitate, fill in the [Jenkins X survey](https://forms.office.com/r/mWD6Ruzu8C) today\n",
            "content/en/blog/news/2023-foreign-aliases.md": "---\ntitle: \"Foreign aliases\"\ndate: 2023-02-09T00:00:00-00:00\ndraft: false\ndescription: >\n  Handling of OWNERS and OWNERS_ALIASES for many repositories \ncategories: [blog]\nkeywords: [Jenkins X,Community,2023]\nslug: \"foreign-aliases\"\naliases: []\nauthor: M\u00e5rten Svantesson\n---\n\n## Background\n\nIn an organisation with many repositories and developers that are frequently shifting the maintenance of OWNERS and \nOWNERS_ALIASES files can be tedious. In the passing year a couple of functionalities has been added to help \nwith this.\n\n## Foreign aliases\n\nTo avoid maintaining the OWNERS_ALIASES file in many repositories you can now refer to the OWNERS_ALIASES file in \nanother repository. In the Jenkins X project we have the main OWNERS_ALIASES file in the \n[jx-community](https://github.com/jenkins-x/jx-community) repository. So in the [jx](http://github.com/jenkins-x/jx) repository \nthe OWNERS_ALIASES file only looks like this:\n\n```yaml\nforeignAliases:\n- name: jx-community\n``` \n\nThe organisation defaults to be the same as for the repository, but can specify as well. So in the \n[jx-project](https://github.com/jenkins-x-plugins/jx-project) repository the OWNERS_ALIASES file looks like this:\n\n```yaml\nforeignAliases:\n- name: jx-community\n  org: jenkins-x\n```\n\nUsing the filed `ref` you can also specify a branch or tag to use instead of the default one of the repository.\n\n## OWNERS and OWNERS_ALIASES in new repositories\n\nWhen creating or importing a repository using `jx project` the default content of OWNERS and OWNERS_ALIASES isn't \nthat useful since only the current user are put in the files.\n\nIf you [create your own quickstarts](https://jenkins-x.io/v3/about/extending/#quickstarts) you place the OWNERS and \n/ or OWNERS_ALIASES files with the content of your liking in those.\n\nA recent new functionality is that you can put OWNERS and / or OWNERS_ALIASES files in the `extensions` directory of \nyour cluster repository. These files will then be used as the default content of the files in new repositories. \n",
            "content/en/blog/news/2023-gsoc.md": "---\ntitle: \"Project ideas for Google Summer of Code 2023 \u2600\ufe0f\"\ndate: 2023-02-06\ndraft: false\ndescription: >\n  Project ideas for GSoC 2023!\ncategories: [blog]\nkeywords: [Community, 2023]\nslug: \"GSoC2023-ideas\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\nWe have put together some project ideas as part of our application to participate in the Google Summer of Code 2023 program.\n\n### 1. CD events integration with Jenkins X\n\n##### Description\n\nThe cdEvents project standardises the way systems talk to each other, which enables Interoperability between systems so they speak a common language through the cdEvents spec in the event. Creating a capability in Jenkins X that can receive and sent a cdEvent would benefit the project and the DevOps ecosystem in general, by stopping glue code used to integrate systems and power innovation by letting end users swap out tools with no effort.\n\n##### Expected Outcomes\n\n- Ability to receive cdEvents\n- Ability to parse cdEvents so Jenkins X understands them\n- Ability to send cdEvents\n\n##### Recommended skills\n\nJenkins X, Kubernetes, golang, cdEvents\n\n##### Mentors\n\n- [Brad McCoy](https://github.com/bradmccoydev)\n\n##### Resources\n\n- https://cloudevents.io/\n- https://www.youtube.com/watch?v=yg7RuDWHwV8\n- https://www.jenkins.io/projects/gsoc/2021/projects/cloudevents-plugin/\n- https://cdevents.dev/\n- https://github.com/jenkins-x/lighthouse\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### 2. Implement drift detection (gitops)\n\n##### Description\n\nJenkins X only applies changes to cluster when contents of the gitops repository changes as part of a git pull request or git commit. This does not satisfy one of the requirements of the gitops model where we need continuous reconciliation. It would be nice to detect drift between the current state (kubernetes) and the desired state (git) and apply only those changes. This has the side effect of making the boot job faster.\n\nAlso, our bootjob is made up of a makefile which calls cli commands written in golang, instead it would be desirable to move to a controller based approach similar to other tools in the kubernetes ecosystem.\n\n##### Expected Outcomes\n\n- Drift detection in Jenkins X\n- Configurable interval when Jenkins X will do a drift detection and apply the changes\n- Updated documentation\n\n##### Recommended skills\n\nKubernetes, golang, Jenkins X, kubebuiler, basic understanding of gitops.\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Rajat Gupta](https://github.com/rajatgupta24)\n\n##### Resources\n\n- https://opengitops.dev/\n- https://book.kubebuilder.io/\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### 3. RBAC (Role Based Access Control) in Jenkins X UI\n\n##### Description\n\nIn the last GSoC project, we created a modern UI which has more functionalities than the older viewer UI.\nHowever, as we added the ability to start/stop pipelines from the new UI, this opened up an issue around access.\nUsers of Jenkins X would like to restrict who can start/stop pipelines from the UI.\n\nAs we add more features to the UI involving repositories, this would also require ability to restrict access using RBAC (Role Based Access Control).\nIn addition, an audit trail would also help the users keep track of activities in the UI.\n\n##### Expected Outcomes\n\n- Fully functional Jenkins X Dashboard running in the kubernetes cluster\n- Drop in replacement for existing read only UI\n- Ability to restrict access in the UI\n- Audit trail of who took what action in the UI\n- Updated documentation\n\n##### Recommended skills\n\ngolang, basic understanding of sveltejs and sveltekit (or any modern js framework like react, vue. angular or solid) and kubernetes\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Rajat Gupta](https://github.com/rajatgupta24)\n\n##### Resources\n\n- https://youtu.be/AdNJ3fydeao\n- https://svelte.dev/\n- https://kit.svelte.dev/\n- https://tailwindcss.com/\n- https://go.dev/tour/welcome/1\n- https://casbin.org/\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nMedium\n\n### 4. Simplifying Jenkins X pipeline syntax\n\n##### Description\n\nJenkins X uses the raw tekton pipeline syntax for pipelines.\nThe issue with this syntax is that it's too verbose.\nThe verbosity makes sense for low level pipeline building libraries like tektoncd, but for an user facing tool like Jenkins X, it makes the\npipeline files too big for no apparent reason.\nWe want to investigate a new syntax which will set the boilerplate so that the syntax is recognized by tekon, but is still user friendly like gitlab/github CI.\n\n##### Expected outcomes\n\n- Simpler and easier to understand pipeline syntax (for developers)\n- More verbose pipeline syntax for power users (if there is a need)\n- Updated documentation\n\n##### Recommended skills\n\nGolang, kubernetes, tekton, cue\n\n##### Resources\n\n- https://github.com/cue-lang/cue\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Rajat Gupta](https://github.com/rajatgupta24)\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nMedium\n\n### 5. Multi-tenancy in Jenkins X\n\n##### Description\n\nInstalling multiple versions of Jenkins X in a single kubernetes cluster is not supported. There are both architectural and scalability issues around it. This would be beneficial for small teams within organizations who want to own their entire CI/CD platform instead of relying on a central release management team which can lead to more productive teams.\n\n##### Expected outcomes\n\n- A multi-tenant enabled Jenkins X install (jenkins X in different namespaces or a central jx install controlling pipelines running for different tenants)\n- Better scaling and security model for Jenkins X\n- Updated documentation\n\n##### Recommended skills\n\nGolang, kubernetes, event driven architecture\n\n##### Resources\n\n- https://github.com/jenkins-x/enhancements/pull/46\n\n##### Mentors\n\n- [Ankit D Mohapatra](https://github.com/ankitm123)\n- [Rajat Gupta](https://github.com/rajatgupta24)\n\n##### Expected Size of project\n\n350 hours\n\n##### Difficulty rating\n\nHard\n\n### Next Steps\n\nIf Jenkins X gets selected, we will create a followup blog with additional details.\n",
            "content/en/blog/news/2023-kpt-live-apply.md": "---\ntitle: \"Reconcile with kpt live apply\"\ndate: 2023-03-09T00:00:00-00:00\ndraft: false\ndescription: >\n  Using `kpt live apply` to apply manifests in your cluster repository to your cluster \ncategories: [blog]\nkeywords: [Jenkins X,Community,2023]\nslug: \"kpt-live-apply\"\naliases: []\nauthor: M\u00e5rten Svantesson\n---\n\nSince the dawn of Jenkins X 3 the default last step of reconciling the state of the files in your cluster repository to \nyour cluster has been to execute `kubectl apply`. You can find more details about this \n[here](https://jenkins-x.io/v3/about/how-it-works/#boot-job).\n\nThere are some drawbacks with `kubectl apply` though. The one that made me start looking for alternatives was that if \nyou remove a resource from your cluster repository it may not be removed from your cluster. The way deletion works with \n`kubectl apply` is that it is handed the option `--prune` which will remove resources that are not in the manifests. \nExcept that it doesn't always work as expected. It will only remove certain kinds of resources \n[defined in kubectl](https://github.com/kubernetes/kubernetes/blob/4e800983fb8da4a5960a58ad9b380484770647d1/staging/src/k8s.io/kubectl/pkg/util/prune/prune.go#L28-L44). \nIn my case I removed an HorizontalPodAutoscaler from my cluster repository, but it wasn't removed from my cluster.\n\nWhen trying to find a solution to this I first tried to override this default list in kubectl of things to prune, but \nthis turned out to be difficult in the general case. I also tried the already existing alternative of using `kapp` to \napply the manifests, but I couldn't get that to work. Looking for other options I settled for `kpt live apply`.\n\n## Configuration\n\n{{% alert color=\"warning\" %}}\nFor all the functionality described here to work you need to have a cluster that is\n[upgraded](https://jenkins-x.io/v3/admin/setup/upgrades/cluster/) later than January 24th 2023.\n{{% /alert %}}\n\nYou enable the use of `kpt live apply` by adding \n\n```make\nKUBEAPPLY = kpt-apply\n```\n\nto the `Makefile` of your cluster repository anywhere before `include versionStream/src/Makefile.mk`. This works both \nin a dev cluster and in a [remote cluster](https://jenkins-x.io/v3/admin/guides/multi-cluster/multi-cluster/). \n(With the caveat that all bets are off if you have done changes yourself to `versionStream/src/Makefile.mk`.)\n\nAfter you have pushed this you can watch the log of the boot job using `jx admin log` as usual. When `kpt live \napply` has been executed the first time you can optionally add let `kpt live apply --dry-run` be executed for \npull requests, giving a better assurance that the content of a pull request will apply nicely. But this only work \nproperly for pull requests to the dev cluster, since it's in the dev cluster the pull request pipeline will execute. \nSo in a remote clusters this should not be enabled. That said this functionality can be enabled by adding\n\n```make\nPR_LINT = kpt-apply-dry-run\n```\n\nto the `Makefile` of your cluster repository.\n\n## Waiting for resources to be reconciled\n\nWhile the fact that I can be sure that removed resource actually are gone is the killer feature of `kpt live apply` \nfor me the opposite is true as well. With this I mean that `kpt live apply`(and as a consequence) the boot job won't \nsucceed unless all resources are verified to have been applied. This includes for example that the rollout of new \napplications versions with deployments have succeeded. \n\nThis can be seen as  a problem though: the default is that `kpt live apply` tries for 15 minutes before timing out \nwith an error. But since the boot job is normal k8s job the job controller will create new pods on failure up to \nthe backoff limit, that is set to **4**. This can block the application of subsequent changes to the cluster repo.\n\n## Tagging and release notes\n\nWhen activating `kpt live apply` you will also see that tags are added to the cluster repository upon successful \napplication of changes. These tags can have 3 prefixes:\n\n* `crd` for custom resource definitions\n* `cluster` for cluster wide resources\n* `ns` for namespaced resources (the most common)\n\nFor `ns` tags release notes will also be generated and added to the git provider (for example GitHub). This means \nthat you can see what has changed in your cluster by looking at the releases of the cluster repository.\n\nOne handy use of this is that you can get a notification from GitHub when changes has been successfully deployed by \ngoing to the **Watch** menu for the repo, select **Custom** and check **Releases**. If you get the notification by email or on the\nGitHub site depends on the notification settings for your GitHub account.\n\nThis functionality can be further customized by adding scripts to the `extensions` directory of your cluster repository.\n\n* `crd-reconciled` will be executed after a `crd` tag has been added\n* `cluster-reconciled` will be executed after a `cluster` tag has been added\n* `ns-reconciled` will be executed after a `ns` tag has been added\n\nThe default behaviour is equivalent to adding the following script as `ns-reconciled`:\n\n```bash\n#!/bin/sh\n\njx changelog create --tag-prefix ns-\n```\n\nHere is a somewhat hacky variety that sends out a mail with the release notes similarly to what you can \nsubscribe to for yourself:\n\n```bash\n#!/bin/sh\nset -xe\n\njx changelog create --tag-prefix ns-\n\ntoken=$(kubectl get secret jx-boot -o jsonpath=\"{.data['password']}\" | base64 -d)\nrepourl=$(kubectl get secret jx-boot -o jsonpath=\"{.data['url']}\"    | base64 -d)\nowner=\"$(echo $repourl | cut -d/ -f4)\"\nrepo=\"$(echo $repourl | cut -d/ -f5 | cut -d. -f1)\"\n(\ncat <<EOF\nto: changelog@example.com\nFrom: dev@example.com\nMIME-Version: 1.0\nReturn-Path: <>\nPrecedence: Bulk\nContent-Type: text/html; charset=utf-8\nSubject: Deploy to kubernetes cluster\n\n<html>\n<body>\n<h1>Deploy to kubernetes cluster</h1>\nEOF\ncurl -s  -H \"Authorization: Bearer $token\" https://api.github.com/graphql -X POST -d '{\"query\":\"query { repository(owner:\\\"'$owner'\\\", name:\\\"'$repo'\\\") { release(tagName: \\\"ns-'${TS}'\\\") { descriptionHTML }}}\"}' | yq .data.repository.release.descriptionHTML\necho \"</body></html>\"\n) | sendmail -t -S smtp.example.com\n```\n\nTo adapt for your own use, the minimal changes would be to find and replace the smtp server and mail addresses now \nadded for the domain **example.com**. Don't forget to make the script executable with `chmod +x ns-reconciled`.",
            "content/en/blog/news/2023-propagate-changelogs.md": "---\ntitle: \"Improve your changelogs\"\ndate: 2023-05-24T00:00:00-00:00\ndraft: false\ndescription: Propagation of changelogs through jx promote and jx updatebot \ncategories: [blog]\nkeywords: [Jenkins X,Community,2023]\nslug: \"propagate-changelogs\"\naliases: []\nauthor: M\u00e5rten Svantesson\n---\n\n## Background\n\nA standard part of the Jenkins X pipelines since a long time is the execution of `jx changelog create` that takes the\ncommit messages between the release currently being created and the previous one and creates a change log from these.\nThe change log is then stored as a release note in GitHub or other git provider.\n\nDuring the last year some improvements have landed in various Jenkins X components to improve the changelogs and \ntheir usefulness. So I'll take this opportunity to describe these improvements and also in general give hints to how \nto get useful changelogs. \n\n## Overview of major improvements\n\nChangelogs haven't been very informative with regard to upgrades, ie those applied with `jx promote` or `jx \nupdatebot`. One example of this is [the release notes of jx](https://github.com/jenkins-x/jx/releases) after the \nsplit out of most functionality to plugins. Lately these have improved due to new functionality to propagate \nchangelogs via pull requests.\n\nOne place where changelogs have been completely lacking is in cluster repositories. But using the functionality for \npropagation of changelogs and some changes in jx boot job you can now a get a changelog for every successful \napplication of changes in a cluster.\n\n## Example\n\nAn example of what this functionality achieves can be seen in a release of jx:\n\nhttps://github.com/jenkins-x/jx/releases/tag/v3.10.81\n\nIf you scroll past the boilerplate installation instructions you first see the changelog of jx itself generated \nfrom commit messages: https://github.com/jenkins-x/jx/compare/v3.10.80...v3.10.81\n\nThen there is a separator followed by the changelog of jx-gitops. If you look in the commit messages referred to above\nyou will see a link to the pull request on jx for this upgrade: https://github.com/jenkins-x/jx/pull/8564. As you can\nsee this pull request includes the changelog for version 0.14.8 of jx-gitops as generated by `jx changelog create`.\n\nEssentially what happens is that `jx changelog create` apart from storing the release information of jx-gitops also stores it \nin a file. This file is then put in the pull request on jx by `jx updatebot`. Finally `jx changelog create` looks \nfor changelogs in the pull requests referred to in the merge commit.\n\n## How to write commit messages\n\nTo get a good changelog the first requisite is to write good commit messages. `jx changelog create` expects commit \nmessages to adhere to the [Conventional commits](https://www.conventionalcommits.org/) standard.\nIt is the first line of each commit message that is used, with a couple of exceptions I'll describe below. \n\nWhen following this standard the first line should adhere to this format:\n\n `<type>[optional scope]: <description>`\n\nWhile `jx changelog create` can handle any type some will be expanded for a better looking changelog:\n\n- `feat`: New Features\n- `fix`: Bug Fixes\n- `perf`: Performance Improvements\n- `refactor`: Code Refactoring\n- `docs`: Documentation\n- `test`: Tests\n- `revert`: Reverts\n- `style`: Styles\n\nSince the description is used verbatim in the changelog it should be meaningful to the audience of the changelog. Is \nfor example `fixed typo` meaningful? Maybe it is better to write what you try to achieve. While doing this it is \ngood to know that duplicate descriptions are ignored by changelog. So if you add the same description again when \ndoing a fix doesn't mean that you get duplicate lines in the changelog.\n\nAn optional scope is prefixed to the description in the changelog.\n\nThe other common part of the commit message that is reflected in the changelog are references to issues. These can \nbe put anywhere in the commit message. These issues are then linked to both for the specific commit and in a \nseparate list of affected issues.\n\nAn example:\n\n```\nfeat: support dependency updates\n\nfixed typo\n\nrelates to #1234\n```\n\nA less common part of a commit message that affects the changelog regards breaking changes. A footer to a commit \nmessage of the format `BREAKING CHANGE: <description>` can be added and this description will be put at the top of \nthe changelog under the heading BREAKING CHANGES. If you add an exclamation mark before the colon in the first line \nwithout the breaking change footer the ordinary description will be put under this heading.\n\nA couple of examples regarding braking changes:\n\n```\nfix: upgraded library foo\n\nBREAKING CHANGE: don't support http anymore\n\n#98765\n```\n\n```\nfix!: removed insecure method fubar\n\nresolves #56789\n```\n\nGood to know is that [`jx release version`](https://github.com/jenkins-x-plugins/jx-release-version) also conforms \nto Conventional Commits so the commit messages also affects which part of the semantic version is increased for a \nrelease.\n\nThere are of course other uses of good commit messages than to generate changelogs. While code itself together with\ncomments should be self-explanatory with regard to what is done and how I often resort to commit messages to \nunderstand why a change was made. I typically use the git blame functionality for this. This is another reason to \nnot use messages only saying something like `fixed typo`, since that typically isn't a useful answer to the question \nof why for a future developer.  \n\nFor more tips regarding writing good commit messages see for example \n[How to Write Better Git Commit Messages](https://www.freecodecamp.org/news/how-to-write-better-git-commit-messages/).\n\n## Manually edit changelog\n\nNote that since changelogs for dependencies are propagated through pull requests you can edit the changelog for an \napplication manually in the pull request before it is merged.\n\n## Configuration\n\nSome of the features described above work out-of-the-box while others require some tweaking.\n\n### Changelog for cluster repository\n\nApart from the other advantages of switching from `kubectl apply` to `kpt live apply` for reconciliation of cluster \nrepository with the cluster you also get a changelog generated for each successful reconciliation.\n\nThis changelog also includes a list of upgraded / added / deleted releases and the associated versions.\n\nSee a [previous blogpost](https://jenkins-x.io/blog/2023/03/09/kpt-live-apply/) for more information.\n\n### Reuse pull requests\n\nWith the default settings one pitfall with the propagating the changelog via pull requests is if not all pull \nrequests are merged. Let's say version 1.0.0 of an application is released and pull request with a big changelog is \ncreated for the production namespace. But before it is merged an error is detected and version 1.0.1 is \nreleased and a PR for the version is created which only includes the changelog for the bug fix. When that PR is \nmerged only the changelog for the bug fix ends up in the changelog for the cluster.\n\nTo mitigate this you can enable reuse of pull requests. This means that if a PR for upgrading a dependency already \nexists when executing `jx promote` or `jx updatebot` the commits for that PR are replaced with one for the new \nupgrade. The existing changelog in the PR is kept though and the changelog for the new version is appended. This way \nno changelog is missed. \n\nEnabling reuse of pull requests for `jx promote` is done in `jx-requirements.yaml` by setting `reusePullRequest` to \n`true` for an environment. It can also be done in the same way when configuring environments others ways. See \nhttps://jenkins-x.io/v3/develop/environments/config/ for more details about configuring environments.  \n\nMore information about reuse of pull requests in a future blog post.\n\n### Custom pipelines\n\nIn the pipelines defined in https://github.com/jenkins-x/jx3-pipeline-catalog/ the necessary incantations of `jx \nchangelog`, `jx promote` and `jx updatebot` are made for promoting changelogs. But if you have a custom release \npipeline you might need to do some modifications. In particular `jx changelog create` need to save the changelog to a file. \nThis is done by adding an argument like `--output-markdown=../changelog.md`. To have this changelog added to the PR \nthe option `--add-changelog=../changelog.md` needs to be added to `jx promote` (or `jx updatebot` if applicable).\n\n### Jira as issue tracker\n\nIn the examples of commit messages above the references to issues are to the git provider. This is the default, so \nif you for example are using GitHub as your git provider and also use the issue tracker in GitHub no extra \nconfiguration is needed.\n\nBut there also is support for Jira as issue tracker. If you enable this support you can refer to issues both at the git \nprovider and in Jira.\n\nYou enable Jira support and configure it in the jx-requirements.yaml of the cluster repository. The \n`issueProvider` field is added under `spec.cluster`:\n\n```diff\n@@ -13,5 +13,9 @@ spec:\n     gitKind: github\n     gitName: github\n     gitServer: https://github.com\n+    issueProvider:\n+      jira:\n+        serverUrl: https://myjira.atlassian.net\n+        userName: jirauser@example.com\n     project: \"123456789\"\n     provider: eks\n```\n\nFor security reasons the credentials for the user that will fetch data from Jira is not put there. Instead `jx \nchangelog` expects it in the environment variable `JIRA_API_TOKEN`. The easiest way to supply this environment \nvariable is by adding it to the secret `jx-boot-job-env-vars` in namespace `jx` since the content av this secret are \nexposed as environment variables to all standard build pipelines. If the secret doesn't exist you can create it \nyourself like this: \n\n```bash\n# lets make sure we are in the jx-git-operator namespace\njx ns jx-git-operator\n\nkubectl create secret generic jx-boot-job-env-vars --from-literal=JIRA_API_TOKEN='S!B*d$zDsb'\n```\n\nThe [Terraform module for Jenkins X in EKS](https://github.com/jenkins-x/terraform-aws-eks-jx) also have support for \nadding variables to `jx-boot-job-env-vars`.\n\n### More customizations\n\nIn the [documentations](https://jenkins-x.io/v3/develop/reference/jx/changelog/create/) for `jx changelog create` information about more customisations can be found.\n\n## References\n\n[The enhancement proposal for propagation of changelogs](https://github.com/jenkins-x/enhancements/tree/master/proposals/propagate-changelogs)\n\n",
            "content/en/blog/news/2024-migrating-artifact-registry.md": "---\ntitle: \"Migrate to Google Artifact Registry\"\ndate: 2024-05-06T00:00:00-00:00\ndraft: false\ndescription: Google will shut down container registry  \ncategories: [blog]\nkeywords: [Jenkins X,Community,2024]\nslug: \"migrating-artifact-registry\"\naliases: []\nauthor: M\u00e5rten Svantesson\n---\n\nGoogle has announced that [container registry will be shut down some time after March 18, 2025](https://cloud.google.com/artifact-registry/docs/transition/transition-from-gcr). For GKE clusters created with version 1.12.0 or later of [terraform-google-jx](https://github.com/jenkins-x/terraform-google-jx) it's unlikely that anything needs to be done, but for older clusters you should upgrade your cluster while considering [our advice regarding migration from container registry to artifact registry](https://github.com/jenkins-x/terraform-google-jx#migration-from-container-to-artifact-registry).\n\nIf you are using a Google Service Account to run terraform you need to add the role requirement roles/artifactregistry.admin. See our guide regarding [Google Service Account](https://jenkins-x.io/v3/admin/platforms/google/svc_acct/) for details.\n\n",
            "content/en/blog/news/_index.md": "---\ntitle: \"News About Jenkins X\"\nlinkTitle: \"News\"\nweight: 20\n---\n\n\n",
            "content/en/blog/news/cjxd-202002.md": "---\ntitle: \"CloudBees contributions to Jenkins X - February 2020\"\ndate: 2020-02-26T00:00:00-00:00\ndraft: false\ndescription: >\n  CloudBees contributions to Jenkins X - February 2020\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"cjxd-feb-20\"\naliases: []\nauthor: James Rawlings\n---\n\n<figure>\n<img src=\"/images/logo/cloudbees.png\"/>\n</figure>\n\n2020 is fully underway and Jenkins X is feeling the benefits from a lot of hard work from the tail end of last year.  There is now support on EKS for Jenkins X!  Here are the docs:\n\n- https://jenkins-x.io/docs/getting-started/setup/boot/clouds/amazon/\n\nThey are still being improved so we'd love feedback in the [Slack channel](https://jenkins-x.io/community/#slack) or issues (PRs would be even better ;)) on the [website repository](https://github.com/jenkins-x/jx-docs) to help improve.  By the way a Pull Request on the docs repo results in a preview environment of the website, so you can see your changes and ask for feedback in true Jenkins X form.\n\nEKS support includes full TLS and DNS, Vault and documented required IAM roles. \n\nThis is largely a result of contributions from CloudBees as they work on building out CloudBees Jenkins X Distribution (CJXD).  This distro can come with support from CloudBees but is based on the upstream Jenkins X, there's no separate fork so any code that is needed to support EKS and other Jenkins X features goes into the Jenkins X codebase, for the Jenkins X community to benefit from.\n\nAs well as EKS support last month there were 30 issues and enhancements resolved so there's lots of effort to keep continually improving Jenkins X.  At the bottom of this blog is list of the main issues fixed.  An important fix to call out is [6568](https://github.com/jenkins-x/jx/issues/6568).\n\nLarge ongoing work looks to replace Prow (which handles ChatOps and the communication with GitHub) with Lighthouse, which has wider git server support (including future support for Bitbucket and Gitlab) and a smaller footprint. We hope to have this switch completed in April.\n\nThere will be a monthly blog that will describe the improvements that keep making Jenkins X better so please keep an eye out for these and as always let us know via slack or issues how things can be better.\n\nJames R.\n\n## List of issues fixed in February\n\n[App installation requires Jenkins X with Vault installed](https://github.com/jenkins-x/jx/issues/5597)\n\n[BitBucket Server with boot/gitops/vault gets error for \\No git service found\\\"](https://github.com/jenkins-x/jx/issues/6589)\n\n[bug: jx ui not working with latest cli and boot](https://github.com/jenkins-x/jx/issues/6515)\n\n[bug: overriding `env` variables in buildpacks doesn't work](https://github.com/jenkins-x/jx/issues/6668)\n\n[Change in googleapis/gnostic breaks \\make generate-openapi\\\"](https://github.com/jenkins-x/jx/issues/6679)\n\n[controllerbuild can't list config maps and so can't get git credentials](https://github.com/jenkins-x/jx/issues/6568)\n\n[CreateTestJxHomeDir only creates tmp JX_HOME in case gitAuth.yaml exists](https://github.com/jenkins-x/jx/issues/6577)\n\n[Dev pipeline fails on fresh jx boot install using bitbucketserver](https://github.com/jenkins-x/jx/issues/6617)\n\n[Diagnose and fix sporadic hangs on environment promotes in boot-vault and boot-local versions BDD tests](https://github.com/jenkins-x/jx/issues/5669)\n\n[Document and share development steps required to support Jenkins X on Kubernetes providers](https://github.com/jenkins-x/jx/issues/6503)\n\n[Document full list of IAM permissions needed when using EKS](https://github.com/jenkins-x/jx/issues/4388)\n\n[Duplicated SourceRepository resources](https://github.com/jenkins-x/jx/issues/6545)\n\n[Enhancement: Show ConfigMaps on jx diagnose output](https://github.com/jenkins-x/jx/issues/6415)\n\n[Git Authentication fails on GHE](https://github.com/jenkins-x/jx/issues/6579)\n\n[`jx boot` failing on GHE with latest CLI due to failing GET request](https://github.com/jenkins-x/jx/issues/6551)\n\n[`jx boot` STEP: verify-jenkins-x-environment failing. Returning `401` Unauthorized, Body](https://github.com/jenkins-x/jx/issues/6523)\n\n[jx boot upgrade replaces OWNERS with OWNERS from jenkins-x-boot-config](https://github.com/jenkins-x/jx/issues/6543)\n\n[jx create pullrequest with Gitlab somehow ends up with a \\-/\\\" in URL\"](https://github.com/jenkins-x/jx/issues/6618)\n\n[jx get build log -> error: secrets \\jenkins\\\" not found\"](https://github.com/jenkins-x/jx/issues/6482)\n\n[jx preview fails for repo in bitbucket server](https://github.com/jenkins-x/jx/issues/6419)\n\n[Knowing how many resources exist for CRD's is useful when maintaining cluster, a command to list these counts would be helpful](https://github.com/jenkins-x/jx/issues/6596)\n\n[Maven builders in meta pipeline should mount settings.xml](https://github.com/jenkins-x/jx/issues/6637)\n\n[Not able to boot Jenkins X with local changes](https://github.com/jenkins-x/jx/issues/6685)\n\n[Pass the repo owner into `jx step git credentials --credential-helper`](https://github.com/jenkins-x/jx/issues/6722)\n\n[PipelineResource names can be reused, causing collisions](https://github.com/jenkins-x/jx/issues/6610)\n\n[PipelineRuns rerun by Lighthouse due to Tekton race condition won't be handled by build controller](https://github.com/jenkins-x/jx/issues/6646)\n\n[rename `jx step  create install values` to something more accurate ](https://github.com/jenkins-x/jx/issues/5020)\n\n[REPLACE_ME placeholders in buildpacks using modern syntax aren't replaced](https://github.com/jenkins-x/jx/issues/6698)\n\n[Review command deprecation proposal and generate issues accordingly](https://github.com/jenkins-x/jx/issues/6439)\n\n[Unable to re-run 'jx boot' from the initial boot config directory](https://github.com/jenkins-x/jx/issues/5772)",
            "content/en/blog/news/cjxd-202003.md": "---\ntitle: \"CloudBees contributions to Jenkins X - March 2020\"\ndate: 2020-03-25T00:00:00-00:00\ndraft: false\ndescription: >\n  CloudBees contributions to Jenkins X - March 2020\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"cjxd-march-20\"\naliases: []\nauthor: David Conde\n---\n\n<figure>\n<img src=\"/images/logo/cloudbees.png\"/>\n</figure>\n\nMarch has been a really busy month for us working on Jenkins X, several exciting projects are now well underway. \n\nRecently at office hours we discussed a [proposal to improve how we provision](https://github.com/jenkins-x/enhancements/tree/master/proposals/3) the cloud resources (storage buckets, service accounts & cryptographic keys) that Jenkins X requires.\nThe idea behind this enhancement is that some companies may require the infrastructure to be provisioned by a user (someone in operations perhaps) that requires a different set of permissions than the user that runs `jx boot` to install Jenkins X.\nPreviously this happened when a user ran `jx boot`. But from community feedback we learned that some users would like this process split. \nTo help with this we are in the process of developing Terraform modules that you can use to create the necessary resources. \nWork on this has been moving really quickly and we have been focusing on support for GKE, EKS & AKS.\nWe are really excited to see the awesome contributions from [Heba Elayoty](https://github.com/helayoty) of [Microsoft](https://www.microsoft.com) on adding support for [Azure Kubernetes Service](https://docs.microsoft.com/en-us/azure/aks/) in Jenkins X.\nIf you do not use Terraform and you have another way of provisioning infrastructure don't worry, we'll be providing lots of information in the docs on exactly what you will need to create before booting Jenkins X.\nFor anyone that would like more information or would like to contribute to the Terraform modules you will find the git repository for GKE [here](https://github.com/jenkins-x/terraform-google-jx) and EKS [here](https://github.com/jenkins-x/terraform-aws-eks-jx).   \n\nAnother area that some of the team are working in right now is the implementation of the depreciation policy, PRs are being lined up to remove commands that have been market for [deprecation](https://jenkins-x.io/commands/deprecation/). This will help cut down the code surface area a bit and make Jenkins X a bit easier to maintain. \n\n\nThe [labs team](https://github.com/jenkins-x-labs) has also been extremely busy experimenting with [helm3](https://helm.sh/blog/helm-3-released/) and [helmfile](https://github.com/roboll/helmfile) with a view to using it as a foundation for multi cluster support in Jenkins X.\nWe still have a bit to learn before we start to roll this into Jenkins X. One of the next areas we'll be experimenting with is what the upgrade process from a helm2 environment to a helm3 environment will look like. \nYou can jump over to the new [lab's documentation](https://jenkins-x.io/docs/labs/) for more information on experiments and you can find the lab's issue tracker [here](https://github.com/jenkins-x-labs/issues/issues). \n\n\nWe have also fixed around [60 issues](https://github.com/jenkins-x/jx/issues?q=is%3Aissue+is%3Aclosed+updated%3A2020-03-01..2020-03-25+-label%3Alifecycle%2Frotten+) this month.\nWe are constantly tracking our progress on closing out issues. The graph below shows the number of opened and closed issues on a weekly basis since September and the delta between them.\nThe trend over time clearly shows we are making good progress. \n<img src=\"/images/march-fixes-graph.png\"/>\n\nWe are delighted to announce the March release (Release 8) of the CloudBees Jenkins X Distribution is now available. As always, you can download the latest distribution [here](https://www.cloudbees.com/products/cloudbees-jenkins-x-distribution/download).\n\n",
            "content/en/blog/news/cjxd-202004.md": "---\ntitle: \"CloudBees contributions to Jenkins X - April 2020\"\ndate: 2020-04-29T00:00:00-00:00\ndraft: false\ndescription: >\n  CloudBees contributions to Jenkins X - April 2020\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"cjxd-april-20\"\naliases: []\nauthor: Deane Smith\n---\n\n<figure>\n<img src=\"/images/logo/cloudbees.png\"/>\n</figure>\n\nDespite the challenges of this particular time in the world it amazes me how members of the Jenkins X community continue to rise up and generously contribute to the project.  This month's CJXD release is with no lack of upstream community contributions, thus I'm kicking off this blog with a very sincere THANK YOU to the contributors.\n\nA number of folks here at CloudBees continue to focus on Jenkins X stability and supportability.  In parallel, other folks are focused on new features and expanding support for additional platforms.  In an effort to help us continue these efforts, we completed the plan to remove code for Jenkins static masters in favor of going full-on with Tekton pipelines.  In addition, a number of unsupported commands scheduled for deprecation have now been removed from the code.\n\nThe benefits of deprecating unsupported features and commands allows for more focus, clearer messaging, better documentation, better quality, faster development of new features, and expanding Kubernetes provider support.  You can learn more about our decision to remove traditional Jenkins masters [here](https://jenkins-x.io/blog/2020/03/11/tekton/).\n\nThis month's CJXD release continues to add value with stability improvements as well as some minor enhancements.  A total of [38 relevant issues](https://docs.cloudbees.com/docs/release-notes/latest/cloudbees-jenkins-x-distribution/v9) have been addressed since the previous release.  Over [40 total upstream pull requests](https://github.com/jenkins-x/jx/pulls?q=is%3Apr+is%3Aclosed+label%3Aapproved+closed%3A2020-03-29..2020-04-29+) were merged since the previous release and all of them have been absorbed in to this CJXD release.  Community members submitted 10 of these PR's and we greatly appreciate these contributions!\n\nLooking ahead to the upcoming CJXD release in May, a good deal of energy over the past three months has been spent on several significant efforts which will begin to surface.  Without upsetting the product management team too much, I'll just write about some of the things the engineering team is working on, BUT not necessarily what will be released or when... \n\n- Lighthouse: Andrew Bayer took over completing James Strachan's initial\n  stab at Lighthouse (Lighthouse is our very own lighter-weight Prow\n  substitute). Andrew has been working on it nearly full-time and it\n  really shows. Lighthouse is running great in our busy production\n  cluster and, well, keep your eye out upstream since I expect great\n  things VERY soon.\n\n- Terraform: Hardy Ferentschik has been working diligently on an effort\n  to eventually remove cloud orchestration concerns from Jenkins X. As a\n  result we have some awesome new Terraform scripts for GKE and EKS\n  where you can prepare your cluster and then leverage `jx boot` to\n  deploy Jenkins X. I anticipate official support for this in an\n  upcoming CJXD release, hopefully very soon. You can read more about\n  this in the upstream\n  [Jenkins X Documentation](https://jenkins-x.io/docs/getting-started/).\n\n- CLI: Adam Magan did a huge amount of tedious work removing code for a\n  multitude of deprecated commands. Thankfully that is largely behind us\n  and Adam can move on to other more gratifying tasks. You can read more\n  about which commands were deprecated in the\n  [CJXD 9 Release Notes](https://docs.cloudbees.com/docs/release-notes/latest/cloudbees-jenkins-x-distribution/v9#_deprecations_and_removals).\n\n- JX Labs: Dave Conde disappeared a couple weeks ago to work with James\n  Strachan and James Rawlings on something and I expect him to resurface\n  in several weeks. If he doesn't return, I'll be sending out a search\n  party.\n\nSo there you have it.  Enjoy the release.  Please stay safe, take care of yourself, and take care of each other.\n\nDeane\n\n\n\n\n",
            "content/en/blog/news/cjxd-202005.md": "---\ntitle: \"CloudBees contributions to Jenkins X - June 2020\"\ndate: 2020-06-26T00:00:00-00:00\ndraft: false\ndescription: >\n  CloudBees contributions to Jenkins X - June 2020\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"cjxd-june-20\"\naliases: []\nauthor: Romain Verduci\n---\n\n<figure>\n<img src=\"/images/logo/cloudbees.png\"/>\n</figure>\n\nFor everyone here at Cloudbees, June has been a really productive month and the release 11 of CJXD comes with a set of new available features and fixes for upstream Jenkins X, as well as a new version of the UI that we are really excited to release!\n\nRegarding Jenkins X new features:\n\n- Thanks to Hardy Ferentschik, you can now bring your own Vault to your Jenkins X cluster. It will allow you to use an already existing Vault instance to store your Jenkins X secrets, checkout the documentation [here](https://jenkins-x.io/docs/install-setup/installing/boot/secrets/#external). He also improved the [existing documentation](https://jenkins-x.io/docs/reference/components/vault/#accessing-secrets) to help you access and manage your secrets.\n\n- If you can\u2019t find a Buildpack that suits your projects in the [list](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) of available ones, Adam Magan has been working on allowing you to use your own custom buildpacks, please find the documentation [here](https://jenkins-x.io/docs/create-project/build-packs/#using-custom-build-packs).\n\nAs for the CloudBees UI, the team is happy to make available some really useful features in a new Preview version:\n\n- You can now create a new project from a list of available \u201cquickstarts\u201d that you can use as a template and that will be pre configured to work with Jenkins X. If you want to get started with projects, please check the [documentation](https://docs.cloudbees.com/docs/cloudbees-jenkins-x-distribution/latest/user-interface/projects)\n\n- If you have an existing project that you want to manage using Jenkins X, you can now also use the UI to import it in your cluster. \n\n- The UI is now exposed with its own URL and protected by basic authentication. Please check out the [documentation](https://docs.cloudbees.com/docs/cloudbees-jenkins-x-distribution/latest/user-interface/install) to have more details about that.\n\nOf course the team continues to fix the issues reported by the community, since the previous release, over 30 issues has been closed, with the goal of making Jenkins X always more reliable.\nSpecial thanks to [ankitm123](https://github.com/ankitm123) who is really involved in the community and has been fixing a lot of issues in this release.\n\nFinally, we have a couple of things in progress that will come soon, be prepared for some exciting announcements around OpenShift support. Also Gitlab and Bitbucket Server support for Lighthouse are available in preview mode, if you want to give it a try, please check out the [documentation](https://jenkins-x.io/docs/install-setup/installing/boot/git-provider/#bitbucket-server), we welcome feedback and bug reports !\n\nIf it\u2019s not done yet, feel free to start using the Cloudbees Jenkins X Distribution, all you need to know in order to have it up and running is [here](https://docs.cloudbees.com/docs/cloudbees-jenkins-x-distribution/latest/) !\n\nRomain\n\n\n\n\n\n",
            "content/en/blog/news/dw-jw-contributor-summit.md": "---\ntitle: \"Join Us at the Jenkins X Contributor Summit San Francisco,\nMonday August 12, 2019\"\ndate: 2019-07-16T10:20:42-02:00\ndraft: false\ndescription: >\n  Jenkins X Contributor Summit San Francisco, Monday August 12, 2019\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-x-contributor-summit\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure>\n<img src=\"/images/old-Jenkins-x-Contributor-Summit.png\"/>\n</figure>\n\n[Register here](https://www.eventbrite.com/e/jenkins-x-contributor-summit-2019-san-francisco-tickets-65105473223) to participate in the Jenkins X Contributor Summit in San Francisco. Attendance at the Jenkins X Contributor Summit is free, and a [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/san-francisco) conference pass is not necessary, but please [RSVP](https://www.eventbrite.com/e/jenkins-x-contributor-summit-2019-san-francisco-tickets-65105473223) if you are going to attend.\n\nThe Jenkins X Contributor Summit is an opportunity for current and future Jenkins X contributors to come together to discuss the project, learn and collaborate. There will be discussions on the latest exciting developments in Jenkins X and time to contribute to the project. We welcome new contributors: this is a great chance to learn more about the project, find out how to contribute and meet the core contributors!\n\nThe contributor summit is part of a joint [Continuous Delivery Foundation (CDF)](https://cd.foundation/) contributor summit alongside [CDF projects](https://thenewstack.io/continuous-delivery-foundation-launches-with-jenkins-jenkins-x-spinnaker-tekton/) like [Tekton](https://github.com/tektoncd) and [Jenkins](https://jenkins.io/). In the morning, there will be presentations by the core contributors of all CDF projects. These will highlight the mission, goals and future direction of each project, as well as how community members can contribute. In the afternoon, there will be breakout Birds-of-a-Feather sessions for deeper discussion and collaboration with Jenkins X contributors. Bring your laptop, ideas and questions, and be ready for some hacking.\n\n**Agenda:**\n\n* 9:00 am - Kickoff & Welcome with coffee/pastries\n* 10:00 am - Project Updates\n* 12:00 pm - Lunch\n* 1:00 pm - Birds-of-a-Feather/Unconference\n* 3:00 pm - Break\n* 3:30 pm - Birds-of-a-Feather/Unconference\n* 4:30 - Ignite Talks\n* 5:00 pm - Wrap-up\n\nAll levels of contributors are welcome! During the Birds-of-a-Feather sessions you are welcome to join in any session that interests you. At the end of the day, if you would like to share what you have learned or worked on, there will be Ignite lightning talks. After the summit, all attendees will be invited to a contributor appreciation social event.\n\nWe've had [a fantastic time at past contributor summits](https://jenkins.io/blog/2018/10/18/contributor-summit-summary/), focused on Jenkins, and look forward to seeing you at this year's Jenkins X Contributor Summit as part of a bigger, broader CDF Contributor Summit.\n\n<figure>\n<img src=\"/images/contributor_summit_sf.jpg\"/>\n</figure>\n\n\nA [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/san-francisco) conference pass is not necessary to attend the Contributor Summit, but if you don't want to miss out on [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/san-francisco) you can get yours using **JWFOSS** for a 30% discount.\n",
            "content/en/blog/news/dwjw-lisbon-2019-contributor-summit.md": "---\ntitle: \"Join Us at the Jenkins X Contributor Summit Lisbon on\n3 December\"\ndate: 2019-10-18\ndraft: false\ndescription: >\n  Jenkins X Contributor Summit Lisbon, Tuesday December 3, 2019!\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-x-contributor-summit-lisbon\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure>\n<img src=\"/images/community/events/jxcontribsummitlisbon.png\"/>\n</figure>\n\n[Register here](https://www.eventbrite.com/e/jenkins-x-contributor-summit-2019-lisbon-portugal-tickets-77484886381) to participate in the Jenkins X Contributor Summit in Lisbon, Portugal!\n\nAttendance at the Jenkins X Contributor Summit is free, and a [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/lisbon) conference pass is not necessary, but please [RSVP](https://www.eventbrite.com/e/jenkins-x-contributor-summit-2019-lisbon-portugal-tickets-77484886381) if you are going to attend.\n\nThe Jenkins X Contributor Summit is an opportunity for current and future Jenkins X contributors to come together to discuss the project, learn and collaborate. There will be discussions on the latest exciting developments in Jenkins X and time to contribute to the project. We welcome new contributors: this is a great chance to learn more about the project, find out how to contribute and meet the core contributors!\n\nThe contributor summit is part of a joint contributor summit alongside [Jenkins](https://jenkins.io/). In the morning, there will be presentations by the core contributors of both projects. These will highlight the mission, goals and future direction of each project, as well as how community members can contribute. In the afternoon, there will be breakout Birds-of-a-Feather sessions for deeper discussion and collaboration with Jenkins X contributors. Bring your laptop, ideas and questions, and be ready for some hacking.\n\n**Agenda:**\n\n* 9:00 am - Kickoff & Welcome with coffee/pastries\n* 10:00 am - Project Updates\n* 12:00 pm - Lunch\n* 1:00 pm - Birds-of-a-Feather/Unconference\n* 3:00 pm - Break\n* 3:30 pm - Birds-of-a-Feather/Unconference\n* 4:30 - Ignite Talks\n* 5:00 pm - Wrap-up\n\nAll levels of contributors are welcome! During the Birds-of-a-Feather sessions you are welcome to join in any session that interests you. At the end of the day, if you would like to share what you have learned or worked on, there will be Ignite lightning talks.\n\nWe've had [a fantastic time at past contributor summits](https://jenkins.io/blog/2018/10/18/contributor-summit-summary/), focused on Jenkins, and look forward to seeing you at this year's Jenkins X Contributor Summit.\n\n<figure>\n<img src=\"/images/contributor_summit_sf.jpg\"/>\n</figure>\n\n\nA [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/lisbon) conference pass is not necessary to attend the Contributor Summit, but if you don't want to miss out on [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/lisbon) you can get your conference pass using **JWFOSS** for a 30% discount.",
            "content/en/blog/news/fosdem-2020.md": "---\ntitle: \"CFP: CI/CD Devroom at FOSDEM 2020\"\ndate: 2019-10-09\ndraft: false\ndescription: >\n  CI/CD Devroom Call for Participation is Open! \ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"fosdem2020\"\naliases: []\nauthor: Kara de la Marck\n---\n\n[FOSDEM](https://fosdem.org/2020/) is a free event for software developers to meet, share ideas, and collaborate.\n\n<figure>\n<img src=\"/images/community/events/2020-fosdem.png\" class=\"img-thumbnail\"/>\n</figure>\n\nFor the first time, there will be a Continuous Integration and Continuous Deployment (CI/CD) devroom at FOSDEM! The CI/CD devroom will take place on **2nd of February 2020 in Brussels, Belgium**.\n\n## FOSDEM\n\n[FOSDEM](https://fosdem.org/2020/about/) (Free and Open source Software Developers\u2019 European Meeting) is a non-commercial, volunteer-organized European event centered on free and open source software development. \n\nIt is aimed at developers and anyone interested in the free and open source software movement. FOSDEM will take place on 1st and 2nd of February in Brussels, Belgium. See the [event site for more details](https://fosdem.org/2020/).\n\n## About the CI/CD Devroom\n\nThe CI/CD devroom focuses on Free and Open Source CI/CD tools and software at large, and is not specific to Jenkins X. We think it is very important for creators and users of CI/CD tools to share ideas, best practices, and stories from the trenches. \n\nReal examples are always inspiring and full of insights, even when things don't go perfectly. We'd love to hear about interesting use-cases for CI/CD tools and pipelines. Also, talks on changing tools, either from proprietary to open source or between FOSS solutions, and the reasons why, can illuminate the differences between CI/CD tools and what users really want and need.\n\n## Call for Participation\n\nTalks can be on anything related to open source CI/CD tools and software!\n\nPlease submit your proposals through FOSDEM's pentabarf system at https://penta.fosdem.org/submission/FOSDEM20. If you already have an account, please use the same as they show speakers' participation across the editions.  Take your time to fill up the fields, especially the descriptions, as that will be shown on FOSDEM website and booklets. Talks can be either 20 or 50 minutes, including time for questions and discussion.\n\nRemember to select the \"Continuous Integration and Continuous Deployment devroom\" track.\n\nNote that the talks will be recorded and made available under a Creative Commons license on the FOSDEM website.\n\n## Important Dates\n\nThe deadline for submission of proposals is **30th November, 2019**.\n\nThe final schedule for the CI/CD devroom at FOSDEM 2020 will be announced on 15th of December, 2019.\n\n**If you have any issues or questions, contact ci-cd-devroom-manager@fosdem.org**\n\nWe're excited to hear all the talks and discussions in the CI/CD devroom and look forward to seeing you there!\n\n\n<div class=\"event-wrapper\" itemscope itemtype=\"http://schema.org/Event\">\n  <link href=\"#\" itemprop=\"image\" content=\"https://jenkins-x.io/images/community/events/2020-fosdem.png\" />\n  <meta itemprop=\"description\" content=\"For the first time, there will be a Continuous Integration and Continuous \n  Deployment (CI/CD) devroom at FOSDEM! The CI/CD devroom will take place on 2nd of February 2020 in Brussels, Belgium.\" />\n  <meta class=\"event-date\" itemprop=\"startDate\" content=\"2020-02-02\" />\n  <meta class=\"event-date\" itemprop=\"endDate\" content=\"2020-02-02\" />\n  <meta class=\"event-title\" itemprop=\"name\" content=\"CI/CD Devroom at FOSDEM 2020\" />\n  <div class=\"event-venue\" itemprop=\"location\" itemscope itemtype=\"http://schema.org/Place\">\n      <meta itemprop=\"name\" content=\"Universit\u00e9 libre de Bruxelles\" />\n      <div class=\"address\" itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n          <meta itemprop=\"streetAddress\" content=\"Avenue Franklin D. Roosevelt 50\" />\n          <meta itemprop=\"postalCode\" content=\"1050\" />\n          <meta itemprop=\"addressLocality\" content=\"Brussels\" />\n          <meta itemprop=\"addressCountry\" content=\"BE\" />\n          <meta itemprop=\"latitude\" content=50.812375 />\n          <meta itemprop=\"longitude\" content=4.380734 />\n          <meta itemprop=\"isAccessibleForFree\" content=true />\n          <meta itemprop=\"audience\" content=\"IT professionals\" />\n      </div>\n  </div>\n  <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\n    <link href=\"#\" itemprop=\"url\" content=\"https://fosdem.org/2020/\" />\n  </div>\n</div>\n\n\n<div id='discourse-comments'></div>\n\n<script type=\"text/javascript\">\n  DiscourseEmbed = { discourseUrl: 'https://jenkinsx.discourse.group/',\n                     discourseEmbedUrl: 'https://jenkins-x.io/blog/2020/01/09/jxfosdem2020/' };\n\n  (function() {\n    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;\n    d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';\n    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);\n  })();\n</script>",
            "content/en/blog/news/gsm-controller.md": "---\ntitle: \"Google Secrets Manager Kubernetes controller\"\ndate: 2020-03-05T00:00:00-00:00\ndraft: false\ndescription: >\n  Google Secrets Manager Kubernetes controller\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"gsm-controller\"\naliases: []\nauthor: James Rawlings\n---\n\n<figure>\n<img src=\"/images/logo/secret-manager.png\"/>\n</figure>\n\nIn Jenkins X Labs we have been working with [Google Secrets Manager](https://cloud.google.com/secret-manager/docs) (which is currently in Beta so may still change). It is an extremely nice experience and if you also use Google Container Engine (GKE), Google\u2019s managed Kubernetes service then we can make use of another cool feature, [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) to automatically access secrets in their hosted service using a Kubernetes service account.\n\nOne of the initial challenges we had was we didn\u2019t see an obvious way to automatically create Kubernetes secrets that include the data stored from Secrets Manager. So we created a little standalone controller that runs in a Kubernetes cluster and watches for Kubernetes secrets. When one is added or updated with a particular annotation the controller will access the secret using its ID in Secrets Manager and update the Kubernetes secret with the value.\n\n# Example\n\nFull docs and code can be found here: https://github.com/jenkins-x-labs/gsm-controller/blob/master/README.md\n\n## TL;DR\n\nCreate an empty secret\n```\nkubectl create secret generic my-secret\n```\nAdd the magic annotation that the controller uses to lookup the correct secret in Googles Secret Manager\n```\nkubectl annotate secret my-secret jenkins-x.io/gsm-secret-id=foo\n```\nOptionally if you want the Kubernetes secret to use a specific key for the data you can add another annotation\n```\nkubectl annotate secret my-secret jenkins-x.io/gsm-kubernetes-secret-key=credentials.json\n```\n\n## Demo\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/wLHgkhzeNe8\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n# Feadback\nThis is still early days and we\u2019d love folks to try it and provide feedback ([slack](https://jenkins-x.io/community/#slack) or the new [labs issues](https://github.com/jenkins-x-labs/issues/issues)) on whether it is useful to others and how we can improve it together.\n \nOn Jenkins X we make use of Hashicorp\u2019s Vault which is great although it is another service users have to run, manage and upgrade. Wherever possible Jenkins X aims to use the Cloud well, so when users are installing Jenkins X onto a Cloud Provider we would like to leverage their other managed services, reducing the deployments we need to run in users clusters for Jenkins X.",
            "content/en/blog/news/hacktoberfest-2019.md": "---\ntitle: \"Contribute to Jenkins X as part of Hacktoberfest\"\ndate: 2019-09-27\ndraft: false\ndescription: >\n  Join us in celebrating Hacktoberfest\ncategories: [blog]\nkeywords: [Community, 2019]\nslug: \"hacktoberfest2019\"\naliases: []\nauthor: Kara de la Marck\n---\n\n<figure>\n<img src=\"/images/community/events/2019-hacktoberfest.png\" class=\"img-thumbnail\"/>\n</figure>\n\n# Hacktoberfest\n\nHacktoberfest is a month-long global celebration of open source software.\n\nFrom October 1 to October 31, submit four pull requests to qualify for the limited edition Hacktoberfest shirt. All backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors.\n\nWe'd love for you to contribute to the Jenkins X project!\n\nAll pull requests will count towards your Hacktoberfest challenge. Issues labelled \"hacktoberfest\" generally indicate good first issues. Jenkins X welcomes contributors to both:\n\n* [the Jenkins X `jx` source code](https://github.com/jenkins-x/jx)\n* [the Jenkins X documentation website](https://github.com/jenkins-x/jx-docs)\n\n### Contribute to jx\n\nJenkins X is an open source project and we welcome new contributors. There are plenty of [open issues](https://github.com/jenkins-x/jx/issues), and we welcome your help in making Jenkins X even more awesome.\n\nJenkins X is written largely in Go, but you don't need to be an expert to contribute! If you are new to the project, search for issues labelled \"good-first-issue\", a number of which we've also given the [\"hacktoberfest\" label](https://github.com/jenkins-x/jx/labels/hacktoberfest). Our [Contributing Guide](https://jenkins-x.io/community/code/) has advice for getting started with contributing to Jenkins X.\n\n### Contribute to the docs\n\nWe welcome your help in making the Jenkins X documenation better. If you see areas of the documentation that need fixing or augmentation please raise a pull request! Our guide for [Contributing to the Documentation](https://jenkins-x.io/community/documentation/) has advice for getting started with contributing to the Jenkins X docs.\n\n### Ask us questions\n\nWe're happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nWe also have online office hours, where we talk about new developments in Jenkins X and you are welcome to ask us questions, every other Thursday at 4pm UK (BST) / 11am US Eastern / 8am US Pacific.\n\nNext office hours are on **3 October**. Join us here: https://zoom.us/j/397862697\n\n### Jenkins Hacktoberfest\n\nThe Jenkins project is also participating in Hacktoberfest!\nPlease see https://jenkins.io/events/hacktoberfest/ for more info.\n\n\n*We look forward to seeing you in open source, fixing all the things!*\n\n<img src=\"/images/404-page/GOPHER RIDING REX.png\" class=\"img-thumbnail\">\nimage by Ashley McNamara, [creative commons license](https://github.com/ashleymcnamara/gophers/blob/master/GOPHER%20RIDING%20REX.png)\n\n**Learn more about Hacktoberfest and sign up [here](https://hacktoberfest.digitalocean.com/).**\n",
            "content/en/blog/news/helm-without-tiller.md": "---\ntitle: \"Helm 2.x without Tiller\"\ndate: 2018-10-03T07:36:00+02:00\ndescription: >\n    How to avoid Tiller when using Helm 2.x\ncategories: [blog]\nkeywords: []\nslug: \"helm-without-tiller\"\naliases:\n  - /news/helm-without-tiller/\nauthor: jstrachan\n---\n\n## How to avoid Tiller\n\nHelm 2.x uses a server side component called _tiller_. Typically Tiller is installed in a global namespace; or you can install a Tiller in each namespace and configure your `helm` CLI to talk to the right tiller in the right namespace.\n\nHowever Tiller has a number of issues...\n\n### The problem with Tiller\n\n* complicates RBAC since its not using the RBAC of the user or pod running the helm commands to read/write kubernetes resources - helm is talking to the remote tiller pod to do the work. If you are using a global tiller then thats often got something like the `cluster-admin` role which means anyone running helm commands effectively side steps RBAC completely! :).\n* helm forces all releases to have a unique name within a tiller. This means if you have one global tiller then each release name must be globally unique across all namespaces. This leads to very long release names since they must typically append the namespace too. This means often service names are very different between environments as the release name is often included in the service name in many charts which [breaks lots of the promise of using canonical service discovery in kubernetes](https://kubernetes.io/docs/concepts/services-networking/service/#discovering-services).\n  * We prefer to use same service names in every environment (development, testing, staging, production) - to minimise the amount of per-environment configuration that is required which avoids manual effort and reduces errors. e.g. refer to http://my-service/ in your app and it should just work in every namespace/environment your app is deployed in without wiring up special configuration.\n* can cause lots of version conflicts between helm clients + tiller versions. We've seen this a lot in Jenkins X this year. e.g. a user has, say, helm 2.9 installed locally and installs Jenkins X. Then a build pod with helm 2.10 runs and barfs as the tiller and helm versions don't match.\n\n### Helm 3 will be tiller-less\n\nWhenever Helm 3 shows up Tiller will be a thing of the past - which is awesome - all of the above issues will be fixed! The only downside is no-one outside of Microsoft has any clue when Helm 3 will be a thing. Very little is [happening on the public helm 3 branch](https://github.com/helm/helm/tree/dev-v3), no [issues](https://github.com/helm/helm/issues/4255) or [pull requests](https://github.com/helm/helm/pull/4257) are being accepted yet. I'm hoping there's loads of activity on a private branch somewhere - but its probably a while away from being public and GA.\n\n### Going tiller-less on Helm 2.x\n\nUntil Helm 3 the Jenkins X community needed a nice workaround for tiller on helm 2.x.\n\nSo now if you want to use Jenkins X without tiller there's a new magic command line argument `--no-tiller` you can use when [creating a cluster](/getting-started/create-cluster/):\n\n```sh\n jx create cluster gke --no-tiller\n```\n\nor if you are [installing on an existing kubernetes cluster](/docs/resources/guides/managing-jx/old/install-on-cluster/):\n\n```sh\n jx install --no-tiller\n```\n\n### How does it work?\n\nTo be able to change the helm behaviour via feature flags we abstracted away the low level calls to the helm CLI behind some [jx step helm](/commands/jx_step_helm/) commands. e.g. to apply a helm chart in an environment pipeline we use...\n\n```sh\njx step helm apply\n```\n\nThis lets us use feature flags to use different helm behaviours.\n\nWhat `--no-tiller`  means is to switch helm to use `template mode` which means we no longer internally use `helm install mychart` to install a chart, we actually use `helm template mychart` instead which generates the YAML using the same helm charts and the standard helm confiugration management via `--set` and `values.yaml` files.\n\nThen we use `kubectl apply` to apply the YAML.\n\nSince we are using [GitOps](/about/concepts/features/#promotion) in Jenkins X it turns out we don't really need to rely on Helm's use of kubernetes resources to store environment specific configuration values; since everything is already in git!\n\nOne added complication though is, with Helm you can add and remove resources inside a chart and as you upgrade to newer versions of the chart the old resources get automatically removed. Also with helm there's a way to remove a release by name and all the resources are removed.\n\nSo to preserve the helm semantics of removing old resources from a chart in newer versions (e.g. removing a microservice from the Staging environment) or removing an entire release we do the following:\n\n* the YAML generated by`helm template` is post processed to add 2 labels:\n\n```yaml\nmetadata:\n  name: mything\n  labels:\n    jenkins.io/chart-release: my-release\n    jenkins.io/version: 1.2.3\n```\n* after an upgrade we remove any resources for the same helm release name but different version (to remove any old resources) via the selector `jenkins.io/chart-release=my-release,jenkins.io/version!=1.2.3`\n* to remove a release completely we just delete all resources with the label selector: `jenkins.io/chart-release=my-release`\n\n### Kustomize?\n\nOne nice benefit of using `helm template` to generate the YAML then using `kubectl apply` means that we can look at optionally using tools like [kustomize](https://github.com/kubernetes-sigs/kustomize) post process the output of `helm template` to allow resources to be overridden or enriched in ways that the chart author did not think of.\n\n\n### Other helm feature flags\n\nOur first experiment to remove tiller involved running the tiller process locally. We still have the feature flag `--remote-tiller=false` which means that Jenkins X will ensure there's a local `tiller` process running and that the `helm` CLI is pointed to the localhost port. This at least helps avoid the RBAC issues with tiller since the `tiller` will be reusing the same RBAC rules as the caller of `helm`\n\nIt turns out this kinda works; though we found some issues around multi-team support so we ended up moving to the template mode described above which works much more reliably.\n\nAnother feature flag we added was allowing different helm binaries to be used; so that we could switch between, say, `helm` for helm 2.x and `helm3` for the 3.x version so that folks could experiment with alphas of helm 3.\n\nThough its looking like helm 3 is still some way off so its not recommended any time soon but as helm 3 gets near to RC stage we'll be able to reuse the helm 3 feature flag again to let folks experiment with helm 3 until its GA and we make it the default in Jenkins X.\n\n\n### Summary\n\nIf you use helm then we highly recommend you avoid tiller!\n\nIf you are using Jenkins X then please consider using the `--no-tiller`  option when you're [creating a cluster](/getting-started/create-cluster/) or [install Jenkins X on an existing cluster](/docs/resources/guides/managing-jx/old/install-on-cluster/).\n\nWe're working  on Jenkins X 2.0 - most of its features are already available hidden behind feature flags. So in Jenkins X 2.0 we will default disable tiller by default along with enabling other things like Prow integration and using _serverless_ Jenkins by default (more on those in a separate blog!).\n\nWe are also really looking forward to helm 3! :). Helm rocks, but tiller does not!\n\n",
            "content/en/blog/news/install-jx-alibaba.md": "---\ntitle: \"Installing Jenkins X on Alibaba Cloud Container Service\"\ndate: 2019-06-17T07:36:00+02:00\ndescription: >\n    Install Jenkins X on Alibaba Cloud Container Service.\ncategories: [blog]\nkeywords: [alibaba,container,install,k8s]\nslug: \"alibaba-container-service-jenkins-x\"\naliases: []\nauthor: Carlos Sanchez\n---\n\n\n<figure>\n<img src=\"/images/alibaba-cloud-logo.svg\"/>\n<figcaption>\n<h5>Installing Jenkins X on Alibaba Cloud Container Service</h5>\n</figcaption>\n</figure>\n\n# Installing Jenkins X in Alibaba Kubernetes Container Service\n\nJenkins X has just added initial support to install in [Alibaba Container Service](https://www.alibabacloud.com/product/container-service), its Kubernetes offering.\n\nThe following instructions allow installation in a managed Kubernetes cluster in any region outside of mainland China, where more configuration is needed avoid using Google services blocked by chinese authorities (Docker images in GCR). There is a [pending issue](https://github.com/jenkins-x/jenkins-x-platform/issues/5551) for that.\n\n## Creating a Kubernetes Cluster\n\nAlibaba requires several things in order to create a Kubernetes cluster, so it is easier to do it through the [web UI](https://cs.console.aliyun.com/) the first time.\n\nThe following services need to be activated: Container Service, Resource Orchestration Service (ROS), RAM, and Auto Scaling service, and created the [Container Service roles](https://www.alibabacloud.com/help/doc-detail/86484.htm?spm=a2c63.p38356.b99.38.663a333eMXExon).\n\nIf we want to use the command line we can install the [`aliyun`](https://github.com/aliyun/aliyun-cli) cli. I have added all the steps needed below in case you want to use it.\n\n```sh\nbrew install aliyun-cli\naliyun configure\nREGION=ap-southeast-1\n```\n\nThe clusters need to be created in a VPC, so that needs to be created with VSwitches for each zone to be used.\n\n```sh\naliyun vpc CreateVpc \\\n    --VpcName jx \\\n    --Description \"Jenkins X\" \\\n    --RegionId ${REGION} \\\n    --CidrBlock 172.16.0.0/12\n\n{\n    \"ResourceGroupId\": \"rg-acfmv2nomuaaaaa\",\n    \"RequestId\": \"2E795E99-AD73-4EA7-8BF5-F6F391000000\",\n    \"RouteTableId\": \"vtb-t4nesimu804j33p4aaaaa\",\n    \"VRouterId\": \"vrt-t4n2w07mdra52kakaaaaa\",\n    \"VpcId\": \"vpc-t4nszyte14vie746aaaaa\"\n}\n\nVPC=vpc-t4nszyte14vie746aaaaa\n\naliyun vpc CreateVSwitch \\\n    --VSwitchName jx \\\n    --VpcId ${VPC} \\\n    --RegionId ${REGION} \\\n    --ZoneId ${REGION}a \\\n    --Description \"Jenkins X\" \\\n    --CidrBlock 172.16.0.0/24\n\n{\n    \"RequestId\": \"89D9AB1F-B4AB-4B4B-8CAA-F68F84417502\",\n    \"VSwitchId\": \"vsw-t4n7uxycbwgtg14maaaaa\"\n}\n\nVSWITCH=vsw-t4n7uxycbwgtg14maaaaa\n```\n\nNext, a keypair (or password) is needed for the cluster instances.\n\n```sh\naliyun ecs ImportKeyPair \\\n    --KeyPairName jx \\\n    --RegionId ${REGION} \\\n    --PublicKeyBody \"$(cat ~/.ssh/id_rsa.pub)\"\n```\n\nThe last step is to create the cluster using the just created VPC, VSwitch and Keypair. It's important to select the option *Expose API Server with EIP* (`public_slb` in the API json) to be able to connect to the API from the internet.\n\n```sh\necho << EOF > cluster.json\n{\n    \"name\": \"jx-rocks\",\n    \"cluster_type\": \"ManagedKubernetes\",\n    \"disable_rollback\": true,\n    \"timeout_mins\": 60,\n    \"region_id\": \"${REGION}\",\n    \"zoneid\": \"${REGION}a\",\n    \"snat_entry\": true,\n    \"cloud_monitor_flags\": false,\n    \"public_slb\": true,\n    \"worker_instance_type\": \"ecs.c4.xlarge\",\n    \"num_of_nodes\": 3,\n    \"worker_system_disk_category\": \"cloud_efficiency\",\n    \"worker_system_disk_size\": 120,\n    \"worker_instance_charge_type\": \"PostPaid\",\n    \"vpcid\": \"${VPC}\",\n    \"vswitchid\": \"${VSWITCH}\",\n    \"container_cidr\": \"172.20.0.0/16\",\n    \"service_cidr\": \"172.21.0.0/20\",\n    \"key_pair\": \"jx\"\n}\nEOF\n\naliyun cs  POST /clusters \\\n    --header \"Content-Type=application/json\" \\\n    --body \"$(cat create.json)\"\n\n{\n    \"cluster_id\": \"cb643152f97ae4e44980f6199f298f223\",\n    \"request_id\": \"0C1E16F8-6A9E-4726-AF6E-A8F37CDDC50C\",\n    \"task_id\": \"T-5cd93cf5b8ff804bb40000e1\",\n    \"instanceId\": \"cb643152f97ae4e44980f6199f298f223\"\n}\n\nCLUSTER=cb643152f97ae4e44980f6199f298f223\n```\n\nWe can now download `kubectl` configuration with\n\n```sh\naliyun cs GET /k8s/${CLUSTER}/user_config | jq -r .config > ~/.kube/config-alibaba\nexport KUBECONFIG=$KUBECONFIG:~/.kube/config-alibaba\n```\n\nAnother detail before being able to install applications that use `PersistentVolumeClaims` is to [configure a default storage class](https://www.alibabacloud.com/help/doc-detail/86612.htm#a2c63.p38356.879954.i0.11497ec4J5rKJd). There are several volume options that can be listed with `kubectl get storageclass`.\n\n```sh\nNAME                          PROVISIONER     AGE\nalicloud-disk-available       alicloud/disk   44h\nalicloud-disk-common          alicloud/disk   44h\nalicloud-disk-efficiency      alicloud/disk   44h\nalicloud-disk-ssd             alicloud/disk   44h\n```\n\nEach of them matches the following cloud disks:\n\n* alicloud-disk-common: basic cloud disk (minimum size 5GiB). Only available in some zones (us-west-1a, cn-beijing-b,...)\n* alicloud-disk-efficiency: high-efficiency cloud disk, ultra disk (minimum size 20GiB).\n* alicloud-disk-ssd: SSD disk (minimum size 20GiB).\n* alicloud-disk-available: provides highly available options, first attempts to create a high-efficiency cloud disk. If the corresponding AZ's efficient cloud disk resources are sold out, tries to create an SSD disk. If the SSD is sold out, tries to create a common cloud disk.\n\nTo set SSDs as the default:\n\n```sh\nkubectl patch storageclass alicloud-disk-ssd \\\n    -p '{\"metadata\": {\"annotations\": {\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}'\n```\n\n**NOTE**: Alibaba cloud disks must be [more than 5GiB (basic) or 20GiB (SSD and Ultra)](https://www.alibabacloud.com/help/doc-detail/25513.htm#h2-url-2)) so we will need to configure any service that is deployed with PVCs to have that size as a minimum or the `PersistentVolume` provision will fail. The Jenkins X deployments [are already configured with this in mind](https://github.com/jenkins-x/cloud-environments/blob/master/env-alibaba/myvalues.yaml).\n\n\n## Installing Jenkins X\n\nAlibaba Kubernetes clusters won't be able to pull images from the insecure docker registry included in Jenkins X, we need to use Alibaba's Container Registry by going to [https://cr.console.aliyun.com](https://cr.console.aliyun.com) and setting a password.\n\n\nThen we need to create a Container Registry namespace that allows us to push any image and make them public by default.\n\nFrom the web UI we can create a Docker login password that we will be using later.\n\n```sh\nNAMESPACE=jenkins-x-$(cat /dev/urandom | env LC_CTYPE=C tr -dc 'a-z' | fold -w 6 | head -n 1)\ncat << EOF > namespace.json\n{\n    \"Namespace\": {\n        \"Namespace\": \"${NAMESPACE}\"\n    }\n}\nEOF\naliyun cr PUT /namespace \\\n    --header \"Content-Type=application/json\" \\\n    --body \"$(cat namespace.json)\"\n\ncat << EOF > namespace.json\n{\n    \"namespace\": {\n        \"namespace\": \"${NAMESPACE}\",\n        \"defaultVisibility\": \"PUBLIC\",\n        \"autoCreate\": true\n    }\n}\nEOF\n\naliyun cr POST /namespace/${NAMESPACE} \\\n    --header \"Content-Type=application/json\" \\\n    --body \"$(cat namespace.json)\"\n\n```\n\nNow we can install Jenkins X as usual, passing the `--provider alibaba` flag.\n\n```sh\njx install \\\n    --provider alibaba \\\n    --default-admin-password=admin \\\n    --default-environment-prefix=jx-rocks \\\n    --tekton \\\n    --docker-registry=registry.${REGION}.aliyuncs.com \\\n    --docker-registry-org=${NAMESPACE} \\\n    -b\n```\n\nAfter installation we need to add the Container Registry credentials to the cluster, the Docker password we have previously created.\n\n```bash\nAUTH=$(echo -n \"${DOCKER_USERNAME}:${DOCKER_PASSWORD}\" | base64)\nDATA=$(cat << EOF | base64\n{\n    \"auths\": {\n        \"registry.${REGION}.aliyuncs.com\": {\n            \"auth\": \"${AUTH}\"\n        }\n    }\n}\nEOF\n)\ncat << EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: jenkins-docker-cfg\n  namespace: jx\ndata:\n  config.json: ${DATA}\nEOF\n```\n\n## Installing Addons\n\nAddons can be installed normally with the caveat mentioned above about PVC minimum size. Which means that we may need to pass some Helm values to the `create addon` command, depending on the chart we are installing.\n\nFor instance to install Prometheus with 20Gi disks:\n\n```sh\njx create addon prometheus \\\n    -s alertmanager.persistentVolume.size=20Gi,pushgateway.persistentVolume.size=20Gi,server.persistentVolume.size=20Gi\n```\n\n## Tekton\n\nTekton builds need to be configured to use PVCs bigger than 20Gi due to the same reasons. The default is to use 5GiB PVCs.\n\n```sh\ncat << EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-artifact-pvc\n  namespace: jx\ndata:\n  size: 20Gi\nEOF\n```\n",
            "content/en/blog/news/introducing-jenkins-x.md": "---\ntitle: \"Introducing Jenkins X\"\ndate: 2018-03-19T18:36:00+02:00\ndescription: >\n    Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes\ncategories: [blog]\nkeywords: []\nslug: \"introducing-jenkins-x\"\naliases: []\nauthor: jstrachan\n---\n\n## Introducing Jenkins X\n\nThere's a new blog post on [jenkins.io](https://jenkins.io/node/) which introduces Jenkins X and gives an overview of what it, what we're doing and why:\n\n* [Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes](https://jenkins.io/blog/2018/03/19/introducing-jenkins-x/)\n\nPlease check it out and [let us know what you think](/community/)",
            "content/en/blog/news/jenkins-x-at-jenkinsworld.md": "---\ntitle: \"Jenkins X at Jenkins World\"\ndate: 2018-09-06T08:36:00+02:00\ndescription: \"Jenkins X @ JenkinsWorld\" \ncategories: [blog]\nkeywords: []\nslug: \"jenkins-x-at-jenkinsworld\"\naliases:\n  - /news/jenkins-x-at-jenkinsworld/\nauthor: rdavies\n---\n\n## Jenkins X at JenkinsWorld\n\n\n[Jenkins World](https://www.cloudbees.com/devops-world/) has combined with DevOps world to become the premier DevOps event in your calendar this year - and there really isn't much time left if you still have to register. The event is happening at San Francisco 16-19 September, and Nice,France  22-25 October.  To get a discount on entry - you are invited to use the dscount code: JWRDAVIES\n\nSome of the Jenkins X team, including James Strachan, James Rawlings, Rob Davies and Pete Muir will be available if you want some extra help with the Jenkins X project - we are cheap too - beer tokens gratefully received.\n\nThere will be interactive Jenkins X demonstrations at the Jenkins X community booth and the exhibition theatre. There will be Jenkins X book signings and much more.\n\nThere is a [Jenkins X workshop](https://devopsworldjenkinsworld2018.sched.com/event/FYjb/building-continuous-delivery-for-microservices-with-jenkins-x-25?iframe=no&w=100%&sidebar=yes&bg=no), which is unfortunately already sold out!\n\nJames Strachan will be presenting [Jenkins X: Continuous Delivery for Kubernetes](https://devopsworldjenkinsworld2018.sched.com/event/FlPE/jenkins-x-continuous-delivery-for-kubernetes?iframe=no&w=100%&sidebar=yes&bg=no) on Tuesday 18 Sep\n\nand James Rawlings and Rob Davies will be presenting [Extending Jenkins X for fun](https://devopsworldjenkinsworld2018.sched.com/event/GFmE/extending-jenkins-x-for-fun-and-profit?iframe=no&w=100%&sidebar=yes&bg=no) on Tuesday 18 Sep too\n\nThe Jenkins X team is looking forward to seeing you at Jenkins World this year!\n\n",
            "content/en/blog/news/jenkins-x-does-kubecon.md": "---\ntitle: \"Jenkins X does KubeCon\"\ndate: 2018-05-05T10:36:00+02:00\ndescription: \"Jenkins X: Easy CI/CD for Kubernetes @ KubeCon\" \ncategories: [blog]\nkeywords: []\nslug: \"jenkins-x-does-kubecon\"\naliases: []\nauthor: jstrachan\n---\n\n## Jenkins X at KubeCon\n\n\nHere is the [video of my talk: Jenkins X: Easy CI/CD for Kubernetes](https://youtu.be/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo) at [KubeCon Europe 2018](https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/). \n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nYou can also [get the slides from this talk here](https://docs.google.com/presentation/d/19DAFONpT3L4t6sisyTuK2_chHrVorQO_1ijWEo8Euas/edit?usp=sharing)\n\n<img src=\"/news/jenkins-x-does-kubecon/kubecon-talk.jpg\">\n\nYou can also watch all the other [KubeCon videos here](https://www.youtube.com/playlist?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo)\n\nYou can also register your interest in the [CloudBees Kubernetes product](https://pages.cloudbees.com/K8s) that I gave a quick sneak peek at towards the end of the talk.\n\n<img src=\"https://www.cloudbees.com/sites/default/files/cloudbees-kubernetes.png\">\n",
            "content/en/blog/news/jenkins-x-first-birthday.md": "---\ntitle: \"Happy 1st Birthday Jenkins X\"\ndate: 2019-01-14T07:36:00+02:00\ndescription: >\n    One year of Jenkins X\ncategories: [blog]\nkeywords: []\nslug: \"happy-first-birthday\"\naliases: []\nauthor: tracymiranda\n---\n\nTime flies when you are delivering software. It has been just over a year since the [initial commit](https://github.com/jenkins-x/jx/commit/e255f7ea050c4a410a21183ec85a510c8e4ca8c6) went into Github for Jenkins X, the CI/CD solution for cloud native. In just 12 months, Jenkins X progress has been breathtaking, so let\u2019s celebrate by taking a look at all that has been accomplished in this short space of time.\n\n<img src=\"/news/jenkins-x-first-birthday/birthday.jpg\"> \n\nOne of the main founders of Jenkins X is [James Strachan](https://twitter.com/jstrachan) of CloudBees, who is known for building many popular open source software projects such as [Apache Groovy](http://groovy-lang.org/index.html), [Apache Camel](http://camel.apache.org/) and fabric8. Notable these projects also have enduring open source software communities around them. With all this experience it is safe to say James simply gets developers and what they want, need and care about.\n\nDevelopers WANT to ship code fast.\n\nDevelopers NEED to use best practices as they go so they can keep the long term sustainability of their code in mind.\n\nDevelopers CARE ABOUT what they are building; the code, the programming language, the environment, the quirks: everything that makes it special (and also makes one-size-fits-all tools impossible to build). Jenkins X gets all of this, let\u2019s take a look at what it offers developers.\n\n## Ship Code Fast\n\nTo help developers get their code out to the world quickly Jenkins X offers preview environments, a seamless developer experience (DevEx) and support for multi-cloud platforms.\n\n### Preview Environments\n\nThese are the Jenkins X killer feature. Preview environments enable developers to preview pull requests before changes merge to master. This takes away the pain of having to look at code to work out how good a PR is. Preview environments allow for fast and early feedback as developers can review actual functionality in an automatically provisioned environment. Typically the creation of preview environments is automated inside the Pipelines created by Jenkins X. Read more about [preview environments](https://jenkins-x.io/about/concepts/features/#preview-environments). \n\n### Developer Experience (DevEx)\n\nJenkins X can provide preview environments and a complete system for scalable CI/CD because it builds on Kubernetes and the cloud native ecosystem (tools such as Helm). However Kubernetes is complex so Jenkins X abstracts away a lot of this complexity, for example by providing a one line [\u2018jx create cluster\u2019](https://jenkins-x.io/commands/jx_create_cluster/) command to create a fully formed cluster automatically set up with sensible defaults. \n\n### Multicloud\n\nJenkins X can create a cluster with a single command on virtually any flavour of Kubernetes, either on prem or using a public cloud provider. Google Cloud, Microsoft Azure, Amazon Web Services, Oracle Cloud, IBM Cloud, RedHat Openshift and more are all supported. Jenkins X does the heavy lifting so developers can get started without needing to know the cloud-specific command line interface (CLI), how to set up role-based access (RBAC) or what ingress controllers are. \n\n## Best Practices\n\n### GitOps\n\nJenkins X comes built in with the most modern best practices for CI/CD including GitOps, operation by pull request. Jenkins X uses GitOps for promoting pull requests and to manage the configuration and version of the kubernetes resources which are deployed to each environment. Read [more about GitOps here](https://jenkins-x.io/about/features/#environments).\n\n### Accelerate Capabilities\n\nJenkins X uses capabilities identified by the Accelerate book such as automating the deployment process, using trunk-based development and using loosely coupled architecture. Read [more here](https://jenkins-x.io/about/accelerate/).\n\n## Extensibility\n\nJenkins X works in different environments with any programming language and empowers developers to extend it in so it is optimized for their environments. \n\n### Quickstart templates\n\nThis is the most popular way to extend Jenkins X as the community have contributed many quickstart templates for their favourite programming languages and frameworks. Read more about [extending Jenkins X](https://jenkins-x.io/extending/).\n\n### Workloads\n\nNot everybody has the luxury of starting on cloud native apps from fresh. so recently Jenkins X added buildpacks to bridge the cloud-native divide for typical Jenkins workloads such as Java, Maven, Gradle etc.. Buildpacks themselves are extensible. Read more about [buildpacks here](https://jenkins-x.io/architecture/build-packs/). \n\n## What do developer think of Jenkins X?\nFrom the early adopters trying out Jenkins X we hear \u2018Wow\u2019 a lot, for example:\n\n* When Dailymotion wrote about how they went from [Jenkins to Jenkins X](https://medium.com/dailymotion/from-jenkins-to-jenkins-x-604b6cde0ce3) they described the \u2018wow effect\u2019 of creating a cluster in one command\n* Joselie Casta\u00f1eda commented \u2018take my wow!\u2019 after watching the [Jenkins X talk video from Kubecon](https://youtu.be/uHe7R_iZSLU). \n\n## Community\nJenkins X would not be where it is today without the lovely community who make lots of contributions: code contributions, giving feedback and even being good sports making the Jenkins X signal. Thank you all!\n\nJenkins X is transforming the way developers continuously deliver code and we are excited to see how things progress in the next 12 months!\n\nHappy first birthday Jenkins X!\n\n",
            "content/en/blog/news/jenkins-x-joins-cdf.md": "---\ntitle: \"Jenkins X joins the CDF\"\ndate: 2019-03-09T07:36:00+02:00\ndescription: >\n    Jenkins X joins the Continuous Delivery Foundation\ncategories: [blog]\nkeywords: []\nslug: \"jenkins-x-cdf\"\naliases: []\nauthor: jstrachan\n---\n\nWe are thrilled to announce that Jenkins X will be joining the [Continuous Delivery Foundation](https://cd.foundation/) as one of the founding projects.  The Continuous Delivery Foundation (CDF) is a brand new sub-foundation of the Linux Foundation and will be dedicated to advancing the practice of continuous delivery and nurturing an ecosystem of interoperable tools for software delivery.\n\n<img src=\"/news/jenkins-x-cdf/cdf-stacked-color.png\">\n\nJenkins X is just over [a year old](/blog/2019/01/14/happy-first-birthday/) but has been growing rapidly as the CI/CD solution for modern cloud applications on Kubernetes. Jenkins X automates CI+CD for Kubernetes using the best of breed OSS tools such as Jenkins, Tekton, Prow, Skaffold, Kaniko and Helm. The CDF will be a sibling foundation to the Cloud Native Computing Foundation (CNCF) which hosts Kubernetes amongst others. CDF will have its first event, CDF Summit, on May 20th alongside KubeCon Barcelona. We always love to work closely with other communities, and this will continue at scale within the CDF.\n\n\u201cI\u2019m really excited to see the formation of the CDF - it's starting with some of the most popular best-of-breed open source tools in the CI/CD space,\" said James Strachan, co-founder of Jenkins X and distinguished engineer, CloudBees. \"I\u2019m looking forward to increased collaboration between us all to help accelerate the open source CI/CD landscape.\u201d\n\nJenkins X started life under the Jenkins umbrella. In CDF, Jenkins X will be a distinct project from Jenkins which means some changes, such as having a Jenkins X Technical Steering Committee. These changes will happen gradually as we transition to CDF over the coming weeks. Normal development work will continue as usual.\n\nWe are excited about all the new possibilities that being part of the CDF will bring. We look forward to new initiatives and welcoming everybody to [get involved with the project](/community/).\n",
            "content/en/blog/news/jenkins-x-new-logo.md": "---\ntitle: \"A New Logo for Jenkins X\"\ndate: 2019-07-31T07:36:00+02:00\ndescription: >\n    A new logo for Jenkins X\ncategories: [blog]\nkeywords: []\nslug: \"new-logo-jenkins-x\"\naliases: []\nauthor: tracymiranda\n---\nBack in March 2018, the Jenkins X project burst onto the scene as the Jenkins counterpart for automated CI/CD for Kubernetes. As part of that launch featured the logo: a variation of the Jenkins logo, featuring a pipe-smoking ship captain with Kubernetes logo on his cap. \n\nIn software, we like to say that naming is hard - because it is. Another thing that is also hard is trying to capture the essence of a project in a logo. Logos pack a lot of meaning into a small space. Icons, such as the Jenkins logo, establish a strong emotional connection with many developers. So with that in mind we always listened closely to feedback on the new logo and how people perceive the project as a result of it. \n\n## Why we are changing the logo\nIn listening to various types of feedback from all sorts of different sources we heard many positive things but also some problems and confusion were highlighted. \n\n* Not everyone was a fan of the logo and we heard quite a few comments back about aspects that people didn\u2019t like about it, with the \u2018pipe-smoking\u2019 featuring high on that list. \n* Confusion with Jenkins project - we also saw that the logo was more in keeping with A other Jenkins mascots, which led to confusion about what kind of project Jenkins X is - some perceived it as another plugin in the ecosystem.\n* We also heard that use of the Kubernetes logo was confusing or perhaps not completely within the remit of the Kubernetes logo guidelines. \n* From a practical perspective we also heard that the logo was too detailed and as a result would not work well as an icon, especially for a favicon. It  was seen as more of a mascot than a logo.\n\nWith the setup of the CD.Foundation and Jenkins X being one of the founding projects, distinct from Jenkins, we felt the time was right to address this feedback. So we literally went back to the drawing board to think about what logo could better represent Jenkins X as a project. We thought about what we want people to associate with the project: open source, continuous delivery, speed, automation, stability, teams, etc. We also wanted a logo that could improve representation, so we wanted to avoid a human-based logo that might inadvertently encode gender, age and other factors. Additionally, the 'X' has become a distinct part of the project's identity and so we wanted to really emphasize it in the new logo. \n\n## Designing the new logo & community feedback\nUltimately we focussed on trying to visualize speed and automation which led to the idea of a robot. However, we still wanted to have a nod to the original Jenkins project featured in the logo somehow or the other. We explicitly decided to not stick with the nautical theme traditionally associated with Kubernetes and related projects. We went through a few iterations, refining and cutting down details as we went. The design effort was a close partnership with Craig Ross, Creative Director at the Linux Foundation and his team, who also produced the [CD Foundation](https://cd.foundation/), CNCF, Network Service Mesh, and Tekton brands.\"\n\nAfter the core Jenkins X team had settled on a design they were happy with, we took it to the community for feedback and to address some of the details. We had alot of feedback, including all the things it reminded folks of (an upside-down koala, Bill Nye, Reddit logo, Flash Gordon, Tekton logo, etc). One overarching consistent theme about the original design was that it did not reflect the friendliness of the community. [Kyounger](https://github.com/jenkins-x/jx/issues/4144#issuecomment-497787629) in particular helped analyse this reaction and went the extra mile to propose a solution. We agreed and loved this suggestion and fed this back into the final version of the logo. Thanks alot Kenny & open source FTW!\n\n## Jenkins & Jenkins X\nJenkins X started life as a Jenkins subproject and is now an independent project with the Continuous Delivery Foundation (CDF). The bowtie in the new logo is an ever-present reminder of that provenance. Even though our logo and branding may be changing, under the umbrella of the CDF, we continue to work closely with the Jenkins project, sharing that same spirit of service towards developers\u2019 CI/CD and productivity needs.\n\n## Rolling out the new logo\nWe have now started switching over to the new logo and expect to see some new swag available soon too. The old logo we will now consider as a mascot of the Jenkins X project. If you are looking to update your use of the logo, [here is the new artwork](https://github.com/cdfoundation/artwork). \n\n<img src=\"/news/new-logo-jenkins-x/jenkinsx-stacked-color.png\"> \n\nIt is a big change for the project but ultimately the reason we put so much time and energy into this is that is important to us we represent the spirit of Jenkins X in everything we do. So when you are using Jenkins X, and you see the new logo, we want you to feel part of the open and friendly community and we want your team to focus on what you really want to focus on: delivering quality software at speed and at any scale.\n\n\n",
            "content/en/blog/news/jenkins-x-next-gen-pipeline-engine.md": "---\ntitle: \"Jenkins X Pipelines integrated with Tekton\"\ndate: 2019-02-19T10:36:00+02:00\ndescription: \"Jenkins X Pipelines are Serverless\" \ncategories: [blog]\nkeywords: []\nslug: \"jenkins-x-next-gen-pipeline-engine\"\nauthor: rawlingsj\naliases:\n  - /news/jenkins-x-next-gen-pipeline-engine\n---\n\n## Introducing the new Jenkins X Pipeline Engine\n\nThe [Jenkins X](https://jenkins-x.io/) team and [CloudBees](https://www.cloudbees.com/) are excited to announce some changes that we\u2019ve been working on and are jntroducing the new [Jenkins X Pipeline Engine](/architecture/jenkins-x-pipelines/).\n\n{{< youtube id=\"EYywyqcPVMY\" autoplay=\"true\" >}}\n\n\nToday, there are two ways that you can run your Jenkins pipelines in Jenkins X. \n\nBy default today, Jenkins X uses a static traditional Jenkins master and Jenkins Pipelines. This mode works well for those who may have complex existing Jenkins pipelines and want to be able to use all the Jenkins X goodness of GitOps and preview environments in Kubernetes. \n\nAs of last October, you can run Jenkins pipelines without the static Jenkins server -- so, it\u2019s [serverless](https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870). \n\nServerless pipeline execution mode will become the best way to run Jenkins X in the not-too-distant future. And as we\u2019re looking forward, we\u2019ve begun to find ways to further improve the serverless mode of Jenkins X. We now have [Jenkins X Pipelines](/architecture/jenkins-x-pipelines/) which are based on [Tekton](https://github.com/tektoncd/pipeline) which is a new Kubernetes-native way of running serverless pipelines. While it\u2019s still in its early stages, Tekton will eventually become the best way to run CI/CD pipelines in Kubernetes. \n\nWe\u2019ve begun some early work to add Tekton into Jenkins X. You can now begin testing the pipeline, and we\u2019d love to get your feedback. To use the new Tekton execution mode you [install your Jenkins X cluster using the new tekton mode](/about/concepts/jenkins-x-pipelines/). You will then get a `jenkins-x.yml` file with your application instead of a Jenkinsfile in your source code repository. This YAML file is organized similarly to the Jenkins declarative pipeline syntax used in a Jenkinsfile.\n\nWe\u2019ll continue to update the community on progress accordingly and welcome your feedback! Feel free to contact the [Jenkins X team via Slack](https://jenkins-x.io/community/#slack), [office hours](https://jenkins-x.io/community/#office-hours) or send us an email with any questions or concerns. The next office hours will be on Thursday, February 21st, at 11:00am ET and Andrew Bayer will be demoing progress. Thanks!\n",
            "content/en/blog/news/jenkins-x-observability.md": "---\ntitle: \"Increasing CI/CD Pipeline Observability in Jenkins X\"\ndate: 2019-07-29T10:44:40-07:00\ndescription: >\n  Increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.\ncategories: [blog]\nkeywords: [observability,instrumentation, logs]\nslug: \"jenkins-x-observability\"\naliases: []\nauthor: Oscar Medina\n---\n<figure>\n<img src=\"https://assets.devopsdays.org/events/2018/toronto/DevOpsDaysTO_May31_2018_ClaySmith.jpg\"/>\n<figcaption>\n<h5>Increasing CI/CD Pipeline Observability, implement tracing</h5>\n</figcaption>\n</figure>\nCredit: [Minds Eye Creative](https://www.mindseyecreative.ca/) | [DevOps Days Toronto](https://devopsdays.org/events/2018-toronto/program/clay-smith/)\n\n# Overview\nYou might have heard of Observability given that folks have been talking about this for a while now.  Sure, you might think it is just the latest tech buzzword.  However, the practice has been around for a long time now.\n\nObservability is certainly relevant today given the Microservices architectures, distributed systems, and the characteristics of modern applications being deployed at a faster pace by leveraging CI/CD pipelines to Kubernetes, in this case using Jenkins X.  Indeed old practices of setting up monitoring after an app is deployed, are no longer acceptable.\n\nLet\u2019s face it, modern apps call for modern instrumentation, not only once they are deployed; even at build-time having proper instrumentation can help you gain insights into what is happening at various stages of the build and release process. This may include spotting any latency issues, performance and dependency download times.  In other words, instrumentation and monitoring should be baked into our deployment pipeline in Jenkins X!\n\nGiven that Jenkins X is the native CI/CD platform for Kubernetes, we must start thinking of Observability in the context of the build and release of our containerized applications via this platform, and not after the deployment process itself.\n\n# What we are doing today\nToday, I walk you through the process of increasing observability in your build and release pipeline by implementing tracing for a couple of events such as `npm install` and `npm test` which are part of a sample NodeJS application.\n\n{{< alert >}}\nNOTE: Tracing is only a small portion of other things that need to be in place.  Logging and Metrics are also required.  The combination and aggregation of this data allows you to understand how observable your pipeline is.\n{{< /alert >}}\n\n\n<figure>\n<img src=\"https://peter.bourgon.org/img/instrumentation/01.png\"/>\n<figcaption>\n<h5>Metrics, Logs, Traces are all needed.</h5>\n</figcaption>\n</figure>\nDiagram by: [Peter Bourgon](https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html)\n\n\n## Leveraging Third-Party Tools\n\nJenkins X was built with extensibility and flexibility in mind.  Today, you can easily create **QuickStarts** for a language not implemented.  You can also build **addOns** to augment the platform functionality.  There are currently **addOns** for `istio`, `prometheus` and `anchore` to name a few.  Given this extensibility, we encourage our community to build these components and share with everyone.\n\nIf you look around, you\u2019ll find that [Honeycomb.io](http://Honeycomb.io) is at the forefront of Observability.  We are collaborating with them to eventually have a _Honeycomb addOn_ for Jenkins X\n\nIn this post, we use the Honeycomb.io API to trace our pipeline events.\n\n\n### Tracing CI/CD Pipeline Events\nIn this scenario we want to trace start and end times for certain events.  In our example NodeJS app, we have commands such as `npm install` and `npm test`, which are part of our **build-pack** pipeline out of the box.  To do start tracing, we modify the Tekton pipeline and inject calls to the Honeycomb.io API before and after these specific **build pack** named steps.\n\n\n{{< alert >}}\nNOTE: Please be sure to sign up for [honeycomb.io](http://honeycomb.io) to obtain your **API Key**\n{{< /alert >}}\n\n\n#### Create Kubernetes Secret\nOnce we have our API Key, we want to create a Kubernetes Secret which is required to make API calls within our pipeline.  To do this, we create it in the `jx` and `jx-staging` namespaces.  For each namespace execute the following command (be sure to modify the namespace value as needed).\n\n```sh\nkubectl create secret generic honeycomb-creds \u2014from-literal=BUILDEVENT_APIKEY=<KEY> --namespace=<NAMESPACE>\n```\n#### Modify Tekton Pipeline\nNow that we have our Kubernetes Secret in place, we will modify the `jenkins-x.yaml` file, which currently has exactly one line as follows:\n\n```yaml\nbuildpack: javascript\n```\n\nLet's go over the important components of the YAML file once modified.  The first items I'd like to highlight, are the environment variables needed.  We need to provide honeycomb.io three key pieces of information:\n\n- **CI Provider**:  this is the JENKINS-X environment variable.  Honeycomb will add additional metadata fields to our dataset\n- **BUILDEVENT_DATASET**: this indicates which dataset we want to populate (you can have many).\n- **BUILDEVENT_APIKEY**: the Kubernetes Secret value, which is the API Key provided via the honeycomb site\n\n```yaml\nbuildPack: javascript\npipelineConfig:\n  env:\n  - name: JENKINS-X\n    value: JENKINS-X\n  - name: BUILDEVENT_DATASET\n    value: jx\n  - name: BUILDEVENT_APIKEY\n    valueFrom:\n      secretKeyRef:\n        key: BUILDEVENT_APIKEY\n        name: honeycomb-creds\n\n```\nThe **build-pack** used for a NodeJS app is **javascript** as detected by the language.  Hence, why the single line we had as the contents of the `jenkins-x.yaml` file.\n\nBecause we know which build-pack is being used, we can determine which named steps exist.  As you can imagine, a typical `npm install` and `npm test` typically exist.\n\nTherefore, we want to inject a timestamp **before** and **after** each of these named steps are called.  The following shows how I inject this.\n\n```yaml\n  pipelines:\n    overrides:\n    - name: npm-install\n      pipeline: pullRequest\n      stage: build\n      steps:\n      - command: echo ===== pullrequest:build:before  sending honeycomb step trace  ===============\n      - name: honeycomb-npm-install-set-step-start-timestamp\n        sh: echo $(date +%s) > step_start\n      - name: honeycomb-npm-install-before-timestamp\n        sh: echo =================================  $(cat step_start)  =================================\n      type: before\n\n    - name: npm-install\n      pipeline: pullRequest\n      stage: build\n      steps:\n      - command: echo ===== pullrequest:build:after   sending honeycomb step trace  ===============\n      - name: honeycomb-npm-install-after-timestamp\n        sh: echo =================================  $(cat step_start)  =================================\n      - name: honeycomb-step-log-after-npm-install\n        sh: ./buildevents step \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" $(echo npm-install | sum | cut -f 1 -d \\ ) $(cat step_start) npm-install\n      type: after\n    - name: npm-test\n      pipeline: pullRequest\n      stage: build\n      steps:\n      - name: honeycomb-npm-test-set-step-start-timestamp\n        sh: echo $(date +%s) > step_start\n      - name: honeycomb-npm-test-before-timestamp\n        sh: echo =================================  $(cat step_start)  =================================\n      type: before\n    - name: npm-test\n      pipeline: pullRequest\n      stage: build\n      steps:\n      - name: honeycomb-npm-test-after-timestamp\n        sh: echo =================================  $(cat step_start)  =================================\n      - name: honeycomb-step-log-after-npm-test\n        sh: ./buildevents step \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" $(echo npm-test | sum | cut -f 1 -d \\ ) $(cat step_start) npm-test\n      type: after\n\n```\nNow that I have  captured timestamps for these two named steps, I want to send an API call to honeycomb as follows.  You will notice how I am using a binary called **buildevents** this is downloaded during the setup of my pipelines which I discuss shortly.\n\nBy concatenating a few metadata pieces that exist as **environment variables** in Jenkins X, I build a unique name which is needed by honeycomb to track things correctly.\n\n```yaml\n    - pipeline: pullRequest\n      stage: build\n      steps:\n      - name: honeycomb-build-name-concat\n        sh: echo the build is \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" and HONEYCOMB_BUILD_START=$(cat build_start)\n      - name: honeycomb-send-success\n        sh: ./buildevents build \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" $(cat build_start) success\n      type: after\n```\n\nWe do the same for the **Release** pipeline...\n\n```yaml\n# release pipeline releated calls\n\n    - name: npm-install\n      pipeline: release\n      stage: build\n      steps:\n      - command: echo ===== release:build:before  sending honeycomb step trace  ===============\n      - name: release-honeycomb-npm-install-step-start-timestamp\n        sh: echo $(date +%s) > release_step_start\n      - name: release-honeycomb-npm-install-before-timestamp\n        sh: echo ================================= release  release-npm-install step start  $(cat release_step_start)  =================================\n      type: before\n\n    - name: npm-install\n      pipeline: release\n      stage: build\n      steps:\n      - name: release-honeycomb-npm-install-after-timestamp\n        sh: echo ================================= release npm-install step end  $(cat release_step_start)  =================================\n      - name: release-honeycomb-step-log-after-npm-install\n        sh: ./buildevents step \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" $(echo release-npm-install | sum | cut -f 1 -d \\ ) $(cat release_step_start) release-npm-install\n      type: after\n\n    - pipeline: release\n      stage: build\n      steps:\n      - name: release-honeycomb-build-name-concat\n        sh: echo the build is \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" and HONEYCOMB_BUILD_START=$(cat release_start)\n      - name: release-honeycomb-build-send-success\n        sh: ./buildevents build \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" $(cat release_start) success\n      type: after\n\n```\n\nThis is portion of the pipeline executes first hence the **setup** node.  There are several things we want to accomplish in the setup of our pipelines.\n\n- Download the Build Events binary provided by Honeycomb, make it executable\n- Create the timestamp we will use to track the **pullRequest** pipeline execution.  I do this by saving a temporary file with the timestamp.\n\nThis is done for both pipelines, as we are working with both.\n```yaml\n\n    pullRequest:\n      setup:\n        steps:\n          - command: echo =========================== pullrequest:setup downloading Honeycomb.io buildevents binary ===========================\n          - name: pullrequest-download-honeycomb-binary\n            sh: curl -L -o buildevents https://github.com/honeycombio/buildevents/releases/latest/download/buildevents-linux-amd64\n          - name: honeycomb-set-binary-permissions\n            sh: chmod 755 buildevents\n          - name: honeycomb-display-buildevents-version\n            sh: ./buildevents --version\n          - name: honeycomb-setup-build-timestamp\n            sh: echo $(date +%s) > build_start\n          - name: honeycomb-output-debug\n            sh: echo the build is \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" and HONEYCOMB_BUILD_START=$(cat build_start)   =======================================================\n    release:\n      setup:\n        steps:\n        - command: echo =========================== release:setup downloading Honeycomb.io buildevents binary ===========================\n        - name: release-download-honeycomb-binary\n          sh: curl -L -o buildevents https://github.com/honeycombio/buildevents/releases/latest/download/buildevents-linux-amd64\n        - name: release-honeycomb-set-binary-permissions\n          sh: chmod 755 buildevents\n        - name: release-honeycomb-setup-build-timestamp\n          sh: echo $(date +%s) > release_start\n        - name: release-honeycomb-output-debug\n          sh: echo the build is \"${APP_NAME}-${PULL_NUMBER}-${VERSION}-${BUILD_NUMBER}\" and HONEYCOMB_BUILD_START=$(cat release_start)   =======================================================\n\n```\n\nOnce this pipeline executes, the dashboard on the honeycomb.io site will show us the execution tracing as follows.\n\n\n\n\n![Honeycomb Dashboard](/news/jenkins-x-observability/honeycomb_trace_example.png)\n\n\n\nAs you can see, we have a unique name for our build being traced, underneath that we are tracking the two events `npm install` and `npm test` time spans.  We can easily see how long our dependencies are taking to download, and how long does it take to run the tests for the app.\n\n# Conclusion\n\nHopefully I\u2019ve enticed you to at least look into why you might consider incorporating observability into your build and release process. There is a lot more that can be done.  In a future post, we will cover additional setup.\n\n\n## Jenkins World | DevOps World 2019\nI'll be demoing this solution at various times while at the conference this year.  You can still register and get a big discount by using code: **PREVIEW**.  You can find my full schedule on the [official website](https://www.cloudbees.com/devops-world/san-francisco/agenda)\n\n\nCheers,<br/>\n[@SharePointOscar](https://twitter.com/SharePointOscar)",
            "content/en/blog/news/jenkins-x-tekton.md": "---\ntitle: \"Jenkins X  \u2764 Tekton\"\ndate: 2020-03-11\ndraft: false\ndescription: >\n  Like Jenkins X, Tekton is Kubernetes native and has been built from the ground up to leverage Kubernetes. \ncategories: [blog]\nkeywords: [Jenkins,Tekton,2020]\nslug: \"tekton\"\naliases: []\nauthor: Ethan Jones\n---\n\nJenkins X is committing fully to Tekton as its pipeline execution engine. We are convinced that this is the right choice for Jenkins X, as a cloud-native CI/CD platform on Kubernetes, and for our users. \n\nThis means we are formally deprecating - and will be removing - traditional Jenkins static masters support inside Jenkins X. We are excited about the new way forward, which we\u2019ll discuss further below, but it\u2019s important to be clear about what this means for current users. If you are already using Jenkins X with Tekton-based pipelines, then nothing will change for you, and you do not need to change anything. If you\u2019re running a traditional Jenkinsfile on Jenkins X, then you have three choices: \n\n* Continue using static masters with a version of Jenkins X that supports Jenkins static masters\n    * Note that for versions of Jenkins X that support Jenkins static masters we will not provide any security fixes either to the jx CLI or to the Jenkins image used after mid April.\n* Return to a more optimized Jenkins installation\n* Or, if you plan on updating your version of Jenkins X to keep up with the latest features, then you will need to adapt your setup\n\nIn this post, we will discuss how we arrived at this decision, why there is currently a choice between two different pipeline execution engines, and why it is better for the project and for our users to standardize on one. We will go over in more detail what these changes mean for current users, and the options we have to help current users on Jenkins static masters with these changes.\n\n## A story of Pipeline Engines\n\nWhen Jenkins X was founded two years ago, Jenkins was chosen as its pipeline execution engine. Why? \n\n1) Familiarity: Jenkins is the most widely used orchestration system in history, and at CloudBees we know it quite well.\n\n2) There was not a Kubernetes native pipeline engine, ie, there was no Tekton\n\nA year later, Tekton had been founded and Jenkins X rapidly adopted the new Kubernetes-native pipeline engine. It became one of two options for users to choose as their pipeline execution engine within Jenkins X. This was huge for us, because Jenkins was never built to be used in the way we were using it, and the way Jenkins is architected made it very difficult to build Jenkins X forward with our dream features and keep things compatible and running well - Tekton solved all these problems.\n\nAs a result, though, the users of Jenkins X can now choose between two very different pipeline execution engines -- Jenkins static masters or our own Tekton-based pipelines.\n\nIdeally, a developer using Jenkins X does not need to think about the pipeline engine executing their CI/CD pipelines.  In practice, though, the Jenkins X user experience varies significantly depending on which pipeline engine the user choses. This is because of technical complexity and use case difference that makes standardization hard to achieve and even harder to maintain.\n\nAs more functionality is added to the project which fits seamlessly with Tekton, Jenkins as a pipeline engine for Jenkins X increasingly feels unoptimized and inappropriate for the project. As amazing as Jenkins is, it wasn\u2019t built to be an ephemeral cloud-native pipeline engine inside of a larger workflow tool, and maintaining Jenkins as a pipeline engine for Jenkins X has proven difficult and complex. The Jenkins X user experience with Jenkins static masters is already lesser than the user experience with Tekton, and it will only degrade further over time. For this reason, we have been recommending Tekton as the default pipeline engine in Jenkins X for more than 6 months now.  \n\nThe way we see it, traditional Jenkins running on Kubernetes makes sense for Jenkins-based apps that already exist and for teams that aren\u2019t ready to change their tooling and their process. Jenkins is rock-solid and can run forever doing what it does today for the hundreds of thousands of teams that use it. But, that\u2019s not what Jenkins X is for. Jenkins X is for brand new applications, being built from the ground up for the world of Kubernetes-based, cloud-native development - and we want to make things as great as possible for all the developers building those kinds of applications right now.\n\n## Kubernetes native \n\nAlthough for users the pipeline execution engine should be an implementation detail, for the Jenkins X project Tekton is clearly a better, more natural, fit. Like Jenkins X, Tekton is Kubernetes native: it was designed from the ground up to leverage Kubernetes, not merely integrate with Kubernetes.\n\nThe Jenkins X core team has chosen to standardize on Tekton as a pipeline execution engine for the following reasons:\n\n* Kubernetes native\n* Declarative, not scripted\n    * This makes pipelines easier to author, read, and maintain\n    * Highly opinionated syntax, making it easier to work in a best-practices way\n    * YAML! Not Groovy or Groovy-based syntax \n\nHowever, Jenkins X has its own syntax on top of Tekton, to improve the user experience. Tekton\u2019s syntax is very explicit, which is excellent for the level at which Tekton is operating. Jenkins X, as a developer-centric CI/CD platform, is able to take the information already available regarding a user\u2019s configuration and provide that context. Additionally, Jenkins X provides an opinionated, best-practices based workflow. For these reasons, the amount of information a user needs to provide is reduced and the user experience is guided and simplified.\n\nFor Jenkins X, as a CI/CD platform on Kubernetes, Tekton is the right choice for the pipeline execution engine. Focusing on one pipeline engine going forward will enable a leaner, cleaner codebase and a better end-user experience. Standardizing on Tekton as the pipeline execution engine for Jenkins X enables the core team to focus on improving the Jenkins X user experience without having to support compatibility with two different pipeline engines.\n\n## What\u2019s next \n\nWe\u2019re deprecating traditional Jenkins masters in all new versions of Jenkins X. They will be removed from the codebase of future Jenkins X versions from April 20th. \n\nWhile this is an aggressive timeline, it\u2019s important to know that if you\u2019re currently running Jenkins X with traditional Jenkins today, it\u2019s not going to disappear. You won\u2019t be able to upgrade to new versions - but we will cut one final release right before the deadline to give you a stable version to use for as long as you need.\n\nNext, If you\u2019re looking to migrate existing declarative Jenkins jobs to Jenkins X, we have a [partial Jenkinsfile translator](https://github.com/jenkins-x/jx-convert-jenkinsfile) that can help point you in the right direction. While it won\u2019t fully translate all Jenkinsfiles, it will help point you in the right direction to get the ball rolling.\n\nAnd finally, if you\u2019d like to keep your Jenkins jobs running but as individual steps inside a Jenkins X pipeline, [we have a proposal for remote execution](https://jenkins-x.io/docs/labs/jenkins/) as a new path forward. Since Jenkins itself can be run on Kubernetes, switching to a remote execution step via Jenkins X - or entirely to Jenkins if it makes more sense for you - should be an easy switch to make. We think this is a much better path forward, as it keeps Jenkins entirely out of Jenkins X while still letting you adopt Jenkins X right away and migrate your traditional Jenkins jobs to Tekton-based jobs over time. We expect a working proof of concept for the community soon.\n\n## Conclusion\n\nWe know this is a big announcement on a fast timeline and a lot of ideas to take in. We\u2019d love to talk to you about it! Please join the [office hours we have arranged on March 19th](https://jenkins-x.io/community/office_hours/) that will be fully dedicated to discussing this. \n\nYou may reach out to me, [Ethan Jones](mailto:ejones@cloudbees.com), if you\u2019d like to discuss things one on one with some of our product and engineering team members.",
            "content/en/blog/news/jenkinsworld-2019-agenda.md": "---\ntitle: \"DevOps World-Jenkins World 2019 San Francisco: Agenda is Live\"\ndate: 2019-06-06T12:20:42-07:00\ndraft: false\ndescription: >\n  DevOps World | Jenkins World 2019 Agenda is live.\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-world-agenda\"\naliases: []\nauthor: Alyssa Tong\n---\n\n<figure>\n<img src=\"/images/2019-dwjw-san-fran-rev.png\"/>\n</figure>\n\n[DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/san-francisco) is the largest Jenkins gathering of the year.  From August 12 - 15, 2019 the event will take place at the Moscone West Center in San Francisco.  The event boasts 100+ sessions, and will offer training, hands-on workshops, onsite certification, contributor summit and much more.  Conference attendees can expect to be inspired while learning the latest innovations from industry leaders. Attendees will learn the value that digital transformation has in delivering software more efficiently, more quickly and with higher quality.\n\nWe are excited to announce most of the agenda for DevOps World | Jenkins World San Francisco is now live. We will continue to fill out the agenda with more sessions, trainings/workshops, and activities in the coming weeks. Below is a sampling of the Jenkins X sessions taking place at DevOps World | Jenkins World San Francisco:\n\n- **Continuous Delivery with Jenkins X Workshop**\n\nWe need a tool that will allow us to leverage all the latest and greatest processes and tools. At the same time, we need them to be simple and straightforward so that everyone can benefit from them. That is the primary objective behind the Jenkins X project. It brings power by combining best practices and tools while keeping it so simple that anyone can use it.\n\n- **Cloud Native CI/CD with Jenkins X and Tekton**\n\nIn this talk, we\u2019ll explain the CI/CD challenges in a cloud native landscape, and show how Jenkins X rises to them by leveraging open source cloud native technologies like Tekton.  We will describe how the Jenkins X project has evolved on it's own cloud native journey and the amazing benefits we are gaining by using the cloud well.  People who attend will leave with a better understanding of the awesome new technologies, architecture and benefits which are transforming the way we build, release, deploy and run our software.\n\n- **Jenkins X Optimized for GCP -  Craig Barber**\n\nJenkins X is an industry-wide leap forward to provide developers with a cloud native CI/CD experience. As the next evolution in the Jenkins space, Jenkins X redefines how CI/CD workloads run. In this talk, we will guide you on how to deploy, configure and use Jenkins X CI/CD pipelines within the Google Kubernetes Engine while taking full advantage of Jenkins X's native integration with GCP's industry leading services.\n\n- **Integrating JX (Serverless) with your Business**\n\nCI/CD + GitOps is changing the way that we build software, it comes with a great cultural change and challenges but a lot of advantages. While using JX is an amazing starting point to get familiar with CI/CD and GitOps, companies can integrate with these tools in a whole new level to build the next generation SaaS offerings. In this presentation we will look at the Kubernetes Resources provided by JX and how can we integrate our own domain specific concepts to leverage JX from inside our services/products.\n\n- See the full agenda [here](https://web.cvent.com/event/eac49765-9235-4b96-aaba-3bcb9cc837c3/websitePage:645d57e4-75eb-4769-b2c0-f201a0bfc6ce)\n\nThe Jenkins X creators and contributors will be onsite to mingle and answer any Jenkins X technical questions you might have.  Come if you are simply curious and just want to learn more or ask the experts those Jenkins X questions that has been keeping you up at night.\n\nHope to see you there!\n",
            "content/en/blog/news/jenkinsworld-2019-demos.md": "---\ntitle: \"DevOps World - Jenkins World 2019 San Francisco: Lunch Time Demos\"\ndate: 2019-07-18T12:20:42-02:00\ndraft: false\ndescription: >\n  DevOps World | Jenkins World 2019 Lunch Time Demos.\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"jenkins-world-lunch-demos\"\naliases: []\nauthor: Alyssa Tong\n---\n\n<figure>\n<img src=\"/images/2019-dwjw-san-fran-rev.png\"/>\n</figure>\n\nIf you\u2019re looking for more opportunities to learn Jenkins and Jenkins X during the lunch hours while at [DevOps World | Jenkins World 2019 San Francisco](https://www.cloudbees.com/devops-world/san-francisco), come join us at the Jenkins and Jenkins X Community Booth!\n\nIf you don't yet have your pass for [DevOps World | Jenkins World 2019 San Francisco](https://www.cloudbees.com/devops-world/san-francisco), and don't want to miss out on the fun, you can get yours using **JWFOSS** for a 30% discount.\n\nDuring lunch hours we are scheduling the following demo briefs at the Jenkins and Jenkins X Community Booth:\n\n**Wednesday  August 14, 2019**\n\n**12:10 - 12:25pm Faster Git [Mark Waite](https://github.com/MarkEWaite)**\n\nAttendees will learn the techniques they can use with Jenkins to make their systems clone and update git repositories faster and with less disc space.\n\n**12:25 - 12:40pm\tObservability in Jenkins X\t[Oscar Medina](https://github.com/sharepointoscar)**\n\nIf you are using Jenkins X, you\u2019re already building at rapid pace.  However, most miss the opportunity to gain real insights into their build and release pipeline.  I'll show you how you can increase observability by activating metric capture and analysis during a containerized application deployment with Jenkins X.  This  entails modifying the declarative Tekton pipelines.\n\n**12:40 - 12:55pm\tJenkins-Rest, A JClouds Java Library for the Jenkins REST API\t[Martin d'Anjou](https://github.com/martinda)**\n\nUsing the Java-Rest library, we demonstrate how to submit a job to Jenkins, and track it to its completion, all from the command line, without ever touching the GUI.\n\n**12:55 - 1:10pm DevOps without Quality: An IT Horror Story\tLaura Keaton**\n\nDevOps, the current IT Industry sweetheart, has a dark secret that has victimized organizations on their transformational journey. Investigate two case studies that left development and delivery teams in tatters and how quality engineering solutions could have prevented their disastrous outcomes.\n\n**1:10 - 1:25pm\tSecuring Your Jenkins Container Pipeline with Open Source Tools\t[Christian Wiens](https://github.com/cwiens1211)**\n\nDiscuss the security pitfalls of containers and how embedding an open source image scanning and policy based compliance tool like Anchore into your CI/CD pipeline can mitigate this risk.\n\n**Thursday  August 15, 2019**\n\n**12:25 - 12:40pm\tResults from the 2019 Jenkins Google Summer of Code\t[Martin d'Anjou](https://github.com/martinda)**\n\nIn 2019, the Jenkins project participated in the Google Summer of Code. This is an annual, international, program which encourages college-aged students to participate in open source projects during the summer break between classes. In 2019, we had dozens of applications and many student projects. In this session, we will showcase the students' projects and talk about what they bring to the Jenkins ecosystem.\n\n**12:40 - 12:55pm\tSysdig Secure Jenkins Plugin\t[Marky Jackson](https://github.com/markyjackson-taulia)**\n\n[Sysdig Secure](https://sysdig.com/products/secure) is a container security platform that brings together docker image scanning and run-time protection to identify vulnerabilities, block threats, enforce compliance, and audit activity across your microservices. The Sysdig Secure Jenkins plugin can be used in a Pipeline job, or added as a build step to a Freestyle job, to automate the process of running an image analysis, evaluating custom policies against images, and performing security scans.\n\n**12:55 - 1:10pm\tUsing React for plugin UI\t[Jeff Pearce](https://github.com/jeffpearce)**\n\nThe working hours plugin has a date driven UI. During this summer's Google Summer of Code, our student rewrite the UI in React, so that we could take advantage open source modules such as calendar pickers. I'll talk about how the student approached the UI, demonstrate the UI and talk about particular challenges we faces.\n\n**1:10 - 1:25pm\tJenkins GKE Plugin [Craig Barber](https://github.com/craigdbarber)**\n\nIn this demo we will showcase the Jenkins GKE plugin, newest addition to GCP\u2019s suite of officially supported plugins. We\u2019ll show how to leverage this plugin to deploy applications built in Jenkins pipelines to multiple clusters running in GKE.\n\nGrab your lunch and join us at the community theater!\n",
            "content/en/blog/news/jenkinsworld-2019-takeaways.md": "---\ntitle: \"Jenkins X Key Takeaways from Jenkins World 2019\"\ndate: 2019-09-03\ndraft: false\ndescription: >\n  The top 12 things I learned about Jenkins X at DevOps World | Jenkins World\ncategories: [blog]\nkeywords: [Jenkins X,DevOps World,Jenkins World,2019]\nslug: \"jenkinsworld-2019-takeaways\"\naliases: []\nauthor: John McGehee\n---\nJenkins X was the star of the show at DevOps World | Jenkins World 2019. In this article I will\nshare with you the dozen key things I learned about this exciting new cloud native CI/CD tool.\nBeyond its capabilities as a CI/CD tool, Jenkins X also provides an excellent example of how to architect\na cloud native application on Kubernetes.\n\nJenkins X is a completely new CI/CD system that shares little but its name with the existing Jenkins. Jenkins X incorporates the best practices from the *State of DevOps* reports and the seminal book, *Accelerate* by\u00a0[Nicole Forsgren](https://twitter.com/nicolefv),\u00a0[Jez Humble](https://twitter.com/jezhumble)\u00a0and\u00a0[Gene Kim](https://twitter.com/RealGeneKim).\n\n<img width=\"70%\" height=\"70%\" alt=\"Capabilities of Jenkins X\" src=\"https://www.cloudbees.com/sites/default/files/jenkinsx_capabilities.png\">\n\nI attended multiple presentations by [James Strachan](https://twitter.com/jstrachan), [Andrew Bayer](https://twitter.com/abayer) and [James Rawlings](https://twitter.com/jdrawlings) of CloudBees, and [Mauricio Salatino](https://twitter.com/salaboy). Mr. Rawlings even gave two presentations. Each presentation covered Jenkins X from a different perspective, so here I compose everything into a unified summary.\n\n## Setting up Kubernetes\n\n[Terraform is recommended](https://cb-technologists.github.io/posts/gitops-series-part-1/) for\nsetting up the required Kubernetes cluster and storage buckets. As explained below, you may find it\nuseful to run `jx boot` from within Terraform.\n\nBy default, Terraform stores its state in local file `terraform.tfstate`. In an ephemeral cloud\nenvironment, this state gets lost and you would create a new cluster each time you applied\nTerraform. Remedy this by specifying a [Terraform backend](https://www.terraform.io/docs/backends/index.html) to store the state in more durable storage like Google Cloud Storage or\nAmazon S3.\n\nPresenters recommended nginx as an ingress controller and\n[cert-manager](https://cb-technologists.github.io/posts/gitops-series-part-1/) to manage TLS\n(HTTPS SSL) certificates.\n\nFor introspection, navigation and object management of your Kubernetes cluster, try\n[VMWare's Octant UI tool](https://github.com/vmware/octant). It runs on your local client just like\n`kubectl`. An advantage of Octant is that it authenticates the same way as `kubectl`: if `kubectl` works, octant works.\n\n## Setting up Jenkins X\n\nFor a stable build of Jenkins X, get the\n[CloudBees Jenkins X Distribution](https://www.cloudbees.com/products/cloudbees-jenkins-x-distribution).\n\nJenkins X has two modes:\n\n* Static traditional Jenkins master with Jenkins pipelines. Use this if you want to continue\n  using your existing Jenkinsfiles.\n* Jenkins X pipelines based on [Tekton pipelines](https://github.com/tektoncd/pipeline).\n  This is now the default, and is recommended for the long term. This mode is controlled by\n  the new `jenkins-x.yml` file, whose syntax resembles the Jenkinsfile declarative pipeline\n  syntax.\n\nThere are two interactive quick start commands. The older and presumably more stable is:\n```sh\njx create quickstart\n```\n\nThe new way to install, configure and upgrade Jenkins X is:\n```sh\njx boot\n```\n\n`jx boot` interactively queries the user for the required setup data, recording the responses in file `jx-requirements.yml`. It is re-entrant so you can run it repeatedly. Running `jx boot` from within Terraform is a useful technique.\n\nJenkins X evolves quickly, so `jx boot` records the Jenkinx X version to use in field\n`versionStream` within `jx-requirements.yml`. This establishes the version to use on subsequent\ninvocations of `jx boot`. Update `versionStream` when you want to start using a newer version of\nJenkins X.\n\n## Getting status\n\nGet logs using:\n```sh\njx get build logs\n```\n\nTrack execution with:\n```sh\njx get activity\n```\n\nList preview environments using:\n```sh\njx get environments\n```\n\n## Basic concepts in Jenkins X pipelines\n\nAt this point a little vocabulary lession is in order.\n\n### Step\n\nA step is a command that runs in a separate container, sharing a workspace with other steps. Once a step fails, subsequent steps will not run. Step names must be unique within a stage. There is also a loop step, which runs the same command for each value in a list.\n\nAll the usual Kubernetes container configuration of resources, limits, volume mounts and so on are available within steps.\n\n### Stage\n\nA stage is a unit of work in a pipeline. A stage contains either steps or nested stages. Each stage with steps runs in its own pod. The workspace is copied from one stage's pod to the next.\n\n### Pipeline\n\nThere are two types of pipelines:\n\n* Release pipelines merge into master, create a release and trigger promotion\n* As the name implies, pull request pipelines are used to create a merge request preview environment\n\nA pipeline is controlled by a `jenkins-x.yml` file at the top of the source control repository.\n\n### Meta pipeline\n\nJenkins X has a bootstrapping problem: how to create a pipeline? The meta pipeline creates the real pipeline, sort of like Maven `release:prepare`.\n\n## Defining pipelines\n\nThere are three ways to define a Jenkins X pipeline:\n\n* Automatically via a build pack. The build pack automatically detects the source code language.\n* Specify a build pack and then override portions of it in `jenkins-x.yml`\n* Fully define an entirely new pipeline in `jenkins-x.yml`. This is only useful for a pipeline\n  that will not be reused. For reusable pipelines, define a build pack.\n\nBuild packs are standard, opinionated pipelines for languages. They consist of a predefined\nsequence of steps that run in a consistent order. They are similar to stages in that they can be\noverridden and extended.\n\nJenkins X is controlled by a `jenkins-x.yml` file that lives at the root of the Git repository.\nIn `jenkins-x.yml`, you can:\n\n* Override build packs\n* Run steps before existing step using setup\n* Use `type: replace` to replace a step\n* To add a step to the end of the stage, leave the step name unspecified\n* To apply an override to all pipelines, leave the pipeline name unspecified\n* Modify container configuration or environment variables. Override environment variables\n  using the same syntax as Kubernetes.\n\nYou can also define a completely new pipeline in `jenkins-x.yml`, but this is useful chiefly for debugging and testing. Again, make a pipeline reusable by defining it as a build pack.\n\n### Default pipeline\n\nPull request and release pipelines are often very similar, so define common attributes for both\nin a default pipeline.\n\n## Validating syntax and IDE autocompletion\n\nCheck your pipelines using:\n```sh\njx step syntax validate\n```\n\nPipelines are usually defined by multiple YAML files. See how they fit together in a single flat pipeline file:\n```sh\njx step syntax effective\n```\n\nThe Jenkins X YAML schema is uploaded to [schemastore.org](https://schemastore.org), where amazingly IntelliJ and the VS Code YAML Language Extension automatically pick it up.\n\n## GitOps, Prow and Lighthouse\n\nGitOps is at the core of Jenkins X. GitOps extends Infrastructure as code by using pull requests to manage infrastructure changes. These pull requests might be created by developers, or they might be generated automatically by tooling.\n\nAccordingly, Jenkins X creates a preview environment for each run of a pull request pipeline.\n\nJenkins X currently uses Prow as a webhook handler and ChatOps engine for pull requests. Importantly, **at this time Prow supports only GitHub.**\n\nSince Jenkins X uses only a small portion of Prow, and since Prow supports only GitHub, the\nJenkins X team is developing [Lighthouse](https://github.com/jenkins-x/lighthouse) as a\nlightweight replacement. In this very experimental webhook handler, the Git provider is factored\nout so that new providers can be easily added.\n\nAs an aside, adding a [new Git provider for Lighthouse](https://github.com/jenkins-x/go-scm) would be an excellent way to learn the Go language.\n\n## Avoiding committing secrets\n\nIt can be difficult to avoid commiting secrets to Git. Thus separate file `parameters.yml` contains URL references to a secret. Also, Jenkins X runs Helm in a temporary directory.\n\nThe Helm chart `values.yml` files are separated into individual `values.tmpl.yml` files. These are templates so you can easily interpolate secrets into them.\n\n## Implementing HTTPS in preview environments\n\nIt is difficult to get HTTPS to work in preview environments because each preview environment gets a different URL. James Rawlings demonstrated the solution:\n\n1. Specify that you want to use DNS for HTTPS in `jx boot`. This will cause [external-dns](https://github.com/kubernetes-incubator/external-dns) to be installed automatically.\n2. Add `externalDNS` in `requirements.yml`:\n   ```\n   ingress:\n     externalDNS: true\n   ```\n\n3. Then, create the domain (this example assumes you are using GKE):\n   ```\n   jx create domain gke --domain rawlingsdemo.co.uk\n   ```\n\n4. Finally, go to your domain registrar and replace their name servers with Google's name servers\n\n## Using Jenkins X in multiple clusters\n\nStrictly speaking, Jenkins X does not require its own cluster, but things work better operationally if you use separate clusters for testing, staging and production.\n\nYou only need to install Jenkins X on the development cluster. Install the Jenkins X [environment controller](https://github.com/jenkins-x-charts/environment-controller) on the staging and production clusters. This is further explained in the article [Multiple Clusters](https://jenkins-x.io/getting-started/multi-cluster/).\n\n## Upcoming Jenkins X features\n\nJenkins X is evolving rapidly. Upcoming features are:\n\n* Conditional execution of stages\n* Jenkins X apps to inject steps and stages\n* More advanced configuration of stage pods\n* More advanced solution for pipeline and stage sharing across repos\n\n## Learning Jenkins X\n\nMany fine examples with source code on GitHub were presented:\n\n* Mauricio Salatino presented what was by far\n  [the most extensive example](https://salaboy.com/2019/08/12/building-cloud-native-platforms-with-jenkins-x/).\n  Starting with a monolithic application, he decomposed it into microservices, built it with\n  Jenkins X and deployed it on Kubernetes.\n* For instruction on how to use Kubernetes itself, Mauricio recommends\n  [learnk8s.io](https://learnk8s.io/academy/).\n* Kurt Madel's CloudBees Technologists Group gave\n  [several lightning talks](https://cb-technologists.github.io/posts/lightning-talks-dw-jw-2019/)\n  that discuss Jenkins X.\n  [GitOps for Jenkins Infrastructure](https://cb-technologists.github.io/posts/gitops-series-part-1/)\n  contains great Terraform tips for regular Jenkins (not Jenkins X). Whether or not you really\n  want to use GitOps for your blog,\n  [GitOps for Blogging, Why Not?](https://github.com/cb-technologists/blog)\n  demonstrates GitOps principles.\n\n## Getting involved with the Jenkins Community\n\nMultiple presenters recommended the [Jenkins X Slack channels](https://jenkins-x.io/community/) as the best source of help and information. For more ways to get involved, see the [Jenkins X community page](https://jenkins-x.io/community/). I'll see you there.\n",
            "content/en/blog/news/jenkinsworld-lisbon-medina-bayer-talk.md": "---\ntitle: \"Introduction to Jenkins X @ Jenkins World | DevOps World Lisbon\"\ndate: 2019-10-16T12:20:42-07:00\ndraft: false\ndescription: >\n  Introduction to Jenkins X - for those who've never used it.\ncategories: [blog]\nkeywords: [Jenkins,Community,2019]\nslug: \"intro-to-jenkins-x-by-oscar-andrew\"\naliases: []\nauthor: Oscar Medina\n---\n\n<figure>\n<img src=\"/images/jw-libson-oscar-andrew-talk.png\" width=\"80%\"/>\n</figure>\n\n\nIn today\u2019s technology landscape, people find it difficult to get up to speed with technologies for many reasons.  One reason that comes to mind is time.  Another may be that  some folks are just not able to read a tutorial or blog post and be successful at ramping up with a specific technology.  \n\nSo these individuals need either a bootcamp or to sit and watch live demos and have someone explain concepts.  It is for these reasons that Oscar and Andrew [will be introducing Jenkins X](https://sched.co/VFHj) to people that might have heard of it, but have not yet had a chance to play with it.   \n\nFolks will be introduced to Jenkins X with simplicity in mind.  The speakers will walk through all the concepts of the platform. To make things fun, and easier to follow - the speakers plan to carry out the session in the form of a skit in which one speaker is an IT person from a fictitious company, and the other is the Jenkins X Expert.\n\nYou will not want to miss this session if you are considering using a Kubernetes native CI/CD that abstracts you from the complexities of Kubernetes.\n\n\nOn December 4, 2019, [Andrew Bayer](https://twitter.com/abayer) and I, [@sharePointOscar](https://twitter.com/SharePointOscar) will be speaking more on this topic at DevOps World | Jenkins World Lisbon. Join us if you'd like to hear more on this topic.  Use **JWFOSS** for 30% discount on [registration](https://web.cvent.com/event/94fdc1a9-a1d1-46d6-9085-b995bf895d0b/regProcessStep1?RefId=web)\n\n\nAndrew and I look forward to helping you get to know Jenkins X!\n\n\n",
            "content/en/blog/news/jenkinsworld.md": "---\ntitle: \"Jenkins Community Awards\"\ndate: 2019-04-17T12:20:42-07:00\ndraft: false\ndescription: >\n  DevOps World | Jenkins World 2019  3rd annual Community Awards.\ncategories: [blog]\nkeywords: [Jenkins,Awards,Community,2019]\nslug: \"jenkins-community-awards\"\naliases: []\nauthor: Oscar Medina\n---\n\n<figure>\n<img src=\"/images/dwjw-2019-io.jpg\"/>\n</figure>\n\n It is time for the 3rd annual,  [DevOps World | Jenkins World 2019](http://www.cvent.com/c/abstracts/bd21fac2-4c66-4ddf-b4c3-a5eb42270e1c) Community Awards. These nominations are indicative of the excellent work Jenkins community members are doing for the betterment of Jenkins.\n\nThis will be the third year we are commemorating community members who have shown excellence through commitment, creative thinking, and contributions to continue making Jenkins a great open source community.\n\n## The award categories include:\n- **Most Valuable Contributor** - This award is presented to the Jenkins contributor who has helped move the Jenkins project forward the most through their invaluable feature contributions, bug fixes or plugin development efforts.\n- **Jenkins Security MVP** - This award is presented to the individual most consistently providing excellent security reports or who helped secure Jenkins by fixing security issues.\n- **Most Valuable Advocate** - This award is presented to an individual who has helped advocate for Jenkins through the organization of their local Jenkins Area Meetup.\n- **Most Innovative Jenkins X Implementation** - Presented to an innovative user who has embraced Jenkins X. \n\n[Nominate yourself](https://www.cvent.com/c/abstracts/bd21fac2-4c66-4ddf-b4c3-a5eb42270e1c) or someone today! Winners will be announced at [DevOps World | Jenkins World San Francisco 2019](https://www.cloudbees.com/devops-world) on August 12-15. The deadline for nomination is **Tuesday, April 30th**.\n\nWe look forward to hearing about the great Jenkins work you are doing.\n\n",
            "content/en/blog/news/jep-submitted.md": "---\ntitle: \"JEP 400 submitted\"\ndate: 2018-03-09T18:36:00+02:00\ndescription: >\n    We have submitted JEP 400 to the Jenkins Foundation\ncategories: [blog]\nkeywords: []\nslug: \"jep-400-submitted\"\naliases: []\nauthor: jstrachan\n---\n\n## JEP 400 Submitted for Jenkins X\n\nWe have submitted [JEP 400](https://github.com/jenkinsci/jep/tree/master/jep/400) to propose Jenkins X as a sub project in the Jenkins Foundation.\n\nPlease [check out JEP 400](https://github.com/jenkinsci/jep/tree/master/jep/400) and [let us know what you think on the Jenkins dev list](https://groups.google.com/d/msg/jenkinsci-dev/O8F8s1Iyq5I/H_2GHzUlAgAJ).\n",
            "content/en/blog/news/jx-202201.md": "---\ntitle: \"January 2022 updates from the JX community\"\ndate: 2022-02-02\ndraft: false\ndescription: >\n  January 2022 updates from Jenkins X\ncategories: [blog]\nkeywords: [Community, 2022]\nslug: \"January2022Updates\"\naliases: []\nauthor: Ankit D Mohapatra\n---\n\nHappy new year 2022!\n\nThis monthly blog post series is an attempt to showcase all the incredible work being done by the Jenkins X community to the wider audience.\n\nLot of exciting features, bug fixes and documentation improvements were made.\n\n### Community effort\n\n- We restarted the office hours this month (https://jenkins-x.io/community/#office-hours). Drop by to say hello, we are a friendly group!\n- First Jenkins X survey was also created this month (https://jenkins-x.io/blog/2022/01/21/survey-1-2022/). We have extended the deadline by 2 weeks (Feb 11, 2022 midnight UTC), so fill it out if you have not yet. We will use this for the roadmap moving forward.\n- Monthly blog post update series to keep up with all the amazing progress.\n\n### Features\n\n- jx-plugins/jx-gitops:\n  - Cron job to delete old boot jobs\n  - Option to Keep n boot jobs older than default age\n- jenkins-x/lighthouse:\n  - Support for using gitlab nested repositories\n  - Allow running lighthouse with cluster scoped permissions\n  - Add a flag to keep polling releases until commit status is successful\n  - Do not include tekton roles when tekton engine is disabled\n- jx-plugins/jx-pipeline:\n  - Use pager to aid in visualizing long pipeline logs\n- jenkins-x-terraform/terraform-jx-azure\n  - Support provisioning spot instances in the azure terraform jx module\n- jx-plugins/jx-verify:\n  - Support specifying label for jx verify install\n- jenkins-x-plugins/jx-registry:\n  - Support adding ECR registry policy using jx-registry\n- jenkins-x-charts/jxboot-helmfile-resources:\n  - Make all storage locations available as envrironment variables\n\n### Bug fixes\n\n- GoogleContainerTools/kaniko (upstream fix - outside jx codebase):\n  - Kaniko in jx pipelines can now push to ACR (Azure Container Registry)\n- jenkins-x/terraform-aws-eks-jx:\n  - Remove deprecated jx v2 keys from requirements configmap\n  - Fix issue with on-demand billing mode of dynamodb\n- jenkins-x-plugins/jx-promote:\n  - Fix local chart check when using cloud buckets to store helm charts\n- jenkins-x-plugins/jx-project:\n  - Fix jx project rendering invalid chart.yaml files on import for custom packs in catalog\n\n### Documentation improvement\n\n- Guides on configuring Azure service principle and GCP service account for terraform users (https://jenkins-x.io/v3/admin/platforms/azure/svc_principal/ and https://jenkins-x.io/v3/admin/platforms/google/svc_acct/)\n- New section showing current Jenkins X users (https://jenkins-x.io/#users)\n- New section on learning resources for Jenkins X v3 (https://jenkins-x.io/v3/learning-resources/)\n- Improved documentation on setting up Jenkins X v3 on AWS EKS (https://jenkins-x.io/v3/admin/platforms/eks/)\n- Improved guide on installing and configuring Jenkins X on k3s (https://jenkins-x.io/v3/admin/platforms/k3s/)\n- Fixed content getting clipped in mobile view\n\n### Plumbing/Quality improvements\n\n- jenkins-x/jx:\n  - Disable running github actions on forks\n- jenkins-x/jx-docs:\n  - Upgrade docsy submodules\n  - Upgrade hugo docker image\n  - Migrate jx-docs to new pipeline format\n- jenkins-x/jx-gitops:\n  - upgrade kubectl version for kpt\n  - upgrade helm and helmfile version\n\nHuge thanks to all the contributors for their hardwork!\n\n- ankitm123\n- babadofar\n- dippynark\n- ia-mfriegang\n- jalonsoa\n- msvticket\n- rajatgupta24\n- rawlingsj\n- sergiogiuffrida\n- slimm609\n- TedGelpi\n- tomhobson\n- yelhouti\n",
            "content/en/blog/news/labs-202002.md": "---\ntitle: \"Jenkins X Labs\"\ndate: 2020-02-28T00:00:00-00:00\ndraft: false\ndescription: >\n  Jenkins X Labs February update\ncategories: [blog]\nkeywords: [Jenkins X,Community,2020]\nslug: \"jxl-feb-20\"\naliases: []\nauthor: James Rawlings\n---\n\n<figure>\n<img src=\"/images/logo/labs.png\" width=\"40%\"/>\n</figure>\n\nJenkins X has entered it's third year and as always we are looking for big ways things can be improved.  Briefly reflecting on the last two years:\n\n- first was about initial adoption and finding out what developers were both looking for and needed when moving to Kubernetes.  We started off using a Static Jenkins server for example to orchestrate builds and other open source projects that folks would be familiar with, to aid their journey to the cloud.  We quickly realised that the Jenkins X community wanted to leverage more of their cloud capabilities and so we began to swap in cloud native implementations like Tekton and Prow, as well as better integration with managed cloud services like storage, dns, IAM etc.\n\n- second year was about improving that developer experience and making the architectural approaches we settled on a reliable experience.  This has been a lot of work and there's still a lot more to do, infact we know this will always be an ongoing effort.  Some of the recent highlights of this effort can start to be seen with more details on this [blog](/blog/2020/02/26/cjxd-feb-20/)\n\n- now that we have started our third year we look at how we can effectively innovate in Jenkins X, grow collaborations with other open source projects and communities and of course build up the Jenkins X community itself.  All the time we need to do this with the second years efforts in mind and not lose sight that we need to evolve as a mature project that people and teams can rely on.\n\nWe've started by introducing the idea of an enhancement process.  The aim here is to raise ideas and larger problems that folks would like to collaborate on earlier than when a Pull Request is created.  Sometimes issues are a bit low level and for bigger efforts we'd like to raise the profile, potentially discuss in office hours, getting as much early feedback as possible and hope to attract folks looking to be involved.  This is aimed to be a lightweight process and be used to help get things right earlier.  It is not meant to stifle progress, rather enhance it.  Not all changes to Jenkins X should have an enhancement proposal, we still want to attract contributions but for larger efforts this will hopefully help.\n\nEnhancement proposals are currently raised as a pull request to this repository https://github.com/jenkins-x/enhancements.  Jenkins X creates a lot of GitHub notifications with all the releases and bot updates but this repo would be useful to 'watch' and see new proposals + discussions as they happen.  Please if you have any views we'd absolutely love to hear them and every comment will be treated respectfully and in a safe healthy environment.  We've already had __GREAT__ input from [polothy](https://github.com/polothy), [salaboy](https://github.com/salaboy) and a bunch of core maintainers as well as PMs and engineering managers.  We'd like to encourage involvement from any background that would like to help Jenkins X and be part of something that we can all be proud of.\n\nThe second part of this blog wants to take your attention to an enhancement proposal which is currently up for review https://github.com/jenkins-x/enhancements/pull/15.  This aims to tackle the challenge outlined above, of how do we enable rapid innovation, increase contributions and collaborations while keeping Jenkins X stable.  Please take a look and feed any comments on, it is high level for a reason as we are still learning the right balance.\n\nTL;DR of the above proposal suggests we build out an incubation hub of sorts where we can create new features which we don't know how they might be received, gather feedback and other metrics to decide whether the feature is good to mature into the main Jenkins X org.  The idea is to use an approach where features are ready for `alpha`, `beta` and `GA`.\n\nWe have already started piloting this effort in the [Jenkins X Labs](https://github.com/jenkins-x-labs) GitHub org where a small team has been proving out a feature to handle Jenkins X deploying to different clusters including different cloud providers.  The feature is known as multi cluster but we will be documenting, demoing and asking people to help be involved either in development or trials.\n\nWe will be putting together a roadmap, starting off small but would love suggestions https://github.com/jenkins-x-labs/issues\nIt is important to stress that work which happens in the Jenkins X Labs GitHub organisation may or may not mature into the Jenkins X org.  We will work hard to prove out any ideas and and gather as much feedback as we can and improve.  We would be looking to make it clear users opt into using `alpha` or `beta` features so we maintain a solid base.\n\nWe are super excited by this proposal, the rate of innovation it will unlock and the level of OSS collaboration possible all the time having another focus on stability and reliability.\n",
            "content/en/blog/news/lighthouse-goes-ga.md": "---\ntitle: \"Lighthouse Goes GA!\"\ndate: 2020-06-08\ndraft: false\ndescription: >\n  Lighthouse is the default webhook handler for Jenkins X\ncategories: [blog]\nkeywords: [Jenkins X,2020]\nslug: \"lighthouse-goes-ga\"\naliases: []\nauthor: Andrew Bayer\n---\n\nIn May of this year, Jenkins X switched from using [Prow](https://github.com/kubernetes/test-infra/tree/master/prow) as its default webhook handler to using [Lighthouse](https://github.com/jenkins-x/lighthouse). This is the result of almost a year of work, and provides some significant improvements for users of Jenkins X. You can find more information on the differences between Prow and Lighthouse [here](https://jenkins-x.io/docs/reference/components/lighthouse/#comparisons-to-prow).\n\nMost notably, Jenkins X now properly supports GitHub Enterprise as well as github.com, with preview support for GitLab and BitBucket Server. Prow only supports github.com, so until now, Jenkins X users have had to jump through hoops or accept significant limitations to their workflows in order to use any other SCM (source control management) providers. Lighthouse is tested against every provider we list support for, including the preview support for GitLab and BitBucket Server. While some functionality may not behave exactly the same on all providers, the core functionality of [ChatOps](https://jenkins-x.io/docs/build-test-preview/chatops/) should work on all. Lighthouse also has a smaller footprint in terms of resources and pods used in your Kubernetes cluster than Prow.\n\nIf you're interested in Jenkins X and Lighthouse support for other SCM providers, please let us know and we'll see what we can do!\n\n### What does \"preview support\" mean?\n\nThe primary difference between Lighthouse's support for GitHub and GitHub Enterprise, and its support for GitLab and BitBucket Server, is testing and usage. The Jenkins X project itself uses Lighthouse heavily, so we're very confident in its behavior and reliability with the GitHub API. Its GitLab and BitBucket Server support is tested with every change to the project, but until we've had reports of Lighthouse users on GitLab or BitBucket Server in real-world usage, we don't want to give the impression that support for those providers is known to be as stable as on GitHub.\n\nSo if you're using Jenkins X and Lighthouse with GitLab or BitBucket Server, we'd love to hear how your experience has been, [on our Slack channels or at our weekly office hours](https://jenkins-x.io/community/). If you run into in any problems with Lighthouse on any provider, whether it's in preview or otherwise, please [open an issue](https://github.com/jenkins-x/lighthouse/issues) and we'll look into it as soon as possible. Once we've gotten enough feedback to be confident that major changes will not be needed for GitLab or for BitBucket Server, we'll move those providers out of preview.\n\n### Differences between providers\n\n#### GitHub and GitHub Enterprise\n\nThere should be no functional differences between Lighthouse's behavior on github.com vs a GitHub Enterprise instance. The exact same APIs are used in both cases.\n\n#### GitLab\n\nLighthouse with GitLab may be more likely to hit API rate limits, due to GitLab's GraphQL functionality not matching the particular capabilities of GitHub, but the overall functionality is the same. There is one significant difference with GitLab, however. Some of Lighthouse's ChatOps commands, such as `/approve` and `/assign`, overlap with [GitLab quick actions](https://docs.gitlab.com/ee/user/project/quick_actions.html), and currently, GitLab [does not trigger webhook events for quick actions](https://gitlab.com/gitlab-org/gitlab/-/issues/215934). If Lighthouse does not receive a webhook event, it doesn't have any way of knowing that a ChatOps command has been invoked. Therefore, we have added the ability to invoke [all Lighthouse ChatOps commands](https://jenkins-x.io/docs/build-test-preview/chatops/#chatops-commands) either with the traditional `/approve` etc command, or by adding a `lh-` prefix, like `/lh-approve`. When using Lighthouse with GitLab, you will want to use the `/lh-(whatever)` commands to ensure that your command is actually processed.\n\nWe believe that Lighthouse should work with gitlab.com and relatively current versions of GitLab Community Edition and GitLab Enterprise Edition, based on the API docs, but if you encounter any problems on GitLab CE or GitLab EE, please open an issue.\n\n#### BitBucket Server\n\nFirst, we should note that Lighthouse will not work properly with BitBucket Server versions earlier than 7.0. [A new webhook was added in 7.0](https://confluence.atlassian.com/bitbucketserver/bitbucket-server-7-0-release-notes-990546638.html#BitbucketServer7.0releasenotes-Anewwebhookforsourcebranchupdatesinapullrequest) to be sent when the source branch for a pull request has been updated, because of a new commit, rebase, or similar changes, and without that webhook, Lighthouse isn't informed in those cases and doesn't know to rebuild the pull request.\n\nIn addition, [due to BitBucket Server not having the concept of labels for pull requests](https://jira.atlassian.com/browse/BCLOUD-11976), Lighthouse emulates labels by creating a comment on pull requests containing a table of labels for the pull request in question. This comment needs to remain in the consistent format Lighthouse creates or it won't be able to detect the labels correctly. Comment formatting for BitBucket Server is also more limited than for GitHub or GitLab, so comments may be a bit awkward in their appearance at the moment.\n\n",
            "content/en/blog/news/may-2020-jxl-helm3-update.md": "---\ntitle: \"An update on helm 3 and JXL\"\ndate: 2020-05-15\ndraft: false\ndescription: >\n  Explaining the next steps regarding helm 3 and the Jenkins X Labs work for Jenkins X.\ncategories: [blog]\nkeywords: [Community, 2020]\nslug: \"helm3\"\naliases: []\nauthor: Ethan Jones\n---\n\n## What\u2019s next for JXL and Helm 3?\n\nA few months back, we unveiled JXL to the Jenkins X community and framed it as a new thing, Jenkins X Labs, that would build out experimental features and test potential new things. Some would stick and go upstream into Jenkins X, others would be killed off as interesting but unsuccessful experiments.\n\nThis was a new thing for Jenkins X, trying to better separate the experimentation loop from the increasingly stable and relied-upon upstream. And, to a degree it worked great - the JXL workaround helm 3 was awesome, and got a lot of excitement.\n\nWhere it didn\u2019t work so great, though, was on what happened next. While this may be a bit forgivable since the whole thing was itself a new experiment for our community, it\u2019s pretty clear we\u2019ve dropped the ball a bit and that\u2019s informing our next steps now.\n\n## What did we learn from jxl?\n\nA few weeks back, we made it known that the JXL experiment was over. Specifically, the current jxl binary was over - not the idea of labs or any experiments, but the specific helm 3 experiment packaged into the current version of jxl had gotten us the info we needed to make some decisions about how we wanted to steer Jenkins X going forward.\n\nThere were two main things we learned as a result of the jxl work:\n\n- First, it was mostly a success. The direction was exciting, and helmfile is a huge help.\n\n- Second, the scope of the change was enormous. Getting the change to be production-ready, to the increasing quality standards being established by the CloudBees Jenkins X Distribution, was even larger.\n\nIt\u2019s important to note here that regressing in terms of quality and reliability is not an option - we\u2019ve heard loud and clear from the community that Jenkins X needs to be more stable and more dependable, and even exciting changes can\u2019t compose the progress we\u2019re making on those fronts.\n\nSo, with those takeaways in mind, we declared the helm 3 JXL experiment complete and got to work.\n\n## So, what\u2019s next for helm 3 and Jenkins X?\n\nTo be clear upfront: Jenkins X will get helm 3. We are working on that now internally at CloudBees. And, specifically, we are working on a way to introduce this large change iteratively, over time, with safe upgrade paths and no sudden breaking changes. For bleeding-edge people, maybe that\u2019s slower than you might prefer - but after the volume of feedback around stability, we\u2019re playing it safe on this one.\n\nNow, you might ask next where you can find that work. And the answer, to be honest, is that right now you can\u2019t. With the work we do on Jenkins X at CloudBees, we aspire to be as consistently open and upstream as possible, but there are times when keeping our heads down to workshop things is the right path. The UI so far is one example of this, and for the time being helm 3 is another.\n\n## Can you get involved in helm 3 at all?\n\nIf you are interested in the work going on regarding Jenkins X and helm 3, we are looking for pilot users who want to test drive what\u2019s in progress and give feedback once it's ready. It\u2019s not all of JXL, like I said it\u2019s iterative and this is phase 1. Please get in touch if you\u2019d like to discuss it more, either by email ([jx-feedback@cloudbees.com](mailto:jx-feedback@cloudbees.com)) or just in the community Slack (ping *vfarcic* and he\u2019ll get you on the list for feedback.)\n\n## Why isn\u2019t this all more open?\n\nOne thing we learned as part of doing JXL is that Jenkins X is not yet built well for safe experimentation. We want to fix that long term, and if we were doing it over again we\u2019d likely handle jxl differently because of the unfortunate silence you\u2019re now hearing from us after such exciting work, but like all corporate sponsors of open source projects, we have to balance priorities and one of the major ones is making Jenkins X high quality enough for large companies to use at scale.\n\nLong term, as things continue to improve, we hope all experimentation can be done upstream without major issues - but we\u2019re not there yet. And, continuing to build out on JXL risked a forking situation where the path back to upstream becomes harder and harder - we didn\u2019t want that to happen. So, our solution for now, suboptimal as it is, is to build the next chapter out a little more privately, figure out what makes sense in upstream from day 1 and what we might want to first offer through the Distribution as an enterprise capability (similar to the UI) and then get the community back on track with a single direction.\n\nWe\u2019re not saying this is great - it\u2019s a learning process for us too, and while we\u2019re excited about the path to the future JXL has given us, we also have to make the best of it with the limitations that exist today and the large companies trying to count on Jenkins X more and more.\n\n## Feedback and questions\n\nWe\u2019d love to hear from you on this and discuss it more, so please ping us in the community Slack, join office hours and get involved. The Jenkins X community is critical to all of us and, even with some setbacks and missteps, we\u2019re excited to keep learning and improving together.\n",
            "content/en/blog/news/outreachy-blog1-2019.md": "---\ntitle: \"Outreachy - Motivation to apply! \"\ndate: 2020-01-10\ndraft: false\ndescription: >\n  Let's contribute to open-source - Get, set, GO!\ncategories: [blog]\nkeywords: [Community, 2019, Outreachy]\nslug: \"outreachy2019\"\naliases: []\nauthor: Neha Gupta\n---\n<figure>\n<img src=\"/images/community/events/outreachy.png\"/>\n</figure>\n\nNeha Gupta is adding support for Kustomize in Jenkins X, to enable Kubernetes native configuration management, while participating in Outreachy from December 2019 to March 2020.\n\n### Motivation to apply to Outreachy :\nIn my graduation class of fifty people we were three girls struggling to set up our space and comfort with the weird reactions we got from fellow students for trying to understand technology.\nWhen my professor asked us to make an autonomous drone. I couldn\u2019t make one, I was shattered, until a friend from computer science batch helped me make one. He showed me some of the cool apps he made, that sparked an interest, and I started building apps, realising that computer science is beyond just coding, it\u2019s more about solving real life problems.\n\nI\u2019ve transitioned from mobile to web apps, server-end development, robotics, cloud architecting, and also cofounding a startup. I\u2019ve been focusing on using AI to make smarter apps, and help students think beyond, and see the bigger picture. I\u2019m hoping to start an accelerator, regulating the perception about technology, focusing especially on hidden potential behind fear-stricken girls.\n\nWhen I heard about Outreachy program and I liked how women and other minority communities are being supported and motivated. It felt something similar to what I\u2019m trying to do with the young girls around me (breaking the stereotypical phenomenon of \u201cgirls can\u2019t code\u201d). I felt participating in Outreachy will not only boost my but other girls motivation too! and it\u2019ll also definitely help me grow technologically, socially and mentally.\n\n### Why excited about Outreachy?\nTo me it feels really cool to work with a team remotely. The interactions, networking and feel is completely different, especially when it\u2019s open-source (Like ..I get anxious before asking questions on public channels, if the question is too logical and stupid). Also, I\u2019m a fan of open-source contributions, so\u2026 (here was the chance).\n\nAnother reason was to interact with the minority community (people who are facing similar issues in STEM like me) and share some instances with them, be on the same page, enlighten and get enlightened (all that networking sounds fun..). I am also excited about the trip.\nWhy Jenkins-X?\n\nThe Cloud Storage backed Helm repository idea seemed interesting, so I started exploring it. The project was also quite different from other listed (maybe because it was meant for me :D ), I only contributed to it and focused on it.\n\nAlso the community was very welcoming and communications with my mentor were good. He helped me making contributions to the project, he guided me to some good first issues, helped me correct my PR\u2019s. Jenkins-X looked as an interesting open-source project so I\u2019m glad I tried to be a part of it and got selected.\n\n### What would I tell someone who is worried about applying to Outreachy?\nIf you are someone who has just started open source contributions and are fear stricken on how is it gonna work? These all things seems so confusing and you\u2019re overwhelmed.\n\nDon\u2019t worry! ..\n\nI was too! Every one is.. and this is just step \u2014 1. Anyone who\u2019s going to pick up a new project which is production ready and thousands/millions of people are using it, is going to be confused! This is normal and natural (the initial learning curve), but once you overcome it. Things become so normal and understanding, people are here to help you out.\n\nIf you think you can\u2019t make it because of the competition, how does matter? If not this time, next time (I myself got selected after 3 years of trying), you anyway has to start one day, so let it be today. But the learnings you take away from the process, are insanely valuable and every-time it\u2019s gonna become easier..\nFeel free to reach me if you are facing any issues regarding starting with open-source contributions or if you have question saying \u2014 shall I apply to Outreachy this time?\n\nGood Luck! :)",
            "content/en/blog/news/outreachy-blog2-2020.md": "---\ntitle: \"Asking and Finding help - Outreachy\"\ndate: 2020-01-22\ndraft: false\ndescription: >\n  Let's contribute to open-source - Get, set, GO!\ncategories: [blog]\nkeywords: [Community, 2020, Outreachy]\nslug: \"outreachy2019\"\naliases: []\nauthor: Neha Gupta\n---\n<figure>\n<img src=\"/images/community/events/outreachy.png\"/>\n</figure>\n\nNeha Gupta is adding support for Kustomize in Jenkins X, to enable Kubernetes native configuration management, while participating in Outreachy from December 2019 to March 2020.\n\n### Outreachy open-source contribution for applicants \u2014 Asking/Finding help\n\nThis blog might be helpful for beginners who are fear-stricken or I would say hesitant to ASK, to get lost in the new world while trying to understand any open source project, fear of asking questions that may sound stupid later on or are very obvious!\nFirst of all..\nRelax!\n\n* Everyone starts from somewhere and has a learning curve!..\n\n* There are some pre-requisites that may help you get into open-source development better..\n\n* Learn basics of git operations. (https://learngitbranching.js.org , I find this easy and helpful).\n\n* Try to find an open-source project (remember : you\u2019re going to contribute to a part of it, so it\u2019s okay if some/many things doesn\u2019t make sense in the beginning, because it\u2019s easier to write code than to understand someone else\u2019s code).\n\n* For selecting a project you may also look for Google-Summer-of-Code, Outreachy, Google-Code-In, RSoC and other open-source programs and their organisations that helps people/students/aspiring developers to find your best interest communities and projects.\n\n**NOTE : Beware! seeing too many organisations and projects will only confuse you, so start with only one or max 2 projects, try to deep-dive and focus on them.**\n\nAfter selecting the project :\n\n* Connect with the community through their communication channels for both developers and users (example : Slack, IRC-Cloud, Zulip, Riot etc )\n\n* Try to read the documentation and understand the overall structure and purpose of the project you\u2019re starting to work on.\n\n* If you don\u2019t understand something functionality wise \u2014 just ask! Ask on the communication channel.\n\n* If you are facing any error \u2014 Google search it, or try to look into the existing issues, if you\u2019re not able to move forward and you\u2019re stuck on the same error for more than 45 mins, just ask! Trust me! There\u2019s no harm. In-fact, people of open-source communities appreciate it, feels motivated when there are users asking them about something that they\u2019re passionately building. It also sometimes, helps the community to re-define and re-align the product and some features.\n\nHappy learning! :) \n\n",
            "content/en/blog/news/outreachy-december-2019.md": "---\ntitle: \"Outreachy\"\ndate: 2019-10-01\ndraft: false\ndescription: >\n  Jenkins X is participating in Outreachy!\ncategories: [blog]\nkeywords: [Community, 2019]\nslug: \"outreachy2019\"\naliases: []\nauthor: Kara de la Marck\n---\n<figure>\n<img src=\"/images/community/events/outreachy.png\"/>\n</figure>\n\nJenkins X is happy to announce our participation in the Outreachy program running from December 2019 to March 2020. \n\nOutreachy helps people from groups underrepresented in free and open source software get involved by providing \"a supportive community for beginning to contribute any time throughout the year and offer focused internship opportunities twice a year with a number of free software organizations.\u201d The internships are for three-months, during which mentees work on specific projects. \n\nOrganisations that participate in Outreachy include Apache, CNCF Tracing, Mozilla, GNOME, the Linux Kernel, GNU Guix, Wikimedia, Debian, Git, Tekton, Jenkins, and Jenkins X. These organisations outline specific projects for the interns to work on and provide remote mentors.\n\nPlease see [Outreachy's site](https://www.outreachy.org/) for more information about the program, such as its purpose, eligibility requirements, and how to apply.\n\n### About Jenkins X\n\nJenkins X is an open source, opinionated way to do continuous integration and continuous delivery (CI/CD) on Kubernetes. As such, it provides a modern, best practices approach to CI/CD for cloud native applications. \n\nJenkins X aids developers in provisioning Kubernetes clusters, automates CI/CD, provides different virtual environments for development, staging, and production using Kubernetes namespaces, and provides preview environments for pull requests.\n\n### Jenkins X projects for Outreachy\n\n[Jenkins X has two projects for Outreachy applicants](https://www.outreachy.org/apply/project-selection/#jenkins-x) to engage with:\n\n{{< alert >}}\n**Create a Cloud Storage backed Helm repository for Jenkins X, replacing ChartMuseum**\n\nMentor: [Hardy Ferentschik](https://twitter.com/fere0010)\n\nAs part of the Jenkins X workflow, Helm charts are created which need to be deployed and made available. This project would replace [ChartMuseum](https://chartmuseum.com/) with a cloud storage bucket to host and serve Helm charts.\n\n\n{{< /alert >}}\n\n{{< alert >}}\n**Improve the Jenkins X Apps Framework**\n\nMentor: David Conde\n\nThe Jenkins X Apps Framework is a mechanism used to extend the functionality of Jenkins X. The goal of this project is to improve the [Apps Framework User Guide](https://jenkins-x.io/docs/contributing/addons/) and to create a Jenkins X app.\n\n{{< /alert >}}\n\n### Ask us questions\n\nWe welcome applicants to join our slack channels and our office hours. We'd be happy to answer your questions and guide you with your pull requests!\n\nTalk to us on our slack channels, which are part of the Kubernetes slack. Join  Kubernetes slack [here](http://slack.k8s.io/), and find us on our channels:\n\n* #jenkins-x-dev for developers of Jenkins X\n* #jenkins-x-user for users of Jenkins X\n\nWe also have online office hours, during which we talk about new developments in Jenkins X and you are welcome to ask us questions, every other Thursday at 4pm UK (BST) / 11am US Eastern / 8am US Pacific. \n\nNext office hours are on **3 October**. Join us here: https://zoom.us/j/397862697\n\n*We'd love your help to make Jenkins X even more awesome and welcome your participation!*\n\n<figure>\n<img src=\"/images/awesome-gophers-by-Ashley-McNamara/gopher_unicorn.png\" class=\"img-thumbnail\"/>\n</figure>\n\nimage by Ashley McNamara, [creative commons license](https://github.com/ashleymcnamara/gophers/blob/master/gopher_unicorn.png)\n\n\nPlease note: the contribution period of the application process to Outreachy starts today, 1 October. Please remember that Outreachy's deadline is Nov. 5, 2019 at 4pm UTC to record your contributions and create a final application. Read about Outreachy's application process [here](https://www.outreachy.org/docs/applicant/).\n\nInterested in applying? Want to read articles from those who have participated in Outreachy? See [here](https://medium.com/@alishapapun/outreachy-is-it-that-hard-to-crack-24394f71a30d) and [here](https://medium.com/jaegertracing/outreachy-building-diversity-in-open-source-2cb89b396e1a).\n\n",
            "content/en/blog/news/provision-jx-clusters-terraform.md": "---\ntitle: \"Managing Jenkins X Kubernetes Clusters Using Infrastructure as Code With Terraform\"\ndate: 2019-04-03T07:36:00+02:00\ndescription: >\n    Use Infrastructure as Code to provision Jenkins X clusters.\ncategories: [blog]\nkeywords: [terraform,IaC,provisioning,k8s]\nslug: \"terraform-jenkins-x\"\naliases: []\ndraft: true\nauthor: Oscar Medina\n---\n\n\n<figure>\n<img src=\"/images/jenkinsTerraform.png\"/>\n<figcaption>\n<h5>Provision Jenkins X Kubernetes Clusters using Terraform</h5>\n</figcaption>\n</figure>\n\n{{< alert >}}\nCAUTION: Do not make updates to the cluster that require recreating the cluster resources, all data will be lost.  Only changes that update the cluster are supported at this time.\n{{< /alert >}}\n\n# Overview\nMany organizations have adopted DevOps practices in the last few years.  This is valuable as it relates to Jenkins X as we provide a way to manage the Kubernetes clusters  Infrastructure as Code which is one of the core concepts of DevOps practices as it relates to automation.\n\nMany environments may only allow for creating cloud resources using IaC, therefore we provide you with guidance on how to get started using Terraform to manage your Jekins X clusters.\n\nOur objective is to bring awareness to our Jenkins X users on know that they can manage the cluster changes and version them by placing the Terraform code source control and adopting the typical developer workflow which includes PRs in source control to make infrastructure changes in a controlled manner.\n\n## Terraform clusters for AWS, GCP and Azure\nJenkins X supports generating Terraform plans and code for all three leading clouds (AWS, Azure and GCP).\n\nOn this post we walk you through the steps for terraforming clusters in GKE.\n\n## Benefits of Using IaC to Manage Your K8s Clusters\n- This is great, because at many companies the Ops team typically is already using IaC to manage the resources deployed to the cloud\n- Our Users gain the ability to version their infrastructure and follow the typical developer workflow as the code is in Github\n- Changes to the cluster can be automated, added to a pipeline\n\n# Prerequisites\n\nTo get started, you must have the following items installed on your machine.\n\n - The `jx` CLI installed.\n - Terraform - can be installed using `brew install terraform`\n- GCP account with proper rights to create resources\n- The Google Cloud CLI `gcloud`\n`kubectl` must also be installed\n\n# Step 1 - Create Terraform Plan\n\nOur first task is to generate the Terraform code for each cluster, we create a Dev, Staging and Production cluster.\n\nWe execute the `jx create terraform -c dev=gke -c stage=gke -c prod=gke`.\n\nThe command generates three different clusters for each environment respectively in GCP.  Other providers supported are  aks, eks.\n\n## Folder Structure Output\nRunning the previous command, outputs the following folder structure wherever we executed the command locally.\n\n```txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 build.sh\n\u251c\u2500\u2500 ci-demo-206601-121d21dc79ac.json\n\u2514\u2500\u2500 clusters\n\u251c\u2500\u2500 dev\n\u2502   \u2514\u2500\u2500 terraform\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 key.json\n\u2502       \u251c\u2500\u2500 main.tf\n\u2502       \u251c\u2500\u2500 output.tf\n\u2502       \u251c\u2500\u2500 terraform.tf\n\u2502       \u251c\u2500\u2500 terraform.tfvars\n\u2502       \u2514\u2500\u2500 variables.tf\n\u251c\u2500\u2500 prod\n\u2502   \u2514\u2500\u2500 terraform\n\u2502       \u251c\u2500\u2500 README.md\n\u2502       \u251c\u2500\u2500 main.tf\n\u2502       \u251c\u2500\u2500 output.tf\n\u2502       \u251c\u2500\u2500 terraform.tf\n\u2502       \u251c\u2500\u2500 terraform.tfvars\n\u2502       \u2514\u2500\u2500 variables.tf\n\u2514\u2500\u2500 stage\n\u2514\u2500\u2500 terraform\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 output.tf\n\u251c\u2500\u2500 terraform.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u2514\u2500\u2500 variables.tf\n\n7 directories, 22 files\n```\nWe now have a great code-base to create our clusters on GKE for three different environments.\n\n{{< alert >}}\nNOTE: On this Post, we will only create the Dev Cluster, although the process is the same for creating the other Kubernetes clusters.\nFirst we need to make sure we have credentials to execute our Terraform code.\n{{< /alert >}}\n\n# Step 2 - Get GKE Credentials\n\nJenkins X creates a Service Account (SA) for each cluster.\n\nFor our dev cluster, it has created the jx-questerring-dev@ci-demo-206601.iam.gserviceaccount.com account.\n\nWe need to download the `json` file in order to pass as credentials to our `terraform.tf` file which contains the definition to access the Terraform Backend.\n\n## Downloading Credentials JSON File\nTo download the SA account credentials, go to the GCP Console > IAM &  Admin > Service Accounts.\n\nWe find the one for our cluster which is named in our case\nas follows: `jx-questerring-dev@ci-demo-206601.iam.gserviceaccount.com`\n\nWe click on the file *name*  > *edit*, then click on *create key* in JSON format, download and save in our project folder structure.\n\nWe now add a reference within the `terraform.tf` as shown below.\n\n```tf\nterraform {\n    required_version = \">= 0.11.0\"\n    backend \"gcs\" {\n        bucket      = \"ci-demo-206601-questerring-terraform-state\"\n        prefix      = \"dev\"\n        credentials = \"key.json\"\n    }\n}\n```\n\nNotice that we added the `credentials` portion and point to the credentials `json` file we downloaded from the Google IAM & Admin web console.\n\n# Step 3 - Initiate Terraform Backend\nWe are now ready to initiate Terraform backend.  Terraform backends are used to save the Terraform State remotely.  This is great for when a team needs to collaborate on making infrastructure changes, because the Terraform State is stored in the GCP Bucket that was also created when we executed our initial command to create the cluster.\n\n```tf\n$ terraform init\nInitializing the backend...\n\nSuccessfully configured the backend \"gcs\"! Terraform will automatically\nuse this backend unless the backend configuration changes.\n\nInitializing provider plugins...\nChecking for available provider plugins on https://releases.hashicorp.com...\nDownloading plugin for provider \"google\" (2.3.0)...\n\nTerraform has been successfully initialized!\n```\n\nWe have initiated Terraform and our Terraform State is now configured to use the GCP Buket specified in the terraform.tf file.\n\n# Step 4 - Terraform Plan\nWe now can execute a `terraform plan` and see what will be created.  At this point, we can opt to augment the terraform code.\n\nFor example, you may have an existing network that you wish to deploy the cluster in.  You may also wish to enable the an add-on, or you can specify the cluster_ipv4_cidr_block and many other things (see https://www.terraform.io/docs/providers/google/r/container_cluster.html) for details.\n\n```sh\n$ terraform plan\n\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n----\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n+ create\n\nTerraform will perform the following actions:\n\n+ google_container_cluster.jx-cluster\nid:                                    <computed>\nadditional_zones.#:                    <computed>\naddons_config.#:                       <computed>\ncluster_autoscaling.#:                 <computed>\ncluster_ipv4_cidr:                     <computed>\ndescription:                           \"jx k8s cluster provisioned and managed via Terraform.\"\nenable_binary_authorization:           <computed>\nenable_kubernetes_alpha:               \"false\"\nenable_legacy_abac:                    \"false\"\nenable_tpu:                            <computed>\nendpoint:                              <computed>\ninitial_node_count:                    \"3\"\ninstance_group_urls.#:                 <computed>\nip_allocation_policy.#:                <computed>\nlocation:                              <computed>\nlogging_service:                       \"logging.googleapis.com\"\nmaster_auth.#:                         <computed>\nmaster_ipv4_cidr_block:                <computed>\nmaster_version:                        <computed>\nmonitoring_service:                    \"monitoring.googleapis.com\"\nname:                                  \"questerring-dev\"\nnetwork:                               \"default\"\nnetwork_policy.#:                      <computed>\nnode_config.#:                         <computed>\nnode_locations.#:                      <computed>\nnode_pool.#:                           <computed>\nnode_version:                          <computed>\nprivate_cluster:                       <computed>\nproject:                               <computed>\nregion:                                <computed>\nremove_default_node_pool:              \"true\"\nresource_labels.%:                     \"3\"\nresource_labels.created-by:            \"me\"\nresource_labels.created-timestamp:     \"20190326093418\"\nresource_labels.created-with:          \"terraform\"\nzone:                                  \"us-west1-a\"\n\n+ google_container_node_pool.jx-node-pool\nid:                                    <computed>\nautoscaling.#:                         \"1\"\nautoscaling.0.max_node_count:          \"5\"\nautoscaling.0.min_node_count:          \"3\"\ncluster:                               \"questerring-dev\"\ninitial_node_count:                    <computed>\ninstance_group_urls.#:                 <computed>\nlocation:                              <computed>\nmanagement.#:                          \"1\"\nmanagement.0.auto_repair:              \"true\"\nmanagement.0.auto_upgrade:             \"false\"\nmax_pods_per_node:                     <computed>\nname:                                  \"default-pool\"\nname_prefix:                           <computed>\nnode_config.#:                         \"1\"\nnode_config.0.disk_size_gb:            \"100\"\nnode_config.0.disk_type:               <computed>\nnode_config.0.guest_accelerator.#:     <computed>\nnode_config.0.image_type:              <computed>\nnode_config.0.local_ssd_count:         <computed>\nnode_config.0.machine_type:            \"n1-standard-2\"\nnode_config.0.metadata.%:              <computed>\nnode_config.0.oauth_scopes.#:          \"7\"\nnode_config.0.oauth_scopes.1277378754: \"https://www.googleapis.com/auth/monitoring\"\nnode_config.0.oauth_scopes.1693978638: \"https://www.googleapis.com/auth/devstorage.full_control\"\nnode_config.0.oauth_scopes.172152165:  \"https://www.googleapis.com/auth/logging.write\"\nnode_config.0.oauth_scopes.1733087937: \"https://www.googleapis.com/auth/cloud-platform\"\nnode_config.0.oauth_scopes.2184564866: \"https://www.googleapis.com/auth/service.management\"\nnode_config.0.oauth_scopes.299962681:  \"https://www.googleapis.com/auth/compute\"\nnode_config.0.oauth_scopes.3663490875: \"https://www.googleapis.com/auth/servicecontrol\"\nnode_config.0.preemptible:             \"true\"\nnode_config.0.service_account:         <computed>\nnode_count:                            \"3\"\nproject:                               <computed>\nregion:                                <computed>\nversion:                               <computed>\nzone:                                  \"us-west1-a\"\nPlan: 2 to add, 0 to change, 0 to destroy.\n----\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.\n\n```\n\n# Step 5 - Create Cluster Using Terraform Apply\nNow that we've seen what will be created and using the default terraform code generated, let us create said resources!\n\n```sh\n$ terraform apply\n.....trimmed for brevity\nApply complete! Resources: 2 added, 0 changed, 0 destroyed.\n\nOutputs:\n\ncluster_endpoint = 35.203.147.59\ncluster_master_version = 1.11.7-gke.12\n```\nThe outcome shows some key information, like the *cluster_endpoint* and the *cluster_master_version*\n\n## Set Kubectl Context\n\nLet us access the cluster using kubectl.  In order to do that, we need to get credentials.  We execute the following command (which you can get from the UI on GCP right from the cluster connect window)\n\n```sh\n$ gcloud container clusters get-credentials questerring-dev --zone us-west1-a --project ci-demo-206601\n\nFetching cluster endpoint and auth data.\nkubeconfig entry generated for questerring-dev.\n```\nThis has effectively modified our `kubeconfig` file and we now have a new context.\n\nExecuting the following command, we see our new cluster (in bold)\n\n```sh\n$ jx context\nBigDaddyO\narn:aws:eks:us-west-2:653931956080:cluster/jxcluster\ngke_ci-demo-206601_europe-west1-b_sirjenkinsgke\ngke_ci-demo-206601_us-west1-a_chingold\ngke_ci-demo-206601_us-west1-a_questerring-dev\ngke_ci-demo-206601_us-west1-a_sirjenkinsgke\ngke_ci-demo-206601_us-west1-a_sirjenkinsx\ngke_ci-demo-206601_us-west1_sirjenkinsxgke\nminikube\n1553553075211690000@jxcluster.us-west-2.eksctl.io\n```\nWe are now ready to install Jenkins X on our cluster!\n\n# Step 6 - Installing Jenkins X on Cluster\n\nTo install Jenkins X, we simply run jx intall and follow the prompts.\n\n{{ alert }}\nNOTE that can pass additional flags as per your prefernces.  For example set the default admin password like so `--default-admin-password=MyPassw0rd` (see other options by typing `jx install --help`\n{{ /alert }}\n\nNow that we have Jenkins X installed, we can deploy an app etc.  We make sure it is up and running.\n\n# Step 7 - Modify Clusters\n\nThere are certain properties that can be modified without forcing a recreation of the clusters.  You *do not want to recreate them as your data will be lost*.  Only changes that update the clusters are supported.\n\nWe are going to modify the cluster and add an add-on for the Dashboard which is typically disabled.\n\nTo do that we change the following within the cluster declaration in main.tf and add the following (in bold):\n\n```tf\nresource \"google_container_cluster\" \"jx-cluster\" {\n    name                     = \"${var.cluster_name}\"\n    description              = \"jx k8s cluster provisioned and managed via Terraform.\"\n    zone                     = \"${var.gcp_zone}\"\n    enable_kubernetes_alpha  = \"${var.enable_kubernetes_alpha}\"\n    enable_legacy_abac       = \"${var.enable_legacy_abac}\"\n    initial_node_count       = \"${var.min_node_count}\"\n    remove_default_node_pool = \"true\"\n    logging_service          = \"${var.logging_service}\"\n    monitoring_service       = \"${var.monitoring_service}\"\n\n    resource_labels {\n        created-by = \"${var.created_by}\"\n        created-timestamp = \"${var.created_timestamp}\"\n        created-with = \"managed by terraform\"\n    }\n\n    lifecycle {\n        ignore_changes = [\"node_pool\"]\n    }\n\n    addons_config {\n        kubernetes_dashboard {\n            disabled = false\n        }\n    }\n\n}\n```\n\nThen we run the terraform plan, output shows a change to the cluster as expected.\n\n```sh\n$ terraform plan\n\nRefreshing Terraform state in-memory prior to plan...\nThe refreshed state will be used to calculate this plan, but will not be\npersisted to local or remote state storage.\n\ngoogle_container_cluster.jx-cluster: Refreshing state... (ID: sposcar-dev)\ngoogle_container_node_pool.jx-node-pool: Refreshing state... (ID: us-west1-a/sposcar-dev/default-pool)\n----\n\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n~ update in-place\n\nTerraform will perform the following actions:\n\n~ google_container_cluster.jx-cluster\naddons_config.0.kubernetes_dashboard.0.disabled: \"true\" => \"false\"\nresource_labels.created-with:                    \"terraform\" => \"managed by terraform\"\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n\nNote: You didn't specify an \"-out\" parameter to save this plan, so Terraform\ncan't guarantee that exactly these actions will be performed if\n\"terraform apply\" is subsequently run.\n\n```\n\n## Accessing kubernetes dashboard\n\nNow that our change has taken effect on our cluster, lets access the Dashboard.\n\n{{ alert }}\nNOTE: This dashboard is deprecated, and we are only showing you in the context of modifying your cluster to add an add-on.  Please use the GKE built-in UI\n{{ /alert }}\n\n### Get Access token\n```sh\ngcloud config config-helper --format=json | jq -r '.credential.access_token'\n```\n\nCopy the token from the output of that command.\n\nNext, execute `kubectl proxy` which will enable you to access via the following URL\n\nhttp://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy\n\nPaste the token and now you should be able to access the now deprecated dashboard via the browser.\n\n# Conclusion\nWe walked through how to create your initial Terraform code and structure, created the Dev cluster and modified it by specifying an add-on to include in our cluster.\n\nPlease keep in mind, that once *GitOps* feature in Jenkins X is available, we recommend you manage the platform in that manner.  Documentation, tutorials and presentations on that topic will be coming soon!\n\n\nCheers,\n\n[@SharePointOscar](http://twitter.com/SharePointOscar)\n\nDeveloper Advocate | Jenkins X\n\n\n",
            "content/en/blog/news/second-birthday.md": "---\ntitle: \"Happy Second Birthday Jenkins X!\"\ndate: 2020-01-14\ndescription: >\n    Second year of Jenkins X\ncategories: [blog]\nkeywords: []\nslug: \"happy-second-birthday\"\naliases: []\nauthor: Rob Davies\n---\n\nThe Jenkins X project started the beginning of 2019 by celebrating its first birthday on the 14th January, a big event for any open source project, and we have just celebrated our 2nd - hooray!\n\n<!-- <figure>\n<img src=\"/images/second-birthday/cupcake.png\" width=\"40%\" float=\"left\">\n</figure> -->\n\n<figure>\n<img src=\"/images/second-birthday/7TH_BIRTHDAY.png\" width=\"55%\" float=\"center\">\n</figure>\n\nimage by Ashley McNamara, [creative commons license](https://github.com/ashleymcnamara/gophers/blob/master/7TH_BIRTHDAY.png)\n\n## Two Years of Jenkins X!\n\nJenkins X has evolved from a vision of how CI/CD could be reimagined in a cloud native world, to a fast-moving, innovative, rapidly maturing open source project.  \n\n\nJenkins X was created to help developers ship code fast on Kubernetes. From the start, Jenkins X has focused on improving the developer experience. Using one command line tool, developers can create a Kubernetes cluster, deploy a pipeline, create an app, create a GitHub repository, push the app to the GitHub repository, open a Pull Request, build a container, run that container in Kubernetes, merge to production. To do this, Jenkins X automates the installation and configuration of a whole bunch of best in breed open source tools, and automates the generation of all the pipelines. Jenkins X also automates the promotion of an application through testing, staging, and production environments, enabling lots of feedback on proposed changes. For example, Jenkins X preview environments allow for fast and early feedback as developers can review actual functionality in an automatically provisioned environment. We\u2019ve found that preview environments, created automatically inside the pipelines created by Jenkins X, are very popular with developers, as they can view changes before they are merged to master.\n\n\nJenkins X is opinionated, yet easily extensible. Built to enable DevOps best practices, Jenkins X is designed to the deployment of large numbers of distributed microservices in a repeatable and manageable fashion, across multiple teams. Jenkins X facilitates proven best practices like trunk based development and GitOps. To get you up and running quickly, Jenkins X comes with lots of example quickstarts.\n\n\n# Highlights of 2019\n\n## February 2019: The rise of Tekton!\n\nIn the second half of 2018, Jenkins X embarked on a journey to provide a Serverless Jenkins and run a pipeline engine only when required. That pipeline engine was based on the knative build-pipeline project which evolved into Tekton with much help and love from both the Jenkins and Jenkins X communities. [The Jenkins X project completed its initial integration with Tekton in February 2019](https://jenkins-x.io/blog/2019/02/19/jenkins-x-next-gen-pipeline-engine/). Tekton is a powerful and flexible kubernetes-native open source framework for creating CI/CD pipelines, managing artifacts and progressive deployments.\n\n<figure>\n<img src=\"/images/second-birthday/plane.png\" width=\"40%\" float=\"left\">\n</figure>\n\n## March 2019: Jenkins X joined The Continuous Delivery Foundation!\n\n<figure>\n<img src=\"/images/logo/cdf-logo.png\" width=\"40%\" float=\"left\">\n</figure>\n\nJenkins X joined the Continuous Delivery Foundation (CDF) as a founding project alongside Jenkins, Spinnaker, and Tekton. Joining a vendor-neutral foundation, focused on Continuous Delivery, made a lot of sense to the Jenkins X community. There had already been a high level of collaboration with the Jenkins and Tekton communities, and there have been some very interesting and fruitful (in terms of ideas) discussions about how to work better with the Spinnaker communities also.\n\n## June 2019: Project Lighthouse\n\nWhen Jenkins X embarked on its serverless jenkins journey, it chose to use [Prow](https://github.com/kubernetes/test-infra/tree/master/prow), an event handler for GitHub events and ChatOps. Prow is used by the Kubernetes project for building all of its repos and includes a powerful webhook event handler. Prow is well proven, but heavily tied to GitHub, and not easily extendable to other SCM providers.  At the end of June 2019, work commenced on a lightweight, extensible alternative to Prow, called [Lighthouse](https://jenkins-x.io/docs/reference/components/lighthouse/). Lighthouse supports the same plugins as Prow (so you can still ask via ChatOps for cats and dogs) and the same config - making migration between Prow and Lighthouse extremely easy.\n\n## June 2019: Jenkins X Boot!\n\nWe were very busy in June - a frantic burst of activity before summer vacations!  One common problem Jenkins X users were facing was the installation of Jenkins X on different Kubernetes clusters.  Installing services, ensuring DNS and secrets are correct, and done in the right order is completely different from vendor to vendor, and sometimes cluster to cluster. We realised that to simplify the install, we really needed a pipeline, and whilst this may sound a little like the plot to a film, running a  Jenkins X pipeline to install jx really is the best option. The [jx boot command](https://jenkins-x.io/docs/getting-started/setup/boot/) interprets the boot pipeline using your local jx binary. The jx boot command can also be used for updating your cluster.\n\n<!-- <figure>\n<img src=\"/images/second-birthday/street.png\" width=\"40%\" float=\"left\">\n</figure> -->\n\n## July 2019: A New Logo!\n\nAs part of the move to the CDF the Jenkins X project took the opportunity to redesign its  logo. An automaton represents the ability of Jenkins X to provide automated CI/CD on Kubernetes and more!  \n\n<figure>\n<img src=\"/images/second-birthday/jx-logo-stacked-color.png\" width=\"80%\" float=\"left\">\n</figure>\n\n## Second half 2019: Big focus on Stability and Reliability\n\nThe Jenkins X project has been fast paced with lots of different components and moving parts. This fast pace unfortunately led to some instability and a growth of serious issues that risked undermining all the great work there had been on Jenkins X. There has been a concerted effort by the community to increase stability and reduce outstanding issues - the graph below shows the trend over the last year, with a notable downward trend in the number of issues being created in the last 6 months.\n\n<figure>\n<img src=\"/images/second-birthday/graph.png\" width=\"80%\" float=\"left\">\n</figure>\n\n\nCloudBees also aided this effort by introducing the [CloudBees Jenkins X Distribution](https://www.cloudbees.com/products/cloudbees-jenkins-x-distribution/overview) with increased testing around stabilized configurations and deployments and regular releases every month.\n\n## October 2019: Jenkins X Steering Committee inaugural meeting\n\nThe Jenkins X Bootstrap [Steering Committee](https://github.com/jenkins-x/steering) is tasked with organising the transition to an elected steering committee, as well as determining what responsibilities the steering committee will have in guiding the Jenkins X project.\n\n## December 2019: First Jenkins X Outreachy mentee!\n\n<figure>\n<img src=\"/images/community/events/outreachy.png\" width=\"80%\" float=\"left\">\n</figure>\n\nNeha Gupta is adding support for Kustomize in Jenkins X, to enable Kubernetes native configuration management, while participating in Outreachy from December 2019 to March 2020. We welcome Neha\u2019s work on Jenkins X and look forward to building on our culture of continuous mentoring!\n\n## Jenkins X usage in Products\n\nThe easiest way to try out Jenkins X is undoubtedly through [CloudBees CI/CD powered by Jenkins X](https://www.cloudbees.com/products/cloudbees-ci-cd/overview) which provides Jenkins X through the convenience and ease of use of SaaS. No cluster setup, no Jenkins X install, that is all done for you! Currently, [CloudBees CI/CD powered by Jenkins X](https://www.cloudbees.com/products/cloudbees-ci-cd/overview) is available for preview. Sign up [here to try out the new Jenkins X Saas](https://www.cloudbees.com/products/cloudbees-ci-cd/overview)!\n\n<figure>\n<img src=\"/images/second-birthday/boxes.png\" width=\"40%\" float=\"left\">\n</figure>\n\n## What\u2019s next?\n\nThe Jenkins X project is going to be encouraging the community to get involved with more innovation. There are a lot of great ideas to extend the continuous story with integrated progressive delivery (A/B testing, Canary and Blue/Green deployments) and Continuous Verification, alongside more platforms support. We are expecting lots of awesome new features in the [CloudBees UI for Jenkins X](https://docs.cloudbees.com/docs/cloudbees-jenkins-x-distribution/latest/user-interface/) too.\n\n\nExpect lots more exciting new announcements from Jenkins X in 2020!\n\n",
            "content/en/blog/news/serverless-jenkins.md": "---\ntitle: \"Serverless Jenkins\"\ndate: 2018-10-20T07:36:00+02:00\ndescription: >\n    How to get an elastic serverless Jenkins cloud\ncategories: [blog]\nkeywords: []\nslug: \"serverless-jenkins\"\naliases: []\nauthor: jstrachan\n---\n\n## Serverless Jenkins\n\n[James Rawlings](https://medium.com/@jdrawlings/) has just published an excellent article on [Serverless Jenkins with Jenkins X](https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870) that is well worth a read.\n\nIt describes how you can use it via the `--prow` feature flag when using either [jx create cluster](/commands/jx_create_cluster/) \n\n    jx create cluster gke --prow\n    \nor [jx install](/commands/deprecation/)\n\n    jx install --prow \n    \nFor more details see the [blog](https://medium.com/@jdrawlings/serverless-jenkins-with-jenkins-x-9134cbfe6870) or check out the video:\n         \n<iframe width=\"800\" height=\"500\" src=\"https://www.youtube.com/embed/DmhDvr8fExA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>    \n",
            "content/en/blog/news/serverless.md": "---\ntitle: \"Using Jenkins X To Define And Run Serverless Deployments\"\ndate: 2019-07-23T12:20:42-02:00\ndraft: false\ndescription: >\n  Using Jenkins X To Define And Run Serverless Deployments\ncategories: [blog]\nkeywords: [Jenkins X, Serverless, Knative, 2019]\nslug: \"serverless-deployments\"\naliases:\n  - /news/serverless-jenkins\nauthor: Viktor Farcic\n---\n\n<figure>\n<img src=\"/images/2019-dwjw-san-fran-rev.png\"/>\n</figure>\n\n# Using Jenkins X To Define And Run Serverless Deployments\n\n## What is Serverless Computing?\n\nTo understand serverless computing, one needs to understand the challenges we are facing with more \"traditional\" types of deployments of our applications. A long time ago, most of us were deploying our apps directly to servers. We had to decide the size (memory and CPU) of the nodes where our applications would run, we had to create those servers, and we had to maintain them. The situation improved with the emergence of cloud computing. We still had to do all those things, but now those tasks were much easier due to the simplicity of the APIs and services cloud vendors gave us. Suddenly, we had (a perception of) infinite resources and all we had to do is run a command, and a few minutes later the servers (VMs) we needed would materialize. Things become much easier and faster. But, that did not remove the tasks of creating and maintaining servers. Instead, that made them more straightforward. Concepts like immutability become mainstream as well. As a result, we got much-needed reliability, reduced drastically lean time, and started to rip benefits of elasticity.\n\nStill, some important questions were left unanswered. Should we keep our servers running even when our applications are not serving any requests? If we shouldn't, how can we ensure that they are readily available when we do need them? Who should be responsible for the maintenance of those servers? Is it our infrastructure department, our cloud provider, or can we build a system that will do that for us without human intervention?\n\nThings changed with the emergence of containers and schedulers. After a few years of uncertainty created by having too many options on the table, the situation stabilized around Kubernetes that become the de-facto standard. At roughly the same time, in parallel with the rise of popularity of containers and schedulers, solutions for serverless computing concepts started to materialize. Those solutions were not related to each other or, to be more precise, they were not during the first few years. Kubernetes provided us with means to run microservices as well as more traditional types of applications, while serverless focused on running functions (often only a few lines of code).\n\nThe name serverless is misleading by giving the impression that they are no servers involved. They are certainly still there, but the concept and the solutions implementing them allow us (users) to ignore their existence. The major cloud providers (AWS, Microsoft Azure, and Google) all came up with solutions for serverless computing. Developers could focus on writing functions with a few additional lines of code specific to our serverless computing vendor. Everything else required for running and scaling those functions become transparent.\n\nBut not everything is excellent in the serverless world. The number of use-cases that can be fulfilled with writing functions (as opposed to applications) is limited. Even when we do have enough use-cases to make serverless computing worthwhile effort, a more significant concern is lurking just around the corner. We are likely going to be locked to a vendor given that none of them implements any type of industry standard. No matter whether we choose AWS Lambda, Azure Functions, or Google Cloud Functions, the code we write will not be portable from one vendor to another. That does not mean that there are no serverless frameworks that are not tied to a specific cloud provider. There are, but we'd need to maintain them ourselves, be it on-prem or inside clusters running in a public cloud. That removes one of the most essential benefits of serverless concepts.\n\nThat's where Kuberentes comes into play.\n\n## Serverless Deployments In Kubernetes\n\nAt this point, I must make an assumption that you, dear reader, might dissagree with. Most of the companies will run at least some (if not all) of their applications in Kubernetes. It is becoming (or it already is) a standard API that will be used by (almost) everyone. Why is that assumption important? If I am right, then (almost) everyone will have a Kubernetes cluster. Everyone will spend time maintaining it, and everyone will have some level of in-house knowledge of how it works. If that assumption is correct, it stands to reason that Kubernetes would be the best choice of a platform to run serverless applications as well. That would avoid vendor lock-in since Kubernetes can run (almost) anywhere.\n\nKubernetes-based serverless computing would provide quite a few other benefits. We could be free to write our applications in any language, instead of being limited by those supported by function-as-a-service solutions offered by cloud vendors. Also, we would not be limited to writing only functions. A microservice or even a monolith could run as a serverless application. We just need to find a solution to make that happen. After all, proprietary cloud-specific serverless solutions use containers (of sorts) as well, and the standard mechanism for running containers is Kubernetes.\n\nThere is an increasing number of Kubernetes platforms that allow us to run serverless applications. We won't go into all of those, but fastrack the conversation by me stating that Knative is likely going to become the de-facto standard how to deploy serverless load to Kubernetes.\n\n[Knative](https://knative.dev/) is an open source project that delivers components used to build and run serverless applications on Kubernetes. We can use it to scale-to-zero, to autoscale, for in-cluster builds, and as an eventing framework for applications on Kubernetes. The part of the project we're interested in right now is its ability to convert our applications into serverless deployments. That should allow us both to save resources (memory and CPU) when our applications are idle, as well as to scale them fast when trafic increases.\n\nNow that we discussed what is serverless and that I made an outlandish statement that Kubernetes is the platform where your serverless applications should be running, let's talk which types of scenarios are a good fit for serverless deployments.\n\n## Which Types Of Applications Should Run As Serverless?\n\nInitially, the idea was to have only functions running as serverless loads. Those would be single-purpose pieces of code that contain only a small number of lines of code. A typical example of a serverless application would be an image processing function that responds to a single request and can run for a limited period. Restrictions like the size of applications (functions) and their maximum duration are imposed by implementations of serverless computing in cloud providers. But, if we adopt Kubernetes as the platform to run serverless deployments, those restrictions might not be valid anymore. We can say that any application that can be packaged into a container image can run as a serverless deployment in Kubernetes. That, however, does not mean that any container is as good of a candidate as any other. The smaller the application or, to be more precise, the faster its boot-up time is, the better the candidate for serverless deployments.\n\nHowever, things are not as straight forward as they may seem. Not being a good candidate does not mean that one should not compete at all. Knative, as many other serverless frameworks do allow us to fine-tune configurations. We can, for example, specify with Knative that there should never be less than one replica of an application. That would solve the problem of slow boot-up while still maintaining some of the benefits of serverless deployments. In such a case, there would always be at least one replica to handle requests, while we would benefit from having the elasticity of serverless providers.\n\nThe size and the booot-up time are not the only criteria we can use to decide whether an application should be serverless or not. We might want to consider traffic as well. If, for example, our app has high traffic and it receives requests throughout the whole day, we might never need to scale it down to zero replicas. Similarly, our application might not be designed in a way that every request is processed by a different replica. After all, most of the apps can handle a vast number of requests by a single replica. In such cases, serverless computing implemented by cloud vendors and based on function-as-a-service might not be the right choice. But, as we already discussed, there are other serverless platforms, and those based on Kubernetes do not follow those rules. Since we can run any container as serverless, any type of applications can be deployed as such, and that means that a single replica can handle as many requests as its design allows. Also, Knative and other platforms can be configured to have a minimum number of replicas, so they might be well suited even for the applications with a constant flow of traffic.\n\nAll in all, if it can run in a container, it can be converted into a serverless deployment, as long as we understand that smaller applications with faster boot-up times are better candidates than others. If there is a rule we should follow when deciding whether to run an application as serverless, it is related to the state. Or, to be more precise, the luck of it. If an application is stateless, it might be the right candidate for serverless computing.\n\nNow, let us imagine that you have an application that is not the right candidate to be serverless. Does that mean that we cannot rip any benefit from frameworks like Knative? We can since there is still the question of deployments to different environments.\n\nTypically, we have permanent and temporary environments. The examples of the former would be staging and production. If we do not want our application to be serverless in production, we will probably not want it to be any different in staging. Otherwise, the behavior would be different, and we could not say that we tested precisely the same behavior as the one we expect to run in production. So, in most cases, if an application should not be serverless in production, it should not be serverless in any other permanent environment. But, that does not mean that it shouldn't be serverless in temporary environments.\n\nLet's take an environment in which we deploy an application as a result of making a pull request as an example. It would be a temporary environment since we'd remove it the moment that pull request is closed. Its time span is relatively short. It could exist for a few minutes, but sometimes that could be days or even weeks. It all depends on how fast we are in closing pull requests.\n\nNevertheless, there is a high chance that the application deployed in such temporary environment will have low trafic. We would typically run a set of automated tests when the pull request is created or when we make changes to it. That would certainly result in a traffic spike. But, after that, the traffic would be much lower and most of the time non-existent. We might open the application to have a look at it, we might run some manual tests, and then we would wait for the pull request to be approved or for someone to push additional changes if we found some issues or inconsistencies. That means that the deployment in question would be unused most of the time. Still, if it would be a \"traditional\" deployment, it would oocupy resources for no particular reason. That might even discourage us from making temporary environments due to high costs.\n\nGiven that  deployments based on pull requests are not used for final validations before deploying to production (that's what permanent environments are for), we do not need to insist that they are the same as production. On the other hand, the applications in such environments are mostly unused. Those facts lead us to conclude that temporary (often pull-request based) environments are a great candidate for serverless deployments, no matter the deployment type we use in permanent environments (e.g., staging and production).\n\nNow that we saw some of the use cases for serverless computing, there is still an important one that we did not discuss.\n\n## Why Do We Need Jenkins X To Be Serverless?\n\nThere are quite a few problems with the traditional Jenkins. Most of us already know them, so I'll repeat them only briefly. Jenkins (without X) does not scale, it is not fault-tolerant, it's resource usage is heavy, it is slow, it is not API-driven, and so on. In other words, it was not designed yesterday, but when those things were not as important as they are today. Jenkins had to go away for Jenkins X to take its place.\n\nInitially, Jenkins X had a stripped-down version of Jenkins but, since the release 2, not a single line of the traditional Jenkins is left in Jenkins X. Now it is fully serverless thanks to Tekton and a lot of custom code written from scratch to support the need for a modern Kubernetes-based solution. Excluding a very thin layer that mostly acts as an API gateway, Jenkins X is fully serverless. Nothing runs when there are no builds, and it scales to accommodate any load. And that might be the best example of serverless computing we can have.\n\nContinuous integration and continuous delivery flows are temporary by their nature. When we make a change to a Git repository, it notifies the cluster, and a set of processes are spun. Each Git webhook request results in a pipeline run that builds, validates, and deploys a new release and, once those processes are finished, it dissapears from the system. Nothing is executing when there are no pipeline runs, and we can have as many of them in parallel as we need. It is elastic and resource-efficient, and the heavy lifting is done by Tekton.\n\nContinuous integration and continuous delivery tools are probably one of the best examples of a use-case that fits well in serverless computing concepts.\n\n## What Is Tekton And How Does It Fix Jenkins X?\n\nThose of you using serverless Jenkins X already experienced Knative, of sorts. Tekton is a spin-off project of Knative, and it is the essential component in the solution. It is in charge of creating pipeline runs (a special type of Pods) when needed and destroying them when finished. Thanks to Tekton, the total footprint of serverless Jenkins X is very small when idle. Similarly, it allows the solution to scale to almost any size when that is needed.\n\nTekton is designed only for \"special\" type of processes, mostly those associated with continuous integration and continuous delivery pipelines. It is not, however, suited for long-running applications designed to handle requests. So, why am I talking about Tekton if it does not allow us to run our applications as serverless? The answer lies in Tekton's father.\n\nTekton is a Knative spin-off. It was forked from it in hopes to provide better CI/CD capabilities. Or, to be more precise, Tekton was born out of the [Knative Build](https://knative.dev/docs/build/) component, which is now considered deprecated. But, Knative still stays the most promising way to run serverless applications in Kubernetes. It is the father of Tekton, which we've been using for a while now given that it is an integral part of serverless Jenkins X.\n\nNow, I could walk you through the details of Knative definitions, but that would be out of the scope of this subject. It's about Jenkins X, not about Knative and other platforms for running serverless application. But, my unwilingness to show you the ups and downs of Knative does not mean that we cannot use it. As a matter of fact, Jenkins X already provides means to select whether we want to create a quickstart or import an existing project that will be deployed as a serverless application using Knative. We just need to let Jenkins X know that's what we want, and it'll do the heavy lifing of creating the definition (YAML file) that we need.\n\nSo, Jenkins X is an excellent example of both a set of serverless applications that constitute the solution, as well as a tool that allows us to convert our existing applications into serverless deployments. All we have to do to accomplish the latter is to express that as our desire, and Jenkins X will do all the heavy lifting of creating the correct definitions for our applications as well as to move them through their life cycles.\n",
            "content/en/blog/news/walkthrough.md": "---\ntitle: \"Walkthrough: Setting up Jenkins X on a Kubernetes cluster\"\ndate: 2020-03-10\ndraft: false\ndescription: >\n  Set up Jenkins X on a Kubernetes cluster hosted on GKE \ncategories: [blog]\nkeywords: [Jenkins,Community,2020]\nslug: \"walkthrough\"\naliases: []\nauthor: Kara de la Marck\n---\n\nIn this tutorial, we'll walk you through setting up Jenkins X on a Kubernetes cluster hosted on GKE. We will use GitHub as our Git provider. \n\nThe purpose of this tutorial is to give a detailed step-by-step walkthrough of setting up Jenkins X. \n\n\n### Setup used in this tutorial\n* GitHub as our Git provider and a GitHub user account, eg `MarckK` \n* A Google Cloud Platform (GCP) account with the ability to provision kubernetes resources / create kubernetes clusters\n* Jenkins X `jx` binary installed. See [here for instructions on installing the `jx` binary](https://jenkins-x.io/docs/getting-started/setup/install/). \n\n* The Kubernetes command-line tool, which can be installed to your local installation using the `jx install` command:\n```\njx install dependencies -d kubectl\n```\n\nWe are going to create a GitHub organisation which will have two members, a GitHub user account, eg `MarckK`, and a GitHub 'Pipeline' bot account, eg `jx-bot`.\n\n* We can create a new GitHub organisation by clicking the **+** at the top right of GitHub's top navigation bar or by clicking to the [create an organization page](https://github.com/organizations/plan). I chose the free 'Team for Open Source' plan for my new GitHub organisation; this means the organisation will _not_ have unlimited private repositories. Name your organisation anything you like, eg `jenkins-x-space`.\n\n* Invite your GitHub user account, eg `MarckK`, to the organisation. This GitHub user account will create and manage development repositories.\n\n* Next we create a GitHub Pipeline bot account. This Pipeline bot will automate pull request notifications and create preview environments for quick validation and acceptance for code merging. Your Pipeline bot should be created as a member of your GitHub organisation, eg `jenkins-x-space`.\n\n    Create an entirely new account that will be only for your bot. Name your bot anything you like, eg `jx-bot`.\n\n    The bot account must have a token created in your organization that authenticates the bot and allows it to perform various tasks on the repositories within your organization. \n\n    Generate a Git token for your Pipeline Bot with the correct permissions via this [GitHub Link](https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,write:repo_hook,delete_repo) and **copy the 40 character token**.\n\n{{% alert color=\"warning\" %}}\n\nThe 40 character token generated by GitHub is only shown once so you must copy this immediately before you close the browser tab or window, as the token cannot be retrieved once it is displayed. You will be asked for this token later, so please do keep a copy of it.\n\n{{% /alert %}}\n\n* At this point, I signed out of my GitHub Pipeline bot account and back into my GitHub user account, eg `MarckK`.\n\n### Step 1 -  Create a Kubernetes cluster\n\n* `jx create cluster gke` will create a cluster on Google Kubernetes Engine (GKE), which you can initialise with a name. From the command-line run:\n\n```\njx create cluster gke --skip-installation -n <cluster name>\n```\n\n* The program opens a web browser and you will be asked to choose the email address associated with your GCP account and to allow the Google Cloud SDK access to your account. After confirming, you can close the browswer page.\n\n* Back at the command-line, the `jx create cluster` program prompts you to choose your Google Cloud Project from the available list.\n\n* The program prompts you to choose the Zone nearest to where you would like to install your cluster. For example, if you want your cluster to serve users primarily in the east coast of the United states, you choose `us-east1-b` from the available list.\n\n* The program runs automatically through default questions and begins creating the cluster in your specified zone.\n\nTowards the end, you will see output similar to:\n\n```\nNAME         LOCATION         MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION    NUM_NODES  STATUS\nwalkthrough  europe-north1-a  1.14.10-gke.17  35.228.74.166  n1-standard-2  1.14.10-gke.17  3          RUNNING\n```\n\nCongratulations you now have a Kubernetes cluster!\n\n### Step 2 - Installing Jenkins X on a cluster\n\n<!-- ### Edit all this with new jx boot \u2014--git-public` flag (woohoo!)\n\n```bash\njx boot --git-public\n```\n\nDoes NOT work. Just returns: `Error: unknown flag: --git-public`\nThis has been implemented for `jx create` or `jx install` [apparently](https://jenkins-x.io/docs/getting-started/setup/boot/#git). Not jx boot. And unfortunately, that happens to be where I would like to have it enabled. -->\n\n* First clone the [Jenkins X Boot configuration repo](https://github.com/jenkins-x/jenkins-x-boot-config) and `cd` into your newly cloned repo.\n\n* Open the `jx-requirements.yml` file of your newly cloned repo, eg. `jenkinx-x-boot-config/jx-requirements.yml`. This specifies the requirements of your installation, including:\n    * what Kubernetes provider to use\n    * whether to store secrets in the local file system or vault\n    * if you are using Terraform to manage your cloud resources\n   \n    Note, this is the main configuration file for `jx boot` and where you make most of your configuration changes.\n\n    The `jx-requirements.yml` file is interesting to review, see the defaults in place, and make any changes you need.  \n\n* For my setup, I knew there was one change I needed to make to the `jx-requirements.yml`. By default, Jenkins X will create private environment repos. You can see this configured in `jx-requirements.yml` as `environmentGitPublic: false`. However, I set up a free open source GitHub organization to hold the environment repositories that will be created by Jenkins X, and this type of GitHub organization account does not have access to private repos. To configure Jenkins X to create public environment repositories, set `environmentGitPublic` to `true` in `jx-requirements.yml`.\n\n* Save your changes and then on the command line run:\n\n```\njx boot\n```\n\nIf you are not in a clone of a boot git repository then `jx boot` will clone this repository and `cd` into the clone.\n\n\nYou can read more about [Jenkins X Boot in the documentation](https://jenkins-x.io/docs/getting-started/setup/boot/).\n\nYour Git and the pre-installation set up for Jenkins X will be checked and validated. You will see printed out: \n\n`Currently connected cluster is ```<cluster_name>``` in ```<cluster_location>``` in project ```<your_chosen_project>``\n\nYou will be asked to confirm that you would like to `jx boot` your `<cluster_name>`. \n\nThen you will be asked a series of questions to ensure Jenkins X is installed properly on your cluster:\n\n* You will be asked to input the `Git Owner name for environment repositories`: Type in the organistion you created, eg `jenkins-x-space`.\n\n* You will be asked to provide `Comma-separated git provider usernames of approvers for development environment repository`: Type in the name of the GitHub account that is a member of the organisation you created, eg `MarckK`.\n\n* You may receive a Warning that `TLS is not enabled so your webhooks will be called using HTTP.` You will be asked for confirmation to continue. \n  * If you type 'No', the `jx boot` process will end with `error: cannot continue because TLS is not enabled.`\n\n  * If you type 'Yes', then namespace `jx` will be created in your cluster and Jenkins X booted in that namespace.\n\n* You may be asked if you wish to upgrade `jx`. It is recommended you say 'Yes' and then re-run `jx boot`.\n\n* There will be information logged on enabling storage on GKE. You do not need to enable storage for this walkthrough tutorial.\n\n* You will see information on the pipeline steps of JX Boot.\n\n* You will be asked `Jenkins X Admin Username`: Type in a username or press return to have the default username of `admin`.\n\n* You will then be asked for `Jenkins X Admin Password`: Type one in.\n\n* You will then be asked for `Pipeline bot Git username`: Type in the name of the Pipeline Bot you created, eg `jx-bot`.\n\n* You will then be asked for `Pipeline bot Git email address`: Type in the email address you used when setting up your Pipeline Bot.\n\n* You will then be asked for `Pipeline bot Git token`: Type in the token generated and saved previously.\n\n* You will be asked, `Do you want to configure an external Docker Registry?`: 'No' is sufficient for this tutorial\n\n* More pipeline steps will be run. You should see output that your pods are running and other verification information telling you the state of your Jenkins x set-up.\n\nThen you will see confirmation on the state of your installation process, such as: \n\n`Installation is currently looking: GOOD`\n\n* In the organisation you created, eg `jenkins-x-space`, there should now be 3 additional repositories for the dev, staging, and production environments, which map to the dev, staging, and production namespaces in your cluster.\n\nJenkins X should be installed on your Kubernetes cluster. \ud83c\udf89\n\nTo see the Jenkins X environments that have been created, the corresponding GitOps git repos, and the default promotion strategy between environments:\n\n```bash\njx get environments\n```\nYou should see something similar to:\n\n```bash\n NAME       LABEL       KIND        PROMOTE NAMESPACE     ORDER CLUSTER SOURCE                                                                    REF    PR\ndev        Development Development Never   jx            0             https://github.com/jenkins-x-space/environment-walkthrough-dev.git        master\nstaging    Staging     Permanent   Auto    jx-staging    100           https://github.com/jenkins-x-space/environment-walkthrough-staging.git    master\nproduction Production  Permanent   Manual  jx-production 200           https://github.com/jenkins-x-space/environment-walkthrough-production.git master\n```\n\nNote the following details in the PROMOTE column:\n\n* Development has **Never** promote, because you're working locally in this environment and not deploying anything.\n\n* The Staging environment's default is to **Auto** promote, meaning any merge performed on the repo's master branch will automatically be deployed as a new version to staging.\n\n* The Production environment's default is to have a **Manual** promotion strategy, meaning that you will have to manually promote your staging application version into production by using a jx promotion command.\n\nThe SOURCE column shows each environment's configuration git repo.\n\n### Step 3 - Create an application\n\nNow that you have a working cluster with Jenkins X installed, you are going to create an\napplication that can be built & deployed with Jenkins X.\n\n### Using a quickstart\n\nJX has a `create quickstart` command that will create a build from a standardised template.\nTo run this command, change your directory so that you are no longer within the `jenkins-x-boot-config` directory, then type the following:\n\n```bash\njx create quickstart --git-public=true\n```\nWe are adding the `--git-public=true` flag to ensure that our new quickstart application will create repositories that are public on GitHub, as our freemium GitHub organisation requires.\n\nFor this example, select `golang-http`.\n\nYou will be asked a series of questions such as:\n\n* `Do you wish to use <your GitHub user name> as the Git user name?`: Choose `y`\n* `Who should be the owner of the repository?`: Choose the organisation you have created, eg `jenkins-x-space`.\n* `Enter the new repository name`: Choose a name for your new application, such\nas `jx-tutorial`\n\nJX will then guide you through setting up the git repository for the application.\n\nIf this is the first application you have created, it may take a few minutes to download all\nof the required builder images in order to build/deploy the application.  \n\nTo view the status of the application, you can use the following:\n\n```bash\njx get activity -f jx-tutorial -w\n```\nNote: -f is for --filter and -w is for --watch\n\nWhen the pipeline is complete, to view the application in each environment along with urls:\n\n```bash\njx get applications\n```\n\n### Promote the application to production\n\nUsing the `jx promote` command, you can push this version from staging to\nproduction.\n\n```bash\ncd jx-tutorial\n```\n_If you have 2FA enabled on your GitHub account, then you may need to use an api token as your password when prompted._\n\n```bash\njx promote jx-tutorial --version 0.0.1 --env production\n```\n\nYou can check the progress of the production deployment using:\n\n```bash\njx get activity -f jx-tutorial -w\n```\n\n```bash\njx get applications\n```\n\n## Congratulations\n\nYou\u2019re all set!\n\nYou now have a fully configured Jenkins X installation on Google Kubernetes Engine.\n\nTo avoid running up unnecessary costs, you may wish to shut down your kubernetes cluster at this point.  To view all clusters running with the current account use:\n\n```bash\ngcloud container clusters list\n```\n\nTo delete the cluster run:\n\n```bash\ngcloud container clusters delete <clustername> --zone <zone>\n```\n\n",
            "content/en/community/README.md": "# Contributing Rich Event Data\n\nTo make upcoming Jenkins X events show up more prominently in Google search and map results, we mark up our event information in structured data.\n\nMore information here: https://developers.google.com/search/docs/data-types/event\n\n## Sample Event Data\n\nHere is a multi-day event for DevOps World - Jenkins World with an offers URL for the registration page:\n\n```\n<div class=\"event-wrapper\" itemscope itemtype=\"http://schema.org/Event\">\n  <meta itemprop=\"image\" content=\"https://jenkins-x.io/images/community/events/2019-DWJW-JAM_banner-600x338.jpg\" />\n  <meta itemprop=\"description\" content=\"DevOps World - Jenkins World is the largest gathering of Jenkins users in the world, including Jenkins experts, continuous delivery practitioners, and companies offering complementary technologies to Jenkins.\" />\n  <meta class=\"event-date\" itemprop=\"startDate\" content=\"2019-12-03\" />\n  <meta class=\"event-date\" itemprop=\"endDate\" content=\"2019-12-05\" />\n  <meta class=\"event-title\" itemprop=\"name\" content=\"DevOps World - Jenkins World\" />\n  <div class=\"event-venue\" itemprop=\"location\" itemscope itemtype=\"http://schema.org/Place\">\n      <meta itemprop=\"name\" content=\"Lisbon Congress Center\" />\n      <div class=\"address\" itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n          <meta itemprop=\"streetAddress\" content=\"Pra\u00e7a das Ind\u00fastrias 1\" />\n          <meta itemprop=\"postalCode\" content=\"1300-307\" />\n          <meta itemprop=\"addressLocality\" content=\"Lisboa\" />\n          <meta itemprop=\"addressCountry\" content=\"Portugal\" />\n      </div>\n  </div>\n  <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\n    <meta itemprop=\"priceCurrency\" content=\"EUR\" />\n    <meta itemprop=\"url\" content=\"https://www.cloudbees.com/devops-world\" />\n  </div>\n</div>\n```\n\nHere is a one-day event with start and end times. Google assumes the timezone of the provided location, so if the event is online be sure to add timezone info like `2020-02-02T09:00:00+02:00` (for Brussels UTC+2) if no location is specified. Here we use `isAccessibleForFree` to denote a free event.\n\n```\n<div class=\"event-wrapper\" itemscope itemtype=\"http://schema.org/Event\">\n  <link itemprop=\"image\" content=\"https://jenkins-x.io/images/community/events/2020-fosdem.png\" />\n  <meta itemprop=\"description\" content=\"For the first time, there will be a Continuous Integration and Continuous \n  Deployment (CI/CD) devroom at FOSDEM! The CI/CD devroom will take place on 2nd of February 2020 in Brussels, Belgium.\" />\n  <meta class=\"event-date\" itemprop=\"startDate\" content=\"2020-02-02T09:00:00\" />\n  <meta class=\"event-date\" itemprop=\"endDate\" content=\"2020-02-02T17:00:00\" />\n  <meta itemprop=\"isAccessibleForFree\" content=true />\n  <meta itemprop=\"audience\" content=\"IT professionals\" />\n  <meta class=\"event-title\" itemprop=\"name\" content=\"CI/CD Devroom at FOSDEM 2020\" />\n  <div class=\"event-venue\" itemprop=\"location\" itemscope itemtype=\"http://schema.org/Place\">\n      <meta itemprop=\"name\" content=\"Universit\u00e9 libre de Bruxelles\" />\n      <div class=\"address\" itemprop=\"address\" itemscope itemtype=\"http://schema.org/PostalAddress\">\n          <meta itemprop=\"streetAddress\" content=\"Avenue Franklin D. Roosevelt 50\" />\n          <meta itemprop=\"postalCode\" content=\"1050\" />\n          <meta itemprop=\"addressLocality\" content=\"Brussels\" />\n          <meta itemprop=\"addressCountry\" content=\"BE\" />\n          <meta itemprop=\"latitude\" content=50.812375 />\n          <meta itemprop=\"longitude\" content=4.380734 />\n      </div>\n  </div>\n  <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\n    <link itemprop=\"url\" content=\"https://fosdem.org/2020/\" />\n  </div>\n</div>\n```",
            "content/en/community/_index.md": "---\nlinktitle: \"Join the Community\"\nmenu:\n  community:\n    weight: 1\n    name: Welcome to the Jenkins X Community\n  main:\n    weight: 10\n    name: \"Community\"\ntype: docs\nno_list: true\n---\n\nWelcome to the Jenkins X community!\n\nWe value respect and inclusiveness and follow the [CDF Code of Conduct](/community/code_of_conduct/) in all interactions.\n\n### Slack\n\nWe'd love to talk with you about Jenkins X and are happy to help if you have any questions.\n\nTalk to us on our slack channels, which are part of the Kubernetes slack.\nJoin Kubernetes slack [here](https://slack.k8s.io/) and find us on our channels:\n\n- [\\#jenkins-x-user](https://kubernetes.slack.com/messages/C9MBGQJRH) for users of Jenkins X\n- [\\#jenkins-x-dev](https://kubernetes.slack.com/messages/C9LTHT2BB) for developers of Jenkins X\n\n### Meetings\n\n<!--\nDuring office hours we demo the latest features, answer questions, and share knowledge together.\n\nWe meet for office hours **every other Tuesday** at 15:00 UTC (_See your timezone [here](https://time.is/1500_in_UTC)_).\n\n<a href=\"https://zoom.us/j/94376109791?pwd=OWswL3dvTUxSUW9VWkJmQXBTOHlCZz09\" class=\"btn btn-lg bg-primary text-white\">join the Office Hours meeting</a>\n-->\nYou can save Jenkins X meetings to your calendar by [clicking here](https://calendar.google.com/event?action=TEMPLATE&tmeid=ZTM2N2ducTd2MDJubXY2N2hwc2N2dGNyMm9fMjAyMjAxMThUMTUwMDAwWiByNnE4OW91MzI3MHExZXBnYnI2dWpqMjgxNEBn&tmsrc=r6q89ou3270q1epgbr6ujj2814%40group.calendar.google.com&scp=ALL).\n\n{{< calendar >}}\n\nVisit [jx-community](https://github.com/jenkins-x/jx-community/) repository to read meeting notes.\n\n<!--\nOffice hour meeting notes can be found [here](https://docs.google.com/document/d/1gQIIVYboInUTpb2v5ZxC80suBPJ6T2Z18Ba1EL7YPOI/edit?usp=sharing)\n\nPrevious office hour recordings can be found on our [Jenkins X YouTube channel](https://www.youtube.com/channel/UCN2kblPjXKMcjjVYmwvquvg/playlists) in the Office Hours playlist.\nAlternatively, see our office hours [archives](/community/office_hours/).\n-->\n\n### Resources\n\nWe have a curated list of [Jenkins X talks](/docs/resources/demos-talks-posts/talks/) and [articles](/docs/resources/demos-talks-posts/articles/) from our community to check out in our [Resources](/docs/resources/demos-talks-posts/) section.\n\n### Reporting Issues\n\nGot any thoughts, ideas or feedback then please drop them in a [GitHub Issue](https://github.com/jenkins-x/jx/issues/new).\n\nYou may also want to try [Stack Overflow](https://stackoverflow.com/questions/tagged/jenkins--x) with the tag `jenkins--x` though we prefer [GitHub Issues](https://github.com/jenkins-x/jx/issues).\n\n### Contributors\n\n{{< contributors >}}\n",
            "content/en/community/calendar.md": "---\ntitle: Event Calendar\nlinktitle: Event Calendar\ndescription: This calendar tracks upcoming events related to Jenkins X.\ntype: docs\nno_list: true\nweight: 60\naliases:\n  - /docs/community/calendar/\n---\n\n{{< calendar >}}\n\n### Add Events or Make Changes\n\nPlease create a documentation issue using the link on the right hand menu, or [click here](https://github.com/jenkins-x/jx-docs/issues/new?title=Event%20Calendar).\n\nYou should then be at a page for creating an issue on the `jenkins-x/jx-docs` repo, with the issue title as \"Event Calendar\". Please describe your event, with meeting links, and the time in UTC. Thank you!\n",
            "content/en/community/code/_index.md": "---\ntitle: Contribute code\nlinktitle: Contribute Code\ndescription: How to contribute code to Jenkins X development.\nauthors: [digitalcraftsman]\nweight: 20\ntype: docs\nno_list: true\naliases:\n    - /docs/contributing/\n---\n\n## Introduction\n\nJenkins X is an open-source project and lives by the work of its [contributors](https://github.com/jenkins-x/jx/graphs/contributors). There are plenty of [open issues](https://github.com/jenkins-x/jx/issues), and we need your help to make Jenkins X even more awesome. You don't need to be a Go guru to contribute to the project's development.\n\n## Assumptions\n\nThis contribution guide takes a step-by-step approach in hopes of helping newcomers. Therefore, we only assume the following:\n\n* You are new to Git or open-source projects in general\n* You are a fan of Jenkins X and enthusiastic about contributing to the project\n\n{{< alert >}}\nIf you're struggling at any point in this contribution guide, reach out to the Jenkins X community in [Jenkins X's Discussion forum](/community/).\n{{< /alert >}}\n\n## Prerequisites\n\nTo contribute to Jenkins X jx binary, you will need:\n\n* [Git](https://git-scm.com) and a [GitHub](https://github.com) account\n* [Go](https://golang.org/) `1.18.X`, with support for compiling to `linux/amd64`\n* [golangci-lint](https://github.com/golangci/golangci-lint)`1.46.2`, wich will be used to lint your code later\n* [pre-commit](https://pre-commit.com/#install) - once installed, ensure you're at the root of the repository which contains a `.pre-commit-config.yaml` configuration file, then:\n\n```sh\npre-commit install\n```\n\n### Install Go\n\nWe recommend `1.17.X` version of go as the pull request checks run against this version.\n\nThe installation of Go should take only a few minutes. You have more than one option to get Go up and running on your machine.\n\nIf you are having trouble following the installation guides for go, check out [Go Bootcamp](http://www.golangbootcamp.com/book/get_setup) which contains setups for every platform or reach out to the Jenkins X community in the [Jenkins X Slack channels](/community/#slack).\n\n#### Install Go on macOS\n\nIf you are a macOS user and have [Homebrew](https://brew.sh/) installed on your machine, installing Go is as simple as the following command:\n\n```sh\nbrew install go@1.15\n```\n\n#### Install Go via GVM\n\nMore experienced users can use the [Go Version Manager](https://github.com/moovweb/gvm) (GVM). GVM allows you to switch between different Go versions *on the same machine*. If you're a beginner, you probably don't need this feature. However, GVM makes it easy to upgrade to a new released Go version with just a few commands.\n\nGVM comes in especially handy if you follow the development of Jenkins X over a longer period of time. Future versions of Jenkins X will usually be compiled with the latest version of Go. Sooner or later, you will have to upgrade if you want to keep up.\n\n#### Install Go on Windows\n\nSimply install the latest version by downloading the [installer](https://golang.org/dl/).\n\n### Clearing your go module cache\n\nIf you have used an older version of go you may have old versions of go modules. So its good to run this command to clear your cache if you are having go build issues:\n\n```sh\ngo clean -modcache\n```\n\n### Set up your GOPATH\n\nOnce you're finished installing Go, let's confirm everything is working correctly. Open a terminal - or command line under Windows - and type the following:\n\n```sh\ngo version\n```\n\nYou should see something similar to the following written to the console (on macOS). Note that the version here reflects the most recent version of Go as of the last update for this page:\n\n```sh\ngo version go1.17.x darwin/amd64\n```\n\nNext, make sure that you set up your `GOPATH` [as described in the installation guide](https://github.com/golang/go/wiki/SettingGOPATH).\n\nYou can print the `GOPATH` with `echo $GOPATH`. You should see a non-empty string containing a valid path to your Go workspace; .e.g.:\n\n```sh\n$ echo $GOPATH\n/Users/<yourusername>/Code/go\n```\n\n### Install Git on your system\n\nGit is a [version control system](https://en.wikipedia.org/wiki/Version_control) to track the changes of source code.\n\nYou will need to have Git installed on your computer to contribute to Jenkins X development. Teaching Git is outside the scope of the Jenkins X docs, but if you're looking for an excellent reference to learn the basics of Git, we recommend the [Git book](https://git-scm.com/book/) if you are not sure where to begin.\n\nMove back to the terminal and check if Git is already installed. Type in `git version` and press enter. You can skip the rest of this section if the command returned a version number. Otherwise [download](https://git-scm.com/downloads) the latest version and follow this [installation guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\n\nFinally, check again with `git version` if Git was installed successfully.\n\n#### Git Graphical Front Ends\n\nThere are several [GUI clients](https://git-scm.com/downloads/guis) that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, we will use the command line since the commands are everywhere the same.\n\n#### Install Hub on Your System (Optional)\n\nHub is a great tool for working with GitHub. The main site for it is [hub.github.com](https://hub.github.com/). Feel free to install this little Git wrapper.\n\nOn a Mac, you can install [Hub](https://github.com/github/hub) using [Homebrew](https://brew.sh):\n\n```sh\nbrew install hub\n```\n\nNow we'll create an [alias in Bash](http://tldp.org/LDP/abs/html/aliases.html) so that typing `git` actually runs `Hub`:\n\n```sh\necho \"alias git='hub'\" >> ~/.bash_profile\n```\n\n### Create a GitHub Account\n\nIf you're going to contribute code, you'll need to have an account on GitHub. Go to [www.github.com/join](https://github.com/join) and set up a personal account.\n\n## Set up your working copy\n\nThe working copy is set up locally on your computer. It's what you'll edit, compile, and end up pushing back to GitHub. The main steps are cloning the repository and creating your fork as a remote.\n\n### Fork the repository\n\nIf you're not familiar with this term, GitHub's [help pages](https://help.github.com/articles/fork-a-repo/) provide again a simple explanation:\n\n> A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nYou can contribute to any of [Jenkins X repositories](https://github.com/jenkins-x) or [Jenkins X Plugins repositories](https://github.com/jenkins-x-plugins). You can find all the related issues in each repo, for searching use labels as filters.\n\nOpen the [Jenkins X repository](https://github.com/jenkins-x/jx) on GitHub and click on the \"Fork\" button in the top right.\n\n![Fork button](/images/contribute/development/forking-a-repository.png)\n\n### Clone your fork locally\n\nNow open your fork repository on GitHub and copy the remote url of your fork. You can choose between HTTPS and SSH as protocol that Git should use for the following operations. HTTPS works always [if you're not sure](https://help.github.com/articles/which-remote-url-should-i-use/).\n\n![Copy remote url](/images/contribute/development/copy-remote-url.png)\n\nThen go back to your terminal and clone your fork locally. Since jx is a Go package, it should be located at `$GOPATH/src/github.com/jenkins-x/jx`.\n\n```sh\nmkdir -p $GOPATH/src/github.com/jenkins-x\ncd $GOPATH/src/github.com/jenkins-x\ngit clone git@github.com:<YOUR_USERNAME>/jx.git\ncd jx\n```\n\nAdd the conventional upstream `git` remote in order to fetch changes from jx's main\nbranch and to create pull requests:\n\n```sh\ngit remote add upstream https://github.com/jenkins-x/jx.git\n```\n\nLet's check if everything went right by listing all known remotes:\n\n```sh\ngit remote -v\n```\n\nThe output should look similar to:\n\n```sh\norigin    git@github.com:<YOUR_USERNAME>/jx.git (fetch)\norigin    git@github.com:<YOUR_USERNAME>/jx.git (push)\nupstream  https://github.com/jenkins-x/jx.git (fetch)\nupstream  https://github.com/jenkins-x/jx.git (push)\n```\n\n### Fork with Hub\n\nAlternatively, you can use the Git wrapper Hub. Hub makes forking a repository easy:\n\n```sh\nhub fork\n```\n\nThat command will log in to GitHub using your account, create a fork of the repository that you're currently working in, and add it as a remote to your working copy.\n\n## Contribution Workflow\n\n### Create a new branch\n\nFirst, ensure that your local repository is up-to-date with the latest version of jx. More details on [GitHub help](https://help.github.com/articles/syncing-a-fork/)\n\n```sh\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n```\n\nNow you can create a new branch for your change:\n\n```sh\ngit checkout -b <BRANCH-NAME>\n```\n\nYou can check on which branch your are with `git branch`. You should see a list of all local branches. The current branch is indicated with a little asterisk.\n\n### General Development\n\n#### Cross-platform Development\n\nBear in mind when developing that the code can (and will) run on different architectures/operating systems from your own. You may develop on a *nix platform, but other users will also be using Windows. Keep other platforms in mind when developing your code, eg:\n\n* Not all platforms use the `HOME` environment variable for your home directory. Use [`user.Current`](https://golang.org/pkg/os/user/#Current)[`.HomeDir`](https://golang.org/pkg/os/user/#User) instead of looking up `$HOME` to get the user's home directory\n* Different platforms use different places for temporary directories/files. Use [`ioutil.TempDir`](https://golang.org/pkg/io/ioutil/#TempDir) instead of creating directories/files under `/tmp`\n* Be aware of path separators (*nix uses `/`, Windows uses `\\`) - do not just concatenate strings when using filepaths; instead use [`filepath.Join`](https://golang.org/pkg/path/filepath/#Join) to concatenate file paths safely\n* Be aware of default line endings (*nix uses `LF`, Windows uses `CRLF`)\n\n### Load dependincies\nBefore developing in the codebase, you should first load all packages and dependencies in the software we use.\n```sh\ngo mod tidy\n```\n\n### Push commits\n\nTo push our commits to the fork on GitHub you need to specify a destination. A destination is defined by the remote and a branch name. Earlier, the remote url of our fork was given the default name of `origin`. The branch should be given the same name as our local one. This makes it easy to identify corresponding branches.\n\n```sh\ngit push --set-upstream origin <BRANCH-NAME>\n```\n\nNow Git knows the destination. Next time when you to push commits you just need to enter `git push`.\n\n### Lint your change\n\nIt is not a optional step. Linting code is considered as important as writing logical changes as it can increase performance and making the code cleaner and more readable. Make sure you installed golangci-lint `v1.42.1` mentioned above.\n\n```sh\nmake lint\n``` \nNote: \nSome linting issues that will appear may not be a result of your changes as linting step was not used at the start of the project, pleas consider fixing them.\n\n### Build your change\n\nWith the prerequisites installed and your fork of jx cloned, you can make changes to local jx source code and hack as much as you want.\n\nRun `make` to build the `jx` binaries:\n\n```sh\nmake build\n```\n\nSee below to get some advises on how to [test](#testing) and [debug](#debugging).\n\n### Squash and rebase\n\nSo you are happy with your development and are ready to prepare the PR. Before going further, let's squash and rebase your work.\n\nThis is a bit more advanced but required to ensure a proper Git history of Jenkins X. Git allows you to [rebase](https://git-scm.com/docs/git-rebase) commits. In other words: it allows you to rewrite the commit history.\n\nLet's take an example.\n\n```sh\ngit rebase --interactive @~3\n```\n\nThe `3` at the end of the command represents the number of commits that should be modified. An editor should open and present a list of last three commit messages:\n\n```sh\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\npick 33c8973 Begin workflow\npick 3502f2e Refactoring and typo fixes\n```\n\nIn the case above we should merge the last 2 commits in the commit of this tutorial (`Add \"How to contribute to Jenkins X\" tutorial`). You can \"squash\" commits, i.e. merge two or more commits into a single one.\n\nAll operations are written before the commit message. Replace `pick` with an operation. In this case `squash` or `s` for short:\n\n```sh\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\nWe also want to rewrite the commits message of the third last commit. We forgot \"docs:\" as prefix according to the code contribution guidelines. The operation to rewrite a commit is called `reword` (or `r` as shortcut).\n\nYou should end up with a similar setup:\n\n```sh\nreword 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\nClose the editor. It should open again with a new tab. A text is instructing you to define a new commit message for the last two commits that should be merged (aka \"squashed\"). Save the file and close the editor again.\n\nA last time a new tab opens. Enter a new commit message and save again. Your terminal should contain a status message. Hopefully this one:\n\n```sh\nSuccessfully rebased and updated refs/heads/<BRANCH-NAME>.\n```\n\nCheck the commit log if everything looks as expected. Should an error occur you can abort this rebase with `git rebase --abort`.\n\nIn case you already pushed your work to your fork, you need to make a force push\n\n```sh\ngit push --force\n```\n\nLast step, to ensure that your change would not conflict with other changes done in parallel by other contributors, you need to rebase your work on the latest changes done on jx main branch. Simply:\n\n```sh\ngit checkout main #Move to local main branch\ngit fetch upstream #Retrieve change from jx main bracnch\ngit merge upstream/main #Merge the change into your local main\ngit checkout <BRANCH-NAME> #Move back to your local branch where you did your development\ngit rebase main\n```\n\nHandle any conflicts and make sure your code builds and all tests pass. Then force push your branch to your remote.\n\n### Signoff\n\nA [Developer Certificate of Origin](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin) is required for all\ncommits. It can be proivided using the [signoff](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff)\noption for `git commit` or by GPG signing the commit. The developer certificate is available at (https://developercertificate.org/).\n\nJenkins X enforces the DCO using the a [bot](https://github.com/probot/dco). You can view the details on the DCO check\nby viewing the `Checks` tab in the GitHub pull request.\n\n![DCO signoff check](https://user-images.githubusercontent.com/13410355/42352794-85fe1c9c-8071-11e8-834a-05a4aeb8cc90.png)\n\n#### How to Sign Your Commits\n\nThere are a couple of ways to ensure your commits are signed.\nDescribed below are three different ways to sign your commits: using git signoff, using GPG, or using webhooks.\n\n##### Git signoff\nGit signoff adds a line to your commit message with the user.name and user.email values from your git config.\nUse git signoff by adding the `--signoff` or `-s` flag when creating your commit.\nThis flag must be added to each commit you would like to sign.\n\n```sh\ngit commit -m -s \"docs: my commit message\"\n```\n\nIf you'd like to keep your personal email address private, you can use a GitHub-provided `no-reply` email address as your commit email address.\nGitHub provides [good instructions on setting your commit email address](https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address).\n\n##### GPG sign your commits\nA more secure alternative is to GPG sign all your commits.\nThis has the advantage that as well as stating your agreement to the DCO it also creates a trust mechanism for your commits.\nThere is a good guide from GitHub on how to set this up:\n\n1) If you don't already have a GPG key, then follow [this guide to create one](https://help.github.com/en/articles/generating-a-new-gpg-key).\n2) Now you have a GPG key, tell [tell GitHub about your key so that it can verify your commits](https://help.github.com/en/articles/adding-a-new-gpg-key-to-your-github-account).\nOnce you upload your public gpg key to your GitHub account, GitHub will mark commits that you sign with the `verified` label.\n3) To sign commits locally, you can add the `-S` flag when creating your commit.\nFor more information on signing commits locally, follow [this guide to see how to sign your commit](https://help.github.com/en/articles/signing-commits).\n\n4) You can configure git to always use signed commits by running\n\n```sh\ngit config --global user.signingkey <key id>\n```\n\nThe process to find the key id is described in [this guide on checking for existing GPG keys](https://help.github.com/en/articles/checking-for-existing-gpg-keys).\n\n5) Set up a keychain for your platform.\nThis is entirely optional but means you don't need to type your passphrase every time and allows git to run headless.\nIf you are using a Mac GPG Suite is a good way to do this. If you are on another platform please open a PR against this document and add your recommendations!\n\n##### Use a webhook to sign your commits\nAlternatively, you can use a hook to make sure all your commits messages are signed off.\n1) Run:\n```sh\nmkdir -p ~/.git-templates/hooks\n```\n```sh\ngit config --global init.templatedir ~/.git-templates\n```\n\n2) Then add this to `~/.git-templates/hooks/prepare-commit-msg`:\n\n```bash\n#!/bin/sh\n\nCOMMIT_MSG_FILE=$1  # The git commit file.\nCOMMIT_SOURCE=$2    # The current commit message.\n\n# Add \"Signed-off-by: <user> <email>\" to every commit message.\nSOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\ngit interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\nif test -z \"$COMMIT_SOURCE\"; then\n/usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\nfi\n```\n\n3) Make sure the file is executable:\n```sh\nchmod u+x ~/.git-templates/hooks/prepare-commit-msg\n```\n\n4) Run `git init` on the repo you want to use the hook on.\n\nNote that this will not override the hooks already defined on your local repo. It adds the `Signed-off-by: ...` line\nafter the commit message has been created by the user.\n\n\n### The commit message\n\nJenkins X uses [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/) message format.\n\n```\n<type>[optional scope]: <description>\n\n[optional body]\n```\n\nCommon types used in `jx` project.\n\n* fix\n* feat\n* refactor\n* test\n\nIf `feat` is mentioned, it increases minor version, e.g. 1.0.0 becomes 1.1.0.\nOthers bump patch version. If a major release is needed, an exclamation can be\nadded, like `feat!` or a line `BREAKING CHANGE` added to the body.\n\nExamples.\n\n| Commit message                                                                                                                                                                                   | Release type               |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------|\n| `fix: remove yq from the images`                                                                                                                             | Patch Release              |\n| `feat(install): store admin secrets in vault`                                                                                                                                                       | ~~Minor~~ Feature Release  |\n| `refactor(tekton): restructure of 'step create task' (#4051)`<br><br>`BREAKING CHANGE: prep for #3342.` | ~~Major~~ Breaking Release |\n\n### Open a pull request\n\nWe made a lot of progress. Good work. In this step we finally open a pull request to submit our additions. Open the [Jenkins X main repository](https://github.com/jenkins-x/jx/) on GitHub in your browser.\n\nYou should find a green button labeled with \"New pull request\". But GitHub is clever and probably suggests you a pull request like in the beige box below:\n\n![Open a pull request](/images/contribute/development/open-pull-request.png)\n\nThe new page summaries the most important information of your pull request. Scroll down and you find the additions of all your commits. Make sure everything looks as expected and click on \"Create pull request\".\n\nThere are a number of automated checks that will run on your PR:\n\n* Semantic Pull Request - validates that your commit messages meet the Conventional Commit format described above.\n  Additionally your PR must also have a conventional message. The UX for this bot is a little odd as it doesn't go red\n  if the messages are NOT correct, instead it goes yellow. You need it to go to a green tick!\n* DCO - see [Signoff](#signoff)\n* Hound - lints the code and comments inline with any issues. You need this to go to a green tick and and say \"No violations found. Woof!\"\n* lint - runs a lot more lint checks but in a CI job so won't provide inline feedback. You need this to pass as a green tick. Check the log for any errors.\n* bdd - runs the end to end test [create-spring](https://github.com/jenkins-x/bdd-jx/blob/master/test/spring/suite/jx_create_spring.go) in a new team on an existing cluster using static jenkins. Check the logs for errors.\n* tekton - runs the end to end test [create-spring](https://github.com/jenkins-x/bdd-jx/blob/master/test/spring/suite/jx_create_spring.go), [test-quickstart-golang-http](https://github.com/jenkins-x/bdd-jx/blob/master/test/suite/quickstart/helpers.go#L50) and [test-import-golang-http-from-jenkis-x-yml](https://github.com/jenkins-x/bdd-jx/blob/master/test/suite/_import/jx_import.go#L37) in a new cluster using tekton. Check the logs for errors.\n* integration - runs all the tests that are inline in jx codebase. Check the logs for errors.\n* Keeper (Lighthouse) - performs the merge when all the checks pass. Don't worry about the state of this one, it doesn't add much info.\n  Clicking on the details link is very helpful as it will take you to the dashboard where you can navigate to the \"Lighthouse\"\n  screen and check the status of your PR in the merge queue.\n\nThen Jenkins X itself and the maintainers will review your PR, potentially initiate discussion around your change and finally, merge it successfully in Jenkins X jx. Congratulations !\n\n### Getting a pull request merged\n\nNow your pull request is submitted, you need to get it merged. If you aren't a regular contributor you'll need a maintainer to manually review your PR and issue a `/ok-to-test` command in a PR comment. This will trigger the automated tests. If the tests fail, you'll need to ask one of the maintainers to send you the failure log (in the future we will make these public but first we need to check we are masking all secrets).\n\nTo ask a maintainer to review your PR, type `/cc @<github_username>` in a comment.\n\nIf the tests pass you need to get a `/lgtm` from one of the reviewers (listed in the `OWNERS` file in the repository). You need a new LGTM every time you push changes. Once the tests pass and you have a LGTM for the latest changeset, your PR will be automatically merged.\n\nJenkins X (well, Keeper (lighthouse), a component of Jenkins X) won't merge your changes until it has the tests passing against the *current* `HEAD` of `main` - but don't worry, whilst the tests *continue* to pass it will automatically merge your changeset into main and rerun the tests. As you can imagine, this can take a little while (a few hours) if the merge queue is long. Keeper will also automatically attempt to batch up passing changes, but if the batch fails, it will resort to merging the changesets one by one.\n\nIf the retest against `HEAD` of `main` fail, then it will notify you on the pull request and you'll need to make some changes (and potentially get a new LGTM).\n\n## Testing\n\nThe jx test suite is divided into three sections:\n - The standard unit test suite\n - Slow unit tests\n - Integration tests\n\nTo run the standard test suite:\n```sh\nmake test\n```\n\nTo run the standard test suite including slow running tests:\n```sh\nmake test-slow\n```\n\nTo run all tests including integration tests (NOTE These tests are not encapsulated):\n```sh\nmake test-slow-integration\n```\n\nTo get a nice HTML report on the tests:\n```sh\nmake test-report-html\n```\n\n### Writing tests\n\n#### Unit Tests\n\nUnit tests should be isolated (see below what is an unencapsulated test), and should contain the `t.Parallel()` directive in order to keep things nice and speedy.\n\nIf you add a slow running (more than a couple of seconds) test, it needs to be wrapped like so:\n```golang\nif testing.Short() {\n\tt.Skip(\"skipping a_long_running_test\")\n} else {\n\t// Slow test goes here...\n}\n```\nSlows tests can (and should) still include `t.Parallel()`.\n\nBest practice for unit tests is to define the testing package appending _test to the name of your package, e.g. `mypackage_test` and then import `mypackage` inside your tests.\nThis encourages good package design and will enable you to define the exported package API in a composable way.\n\n#### Integration Tests\n\nTo add an integration test, create a separate file for your integration tests using the naming convention `mypackage_integration_test.go` Use the same package declaration as your unit tests: `mypackage_test`. At the very top of the file before the package declaration add this custom build directive:\n\n```golang\n// +build integration\n```\nNote that there needs to be a blank line before you declare the package name.\n\nThis directive will ensure that integration tests are automatically separated from unit tests, and will not be run as part of the normal test suite.\nYou should **NOT** add `t.Parallel()` to an unencapsulated test as it may cause intermittent failures.\n\n### What is an unencapsulated test?\nA test is unencapsulated (not isolated) if it cannot be run (with repeatable success) without a certain surrounding state. Relying on external binaries that may not be present, writing or reading from the filesystem without care to specifically avoid collisions, or relying on other tests to run in a specific sequence for your test to pass are all examples of a test that you should carefully consider before committing. If you would like to easily check that your test is isolated before committing simply run: `make docker-test`, or if your test is marked as slow: `make docker-test-slow`. This will mount the jx project folder into a golang docker container that does not include any of your host machines environment. If your test passes here, then you can be happy that the test is encapsulated.\n\n### Mocking / Stubbing\n<a name=\"mocking--stubbing\"></a>\n\nMocking or stubbing methods in your unit tests will get you a long way towards test isolation. Coupled with the use of interface based APIs you should be able to make your methods easily testable and useful to other packages that may need to import them.\n[Pegomock](https://github.com/petergtz/pegomock) is our current mocking library of choice, mainly because it is very easy to use and doesn't require you to write your own mocks (Yay!)\nWe place all interfaces for each package in a file called `interface.go` in the relevant folder. So you can find all interfaces for `github.com/jenkins-x/jx/pkg/util` in `github.com/jenkins-x/jx/pkg/util/interface.go`\nGenerating/regenerating a mock for a given interface is easy, just go to the `interface.go` file that corresponds with the interface you would like to mock and add a comment directly above your interface definition that will look something like this:\n```golang\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n\tDidError() bool\n\tDidFail() bool\n\tError() error\n\tRun() (string, error)\n\tRunWithoutRetry() (string, error)\n\tSetName(string)\n\tSetDir(string)\n\tSetArgs([]string)\n\tSetTimeout(time.Duration)\n\tSetExponentialBackOff(*backoff.ExponentialBackOff)\n}\n```\nIn the example you can see that we pass the generator to use: `pegomock generate` the package path name: `github.com/jenkins-x/jx/pkg/util` the name of the interface: `CommandInterface` and finally an output directive to write the generated file to a mock sub-folder. To keep things nice and tidy it's best to write each mocked interface to a separate file in this folder. So in this case: `-o mocks/command_interface.go`\n\nNow simply run:\n```sh\ngo generate ./...\n```\nor\n```sh\nmake generate-mocks\n```\n\nYou now have a mock to test your new interface!\nThe new mock can now be imported into your test file and used for easy mocking/stubbing.\nHere's an example:\n```golang\npackage util_test\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/jenkins-x/jx/pkg/util\"\n\tmocks \"github.com/jenkins-x/jx/pkg/util/mocks\"\n\t. \"github.com/petergtz/pegomock\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestJXBinaryLocationSuccess(t *testing.T) {\n\tt.Parallel()\n\tcommandInterface := mocks.NewMockCommandInterface()\n\tWhen(commandInterface.RunWithoutRetry()).ThenReturn(\"/test/something/bin/jx\", nil)\n\n\tres, err := util.JXBinaryLocation(commandInterface)\n\tassert.Equal(t, \"/test/something/bin\", res)\n\tassert.NoError(t, err, \"Should not error\")\n}\n```\nHere we're importing the mock we need in our import declaration:\n```golang\nmocks \"github.com/jenkins-x/jx/pkg/util/mocks\"\n```\nThen inside the test we're instantiating `NewMockCommandInterface` which was automatically generated for us by pegomock.\n\nNext we're stubbing something that we don't actually want to run when we execute our test. In this case we don't want to make a call to an external binary as that could break our tests isolation. We're using some handy matchers which are provided by pegomock, and importing using a `.` import to keep the syntax neat (You probably shouldn't do this outside of tests):\n```golang\nWhen(commandInterface.RunWithoutRetry()).ThenReturn(\"/test/something/bin/jx\", nil)\n```\nNow when we can set up our  test using the mock interface and make assertions as normal.\n\n\n### Debug logging\n\nLots of the test have debug output to try figure out when things fail. You can enable verbose debug logging for tests via:\n\n```sh\nexport JX_TEST_DEBUG=true\n```\n\n## Debugging\n\nFirst you need to [install Delve](https://github.com/derekparker/delve/blob/master/Documentation/installation/README.md).\n\nThen build a version of `jx` that is optimised for debugging\n\n```sh\nDEBUG=on make build\n```\n\nThen you should be able to run a debug version of a jx command:\n\n```sh\ndlv --listen=:2345 --headless=true --api-version=2 exec ./build/jx -- some arguments\n```\n\nThen, in your IDE you should be able to set a breakpoint and connect to `2345` e.g. in IntelliJ you create a new `Go Remote` execution and then hit `Debug`.\n\n### Debugging jx with stdin\n\nIf you want to debug using `jx` with `stdin` to test out terminal interaction, you can start `jx` as usual from the command line then:\n\n1. Find the `pid` of the jx command via something like `ps -elaf | grep jx`\n2. Start Delve, attaching to the pid:\n\n\t```sh\n\tdlv --listen=:2345 --headless=true --api-version=2 attach SomePID\n\t```\n\n### Debugging jx boot pipeline\n\nIf you want to debug a pipeline, for example `install-vault` pipeline you'll have to change the args and command in `jenkins-x.yml` file in the boot config directory:\n\n1. Change the command to `dlv`.\n2. Add `dlv` args and `jx` as args.\n\n```yml\n- args:\n- --listen=:2345\n- --headless=true\n- --api-version=2\n- exec\n- <PATH-TO-jx-binary>\n- --\n- step\n- boot\n- vault\n- --provider-values-dir\n- ../../kubeProviders\ncommand: dlv\ndir: /workspace/source/systems/vault\nname: install-vault\n```\n\n### Debugging a unit test\n\nYou can run a single unit test via:\n\n```sh\nexport TEST=\"TestSomething\"\nmake test1\n```\n\nYou can then start a Delve debug session on a unit test via:\n\n```sh\nexport TEST=\"TestSomething\"\nmake debugtest1\n```\n\nThen set breakpoints and debug in your IDE as described in [Debugging](#debugging).\n\n### Using a helper script\n\nIf you create a bash file called `jxDebug` as the following (replacing `SomePid` with the actual `pid`):\n\n```bash\n#!/bin/sh\necho \"Debugging jx\"\ndlv --listen=:2345 --headless=true --api-version=2 exec `which jx` -- $*\n```\n\nThen you can change your `jx someArgs` CLI to `jxDebug someArgs` then debug it!\n\n### Enabling Kubernetes API tracing\n\nIn some cases it can be useful to see the REST API calls made to the Kubernetes cluster.\nYou can enable trace by setting the environment variable `TRACE_KUBE_API` to the value \"on\" or \"1\".\nFor example:\n\n```sh\nTRACE_KUBE_API=on jx get apps\n```\n\n## Try a new version of jx inside a pipeline\n\nYou can usually just run `jx` locally on your laptop and can simulate being in a pipeline using environment variables and run it inside a git clone of a sample project etc. However there are times you really want to test inside an actual running pipeline - here's how:\n\nWhen you create a Pull Request and its approved for test we generate preview docker images you can use inside your jenkins server pipelines for maven/go/nodejs builders.\n\ne.g. see the `SNAPSHOT-JX_PR-$ID-$BUILD_NUMBER` images for the [jenkinsxio/builder-maven](https://hub.docker.com/r/jenkinsxio/builder-maven/tags/) image\n\nOnce you have a preview docker image you can then edit the jenkins pod template for maven/go/nodejs to use your PR\u2019s docker image to try out your changes to jx in a jenkins pipeline. To do this\n\n* `jx console` to open the Jenkins console\n* Manage Jenkins -> Configure System\n* search for builder-(maven|go|nodejs) and use the new docker image version you just built (that ends in your `PR number-buildnumber`)\n* now retrigger a pipeline\n\nWe don't yet do the same for serverless jenkins images am afraid - for that you'll have to make your own Docker image replacing the `jx` binary then edit the Prow configuration (`kubectl edit cm config`).\n\n\nAnother approach is you can make your own docker image, then pause a pipeline and `kubectl cp` your linux build of `jx` into the docker image and `kubectl exec` or `jx rsh` into the build pod and run the `jx` command there.\n\n## Code Generation\n\nJenkins X makes use of code generation to create [Mocks](#mocking--stubbing), Kubernetes Custom Resource clients, [OpenAPI spec and API Documentation](/apidocs).\nThe generated files, except for the HTML docs, checked into version control.\nThere are several `make` targets resposible for code generation.\nThey can be found in `Makefile.codegen`.\n\n* `make generate` runs all generation you need to do before commiting changes\n* `make generate-mocks` - generates the [Pegomocks](https://github.com/petergtz/pegomock) only\n* `make generate-client` - generates the Kubernetes Custom Resource clientset only.\n* `make generate-openapi` generates the [OpenAPI](https://swagger.io/specification/) spec only\n* `make generate-docs` generates the HTML apidocs, and is not committed\n\n {{< alert >}}\n Not all files under `pkg/client/clientset/versioned/typed/jenkins.io/v1` are generated.\n The expansion files are manually maintained and need to be kept when re-generating the clientset.\n See also [clientset generation](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machingenerating-clientset.md) in the Kuberenetes Community repository.\n {{< /alert >}}\n\nIf you get a conflict on any of these directories or files when committing, rebasing or merging your best bet is to discard the changeset you have, and regenerate:\n\n* `pkg/client` (`make generate-client`)\n* `docs/apidocs/openapi-spec` (`make generate-openapi`)\n* `**/mocks/**` (`make generate-mocks`)\n\nAs part of the PR builds we run a job to validate that the code generation is up to date.\nIf the code generation is not up to date (running `make generate` produces a `git diff` or untracked files) then your PR will be blocked.\n",
            "content/en/community/code/continuous-integrating-jx-itself.md": "---\ntitle: Continuous Integrating JX itself\nlinktitle: Continuous Integrating JX itself\ndescription: How we use jx to test every change into jx\ntype: docs\nweight: 30\naliases:\n    - /docs/contributing/code/continuous-integrating-jx-itself/\n---\n\nYou may be wondering how Jenkins X introduce changes to Jenkins X. Of course, Jenkins X is built using Jenkins X itself! That means that new changes to the project go through a CI process, and are built and tested using pipelines that run on a Jenkins X Kubernetes cluster.\n\n## Pipelines\nA Pull Request in the [jx repository](https://github.com/jenkins-x/jx) will automatically trigger some jobs to do CI. The jobs are triggered [by Prow](/docs/reference/components/prow/), and we can [configure which jobs to execute](https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932). The jobs with always_run configured to be true, will be ran when the PR is opened. All jobs (independently of having\u00a0always_run set to true or false) can be manually triggered writing a comment in the PR. The comment needed to trigger the job is also in the configuration, in the trigger key. For example, to trigger the end-to-end tests manually, you may write a new comment in the PR containing \"/test bdd\", and the bdd job will be triggered.\n\nThe jobs all have a name and a context [in the configuration](https://github.com/jenkins-x/prow-config-tekton/blob/f1a74a38c2936722f8507769e5a30b56ca96fe45/prow/config.yaml#L902-L932). The name is the name what will show up on GitHub, and the context is the Jenkins X pipeline to execute.\n\n![Jobs executed during CI](/images/contribute/ci-jobs.png)\n\nThese pipelines are defined in the root of the jx repository. For example, [here you can see the bdd pipeline](https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml)\u00a0that executes the end-to-end (e2e) tests that will get triggered when we tell Prow to execute the bdd job.\n\nThe pipelines that are executed are [Jenkins X pipelines](/about/concepts/jenkins-x-pipelines/), that underneath use [Tekton pipelines](https://cloud.google.com/tekton/). These pipelines execute tests to make sure everything still works. Typically, they execute unit tests and functional e2e tests.\n\nFollowing our bdd pipeline example, here are the steps executed as part of [the bdd pipeline](https://github.com/jenkins-x/jx/blob/master/jenkins-x-bdd.yml)\n\n![BDD Pipeline](/images/contribute/bdd-pipeline.png)\n\n## End to end tests\nFor the e2e tests, the application binary is compiled with the changes on the pull request so that the tests use these changes. Docker images are also published to Google Cloud Registry (GCR) with the changes on the pull request, so testing locally is easier.\n\n[The e2e tests live on a different repository](https://github.com/jenkins-x/bdd-jx), and they are ran using [a bash script](https://github.com/jenkins-x/jx/blob/master/jx/scripts/ci.sh), that will be executed inside a container (like all the other steps in all the other pipelines). The bash script reads some secrets from the Kubernetes cluster where this job is running, and prepares the container where the step is being ran to run the tests configuring the Git client locally, creating a valid kubeconfig file to be able to talk to a Kubernetes cluster, etc.\n\nOne of the most common e2e test is to create a new application, push it to a new GitHub repository, and deploy it using jx. These repositories created for testing are created on [a GitHub Enterprise instance called beescloud](https://github.beescloud.com/). Credentials to do that are read from the Kubernetes cluster, and passed as parameters while invoking the tests.\n\nThe last command on the bash script is actually running the tests using the\u00a0jx step bdd command, that basically clones [the tests repository](https://github.com/jenkins-x/bdd-jx) and runs a [Makefile target in that repository](https://github.com/jenkins-x/bdd-jx/blob/master/Makefile). Some of the logic executed by Jenkins X during the e2e tests is executed using the jx binary that we compiled on the first step of the pipeline. But not all. Other parts of the logic is executed inside the containers used on the steps of the pipeline.\n\nThe containers used as part of the Jenkins X pipelines are called builders. If we want our pull request changes to be used in the builder containers too, we need to tell Jenkins X to use the container images published on a previous step of the pipeline, which contain the pull request changes. Fortunately, [Jenkins X allows you to pass a file that will override the \"values.yaml\" file used to install Helm charts as part of the Jenkins X installation](/docs/resources/guides/managing-jx/common-tasks/config/). If you don't use a custom values file, [this is the default used when installing Jenkins X](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml).\n\nThe jx step bdd command allows you to create a new jx cluster to run the e2e tests, or use an existing one. When creating a new cluster, the different components that make up a Jenkins X cluster are installed. By default latest versions for those components would be installed, so two consecutive installations could yield different behaviors because a change on some component between the two. That's not suited for testing, where deterministic scenarios are preferred. That's why the jx step bdd command uses [a versions repository](https://github.com/jenkins-x/jenkins-x-versions) which specifies which version to use for every Jenkins X cluster component. The jx step bdd command may receive a \"config\" parameter pointing to [a configuration file](https://github.com/jenkins-x/jenkins-x-versions/blob/master/jx/bdd/tekton/cluster.yaml) that specifies how the cluster will be created. If no config parameter is passed, then the Kubernetes cluster referenced in the kubeconfig file that was created before executing the jx step bdd command will be used.\n\n## Release\nIf all tests pass and the pull request is merged, a new version of jx [will be released](https://github.com/jenkins-x/jx/releases). Not everyone can approve pull requests, only people whose names appear on [the OWNERS file](https://github.com/jenkins-x/jx/blob/master/OWNERS) can approve them. Remember, every merged pull request generates a new jx version. By default, new versions increment the patch part of the version string. This is done automatically, so when merging a pull request if jx is currently at version 1.3.152, after merging the pull request, the version 1.3.53 will be released. But when breaking changes are merged, the minor or major parts of the version string may be manually increased.\n",
            "content/en/community/code/pullrequestreview.md": "---\ntitle: Pull Request Reviews\nlinktitle: Pull Request Reviews\ndescription: How to get your pull request reviewed and how to review a pull request\nauthors: [pmuir]\ntype: docs\nweight: 20\naliases:\n    - /docs/contributing/code/pullrequestreview/\n---\n\nThe pull request is the main place we gate changes in Jenkins X. It's here we:\n\n* run the tests (`make test-slow-integration`)\n* execute [end to end tests](https://github.com/jenkins-x/bdd-jx) against static jenkins and Tekton\n* [check the change](https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/linter.sh) for linting issues\n* [check the code](https://github.com/jenkins-x/jx/blob/2d54b6ef9a276f148cbc7cb10169e83238f2d83e/hack/gofmt.sh) for formatting issues\n* validate that [all generated code](/community/code/#code-generation) (mocks, kubernetes clients, kubernetes openapi structs) are up to date\n* validate that we can [generate the apidoc](//community/code/#code-generation)\n* validate that your [commits are conventional](/community/code/#the-commit-message)\n\nOur philosophy is to automate the checks as much as possible - there are some that must still be done by a human but we\nplan to reduce those as far as possible.\n\nThese review guidelines apply to all github repos in https://github.com/jenkins-x, https://github.com/jenkins-x-charts,\nhttps://github.com/jenkins-x-apps, https://github.com/jenkins-x-quickstarts and https://github.com/jenkins-x-buildpacks.\nA repository with the `proof-of-concept` label does not have to follow these guidelines. If we decide that the proof\nof concept is going to become the longterm solution the `proof-of-concept` label should be removed and the code in the\nrepository should be reviewed to ensure that these guidelines are met (and any remedial action needed added to the issue\ntracker and scheduled).\n\n# Getting your PR merged\n\nIn order to get your PR merged you'll need to get a pass on all the automated checks. You'll also need a maintainer to\napprove the change using `/lgtm`. In order to get an `/lgtm` it helps to give a little bit of context to your PR in the\nbody of the PR - an essay is not necessary (or helpful!).\n\nWe believe that the person who knows the most about the change is the author of the change and that the role of the approver\nis to try to spot any functional or non-functional problems that the change might introduce. We'll cover this in more\ndetail in \"Approving a PR\". If you are uncertain about a part (or all) of the change please do mention this either in\nthe PR or as an inline comment as this means the approver can focus on the right part.\n\nAll PRs are approved by a maintainer, and for all non-experimental repositories that maintainer must be a different\nindividual to the author.\n\nAnd above all, remember that as a PR author it's your responsibility to get your PR merged!\n\n# Approving a PR\n\nYour five principal tasks as an approver are to:\n\n* verify that the change is of overall benefit to Jenkins X\n* spot potential functional or non-functional problems with a PR\n* ensure any non-automated checks pass\n* signal when a PR needs security review by applying the `needs-security-review` label and wait with the approval\nuntil a security person reviews the changes and removes the label\n* identify when a PR requires some documentation by adding the `needs-docs` label and also request to author\nto create a follow up issue with label `area/docs`\n\nVerifying that the change is of **overall benefit** is your most important responsibility as a PR approver. By default\nwe assume that changes are beneficial and that it is the responsibility of the approver to identify if the change would\nbe detrimental (rather than requiring the author to prove or assert benefit in all cases).\n\nIf, as a PR approver, you feel that a PR is detrimental to Jenkins X you should:\n\n1) Place the PR on hold using the `/hold` command, with the comment \"I want to discuss whether this PR is beneficial or\nnot before approving. I'll start a discussion in the #jenkins-x-dev channel shortly to discuss my concerns.\"\n2) Once you have started a discussion, add a comment with a PR with a link to the discussion\n3) Once you have have reached mutual agreement update the PR:\n   * Summarize the discussion on the PR\n   * If you agree that the PR is ok or mostly ok (but need some changes) follow the standard approval process outlined in\n     this document\n   * If you agree that the PR is not ok close it with a the comment \"We've agreed to not merge this PR\"\n\nThese sorts of discussions have the potential to become heated. Whilst we advise starting a discussion on slack we would\nstrongly encourage you to have a quick call with anyone interested if you can't quickly (quickly means a couple of\nmessages, a minute discussion or a few sentances) reach agreement with the PR author to hash out what to do. You may also\nwant to consider asking a third developer to act as a facilitator/moderator to help you stay on track with the discussion.\n\n> This process is intentionally onerous on the approver as we feel change creates opportunity and that there must be a\n> good reason to prevent change that you can justify and explain. That does not diminish the responsibility on every\n> approver to ensure that a change is of benefit, and you will have the full support of all members of the project in\n> challenging the benefit even if some of the members disagree with your challenge!\n\n**Functional problems** are might potentially cause the code to not function as described on one of the PR, an attached issue,\nan external document or PR against the docs repo. Examples might include missing prompts or questions, incomplete or\nmisleading helptext or an API that doesn't make sense.\n\n**Non-functional problems** are that set of problems that don't affect the functioning of the program but are known to cause\nproblems. An exhaustive list of non-functional problems the reviewer should check for is maintained here, and this list\nmust be updated when new non-functional areas for review are identified.\n\n* Too many files in a package. Go uses a lot of memory at compilation time and large packages can cause compilation to\n  crash. This is particularly a problem when running a test suite as we like to run tests in parallel for speed. Approvers\n  should use their discretion but as a rule of thumb any new functionality should go in it's own package and not be\n  added to an existing package as a number (e.g. `kube`, `util`, `cmd`) are already far too large\n* Duplicated functionality. The codebase is large, and has many dependencies. When writing a new feature it's often easy\n  to miss existing functions or dependency that do what you need, and add a new function or dependency. Approvers should\n  try to identify a duplicated dependencies or functions and ask for them to be consolidated.\n* Excessive custom resource creation. Etcd struggles with too many custom resources being created (e.g. we saw 50k created)\n  by some errant code in one day recently. Approvers should check that the code won't result in too many custom resources\n  being created - think about the complexity (is it linear, polynomial, exponential etc.). If a lot of custom resources are\n  being created, then ensure there is some form of garbage collection.\n* Pushing secrets to source control. Validate that the code doesn't risk pushing secrets\n* Non-intuitive behavior that doesn't have a comment. We don't require comments for code that is logical and makes sense\n  but sometimes we have to write code in a certain way to deal with external circumstances. You can easily identify this\n  kind of code - if your reactions is \"WTF\" then it probably needs a comment. On the other hand if your reaction is\n  \"I don't understand this\" then that's not a good indication of non-intuitive code!\n\n**Security review** should be requested for any changes in security sensitive areas such as secrets handling with or without\nvault, authentication/authorization, cloud service accounts and permissions, commands dealing with credentials, changes to\nRBAC rules in various helm charts, changes to TLS configuration and so on.\n\nNon automated checks currently include:\n* for a PR that includes a new feature, ensure that there is an associated PR for documentation\n* That the commit message type (i.e. `fix`, `chore`, `feat` or `BREAKING CHANGE`) is correct as this will affect the release number used.\n* Changes introduced to debug or test the PR being committed (e.g. changes to the test repo in use)\n\nAs an approver there are a number of traps it's very easy to fall into when reviewing a pull request. We regard these as\nbad behaviors and a PR author or another community member should call out an approver if one of these behaviors is noticed:\n\n* requesting stylistic changes - \"That's not how **I** would have done it!\", \"Could you rename that variable/func/package\n  to `XXX`\". As an approver you normally have the ability to edit the PR directly, you should make any changes like this\n  yourself.\n* requesting trivial changes. As an approver you normally have the ability to edit the PR directly, you should make any\n  changes like this yourself.\n* Requesting clarification of how something works. This is unhelpful as PR discussions are essentially lost when the PR\n  is merged. If you don't understand how something works, puzzle over it for 5 minutes, clone the branch, run a test and\n  use your debugger. If you are still struggling then ask the author on slack and explain why you can't understand it. The\n  author should then update the PR either with some comments or different code. You should also post a short summary back\n  on to the PR, focusing on the \"why\" - in other words why were you confused and why did the change fix it.\n* Discussions about a change. If you need to discuss a change, then use #jenkins-x-dev on slack or do a call\n  (advertising it on slack ideally). Once you've got a conclusion make a quick note of that on the PR.\n* Tangents. There are many problems in the codebase, but don't be tempted to try to solve all of them in a review. Focus\n  on what problems this PR will cause.\n\nAbove all, remember that as an approver your role is not to make the code into something that you would have written\nbut to check it won't cause a problem.\n\n# Future Enhancements Planned\n\n* Switch config on all repos to use `lgtm` plugin not `approval` plugin, except those with the `proof-of-concept` label\n* Consider using something like https://pullpanda.com/assigner to allocate reviewers automatically\n* Add code coverage tools and implement a ratchet. For example, if the overall coverage is 40% then the coverage of the\n  change would have to be 50%. We will decide the size of the ratchet as part of this. The goal here is to steadily\n  improve the coverage\n",
            "content/en/community/code/triage.md": "---\ntitle: Triaging issues\nlinktitle: Triaging issues\ndescription: How to triage issues on the Jenkins X project\ntype: docs\nweight: 30\naliases:\n    - /docs/contributing/code/triage/\n---\n\nThe main issue tracker for the Jenkins X project is https://github.com/jenkins-x/jx/issues.  This aims to capture issues, ideas and development work.  If in doubt please raise an issue and a Jenkins X team member will look to triage it as soon as possible.\n\nAs Jenkins X is using [prow](https://www.cloudbees.com/blog/serverless-jenkins-jenkins-x) from the Kubernetes ecosystem we figured we'd take their lead in triaging a large number of issues to aid and encourage contributions.  We are reusing the style of labels including colours in an attempt to create familiarity across open source projects and reduce the barrier to contributing.\n\n# Triaging issues\n\nFor a full list of available labels please see https://github.com/jenkins-x/jx/labels\n\nWhen triaging an issue, someone from the Jenkins X team will assign labels to describe the __area__ and __kind__ of issue.  Where possible they will also add a priority however these are subject to change after further analysis or wider visibility.\n\nLabels are added via the prow [label](https://prow.k8s.io/plugins) plugin using GitHub comments.  For example:\n```text\n/kind bug\n/area prow\n/priority important-soon\n```\n![Triage](/images/contribute/triage.png)\n\n# Assigning issues\n\nWhen triaging we will attempt to assign someone to the issue.  This may change depending on the investigation or availability of people.\n\n# Investigating issues\n\nWhen anyone is working on an issue we aim to capture any analysis by adding comments.  This helps people learn tips on how to investigate similar problems, helps people understand the thought process and provides context for any linked fixes via pull requests.\n\n# New labels\n\nIf you would like to request a new label be created please raise an issue with as much context as possible.\n\n# Stale issues\n\nAs we encourrage a wide range of issue kinds like general ideas and thoughts the issue tracker can grow quite high.  We are going to be enabling the prow [lifecycle](https://prow.k8s.io/plugins) plugin to help manage stale issues.  This is not meant to be intrusive but instead allow us to continually rethink problems and keep momentum across issues.\n",
            "content/en/community/code_of_conduct/_index.md": "---\ntitle: Jenkins X Community Code of Conduct\nlinktitle: Code of Conduct\ndescription: \ntype: docs\nno_list: true\nweight: 10\n---\nJenkins X follows the [Continuous Delivery Foundation Contributor Covenant Code of Conduct](https://github.com/cdfoundation/toc/blob/master/CODE_OF_CONDUCT.md).\n\nIf you notice a violation of the Code of Conduct at an event or meeting, in Slack, or in another communication mechanism, reach out by direct message to James Rawlings, James Strachan, or Kara de la Marck on the [Jenkins X Slack](/community/#slack). Your anonymity will be protected.\n\n# Contributor Covenant Code of Conduct v0.5.0\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nIf you notice a violation of the Code of Conduct at an event or meeting, in Slack, or in another communication mechanism, reach out by direct message to James Rawlings, James Strachan, or Kara de la Marck on the [Jenkins X Slack](/community/#slack). Your anonymity will be protected.\n\nIn addition, instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [conduct@cd.foundation](mailto:conduct@cd.foundation). All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n## Events Code of Conduct\n\nOfficial CDF events are governed by the Linux Foundation [Code of Conduct](https://events.linuxfoundation.org/code-of-conduct/) available on the event page. The Events Code of Conduct supports the above policy and also includes more details on responding to incidents.\n",
            "content/en/community/documentation/_index.md": "---\ntitle:\nlinktitle: Contribute Documentation\ndescription: How to help improve the Jenkins X documentation\nweight: 20\ntype: docs\nno_list: true\naliases:\n  - docs/contributing/documentation/\n---\n\nWe welcome your contributions to Jenkins X documentation whether you are a developer, an end user, or someone who can't stand seeing typos!\n\n{{% alert %}}\nIf you're looking for the easiest way to correct existing content (typos etc.) have a look at the [Suggest Changes](/community/documentation/changes/) guide.\n{{% /alert %}}\n\n## Assumptions\n\nThis contribution guide takes a step-by-step approach in hopes of helping newcomers.\nTherefore, we only assume the following:\n\n- You are a fan of Jenkins X and enthusiastic about contributing to the project\n\nRegardless your experience, there should be enough information in this documentation to get you up and running for contributing.\n\n{{< alert >}}\nIf you're struggling at any point in this contribution guide, reach out to the Jenkins X community in [Jenkins X's Discussion forum](/community/).\n{{< /alert >}}\n\n## Getting Started\n\nThe first thing you'll need to do is get your local environment setup, so that you can add/change content and make sure it looks right before raising a pull request.\n\nThe source code for the documentation can be found in the [jenkins-x/jx-docs](https://github.com/jenkins-x/jx-docs) GitHub repository.\nYou want to get a clone of this repository.\n\n```bash\ngit clone  --recurse-submodules --depth 1 https://github.com/jenkins-x/jx-docs.git\n```\n\nIf you are a newcomer to Git and not sure what to do with the above command, have a look at the [Step by Step setup](/community/documentation/step-by-step/) guide which guides you through the process of installing Git, forking a repository and finally cloning it locally onto your local machine.\n\n## Local preview environment\n\nThe documentation (and the rest of the website) is generated using the static site generator [Hugo](https://gohugo.io).\n\nAlthough Jenkins X offers preview environments, and they're used as part of the process of contributing documentation, it's usually faster to run the site locally and check that everything looks good for you, before you push your changes.\n\nThere are two different ways that you can run the site locally: using a locally installed version of Hugo or using a pre-baked Docker image that includes what's normally needed. Which approach you choose is fully up to you.\n\n### Docker Compose method (Preferred approach)\n\nUse this:\n\n- If you haven't worked with Hugo before\n- Don't want to install it locally\n- Have different version of hugo installed locally for other projects\n\nThe first thing you'll need to make use of this approach is Docker installed on your local environment.\nHow to install a Docker engine depends on your platform etc., so best to head over to [Docker](https://docs.docker.com/install/) to find the right one.\nNext, you have install docker compose v2 from the [installation guide](https://docs.docker.com/compose/install/).\n\nTo make it as simple as possible, we use the [docker image](https://hub.docker.com/r/klakegg/hugo) recommended in the hugo [documentation](https://gohugo.io/getting-started/installing/#docker), and have setup a [`docker-compose.yml`](https://github.com/jenkins-x/jx-docs/blob/main/docker-compose.yml) file that will help you start up a preview server with a few helpful options.\n\n{{< alert >}}\nIf you are using a OS that does not support makefiles, look at the [makefile](https://github.com/jenkins-x/jx-docs/blob/main/Makefile) and run the commands manually.\n{{< /alert >}}\n\nIn order to use this setup, first make sure you're in the folder with your local cloned copy of the `jx-docs` repo, then run the following command to download and start the Hugo server:\n\n```sh\nmake compose-up\n```\n\nThis will make the site available on [localhost:1313](http://localhost:1313/) and it will auto-update when you save changes to any of the files in the repo.\n\nTo be able to see what's going on, and know when the site is ready (can take a bit to process when you first start up), you can run this command (ctrl-c to stop watching the logs):\n\n```sh\nmake compose-logs\n```\n\nYou'll know the site is ready when you see something like:\n\n```sh\nserver_1        | Watching for changes in /src/{assets,content,layouts,static,themes}\nserver_1        | Watching for config changes in /src/config.toml, /src/themes/docsy/config.toml\nserver_1        | Environment: \"development\"\nserver_1        | Serving pages from memory\nserver_1        | Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nserver_1        | Web Server is available at //localhost:1313/ (bind address 0.0.0.0)\nserver_1        | Press Ctrl+C to stop\n```\n\nAs you're changing things and adding new content, your local Hugo server might get a bit wonky at times or you'll want to see what errors it's throwing. Here's a few simple commands to work with your local Hugo:\n\n#### Restart the Hugo Server\n\n```sh\nmake compose-restart\n```\n\n#### Stop the Hugo Server\n\n```sh\nmake compose-stop\n```\n\nYou can see what these make targets do in the jx-docs [makefile](https://github.com/jenkins-x/jx-docs/blob/main/Makefile).\n\n### Local Hugo install method\n\nFor this method you need a recent extended version (we recommend version 0.67 or later) of Hugo to do local builds and previews of the Jenkins X documentation site.\nIf you install from the release page, make sure to get the extended Hugo version, which supports SCSS; you may need to scroll down the list of releases to see it.\nInstall Hugo following the [gohugo.io instructions](https://gohugo.io/getting-started/installing).\n\nCheck you're using `Hugo extended` and a version higher than or equal to `0.88.0` :\n\nYou can check the version by runing:\n\n```sh\n$ hugo version\n```\n\n#### Install PostCSS\n\nTo build or update your site\u2019s CSS resources, you also need [PostCSS](https://postcss.org/) to create the final assets. If you need to install it, you must have a recent version of `NodeJS` installed on your machine so you can use `npm`, the Node package manager. By default `npm` installs tools under the directory where you run `npm install`:\n\n```sh\nsudo npm install -D --save autoprefixer\nsudo npm install -D --save postcss-cli\n```\n\nGet local copies of the project submodules so you can build and run your site locally:\n\n```sh\ngit submodule update --init --recursive\n```\n\n#### Starting the preview server\n\nBuild the site:\n\n```sh\nhugo server\n```\n\nIt's ready when you see something like this:\n\n```sh\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at //localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\nPreview your site in your browser at: [localhost:1313](http://localhost:1313). You can use `Ctrl + c` to stop the Hugo server whenever you like.\n\nIt may be a good idea to run the server in a separate terminal so that you can keep it running while also using git or other commands.\n\n## Contribution workflow\n\nNow that you have your local preview environment, the [contribution workflow](/community/documentation/workflow/) documentation guides you through the steps to create your first pull request.\n\n## Reference\n\nThe [references](/community/documentation/reference/) page contains more useful information when working with Hugo and the Jenkins X site.\n",
            "content/en/community/documentation/apidocs.md": "---\ntitle: API Documentation\nlinktitle: API Documentation\ndescription: How to help improve the Jenkins X API documentation\ntype: docs\nweight: 15\naliases:\n    - /docs/contributing/documentation/apidocs/\n---\n\nJenkins X has two types of API documentation: [Kubernetes Custom Resource Documentation](/apidocs/) and [Godoc](https://godoc.org/github.com/jenkins-x/jx).\nBoth types are generated from the `codegen` binary which is part of the jx [repository](https://github.com/jenkins-x/jx).\n\n## Setup your development environment\n\nIt's best to make changes to the Jenkins X code on your local machine. Follow the [development](/community/code/) guide\nto get set up.\n\n## Writing custom resource documentation\n\nThe custom resource documentation is mostly generated from the comments on the [go structs](https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1) that define the custom resources, with the [introductory content](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes) and [structure](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml) injected.\n\n### Toolchain\n\nThe custom resource documentation is generated using the [same toolchain](https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/) as Kubernetes, but wrapped up in a series of `codegen` commands so that you don't have to download and setup the different tools yourself.\n\nThe HTML docs are generated via an [OpenAPI specification](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec) which in turn is generated from [Go Structs](https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi) which are generated from the code comments.\nTo generate the structs and the OpenAPI specification run:\n\n ```sh\n make generate-openapi\n ```\n\n {{< alert >}}\n `make generate-openapi` is just a wrapper for `codegen openapi`, passing in package to generate from, generate to, and the group (`jenkins.io`) and version (`v1`) to generate for.\n You can run this command directly if you prefer.\n {{< /alert >}}\n\n and to generate the HTML run:\n\n ```sh\n make generate-docs\n ```\n\n{{< alert >}}\n`make generate-docs` is just a wrapper for `codegen docs`. You can run this command directly if you prefer.\n{{< /alert >}}\n\nYou should run `make generate-openapi` whenever you change the custom resources, and check the generated changes into\n source control. This means that there is always a tagged version of the OpenAPI spec available for others to use.\n\n{{< alert >}}\nYou can also run `make generate` which will do all the code generation needed by Jenkins X (mocks and client as well\nas openapi)\n{{< /alert >}}\n\n `make generate-docs` is run by the release build, and the changes are automatically uploaded to the Jenkins X\n website on every release. They'll be available a few minutes after the release build completes.\n\n### Making changes to the documentation\n\nEach file for which you want to generate docs must be located in the [jenkins.io/v1](https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1) directory, and must have a the\n\n```go\n// +k8s:openapi-gen=true\n```\n\ncomment at the top of the file.\n\nTo exclude a type or member, add\n\n```go\n// +k8s:openapi-gen=false\n```\n\nto it.\n\nComments on types are ignored. Comments on struct fields are used as the description for each field.\n\nThe left hand menu is generated from the `resource_categories` in [config.yaml](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml). The introductory text for each category is authored as\n[html](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes).\n\nThe styles can [also be customized](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css).\n\n### OpenAPI\n\nThe OpenAPI spec is generated from the code. The structure is generated from the structs and fields. The `json`\n[tags](https://golang.org/pkg/encoding/json/#Marshal) are used to provide additional information including:\n\n* `name` is generated from the `key`\n* if `omitempty` is not set, the property will be `required`\n* if the `key` is `-` the field will be skipped\n* if `inline` is set, the properties will be inlined into the parent object\n\nAdditionally the\n\n```go\n// +optional\n```\n\ncomment can be used to prevent a property being `required`. For example:\n\n```go\n  metav1.TypeMeta `json:\",inline\"\n    // +optional\n    metav1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`\n  Spec BuildPackSpec `json:\"spec,omitempty\" protobuf:\"bytes,2,opt,name=spec\"`\n```\n\n#### OpenAPI Extensions\n\nOpenAPI spec can have extensions on types. To define one or more extensions on a type or its member\nadd `+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE` to the comment lines before type/member. A type/member can\nhave multiple extensions. The rest of the line in the comment will be used as $VALUE so there is no need to\nescape or quote the value string. Extensions can be used to pass more information to client generators or\ndocumentation generators. For example a type might have a friendly name to be displayed in documentation or\nbeing used in a client's fluent interface.\n\n#### Custom OpenAPI type definitions\n\nCustom types which otherwise don't map directly to OpenAPI can override their\nOpenAPI definition by implementing a function named \"OpenAPIDefinition\" with\nthe following signature:\n\n```go\n    import openapi \"k8s.io/kube-openapi/pkg/common\"\n\n    // ...\n\n    type Time struct {\n        time.Time\n    }\n\n    func (_ Time) OpenAPIDefinition() openapi.OpenAPIDefinition {\n        return openapi.OpenAPIDefinition{\n            Schema: spec.Schema{\n                SchemaProps: spec.SchemaProps{\n                   Type:   []string{\"string\"},\n                   Format: \"date-time\",\n                },\n            },\n        }\n    }\n```\n\nAlternatively, the type can avoid the \"openapi\" import by defining the following\nmethods. The following example produces the same OpenAPI definition as the\nexample above:\n\n```go\n    func (_ Time) OpenAPISchemaType() []string { return []string{\"string\"} }\n    func (_ Time) OpenAPISchemaFormat() string { return \"date-time\" }\n```\n\n## Write Godoc\n\nJenkins X uses the standard approach to Godoc, and it is automatically generated by [godoc.org](http://godoc.org).\nThis [blog](https://blog.golang.org/godoc-documenting-go-code) provides a good introduction to writing Godoc.\n",
            "content/en/community/documentation/changes.md": "---\ntitle: Suggest changes to documentation\nlinktitle: Suggest changes\ndescription: How to suggest changes to the Jenkins X site and documentation\ntype: docs\nweight: 10\naliases:\n    - /docs/contributing/documentation/changes/\n---\n\nDid you spot a typo or feel something's missing from a certain page?\nYou can still contribute your suggestions without having to go through setting everything up locally as explained on [Contribute to Documentation](/community/documentation/).\n\nThe process requires only three steps:\n\n1. Click the \"Edit this page\" link on the right\n1. Make your suggested changes\n1. Create a Pull Request\n\nWe'll go through each step here. Keep in mind though, that if you're looking to contribute larger amounts of changes, pages, or sections, it's best to test things out locally first (using the process described on [Contribute to Documentation](/community/documentation/)) instead of using this method.\n\n## Click the \"Edit this page\" link\n\nFirst off, make sure you're viewing the page you want to make changes to.\nThe link you need to click is specific for the page, to make it easier to start making changes.\n\nOn the right hand side of the page, you'll find a column that will always have the following three links:\n\n![Triage](/images/contribute/page_links.png)\n\nThe top one (`Edit this page`) is the one we need here, as it will allow you to suggest changes to the page you're currently on.\nThe second one (`Create documentation issue`) is a link to create a documentation related issue, for others to look at and hopefully fix. This could be for missing sections, or maybe larger changes you're not comfortable suggesting yourself.\nThe last one (`Create project issue`) is a link to create an issue for the main Jenkins X project. This is for problems related to the code and to how Jenkins X works.\n\n## Make suggested changes\n\nClicking the \"Edit this page\" link takes you to a page on GitHub that looks something like this:\n\n![Triage](/images/contribute/edit_page.png)\n\nThe main part of this page is the text field which includes the text for page you came from. It is using [GitHub markdown](https://guides.github.com/features/mastering-markdown/) to indicate when this should be bold, italic, etc., so if you haven't come across markdown before it might be a good idea to have a look at that if you plan on making changes to/using text formatting.\nThere's also a [cheat-sheet here](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) with just the formatting.\n\nYou can make any changes you see fit (it's treated as a suggestion that will be reviewed by others before being applied to the live website).\n\nOnce you're finished:\n\n1. Supply a summary of your changes (e.g. \"fixed typos in documentation contribution page\")\n1. Select the option \"Create a new branch...\" and give it a meaningful name\n1. Click \"Propose file change\"\n\nThe page should look something like this:\n\n![Triage](/images/contribute/commit_changes.png)\n\n## Create a Pull Request\n\nThe next screen after you clicked \"Propose file changes\" should be \"Open Pull Request\".\n\nYou can add more description if you wish, but at this point its fine to just click \"Create pull request\".\nIf there are any questions about your changes, or suggestions for improvements, they will be added to the pull request, so in case you have opted out of notifications from GitHub it would be good to check back now and then until the change is applied.\n",
            "content/en/community/documentation/reference.md": "---\ntitle: References\nlinktitle: References\ndescription: Additional reference documentation when working on the Jenkins X site\ntype: docs\nweight: 30\naliases:\n    - /docs/contributing/documentation/reference/\n---\n\nThe following sections contains other information that's helpful when working with Hugo and the Jenkins X site; you don't necessary need to go through this if this is your first time.\n\n## Search by Algolia/DocSearch\n\nWe're using [DocSearch](https://community.algolia.com/docsearch/) by Algolia to power the internal search.\n\n* The script and local config are declared in `/layouts/partials/scripts.html`\n* Styling is included via `/layouts/partials/head-css.html`\n* The configuration is managed in the Algolia console. \n\n## Markdown Syntax Reference\n\n### Code examples\nHugo uses [goldmark](https://gohugo.io/getting-started/configuration-markup#goldmark) parser to handle markdown and markdown related configuration and [chroma](https://gohugo.io/content-management/syntax-highlighting/) to handle syntax highlighting.\nChroma supports the following [languages](https://gohugo.io/content-management/syntax-highlighting/#list-of-chroma-highlighting-languages).\nAll pages on the Jenkins X docs use the typical triple-back-tick markdown syntax.\n\n````md\n```go\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n    DidError() bool\n    DidFail() bool\n    Error() error\n    Run() (string, error)\n    RunWithoutRetry() (string, error)\n    SetName(string)\n    SetDir(string)\n    SetArgs(\\[]string)\n    SetTimeout(time.Duration)\n    SetExponentialBackOff(\\*backoff.ExponentialBackOff)\n}\n```\n````\n\nbecomes\n\n```go\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n    DidError() bool\n    DidFail() bool\n    Error() error\n    Run() (string, error)\n    RunWithoutRetry() (string, error)\n    SetName(string)\n    SetDir(string)\n    SetArgs(\\[]string)\n    SetTimeout(time.Duration)\n    SetExponentialBackOff(\\*backoff.ExponentialBackOff)\n}\n```\n\n### Blockquotes\n\nBlockquotes can be added to the Jenkins X documentation using [typical Markdown blockquote syntax][bqsyntax]:\n\n```text\n> Without the threat of punishment, there is no joy in flight.\n```\n\nThe preceding blockquote will render as follows in the Jenkins X docs:\n\n> Without the threat of punishment, there is no joy in flight.\n\nHowever, you can add a quick and easy `<cite>` element (added on the client via JavaScript) by separating your main blockquote and the citation with a hyphen with a single space on each side:\n\n```text\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe](https://en.wikipedia.org/wiki/Kobo_Abe)\n```\n\nWhich will render as follows in the Jenkins X docs:\n\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe][abe]\n\n[abe]: https://en.wikipedia.org/wiki/Kobo_Abe\n[bqsyntax]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes\n[charcount]: http://www.lettercount.com/\n[`docs/static/images/showcase/`]: https://github.com/jenkins-x/jx/tree/master/docs/static/images/showcase/\n[ghforking]: https://help.github.com/articles/fork-a-repo/\n[hugodev]: /community/code/\n[shortcodeparams]: content-management/shortcodes/#shortcodes-without-markdown\n[sourceforge]: http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions\n[templating function]: /functions/\n",
            "content/en/community/documentation/step-by-step.md": "---\ntitle: Step by Step setup\nlinktitle: Git step by step\ndescription: Step by step instructions to setup Git\ntype: docs\nweight: 20\naliases:\n    - /docs/contributing/documentation/step-by-step/\n---\n\nWe'll go through each step below, but here's what you need to get started with Git:\n\n* The [`git`](https://git-scm.com) command line interface installed locally\n* a [GitHub](https://github.com) account\n* a local working copy of the code\n\n## Install Git on your system\n\nGit is a [version control system](https://en.wikipedia.org/wiki/Version_control) to track the changes of source code.\n\nYou will need to have Git installed on your computer to contribute to Jenkins X development.\nTeaching Git is outside the scope of the Jenkins X docs, but if you're looking for an excellent reference to learn the basics of Git, we recommend the [Git book](https://git-scm.com/book/) if you are not sure where to begin.\n\nMove back to the terminal and check if Git is already installed.\nType `git version` and press enter.\nIf the command returned a version number, you can skip the rest of this section.\n\nOtherwise, [download](https://git-scm.com/downloads) the latest version and follow this [installation guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\n\nFinally, run `git version` again to check if Git was installed successfully.\n\n### Git Graphical Front Ends\n\nThere are several [GUI clients](https://git-scm.com/downloads/guis) that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, we will use the command line since the commands are everywhere the same.\n\n## Create a GitHub Account\n\nIf you're going to contribute to the docs, you'll need to have an account on GitHub.\nGo to [www.github.com/join](https://github.com/join) and set up a personal account.\n\n## Set up your working copy\n\nThe working copy is set up locally on your computer.\nIt's what you'll edit, compile, and end up pushing back to GitHub.\nThe main steps are cloning the repository and creating your fork as a remote.\n\n### Fork the repository\n\nIf you're not familiar with this term, GitHub's [help pages](https://help.github.com/articles/fork-a-repo/) provide a simple explanation:\n\n> A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nOpen the [Jenkins X docs repository](https://github.com/jenkins-x/jx-docs) on GitHub and click on the \"Fork\" button in the top right.\n\n### Clone your fork locally\n\nNow open your fork repository on GitHub and copy the remote url of your fork.\nYou can choose between HTTPS and SSH as protocol that Git should use for the following operations.\nHTTPS works always [if you're not sure](https://help.github.com/articles/which-remote-url-should-i-use/).\n\n![Copy remote url](/images/contribute/development/copy-remote-url.png)\n\nThen go back to your terminal, `cd` to where you would like to place your local copy of the `jx-docs` repo, and then clone your fork.\n\n```sh\ngit clone --recurse-submodules --depth 1 git@github.com:<YOUR_USERNAME>/jx-docs.git\ncd jx-docs\n```\n\n{{< alert >}}\nIn case you already have a git clone locally (from before the theme change) then run the following to pull the Docsy theme and dependencies\n\n```sh\ngit submodule update --init --recursive\n```\n\n{{< /alert >}}\n\nAdd the conventional upstream `git` remote in order to fetch changes from the `jx-docs` master\nbranch and to create pull requests:\n\n```sh\ngit remote add upstream https://github.com/jenkins-x/jx-docs.git\n```\n\nLet's check if everything went right by listing all known remotes:\n\n```sh\ngit remote -v\n```\n\nThe output should look similar to:\n\n```sh\norigin    git@github.com:<YOUR_USERNAME>/jx-docs.git (fetch)\norigin    git@github.com:<YOUR_USERNAME>/jx-docs.git (push)\nupstream  https://github.com/jenkins-x/jx-docs.git (fetch)\nupstream  https://github.com/jenkins-x/jx-docs.git (push)\n```\n",
            "content/en/community/documentation/style-guide.md": "---\ntitle: Documentation Style Guide\nlinktitle: Style Guide\ndescription: Guidelines for contributing to Jenkins X documentation\ntype: docs\nweight: 21\n---\n\n# Documentation writer style guide\n\nThe Jenkins X Documentation Special Interest Group (SIG) has established some guidelines for docs contribution. \nThe following are not meant to be exhaustive, but are simple style and technical tips to help conform to the existing voice and technical writing techniques used in our existing docs content.\n\n\n## Writer voice and tone\n\n* Pages should have titles, and should be descriptive enough on its own that readers (and web search crawlers) can pick up the title without too much missing context. \nProper nouns should be capitalized in titles but nothing else (for example, write \"Jenkins X tips and tricks\" instead of \"Jenkins X Tips And Tricks\")\n\n* Do not use commands as verbs. \nFor example write \"Change to a new directory with `cd`\" instead of \"cd to the new directory\"\n\n* Use active voice wherever possible instead of passive voice to make explanations and procedures clearer and more direct. \nFor example, write \"Click the `TLS/SSL` checkbox if you want to enable a secure connection\" instead of \"If you want a secure connection to be enabled, make sure the `TLS/SSL` checkbox is clicked.\"\n  \n* When introducing a new acronym to your content, write the full term first before using the acronym (for example, \u201cUser Interface (UI)\u201d). \nThen you can use the acronym in subsequent mentions.\n\n* Keep content focus as narrow and prescriptive as possible; no long explanations for actions or drawn out introductions unless describing it in detail for an `/about` page.\n\n## Technical guidelines\n\n* Write in one sentence per line, even if you are writing a multi-sentence paragraph. \nThat way when you or other writers are making changes to the content, it will be easier for reviewers to find what has changed in one sentence rather than finding it in a long paragraph.\n\n* Use multiples of 10 when assigning the `weight` of a new page of content, as it will be easier to prioritize pages within a navigation menu. \n Let's say you have 3 existing pages with a `weight` of `10`, `20`, and `30`, respectively.  \n Using this method, a writer can create a page with a weight of `11` that will appear between the page weighted `10` and `20` in the navigation menu.\n\n* Use backticks when describing commands, directory paths, or filenames.\nFor example: \"Open a terminal and type \\`cd /usr/local/bin\\` to find the \\`jx\\` command.\"\n\n* Code blocks should use triple backticks plus the supported code descriptor for proper syntax highlights  (for example, `\\`\\`\\`bash` for a command run at terminal shell prompt).\n\n* Commands to be typed out by the user should not use prompts like `$` or `>` as they can introduce unintended errors when used with the command.\n\n* Use absolute paths when cross-linking content. For example, use `/docs/install-setup/installing/boot/foo.md` instead of `../../install-setup/installing/boot/foo.md`.\n\n* Place the title of your content in the header/metadata of the page under `Title:`. Subsequent sections created in the content begin with section 2 header designation (`##`) or more.",
            "content/en/community/documentation/workflow.md": "---\ntitle: Contribution workflow\nlinktitle: Workflow\ndescription: Description of the contribution workflow for the documentation\ntype: docs\nweight: 30\naliases:\n    - /docs/contributing/documentation/workflow/\n---\n\nOnce you've completed the initial steps to get started, you can begin to make changes and add new content.\n\nAt a high level, your workflow will likely look something like this:\n\n* Create a new branch for you work\n* Start the Hugo server to preview your changes (updates the site live)\n* Make changes/add new content\n* Commit and push your changes to your fork of `jx-docs`\n* Raise a Pull Request (PR) to have your changes merged into the main `jx-docs` repo\n* Wait for and then participate in a review of your changes\n    * might involve making adjustments or adding a bit more\n* See your changes go live on the [Jenkins X site](https://jenkins-x.io)\n\nWe'll go though each of the steps below in more detail\n\n## Create a new branch\n\nFirst, ensure that your local repository is up-to-date with the latest version of `jx-docs`. More details on [GitHub help](https://help.github.com/articles/syncing-a-fork/)\n\n```sh\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\n```\n\nYou've now updated your local copy of the repository. To update your fork on GitHub, push your changes:\n\n```sh\ngit push origin master\n```\n\nCreate a new branch for the changes you'd like to make:\n\n```sh\ngit checkout -b <BRANCH-NAME>\n```\n\nYou can check on which branch your are with `git branch`. You should see a list of all local branches. The current branch is indicated with a little asterisk.\n\n## Start the Hugo server\n\nIn case you don't already have it running, this is a good time to [start](/community/documentation/#local-preview-environment) your local Hugo server.\n\nIf you already have Hugo running, it's usually best to double check that the site looks as you'd expect it (basically the same as the live site) and if something's off, do a quick restart of Hugo.\n\n## Make Changes\n\nAll pages are written in GitHub-flavored Markdown (see [Markdown reference](/community/documentation/reference/#markdown-syntax-reference) for details on syntax).\n\nSome things, like the footer etc. are in the `/themes/docsy` structure, but most likely you'll just be adding/changing things in the various page structures. If you do make changes that involve the theme, remember to copy-paste the theme file to the appropriate folder in the `/layouts` structure, and make your changes there. If you make changes to files in the `/themes/docsy` structure, they will likely be deleted when we update the theme.\n\n## Add new Content\n\nThe Jenkins X docs make heavy use of Jenkins X's archetypes feature. All content sections in Jenkins X documentation have an assigned archetype.\n\nAdding new content to the Jenkins X docs follows the same pattern, regardless of the content section:\n\n```sh\ndocker-compose run server new <DOCS-SECTION>/<new-content-lowercase>.md\n```\n\n## Commit and push your changes\n\nWhen you've finished, and verified that everything looks good (using the Hugo server), you should run one last check to verify that you didn't break anything.\n\n### Checking References and Links\n\nWe're using a tool called [htmlproofer](https://github.com/chabad360/htmlproofer) to check that links are still valid etc. so you just need to run the following commands to build the site locally, and verify that everything looks good:\n\n```sh\ndocker-compose run server sh -c \"cd /src && hugo\"\ndocker-compose up linkchecker\n```\n\n### Checking Spelling\n\nFor spell checking, we're using [node-markdown-spellcheck](https://github.com/lukeapage/node-markdown-spellcheck) to run through all our markdown files and list any spelling issue or unknown word it can find.\n\nTo make this as simple as possible, just run the following command\n\n```sh\ndocker-compose up spellchecker\n```\n\nThis will output any issue the spell checker have found.\n\nIt's likely that the report includes words that are spelled correctly, but that just means the spell checker is not aware of the correct spelling (happens a lot for technical terms, commands, etc.). Please edit the `.spelling` file and add the unknown word.\nAlso, please try and keep the list alphabetically sorted; makes it easier to navigate when you're looking for something\n\n### Commit & Push\n\nIf everything is good, you can commit your changes, and push them to your fork:\n\n```sh\ngit push --set-upstream origin <BRANCH-NAME>\n```\n\nIf you need to push more commits to the same branch, you can just use `git push` going forward; set-upstream is only needed once.\n\n### Open a pull request \ud83c\udf89\n\nIn this step, you'll open a pull request to submit your additions. Open either the [Jenkins X documentation master repository](https://github.com/jenkins-x/jx-docs) or your own fork of the respository on GitHub in your browser.\n\nYou should find a green button labeled with \"New pull request\". But GitHub is clever and probably suggests you a pull request like in the beige box below:\n\n![Open a pull request](/images/contribute/development/open-pull-request.png)\n\nClick on the green \"Compare and pull request\" button. A new page will open which summaries the most important information of your pull request. Scroll down and you'll find the additions of all your commits. Make sure everything looks as expected and click on \"Create pull request\".\n\nThere are a number of automated checks that will run on your PR:\n\n* Semantic Pull Request - validates that your commit messages meet the [Conventional Commit format](https://github.com/probot/semantic-pull-requests#semantic-pull-requests).\n  Additionally your PR must also have a conventional message. The UX for this bot is a little odd as it doesn't go red\n  if the messages are NOT correct, instead it goes yellow. You need it to go to a green tick!\n* Tide - performs the merge when all the checks pass. Don't worry about the state of this one, it doesn't add much info.\n  Clicking on the details link is very helpful as it will take you to the dashboard where you can navigate to the \"Tide\"\n  screen and check the status of your PR in the merge queue.\n\n### Review Process\n\nThe final part of all of this, is letting others review your work and provide feedback. As a rule of thumb, the conversation should happen on the PR, but sometimes things will be sorted out via Slack or a video call.\n\nSometimes it may take a few days for a review to happen. If you feel it's an urgent change, jump on the [community slack channel](https://jenkins-x.io/community/#slack) `#jenkins-x-user` and ask for someone to review your PR.\n\nOnce the review is done, your changes will be merged into the master branch, and the site will be updated.\n\n{{< alert >}}\nIn case you need to update your PR/branch because js-docs/master have been updated since you submitted your PR, run the followin `git` command to pull all the changes to your local environment and then push them to your PR/branch:\n\n```sh\ngit fetch upstream\ngit rebase upstream/master\ngit push\n```\n\nIf you experience Merge Conflicts, there's a good [article on GitHub](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line) that helps explain what to do\n{{< /alert >}}\n",
            "content/en/community/labs/_index.md": "---\ntitle: Labs\nlinktitle: Labs\ndescription: Labs enhancements\ntype: docs\nweight: 30\naliases:\n  - /labs\n  - /docs/labs\n---\n\nWe want to enable the Jenkins X open source community to move fast, innovate and iterate while at the same time keeping stability.\n\nSo we innovate within the Labs so that we can go quickly and innovate rapidly then when things are stable we can roll them into the stable Jenkins X release.\n\nFor more details see the [Labs Enhancements proposal](https://github.com/rawlingsj/enhancements/blob/master/proposals/labs/README.md).\n",
            "content/en/community/maintainer_guide/_index.md": "---\ntitle: Maintainer Guide for Jenkins X\nlinktitle: Maintainer Guide\ndescription: Everything a Jenkins X maintainer should know about\nweight: 30\ntype: docs\nno_list: true\n---\n\nThis document outlines some of the responsibilities expected from you as a maintainer.\n\n## Requirements of becoming a maintainer\n\nIf you are a long time Jenkins X contributor, you should consider becoming a maintainer.\n\n- Active contributions in Jenkins X community for atleast 6 months\n  - Pull requests making changes to code or documentation\n  - Review PRs from new contributors\n  - Answer questions from the community in the slack channel\n  - Answer questions in github issues\n- Approval from the current Jenkins X maintainers/TOC (Technical Oversight Committee)\n\nOnce you are ready to become a maintainer, open a PR to the jx-community repository.\n\n## Access\n\nA core maintainer is expected to have access to the following resources\n\n- Member role in all Jenkins X github org\n- Jenkins X infra hosted in GCP (jenkins-x-bdd and jenkinsxio projects)\n- [1password account](https://jenkinsx.1password.com) to access Jenkins X related secrets\n- Jenkins X zoom account\n- Jenkins X youtube channel\n- Jenkins X UI password\n- Jenkins X algolia account (used as the search engine in the Jenkins X website)\n\n## Responsibilities\n\nIt's expected that a core maintainer will make Jenkins X more stable and feature packed, while engaging with the community.\n\n### Community effort\n\n- Uphold the [CDF Code of Conduct](https://github.com/cdfoundation/.github/blob/main/CODE_OF_CONDUCT.md)\n- Answer questions on slack (jenkins-x-user and jenkins-x-dev)\n- Try to attend all community office hour meetings\n- Attend the CDF TOC meetings from time to time\n- Join one of the CDF SIGs, and give a short status update during the office hours.\n\n### Triage issues\n\n- Assign appropriate labels to issues\n- (If possible) assign the right person to those issues\n- Close issues which are resolved or too old to be worked on (may be v2 related)\n- Provide feedback in github issues\n\n### PR Review\n\nJenkins X has a lot of repositories, and new contributions from a very active community.\nIt's the responsibilities of a maintainer to ensure we do timely PR reviews.\n\nIt's desirable to follow the conventions outlined [here](/community/code/pullrequestreview/)\n\n### Infra/plumbing issues\n\n- Ensure flaky tests are identified and fixed. This will ensure that new features get released timely\n- Close old PRs which cannot be merged anymore.\n- Keep all helm charts in the jx3-version up to date.\n- Regularly upgrade the hugo image used in the jx-docs repository\n",
            "content/en/community/maintainer_guide/go-upgrades.md": "---\ntitle: Golang upgrades\nlinktitle: Golang upgrades\ndescription: Updating golang version for jenkins x\nweight: 200\ntype: docs\nno_list: true\n---\n\nJenkins X codebase uses Golang/Go.\nNew versions of golang comes every 6 months, and golang supports only [2 versions](https://endoflife.date/go).\nIt is highly desireable to use the latest and greatest version of golang for Jenkins X as newer versions have performance improvements and get regular security updates.\n\nTo update golang version in Jenkins X follow these steps\n\n- Open an issue in jx repository announcing the upgrade.\n- Change the go version in the pipeline catalog repository.\n  See this [PR](https://github.com/jenkins-x/jx3-pipeline-catalog/pull/1162) for which files to change.\n- Update the catalog version in the version stream\n  See this [PR](https://github.com/jenkins-x/jx3-versions/pull/3240) for which files to change.\n- Update the library packages first (please follow this order)\n  - [jx-kube-client](https://github.com/jenkins-x/jx-kube-client)\n  - [go-scm](https://github.com/jenkins-x/go-scm)\n  - [logrus-stackdriver-formatter](https://github.com/jenkins-x/logrus-stackdriver-formatter)\n  - [jx-logging](https://github.com/jenkins-x/jx-logging)\n  - [jx-api](https://github.com/jenkins-x/jx-api)\n  - [jx-helpers](https://github.com/jenkins-x/jx-helpers)\n  - [secretfacade](https://github.com/jenkins-x-plugins/secretfacade)\n- Once these packages are upgraded, start the upgrade for the plugins and main jx repository\n- Follow these steps to upgrade the version\n  - Change the version in go.mod file\n  - Upgrade any direct dependencies to other Jenkins X packages that you see in go.mod: If you for example find the line `github.com/jenkins-x/jx-logging/v3 v3.0.7` you run go get -u github.com/jenkins-x/jx-logging/v3\n  - Run `go mod tidy` and ensure that it does not error out\n  - Change `GO_VERSION` in makefile to the version you are upgrading to.\n  - Check if there are any references to an older version and replace those.\n  - Verify that\n    - the build works by running `make build`\n    - tests are working, by running `make test`\n    - linting checks are working by running `golangci-lint run`\n      - Use the same version that is used by Jenkins X. At the time of writing that is 1.58; you can see what [image version is referenced in the pipeline](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/go/pullrequest.yaml).\n      - If there is a configuration file for golangci-lint in the repository (`.golangci.yaml`) it likely needs to be updated. See for example https://github.com/jenkins-x/jx-kube-client/blob/main/.golangci.yml for reference. \n",
            "content/en/community/maintainer_guide/infrastructure.md": "---\ntitle: Jenkins X infrastructure\nlinktitle: Jenkins X infrastructure\ndescription: Internal infrastructure used for Jenkins X\nweight: 300\ntype: docs\nno_list: true\n---\n\nJenkins X runs it's infrastructure in Google Cloud Platform (GCP).\nWe have 2 GCP projects\n\n- jenkinsxio\n- jenkins-x-bdd\n\n### jenkinsxio\n\nThis is where the main infrastructure runs (the jobs triggered when a pull request is opened in any repository).\nSome details about the infrastructure are shown below\n\n- GKE kubernetes version 1.21\n- Spot instances to keep costs low\n  - n1-standard-2 with boot size 100 GB\n- Cluster autoscaler scales the nodes between 1 and 5.\n- We use terraform, an infrastructure as Code tool to manage the cluster using the [google-jx](https://github.com/jenkins-x/terraform-google-jx) module.\n\n### jenkins-x-bdd\n\nThis project is only used for bdd testing.\nTest clusters are created here when a pull request is opened in the [jx3-versions](https://github.com/jenkins-x/jx3-versions) repository.\n\nTest clusters are supposed to be transient, and are regularly gc'ed.\n\n- If a test passes, then a clean up is performed at the end of the test run to delete the test cluster\n- For a failed test, we have a cloud function scheduled to run every hour which deletes any left over clusters and cloud resources (persistent volumes, service accounts and secrets)\n",
            "content/en/community/maintainer_guide/mentorship/_index.md": "---\ntitle: Mentorship opportunities\nlinktitle: Mentorship\ndescription: Everything a Jenkins X maintainer should know about\nweight: 100\ntype: docs\nno_list: true\n---\n\nA maintainer is expected to help in increasing the adoption of Jenkins X and add new contributors.\n\nHelping Jenkins X participate in internship opportunities is an excellent way to give Jenkins X more visibility and get new contributors.\n\nThese are the various internship programs that Jenkins X can participate in.\n\n- Google summer of code\n- Google season of docs\n- Outreachy\n- LFX mentorship\n\nThe Jenkins X Technical Oversight Committee (TOC) is responsible for keeping a list of projects year round.\nThis will help maintainers to float a project with less effort.\n\nIf you are interested in mentoring, please open a pull request in the jx-community repository with your project proposal.\n",
            "content/en/community/maintainer_guide/mentorship/gsoc.md": "---\ntitle: GSoC\nlinktitle: GSoC\ndescription: Google Summer of Code\nweight: 200\ntype: docs\nno_list: true\n---\n\nJenkins X has participated in the Google Summer of code (GSoC) before.\n\nThis is the process that Jenkins X will follow when applying for GSoC (timelines are subject to change, check the [timeline](https://developers.google.com/open-source/gsoc/timeline) section in the gsoc webpage).\n\n- Publish a blog post announcing Jenkins X interest in applying to GSoC when the application is announced by Google\n  - this normally happens in November\n- Set a deadline when all project ideas are submitted for internal review by Jenkins X TOC\n  - It's a good idea to set the deadline internally for project list submission to February 1.\n    This is normally when the application opens for organizations.\n    The application remain open only for 2 weeks, so it's better to have a list beforehand.\n- Decide internally on a list of projects and the mentors that are interested.\n  - Projects with multiple mentors are more likely to be shortlisted\n- Once the application is announced by Google, publish a blog post with the project ideas. A sample is available [here](https://jenkins-x.io/blog/2022/02/20/gsoc2022-ideas/)\n- Submit the application\n- If selected by GSoC (results are announced in March), publish a follow up blog post.\n  - This blog post is expected to help the GSoC applicants understand more about Jenkins X and what we are looking for in an ideal contributor. Check the [follow up blog from 2022](https://jenkins-x.io/blog/2022/03/12/gsoc2022-followup/) to get an idea.\n  - It helps the contributors and the mentors if a project template is provided.\n- After the project proposal deadline (April), decide on a list of contributors and rank the project proposals (the one at the top is the strongest proposal)\n- Once Google announces the list of accepted proposals for Jenkins X (not all proposals ranked will get selected), mentors should discuss the project details (and time commitments) with the contributors.\n",
            "content/en/community/maintainer_guide/supply-chain-security.md": "---\ntitle: Add sbom generation step to release pipelines\nlinktitle: Add sbom generation step to release pipelines\ndescription: As part of increasing supply chain security, here are steps to add SBOM generation to JX repositories release pipelines\nweight: 400\ntype: docs\nno_list: true\n---\n## Introduction\n\nJenkins X started to support supply chain security through different steps.\nTill now we support:\n\n- SBOM generation\n- Uploading SBOMs to the release page and to our [container-registry](https://github.com/orgs/jenkins-x/packages)\n\n## How we do it?\n\nThere are two types of artifacts we deal with:\n\n### Zipped binaries\n\nFor `.tar.gz` artifacts, we use `goreleaser` to generate the artifacts themselves and to generate SBOMs for them. (Both get released on the release page on github of the repository). See Assets at the [release-page](https://github.com/jenkins-x/jx/releases) for example.\n\nTo generate SBOMs, add this to the `.goreleaser` file\n\n```bash\nsboms:\n  - artifacts: archive\n```\n\nBut `goreleaser` requires [syft](https://github.com/anchore/syft) to be installed for SBOM generation. Refer to [goreleaser documentation](https://goreleaser.com/customization/sbom/) to know more details.\n\n**How to install syft**\n\n- There are some of JX repositories that uses github actions for the release pipeline ([jx](https://github.com/jenkins-x/jx) for example). So, we're installing syft in the `upload-binaries.sh` [script](https://github.com/jenkins-x/jx/blob/49b8f966a16d2935f3e4dfff1089d421a81bc77d/.github/workflows/jenkins-x/upload-binaries.sh) executed by github actions before using `goreleaser release`. Add this to the script to install\n  ```bash\n  curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | \\\n  sh -s -- -b /usr/local/bin v0.54.0\n  chmod +x /usr/local/bin/syft\n  ```\n- Other repositories use JX itself to release different artifacts ([jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline) for example). Installing syft is done through this [step](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/4debb1ef44ad846088ce48d7921dd57510b9eda2/tasks/supply-chain-security/task.yaml#L8) in the [jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog). To include it, you add this block before the `upload-binaries` step in the [release pipeline](https://github.com/jenkins-x-plugins/jx-pipeline/blob/main/.lighthouse/jenkins-x/release.yaml)\n  ```bash\n  - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/supply-chain-security/task.yaml@versionStream\n    name: download-syft\n  ```\n\n### Container images\n\nFor container images, We use `syft` to generate SBOMs from the container images (syft is already installed to be used by `goreleaser` and it's not an additional step). After that, we use [oras](https://oras.land/) to push the generated SBOM as an OCI artifact in the same container registry with the container image.\n\n**How to generate and push**\n\n- For JX repositories that uses github actions for the release pipeline ([jx](https://github.com/jenkins-x/jx) for example), we're using oras as the base image for a separate github action.\n\n  - Add this block at the end of the release job\n    ```bash\n      - env:\n          GITHUB_TOKEN: ${{ secrets.GIT_BOT_TOKEN }}\n          GIT_USERNAME: jenkins-x\n          DOCKER_REGISTRY_ORG: jenkins-x\n          REPO_NAME: ${{ github.event.repository.name }}\n          VERSION: ${{ steps.prep.outputs.version }}\n        name: Generate and Push SBOM\n        uses: docker://ghcr.io/oras-project/oras:v0.13.0\n        with:\n          entrypoint: .github/workflows/jenkins-x/sbom-container.sh\n    ```\n  - Add this script `.github/workflows/jenkins-x/sbom-container.sh`\n    ```bash\n    #!/bin/sh\n\n    # Install syft in this script\n    apk add --no-cache curl unzip\n    curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | \\\n    sh -s -- -b /usr/local/bin v0.55.0\n    chmod +x /usr/local/bin/syft\n\n    # Generate SBOM\n    syft ghcr.io/$DOCKER_REGISTRY_ORG/$REPO_NAME:$VERSION --scope all-layers \\\n    -o spdx-json > sbom.json\n\n    #Push SBOM with oras\n    echo $GITHUB_TOKEN | oras push -u $GIT_USERNAME --password-stdin  \\\n    ghcr.io/$DOCKER_REGISTRY_ORG/$REPO_NAME:$VERSION-sbom sbom.json\n    echo $GITHUB_TOKEN | oras push -u $GIT_USERNAME --password-stdin  \\\n    ghcr.io/$DOCKER_REGISTRY_ORG/$REPO_NAME:latest-sbom sbom.json\n\n    ```\n- For repositories that use JX itself to release ([jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline) for example):\n\n  - First, replace the `build-and-push-image` step here:\n    ```bash\n      - name: build-and-push-image\n        resources: {}\n    ```\n\n  with those two steps which use kaniko to build the image and crane to push it (image.tar is required for syft to generate SBOM)\n\n  ```bash\n    - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/build-scan-push/build-scan-push.yaml@versionStream\n      name: build-container\n    - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/build-scan-push/build-scan-push.yaml@versionStream\n      name: push-container\n  ```\n\n  - We created this [step](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/4debb1ef44ad846088ce48d7921dd57510b9eda2/tasks/supply-chain-security/task.yaml#L17) in the [jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog) which uses syft to generate the SBOM from the container image `image.tar` (built with kaniko) and then uploads the SBOM using oras. Since installing syft is done through this [step](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/4debb1ef44ad846088ce48d7921dd57510b9eda2/tasks/supply-chain-security/task.yaml#L8) in the [jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog), you add this block before the `upload-binaries` step in the [release pipeline](https://github.com/jenkins-x-plugins/jx-pipeline/blob/main/.lighthouse/jenkins-x/release.yaml)\n    ```bash\n      - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/supply-chain-security/task.yaml@versionStream\n        name: build-and-push-sbom\n        resources: {}\n    ```\n  - At the end add this step\n    ```bash\n    - name: cleanup-image-tar\n      image: alpine:3.16\n      resources: {}\n      script: |\n        #!/bin/sh\n        rm -f /workspace/source/image.tar\n    ```\n\n**Edit the .gitignore**\n\nDon't forget to include those in the `.gitignore` file\n\n```bash\n# image tar files\nimage.tar\n\n# docker credential binaries\ndocker-credential-*\n\n# sbom json created by syft\nsbom.json\n```\n",
            "content/en/community/office_hours/2019-02-21.md": "---\ntitle: \"Jenkins X Office Hours - February 21, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: omedina\ndate: 2019-02-21\ntype: docs\n---\n\n# Agenda\n\n  - [Jenkins X Pipelines](/architecture/jenkins-x-pipelines) - [Andrew Bayer](https://github.com/abayer)\n  - Container Tests - [Gareth Evans](https://twitter.com/garethbryncyn)\n\n---\n\n\n{{< youtube id=\"EYywyqcPVMY\" autoplay=\"true\" >}}",
            "content/en/community/office_hours/2019-03-21.md": "---\ntitle: \"Jenkins X Office Hours - March 21, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: omedina\ndate: 2019-03-21\ntype: docs\n---\n\n# Agenda\n\n  - Overview and demo of DevEnv - [Cai Cooper](https://twitter.com/cagiti)\n  - CLI plugins - [Pete Muir](https://twitter.com/plmuir)\n  - CloudBees Docs Team (Ashton, Kim, Tammy, John) - want to know how they can help the community with Jenkins X docs :-)\n\n---\n\n\n{{< youtube id=\"dDKK-ud7DWk\" autoplay=\"true\" >}}",
            "content/en/community/office_hours/2019-04-04.md": "---\ntitle: \"Jenkins X Office Hours - April 4, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: omedina\ndate: 2019-04-04\ntype: docs\naliases:\n  - /community/april-4\n---\n\n# Agenda\n\n- Rebasing & Batching pull requests - [Pete Muir](https://twitter.com/plmuir) & [James Rawlings](https://twitter.com/jdrawlings)\n- Provisioning Jenkins X K8s Clusters Using Infrastructure as Code (Terraform) - [Oscar Medina](https://twitter.com/SharePointOscar)\n- Knative Server - [James Strachan](https://twitter.com/jstrachan)\n- Multi-select questions for jx add app - [Pete Muir](https://twitter.com/plmuir)\n- jx add app against local filesystem - [Pete Muir](https://twitter.com/plmuir)\n\n---\n\n\n{{< youtube id=\"eYIaz_plUOw\" autoplay=\"true\" >}}",
            "content/en/community/office_hours/2019-04-19.md": "---\ntitle: \"Jenkins X Office Hours - April 19, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: rawlingsj\ndate: 2019-04-19\ntype: docs\naliases:\n    - /community/april-18\n---\n\n# Agenda\n\n- Update on [multi cluster](/docs/reference/multi-cluster/) - [James Strachan](https://twitter.com/jstrachan)\n- Update on Dogfooding Jenkins X - [James Rawlings](https://twitter.com/)\n- Update on monitoring - [Gareth Evans](https://twitter.com/garethbryncyn)\n- Update on external dns - [Cai Cooper](https://twitter.com/cagiti)\n- Update on multiple git providers for Prow - [Will Refvem](https://twitter.com/wildwillberry)\n\nDemos:\n\n- [Multi-cluster](/docs/reference/multi-cluster/) - [James Strachan](https://twitter.com/jstrachan)\n- Installing apps using GitOps, with private chart repos - [Pete Muir](https://twitter.com/plmuir)\n- Creating optional questions for app install - [Dave Conde](https://twitter.com/davidconde)\n- Jx upgrade app - [Pete Muir](https://twitter.com/plmuir)\n\n\n{{< youtube id=\"5McQOKpsWhw\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/2019-05-03.md": "---\ntitle: \"Jenkins X Office Hours - May 3, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: rawlingsj\ndate: 2019-05-03\ntype: docs\n---\n\n# Agenda\n\n- bucketrepo as a lightweight replacement for Nexus (https://github.com/jenkins-x/bucketrepo) - Cosmin Cojocar\n- latest Jenkins X Apps demo - Pete Muir https://www.youtube.com/watch?v=MqdMynweoUU&feature=youtu.be and https://www.youtube.com/watch?v=csRftjH1uXI&feature=youtu.be\n---\n\n\n{{< youtube id=\"xoO1TZOjeeI\" autoplay=\"true\" >}}",
            "content/en/community/office_hours/2019-05-30.md": "---\ntitle: \"Jenkins X Office Hours - May 30, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: rawlingsj\ndate: 2019-05-30\ntype: docs\n---\n\n# Agenda\n\n- Jenkins X and machine learning - Terry Cox\n- walkthrough of new code coverage\n\n\n{{< youtube id=\"pyYtpDTQRzg\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/2019-06-27.md": "---\ntitle: \"Jenkins X Office Hours - June 27, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: marckK\ndate: 2019-06-27\ntype: docs\n---\n\nDemos:\n\n- pipeline scheduler configuration - [Dave Conde](https://twitter.com/davidconde) and [Pete Muir](https://twitter.com/plmuir)\n- [Jenkins X Boot](/docs/reference/boot/) - [James Strachan](https://twitter.com/jstrachan)\n\nAnnouncement:\n\n- Jenkins X Contributor Summit + Jenkins X at [DevOps World | Jenkins World](https://www.cloudbees.com/devops-world/san-francisco) - [Andrew Bayer](https://twitter.com/abayer) and [Tracy Miranda](https://twitter.com/tracymiranda)\n    - Contributor Summit is a free event before DevOps World | Jenkins World\n    - [Register your interest in speaking, demoing or attending](https://docs.google.com/forms/d/e/1FAIpQLSdLzCFszB35RnQksHClOpweQzaVfxw1_JvTiIqmeytbGqyCHQ/viewform)\n\n\n\n {{< youtube id=\"H3eZyBLTitI\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/2019-07-25.md": "---\ntitle: \"Jenkins X Office Hours - July 25, 2019\"\ndescription: >\n    A recap of our Community event.\nauthor: marckK\ndate: 2019-07-25\ntype: docs\n---\n\nAnnouncements:\n\n- New Jenkins X Logo!! - [James Rawlings](https://twitter.com/jdrawlings)\n\nDemos:\n\n- meta pipeline - [Hardy Ferentschik](https://twitter.com/fere0010)\n- BDD Tests report generation - [Daniel Gozalo](https://twitter.com/Dani_GozB)\n\nBonus:\n\n- fun movie trailer style video for Jenkins X - [Oscar Medina](https://twitter.com/SharePointOscar)\n\n\n\n {{< youtube id=\"PW_jqaC9omk\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/2020-01-23.md": "---\ntitle: \"Jenkins X Office Hours - Jan 23rd 2020\"\ndescription: >\n    A recap of our Community event.\nauthor: rawlingsj\ndate: 2020-01-23\ntype: docs\n---\n\nOverview of jx boot apps proposal\n\nDemo of early idea around converting a declaritive Jenkins pipeline used with Jenkins X to jenkins-x.yml\n\n- fun movie trailer style video for Jenkins X - [Oscar Medina](https://twitter.com/SharePointOscar)\n\n\n\n {{< youtube id=\"HJCNwThiM3I\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/2020-03-05.md": "---\ntitle: \"Jenkins X Office Hours - March 5th 2020\"\ndescription: >\n    A recap of our Community event.\nauthor: marckK\ndate: 2020-03-05\ntype: docs\n---\n\nAnnouncements:\n\n- Jenkins X Labs\n\nDemos:\n\n- jxl boot\n- k8s controller for Google Secret Manager\n\n\n {{< youtube id=\"uMd0ce4h7jM\" autoplay=\"true\" >}}\n",
            "content/en/community/office_hours/_index.md": "---\ntitle: Office Hours\nlinktitle: Office Hours\ntype: docs\nweight: 70\n---\n",
            "content/en/community/office_hours/archives.md": "---\ntitle: \"Jenkins X Office Hours - Archives\"\ndescription: >\n    A list of archived Office Hours videos from past events.\nauthor: omedina\nweight: 100\ntype: docs\n---\n\n### Archives\n* [13th December, 2018 - from KubeCon US](https://www.youtube.com/watchv=TF_Mxq5sDsI&t)\n* [6th September, 2018](https://www.youtube.com/watch?v=2bl-3abyFe4)\n* [9th August, 2018](https://www.youtube.com/watch?v=0NUtGVTBLto)\n* [26th July, 2018](https://www.youtube.com/watch?v=Io3p7NurYqY&t)\n* [12th July, 2018](https://www.youtube.com/watch?v=oqJ__akQj5I)\n* [17th May, 2018](https://www.youtube.com/watch?v=bvStct7Cz5E)\n\n",
            "content/en/community/roadmap.md": "---\ntitle: Jenkins X Roadmap\nlinktitle: Roadmap\ndescription:\ntype: docs\nweight: 100\n---\n\nThe Jenkins X roadmap can be found on [GitHub](https://github.com/orgs/jenkins-x/projects/23/views/1).\n\nPlease join our [TOC meetings](https://jenkins-x.io/community/) and [Slack channels](/community/#slack) to ask questions and drive input on the future of the project! The best way to get a change into Jenkins X is to write a pull request with the change to the appropriete. If a change requires changes to multiple repositories you should start with creating a PR in the [Jenkins X enhancements repo](https://github.com/jenkins-x/enhancements) documenting the propsed change.\n",
            "content/en/community/security.md": "---\ntitle: Jenkins X Security\nlinktitle: Security\ndescription:\ntype: docs\nweight: 80\naliases:\n    - /docs/contributing/security/\n---\n\nThe Jenkins X project takes security seriously. We make every possible effort to ensure users can adequately secure their automation infrastructure.\nTo that end, we work with Jenkins X platform and app developers, as well as security researchers, to fix security vulnerabilities in Jenkins X in a timely manner, and to improve the security of Jenkins X in general.\n\n## How to Report a Security Vulnerability\n\nIf you find a vulnerability in Jenkins X, please report it by sending an email to the [SECURITY maintainer mailing list](mailto:jenkins-x-admin@googlegroups.com).\nPlease **do not report security issues in the github** tracker.  \n\nBy restricting access to this potentially sensitive information, we can work on a fix and deliver it before the method of attack becomes well-known.\n\n## Vulnerabilities in Apps\n\nWhilst the Jenkins X team is not responsible for the quality of third party apps, please still use the above reporting mechanism and we will co-ordinate with the app developer to ensure a fix in a secure maner.\n",
            "content/en/docs/build-test-preview/_index.md": "---\ntitle: \"Build and test\"\ndate: 2017-01-05\nweight: 40\ndescription: >\n  This chapter helps you understand how to build, test and preview your app in various built-in **environments** in Jenkins X\naliases:\n  - /docs/getting-started/build-test-preview/\n---\n\nJenkins X developer environments should be familiar to anyone who has\ndeveloped in a Git environment, with added features that further\nautomates development processes, builds, and promotion.\n\n## The traditional development environment\n\n\nA common workflow in a Git development involves:\n\n1. Forking - The developer creates a fork of the project repository into their personal repo.\n\n2. Branching - The developer creates a branch of their fork, for various reasons:\n\n  - Creating a new feature\n\n  - Fixing a bug\n\n  - Applying a security patch for a vulnerability\n\n3. Committing - The developer commits the code and pushes it to their branch, creating a `diff` file.\n\n4. Creating a pull request - The developer creates a pull request (PR) from their branch back to the main repository\n\n5. Testing - A developer peer or quality assurance (QA) team member looks at the code and/or builds a test version for validating the feature or fix, finding bugs and suggesting changes if necessary.\n\n6. Merging - The PR code, if accepted, is merged into the master or main project repo.\n\n## Jenkins X and the developer process\n\nDevelopment with Jenkins X is similar to the traditional Git development\nworkflow, with the added benefits of continuous development via automation within a Git context, also known as *GitOps*.\n\nJenkins X goes one step further by offering a *preview environment* that allows developer peers and QA testers to validate new features and fixes using an evaluation build of the functionality within the Git PR.\n\nPromotion is implemented with GitOps by generating a pull request on the Environment\u2019s git repository so that all changes go through git for audit, approval and so that any change is easy to revert.\n\nThe CD Pipelines of Jenkins X automate the promotion of version changes through each Environment which is configured with a promotion strategy. By default the Staging environment uses automatic promotion and the Production environment uses manual promotion.\n",
            "content/en/docs/build-test-preview/chatops.md": "---\ntitle: Using ChatOps and PR commands\nlinktitle: ChatOps and PRs\ndescription: Using ChatOps and managing pull requests with Jenkins X\nweight: 20\n---\n\n_ChatOps_ are operating codes and GitOps commands sent via chat.\nThese actions are performed via commenting on Pull Requests on your git providers website.\n\n## ChatOps Commands\n\n| ChatOps Command | GitLab Command | Description |\n|       :---      |       :---     |    :---     |\n| `/lgtm` | `/lh-lgtm` | This PR looks good to me - this command can be from anyone with access to the repo |\n| `/approve` | `/lh-approve` | This PR can be merged - must be someone in the repo `OWNERS` file |\n| `/test this` | `/test this` | Run the default test pipeline context for this PR |\n| `/test (context)` | `/test (context)` | Run a specific test pipeline context by name |\n| `/retest` | `/lh-retest` | Rerun any failed test pipeline contexts for this PR |\n| `/override (context)` | `/lh-override (context)` | Override a failed pipeline context |\n| `/hold` | `/lh-hold` | Set this PR to not automerge even if it has been set `lgtm` and approved |\n| `/hold cancel` | `/lh-hold cancel` | remove the `hold` label from the PR, allowing automerge |\n| `/assign (user)` | `/lh-assign (user)` | assign the PR to the given (`user`) |\n| `/unassign (user)` |  `/lh-unassign (user)` | remove the `user` as assignee |\n| `/cc (user)` |  `/lh-cc (user)` | add the given `user` as a reviewer for the PR |\n| `/uncc (user)` |  `/lh-uncc (user)` | remove the `user` as a reviewer |\n| `/ok-to-test` |  `/lh-ok-to-test` | If a `user` without write access to the repo opens a PR, the PR will not be built automatically. It receives the `needs-ok-to-test` label, until a user with rights enters `/ok-to-test`, at which point it gets be built |\n\n## Pull Requests\n\nThe pull request (PR) is the foundation of Jenkins X CI/CD pipeline execution. \nIn PRs, Jenkins X allows developers and reviewers to:\n\n* Verify changes\n* Review PR code changes and their effects\n* Approve or deny PRs or suggest changes\n* Approve PRs and trigger automatic merge and promotion\n* Manual promotion of PRs to production environments and software releases\n\nPull requests can be marked as work in progress, blocking automerging, either via making the PR a draft on GitHub, or by adding `WIP:`, `wip:`, `[wip]:`, or similar at the beginning of the PR title. \nThe PR will be moved out of work-in-progress when no longer in draft or when the `WIP` prefix in the PR title has been removed.\n\n### How Lighthouse merges a PR\n\nThere are some unique actions and behaviors when using lighthouse as the webhook handler for Jenkins X:\n\n* The PR must have its required test contexts pass (by default, just `pr-build`).\n* PRs must be set `/lgtm` and approved, or have the `updatebot` label on it.\n* The PR must not have any merge conflicts.\n* If multiple PRs are all in the merge pool at the same time, the lowest numbered PR will be merged first, then the next one will be rebuilt and then merged, etc.\n",
            "content/en/docs/build-test-preview/devpods.md": "---\ntitle: Developing Using DevPods\nlinktitle: DevPods\ndescription: Using Jenkins X to continuously deliver value to your customers\nweight: 50\naliases:\n    - /docs/resources/guides/using-jx/developing/devpods/\n---\n\nJenkins X allows you to edit app code by using a Kubernetes Pod which we call `DevPod`.  This helps you develop inside the cloud with the same software tools, platform, container images and pod templates as the CI/CD pipelines. This helps keep everyone in the team and your CI/CD pipelines using the same platform and tools all the time to reduce waste and avoid those pesky 'it works on my laptop but not in production' issues.\n\n\nThere are a couple of ways that you as a developer can quickly become productive when editing an app, and add value ultra fast.\n\nThere are specific steps for each approach, and we provide you a visual representation of each workflow, as well as the specific steps to quickly get started.\n\n{{< alert >}}\nKeep in mind, this development workflow helps you make changes before even checking in your code to the repo, or submitting a formal pull request.  Really meant for you to validate your changes fast!\n\n{{< /alert >}}\n\n## Develop Using DevPods and a desktop IDE\n\nIn this scenario, you are using a desktop IDE such as VS Code or Intellij.  You are making **iterative** changes using your IDE and said changes are reflected immediately when you open the `url` assigned to your `DevPod`\n\n<figure>\n<img src=\"/images/developing/developer_workflow_ide.png\" />\n<figcaption>\n<h5>Developer Workflow - Develop Using DevPods and an IDE</h5>\n</figcaption>\n\nTo get started using this approach, simply execute the following command in the root of your app directory.  We are using a `NodeJS` app for this example, therefore we specify the language using the `-l` parameter.\n\n```sh\njx create devpod -l nodejs --reuse --sync\n```\nA successful execution will ensures the following happened:\n\n- Output the `URLs` available to access the `Pod`\n- App folder will sync with the `Pod`\n- An ssh session is initiated to the `Pod`\n\nOnce this happens, you must execute one more command within your ssh session to the Pod to ensure any changes are synchronized.\n\n```sh\n./watch.sh\n```\n\n{{< alert >}}\n From this point forward, any changes you make **(step 1 in diagram)**, trigger a Docker Image build, and you should see the output of that build command in your terminal as it happens.\n{{< /alert >}}\n\nOnce you are happy with changes to your app, you go to **(step 2 in diagram)** and check-in your code, create a `Pull Request` at which point a `Jenkins X Pipeline` is triggered immediately to promote your changes to `Staging` enviornment.\n\n\n\n## Develop Using DevPods and a Web-based IDE\nIf you prefer not to use an IDE on your desktop using a similar workflow as above.  To edit the app code, you use the well known [Theia](https://www.theia-ide.org/) IDE.\n\n<figure>\n<img src=\"/images/developing/developer_workflow_theia.png\" />\n<figcaption>\n<h5>Developer Workflow - Develop Using DevPods and Web-based IDE Theia</h5>\n</figcaption>\n\nUsing this approach, you execute the following on your terminal.\n\n```sh\n\njx create devpod --verbose true\n\n# some output us removed for brevity\nCreating a DevPod of label: nodejs\nCreated pod me-nodejs - waiting for it to be ready...\nUsing helmBinary helm with feature flag: none\nUpdating Helm repository...\nHelm repository update done.\n...\nPod me-nodejs is now ready!\nYou can open other shells into this DevPod via jx create devpod\n\nYou can edit your app using Theia (a browser based IDE) at http://me-nodejs-theia.jx.yourdomain.com\n\nAttempting to install Bash Completion into DevPod\nRunning command: kubectl exec -it -n jx -c theia me-nodejs -- /bin/sh -c mkdir -p /workspace\ncd /workspace\n...\n[root@me-nodejs node-app]#\n```\n\n{{< alert >}}\n **NOTE**: We are not passing the `--sync` flag because we plan on using the web based IDE\n{{< /alert >}}\n\nA succesful execution of the command above, will ensure the following has happened:\n\n- DevPod is created, and exposed for you to access app via URL\n- Theia Docker container is running\n- App folder is mounted to Theia Docker container at `/workspace` folder.\n- You have a terminal session into the `DevPod`\n\nTo see your changes in real-time, you must also execute the following command within your terminal session connected to the Pod:\n\n```sh\n./watch.sh\n```\n\n### Promote to Staging\nOnce you are happy with the changes you made to the app, you can simply check-in your code and create a `pull request`.  This will trigger the pipeline to promote your changes to the `Staging` environment (**Step 2 and 3 in diagram**)\n\n### Promote to Production\nMost of the time,the Production environment in **Jenkins X** will have its `Promote` setting set to `MANUAL`.  Therefore, promoting your app can happen manually after stakeholders have reviewed the staging envionment, for example.\n\nTo promote the app to production, you can execute the following commands:\n\n1. first get the app version from this output\n\n```sh\njx get apps\n```\n\n2. promote app version 0.0.2 from staging to production\n\n```sh\njx promote --version 0.0.2 --env production\n```\n\n# Additional Learning\n",
            "content/en/docs/build-test-preview/jenkins-x-pipelines/_index.md": "---\ntitle: Jenkins X Pipelines\nlinktitle: Writing Pipelines\ndescription: cloud native serverless pipelines\ndate: 2019-03-04\npublishdate: 2019-03-04\nkeywords: [tekton]\naliases:\n  - /architecture/jenkins-x-pipelines\n  - /getting-started/next-gen-pipeline\n  - /about/concepts/jenkins-x-pipelines/\nweight: 10\n---\n\n In continuous delivery (CD) environments, a *pipeline* is a process (expressed\nas a collection of commands or plugins and a configuration file to express the\ndevelopment process) that automates the life cycle from repository source files\nto production deployment.\n\n**Jenkins X Pipelines** is a *serverless* pipeline execution engine\nbased on the [Tekton Pipelines](https://tekton.dev/) open source\nproject. Tekton has been designed to be a modern cloud native solution\nfor running pipelines.\n\nJenkins X pipelines are configured in YAML configuration files. The files can be\nfound in two locations serving distinct purposes:\n\n* In the Jenkins X project repository, called `jenkins-x.yml`.\n* In the build packs for creating applications, if it is specified in the project repository `pipeline.yaml` file under `buildPack`.\n\n## Pipeline types\n\nEach pipeline YAML file has a number of separate logical pipelines:\n\n* `release` for processing merges to the master branch which typically creates a new version and release then triggers promotion\n* `pullRequest` for processing Pull Requests\n* `feature` for processing merges to a feature branch. Consider using trunk based development which is a practice of high performing teams.\n\n## Lifecycles\n\nJenkins X has various steps in building, validating, and releasing your\napplication through the development lifecycle. The lifecycle phases in the\nJenkins X pipeline YAML configuration are:\n\n* `setup` - Steps to create the build environment, such as checking out code\n  with git checkout or generating credentials files for Git provider\n  authentication\n\n* `preBuild` - Steps to perform before a build occurs, such as ensuring a Docker\n  image registry is available for building\n\n* `build` - Steps performed to build your application\n\n* `postBuild` - Steps performed after the build occurs, such as validating for\n  Common Vulnerability Exposure (CVE) in any code changes.\n\n* `promote` - Shifting the state of an application (after build and validation)\n  to another environment, such as Staging or Production.\n\n## Understanding Jenkins X pipelines\nThe Jenkins X cluster configuration process creates a YAML-based pipeline\nconfiguration file called jenkins-x.yml. This file configures the default\ndevelopment pipeline for building applications on kubernetes clusters with\nJenkins X.\n\n```sh\nbuildPack: none\npipelineConfig:\n  pipelines:\n    release:\n      pipeline:\n        agent:\n          image: gcr.io/jenkinsxio/builder-go\n```\n\n`buildPack` specifies a build pack which contains a `pipeline.yml` file that\nsupersedes the `jenkins-x.yml` file in the project directory. If none is\nspecified, there is no build pack and Jenkins X uses the default pipeline\nconfiguration.\n\nThe configuration defines the pipeline agent, in this case a Google Container\nRegistry image for the Go language build tools.\n\n```sh\n        environment:\n          - name: DEPLOY_NAMESPACE\n            value: jx\n```\n\n`environment` specifies environment variables used in the pipeline\nconfiguration. In this instance, the `DEPLOY_NAMESPACE` variable is used with a\nvalue of `jx` for the Jenkins X namespace.\n\n```sh\n        stages:\n          - name: release\n            steps:\n              - name: verify-preintall\n                dir: /workspace/source/env\n                command: jx\n                args: ['step','verify','preinstall']\n```\n\n`stages` are unique groups of steps (or nested stages sequentially run within a\nstage) that specify commands, directories, and arguments for a particular\npipeline stage. In this instance, there is a step within the `release` stage\ncalled `verify-preinstall` that runs a `jx` command that verifies whether cloud\ninfrastructure (such as the presence of the `kubectl` binary and the correct\nversion of git is installed) was setup in the preinstallation process.\n\n```sh\n              - name: install-vault\n                dir: /workspace/source/systems/vault\n                command: jx\n                args: ['step', 'boot','vault']\n```\n\n`name` calls out a unique step in the pipeline configuration that defines\ndevelopment steps to verify and apply arguments to various commands necessary\nfor the stage under which it is nested. In this instance, `install-vault`\ninstalls the Hashicorp Vault tool for secrets management.\n\n```sh\n              - name: apply-repositories\n                dir: /workspace/source/repositories\n                command: jx\n                args: ['step','helm','apply', '--name', 'repos']\n```\n\nThis step creates and applies the Helm Package Manager for installation and\nmanagement of helm kubernetes applications.\n\n```sh\n              - name: apply-pipeline-schedulers\n                dir: /workspace/source/prowConfig\n                command: jx\n                args: ['step','scheduler','config', 'apply', '--direct=true']\n```\n\nThis step allows the pipeline to work with a scheduler, which executes program\njobs unattended in the background.\n\n```sh\n              - name: update-webhooks\n                dir: /workspace/source/repositories\n                command: jx\n                args: ['update','webhooks','--verbose', '--warn-on-fail']\n```\n\nThis step updates webhooks, which is a service that listens for GitHub activity\nand trigger jobs, send automated messages to chat clients such as Slack, and\nother configurable actions.\n\n```sh\n              - name: verify-install\n                dir: /workspace/source/env\n                command: jx\n                args: ['step','verify','install', '--pod-wait-time', '30m']\n```\n\nThis step verifies the project installation, downloading and installing or\nupdating components when necessary.\n\n```sh\n    pullRequest:\n      pipeline:\n        agent:\n          image: gcr.io/jenkinsxio/builder-go\n```\n\n`pullRequest` is a logical pipeline within the project pipeline that specifies how pull requests are managed when changes are made to the project repository in GitHub.\n\n```sh\n        stages:\n          - name: release\n            steps:\n              - name: helm-build\n                dir: /workspace/source/env\n                command: make\n                args: ['build']\n```\n\nThe `pullRequest` pipeline contains a stage wherein steps can also be executed. In this instance, make is run to create a helm chart and validate that a build has been completed.\n\n## Extending pipelines\n\nA pipeline YAML can extend another YAML file. You can reference a base pipeline\nYAML using the following methods:\n\n* Using file to reference a relative file path in the same build pack\n\n  ```sh\n  extends:\n    file: ../jenkins-x.yaml\n  ```  \n\n* Using import to reference a YAML file:\n  \n  ```sh\n  extends:\n    import: classic\n    file: maven/pipeline.yaml\n  ```\n\nwhich then refers to a named imported module via git:  \n\n  ```sh\n  modules:\n  - name: classic\n    gitUrl: https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes.git\n    gitRef: master\n  ```\n\n## Overriding steps\n\nUsers can override steps in a pipeline YAML from a base pipeline YAML, similar to overriding classes in languages like Java. This allows users reuse the steps in a base pipeline\u2019s lifecycle, then add additional steps.\n\nBy default any steps you define are added after the base pipeline YAML steps. For example:\n\n```sh\nextends:\n  file: base-pipeline.yaml\npipelines:\n  pullRequest:\n    build:\n      steps:\n      - sh: export VERSION=$PREVIEW_VERSION && skaffold build -f skaffold.yaml\n```\n\nYou can add steps before the base pipeline steps using the preSteps: property:\n\n```sh\nextends:\n  file: base-pipeline.yaml\npipelines:\n  release:\n    setup:\n      preSteps:\n      - sh: echo BEFORE BASE SETUP\n      steps:\n      - sh: echo AFTER BASE SETUP\n    build:\n      replace: true\n      steps:\n      - sh: mvn clean deploy -Pmyprofile\n        comment: this command is overridden from the base pipeline\n```\n\nIf you want to completely replace all the steps from a base pipeline for a\nparticular lifecycle you can use replace: true:\n\n```sh\n  replace: true\n  steps:\n  - sh: mvn clean deploy -Pmyprofile\n    comment: this command is overridden from the base pipeline\n```\n\n<!--\n## Trying Jenkins X Pipelines\n\nCreate a new cluster installed with Jenkins X Pipelines using `jx` and the following flags:\n\n```sh\njx create cluster gke --tekton\n```\n\nOr if you want to go all in on the next generation of Jenkins X with built-in GitOps for your development environment, using Tekton and using Vault for storage of secrets then use the following (only works on GCP and AWS right now):\n\n```sh\njx create cluster gke --ng\n```\n\nThe general developer experience, CLI and IDE plugins should work as before - but using [Tekton Pipelines](https://tekton.dev/) Custom Resources under the covers instead of creating a Jenkins Server per team!\n\n## Using a quickstart\n\nOnce your cluster is started you can create a new quickstart.\n\n```sh\njx create quickstart\n```\n\nA `prowjob` is created, a new prow pipeline controller watches for these jobs and when it receives an event it will check if it has a `pipelinerun` spec present, if not it will post the `prowjob` to a new `pipelinerunner` service from Jenkins X which in turn clones the repo and revision then translates its `jenkins-x.yml` into vanilla Tekton Pipeline resources.  Once they are created the `tekton-pipeline-controller` executes the builds.\n\n## Differences to Jenkins Pipelines\n\nJenkins X Pipelines use a new `jenkins-x.yml` file which is YAML instead of the Groovy `Jenkinsfile` used by Jenkins.\n\nHowever it's still reusing the same reusable and composable build packs under the covers. (The Jenkins X [build packs](/docs/create-project/build-packs/) are actually written in Jenkins X Pipelines YAML).\n\nOne thing you will notice is that with Jenkins X Pipelines we don't need to copy/paste a large `Jenkinsfile` into each application's git repository; usually the generated `jenkins-x.yml` file is small, like this:\n\n```yaml\nbuildPack: maven\n```\n\nThat's it! What that basically means is at runtime the Jenkins X Pipeline will use the [build packs](/docs/create-project/build-packs/) to generate the actual Tekton Pipeline.\n\n## Customizing the Pipelines\n\nHaving automated [build packs](/docs/create-project/build-packs/) to do all of your CI+CD is pretty awesome - as most of the time your microservices will all be compiled, tested, packaged, released and promoted in the same way. CI+CD is often undifferentiated heavy lifting we should just automate!\n\nHowever there are times you want to customize a [particular pipeline](/docs/create-project/build-packs/#pipelines) (release, pull request, feature etc) and a particular [life cycle](/docs/first-projects/build-packs/#life-cycles) to change the actual steps invoked.\n\nYou can read more about the [extension model](/docs/create-project/build-packs/#pipeline-extension-model) to find out all you can do. Basically you can add steps before/after any life cycle or completely replace a set of life cycles or even opt out of the build pack completely and inline your pipelines inside your `jenkins-x.yml`\n\nFor a quick way to add a new step into a pipeline life cycle you can use the [jx create step](/commands/deprecation/) command:\n\n<figure>\n<img src=\"/images/architecture/create-step.gif\" />\n<figcaption>\n<h5>Create a new Jenkins X Pipeline Step via the CLI</h5>\n</figcaption>\n</figure>\n\nYou can also add or override an environment variable in your pipeline via the [jx create variable](/commands/jx_create_variable/) command\n\n## Editing in VS Code\n\nIf you are using [VS Code](https://code.visualstudio.com/) we recommend you install the [YAML Language Extension](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml) from Red Hat.\n\nThis extension lets you edit YAML files with optional JSON Schema validation.\n\nJenkins X's JSON Schema is already registered with [schemastore.org](http://schemastore.org/json/) so editing your `jenkins-x.yml` file in VS Code will include smart completion and validation!\n\n<figure>\n<embed src=\"/images/architecture/yaml-edit.mp4\" autostart=\"false\" height=\"400\" width=\"600\" />\n<figcaption>\n<h5>Edit Jenkins X Pipeline in VS Code</h5>\n</figcaption>\n</figure>\n\nWe'd love to improve this UX if you fancy [helping out](/docs/contributing).\n\n## Editing in IDEA\n\nThis should already be included out of the box due to the Jenkins X JSON Schema being registered with [schemastore.org](http://schemastore.org/json/) so editing your `jenkins-x.yml` file in IDEA will include smart completion and validation!\n\nWe'd love to improve this UX if you fancy [helping out](/docs/contributing/).\n-->\n",
            "content/en/docs/build-test-preview/preview.md": "---\ntitle: Preview Environments\nlinktitle: Preview Environments\ndescription: Preview pull requests before changes merge to master\nweight: 30\n---\n\nWe highly recommend the use of [Preview Environments](/about/concepts/features/#preview-environments) to get early feedback on changes to applications before the changes are merged into master.\n\nTypically the creation of preview environments is automated inside the Pipelines created by Jenkins X.\n\n### Generating a preview environment\n\nIn a typical Jenkins X development scenario, users make changes to an\napplication that has been imported or created via one of the various\nsupported methods, such as\n[Quickstarts](/docs/getting-started/first-project/create-quickstart/), [imported projects](/docs/resources/guides/using-jx/creating/import/), and [Spring\nBoot](/docs/resources/guides/using-jx/creating/create-spring/) applications.\n\nWhen the developer makes the change to their branch, with the ultimate\ngoal of merging those branch changes into the `master` branch for\ndeployment to production, they save their changes from within their\nintegrated development environment (IDE) and commit it to the source\nrepository, such as GitHub. The process to generate a preview\nenvironment is typically like committing code in a traditional\ndevelopment environment:\n\n1. A developer makes a branch to their local cloned source repository to create a new feature:\n\n```sh\ngit checkout -b acme-feature1\n```\n\n2.  The developer makes changes to the source code in their branch and adds the affected files to the commit queue:\n\n```sh\ngit add index.html server.js\n```\n\n\n3. The developer commits the files adding a comment about what has changed:\n\n```sh\n    git commit -m \"nifty new image added to the index file\"\n```\n\n4. The developer runs `git push` to send the code back to the remote  repository and create a pull request:\n\n```sh\n    git push origin acme-feature1\n```\n5. The program displays a link to a pull request. The developer can highlight the URL, right-click and choose *Open URL* to see the GitHub page in their browser.\n\n6. Jenkins X creates a preview environment in the PR for the application changes and displays a link to evaluate the new feature:\n<div class=\"row\">\n  <div class=\"col col-lg-9\">\n    <img src=\"/images/pr-comment.png\"/>\n  </div>\n</div>\nThe preview environment is created whenever a pull request to master is created in the\nrepository, allowing any relevant user to validate or evaluate features,\nbugfixes, or security hotfix. Then, as additional commits are added to the PR branch\nthe preview environment is automatically updated.\n\n### Testing the preview environment\n\nThe development bot created during the installation process sends a notification email to the developer as well as the designated repository approver that a PR is ready for review. During the approval process, the approver can click on the preview application with the code changes for testing and validation.\n\nWhen the approver confirms the code and functionality changes, they can\napprove with a simple comment that merges the code changes back to\nthe master branch and initiate a release candidate build with the new feature:\n\n```sh\n    /approve\n```\n\nThe code is merged to the `master` branch, and the release is pushed to\nstaging/production or a release created and available from the GitHub\nstaging environment in the `Releases` tab.\n\n### Manually creating a preview\n\nYou can manually create a [Preview Environment](/about/concepts/features/#preview-environments) using [jx](/commands/jx/) via the [jx preview](/commands/jx_preview/) command.\n\n```sh\njx preview\n```\n\n## What happens when a Preview environment is created\n\n* a new [Environment](/about/concepts/features/#environments) of kind `Preview` is created along with a [kubernetes namespace](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) which shows up in the [jx get environments](/commands/jx_get_environments/) command along with the [jx environment and jx namespace commands](/developing/kube-context/) so you can see which preview environments are active and switch into them to look around\n* the Pull Request is built as a preview docker image and chart and deployed into the preview environment\n* a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview!\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\n\n## Adding more resources\n\nIts common when creating, for example, a web front end to need a backend or database to work from to verify that the microservice works.\n\nFor each application the preview environment is defined by a helm chart at: `charts/preview/Chart.yaml`.\n\n## Charts\n\nSo you can easily add any dependent helm charts to your preview environment by adding new entries in the file `charts/preview/requirements.yaml`.\n\nYou can find possible charts to install by searching helm. e.g. to find a `postgresql` chart try:\n\n```\nhelm search postgres\n```\n\nOnce you know the chart and the repository its in you can add it to your `charts/preview/requirements.yaml` file (the `postgresql` section in dependencies array):\n\n```yaml\n# !! File must end with empty line !!\ndependencies:\n- alias: expose\n  name: exposecontroller\n  repository: http://chartmuseum.jenkins-x.io\n  version: 2.3.56\n- alias: cleanup\n  name: exposecontroller\n  repository: http://chartmuseum.jenkins-x.io\n  version: 2.3.56\n\n  # Ephemeral PostgeSQL created in preview environment.\n- name: postgresql\n  repository: https://kubernetes-charts.storage.googleapis.com\n  version: 2.6.2\n\n  # !! \"alias: preview\" must be last entry in dependencies array !!\n  # !! Place custom dependencies above !!\n- alias: preview\n  name: demo179\n  repository: file://../demo179\n\n```\nNote: `- alias: preview` must be last entry in dependecies array and `requirements.yaml` file must end with empty line.\n\n## Service Linking\n\nIf you need any additional resources like `ConfigMap`, `Secret` or `Service` resources you can add them to `charts/preview/templates/*.yaml`.\n\nYou can always _service link_ from the Preview Environment namespace to other namespaces by creating a `Service` with an `externalName` which links to a `Service` running in another namespace (such as Staging or Production) or to point to a service running outside of the Kubernetes cluster completely.\n\nWe have a command [jx step service link](/commands/jx_step_link/) which does this for you:\n\n```\njx step link services --from-namespace jx-staging --includes \"*\" --excludes \"cheese*\"\n ```\n\n### Configuration\n\nIf you need to tweak your application when running in a Preview Environment you can add custom settings to the `charts/preview/values.yaml`file\n\n## Post preview jobs\n\nOne of the extension points of Jenkins X lets you put a hook in after a preview job has been deployed. This hook applies to all apps in a team even existing ones, for all new pull requests/changes. (You don't have to add it to each pipeline by hand - it can be used to enforce best practices).\n\nThis means you can run a container Job against the preview app, validating it, before the CI pipeline completes. Should this Job fail, the pull request will be marked as a failure.\n\nHere is an example:\n\n```\njx create post preview job --name owasp --image owasp/zap2docker-weekly:latest -c \"zap-baseline.py\" -c \"-I\" -c \"-t\" -c \"\\$(JX_PREVIEW_URL)\"\n```\n\nThis creates a post preview job which runs the `zap-baseline.py` command inside the specified docker image (it will pull the image and run it, and then shut it down) which scans the running preview app for any problems.\n\nThe `$JX_PREVIEW_URL` environment variable is made available in case the job needs to access the running preview app. Use `-c` to pass commands to the container.\n\nThis job runs after the preview has been deployed. If it returns non zero, the PR will be marked as a failure.\n\nYou can also run:\n\n```\njx get post preview\n```\n\nto list any configured post preview jobs, and:\n\n```\njx delete post preview job --name=NAME_HERE\n```\n\nAnd it will remove that post preview job (for the whole team).\n\n\n## Further reading\n\nTo get more detail on using preview environments check out [this blog post](https://medium.com/@MichalFoksa/jenkins-x-preview-environment-3bf2424a05e4)\n",
            "content/en/docs/build-test-preview/promotion/_index.md": "---\ntitle: Promotion and Environments\nlinktitle: Promotion and Environments\ndescription: Promote new versions of your application to environments\nweight: 40\naliases:\n  - /developing/promote/\n  - /about/features/#promotion\n  - /about/features\n  - /docs/getting-started/promotion/\n---\n\nThe CD Pipelines of Jenkins X automate the [promotion](/about/concepts/features/#promotion) of version changes through each [Environment](/about/concepts/features/#environments) which is configured with a _promotion strategy_ property of `Auto`. By default the `Staging` environment uses automatic promotion and the `Production` environment uses `Manual` promotion.\n\nTo manually Promote a version of your application to an environment use the [jx promote](/commands/jx_promote/) command.\n\n```sh\njx promote --app myapp --version 1.2.3 --env production\n```\n\nThe command waits for the promotion to complete, logging details of its progress. You can specify the timeout to wait for the promotion to complete via the `--timeout` argument.\n\ne.g. to wait for 5 hours\n\n\n```sh\njx promote  --app myapp --version 1.2.3 --env production --timeout 5h\n```\n\nYou can use terms like `20m` or `10h30m` for the various duration expressions.\n\n<div class=\"row\">\n  <div class=\"col col-lg-9\">\n    <img src=\"/images/overview.png\" class=\"img-thumbnail\">\n  </div>\n</div>\n\n\n\n## Feedback\n\nIf the commit comments reference issues (e.g. via the text `fixes #123`) then Jenkins X pipelines will generate release notes like those of [the jx releases](https://github.com/jenkins-x/jx/releases).\n\nAlso as the version with those new commits is promoted to `Staging` or `Production` you will get automated comments on each fixed issue that the issue is now available for review in the corresponding environment along with a link to the release notes and a link to the app running in that environment. e.g.\n\n<div class=\"row\">\n  <div class=\"col col-lg-9\">\n    <img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n  </div>\n</div>\n\n\n\n## Promoting external apps\n\nThere may be apps that have already been released by other teams or companies who maybe don't yet use Jenkins X and the applications are not already in your helm chart repository.\n\nIf you wish to search your helm repositories for an application to promote you can use the `-f` for filter option to find a chart to promote.\n\ne.g. to find a `redis` chart to promote to staging you could do:\n\n```sh\njx promote -f redis --env staging\n```\n\nFor databases you may want to alias (via `--alias`) the name of the chart to be a logical name for the kind of database you need. As you may need multiple databases in the same environment for different microservices. e.g.\n\n```sh\njx promote -f postgres --alias salesdb --env staging\n```\n\nIf you cannot find the particular application you are looking for you may need to add a helm chart repository to your helm installation via:\n\n```sh\nhelm repo add myrepo https://something.acme.com/charts/\n```\n\nfor example to add the stable community charts:\n\n```sh\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\n\"stable\" has been added to your repositories\n```\n\nto add the incubator community charts:\n\n```sh\nhelm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/\n\"incubator\" has been added to your repositories\n```\n\nThere are huge numbers of [charts already created and maintained by the community](https://github.com/helm/charts/tree/master/stable) these days. If you want to add your own apps developed outside of Jenkins X you just need to package the YAML as a helm chart and install it in a chart repository.\n\n\n\n\n\n",
            "content/en/docs/create-project/_index.md": "---\ntitle: \"Creating projects\"\ndate: 2017-01-05\nweight: 30\ndescription: >\n  Now that you've setup the platform, let's create your first project.\naliases:\n  - /docs/getting-started/first-project/\n---\n",
            "content/en/docs/create-project/build-packs.md": "---\ntitle: Build Packs\nlinktitle: Build Packs\ndescription: Turning source code into applications on kubernetes\nweight: 10\naliases:\n  - /architecture/build-packs\n  - /docs/resources/guides/managing-jx/common-tasks/build-packs\n  - /docs/create-project/build-packs/\n  - /docs/reference/components/build-packs\n---\n\nWe use [draft](https://draft.sh/) style _build packs_ for different languages, runtimes and build tools to add the necessary configuration files to projects as we [import them](/docs/resources/guides/using-jx/creating/import/) or [create](/docs/resources/guides/using-jx/common-tasks/create-spring/) [them](/docs/getting-started/first-project/create-quickstart/) so that we can build and deploy them in kubernetes.\n\nThe build packs are used to default the following files if they do not already exist in the project being created/imported:\n\n* `Dockerfile` to turn the code into an immutable docker image for running on kubernetes\n* `Jenkinsfile` to define the declarative Jenkins pipeline to define the CI/CD steps for the application\n* helm chart in the `charts` folder to generate the kubernetes resources to run the application on kubernetes\n* a _preview chart_ in the `charts/preview` folder to define any dependencies for deploying a [preview environment](/about/concepts/features/#preview-environments) on a Pull Request\n\nThe default build packs are at [https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) with a folder for each language or build tool.\n\nThe `jx` command line clones the build packs to your `.~/.jx/draft/packs/` folder and updates them via a `git pull` each time you try create or import a project.\n\n## Pipeline extension model\n\nWe have refactored our [build packs](https://github.com/jenkins-x-buildpacks/) so that they are more modular and easier to compose and reuse across workloads.\n\nFor example the [jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) build pack inherits from the [jenkins-x-classic](https://github.com/jenkins-x-buildpacks/jenkins-x-classic) build pack, reusing the CI and release pipelines but then adding the kubernetes specific workloads (e.g. building docker images, creating helm charts, [Preview Environments](/about/concepts/features/#preview-environments) and [Promotion via GitOps](/about/concepts/features/#promotion))\n\nTo do this we've introduced a simple new YAML file format for defining pipelines.\n\n\n## Pipelines\n\nEach Pipeline YAML file has a number of separate logical pipelines:\n\n* `release` for processing merges to the `master` branch which typically creates a new version and release then triggers promotion\n* `pullRequest` for processing Pull Requests\n* `feature` for processing merges to a feature branch. Though note that the [accelerate book](/about/accelerate/) recommends against long term feature branches. Instead consider using trunk based development which is a practice of high performing teams.\n\n## Life Cycles\n\nThen each pipeline has a number of distinct life cycle phases - rather like maven has `clean`, `compile`, `compile-test`, `package` etc.\n\nThe life cycle phases in Jenkins X Pipeline YAML are:\n\n* `setup`\n* `preBuild`\n* `build`\n* `postBuild`\n* `promote`\n\n## Extending\n\nA Pipeline YAML can extend another YAML file. You can reference a base pipeline YAML via:\n\n* using `file` to reference a relative file path in the same build pack [like this example using file](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2)\n* using `import` to reference a YAML file which is imported like [this example using import](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3) which then refers to a [named imported module via git](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/imports.yaml#L2-L4)\n\n## Overriding steps\n\nRather like classes in languages like Java you can override steps in a Pipeline YAML from a base Pipeline YAML. This lets you reuse the steps in a base pipeline's life cycle then add your own additional steps.\n\nBy default any steps you define are added after the base pipeline YAML steps like in [this example](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence/pipeline.yaml#L7).\n\nYou can add steps before the base pipeline steps using the `preSteps: ` property like [this example](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L6)\n\nIf you want to completely replace all the steps from a base pipeline for a particular life cycle you can use `replace: true` like in [this example](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L11-L14)\n\n## Example Pipeline\n\nFor example for [maven libraries we use this pipeline.yaml file](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml) which:\n\n* [extends](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2) the [common pipeline](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/pipeline.yaml) that sets up git and defines common post build steps\n* [configures the agent](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L3-L5) in terms of [pod template](/docs/resources/guides/managing-jx/common-tasks/pod-templates/) and container name\n* defines the steps for the `pull request` pipeline [build steps](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L7-L11)\n* defines the `release` pipeline [set version steps](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L13-L18) and [build steps](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L19-L21)\n\nThen the [maven kubernetes pipeline.yaml](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml) then [extends](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3) from the classic pipeline to add the kubernetes steps\n\n## Creating new build packs\n\nWe love [contributions](/community/) so please consider adding new build packs and [pod templates](/docs/resources/guides/managing-jx/common-tasks/pod-templates/).\n\nHere are instructions on how to create a new build pack - please if anything is not clear come [join the community and just ask](/community/) we are happy to help!\n\nThe best place to start with is a _quickstart_ application. A sample project that you can use as a test. So create/find a suitable example project and then [import it](/docs/resources/guides/using-jx/creating/import/).\n\nThen manually add a `Dockerfile` and `Jenkinsfile` if one is not already added for you. You could start with files from the [current build pack folders](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs) - using the most similar language/framework to yours.\n\nIf your build pack is using build tools which are not yet available in one of the existing [pod templates](/docs/reference/components/pod-templates/) then you will need to [submit a new pod template](/docs/reference/components/pod-templates/) probably using a new build container image too.\n\nOnce you have a pod template to use, say, `jenkins-foo` then refer to it in your `Jenkinsfile`:\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-foo\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('foo') {\n            sh \"foo deploy\"\n          }\n```\n\nOnce your `Jenkinsfile` is capable of doing CI/CD for your language/runtime on your sample project then we should be able to take the `Dockerfile`, `Jenkinsfile` and charts folder and copy them into a folder in your fork of the [jenkins-x/draft-packs repository](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes).\n\nYou can try that out locally by adding these files to your local clone of the build packs repository at ` ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs`\n\ne.g.\n\n```sh\nexport PACK=\"foo\"\nmkdir ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\ncp Dockerfile Jenkinsfile  ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\n\n# the charts will be in some folder charts/somefoo\ncp -r charts/somefoo ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK/charts\n```\n\nOnce your build pack is in a folder at `~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/`\nthen it should be usable by the [jx import](/commands/jx_import/) code\nwhich uses programming language detection to find the most suitable build pack to use when importing a project.\nIf your build pack requires custom logic to detect it then let us know\nand we can help patch [jx import](/commands/jx_import/) to work better for your build pack.\nFor example, we have some custom logic for handling [Maven and Gradle better](https://github.com/jenkins-x/jx/blob/712d9edf5e55aafaadfb3e0ac57692bb44634b1c/pkg/jx/cmd/common_buildpacks.go#L82:L108).\n\n## Using custom build packs\n\nSometimes you may want to specify a custom buildpack to use when setting up your\napplications. There are two distinct ways to create/setup clusters with\nJenkins-x and the approach you take will determine how you specify a custom\nbuildpack.\n\nIf a cluster was setup using the jx install method then we have this\n[command](/commands/jx_edit_buildpack) that allows users to edit which buildpack\nto use, to build applications.\n\nHowever if a cluster is being setup with `jx boot`, then users have to edit\ntheir `jx-requirements.yml` file. You have to add the following fields to the\njx-requirements.yml file before running boot pipeline again. All the fields have\nto be added together otherwise jx won't be able to figure out where to get the\nbuildpack from.\n\n```yaml\nbuildPacks:\n  buildPackLibrary:\n    name: \"Test name\"\n    gitURL: \"github.com/jx-user/test-repo\"\n    gitRef: \"master\"\n```\n\nIf you need any more help [join the community](/community/)\n",
            "content/en/docs/create-project/creating/_index.md": "---\ntitle: Creating with Quickstarts or importing\nlinkTitle: \"Creating Quickstarts\"\nweight: 20\ndescription: >\n  How to create a new quickstart application and import it into Jenkins X\naliases:\n  - /docs/resources/guides/using-jx/creating/\n  - /docs/getting-started/first-project/create-quickstart/\n  - /developing/create-quickstart/\n---\n\nQuickstarts are pre-made applications you can start a project from, instead of\nstarting from scratch.\n\nYou can create new applications from our list of curated Quickstart applications\nvia the [jx create quickstart](/commands/jx_create_quickstart/) command.\n\n\n```sh\njx create quickstart\n```\n\nYou are then prompted for a list of quickstarts to choose from.\n\nIf you know the language you wish to use you can filter the list of quickstarts\nshown via:\n\n```sh\njx create quickstart -l go\n```\n\nOr use a text filter to filter on the project names:\n\n```sh\njx create quickstart -f http\n```\n\n### What happens when you create a quickstart\n\nOnce you have chosen the project to create and given it a name the following is\nautomated for you:\n\n* creates a new application from the quickstart in a sub directory\n* add your source code into a git repository\n* create a remote git repository on a git service, such as [GitHub](https://github.com)\n* push your code to the remote git service\n* adds default files:\n  * `Dockerfile` to build your application as a docker image\n  * `Jenkinsfile` to implement the CI / CD pipeline\n  * Helm chart to run your application inside Kubernetes\n* if you are using Jenkins X Pipelines and tekton then:\n  * a webhook is registered on the remote git repository which triggers prow/lighthouse to trigger a tekton pipeline\n  * add the repository to the prow configuration\n* if you are using a Jenkins Server then:  \n  * a webhook is registered on the remote git repository which triggers a pipeline in Jenkins\n  * create a multi-branch project in your Jenkins server\n* trigger the first pipeline\n\n### How do quickstarts work?\n\nThe source of these Quickstarts are maintained in [the jenkins-quickstarts\nGitHub organization](https://github.com/jenkins-x-quickstarts).\n\nWhen you create a quickstart we use the [Jenkins X build\npacks](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) to match\nthe right pack for the project using the source code language kinds to pick the\nmost suitable match.\n\nWhen you use [jx create](/docs/getting-started/setup/create-cluster/), [jx\ninstall](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) or [jx\ninit](/commands/deprecation/) the [Jenkins X build\npacks](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) are cloned\ninto your `~/.jx/draft/packs` folder.\n\nDepending on your JenkinsX installation type (Serverless Jenkins vs. Static\nMaster Jenkin), you can view all the languages supported via build packs on your\nmachine via:\n\n*Serverless Jenkins*:\n```sh\nls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/packs\n```\n\n*Static Master Jenkins*:\n```sh\nls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-classic/packs\n```\n\nThen when you create a quickstart, use [jx create\nspring](/docs/resources/guides/using-jx/common-tasks/create-spring/) or [jx\nimport](/docs/resources/guides/using-jx/creating/import/) the [Jenkins X build\npacks](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) are used\nto:\n\n* find the right language pack. e.g. here are the current [list of language packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs).\n* the language pack is then used to default these files if they don't already exist:\n  * `Dockerfile` to package the application as a docker image\n  * `Jenkinsfile` to implement the CI / CD pipelines using declarative pipeline as code\n  * Helm Charts to deploy the application on Kubernetes and to implement [Preview Environments](/about/concepts/features/#preview-environments)\n\n## Adding your own Quickstarts\n\nIf you would like to submit a new Quickstart to Jenkins X please just [raise an\nissue](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:)\nwith the URL in GitHub of your quickstart and we can fork it it into the\n[quickstart organisation](https://github.com/jenkins-x-quickstarts) so it\nappears in the `jx create quickstart` menu.\n\nOr if you are part of an open source project and wish to curate your own set of\nquickstarts for your project; you can [raise an\nissue](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:)\ngiving us details of the github organisation where the quickstarts live and\nwe'll add that in as a default organisation to include in the [jx create\nquickstart](/commands/jx_create_quickstart/) command. Its easier for the [jx\ncreate quickstart](/commands/jx_create_quickstart/) if you maintain the\nquickstarts in a separate quickstart organisation on github.\n\nUntil we do that you can still use your own Quickstarts in the `jx create\nquickstart` command via the `-g` or `--organisations` command line argument.\nFor example:\n\n```sh\njx create quickstart  -l go --organisations my-github-org\n```\n\nThen all quickstarts found in `my-github-org` will be listed in addition to the\nJenkins X quickstarts.\n\n## Customising your team's quickstarts\n\nYou can configure at a team level the quickstarts which are presented to you in\nthe `jx create quickstart` command. These settings are stored in the\n[Environment Custom Resource](/docs/reference/components/custom-resources/) in\nKubernetes.\n\nTo add the location of a set of quickstarts you can use the [jx create\nquickstartlocation](/commands/jx_create_quickstartlocation/) command.\n\n\n```sh\njx create quickstartlocation --url https://mygit.server.com --owner my-quickstarts\n```\n\nIf you omit the `--url` argument the command will assume its a\n[GitHub](https://github.com/) repository. Note that both public and private\nrepositories are supported.\n\nThis means you can have your own shared private quickstarts to reuse within your\norganisation. Of course we'd obviously prefer you to [share your quickstarts\nwith us via open\nsource](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:)\nthen we can include your quickstart with the entire [community](/community/) -\nbut there may be times you want to curate your own internal quickstarts using\nproprietary software.\n\nYou can also specify `--includes` or `--excludes` patterns to filter the names\nof the repositories where `*` matches anything and `foo*` matches anything\nstarting with `foo`. e.g. you could just include the languages and technologies\nyour organisation supports and exclude the rest etc.\n\nAlso note that you can use the alias of `qsloc` instead of `quickstartlocation`\nif you like shorter aliases ;)\n\nYou can then view the current quickstart locations for your team via the [jx get\nquickstartlocations](/commands/jx_get_quickstartlocation/) command:\n\n```sh\njx get quickstartlocations\n```\n\nOr using an abbreviation\n\n```sh\njx get qsloc\n```\n\nThere is also [jx delete\nquickstartlocation](/commands/jx_delete_quickstartlocation/) if you need to\nremove a git organisation.\n\n",
            "content/en/docs/create-project/creating/create-mlquickstart.md": "---\ntitle: \"Create MLquickstart\"\nlinktitle: Create MLquickstart\ndescription: How to create a new machine-learning quickstart application and import it into Jenkins X\nweight: 30\naliases:\n  - /docs/resources/guides/using-jx/creating/create-mlquickstart/\n---\n\nMachine learning quickstarts are pre-made machine-learning applications you can leverage to start your own projects.\n\nYou can create new applications from our list of curated machine learning quickstart applications via the [jx create mlquickstart](/commands/jx_create_mlquickstart/) command.\n\n\n```sh\njx create mlquickstart\n```\n\nYou are then prompted for a list of quickstarts to choose from.\n\nYou will see that these come in groups of three:\n\n```sh\n? select the quickstart you wish to create  [Use arrows to move, space to select, type to filter]\n> machine-learning-quickstarts/ML-python-pytorch-cpu\n  machine-learning-quickstarts/ML-python-pytorch-cpu-service\n  machine-learning-quickstarts/ML-python-pytorch-cpu-training\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training\n```\n\nEach machine learning quickstart consists of two projects, a training project which manages the training script for your model and a service project that allows you to wrap your trained model instances with service APIs ready for integration into your application.\n\nIf you want to create just the `-service` or `-training` project on its own, you can do so by selecting the option with the matching name suffix.\n\nMost of the time, however, what you want to do is to select the *project set*, which is the first option with the same prefix name and no suffix. That will create a matched pair of projects that are linked. For example, if you call your project repository `my-first-ml-project` and select the `ML-python-pytorch-cpu` project set, you will create two independent projects in the current folder, `my-first-ml-project-training` and `my-first-ml-project-service`.\n\nIf you create these individually, it is important that your projects share the same root name and that they end with the suffixes `-training` and `-service` so that they can automatically integrate during the build process.\n\nYou can use a text filter to filter on the project names:\n\n```sh\njx create mlquickstart -f gpu\n```\n\n### What happens when you create a quickstart\n\nOnce you have chosen the project to create and given it a name the following is automated for you:\n\n* creates a pair of new projects from the quickstart in sub directories\n* adds the source code for both into a pair of git repositories\n* creates matching remote git repositories on a git service, such as [GitHub](https://github.com)\n* pushes your code to the remote git service\n* adds default files:\n  * `Dockerfile` to build your -service application as a docker image\n  * `jenkins-x.yml` to implement the CI / CD pipelines for training and service builds\n  * Helm charts to run your applications inside Kubernetes\n* registers webhooks on the remote git repositories to your teams Jenkins X server\n* triggers the pipelines to train and deploy your service\n\nOnce you create a machine learning quickstart, both the training and service projects will build simultaneously. The service project will deploy but first time around, it will fail to start, because it doesn't yet have a trained model to work with.\n\nMeanwhile the training project will start work on training the model and once trained, will run some acceptance tests to verify that the trained model instance is sufficiently accurate to be worth promoting for further testing. If the model has not learned well enough, the training build will fail at this point.\n\nYou can restart training with the command:\n\n```sh\njx start pipeline\n```\nand then select the name of the training project you wish to run again, or you may edit your training script, commit your changes and push them to automatically trigger another training run.\n\nOnce training has completed successfully, the version of your model that has just been trained and the metrics associated with this run will be passed to your `-service` project using a pull request. You now need to review the `-service` project repository and check the training metrics for suitability. The `-service` project will automatically rebuild using the newly trained model instance and deploy into a preview environment where you can test it using its API.\n\nIf all QA checks pass you may then sign-off the release in the same way you would do for any other build within Jenkins X (have approvers and reviewers issue /approve and /lgtm comments in the pull request thread).\n\nOnce signed off, the trained model instance is merged into the master branch of your -service project, rebuilt and deployed into staging for further testing and integration.\n\nEach time you restart the traing project, you will get a new model instance that you can chose to promote in the same way. All models are versioned via Git, so you can keep track of each instance and its metrics.\n\n### How do quickstarts work?\n\nThe source of these Quickstarts are maintained in [the machine-learning-quickstarts GitHub organisation](https://github.com/machine-learning-quickstarts).\n\nAs with conventional Jenkins X quickstarts, we use the [Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) to match the right pack for the project using the source code language and machine learning framework kinds to pick the most suitable match.\n\nWhen you use [jx create](/docs/getting-started/setup/create-cluster/), [jx install](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) or [jx init](/commands/deprecation/) the [Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) are cloned into your `~/.jx/draft/packs` folder.\n\nThen when you create a machine learning quickstart, the [Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) are used to:\n\n* find the right language pack. e.g. here are the current [list of language packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs).\n* the language pack is then used to default these files if they don't already exist:\n  * `Dockerfile` to package the application as a docker image\n  * `jenkins-x.yml` to implement the CI / CD pipelines using declarative pipeline as code\n  * Helm Charts to deploy the application on Kubernetes and to implement [Preview Environments](/about/concepts/features/#preview-environments)\n\n## Adding your own Quickstarts\n\nIf you would like to submit a new Quickstart to Jenkins X please just [raise an issue](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:) with the URL in GitHub of your quickstart and we can fork it it into the [quickstart organisation](https://github.com/machine-learning-quickstarts) so it appears in the `jx create mlquickstart` menu.\n\nOr if you are part of an open source project and wish to curate your own set of quickstarts for your project; you can [raise an issue](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:) giving us details of the github organisation where the quickstarts live and we'll add that in as a default organisation to include in the [jx create mlquickstart](/commands/jx_create_mlquickstart/) command. Its easier for the [jx create mlquickstart](/commands/jx_create_mlquickstart/) if you maintain the quickstarts in a separate quickstart organisation on github.\n\nUntil we do that you can still use your own Quickstarts in the `jx create mlquickstart` command via the `-g` or `--organisations` command line argument. e.g.\n\n```sh\njx create mlquickstart  --organisations my-github-org\n```\n\nThen all machine learning quickstarts found in `my-github-org` will be listed in addition to the defaults.\n\nNote there are some standards for creating machine learning quickstarts:\n\n* All quickstart names must start with the letters `ML-` to distinguish it from a conventional quickstart\n* Training projects must be suffixed `-training`\n* Service projects must be suffixed `-service`\n* All components of a project set must share the same root prefix to their name\n\nTo create a machine learning project set, create a new repository in your quickstart organisation such that the name is the shared prefix for your quickstart, for example: `machine-learning-quickstarts/ML-python-pytorch-cpu`\n\nTry to pick explanatory names so that it is clear what language, frameworks and hardware are associated with this project set.\n\nInside your project set repository, create a single file named `projectset` which has the following format:\n\n```yaml\n[\n   {\n      \"Repo\":\"ML-python-pytorch-cpu-service\",\n      \"Tail\":\"-service\"\n   },\n   {\n      \"Repo\":\"ML-python-pytorch-cpu-training\",\n      \"Tail\":\"-training\"\n   }\n]\n```\n\n## Customising your teams quickstarts\n\nYou can configure at a team level the quickstarts which are presented to you in the `jx create mlquickstart` command. These settings are stored in the [Environment Custom Resource](/docs/reference/components/custom-resources/) in Kubernetes.\n\nTo add the location of a set of machine learning quickstarts you can use the [jx create quickstartlocation](/commands/jx_create_quickstartlocation/) command.\n\n\n```sh\njx create quickstartlocation --url https://mygit.server.com --owner my-mlquickstarts --includes=[ML-*]\n```\n\nNote that you MUST specify the `--includes=[ML-*]` option or your quickstarts will be added to the conventional quickstart list rather than the machine learning list.\n\nIf you omit the `--url` argument the command will assume its a [GitHub](https://github.com/) repository. Note that both public and private repositories are supported.\n\nThis means you can have your own shared private quickstarts to reuse within your organisation. Of course we'd obviously prefer you to [share your quickstarts with us via open source](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:) then we can include your quickstart with the entire [community](/community/) - but there may be times you want to curate your own internal quickstarts using proprietary software.\n\nYou can also specify other `--includes` or `--excludes` patterns to filter the names of the repositories where `*` matches anything and `foo*` matches anything starting with `foo`. e.g. you could just include the languages and technologies your organisation supports and exclude the rest etc.\n\nAlso note that you can use the alias of `qsloc` instead of `quickstartlocation` if you like shorter aliases ;)\n\nYou can then view the current quickstart locations for your team via the [jx get quickstartlocations](/commands/jx_get_quickstartlocation/) command:\n\n```sh\njx get quickstartlocations\n```\n\nOr using an abbreviation\n\n```sh\njx get qsloc\n```\n\nThere is also [jx delete quickstartlocation](/commands/jx_delete_quickstartlocation/) if you need to remove a git organisation.\n\n",
            "content/en/docs/create-project/creating/create-quickstart.md": "---\ntitle: Create Quickstart\nlinktitle: Create Quickstart\ndescription: How to create a new microservice from a template and import it into Jenkins X\nweight: 10\naliases:\n  - /docs/resources/guides/using-jx/creating/create-quickstart\ntoc_hide: true\n---\n\nCreating a quickstart is our preferred way to create your first project inside Jenkins X. A quickstart is just a sample microservice in a particular programming language and build technology which we test with our build packs to ensure it works great with CI+CD in Jenkins X.\n\nTo see how to create a project see [Create a Quickstart](/docs/getting-started/first-project/create-quickstart/) \n",
            "content/en/docs/create-project/creating/create-spring.md": "---\ntitle: Create Spring Boot\nlinktitle: Create Spring Boot\ndescription: How to create new Spring Boot applications and import them into Jenkins X\nweight: 40\naliases:\n  - /docs/resources/guides/using-jx/common-tasks/create-spring/\n  - /docs/resources/guides/using-jx/creating/create-spring/\n---\n\nJava microservices developers can leverage the opinionated resources and\npreconfigured components of [Spring\nBoot](https://spring.io/projects/spring-boot). This software framework\ntakes the Spring platform and adds preconfigured components, third-party\nlibraries, software packagers, and command-line tools for running\nspecialized scripts.\n\nThe aim of Spring Boot is to create Spring-based software such as\nmicroservices, which can be deployed using the `java` command-line\nruntime or standalone *Web Application Resource* (WAR) package files.\nSpring Boot uses Spring as a foundation for development, and enhances it\nwith components that provides faster development and deployment,\nopinionated configuration and setup to get started developing\nmicroservices quickly, and a plugin framework that features Maven and\nGradle project support.\n\n## Spring Boot and Jenkins X\n\nYou can incorporate Jenkins X into your Spring\nBoot projects in two ways:\n\n1.  By importing existing Spring Boot code using `jx import`\n\n2.  By creating a Spring Boot application from scratch using\n    `jx create spring`\n\n## Importing existing Spring Boot projects\n\nIf you have an Spring Boot project (perhaps created using the [Spring Boot Initializr](http://start.spring.io/)) that you want to manage builds using\nJenkins X, you can use `jx import` to commit your\ncode to a Git service such as GitHub, add a `Dockerfile` to build your\nSpring Boot project as a Docker image, a `pipeline.yaml` to your\n`~/.jx/` directory that manages the development pipeline, and a Helm\nchart for running as a package in Kubernetes.\n\n1.  Change into your Spring Boot project directory:\n\n```sh\ncd my-springapp/\n```\n\n2.  Run the import from a command-line:\n\n```sh\njx import\n```\n\n3.  The application asks for your Git username (such as `myuser`).\n\n4.  The application asks if you wan to initialize your project in Git.\n\n5.  The application asks you what organization to use for managing\n    builds (for example, `myorg`)\n\n6.  The application asks if you want to name your repository (such as\n    `my-springapp`)\n\nYou can now perform builds, commit project code to your newly created\nGit repository, and Jenkins X will automatically\nprocess pull requests and create [previews](/docs/reference/preview/) of your applications for testing and validation.\n\n## Creating a new Spring Boot application\n\nIf you are evaluating Spring Boot in your Jenkins X environment and need an application template of a Spring Boot project that is preconfigured with CI/CD pipeline and GitOps promotion, use `jx create` to make the preconfigured project.\n\n1.  Run the Spring Boot creation via command-line:\n\n```sh\njx create spring\n```\n\n2.  The application asks for your Git username (such as `myuser`)\n\n3.  The application lets you choose your Git organization from an\n    available list\n\n4.  The application asks for a repository name, such as\n    `my-springapp1`\n\n5.  The application prompts you for the development language for your\n    project (by default, `java`)\n\n6.  The application prompts you for a group ID (by default,\n    `com.example`)\n\n7.  The application prompts you for any Spring Boot starters, or\n    dependency descriptors that you can use to make your development\n    smoother and quicker.\n\n    We recommend at minimum the `Actuator` and `Web`\n    dependencies, which you can activate by moving to those checkboxes\n    and hitting the `Space Bar` to select them. The application\n    prompts you to initialize Git\n\nThere is a [demo of using the command: jx create spring](/docs/resources/demos-talks-posts/create_spring/).\n\nYou can also pass certain options to the `jx create` command, such as specifying Spring Boot dependencies:\n\n```sh\njx create spring -d web -d actuator\n```\n\nThe `-d` argument lets you specify the Spring Boot dependencies you wish to add to your spring boot application. In the above example, the command calls the `web` argument, which passes in the Web Starter dependency to create RESTful web applications; the `actuator` dependency for monitoring the health and metrics your application.  When you omit the `-d` arguments and let the `jx` command prompt you to pick the dependencies via a CLI wizard\n\nWe recommend you always include the **actuator** dependency in your Spring Boot applications as it helps provide health checks for [Liveness and Readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/).\n\n## Spring Boot projects managed by Jenkins X\n\nThe two methods of configuring Spring Boot projects in Jenkins X performs several actions:\n\n-   Create a new Spring Boot application in a local subdirectory\n\n-   Add your source code into a Git repository\n\n-   Create a remote git repository on a git service, such as\n    [GitHub](https://github.com)\n\n-   Commit your code to the remote Git service\n\n-   Adds default build files to your project:\n\n    -   A `Dockerfile` to build your application as a docker image\n\n    -   A `pipeline.yaml` to implement the CI / CD pipeline\n\n    -   A helm chart to run your application inside Kubernetes\n\n-   Registers a webhook (such as\n    `http://hook-jx.192.169.1.100.nip.io/hook`) on the remote git\n    repository\n\n-   trigger the first pipeline build\n\nYou can now use your Git-enabled local project subdirectory to make\nchanges to your Spring Boot application, push those changes to Git, and\nautomatically have Jenkins X build, create\n[previews](/docs/reference/preview/) for testing and validation, and [promote](/developing/promote/) your app to production for general usage.\n",
            "content/en/docs/create-project/creating/import.md": "---\ntitle: Import\nlinktitle: Import\ndescription: How to import existing projects into Jenkins X\nweight: 70\naliases:\n  - /docs/resources/guides/using-jx/creating/import/\n---\n\nIf you already have some source code you wish to import into Jenkins X then you can use the [jx import](/commands/jx_import/) command. e.g.\n\n```sh\ncd my-cool-app\njx import\n```\n\nImport will perform the following actions (prompting you along the way):\n\n* add your source code into a git repository if it isn't already\n* create a remote git repository on a git service, such as [GitHub](https://github.com)\n* push your code to the remote git service\n* add any required files to your project if they do not exist:\n  * `Dockerfile` to build your application as a docker image\n  * `pipeline.yml` to implement the CI / CD pipeline\n  * helm chart to run your application inside Kubernetes\n* register a webhook on the remote git repository to your teams Jenkins\n* trigger the first pipeline\n\n{{< alert color=\"warning\" >}}\nBe sure there isn't any `config.json` file at the root of your project, or else it will be interpreted as [kaniko](https://github.com/GoogleContainerTools/kaniko) configuration file, and can lead to a permission error when jx will try to push the builded project image to the docker registry.\n{{< /alert >}}\n\n### Avoiding docker + helm\n\nIf you are importing a repository that does not create a docker image you can use the `--no-draft` command line argument which will not use Draft to default the Dockerfile and helm chart.\n\n### Importing via URL\n\nIf you wish to import a project which is already in a remote git repository then you can use the `--url`  argument:\n\n```sh\njx import --url https://github.com/jenkins-x/spring-boot-web-example.git\n```\n\n### Importing GitHub projects\n\nIf you wish to import projects from a github organisation you can use:\n\n```sh\njx import --github --org myname\n```\n\nYou will be prompted for the repositories you wish to import. Use the cursor keys and space bar to select/deselect the repositories to import.\n\nIf you wish to default all repositories to be imported (then deselect any you don't want add `--all`:\n\n```sh\njx import --github --org myname --all\n```\n\nTo filter the list you can add a `--filter`\n\n```sh\njx import --github --org myname --all --filter foo\n```\n\n## Branch patterns\n\nWhen importing projects into Jenkins X we use git branch patterns to determine which branch names are automatically setup for CI/CD.\n\nTypically that may default to something like `master|PR-.*|feature.*`. That means that the `master` branch, any branch starting with `PR-` or `feature` will be scanned to look for a `pipeline.yml` to setup the CI/CD pipelines.\n\nIf you use another branch name than `master` such as `develop` or whatever you can change this pattern to be whatever you you like via the `--branches` argument whenever you run [jx import](/commands/jx_import/) or [jx create quickstart](/commands/jx_create_quickstart/).\n\n\n```sh\njx import --branches \"develop|PR-.*|feature.*\"\n```\n\nYou may wish to set this to just `.*` to work with all branches,.\n\n```sh\njx import --branches \".*\"\n```\n\n## Configuring your teams branch patterns\n\nUsually a team uses the same naming conventions for branches so you may wish to configure the branch patterns at a team level so that they will be used by default if anyone in your team runs [jx import](/commands/jx_import/) or [jx create quickstart](/commands/jx_create_quickstart/).\n\nThese settings are stored in the [Environment Custom Resource](/docs/reference/components/custom-resources/) in Kubernetes.\n\nTo set the branch patterns for your team  [jx create branchpattern](/commands/jx_create_branchpattern/) command.\n\n```sh\njx create branchpattern  \"develop|PR-.*|feature.*\"\n```\nYou can then view the current branch patterns for your team via the [jx get branchpattern](/commands/jx_get_branchpattern/) command:\n\n```sh\njx get branchpattern\n```\n",
            "content/en/docs/create-project/environments.md": "---\ntitle: Environments\nlinktitle: Environments\ndescription: Working with Jenkins X environments\nweight: 30\n---\n\nAn _environment_ is a place where applications get deployed. Developers often refer to environments using a short name like `Testing, Staging/UAT or Production`.\n\nWith Jenkins X each _team_ gets its own Environments. By default Jenkins X creates a `Staging` and `Production` environment for each team but you can create new environments via [jx create environment](/commands/jx_create_environment/).\n\nThere is also the `Dev` environment which is where tools like Tekton, Nexus or Prow are installed and where CI/CD pipelines run.\n\nWe use GitOps to manage the configuration and version of the kubernetes resources which are deployed to each environment. So each Environment has its own git repository that contains all the Helm Charts, their versions and the configuration for the applications be run in the environment.\n\nAn Environment maps to a namespace in a Kubernetes cluster. When Pull Requests are merged into the environments git repository the pipeline runs for the environment which then applies the helm charts in git to the environments namespace.\n\nThis means both developers and operations can use the same git repository to manage all the configuration and versions of all the applications and resources for an environment in the same git repository and all changes to the environment are captured in git. So its easy to see who made changes when and more importantly its then easy to revert changes which cause bad things to happen.\n\n<img src=\"/images/gitops.png\" class=\"img-thumbnail\">",
            "content/en/docs/install-setup/_index.md": "---\ntitle: Install and setup\nlinkTitle: Install and setup\ndescription: How to get up and running with Jenkins X\ntype: \"docs\"\nweight: 10\n---\n\nThe [Get Started](/docs/getting-started) documentation helps you to get started quickly to take Jenkins X for a spin.\nOnce you want to go beyond a test drive, the following sections help you to configure Jenkins X for a production like environment.\n",
            "content/en/docs/install-setup/boot/_index.md": "---\ntitle: Boot\nlinktitle: Run Jenkins X Boot\ndescription: How to install, configure or upgrade Jenkins X via GitOps and a Jenkins X Pipeline\ncategories: [getting started]\nkeywords: [install, cluster]\nweight: 40\naliases:\n  - /getting-started/boot/\n  - /docs/reference/boot/\n  - /architecture/tls/\n  - /docs/getting-started/setup/boot/\n  - /docs/install-setup/boot/\n  - /docs/install-setup/boot/\n---\n\n## Overview\n\n_Jenkins X Boot_ uses the following approach:\n\n- Create your Kubernetes cluster using [Terraform](/docs/install-setup/create-cluster/).\n  Please check out our [Cloud Providers Guide](/docs/getting-started/setup/boot/clouds/) on our recommendations for your cloud provider.\n  To verify you can communicate correctly with your Kubernetes cluster run:\n  ``` sh\n  kubectl get ns\n  ```\n\n- Run the [jx boot](/commands/jx_boot/) command:\n\n    ```sh\n    jx boot\n    ```\n\nYou will now be prompted for any missing parameters required to install, such as your admin user/password, the Pipeline git user and token etc.\n\nThen Jenkins X should be installed and set up on your Kubernetes cluster.\n\n{{% alert %}}\nIf one of the steps in `jx boot` fails for some reason, instead of running all the steps, you can start boot from that \nparticular step in two ways:\n* Using environment variable `JX_BOOT_START_STEP`: `JX_BOOT_START_STEP=<name of the step> jx boot`\n* Using the `--start-step` or it's shorthand `-s` flag: `jx boot -s=<name of the step>`\n\nAlternatively, you can also end `jx boot` at a step by using the environment variable `JX_BOOT_END_STEP`. \n{{% /alert %}}\n\n## About `jx boot`\n\nThe [jx boot](/commands/jx_boot/) interprets the boot pipeline using your local `jx` binary.\nThe underlying pipeline for booting Jenkins X can later be run inside Kubernetes via Tekton.\nIf ever something goes wrong with Tekton you can always `jx boot` again to get things back up and running (e.g., if someone accidentally deletes your cluster).\n\n## Pre and Post Validation\n\nBefore any installation is attempted, Boot runs the [jx step verify preinstall](/commands/jx_step_verify_preinstall/) command to check everything looks OK.\nIt will also check whether your installed package versions are within the upper and lower version limits.\n\nOnce the installation has completed the [jx step verify install](/commands/jx_step_verify_install/) command is run to verify your installation is valid.\n\n## Changing your installation\n\nAt any time you can re-run [jx boot](/commands/jx_boot/) to re-apply any changes in your configuration.\nTo do this git clone your development environment git repository, change directory into the git clone and run `jx boot`. e.g.\n\n```sh\ngit clone https://github.com/myuser/environment-mycluster-dev.git\ncd environment-mycluster-dev\njx boot\n```\n\nSo just edit anything in the configuration you like and re-run [jx boot](/commands/jx_boot/) - whether that's to add or remove apps, to change parameters or configuration, or upgrade or downgrade versions of dependencies.\n\nNote that you can also just submit a Pull Request on your development git repository which if merged, will trigger a pipeline to run the above commands to apply the changes.\n\n## Requirements\n\nThere is a file called [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) which is used to specify the logical requirements of your installation; such as:\n\n- what Kubernetes provider to use\n- whether to store secrets in the local file system or vault\n- if you are using Terraform to manage your cloud resources\n- if you wish to use kaniko for container image builds\n\nThis is the main configuration file for `jx boot` where you make most of your changes.\nYou may want to review the  [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) file and make any changes you need.\n\n## User Interface\n\nIf you're looking for a UI check out [Octant the open source web UI for Jenkins X](/docs/reference/components/ui/)\n",
            "content/en/docs/install-setup/boot/clouds/_index.md": "---\ntitle: Cloud Providers\nlinktitle: Cloud Providers\ndescription: Using Boot on different Kubernetes providers\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\nweight: 10\naliases:\n  - /docs/getting-started/setup/boot/clouds/\n  - /docs/install-setup/boot/clouds/\n  - /docs/install-setup/installing/boot/clouds/\n---\n\nJenkins X is designed to work on any Kubernetes cluster; whether on-premises, hybrid or public cloud.\n\nHowever, if you try doing any significant work with Kubernetes particularly with things like storage, networking, ingress, TLS, certificates, DNS,secrets - you will find that things can be different on different cloud providers.\n\nThis section of the documentation will try guide you through the best way to use Jenkins X on different cloud providers.\n\nRefer to the [Jenkins X Capabilities Matrix](/about/capabilities) for cloud provider support maturity.\n",
            "content/en/docs/install-setup/boot/clouds/amazon.md": "---\ntitle: Amazon\nlinktitle: Amazon\ndescription: Using Boot on Amazon (AWS)\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-27\nweight: 30\naliases:\n  - /docs/install-setup/installing/boot/clouds/amazon/\n---\n\nThe information in this document assumes you have already created a Kubernetes cluster in AWS and you are now ready to `boot` your cluster with Jenkins X.\n\n## Basic Configuration\n\nPlease set your provider to `eks` via this in your `jx-requirements.yml` to indicate you are using EKS:\n\n```yaml\nclusterConfig:\n    provider: eks\n```\n\nIf you wish to setup your EKS cluster by hand and not use [eksctl](https://eksctl.io/) then please specify `terraform: true` to indicate that you are setting up all of the AWS related cloud resources yourself and that you do not want `jx boot` attempting to set anything up.\n\nWe recommend using [Jenkins X Pipelines](/architecture/jenkins-x-pipelines/) as this works out of the box with kaniko for creating container images without needing a docker daemon and works well with ECR.\n\n## Authentication Mechanisms\nThere are two standard authentication mechanisms that are recommended depending on use case: Enhanced permissions for the nodepool role, and IRSA.\n\n### Enhanced permissions for the nodepool role\nThe default authentication and permissions mechanism used by EKS in order to give nodepool access to certain AWS services.\n\nWhen an EKS cluster is created, the control plane for the cluster is managed directly by AWS but its nodepool and all the worker nodes are created as EC2 instances. These EC2 instances are assigned an IAM Role with specific permissions to allow these nodes to authenticate against AWS.\n\nMore policies can be added to these roles in order to provide permissions to every pod running in the cluster.\n\nThe issue with this mechanism is that by enhancing the permissions on the nodepool EC2 instances, every pod in the cluster will have every permission provided by the Role, which could raise security concerns.\n\nThird party solutions like [kiam](https://github.com/uswitch/kiam) or [kube2iam](https://github.com/jtblin/kube2iam) can be used to provide permissions on a pod by pod basis but for Jenkins X it is recommended to use the official [IAMRoles for Service Accounts](https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts).\n\nNote that this is the mechanism that *must* be used if the cluster was not created with [eksctl](https://github.com/weaveworks/eksctl), because only clusters created with `eksctl` are able to assign an Open ID Connect Provider that will make IAM Roles for Service Accounts work.\n\n### IAM Roles for Service Accounts (IRSA)\n\nIn order to avoid the security concerns that enhanced permissions on the nodepool creates, it is recommended to use IRSA mechanisms to provide fine grained permissions at the Service Account level, meaning that a Role will be created and attached for every single Service Account that is used in the cluster.\n\nWhen executing `jx boot` (and ensuring that the `--terraform` flag is set to `false`), a series of IAM Policies are created through CloudFormation stacks:\n\n[jenkinsx-policies.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/kubeProviders/eks/templates/jenkinsx-policies.yml)\n\nThese policies are then exported as CloudFormation outputs following a defined format. For example:\n\n```yaml\nExport:\n  Name: !Join [ \"-\", [ TektonBotPolicy, Ref: PoliciesSuffixParameter] ]\n```\n\nThis policy performs a Join operation. A name is provided, in this case TektonBotPolicy; then a random suffix is appended to make the name unique.\n\nThe provided name will be used in the irsa.tmpl.yaml file.\n\nThe names of the outputs from jenkinsx-policies.yml are used in this file by processing it through Golang\u2019s templating functionality, exporting the outputs of the CloudFormation stack under the .IAM.` prefix.\n\nThis means that the outputs from jenkins-x-policies.yml can be obtained and queried in this file, which will then be processed and run against the cluster.\n\nFor example, take this output from the CloudFormation stack:\n\n```yaml\nCFNTektonBotPolicy:\n  Value:\n  Ref: CFNJenkinsXPolicies\n  Description: The ARN of the created policy\n  Export:\n    Name: !Join [ \"-\", [ TektonBotPolicy, Ref: PoliciesSuffixParameter] ]\n```\n\nAnd how we use its export name in the next file:\n\n```yaml\n{{- if .IAM.TektonBotPolicy }}\n  - metadata:\n      name: tekton-bot\n      namespace: jx\n      labels: {aws-usage: \"jenkins-x\"}\n    attachPolicyARNs:\n    - {{.IAM.TektonBotPolicy | quote}}\n```\n\nIn this example we are taking the policy ARN created from the CloudFormation stack under a specific export name and using it in the IRSA template file. This will then create an IAM Role, attach the policy to it, then it will create a new ServiceAccount called tekton-bot with the necessary annotations to let it assume the created role.\n\nIf the ServiceAccount already exists, it will perform an upsert and just add the annotation.\n\nA pod that uses that ServiceAccount will automatically assume that role in IAM and be granted access to the cloud services defined in the policy that was attached to its role.\n\nIf you need to add more permissions for other Service Accounts, just add them to [jenkinsx-policies.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/kubeProviders/eks/templates/jenkinsx-policies.yml) with an export name that can be referenced in [irsa.tmpl.yaml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/kubeProviders/eks/templates/irsa.tmpl.yaml) and Jenkins X will create everything for you.\n\nYou can also simply add already created policies to your ServiceAccounts like this:\n\n```yaml\n  - metadata:\n      name: jenkins-x-controllerbuild\n      namespace: jx\n      labels: {aws-usage: \"jenkins-x\"}\n    attachPolicyARNs:\n    - \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n```\n\nNote: For now, this can only be done in the initial installation of Jenkins X and any adjustments need to be done manually by adding more permissions to the created IAM Policies.\n\n## IAM Policies for Cluster Creation and Jenkins X Boot\n\nBefore getting into IRSA, we will define the minimum permissions needed to create an EKS cluster with `jx create cluster eks` and Jenkins X.\n\n### IAM Policy for cluster creation\n\nIn order to create an EKS cluster, we make use of [eksctl](https://github.com/weaveworks/eksctl), which is the official tool to interact with EKS clusters.\n\nThere is no official policy documented by eksctl to get a cluster running, but there\u2019s a very useful GitHub issue where users have been curating a comprehensive policy that should work for all cases: [https://gist.github.com/dgozalo/bc4b932d51f22ca5d8dad07d9a1fe0f2](https://gist.github.com/dgozalo/bc4b932d51f22ca5d8dad07d9a1fe0f2)\n\n```yaml\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateInstanceProfile\",\n                \"iam:DeleteInstanceProfile\",\n                \"iam:GetRole\",\n                \"iam:GetInstanceProfile\",\n                \"iam:RemoveRoleFromInstanceProfile\",\n                \"iam:CreateRole\",\n                \"iam:DeleteRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:PutRolePolicy\",\n                \"iam:ListInstanceProfiles\",\n                \"iam:AddRoleToInstanceProfile\",\n                \"iam:ListInstanceProfilesForRole\",\n                \"iam:PassRole\",\n                \"iam:DetachRolePolicy\",\n                \"iam:DeleteRolePolicy\",\n                \"iam:GetRolePolicy\",\n                \"iam:DeleteServiceLinkedRole\",\n                \"iam:CreateServiceLinkedRole\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::<account_id>:instance-profile/eksctl-*\",\n                \"arn:aws:iam::<account_id>:role/eksctl-*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"cloudformation:*\",\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"eks:*\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"autoscaling:DescribeAutoScalingGroups\",\n                \"autoscaling:DescribeLaunchConfigurations\",\n                \"autoscaling:DescribeScalingActivities\",\n                \"autoscaling:CreateLaunchConfiguration\",\n                \"autoscaling:DeleteLaunchConfiguration\",\n                \"autoscaling:UpdateAutoScalingGroup\",\n                \"autoscaling:DeleteAutoScalingGroup\",\n                \"autoscaling:CreateAutoScalingGroup\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"ec2:DeleteInternetGateway\",\n            \"Resource\": \"arn:aws:ec2:*:*:internet-gateway/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:AuthorizeSecurityGroupIngress\",\n                \"ec2:DeleteSubnet\",\n                \"ec2:DeleteTags\",\n                \"ec2:CreateNatGateway\",\n                \"ec2:CreateVpc\",\n                \"ec2:AttachInternetGateway\",\n                \"ec2:DescribeVpcAttribute\",\n                \"ec2:DeleteRouteTable\",\n                \"ec2:AssociateRouteTable\",\n                \"ec2:DescribeInternetGateways\",\n                \"ec2:CreateRoute\",\n                \"ec2:CreateInternetGateway\",\n                \"ec2:RevokeSecurityGroupEgress\",\n                \"ec2:CreateSecurityGroup\",\n                \"ec2:ModifyVpcAttribute\",\n                \"ec2:DeleteInternetGateway\",\n                \"ec2:DescribeRouteTables\",\n                \"ec2:ReleaseAddress\",\n                \"ec2:AuthorizeSecurityGroupEgress\",\n                \"ec2:DescribeTags\",\n                \"ec2:CreateTags\",\n                \"ec2:DeleteRoute\",\n                \"ec2:CreateRouteTable\",\n                \"ec2:DetachInternetGateway\",\n                \"ec2:DescribeNatGateways\",\n                \"ec2:DisassociateRouteTable\",\n                \"ec2:AllocateAddress\",\n                \"ec2:DescribeSecurityGroups\",\n                \"ec2:RevokeSecurityGroupIngress\",\n                \"ec2:DeleteSecurityGroup\",\n                \"ec2:DeleteNatGateway\",\n                \"ec2:DeleteVpc\",\n                \"ec2:CreateSubnet\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeAvailabilityZones\",\n                \"ec2:DescribeImages\",\n                \"ec2:describeAddresses\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:CreateLaunchTemplate\",\n                \"ec2:DescribeLaunchTemplates\",\n                \"ec2:RunInstances\",\n                \"ec2:DeleteLaunchTemplate\",\n                \"ec2:DescribeLaunchTemplateVersions\",\n                \"ec2:DescribeImageAttribute\",\n                \"ec2:DescribeKeyPairs\",\n                \"ec2:ImportKeyPair\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\n### IAM Policy for Jenkins X Boot creation\n\nA different policy is required for Jenkins X to be successful with the jx boot command.  Depending on the configuration present in jx-requirements.yml, we will attempt to interact with different cloud services like S3, DynamoDB or KMS.  This policy will allow the executing user the minimum permissions to be successful.\n\n[https://gist.github.com/dgozalo/df514542b63ef05282cac793b433d74b](https://gist.github.com/dgozalo/df514542b63ef05282cac793b433d74b)\n\n```yaml\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:CreateTable\",\n                \"s3:GetObject\",\n                \"cloudformation:ListStacks\",\n                \"cloudformation:DescribeStackEvents\",\n                \"dynamodb:DescribeTable\",\n                \"s3:CreateBucket\",\n                \"kms:CreateKey\",\n                \"s3:ListBucket\",\n                \"s3:PutBucketVersioning\",\n                \"cloudformation:DescribeStacks\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Sid\": \"VisualEditor1\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:GetRole\",\n                \"iam:GetPolicy\",\n                \"ecr:CreateRepository\",\n                \"iam:AttachUserPolicy\",\n                \"iam:CreateRole\",\n                \"iam:DeleteRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:CreateAccessKey\",\n                \"iam:CreateOpenIDConnectProvider\",\n                \"iam:CreatePolicy\",\n                \"iam:DetachRolePolicy\",\n                \"cloudformation:CreateStack\",\n                \"cloudformation:DeleteStack\",\n                \"ecr:DescribeRepositories\",\n                \"iam:GetOpenIDConnectProvider\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::*:policy/CFN*\",\n                \"arn:aws:iam::*:policy/*jenkins-x-vault*\",\n                \"arn:aws:iam::*:oidc-provider/*\",\n                \"arn:aws:iam::*:role/*addon-iamserviceaccoun*\",\n                \"arn:aws:iam::*:user/*\",\n                \"arn:aws:ecr:*:*:repository/*\",\n                \"arn:aws:cloudformation:*:*:stack/JenkinsXPolicies*/*\",\n                \"arn:aws:cloudformation:*:*:stack/*addon-iamserviceaccount*/*\",\n                \"arn:aws:cloudformation:*:*:stack/*jenkins-x-vault*/*\"\n            ]\n        },\n        {\n            \"Sid\": \"VisualEditor2\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreatePolicy\",\n                \"iam:DetachRolePolicy\",\n                \"iam:GetPolicy\",\n                \"iam:CreateRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:GetOpenIDConnectProvider\",\n                \"iam:CreateOpenIDConnectProvider\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::*:oidc-provider/*\",\n                \"arn:aws:iam::*:role/*addon-iamserviceaccoun*\",\n                \"arn:aws:iam::*:policy/CFN*\"\n            ]\n        },\n        {\n            \"Sid\": \"VisualEditor3\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"eks:*\",\n            \"Resource\": [\n                \"arn:aws:eks:*:*:fargateprofile/*/*/*\",\n                \"arn:aws:eks:*:*:cluster/*\",\n                \"arn:aws:eks:*:*:nodegroup/*/*/*\"\n            ]\n        }\n    ]\n}\n```\n\nThe reason for these policies is further described for each cloud resource below.\n\n#### IAM\n\nIn order to make IAM Roles for Service Accounts work, Jenkins X will create IAM Policies and Roles and then attach these policies to these roles.  These Roles are then annotated into selected Service Accounts so pods using them can assume the role.  In order to make IRSA work, Jenkins X needs to create an Open ID Connect Provider with IAM in order to authenticate the annotated pods.  Also, in order to make Vault work, we (for now) need to attach a policy, created just for Vault, into a provided IAM User.\n\n#### CloudFormation\n\nJenkins X creates a series of CloudFormation stacks to prepare the platform for cluster installation. All IAM Policies created for IRSA are created as CloudFormation stacks.  Every cloud resource needed by Vault is also created by CloudFormation, but only if they are not provided in jx-requirements.yml already.\n\n#### S3\n\nJenkins X uses S3 for Long Term Storage, that is, for logs archival and stashing of artifacts created in Pipelines.  Jenkins X Boot will attempt to check for existing S3 buckets and create them if they don\u2019t exist.  It is also used by Vault, so there needs to be enough permissions for the executing user to interact with the service. Permissions to interact with the bucket however, is handled by IRSA and are only granted to the Vault pod.\n\n#### DynamoDB\n\nThis service is used by Vault, so the executing user needs to have permissions to at least create the table. Permissions to interact with the table however, is handled by IRSA and are only granted to the Vault pod.\n\n#### KMS\n\nVault needs to create a KMS key in order to encrypt its contents. Again, the executing user just needs permissions to create the Key. Permissions to interact with KMS however, is handled by IRSA and are only granted to the Vault pod.\n\n#### ECR\n\nJenkins X will check if there is an ECR registry already created for a given application, and create it otherwise.\n\n#### EKS\n\nJenkins X will need full permissions on EKS in order to operate without problems.  For further security, this policy can be modified to restrict its access to only certain resources and accounts.  For example, if you know the name of your cluster, you can modify the resources affected by the eks permission to limit its effect.\n\n#### Vault\n\nA special case - refer to [Configuring Vault for EKS](#configuring-vault-for-eks)\n\n## Configuring Vault for EKS\n\nWhen booting JX on an EKS cluster with Vault enabled, fields under vault.aws in the `jx-requirements.yml` file are required to enable Vault support.\n\nVault does not currently support Identity Access Management (IAM) Roles for Service Accounts, so you will be prompted to provide a preconfigured IAM User.\n\nThe `jx-requirements.yml` file contains the following settings for EKS Vault configuration:\n\n```yaml\nvault:\n    aws:\n      autoCreate: true\n      iamUserName: <username>\n```\n\nFor Vault support on EKS clusters, you must provide an **existing** IAM username in the `iamUserName` setting to use its Access Keys to authenticate the Vault pod against AWS.\n\nThe IAM user does not need any permissions attached to it. During the installation process, Jenkins X creates a new IAM Policy and attaches it to this user. These will essentially be the permissions that the Vault pod will use.\n\n**Important**: A new set of Access Keys are created during Vault creation. There is a limit of 2 key pairs per IAM user, so ensure that there is at least one key slot free on the IAM user that you are providing. Otherwise, the Vault configuration will fail. If you do not want Jenkins X to create these keys, you can provide a key pair that you already created through the environment variables: **VAULT_AWS_ACCESS_KEY_ID** and **VAULT_AWS_SECRET_ACCESS_KEY**.\n\nIn the **install-vault** step, the jx boot process runs a CloudFormation stack in order to create every resource needed by Vault to work.\n\nYou can find the CloudFormation stack template [here](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/kubeProviders/eks/templates/vault_cf_tmpl.yml).\n\n### Providing an Existing Vault Instance\n\nIf you want to provide an existing Vault instance instead of letting Jenkins X create one, you need to set Vault.aws.autoCreate to false.\n\nYou must provide the names of the existing resources in the `jx-requirements.yml` file:\n\n```yaml\nvault:\n  aws:\n    autoCreate: false\n    iamUserName: acmeuser\n    dynamoDBTable: \"\"\n    dynamoDBRegion: \"\"\n    kmsKeyId: \"\"\n    kmsRegion: \"\"\n    s3Bucket: \"\"\n    s3Region: \"\"\n    s3Prefix: \"\"\n```\n\nNote: A pair of Access Keys will be created even if you set **autoCreate** to **false**. To prevent this, you can set an existing pair through environment variables: **VAULT_AWS_ACCESS_KEY_ID** and **VAULT_AWS_SECRET_ACCESS_KEY**.\n\n## Configuring DNS and TLS on EKS\n\nIf you require custom Domain Name Service (DNS) and/or Transport Layer Security (TLS) support, follow the steps in this section.\n\n### Configuring AWS Route 53\n\nIn order to configure your cluster to enable external DNS and TLS for its services and your applications, you must configure AWS Route53 appropriately.\n\nAn administrator should have a domain name registered with a name registrar, for example www.acmecorp.example, before configuring Route 53\u2019s Hosted Zone settings. For more information, refer to [Getting Started with Amazon Route 53](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/getting-started.html) from the Amazon documentation.\n\n1. Within the AWS Dashboard, navigate to the Region Selector dropdown and choose the region that you are going to work with.\n2. Configure the following settings as described in [Creating a Public Hosted Zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/CreatingHostedZone.html) from the Amazon documentation:\n    - Input a DNS suffix in DNS name, for example acmecorp.example\n    - (Optional) input a Comment for your Hosted Zone\n    - Choose Public as your Zone Type\n    - Click Create\n\nOnce created, the Hosted Zone Details page loads. NS (Name server) and SOA (Start of Authority) records are automatically created for your domain (for example acmecorp.example)\n\n### Configuring External DNS\n\nOnce you have configured AWS Route 53, you can browse the Hosted Zones page from the navigation pane for the selected region to set up your external domain.\n\nNOTE: External DNS will automatically update DNS records if you reuse a domain name, so if you delete an old cluster and create a new one it will preserve the same domain configuration for the new cluster.\n\n1. Choose a unique DNS name; you can use nested domains (for example, cluster1.acmecorp.example). Create a new Hosted Zone for this subdomain.\n2. In the newly created Hosted Zone details page, copy all the nameservers from the NS recordset and annotate the name of your subdomain.\n3. Go back to the Hosted Zone created for your apex domain, in this case acmecorp.example, and click on <create_record_set> to create a new record set.\n    - Input the name of the subdomain in the Name field. In this case cluster1.acmecorp.example\n    - Select NS as the Type\n    - Input the nameservers that you copied from the subdomain Hosted Zone in the Value field\n4. Click Create\n5. Configure Jenkins X for the new domain names:\n    - Open the `jx-requirements.yml` file in a text editor (such as TextEdit for macOS or gedit for Linux) and edit the ingress section at the root level.\n\n        ```yaml\n        ingress:\n          domain: cluster1.acmecorp.example\n          ignoreLoadBalancer: true\n          externalDNS: true\n          namespaceSubDomain: -jx.\n          tls:\n            email: certifiable@acmecorp.example\n            enabled: true\n            production: true\n        ```\n\nWhen you're ready to run `jx boot` this configuration will be applied to your cluster.\n",
            "content/en/docs/install-setup/boot/clouds/google.md": "---\ntitle: Google\nlinktitle: Google\ndescription: Using Boot on Google Cloud (GCP)\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\nweight: 20\naliases:\n  - /docs/install-setup/installing/boot/clouds/google/\n---\n\n## Configuration\n\nOn GCP we default to using GCR as the container registry (using `gcr.io`).\n\nPlease set your provider to `gke` via this in your `jx-requirements.yml` to indicate you are using GCP:\n\n```yaml\nclusterConfig:\n    provider: gke\n```\n\nWe also recommend using [Jenkins X Pipelines](/architecture/jenkins-x-pipelines/) as this works out of the box with kaniko for creating container images without needing a docker daemon and works well with GCR.\n\n## Configuring DNS and TLS\n\nFor a secure Jenkins X installation, you must enable TLS when interacting with the vault service.\nTo configure TLS, you must first configure Zone DNS settings within Google Cloud Platform, and then configure external DNS settings for Ingress and TLS in the `jx-requirements.yml` configuration file.\n\n### Configuring Google Cloud DNS\n\nYou should have a domain name registered with a name registrar, for example `www.acmecorp.example` before configuring DNS Zone settings.\nFor more information, refer to [Creating a managed public zone](https://cloud.google.com/dns/docs/quickstart#create_a_managed_public_zone) from the Google documentation.\n\n1. Navigate via browser to the [Project\nSelector](https://console.cloud.google.com/projectselector2/home/dashboard)\npage. and choose your Google Cloud Platform project.\n\n1. [Create a DNS\nzone](https://console.cloud.google.com/networking/dns/zones/~new)\n\n    1. Choose Public as your *Zone Type*.\n\n    1. Type a *Zone Name* for your zone.\n\n    1. Input a DNS suffix in *DNS name*, for example `acmecorp.example`.\n\n    1. Choose your *DNSSEC* or DNS Security state, which should be set to `Off` for this configuration.\n\n1. (Optional) Input a *Description* for your DNS zone.\n\n1. Click `Create`.\n\nOnce created, the *Zone Details* page loads.\n*NS* (Name server) and *SOA* (Start of authority) records are automatically created for your domain (for example `acmecorp.example`)\n\n### Configuring External DNS in Jenkins X\n\nOnce you have configured Google Cloud DNS, you can use browse the [Zones](https://console.cloud.google.com/net-services/dns/zones) page in your Google Cloud Platform project to setup your external domain.\n\n{{< alert >}}\nNOTE: External DNS will automatically update DNS records if you reuse the domain name, so if you delete an old cluster and create a new one it will preserve the same domain configuration for the new cluster.\n{{< /alert >}}\n\nTo setup External DNS:\n\n1. Choose a unique DNS name; you can use nested domains (for example, `cluster1.acmecorp.example`). Enter the name in the `DNS Name` field\n\n2. Run the `jx create domain` command against your domain name, for example:\n\n    ```sh\n    jx create domain gke --domain cluster1.acmecorp.example\n    ```\n\n    You will be prompted for information as needed during the setup:\n\n    1. Choose your Google Cloud Platform project from the available list.\n\n    1. Update your existing managed servers to use the displayed list of Cloud DNS nameservers. Copy the list for use in the next steps.\n\nNext up is configuring GCP:\n\n1. From the Google Cloud Platform [Zones](https://console.cloud.google.com/net-services/dns/zones) page, change the *Resource Record Type* to `NS`) and use the default values for your domain for for *TTL* (`5`) and *TTL Unit* (`minutes`).\n\n1. Add the first nameserver to the *Name server* field\n\n1. Click `Add item` and add any subsequent nameservers.\n\n1. Click `Create`.\n\nFinally, configure Jenkins X for the new domain names:\n\n1. Edit the `jx-requirements.yml` file and update the `domain` field (in `ingress`) to your domain name, for example `cluster1.acmecorp.example`\n\n1. In the *tls* setting, enable TLS with `enabled: true`\n\n   The resulting `jx-requirements.yml` entries for these settings should look similar to the example below:\n\n   ```yaml\n    gitops: true\n    ingress:\n      domain: cluster1.acmecorp.example\n      externalDNS: true\n      namespaceSubDomain: -jx.\n      tls:\n        email: certifiable@acmecorp.example\n        enabled: true\n        production: true\n    secretStorage: vault\n   ```\n\n{{< alert >}}\nRemember to run `jx boot` for the changes to take effect in your environment.\n{{< /alert >}}\n",
            "content/en/docs/install-setup/boot/clouds/on-premises.md": "---\ntitle: On-Premises\nlinktitle: On-Premises\ndescription: Using Boot On-Premises\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\nweight: 40\naliases:\n  - /docs/install-setup/boot/clouds/on-premise/\n  - /docs/install-setup/installing/boot/clouds/on-premise/\n---\n\nOn-premises kubernetes clusters tend to differ wildly so its hard for us to know your Jenkins X installation will totally work on any cluster given we typically rely on things like persistence, ingress, storage.\n\nHere are some recommendations to hopefully get you started. If you hit any issues please [join our community](/community/) we can hopefully help you.\n\n## Configuration\n\nPlease set your provider to `kubernetes` via this in your `jx-requirements.yml`:\n\n```yaml\nclusterConfig:\n    provider: kubernetes\n```\n\n### Ingress\n\nIf you don't have a real ingress solution for your on-premises cluster you can start off using the `nginx-controller` and the IP address of your api server.\n\nYou can set `ingress.domain` to be `1.2.3.4.nip.io` where `1.2.3.4` is the IP address of your ingress service.\n\nBy default boot will try to recreate the `ingress.domain` by discovering the IP address on the nginx controller service - which is commonly generated dynamically on the public clouds.\n\nIf you are on-premises and using a hard coded IP address for ingress you may want to set this on your `jx-requirements.yml`\n\n```yaml\nclusterConfig:\n    provider: kubernetes\ningress:\n  domain: 1.2.3.4.nip.io\n  ignoreLoadBalancer: true\n```\n\n## General advice\n\nWe recommend starting with the most simple possible installation and get that working, then gradually try to be more complex. e.g. start off by ignoring these features:\n\n* vault\n* DNS\n* TLS / certificates\n* cloud storage for artifacts\n\nThen once you have something working, incrementally try enabling each of those in turn.\n\nIf a helm step fails some resources may have already been created, running the step again will result in a conflict (resource already exists). To delete all created resource:\n\n* configure jx to keep the tmp folder with compiled helm files:\n\n    ```sh\n    export JX_NO_DELETE_TMP_DIR=true\n   ```\n\n* go to the tmp folder visible in the logs and execute\n\n    ```sh\n    helm template jenkins-x . --namespace jx | kubectl delete -f -\n    ```\n",
            "content/en/docs/install-setup/boot/git-provider.md": "---\ntitle: Configure SCM Providers / Git Providers\nlinktitle: Configure SCM Providers\ndescription: Configure SCM Providers / Git providers supported by Jenkins X\nkeywords: [git]\nweight: 40\naliases:\n  - /docs/install-setup/configure-scm/\n  - /docs/install-setup/installing/boot/git-provider/\n---\n\nJenkins X supports several different Git providers via webhooks (user-defined HTTP callbacks).\nThese webhooks trigger the Jenkins X Pipeline execution, based on repository events such as a push to the master branch or the creation of a pull request.\n\nThe default webhook handler for Jenkins X is [Lighthouse](/docs/reference/components/lighthouse/), which manages webhooks similarly to [Prow](https://github.com/kubernetes/test-infra/tree/master/prow).\nHowever, contrary to Prow, which only supports GitHub, Lighthouse supports a variety of Git providers.\n\nThe following sections describe how you change the Boot configuration to use the various supported Git providers.\nThe configuration occurs in all cases via [`jx-requirements.yml`](/docs/install-setup/boot/#requirements).\n\n{{% alert %}}\nAfter changing the configuration you need to make sure it gets applied by running the Boot pipeline.\nEither by running `jx boot` locally or by creating a pull request against the development repository.\nRefer to [changing your installation](/docs/install-setup/boot/#changing-your-installation) for more information.\n{{% /alert %}}\n\n## GitHub\n\nThis is the default Git provider if you don't specify one.\nExplicitly it is configured by _gitKind: github_ such as the following example:\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  gitKind: github\n```\n\n## GitHub Enterprise\n\n[GitHub Enterprise](https://github.com/enterprise) supports the same features as the github.com service but scaled for on-premises deployment on local networks.\n\nThe configuration is similar to the above but you need to specify the URL of the `gitServer` and `gitKind: github`.\nFor example:\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  gitKind: github\n  gitServer: https://github.myserver.com\nwebhook: lighthouse\n```\n\nEnsure you specify [Lighthouse](/docs/install-setup/boot/webhooks/#lighthouse) webhook handler by setting `webhook: lighthouse`.\n\n## Bitbucket Server\n\nFor Bitbucket Server specify the URL of the `gitServer` and `gitKind: bitbucketserver`.\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  gitKind: bitbucketserver\n  gitServer: https://bitbucket.myserver.com\nwebhook: lighthouse\n```\n\nEnsure you specify [Lighthouse](/docs/install-setup/boot/webhooks/#lighthouse) webhook handler by setting `webhook: lighthouse`.\n\n## Bitbucket Cloud\n\nFor Bitbucket Cloud specify`gitKind: bitbucketcloud`.\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  gitKind: bitbucketcloud\nwebhook: lighthouse\n```\n\nEnsure you specify [Lighthouse](/docs/install-setup/boot/webhooks/#lighthouse) webhook handler by setting `webhook: lighthouse`.\n\n## GitLab\n\nFor [GitLab](https://about.gitlab.com/stages-devops-lifecycle/source-code-management/) specify the URL of the `gitServer` and `gitKind: gitlab`.\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  gitKind: gitlab\n  gitServer: https://gitlab.com\nwebhook: lighthouse\n```\n\nEnsure you specify [Lighthouse](/docs/install-setup/boot/webhooks/#lighthouse) webhook handler by setting `webhook: lighthouse`.\n",
            "content/en/docs/install-setup/boot/how-it-works.md": "---\ntitle: How it works\nlinktitle: How it works\ndescription: How does Jenkins X Boot work\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\nweight: 20\naliases:\n  - /docs/getting-started/setup/boot/how-it-works/\n  - /docs/install-setup/installing/boot/how-it-works/\n---\n\n## Source Repositories\n\nBoot automatically sets up any source repositories which exist in the [repositories/templates](https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates) folder as [SourceRepository](/docs/reference/components/custom-resources/#sourcerepository)  custom resources and uses any associated [Scheduler](/docs/reference/components/custom-resources/#scheduler) custom resources to regenerate the Prow configuration.\n\nBoot also automatically creates or updates any required webhooks on the git provider for your [SourceRepository](/docs/reference/components/custom-resources/#sourcerepository) resources.\n\nIf you are using GitOps we hope to automate the population of the [repositories/templates](https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates) folder as you import/create projects.\nUntil then you can manually create a Pull Request on your boot git repository via [jx step create pullrequest repositories](/commands/jx_step_create_pullrequest_repositories/)\n\n## Pipeline\n\nThe install/upgrade process is defined in a [Jenkins X Pipeline](/about/concepts/jenkins-x-pipelines/) in a file called [jenkins-x.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml).\n\nTypically you won't need to edit this file; though if you do see the [editing guide](/about/concepts/jenkins-x-pipelines/).\n\n## Configuration\n\nThe boot process is configured using Helm style configuration in `values.yaml` files.\nThough we support a few [extensions to Helm](https://github.com/jenkins-x/jx/issues/4328).\n\n### Parameters file\n\nWe define a [env/parameters.yaml](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml) file which defines all the parameters either checked in or loaded from Vault or a local file system secrets location.\n\n#### Injecting secrets into the parameters\n\nIf you look at the current [env/parameters.yaml](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml) file you will see some values inlined and others use URIs of the form `local:my-cluster-folder/nameofSecret/key`. This currently supports 2 schemes:\n\n* `vault:` to load from a path + key from Vault\n* `local:` to load from a key in a YAML file at `~/.jx/localSecrets/$path.yml`\n\nThis means we can populate all the Parameters we need on startup then refer to them from `values.tmpl.yaml` to populate the tree of values to then inject those into Vault.\n\n### Populating the `parameters.yaml` file\n\nWe can then use the new step to populate the `parameters.yaml` file in the Pipeline via this command in the `env` folder:\n\n```sh\njx step create values --name parameters\n```\n\nThis uses the [parameters.tmpl.schema.json](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/parameters.tmpl.schema.json) file which powers the UI.\n\n### Improvements to values.yaml\n\n#### Support a tree of values.yaml files\n\nRather than a huge huge deeply nested values.yaml file we can have a tree of files for each App only include the App specific configuration in each folder. e.g.\n\n```sh\nenv/\n  values.yaml   # top level configuration\n  prow/\n    values.yaml #\u00a0prow specific config\n  tekton/\n    values.yaml  # tekton specific config\n```\n\nthen you can omit the `prow:` indentation in the `env/prow/values.yaml` file to make the YAML you create/edit smaller and simpler.\nIt also means longer term we can generate JSON schema files for each `env/$app/values.yaml` files so that we can support better editor/IDE integration.\n\n#### values.tmpl.yaml templates\n\nWhen using `jx step helm apply` we now allow `values.tmpl.yaml` files to use Go/Helm templates just like `templates/foo.yaml` files support inside Helm charts so that we can generate value/secret strings which can use templating to compose things from smaller secret values (for example, creating a maven `settings.xml` file or docker `config.json` which includes many user/passwords for different registries).\n\nWe can then check in the `values.tmpl.yaml` file which does all of this composition and reference the actual secret values via URLs (or template functions) to access vault or local vault files\n\nTo do this we use expressions like: `{{ .Parameter.pipelineUser.token }}` somewhere in the `values.tmpl.yaml` values file. So this is like injecting values into the helm templates; but it happens up front to help generate the `values.yaml` files.\n",
            "content/en/docs/install-setup/boot/ingress.md": "---\ntitle: Configure Ingress\nlinktitle: Configure Ingress\ndescription: Configure Ingress, DNS and TLS\nweight: 65\naliases:\n  - /docs/install-setup/installing/boot/ingress/\n---\n\n## Ingress\n\nIf you don't specify anything in your [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) file then Boot will default to using HTTP (rather than HTTPS) and using [nip.io](https://nip.io/) as the DNS mechanism.\n\nAfter running Boot your `jx-requirements.yml` may look like:\n\n```yaml\ncluster:\n  provider: gke\n  clusterName: my-cluster-name\n  environmentGitOwner: my-git-org\n  project: my-gke-project\n  zone: europe-west1-d\nenvironments:\n- key: dev\n- key: staging\n- key: production\ningress:\n  domain: 1.2.3.4.nip.io\n  externalDNS: false\n  tls:\n    email: \"\"\n    enabled: false\n    production: false\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\nIf you wish to enable external DNS (to automatically register DNS names for all of your exported services) a DNS domain name or TLS then modify the `ingress` section of your to add `ingress.domain` and `ingress.externalDNS = true` in `jx-requirements.yml` file and re-run `jx boot`.\nThere's a complete example below.\n\nYou can also update your configuration to enable TLS via `ingress.tls.enabled = true`. Here's an example:\n\n```yaml\ncluster:\n  clusterName: mycluster\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: github\n  gitServer: https://github.com\n  namespace: jx\n  provider: gke\n  vaultName: jx-vault-myname\nenvironments:\n- key: dev\n- key: staging\n- key: production\ngitops: true\ningress:\n  domain: my.domain.com\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: someone@acme.com\n    enabled: true\n    production: true\nkaniko: true\nsecretStorage: vault\nstorage:\n  logs:\n    enabled: true\n    url: gs://jx-prod-logs\n  reports:\n    enabled: false\n    url: \"\"\n  repository:\n    enabled: false\n    url: \"\"\nwebhook: prow\n```\n",
            "content/en/docs/install-setup/boot/repository.md": "---\ntitle: Configure Artifact Repositories\nlinktitle: Configure Artifact Repositories\ndescription: Configure various artifact repositories used by Jenkins X\nweight: 80\nkeywords: [nexus, bucketrepo]\naliases:\n  - /docs/install-setup/installing/boot/repository/\n---\n\n## Repository\n\nJenkins X lets you configure different artifact repositories.\nWe use artifact repositories to:\n\n- store artifacts from some kinds of build (e.g. Java builds tend to deploy jars, `pom.xml` files and tarballs)\n- act as a Maven proxy to cache maven dependencies when using java/maven builds\n- implement a chart repository for releasing helm charts\n\n### Nexus\n\nBy default if you don't make any explicit configuration then Jenkins X uses:\n\n- [Nexus](https://www.sonatype.com/nexus-repository-oss) as an artifact repository to store artifacts (e.g. Java jars, `pom.xml` files, tarballs or npm modules etc)\n- [ChartMuseum](https://chartmuseum.com/) as a repository of charts\n\nYou can explicitly configure nexus via the following `jx-requirements.yml` file:\n\n```yaml\nrepository: nexus\n```\n\n### Bucketrepo\n\nThe [bucketrepo](https://github.com/jenkins-x/bucketrepo) chart is a small footprint microservice that is an alternative to both [Nexus](https://www.sonatype.com/nexus-repository-oss) and [Chartmusem](https://chartmuseum.com/) which can:\n\n- act as a Maven proxy to cache maven dependencies when using java/maven builds\n- act as an artifact repository (e.g. to deploy maven artifacts)\n- implement a chart repository for releasing helm charts\n\nTo enable `bucketrepo` use the following `jx-requirements.yml` file:\n\n```yaml\nrepository: bucketrepo\n```\n\nBy default the local file system in the bucket repo is used to store artifacts.\n\nTo enable cloud storage for artifacts in `bucketrepo` you need to enable the `storage.repository` configuration in which case a cloud bucket is used instead. See the [storage section for more details](/docs/install-setup/boot/storage).\n\n### None\n\nIf you want to disable the artifact repository (nexus) but still use ChartMuseum for charts you can use the following:\n\n```yaml\nrepository: none\n```\n\nNote that without using an artifact repository you will not be able to deploy Maven artifacts; though [ChartMuseum](https://chartmuseum.com/) will still be used as a repository of charts.\n",
            "content/en/docs/install-setup/boot/secrets.md": "---\ntitle: Configure Secret Storage\nlinktitle: Configure Secret Storage\ndescription: Configure secret storage - local vs Vault\nkeywords: [vault]\nweight: 30\naliases:\n  - /docs/install-setup/installing/boot/secrets/\n---\n\n## Secrets\n\nBoot currently supports the following options for managing secrets:\n\n- _local_ - secrets are stored locally on your machine.\n  This is useful for evaluating Jenkins X and avoids the need to install Vault.\n  It is not recommended to use this option in production.\n- _vault_ - the recommended approach for secret management, allowing a team to easily colloborate managing a Jenkins X cluster using Boot.\n\nLike many other key components of Jenkins X, the secret storage method is configured in [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml).\n\nThe following paragraphs outline the two options in more detail.\n\n### Local\n\nThis is the default option for managing secrets.\nIt can be explicitly configured via `secretStorage: local` in `jx-requirements.yml`:\n\n```yaml\nsecretStorage: local\n```\n\nIf enabled secrets are loaded/saved into the folder `~/.jx/localSecrets/$clusterName`.\nYou can use `$JX_HOME` to change the location of `~/.jx`.\n\n### Vault\n\nThere are two ways you can use Vault in Jenkins X.\nIf you are already a Vault instance, you can configure Jenkins X to use this instance to store its secrets.\nThis way you have a central location for managing all secrets of your infrastucture.\nThis approach is referred to as the _external_ Vault setup.\n\n{{% alert %}}\nIn case you are looking for a way to run Vault in your Kubernetes cluster, have a look at the offical [Vault Helm Chart](https://github.com/hashicorp/vault-helm).\n{{% /alert %}}\n\nIf you do not have a Vault instance, Jenkins X can, depending on where you run your cluster, install Vault as part of the installation process.\nIn this case, the [Bank-Vaults operator](https://github.com/bank-vaults/vault-operator) is provisioned in the Jenkins X development namespace.\nThis apporach is referred to as the _internal_ Vault setup.\n\n#### Internal\n\nThis approach is currently only supported for GKE and EKS clusters.\nIt can be explicitly configured via `secretStorage: vault`:\n\n```yaml\ncluster:\n  provider: gke\nsecretStorage: vault\n```\n\nAfter a successful run of `jx boot`, `jx-requirements.yml` will also contain a Vault configuration section containing the following information:\n\n```yaml\nvault:\n  name: <cluster-name>\n  bucket: <cluster-name>-<generated-id>\n  key: <cluster-name>-<generated-id>\n  keyring: <cluster-name>-<generated-id>\n  serviceAccount: <cluster-name>-vt\n```\n\nThe Vault configuration options are in this case generated and should not be modified.\nThey also differ between cloud providers.\n\n#### External\n\nIn the case where you have an existing Vault instance and you want Jenkins X to store its secrets there, you also set `secretStorage: vault`.\nOn top setting _secretStorage_ to _vault_, you have to specify the mandatory _url_ and _serviceAccount_ options.\n\n_url_ specifies the URL to your existing Vault instance and _serviceAccount_ is the Kubernetes service account which is allowed to authenticate using Vault's [Kubernetes Auth Method](https://www.vaultproject.io/docs/auth/kubernetes).\n\n```yaml\nsecretStorage: vault\nvault:\n  kubernetesAuthPath: \"kubernetes\"\n  secretEngineMountPoint: \"secret\"\n  serviceAccount: my-sa\n  url: https://my-vault.com\n```\n\n_kubernetesAuthPath_ and _secretEngineMountPoint_ are optional and default to _\"secret\"_ and _\"kubernetes\"_.\n_kubernetesAuthPath_ specifies the path under which the Kubernetes auth method is enabled for your Jenkins X cluster.\n_secretEngineMountPoint_ specifies the mount point for the KV engine Jenkins X is supposed to use.\nThe current design requires that each Jenkins X cluster gets its own Vault [KV secret engine](https://www.vaultproject.io/docs/secrets/kv).\n\nApart of the Jenkins X configuration in `jx-requirements.yml`, you need to configure the following:\n\n1. Create service account and namespace in your Jenkins X cluster used to authenticate against Vault\n1. Enable the Vault Kubernetes Auth\n1. Create Vault policy for authenticating service account\n1. Create authentication role for service account\n1. Configure Kubernetes Auth\n1. Enable the Vault KV secret engine\n\nThe following script can help you to make the required preparation.\n\n```sh\nexport VAULT_ADDR=<url-to-vault-instance>\nexport VAULT_TOKEN=<vault-token>\n\nkubernetes_api_url=<url-to-jenkins-x-cluster>\nnamespace=<service-account-namespace>\nservice_account_name=<service-account-name>\nsecret_mount_path=secret\nkubernetes_auth_path=kubernetes\n\n# 1.\nread -r -d '' role_binding << EOF\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: role-tokenreview-binding\n  namespace: ${namespace}\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: ${service_account_name}\n  namespace: ${namespace}\nEOF\n\nkubectl create namespace ${namespace}\nkubectl -n ${namespace} create serviceaccount ${service_account_name}\necho \"$role_binding\" | kubectl apply -n ${namespace} -f -\n\nservice_account_secret=$(kubectl -n ${namespace}  get sa ${service_account_name} -o jsonpath=\"{.secrets[*]['name']}\")\nservice_account_jwt=$(kubectl -n ${namespace} get secret ${service_account_secret} -o jsonpath=\"{.data.token}\" | base64 --decode; echo)\nservice_account_cert=$(kubectl -n ${namespace} get secret ${service_account_secret} -o jsonpath=\"{.data['ca\\.crt']}\" | base64 --decode; echo)\n\n# 2.\nvault auth enable -path=${kubernetes_auth_path} kubernetes\n\n# 3.\nvault policy write ${service_account_name} - <<EOF\npath \"${secret_mount_path}/*\" {\n   capabilities = [\"create\", \"update\", \"read\", \"delete\", \"list\"]\n}\nEOF\n\n# 4.\nvault write auth/${kubernetes_auth_path}/role/${service_account_name} bound_service_account_names=${service_account_name}  bound_service_account_namespaces=${namespace} policies=${service_account_name} ttl=24h\n\n# 5.\nvault write auth/${kubernetes_auth_path}/config token_reviewer_jwt=${service_account_jwt} kubernetes_host=${kubernetes_api_url} kubernetes_ca_cert=\"${service_account_cert}\"\n\n# 6.\nvault secrets enable -path=${secret_mount_path} kv-v2\n```\n\nYou can verify the Vault configuration by running:\n\n```sh\nnamespace=<service-account-namespace>\nservice_account_name=<service-account-name>\nservice_account_jwt=$(kubectl -n ${namespace} get secret ${service_account_name} -o jsonpath=\"{.data.token}\" | base64 --decode; echo)\nkubernetes_auth_path=kubernetes\n\nvault write auth/${kubernetes_auth_path}/login role=${service_account_name} jwt=${service_account_jwt}\n```\n",
            "content/en/docs/install-setup/boot/storage.md": "---\ntitle: Configure Storage\nlinktitle: Configure Storage\ndescription: Configure long term storage for logs and reports\nkeywords: [logs]\nweight: 60\naliases:\n  - /install-setup/installing/boot/storage/\n---\n\n## Storage\n\nthe [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) file can configure whether you want to use long-term storage for logs + reports and what cloud storage buckets to use to store the data.\n\ne.g. the following `jx-requirements.yml` file enables long-term storage:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: true\n  reports:\n    enabled: false\n  repository:\n    enabled: false\n```\n\nYou can also specify the URLs of the storage buckets in the `storage` section.\nThe following URL syntax is supported\n\n- `gs://anotherBucket/mydir/something.txt` : using a GCS bucket on GCP\n- `s3://nameOfBucket/mydir/something.txt` : using S3 bucket on AWS\n- `azblob://thatBucket/mydir/something.txt` : using an Azure bucket\n- `http://foo/bar` : file stored in Git not using HTTPS\n- `https://foo/bar` : file stored in a Git repo using HTTPS\n\ne.g.\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n    url: gs://my-logs\n  reports:\n    enabled: false\n    url: gs://my-logs\n  repository:\n    enabled: false\n    url: gs://my-repo\n```\n\n{{< pageinfo >}}\n**NOTE** On GKE your node-pool requires additional permissions to write into GCS buckets,\nfor more information on this view the [GKE Storage Permissions](https://jenkins-x.io/docs/resources/guides/managing-jx/common-tasks/storage/#gke-storage-permissions)\n{{< /pageinfo >}}\nFor more details see the [Storage Guide](https://jenkins-x.io/architecture/storage/).\n\n## Ingress\n\nIf you don't specify anything in your [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) file then boot will default to using HTTP (rather than HTTPS) and using [nip.io](https://nip.io/) as the DNS mechanism.\n\nAfter running boot your `jx-requirements.yml` may look like:\n\n```yaml\ncluster:\n  provider: gke\n  clusterName: my-cluster-name\n  environmentGitOwner: my-git-org\n  project: my-gke-project\n  zone: europe-west1-d\nenvironments:\n- key: dev\n- key: staging\n- key: production\ningress:\n  domain: 1.2.3.4.nip.io\n  externalDNS: false\n  tls:\n    email: \"\"\n    enabled: false\n    production: false\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\nIf you wish to enable external DNS (to automatically register DNS names for all of your exported services) a DNS domain name or TLS then modify the `ingress` section of your to add `ingress.domain` and `ingress.externalDNS = true` in `jx-requirements.yml` file and re-run `jx boot`.\nThere's a complete example below.\n\nYou can also update your configuration to enable TLS via `ingress.tls.enabled = true`. Here's an example:\n\n```yaml\ncluster:\n  clusterName: mycluster\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: github\n  gitServer: https://github.com\n  namespace: jx\n  provider: gke\n  vaultName: jx-vault-myname\nenvironments:\n- key: dev\n- key: staging\n- key: production\ngitops: true\ningress:\n  domain: my.domain.com\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: someone@acme.com\n    enabled: true\n    production: true\nkaniko: true\nsecretStorage: vault\nstorage:\n  logs:\n    enabled: true\n    url: gs://jx-prod-logs\n  reports:\n    enabled: false\n    url: \"\"\n  repository:\n    enabled: false\n    url: \"\"\nwebhook: prow\n```\n",
            "content/en/docs/install-setup/boot/webhooks.md": "---\ntitle: Configure Webhooks\nlinktitle: Configure Webhooks\ndescription: Configure Webhooks\nweight: 70\naliases:\n  - /docs/install-setup/installing/boot/ingress/\n  - /docs/install-setup/installing/boot/webhooks/\n---\n\n## Webhook\n\nJenkins X supports a number of engines for handling webhooks and optionally supporting [ChatOps](/docs/resources/faq/using/chatops/).\n\n[Prow](/docs/reference/components/prow/) and [Lighthouse](/architecture/lighthouse/) support webhooks and [ChatOps](/docs/resources/faq/using/chatops/) whereas Jenkins just supports webhooks.\n\n### Prow\n\n[Prow](/docs/reference/components/prow/) is currently the default webhook and [ChatOps](/docs/resources/faq/using/chatops/) engine when using [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) with [Tekton](https://tekton.dev/) and GitHub.\n\nIt's configured via the `webhook: prow` in `jx-requirements.yml`\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n### Lighthouse\n\n[Lighthouse](/architecture/lighthouse/) is currently the default webhook and [ChatOps](/docs/resources/faq/using/chatops/) engine when using [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) with [Tekton](https://tekton.dev/) and a git server other than https://github.com.\n\nOnce Lighthouse is more stable and well tested we'll make it the default for all installations using [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/).\n\nIt's configured via the `webhook: lighthouse` in `jx-requirements.yml`\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: lighthouse\n```\n\n### Jenkins\n\nTo use a Jenkins server in boot for processing webhooks and pipelines configure it via `webhook: jenkins` in `jx-requirements.yml`\n",
            "content/en/docs/install-setup/create-cluster/_index.md": "---\ntitle: Create cluster\nlinktitle: Create cluster\ndescription: How to prepare a Kubernetes cluster for Jenkins X\nweight: 20\ncategories: [getting started]\nkeywords: [cluster]\naliases:\n  - /getting-started/create-cluster\n  - /docs/getting-started/setup/create-cluster/\n  - /docs/getting-started/setup/create-cluster\n  - /docs/install-setup/create-cluster\n  - docs/install-setup/create-cluster\n  - /docs/install-setup/installing/create-cluster/\n---\n\nJenkins X runs on a Kubernetes cluster.\nThere are a number of approaches for creating this cluster.\nOur recommended approach is to use a cloud provider to create and manage your Kubernetes clusters.\nWe also recommend using [Terraform](https://www.terraform.io) to set up and manage all required cloud infrastructure.\n\nTo make this as easy as possible, we are providing\n[Terraform Modules](https://www.terraform.io/docs/modules/index.html) for the most popular cloud providers:\n- [AKS](https://github.com/jenkins-x/terraform-azurerm-jx)\n- [EKS](https://github.com/jenkins-x/terraform-aws-eks-jx)\n- [GKE](https://github.com/jenkins-x/terraform-google-jx)\n\nThe modules can be found in the [Terraform Registry](https://registry.terraform.io/search?q=jx), as well as on [GitHub](http://github.com/jenkins-x?q=terraform-).\n\nIf you want to know more about which cloud resources are required by Jenkins X and created by Terraform refer to [Required cloud resources](/docs/getting-started/setup/create-cluster/required-cloud-resources).\n",
            "content/en/docs/install-setup/create-cluster/required-cloud-resources.md": "---\ntitle: Required cloud resources\nlinktitle: Required cloud resources\ndescription: What cloud resources are created?\nweight: 20\ncategories: [getting started]\nkeywords: [cluster]\naliases:\n  - /docs/getting-started/setup/create-cluster/required-cloud-resources/\n  - /docs/install-setup/installing/create-cluster/required-cloud-resources/\n---\n\nNo matter which Terraform module you choose, each will create a similar set of resources.\nMost importantly it will create the Kubernetes cluster of course, but there are a other aspects as well.\n\n## Cloud APIs\n\nTerraform enables all required cloud provider APIs.\n\n## Storage\n\nLogs, test reports and build artifacts, but also backups and secrets are stored in cloud storage (buckets).\nOne task of the Terraform module is to create these buckets.\nSome buckets are optional and you can configure whether they get created or not.\nRefer to the documentation for your cloud provider specific Terraform module for more information.\n\nIf all storage options are enabled, the following buckets are created:\n{{% description-list %}}\n\n* Log bucket; Bucket for storing build logs.\nRefer to [Configuring Storage](/docs/resources/guides/managing-jx/common-tasks/storage#configuring-storage) for more information.\n* Report bucket; Bucket for storing test and coverage reports.\nRefer to [Configuring Storage](/docs/resources/guides/managing-jx/common-tasks/storage#configuring-storage) for more information.\n* Repository bucket; Bucket used for storing artifacts when using [Bucketrepo](/docs/install-setup/boot/repository//#bucketrepo).\nBucketrepo  is a small footprint microservice that is an alternative to both Nexus and Chartmusem.\n* Velero bucket; Bucket for [Velero](https://velero.io) backups.\n* Vault bucket; Bucket used by Vault for storing its data.\nJenkins X uses Vault to store secrets.\nRefer to [Vault](/docs/install-setup/boot/secrets/#vault) for more information.\n\n{{% /description-list %}}\n\n## Permission management\n\nSeveral Jenkins X services need to interact with the underlying cloud infrastructure.\nFor example, the Build Controller needs to be able to store log files into the log storage bucket.\nAnother example is [ExternalDNS](https://github.com/kubernetes-sigs/external-dns) creating dynamically new DNS entries for services.\nIn this case ExternalDNS service needs access to the DNS APIs of the underyling cloud provider.\n\nTo ensure that each service gets only the permissions it needs to fulfill its responsibilty, cloud providers allow to bind Kubernetes service accounts to cloud provider specific service announts or roles.\nThe mechanism to achieve this varies between cloud providers.\nFor Google Cloud it is called [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) and for AWS [IAM Roles for Service Accounts](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html).\nIt is the resposibilty of the corresponding Terraform module to configure these permissions.\n\nAt the moment Kubernetes service accounts for the following areas are created:\n\n{{% description-list %}}\n\n* Tekton; Service account used by Tekton for the actual pipeline execution.\nThe Tekton service account needs permissions to read and write to cloud storage.\nThe name of the service account is _tekton-bot_.\n* Build Controller; Service account used by the Build Controller service which is responsible to track the overall progress of pipeline executions.\nThe Build Controller service account needs permissions to read and write to cloud storage.\nThe name of the service account is _jenkins-x-controllerbuild_.\n* DNS; There are three Kubernetes services accounts created related to DNS.\nOne for ExternalDNS with the name _exdns-external-dns_ and two for [cert-manager](https://github.com/jetstack/cert-manager), namely _cm-cert-manager_ and _cm-cainjector_.\nEach of these services need access to the DNS API of the cloud provider.\n* Vault; Service account used by the Vault operator.\nThe Vault service account needs permissions to read and write to cloud storage and access to kryptographic key managment.\nThe name of the service account is _\\<cluster-name\\>-vt.\n* Velero; Service account used by the Velero backup service.\nThe Velero service account needs permissions to read and write to cloud storage.\nThe name of the service account is _velero-server_\n* Kaniko; Service account used by [Kaniko](https://github.com/GoogleContainerTools/kaniko) which is a safer option to build Docker images in Kubernetes than the Docker daemon.\nThe Kaniko service account needs permissions to read and write to cloud storage.\nThe name of the service account is _kaniko-sa_.\n\n{{% /description-list %}}\n\n## Cryptographic key management\n\nFor using the Vault Operator, the Terraform module needs to create a cryptographic keyring and key to seed Vault.\n",
            "content/en/docs/install-setup/install-binary/_index.md": "---\ntitle: Download the jx binary\nlinktitle: Download jx\ndescription: How to download and install the jx binary on your machine\nweight: 30\nkeywords: [install]\naliases:\n    - /getting-started/install/\n    - /docs/getting-started/setup/install/\n    - /docs/install-setup/installing/install-binary/\n---\n\nPick the most suitable instructions for your operating system:\n\n## macOS\n\n1. Download the `jx` binary\n\n    On a Mac you can use [brew](https://brew.sh/):\n\n    ```sh\n    brew install jenkins-x/jx/jx\n    ```\n\n    Alternatively, download the `jx` binary archive using `curl` and pipe (`|`) the compressed archive to\n    the `tar` command:\n\n    ```sh\n    curl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-darwin-amd64.tar.gz\" | tar xzv \"jx\"\n    ```\n\n1. Install the `jx` binary by moving it to a location in your executable path using using the `mv` command:\n\n    ```sh\n    sudo mv jx /usr/local/bin\n    ```\n\n1. Run `jx version --short` to make sure you're on the latest stable version\n\n   ```sh\n   jx version --short\n   ```\n\n## Linux\n\nTo install Jenkins X on Linux, download the `.tar` file, and unarchive it in a directory where you can run the `jx` command.\n\n1. Download the `jx` binary archive using `curl` and pipe (`|`) the compressed archive to\n    the `tar` command:\n\n    ```sh\n    curl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n    ```\n\n1. Install the `jx` binary by moving it to a location in your executable path using using the `mv` command:\n\n    ```sh\n    sudo mv jx /usr/local/bin\n    ```\n\n1. Run `jx version --short` to make sure you're on the latest stable version\n\n    ```sh\n    jx version --short\n    ```\n\n## Windows\n\nYou can install Jenkins X on Windows through Chocolatey, a third-party package management system that provides convenient one-step commands for local Jenkins X installations and upgrades.\n\nInstall the Chocolatey package management system using an Administrative\nShell:\n\n1. Right-click menu:Start\\[Command Prompt (Admin)\\].\n\n1. At the shell prompt, execute a `powershell.exe` command to download\n    and install the `choco` binary and set the installation path so that\n    the binary can be executed:\n\n    ```shell\n    @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n    ```\n\n1. Install Jenkins X using Chocolatey:\n\n    ```shell\n    choco install jenkins-x\n    ```\n\n    You can update to the latest version of Jenkins X using Chocolatey:\n\n    ```sh\n    choco upgrade jenkins-x\n    ```\n\n1. If you use [scoop](https://scoop.sh), then there is a [manifest available](https://github.com/lukesampson/scoop/blob/master/bucket/jx.json).\n\n    To install the `jx` binary run:\n\n    ```sh\n    scoop install jx\n    ```\n\n    To upgrade the `jx` binary run:\n\n    ```sh\n    scoop update jx\n    ```\n\n## Other platforms\n\n[Download the binary](https://github.com/jenkins-x/jx/releases) for `jx` and add it to your `$PATH`\n\nOr you can try [build it yourself](/docs/contributing/).\nThough if build it yourself please be careful to remove any older `jx` binary so your local build is found first on the `$PATH` :)\n",
            "content/en/docs/install-setup/installing/boot/clouds/openshift.md": "---\ntitle: OpenShift\nlinktitle: OpenShift\ndescription: Using Boot On OpenShift\ndate: 2020-05-06\npublishdate: 2020-05-06\nlastmod: 2020-05-06\nweight: 200\n---\n\n{{% alert title=\"Warning\" color=\"warning\" %}}\nThis documentation will help you getting Jenkins X installed on OpenShift with minimum supported features as it's still a work in progress.\n\nFeatures like Vault integration and Long Term Storage for logs and artifacts are still not supported.\n{{% /alert %}}\n\nThe OpenShift installation documentation will be split in two categories:\n\n - Installing OpenShift with admin permissions.\n - Installing OpenShift with restricted permissions.\n\n\nHere are some recommendations to hopefully get you started. If you hit any issues please [join our community](/community/) we can hopefully help you.\n\n\n\n## Common configuration\n\nPlease set your provider to `openshift` via this in your `jx-requirements.yml`:\n\n```yaml    \nclusterConfig:\n    provider: openshift\n```\n\n### Routes\n\nWith OpenShift, during the installation with Ansible, you are asked to provide an existing domain, the management of Routes is done directly by the cluster.\n\nThis means that, even if `nginx-ingress-controller` is installed, it will not be taken into account when managing routes.\n\nTo make Jenkins X work with your `Routes` and your defined cluster `Domain`, you will need to modify the `jx-requirements.yml` file like this:\n\n```yaml    \ningress:\n  domain: <your_openshift_domain>\n  exposer: Route\n```\n`ExposeController` will be configured to use Routes with the domain that you provided.\n\n### TLS\n\nAs the domain will be created and managed by the cluster before Jenkins X is installed, the domain will need to be secured independently. \n\nThis means that the usual Jenkins X `cert-manager` integration will do nothing on OpenShift.\n\nIf you need your OpenShift domain to be secured, you will need to manage `cert-manager` and your `Issuer` and `Certificate` yourself.    \n\n### External Docker Registry\n\nRight now, the supported way to store your docker images is using an external Docker registry like Docker Hub.\n\nTo configure it, you'll need to modify `jx-requirements.yml` like:\n\n```yaml    \nclusterConfig:\n  registry: docker.io\n```\nDuring the boot process, you will be asked `Do you want to configure non default Docker Registry?`. You'll need to answer yes and provide extra information to connect to Docker Hub.\n\n```console\n? Docker Registry Url https://index.docker.io/v1/\n? Docker Registry username <your_dockerhub_username>\n? Docker Registry password [? for help] <your_dockerhub_password>\n? Docker Registry email <your_dockerhub_email>\n```\n## General advice\n\nWe recommend starting with the most simple possible installation and get that working, then gradually try to be more complex. e.g. start off by ignoring these features:\n\n* vault\n* cloud storage for artifacts\n\nThen once you have something working, incrementally try enabling each of those in turn. \n\n## Installing Jenkins X with admin rights\n\nIf you have admin rights in your OpenShift cluster and no restrictions to use cluster-wide permissions on services, this will be the preferred way to proceed.\n\nYou'll simply need to modify the `jx-requirements.yml` file with the recommended configuration explained above and run `jx boot`.\n\n## Installing Jenkins X with restricted permissions\n\nWhile the preferred way to install Jenkins X is with admin rights, OpenShift is aimed for the enterprise user.\n\nThis usually means having very limited permissions like not being able to create namespaces, not being able to use cluster-wide permissions etc.\n\nIn this case, the installation will need to be split in two phases:\n\n - Cluster admin phase\n - Restricted permissions phase\n\nYour user may have admin rights and still want to install Jenkins X with limited permissions, so there will just be a phase in this case, but it will need to be configured to let Jenkins X know how to install itself.\n\n### Basic configuration\n\nIn order to let Jenkins X know that it should install all of its resources with limited permissions, you'll need to edit `jx-requirements.yml` like:\n\n```yaml    \nclusterConfig:\n  strictPermissions: true\n```\n\nWhat this flag will do is the following: \n\n- It will default to `Roles` and `RoleBindings` instead of `ClusterRoles` and `ClusterRoleBindings`.\n\n- It will avoid creating any resource that needs to have cluster level permissions.\n\n- It will create additional `Roles` in configured namespaces so certain controllers can work on different namespaces like `jx`, `jx-staging` and `jx-production`.\n\n- It will use the `ControllerRole` and `EnvironmentRoleBindings` to copy the `tekton-bot` role to configured namespaces.\n\nFor now, it also comes with a limitation: Previews will not work on this kind of cluster. We are working on enabling them using a different mechanism.\n\n### Cluster Admin phase\n\nThis phase will need to be executed by an user with cluster-admin role or with enough permissions to install `CustomResourceDefinitions`, `SecurityContextConstraints`, `ClusterRoles`, `ClusterRoleBindings` etc.\n\n#### Jenkins X CRDS:\n\nThe admin will need to install Jenkins X `CustomResourceDefinitions` by executing:\n\n```console\njx upgrade crd\n```\n\n#### Manifests\n\nThese manifest files will need to be executed in order:\n\n\n* Tekton CRDS:\n```console\nkubectl apply --wait -f https://raw.githubusercontent.com/jenkins-x/jenkins-x-boot-config/master/kubeProviders/openshift/templates/tekton-crds.yaml\n```\n\n* Namespaces:\n```console    \nkubectl apply --wait -f https://raw.githubusercontent.com/jenkins-x/jenkins-x-boot-config/master/kubeProviders/openshift/templates/namespaces.yaml\n```\n* Service Accounts\n```console\nkubectl apply --wait -f https://raw.githubusercontent.com/jenkins-x/jenkins-x-boot-config/master/kubeProviders/openshift/templates/service-accounts.yaml\n```\n\n* JX Admin Role\n```console\nkubectl apply --wait -f https://raw.githubusercontent.com/jenkins-x/jenkins-x-boot-config/master/kubeProviders/openshift/templates/jx-admin-role.yaml\n```\n\n* ControllerBuild SecurityContextConstraint\n```console\nkubectl apply --wait -f https://raw.githubusercontent.com/jenkins-x/jenkins-x-boot-config/master/kubeProviders/openshift/templates/controller-build-scc.yaml\n```\n\nAfter running these manifests, the admin will need to provide an user with the `jx-admin` role in different namespaces:\n\n```console\noc adm policy add-role-to-user jx-admin <username> --role-namespace jx --namespace jx\noc adm policy add-role-to-user jx-admin <username> --role-namespace jx-staging --namespace jx-staging\noc adm policy add-role-to-user jx-admin <username> --role-namespace jx-production --namespace jx-production\n```\n\n### Restricted permissions phase\n\nAfter the cluster admin has created all the necessary resources, the restricted permissions phase can begin.\n\nThis can now be executed by the user that was assigned the `jx-admin` role in the Cluster Admin phase.\n\n#### Preparation\n\nJust one more small change is needed.\n\nThere are certain steps within `jenkins-x.yaml` that will fail to execute in this phase. Right now, there's no way to conditionally skip steps so these steps will need to be manually removed from the file.\n\nThese steps are:\n\n- install-jx-crds\n- install-velero\n- install-velero-backups\n- install-nginx-controller\n- install-external-dns\n- install-cert-manager-crds\n- install-cert-manager\n- install-acme-issuer-and-certificate\n\nOnce this is done, the installation can proceed as usual, by executing:\n\n```console\njx boot\n```",
            "content/en/docs/install-setup/next.md": "---\ntitle: What's next?\nlinktitle: What's next?\ndescription: What to do after Jenkins X is installed on a Kubernetes cluster\nweight: 70\ndraft: true\ntoc_hide: true\n---\n\nOK so you have [got the jx CLI](/getting-started/install/) and you either\n\n* [created a Kubernetes cluster with Jenkins X](/getting-started/create-cluster/)\n* [installed Jenkins X on an existing kubernetes cluster](/getting-started/install-on-cluster/)\n\nSo whats next?\n\nWell the [Using Jenkins X](/docs/resources/guides/using-jx/) section contains the next steps you may want to try out, such as\n\n* [create a new Spring Boot application and import it into Jenkins X](/docs/resources/guides/using-jx/common-tasks/create-spring/)\n* [create a new quickstart and import it into Jenkins X](/docs/getting-started/first-project/create-quickstart/)\n* [import existing source code into Jenkins X](/docs/resources/guides/using-jx/creating/import/)\n* [browsing](/docs/resources/guides/using-jx/developing/browsing/) for browsing pipelines, builds, apps and activity\n\nYou may also want to check out the [various demonstrations of what you can do with Jenkins X](/demos/)\n\nIf you're looking for a UI check out [Octant the open source web UI for Jenkins X](/docs/reference/components/ui/)",
            "content/en/docs/install-setup/security-features.md": "---\ntitle: Secure Jenkins X\nlinktitle: Secure Jenkins X\ndescription: Security addons for Jenkins X\nweight: 60\nmenu:\n  docs:\n    parent: \"Install and Setup\"\n    title: \"Securing Jenkins X\"\naliases:\n    - /docs/resources/guides/managing-jx/common-tasks/security-features/\ndraft: true\n---\n\nJenkins X has a few useful addons that can aid with ensuring the ongoing security of your deployed applications. There are static and container security, as well as dynamic security addons available.\n\n### Static security\n\nThe [Anchore Engine](https://github.com/anchore/anchore-engine) is used to provide image security, by examining contents of containers either in pull request/review state, or on running containers.\n\nThis was introduced [in this blog post](https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/)\n\nTo enable this run the following command and let it prepare the services:\n\n```sh\njx create addon anchore\n```\n\nThis will launch the require engine and services, and make it available to run on any of your teams environments, and on any running preview applications.\n\nTo try it out, you can use the following command to report on any problems found:\n\n```sh\njx get cve --environment=staging\n```\n\nHere is a video [showing it in action](https://youtu.be/rB8Sw0FqCQk). To remove this addon:\n\n```sh\njx delete addon anchore\n```\n\n### Dynamic security\n\nThe Open Web Application Security Project publishes a tool called ZAP: the [Zed Attack Proxy](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project). This provides various tools including a baseline command that can be run against an application endpoint looking for a base set of problems.\n\nIn Jenkins X this can be run against a Preview Application (that each application gets) by creating a post-preview hook:\n\n```sh\njx create addon owasp-zap\n```\n\nAny pull requests will then have their preview application run through the ZAP baseline scan, and should any failures be detected it will fail the CI pipeline automatically. The pipelines do not be changed to run this test, and they will apply to all pull requests for the team.\n\nTo remove the ZAP test:\n\n```sh\njx delete post preview job --name owasp-zap\n```\n\nThe post preview hook can also be configured with a command like:\n\n```sh\njx create post preview job --name owasp --image owasp/zap2docker-weekly:latest -c \"zap-baseline.py\" -c \"-I\" -c \"-t\" -c \"\\$(JX_PREVIEW_URL)\"\n```\n\nYou can have multiple hooks configured, so if you had specific containers that had probes/tests you would like to run against every preview app (ie every pull request) you could add it this way.\n\n[Preview Environments](/docs/reference/preview/)\n",
            "content/en/docs/install-setup/upgrade-jx.md": "---\ntitle: Upgrade Jenkins X\nlinktitle: Upgrade Jenkins X\ndescription:  Instructions on upgrading your Jenkins X installation\ndate: 2019-05-01\npublishdate: 2019-05-01\nlastmod: 2020-06-09\ncategories: [tutorials]\nkeywords: [usage,docs]\nweight: 50\nmenu:\n  docs:\n    parent: \"Install and Setup\"\n    title: \"Upgrading Jenkins X\"\naliases:\n    - /docs/resources/guides/managing-jx/common-tasks/upgrade-jx/\n---\n\nKeeping your Jenkins X environment updated can be done by command line\nusing the `jx upgrade` command. When upgrading the version of Jenkins X\nin your Kubernetes cluster we strongly recommend first updating your `jx`\ncli to the version of Jenkins X that you are upgrading to.\n\n{{% alert %}}\nThe following upgrade process is only applicable to Jenkins X clusters that\nare managed via [jx boot](/docs/install-setup/boot/).\n{{% /alert %}}\n\nUpgrading the CLI binary\n------------------------\n\nUpgrade your Jenkins X command-line by opening a terminal and running\n`jx` to upgrade the binary :\n\n```sh\njx upgrade cli\n```\n\nWithout options, the command upgrades to the latest version of the `jx`\nbinary released. If you want to install a certain version of the Jenkins\nX command-line binaries, you can add an option specifying the particular\nversion of `jx`:\n\n```sh\njx upgrade cli -v 2.0.46\n```\n\n Alternately you can download the required release from the [Jenkins X GitHub releases page](https://github.com/jenkins-x/jx/releases).\n After extracting the binary and adding it to the start of your path you can verify the correct version is available by running:\n\n```sh\njx version --short\n```\n\nUpgrading Jenkins X\n----------------------\n\nUpgrade the version of Jenkins X running in your cluster using `jx`:\n\n```sh\njx upgrade boot\n```\n\nThe upgrade command performs the following tasks:\n\n* Clones the version stream repository from the URL referenced in your jx-requirements.yml to your local installation in ~/.jx/jenkins-x-versions overwriting the previous version.\n\n* The version stream repository is inspected for newer tags than those referenced in your jx-requirements.yml\n\n* If updates are available the version stream ref is updated in the jx-requirements.yml\n\n* The version stream is checked for an updated [version](https://github.com/jenkins-x/jenkins-x-versions/blob/master/git/github.com/jenkins-x/jenkins-x-boot-config.yml) of [jenkins-x-boot-config](https://github.com/jenkins-x/jenkins-x-boot-config)\n\n* Changes from the jenkins-x-boot-config repository are cherry picked in to your dev environment repository\n\n* Updates pipeline agent golang builder images from gcr.io.\n\n* A pull request is created in your development environment repository containing all the above changes. The upgrade program displays the URL to the pull request.\n\nMerging the pull request created above will run the development master pipeline in your cluster to apply the upgrade.\n\nThe progress of the upgrade can be viewed by running:\n\n```sh\njx get build logs\n```\n\nUpgrading apps\n--------------\n\nYou can upgrade any Jenkins X apps installed into Jenkins X\nby using the `jx` cli to check for upgrades with the command:\n\n```sh\njx upgrade apps\n```\nThe `apps` specified includes *all* installed apps in your kubernetes\ncluster if upgrades are available. If you want to upgrade only specific\napps, you can use the `jx upgrade app` command and the specified app:\n\n```sh\njx upgrade app cb-app-slack\n```\n\nFurther information\n--------------    \nDetails information on the upgrade commands are available at [the Jenkins X documentation site for the\ncommand.](/commands/jx_upgrade/)    \n",
            "content/en/docs/reference/_index.md": "---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"  \ndescription: >\n  Reference docs for Jenkins X.\nweight: 100\ntype: docs\n\nmenu:\n  docs:\n    title: \"Reference\"\n\n---\n\n",
            "content/en/docs/reference/api.md": "---\ntitle: API Documentation\nlinktitle: API Documentation\ndescription: Reference of the Jenkins X REST APIs and custom resources\nweight: 10\n---\n<p>Packages:</p>\n<ul>\n<li>\n<a href=\"#jenkins.io%2fv1\">jenkins.io/v1</a>\n</li>\n</ul>\n<h2 id=\"jenkins.io/v1\">jenkins.io/v1</h2>\n<p>\n<p>Package v1 is the v1 version of the API.</p>\n</p>\nResource Types:\n<ul><li>\n<a href=\"#jenkins.io/v1.App\">App</a>\n</li><li>\n<a href=\"#jenkins.io/v1.BuildPack\">BuildPack</a>\n</li><li>\n<a href=\"#jenkins.io/v1.CommitStatus\">CommitStatus</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Environment\">Environment</a>\n</li><li>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBinding\">EnvironmentRoleBinding</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Extension\">Extension</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Fact\">Fact</a>\n</li><li>\n<a href=\"#jenkins.io/v1.GitService\">GitService</a>\n</li><li>\n<a href=\"#jenkins.io/v1.PipelineActivity\">PipelineActivity</a>\n</li><li>\n<a href=\"#jenkins.io/v1.PipelineStructure\">PipelineStructure</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Plugin\">Plugin</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Release\">Release</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Scheduler\">Scheduler</a>\n</li><li>\n<a href=\"#jenkins.io/v1.SourceRepository\">SourceRepository</a>\n</li><li>\n<a href=\"#jenkins.io/v1.SourceRepositoryGroup\">SourceRepositoryGroup</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Team\">Team</a>\n</li><li>\n<a href=\"#jenkins.io/v1.User\">User</a>\n</li><li>\n<a href=\"#jenkins.io/v1.Workflow\">Workflow</a>\n</li></ul>\n<h3 id=\"jenkins.io/v1.App\">App\n</h3>\n<p>\n<p>App is the metadata for an App</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>App</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.AppSpec\">\nAppSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>schemaPreprocessor</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#container-v1-core\">\nKubernetes core/v1.Container\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>schemaPreprocessorRole</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#role-v1-rbac\">\nKubernetes rbac/v1.Role\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineExtension</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineExtension\">\nPipelineExtension\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.BuildPack\">BuildPack\n</h3>\n<p>\n<p>BuildPack represents a set of language specific build packs and associated quickstarts</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>BuildPack</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.BuildPackSpec\">\nBuildPackSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>quickstartLocations</code></br>\n<em>\n<a href=\"#jenkins.io/v1.QuickStartLocation\">\n[]QuickStartLocation\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitStatus\">CommitStatus\n</h3>\n<p>\n<p>CommitStatus represents the commit statuses for a particular pull request</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>CommitStatus</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitStatusSpec\">\nCommitStatusSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>items</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitStatusDetails\">\n[]CommitStatusDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Environment\">Environment\n</h3>\n<p>\n<p>Environment represents an environment like Dev, Test, Staging, Production where code lives</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Environment</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">\nEnvironmentSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>cluster</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promotionStrategy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromotionStrategyType\">\nPromotionStrategyType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>source</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentRepository\">\nEnvironmentRepository\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>order</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentKindType\">\nEnvironmentKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequestURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>teamSettings</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamSettings\">\nTeamSettings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>previewGitInfo</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PreviewGitSpec\">\nPreviewGitSpec\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>webHookEngine</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WebHookEngineType\">\nWebHookEngineType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>remoteCluster</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>RemoteCluster flag indicates if the Environment is deployed in a separate cluster to the Development Environment</p>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentStatus\">\nEnvironmentStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentRoleBinding\">EnvironmentRoleBinding\n</h3>\n<p>\n<p>EnvironmentRoleBinding is like a vanilla RoleBinding but applies to a set of Namespaces based on an Environment filter\nso that roles can be bound to multiple namespaces easily.</p>\n<p>For example to specify the binding of roles on all Preview environments or on all permanent environments.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>EnvironmentRoleBinding</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBindingSpec\">\nEnvironmentRoleBindingSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>subjects</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#subject-v1-rbac\">\n[]Kubernetes rbac/v1.Subject\n</a>\n</em>\n</td>\n<td>\n<p>Subjects holds references to the objects the role applies to.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>roleRef</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#roleref-v1-rbac\">\nKubernetes rbac/v1.RoleRef\n</a>\n</em>\n</td>\n<td>\n<p>RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace.\nIf the RoleRef cannot be resolved, the Authorizer must return an error.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentFilter\">\n[]EnvironmentFilter\n</a>\n</em>\n</td>\n<td>\n<p>specifies which sets of environments this binding applies to</p>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBindingStatus\">\nEnvironmentRoleBindingStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Extension\">Extension\n</h3>\n<p>\n<p>Extension represents an extension available to this Jenkins X install</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Extension</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionSpec\">\nExtensionSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>script</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>when</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionWhen\">\n[]ExtensionWhen\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>given</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionGiven\">\nExtensionGiven\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parameters</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionParameter\">\n[]ExtensionParameter\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>uuid</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>children</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Fact\">Fact\n</h3>\n<p>\n<p>Fact represents observed facts. Apps will generate Facts about the system.\nA naming schema is required since each Fact has a name that&rsquo;s unique for the whole system.\nApps should prefix their generated Facts with the name of the App, like <app-name>-<fact>.\nThis makes that different Apps can&rsquo;t possibly have conflicting Fact names.</p>\n<p>For an app generating facts on a pipeline, which will be have several different executions, we recommend <app>-<fact>-<pipeline>.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Fact</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>The Fact labels will be used to query the API for interesting Facts.\nThe Apps responsible for creating Facts need to add the relevant labels.\nFor example, creating Facts on a pipeline would create Facts with the following labels\n{\nsubjectkind: PipelineActivity\npipelineName: my-org-my-app-master-23\norg: my-org\nrepo: my-app\nbranch: master\nbuildNumber: 23\n}</p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.FactSpec\">\nFactSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>factType</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>measurements</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Measurement\">\n[]Measurement\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>statements</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Statement\">\n[]Statement\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>original</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Original\">\nOriginal\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>subject</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.FactStatus\">\nFactStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.GitService\">GitService\n</h3>\n<p>\n<p>GitService represents a git provider so we can map the host name to a kinda of git service</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>GitService</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.GitServiceSpec\">\nGitServiceSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>gitKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineActivity\">PipelineActivity\n</h3>\n<p>\n<p>PipelineActivity represents pipeline activity for a particular run of a pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>PipelineActivity</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">\nPipelineActivitySpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>build</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStatusType\">\nActivityStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>startedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>completedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">\n[]PipelineActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildLogsUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitBranch</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>author</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>authorAvatarURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>authorURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullTitle</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>releaseNotesURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitMessage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflow</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Deprecated - Workflow functionality was removed and is obsolete\nKeeping these fields to ensure backwards compatibility\nShould be removed when we increment spec version</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflowStatus</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStatusType\">\nActivityStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflowMessage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postExtensions</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionExecution\">\n[]ExtensionExecution\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>attachments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Attachment\">\n[]Attachment\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>batchPipelineActivity</code></br>\n<em>\n<a href=\"#jenkins.io/v1.BatchPipelineActivity\">\nBatchPipelineActivity\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>context</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>baseSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineActivityStatus\">\nPipelineActivityStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineStructure\">PipelineStructure\n</h3>\n<p>\n<p>PipelineStructure contains references to the Pipeline and PipelineRun, and a list of PipelineStructureStages in the\npipeline. This allows us to map between a running Pod to its TaskRun, to the TaskRun&rsquo;s Task and PipelineRun, and\nfinally from there to the stage and potential parent stages that the Pod is actually executing, for use with\npopulating PipelineActivity and providing logs.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>PipelineStructure</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineRunRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>stages</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineStructureStage\">\n[]PipelineStructureStage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Plugin\">Plugin\n</h3>\n<p>\n<p>Plugin represents a binary plugin installed into this Jenkins X team</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Plugin</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PluginSpec\">\nPluginSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>subCommand</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>group</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>binaries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Binary\">\n[]Binary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Release\">Release\n</h3>\n<p>\n<p>Release represents a single version of an app that has been released</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Release</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReleaseSpec\">\nReleaseSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitHttpUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitCloneUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>commits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitSummary\">\n[]CommitSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>issues</code></br>\n<em>\n<a href=\"#jenkins.io/v1.IssueSummary\">\n[]IssueSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequests</code></br>\n<em>\n<a href=\"#jenkins.io/v1.IssueSummary\">\n[]IssueSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dependencyUpdates</code></br>\n<em>\n<a href=\"#jenkins.io/v1.DependencyUpdate\">\n[]DependencyUpdate\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>releaseNotesURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReleaseStatus\">\nReleaseStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Scheduler\">Scheduler\n</h3>\n<p>\n<p>Scheduler is configuration for a pipeline scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Scheduler</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">\nSchedulerSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>schedulerAgent</code></br>\n<em>\n<a href=\"#jenkins.io/v1.SchedulerAgent\">\nSchedulerAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>policy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.GlobalProtectionPolicy\">\nGlobalProtectionPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>presubmits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Presubmits\">\nPresubmits\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postsubmits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Postsubmits\">\nPostsubmits\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>trigger</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Trigger\">\nTrigger\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>approve</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Approve\">\nApprove\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lgtm</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Lgtm\">\nLgtm\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>externalPlugins</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfExternalPlugins\">\nReplaceableSliceOfExternalPlugins\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>merger</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Merger\">\nMerger\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>plugins</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Plugins is a list of plugin names enabled for a repo</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>configUpdater</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ConfigUpdater\">\nConfigUpdater\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>welcome</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>periodics</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Periodics\">\nPeriodics\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>attachments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SourceRepository\">SourceRepository\n</h3>\n<p>\n<p>SourceRepository is the metadata for an Application/Project/SourceRepository</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>SourceRepository</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.SourceRepositorySpec\">\nSourceRepositorySpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>provider</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Provider stores the URL of the git provider such as <a href=\"https://github.com\">https://github.com</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>org</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>repo</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>providerName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProviderName is a logical name for the provider without any URL scheme which can be used in a label selector</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>providerKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProviderKind is the kind of provider (github / bitbucketcloud / bitbucketserver etc)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL is the web URL of the project page</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>sshCloneURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>SSHCloneURL is the git URL to clone this repository using SSH</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>httpCloneURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>HTTPCloneURL is the git URL to clone this repository using HTTP/HTTPS</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>scheduler</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n<p>Scheduler a reference to a custom scheduler otherwise we default to the Team&rsquo;s Scededuler</p>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SourceRepositoryGroup\">SourceRepositoryGroup\n</h3>\n<p>\n<p>SourceRepositoryGroup is the metadata for an Application/Project/SourceRepository</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>SourceRepositoryGroup</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.SourceRepositoryGroupSpec\">\nSourceRepositoryGroupSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>repositories</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\n[]ResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>scheduler</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Team\">Team\n</h3>\n<p>\n<p>Team represents a request to create an actual Team which is a group of users, a development environment and optional other environments</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Team</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamSpec\">\nTeamSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamKindType\">\nTeamKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>members</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamStatus\">\nTeamStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.User\">User\n</h3>\n<p>\n<p>User represents a git user so we have a cache to find by email address</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>User</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>user</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n<p>Deprecated, use Spec</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>login</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>email</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>creationTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>avatarUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>serviceAccount</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>accountReference</code></br>\n<em>\n<a href=\"#jenkins.io/v1.AccountReference\">\n[]AccountReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>externalUser</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Workflow\">Workflow\n</h3>\n<p>\n<p>Workflow represents pipeline activity for a particular run of a pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\njenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>Workflow</code></td>\n</tr>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Standard object&rsquo;s metadata.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata\">https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata</a></p>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowSpec\">\nWorkflowSpec\n</a>\n</em>\n</td>\n<td>\n<br/>\n<br/>\n<table>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowStep\">\n[]WorkflowStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowStatus\">\nWorkflowStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.AccountReference\">AccountReference\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.UserDetails\">UserDetails</a>)\n</p>\n<p>\n<p>AccountReference is a reference to a user account in another system that is attached to this user</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>provider</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>id</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ActivityStatusType\">ActivityStatusType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">CoreActivityStep</a>, \n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec</a>)\n</p>\n<p>\n<p>ActivityStatusType is the status of an activity; usually succeeded or failed/error on completion</p>\n</p>\n<h3 id=\"jenkins.io/v1.ActivityStepKindType\">ActivityStepKindType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">PipelineActivityStep</a>)\n</p>\n<p>\n<p>ActivityStepKindType is a kind of step</p>\n</p>\n<h3 id=\"jenkins.io/v1.AppSpec\">AppSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.App\">App</a>)\n</p>\n<p>\n<p>AppSpec provides details of the metadata for an App</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>schemaPreprocessor</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#container-v1-core\">\nKubernetes core/v1.Container\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>schemaPreprocessorRole</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#role-v1-rbac\">\nKubernetes rbac/v1.Role\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineExtension</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineExtension\">\nPipelineExtension\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Approve\">Approve\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Approve specifies a configuration for a single approve.</p>\n<p>The configuration for the approve plugin is defined as a list of these structures.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>issueRequired</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>IssueRequired indicates if an associated issue is required for approval in\nthe specified repos.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requireSelfApproval</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>RequireSelfApproval requires PR authors to explicitly approve their PRs.\nOtherwise the plugin assumes the author of the PR approves the changes in the PR.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>lgtmActsAsApprove</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>LgtmActsAsApprove indicates that the lgtm command should be used to\nindicate approval</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ignoreReviewState</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>IgnoreReviewState causes the approve plugin to ignore the GitHub review state. Otherwise:\n* an APPROVE github review is equivalent to leaving an &ldquo;/approve&rdquo; message.\n* A REQUEST_CHANGES github review is equivalent to leaving an /approve cancel&rdquo; message.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Attachment\">Attachment\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>urls</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.BatchPipelineActivity\">BatchPipelineActivity\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec</a>)\n</p>\n<p>\n<p>BatchPipelineActivity contains information about a batch build, used by both the batch build and its comprising PRs for linking them together</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>batchBuildNumber</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>batchBranchName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequestInfo</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PullRequestInfo\">\n[]PullRequestInfo\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Binary\">Binary\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PluginSpec\">PluginSpec</a>)\n</p>\n<p>\n<p>Binary provies the details of a downloadable binary</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>goarch</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>goos</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.BranchProtectionContextPolicy\">BranchProtectionContextPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ProtectionPolicy\">ProtectionPolicy</a>)\n</p>\n<p>\n<p>BranchProtectionContextPolicy configures required git provider contexts.\nStrict determines whether merging to the branch invalidates existing contexts.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>contexts</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Contexts appends required contexts that must be green to merge</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>strict</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Strict overrides whether new commits in the base branch require updating the PR if set</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Brancher\">Brancher\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Postsubmit\">Postsubmit</a>, \n<a href=\"#jenkins.io/v1.Presubmit\">Presubmit</a>)\n</p>\n<p>\n<p>Brancher is for shared code between jobs that only run against certain\nbranches. An empty brancher runs against all branches.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>skipBranches</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Do not run against these branches. Default is no branches.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>branches</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Only run against these branches. Default is all branches.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.BuildPackSpec\">BuildPackSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.BuildPack\">BuildPack</a>)\n</p>\n<p>\n<p>BuildPackSpec is the specification of an BuildPack</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>quickstartLocations</code></br>\n<em>\n<a href=\"#jenkins.io/v1.QuickStartLocation\">\n[]QuickStartLocation\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ChartRef\">ChartRef\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionRepositoryReference\">ExtensionRepositoryReference</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>repo</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>repoName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitStatusCommitReference\">CommitStatusCommitReference\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CommitStatusDetails\">CommitStatusDetails</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequest</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>sha</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitStatusDetails\">CommitStatusDetails\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CommitStatusSpec\">CommitStatusSpec</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pipelineActivity</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Items</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitStatusItem\">\n[]CommitStatusItem\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>checked</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>commit</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitStatusCommitReference\">\nCommitStatusCommitReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>context</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitStatusItem\">CommitStatusItem\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CommitStatusDetails\">CommitStatusDetails</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pass</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitStatusSpec\">CommitStatusSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CommitStatus\">CommitStatus</a>)\n</p>\n<p>\n<p>CommitStatusSpec provides details of a particular commit status</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>items</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitStatusDetails\">\n[]CommitStatusDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CommitSummary\">CommitSummary\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ReleaseSpec\">ReleaseSpec</a>)\n</p>\n<p>\n<p>CommitSummary is the summary of a commit</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>message</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>sha</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>author</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>committer</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>branch</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>issueIds</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ConfigMapSpec\">ConfigMapSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ConfigUpdater\">ConfigUpdater</a>)\n</p>\n<p>\n<p>ConfigMapSpec contains configuration options for the configMap being updated\nby the config-updater plugin.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name of ConfigMap</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>key</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Key is the key in the ConfigMap to update with the file contents.\nIf no explicit key is given, the basename of the file will be used.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace in which the configMap needs to be deployed. If no namespace is specified\nit will be deployed to the ProwJobNamespace.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>additional_namespaces</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>Namespaces in which the configMap needs to be deployed, in addition to the above\nnamespace provided, or the default if it is not set.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>-</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>Namespaces is the fully resolved list of Namespaces to deploy the ConfigMap in</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ConfigUpdater\">ConfigUpdater\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>ConfigUpdater holds configuration for the config updater plugin</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>map</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ConfigMapSpec\">\nmap[string]github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ConfigMapSpec\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>configFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pluginFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ConfigMap</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ConfigMapSpec\">\nConfigMapSpec\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ContextPolicy\">ContextPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Merger\">Merger</a>, \n<a href=\"#jenkins.io/v1.RepoContextPolicy\">RepoContextPolicy</a>)\n</p>\n<p>\n<p>ContextPolicy configures options about how to handle various contexts.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>skipUnknownContexts</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>whether to consider unknown contexts optional (skip) or required.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requiredContexts</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>requiredIfPresentContexts</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>optionalContexts</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>fromBranchProtection</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Infer required and optional jobs from Branch Protection configuration</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.CoreActivityStep\">CoreActivityStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PreviewActivityStep\">PreviewActivityStep</a>, \n<a href=\"#jenkins.io/v1.PromoteActivityStep\">PromoteActivityStep</a>, \n<a href=\"#jenkins.io/v1.PromotePullRequestStep\">PromotePullRequestStep</a>, \n<a href=\"#jenkins.io/v1.PromoteUpdateStep\">PromoteUpdateStep</a>, \n<a href=\"#jenkins.io/v1.StageActivityStep\">StageActivityStep</a>)\n</p>\n<p>\n<p>CoreActivityStep is a base step included in Stages of a pipeline or other kinds of step</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStatusType\">\nActivityStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>startedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>completedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.DependencyUpdate\">DependencyUpdate\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ReleaseSpec\">ReleaseSpec</a>)\n</p>\n<p>\n<p>DependencyUpdate describes an dependency update message from the commit log</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>DependencyUpdateDetails</code></br>\n<em>\n<a href=\"#jenkins.io/v1.DependencyUpdateDetails\">\nDependencyUpdateDetails\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>DependencyUpdateDetails</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>paths</code></br>\n<em>\n<a href=\"#jenkins.io/v1.DependencyUpdatePath\">\n[]DependencyUpdatePath\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.DependencyUpdateDetails\">DependencyUpdateDetails\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.DependencyUpdate\">DependencyUpdate</a>)\n</p>\n<p>\n<p>DependencyUpdateDetails are the details of a dependency update</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>host</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>owner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>repo</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>component</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>fromVersion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>fromReleaseHTMLURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>fromReleaseName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>toVersion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>toReleaseHTMLURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>toReleaseName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.DependencyUpdatePath\">DependencyUpdatePath\n(<code>[]github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.DependencyUpdateDetails</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.DependencyUpdate\">DependencyUpdate</a>)\n</p>\n<p>\n<p>DependencyUpdatePath is the path of a dependency update</p>\n</p>\n<h3 id=\"jenkins.io/v1.DeployOptions\">DeployOptions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>DeployOptions configures options for how to deploy applications by default such as using progressive delivery or using horizontal pod autoscaler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>canary</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Canary should we enable canary rollouts (progressive delivery) for apps by default</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>hpa</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>should we use the horizontal pod autoscaler on new apps by default?</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentFilter\">EnvironmentFilter\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBindingSpec\">EnvironmentRoleBindingSpec</a>)\n</p>\n<p>\n<p>EnvironmentFilter specifies the environments to apply the role binding to</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentKindType\">\nEnvironmentKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>includes</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>excludes</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentKindType\">EnvironmentKindType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentFilter\">EnvironmentFilter</a>, \n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>EnvironmentKindType is the kind of an environment</p>\n</p>\n<h3 id=\"jenkins.io/v1.EnvironmentRepository\">EnvironmentRepository\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>EnvironmentRepository is the repository for an environment using GitOps</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentRepositoryType\">\nEnvironmentRepositoryType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ref</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentRepositoryType\">EnvironmentRepositoryType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentRepository\">EnvironmentRepository</a>)\n</p>\n<p>\n<p>EnvironmentRepositoryType is the repository type</p>\n</p>\n<h3 id=\"jenkins.io/v1.EnvironmentRoleBindingSpec\">EnvironmentRoleBindingSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBinding\">EnvironmentRoleBinding</a>)\n</p>\n<p>\n<p>EnvironmentRoleBindingSpec is the specification of an EnvironmentRoleBinding</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>subjects</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#subject-v1-rbac\">\n[]Kubernetes rbac/v1.Subject\n</a>\n</em>\n</td>\n<td>\n<p>Subjects holds references to the objects the role applies to.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>roleRef</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#roleref-v1-rbac\">\nKubernetes rbac/v1.RoleRef\n</a>\n</em>\n</td>\n<td>\n<p>RoleRef can reference a Role in the current namespace or a ClusterRole in the global namespace.\nIf the RoleRef cannot be resolved, the Authorizer must return an error.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentFilter\">\n[]EnvironmentFilter\n</a>\n</em>\n</td>\n<td>\n<p>specifies which sets of environments this binding applies to</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentRoleBindingStatus\">EnvironmentRoleBindingStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentRoleBinding\">EnvironmentRoleBinding</a>)\n</p>\n<p>\n<p>EnvironmentRoleBindingStatus is the status for an EnvironmentRoleBinding resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Environment\">Environment</a>)\n</p>\n<p>\n<p>EnvironmentSpec is the specification of an Environment</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>cluster</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promotionStrategy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromotionStrategyType\">\nPromotionStrategyType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>source</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentRepository\">\nEnvironmentRepository\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>order</code></br>\n<em>\nint32\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentKindType\">\nEnvironmentKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequestURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>teamSettings</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamSettings\">\nTeamSettings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>previewGitInfo</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PreviewGitSpec\">\nPreviewGitSpec\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>webHookEngine</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WebHookEngineType\">\nWebHookEngineType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>remoteCluster</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>RemoteCluster flag indicates if the Environment is deployed in a separate cluster to the Development Environment</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentStatus\">EnvironmentStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Environment\">Environment</a>)\n</p>\n<p>\n<p>EnvironmentStatus is the status for an Environment resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.EnvironmentVariable\">EnvironmentVariable\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionExecution\">ExtensionExecution</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>value</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionConfig\">ExtensionConfig\n</h3>\n<p>\n<p>ExtensionConfig is the configuration and enablement for an extension inside an app</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parameters</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionParameterValue\">\n[]ExtensionParameterValue\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionDefinition\">ExtensionDefinition\n</h3>\n<p>\n<p>ExtensionDefinition defines an Extension</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>uuid</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>when</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionWhen\">\n[]ExtensionWhen\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>given</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionGiven\">\nExtensionGiven\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>children</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionDefinitionChildReference\">\n[]ExtensionDefinitionChildReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>scriptFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parameters</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionParameter\">\n[]ExtensionParameter\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionDefinitionChildReference\">ExtensionDefinitionChildReference\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionDefinition\">ExtensionDefinition</a>)\n</p>\n<p>\n<p>ExtensionDefinitionChildReference provides a reference to a child</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>uuid</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>remote</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tag</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionDefinitionReference\">ExtensionDefinitionReference\n</h3>\n<p>\n<p>ExtensionRepositoryReference references a GitHub repo that contains extension definitions</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>remote</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tag</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionExecution\">ExtensionExecution\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec</a>)\n</p>\n<p>\n<p>ExtensionExecution is an executable instance of an extension which can be attached into a pipeline for later execution.\nIt differs from an Extension as it cannot have children and parameters have been resolved to environment variables</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>script</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>environmentVariables</code></br>\n<em>\n<a href=\"#jenkins.io/v1.EnvironmentVariable\">\n[]EnvironmentVariable\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>given</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionGiven\">\nExtensionGiven\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>uuid</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionGiven\">ExtensionGiven\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionDefinition\">ExtensionDefinition</a>, \n<a href=\"#jenkins.io/v1.ExtensionExecution\">ExtensionExecution</a>, \n<a href=\"#jenkins.io/v1.ExtensionSpec\">ExtensionSpec</a>)\n</p>\n<p>\n<p>ExtensionGiven specifies the condition (if the extension is executing in a pipeline on which the extension should execute. By default Always.</p>\n</p>\n<h3 id=\"jenkins.io/v1.ExtensionParameter\">ExtensionParameter\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionDefinition\">ExtensionDefinition</a>, \n<a href=\"#jenkins.io/v1.ExtensionSpec\">ExtensionSpec</a>)\n</p>\n<p>\n<p>ExtensionParameter describes a parameter definition for an extension</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>environmentVariableName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>defaultValue</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionParameterValue\">ExtensionParameterValue\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionConfig\">ExtensionConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>value</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionRepositoryReference\">ExtensionRepositoryReference\n</h3>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>github</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>chart</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ChartRef\">\nChartRef\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionSpec\">ExtensionSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Extension\">Extension</a>)\n</p>\n<p>\n<p>ExtensionSpec provides details of an extension available for a team</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>script</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>when</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionWhen\">\n[]ExtensionWhen\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>given</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionGiven\">\nExtensionGiven\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parameters</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionParameter\">\n[]ExtensionParameter\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>uuid</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>children</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ExtensionWhen\">ExtensionWhen\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ExtensionDefinition\">ExtensionDefinition</a>, \n<a href=\"#jenkins.io/v1.ExtensionSpec\">ExtensionSpec</a>)\n</p>\n<p>\n<p>ExtensionWhen specifies when in the lifecycle an extension should execute. By default Post.</p>\n</p>\n<h3 id=\"jenkins.io/v1.ExternalPlugin\">ExternalPlugin\n</h3>\n<p>\n<p>ExternalPlugin holds configuration for registering an external\nplugin.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name of the plugin.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>endpoint</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Endpoint is the location of the external plugin. Defaults to\nthe name of the plugin, ie. &ldquo;http://{{name}}&rdquo;.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>events</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>ReplaceableSliceOfStrings are the events that need to be demuxed by the hook\nserver to the external plugin. If no events are specified,\neverything is sent.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.FactSpec\">FactSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Fact\">Fact</a>)\n</p>\n<p>\n<p>FactSpec is the specification of a Fact</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>factType</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>measurements</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Measurement\">\n[]Measurement\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>statements</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Statement\">\n[]Statement\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>original</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Original\">\nOriginal\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>subject</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.FactStatus\">FactStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Fact\">Fact</a>)\n</p>\n<p>\n<p>FactStatus is the status for an Fact resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.GitServiceSpec\">GitServiceSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.GitService\">GitService</a>)\n</p>\n<p>\n<p>GitServiceSpec is the specification of an GitService</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>gitKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.GitStatus\">GitStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PromoteUpdateStep\">PromoteUpdateStep</a>)\n</p>\n<p>\n<p>GitStatus the status of a git commit in terms of CI/CD</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.GlobalProtectionPolicy\">GlobalProtectionPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>GlobalProtectionPolicy defines the default branch protection policy for the scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>ProtectionPolicy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ProtectionPolicy\">\nProtectionPolicy\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>protectTested</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ImportModeType\">ImportModeType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>ImportModeType is the type of import mode for new projects in a team</p>\n</p>\n<h3 id=\"jenkins.io/v1.IssueLabel\">IssueLabel\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.IssueSummary\">IssueSummary</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>color</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.IssueSummary\">IssueSummary\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ReleaseSpec\">ReleaseSpec</a>)\n</p>\n<p>\n<p>IssueSummary is the summary of an issue</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>id</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>title</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>body</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>state</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>message</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>user</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>assignees</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\n[]UserDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>closedBy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserDetails\">\nUserDetails\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>creationTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>labels</code></br>\n<em>\n<a href=\"#jenkins.io/v1.IssueLabel\">\n[]IssueLabel\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.JobBase\">JobBase\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Periodic\">Periodic</a>, \n<a href=\"#jenkins.io/v1.Postsubmit\">Postsubmit</a>, \n<a href=\"#jenkins.io/v1.Presubmit\">Presubmit</a>)\n</p>\n<p>\n<p>JobBase contains attributes common to all job types</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>The name of the job. Must match regex [A-Za-z0-9-._]+\ne.g. pull-test-infra-bazel-build</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>labels</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableMapOfStringString\">\nReplaceableMapOfStringString\n</a>\n</em>\n</td>\n<td>\n<p>ReplaceableMapOfStringString are added to jobs and pods created for this job.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>maxConcurrency</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n<p>MaximumConcurrency of this job, 0 implies no limit.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Agent that will take care of running this job.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>cluster</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Cluster is the alias of the cluster to run this job in.\n(Default: kube.DefaultClusterAlias)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace is the namespace in which pods schedule.\nempty: results in scheduler.DefaultNamespace</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>spec</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#podspec-v1-core\">\nKubernetes core/v1.PodSpec\n</a>\n</em>\n</td>\n<td>\n<p>Spec is the Kubernetes pod spec used if Agent is kubernetes.</p>\n<br/>\n<br/>\n<table>\n</table>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Lgtm\">Lgtm\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Lgtm specifies a configuration for a single lgtm.\nThe configuration for the lgtm plugin is defined as a list of these structures.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>reviewActsAsLgtm</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>ReviewActsAsLgtm indicates that a Github review of &ldquo;approve&rdquo; or &ldquo;request changes&rdquo;\nacts as adding or removing the lgtm label</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>storeTreeHash</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>StoreTreeHash indicates if tree_hash should be stored inside a comment to detect\nsquashed commits before removing lgtm labels</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>trustedTeamForStickyLgtm</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>WARNING: This disables the security mechanism that prevents a malicious member (or\ncompromised GitHub account) from merging arbitrary code. Use with caution.</p>\n<p>StickyLgtmTeam specifies the Github team whose members are trusted with sticky LGTM,\nwhich eliminates the need to re-lgtm minor fixes/updates.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Measurement\">Measurement\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.FactSpec\">FactSpec</a>)\n</p>\n<p>\n<p>Measurement is a percentage or a count, something measured that the system will capture within a fact</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>measurementType</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>measurementValue</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Merger\">Merger\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Merger defines the options used to merge the PR</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>-</code></br>\n<em>\ntime.Duration\n</em>\n</td>\n<td>\n<p>SyncPeriod specifies how often Merger will sync jobs with Github. Defaults to 1m.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>-</code></br>\n<em>\ntime.Duration\n</em>\n</td>\n<td>\n<p>StatusUpdatePeriod</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>targetUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL for status contexts.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>prStatusBaseUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>PRStatusBaseURL is the base URL for the PR status page.\nThis is used to link to a merge requirements overview\nin the status context.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>blockerLabel</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>BlockerLabel is an optional label that is used to identify merge blocking\nGit Provider issues.\nLeave this blank to disable this feature and save 1 API token per sync loop.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>squashLabel</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>SquashLabel is an optional label that is used to identify PRs that should\nalways be squash merged.\nLeave this blank to disable this feature.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>maxGoroutines</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n<p>MaxGoroutines is the maximum number of goroutines spawned inside the\ncontroller to handle org/repo:branch pools. Defaults to 20. Needs to be a\npositive number.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>mergeMethod</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Override the default method of merge. Valid options are squash, rebase, and merge.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>policy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ContextPolicy\">\nContextPolicy\n</a>\n</em>\n</td>\n<td>\n<p>ContextOptions defines the default merge options. If not set it will infer\nthe required and optional contexts from the jobs configured and use the Git Provider\ncombined status; otherwise it may apply the branch protection setting or let user\ndefine their own options in case branch protection is not used.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Original\">Original\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.FactSpec\">FactSpec</a>)\n</p>\n<p>\n<p>Original contains the report</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>mimetype</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Periodic\">Periodic\n</h3>\n<p>\n<p>Periodic defines a job to be run periodically</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>JobBase</code></br>\n<em>\n<a href=\"#jenkins.io/v1.JobBase\">\nJobBase\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>interval</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Interval to wait between two runs of the job.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>cron</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Cron representation of job trigger time</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Tags for config entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Periodics\">Periodics\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Periodics is a list of jobs to be run periodically</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodic\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Periodic\n</a>\n</em>\n</td>\n<td>\n<p>Items are the post submit configurations</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace the existing entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivity\">PipelineActivity</a>)\n</p>\n<p>\n<p>PipelineActivitySpec is the specification of the pipeline activity</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>build</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStatusType\">\nActivityStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>startedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>completedTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">\n[]PipelineActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildLogsUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitBranch</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>author</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>authorAvatarURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>authorURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullTitle</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>releaseNotesURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitMessage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastCommitURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflow</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Deprecated - Workflow functionality was removed and is obsolete\nKeeping these fields to ensure backwards compatibility\nShould be removed when we increment spec version</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflowStatus</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStatusType\">\nActivityStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>workflowMessage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postExtensions</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ExtensionExecution\">\n[]ExtensionExecution\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>attachments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Attachment\">\n[]Attachment\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>batchPipelineActivity</code></br>\n<em>\n<a href=\"#jenkins.io/v1.BatchPipelineActivity\">\nBatchPipelineActivity\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>context</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>baseSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineActivityStatus\">PipelineActivityStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivity\">PipelineActivity</a>)\n</p>\n<p>\n<p>PipelineActivityStatus is the status for an Environment resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineActivityStep\">PipelineActivityStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivitySpec\">PipelineActivitySpec</a>)\n</p>\n<p>\n<p>PipelineActivityStep represents a step in a pipeline activity</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ActivityStepKindType\">\nActivityStepKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>stage</code></br>\n<em>\n<a href=\"#jenkins.io/v1.StageActivityStep\">\nStageActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promote</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromoteActivityStep\">\nPromoteActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>preview</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PreviewActivityStep\">\nPreviewActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineExtension\">PipelineExtension\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.AppSpec\">AppSpec</a>)\n</p>\n<p>\n<p>PipelineExtension defines the image and command of an app which wants to modify/extend the pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name of the container specified as a DNS_LABEL.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>image</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Docker image name.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>command</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Entrypoint array. Not executed within a shell.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>args</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>Arguments to the entrypoint.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineStageAndChildren\">PipelineStageAndChildren\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineStageAndChildren\">PipelineStageAndChildren</a>)\n</p>\n<p>\n<p>PipelineStageAndChildren represents a single stage and its children.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Stage</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineStructureStage\">\nPipelineStructureStage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Parallel</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineStageAndChildren\">\n[]PipelineStageAndChildren\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Stages</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PipelineStageAndChildren\">\n[]PipelineStageAndChildren\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PipelineStructureStage\">PipelineStructureStage\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineStructure\">PipelineStructure</a>, \n<a href=\"#jenkins.io/v1.PipelineStageAndChildren\">PipelineStageAndChildren</a>)\n</p>\n<p>\n<p>PipelineStructureStage contains the stage&rsquo;s name, one of either a reference to the Task corresponding\nto the stage if it has steps, a list of sequential stage names nested within this stage, or a list of parallel stage\nnames nested within this stage, and information on this stage&rsquo;s depth within the PipelineStructure as a whole, the\nname of its parent stage, if any, the name of the stage before it in execution order, if any, and the name of the\nstage after it in execution order, if any.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>taskRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Must have one of TaskRef+TaskRunRef, Stages, or Parallel</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>taskRunRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n<p>Populated during pod discovery, not at initial creation time.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>stages</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>parallel</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>depth</code></br>\n<em>\nbyte\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parent</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>previous</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>next</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PluginSpec\">PluginSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Plugin\">Plugin</a>)\n</p>\n<p>\n<p>PluginSpec provides details of a binary plugin available for a team</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>subCommand</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>group</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>binaries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Binary\">\n[]Binary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Postsubmit\">Postsubmit\n</h3>\n<p>\n<p>Postsubmit runs on push events.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>JobBase</code></br>\n<em>\n<a href=\"#jenkins.io/v1.JobBase\">\nJobBase\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>RegexpChangeMatcher</code></br>\n<em>\n<a href=\"#jenkins.io/v1.RegexpChangeMatcher\">\nRegexpChangeMatcher\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>Brancher</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Brancher\">\nBrancher\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>context</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Context is the name of the GitHub status context for the job.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>report</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Report will comment and set status on GitHub.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Postsubmits\">Postsubmits\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Postsubmits is a list of Postsubmit job configurations that can optionally completely replace the Postsubmit job\nconfigurations in the parent scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmit\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Postsubmit\n</a>\n</em>\n</td>\n<td>\n<p>Items are the post submit configurations</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace the existing entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Presubmit\">Presubmit\n</h3>\n<p>\n<p>Presubmit defines a job configuration for pull requests</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>JobBase</code></br>\n<em>\n<a href=\"#jenkins.io/v1.JobBase\">\nJobBase\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>Brancher</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Brancher\">\nBrancher\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>RegexpChangeMatcher</code></br>\n<em>\n<a href=\"#jenkins.io/v1.RegexpChangeMatcher\">\nRegexpChangeMatcher\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>alwaysRun</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>AlwaysRun automatically for every PR, or only when a comment triggers it. By default true.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>context</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Context is the name of the Git Provider status context for the job.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>optional</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Optional indicates that the job&rsquo;s status context should not be required for merge. By default false.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>report</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Report enables reporting the job status on the git provider</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>trigger</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Trigger is the regular expression to trigger the job.\ne.g. <code>@k8s-bot e2e test this</code>\nRerunCommand must also be specified if this field is specified.\n(Default: <code>(?m)^/test (?:.*? )?&lt;job name&gt;(?: .*?)?$</code>)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>rerunCommand</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>The RerunCommand to give users. Must match Trigger.\nTrigger must also be specified if this field is specified.\n(Default: <code>/test &lt;job name&gt;</code>)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>mergeMethod</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Override the default method of merge. Valid options are squash, rebase, and merge.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>queries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Query\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Query\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>policy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ProtectionPolicies\">\nProtectionPolicies\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>context_options</code></br>\n<em>\n<a href=\"#jenkins.io/v1.RepoContextPolicy\">\nRepoContextPolicy\n</a>\n</em>\n</td>\n<td>\n<p>ContextOptions defines the merge options. If not set it will infer\nthe required and optional contexts from the jobs configured and use the Git Provider\ncombined status; otherwise it may apply the branch protection setting or let user\ndefine their own options in case branch protection is not used.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Presubmits\">Presubmits\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Presubmits is a list of Presubmit job configurations that can optionally completely replace the Presubmit job\nconfigurations in the parent scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmit\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Presubmit\n</a>\n</em>\n</td>\n<td>\n<p>Items are the Presubmit configurtations</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace the existing entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PreviewActivityStep\">PreviewActivityStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">PipelineActivityStep</a>)\n</p>\n<p>\n<p>PreviewActivityStep is the step of creating a preview environment as part of a Pull Request pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>CoreActivityStep</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\nCoreActivityStep\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>CoreActivityStep</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequestURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>applicationURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PreviewGitSpec\">PreviewGitSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>PreviewGitSpec is the preview git branch/pull request details</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>user</code></br>\n<em>\n<a href=\"#jenkins.io/v1.UserSpec\">\nUserSpec\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>title</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildStatus</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildStatusUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>appName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>applicationURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PromoteActivityStep\">PromoteActivityStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">PipelineActivityStep</a>)\n</p>\n<p>\n<p>PromoteActivityStep is the step of promoting a version of an application to an environment</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>CoreActivityStep</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\nCoreActivityStep\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>CoreActivityStep</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequest</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromotePullRequestStep\">\nPromotePullRequestStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>update</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromoteUpdateStep\">\nPromoteUpdateStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>applicationURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PromotePullRequestStep\">PromotePullRequestStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PromoteActivityStep\">PromoteActivityStep</a>)\n</p>\n<p>\n<p>PromotePullRequestStep is the step for promoting a version to an environment by raising a Pull Request on the\ngit repository of the environment</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>CoreActivityStep</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\nCoreActivityStep\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>CoreActivityStep</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequestURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>mergeCommitSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PromoteUpdateStep\">PromoteUpdateStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PromoteActivityStep\">PromoteActivityStep</a>)\n</p>\n<p>\n<p>PromoteUpdateStep is the step for updating a promotion after the Pull Request merges to master</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>CoreActivityStep</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\nCoreActivityStep\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>CoreActivityStep</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>statuses</code></br>\n<em>\n<a href=\"#jenkins.io/v1.GitStatus\">\n[]GitStatus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PromoteWorkflowStep\">PromoteWorkflowStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.WorkflowStep\">WorkflowStep</a>)\n</p>\n<p>\n<p>PromoteWorkflowStep is the step of promoting a version of an application to an environment</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PromotionEngineType\">PromotionEngineType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>PromotionEngineType is the type of promotion implementation the team uses</p>\n</p>\n<h3 id=\"jenkins.io/v1.PromotionStrategyType\">PromotionStrategyType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>PromotionStrategyType is the type of a promotion strategy</p>\n</p>\n<h3 id=\"jenkins.io/v1.ProtectionPolicies\">ProtectionPolicies\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Presubmit\">Presubmit</a>)\n</p>\n<p>\n<p>ProtectionPolicies defines the branch protection policies</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>ProtectionPolicy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ProtectionPolicy\">\nProtectionPolicy\n</a>\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>Replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<em>(Optional)</em>\n</td>\n</tr>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy\">\nmap[string]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ProtectionPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ProtectionPolicy\">ProtectionPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.GlobalProtectionPolicy\">GlobalProtectionPolicy</a>, \n<a href=\"#jenkins.io/v1.ProtectionPolicies\">ProtectionPolicies</a>)\n</p>\n<p>\n<p>ProtectionPolicy for merging.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>protect</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Protect overrides whether branch protection is enabled if set.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requiredStatusChecks</code></br>\n<em>\n<a href=\"#jenkins.io/v1.BranchProtectionContextPolicy\">\nBranchProtectionContextPolicy\n</a>\n</em>\n</td>\n<td>\n<p>RequiredStatusChecks configures github contexts</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>enforceAdmins</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Admins overrides whether protections apply to admins if set.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>restrictions</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Restrictions\">\nRestrictions\n</a>\n</em>\n</td>\n<td>\n<p>Restrictions limits who can merge</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requiredPullRequestReviews</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReviewPolicy\">\nReviewPolicy\n</a>\n</em>\n</td>\n<td>\n<p>RequiredPullRequestReviews specifies approval/review criteria.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ProwConfigType\">ProwConfigType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>ProwConfigType is the type of prow configuration</p>\n</p>\n<h3 id=\"jenkins.io/v1.ProwEngineType\">ProwEngineType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>ProwEngineType is the type of prow execution engine</p>\n</p>\n<h3 id=\"jenkins.io/v1.PullRequestInfo\">PullRequestInfo\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.BatchPipelineActivity\">BatchPipelineActivity</a>)\n</p>\n<p>\n<p>PullRequestInfo contains information about a PR included in a batch, like its PR number, the last build number, and SHA</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pullRequestNumber</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastBuildNumberForCommit</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>LastBuildNumberForCommit is the number of the last successful build of this PR outside of a batch</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>lastBuildSHA</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>LastBuildSHA is the commit SHA in the last successful build of this PR outside of a batch.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.PullRequestMergeType\">PullRequestMergeType\n(<code>string</code> alias)</p></h3>\n<p>\n<p>PullRequestMergeType enumerates the types of merges the Git Provider API can\nperform\n<a href=\"https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\">https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button</a></p>\n</p>\n<h3 id=\"jenkins.io/v1.Query\">Query\n</h3>\n<p>\n<p>Query is turned into a Git Provider search query. See the docs for details:\n<a href=\"https://help.github.com/articles/searching-issues-and-pull-requests/\">https://help.github.com/articles/searching-issues-and-pull-requests/</a></p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>excludedBranches</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>includedBranches</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>labels</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>missingLabels</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>milestone</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>reviewApprovedRequired</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.QuickStartLocation\">QuickStartLocation\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.BuildPackSpec\">BuildPackSpec</a>, \n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>QuickStartLocation</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>owner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>includes</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>excludes</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.RegexpChangeMatcher\">RegexpChangeMatcher\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Postsubmit\">Postsubmit</a>, \n<a href=\"#jenkins.io/v1.Presubmit\">Presubmit</a>)\n</p>\n<p>\n<p>RegexpChangeMatcher is for code shared between jobs that run only when certain files are changed.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>runIfChanged</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>RunIfChanged defines a regex used to select which subset of file changes should trigger this job.\nIf any file in the changeset matches this regex, the job will be triggered</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReleaseSpec\">ReleaseSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Release\">Release</a>)\n</p>\n<p>\n<p>ReleaseSpec is the specification of the Release</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitHttpUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitCloneUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>commits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CommitSummary\">\n[]CommitSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>issues</code></br>\n<em>\n<a href=\"#jenkins.io/v1.IssueSummary\">\n[]IssueSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pullRequests</code></br>\n<em>\n<a href=\"#jenkins.io/v1.IssueSummary\">\n[]IssueSummary\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dependencyUpdates</code></br>\n<em>\n<a href=\"#jenkins.io/v1.DependencyUpdate\">\n[]DependencyUpdate\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>releaseNotesURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReleaseStatus\">ReleaseStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Release\">Release</a>)\n</p>\n<p>\n<p>ReleaseStatus is the status of a release</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>status</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReleaseStatusType\">\nReleaseStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReleaseStatusType\">ReleaseStatusType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ReleaseStatus\">ReleaseStatus</a>)\n</p>\n<p>\n<p>ReleaseStatusType is the status of a release; usually deployed or failed at completion</p>\n</p>\n<h3 id=\"jenkins.io/v1.ReplaceableMapOfStringContextPolicy\">ReplaceableMapOfStringContextPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.RepoContextPolicy\">RepoContextPolicy</a>)\n</p>\n<p>\n<p>ReplaceableMapOfStringContextPolicy is a map of context policies that can optionally completely replace any\ncontext policies defined in the parent scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Items</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy\">\nmap[string]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ContextPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReplaceableMapOfStringString\">ReplaceableMapOfStringString\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.JobBase\">JobBase</a>)\n</p>\n<p>\n<p>ReplaceableMapOfStringString is a map of strings that can optionally completely replace the map of strings in the\nparent scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace the existing entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReplaceableSliceOfExternalPlugins\">ReplaceableSliceOfExternalPlugins\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>ReplaceableSliceOfExternalPlugins is a list of external plugins that can optionally completely replace the plugins\nin any parent SchedulerSpec</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExternalPlugin\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.ExternalPlugin\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReplaceableSliceOfStrings\">ReplaceableSliceOfStrings\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.BranchProtectionContextPolicy\">BranchProtectionContextPolicy</a>, \n<a href=\"#jenkins.io/v1.Brancher\">Brancher</a>, \n<a href=\"#jenkins.io/v1.ContextPolicy\">ContextPolicy</a>, \n<a href=\"#jenkins.io/v1.ExternalPlugin\">ExternalPlugin</a>, \n<a href=\"#jenkins.io/v1.Periodic\">Periodic</a>, \n<a href=\"#jenkins.io/v1.Query\">Query</a>, \n<a href=\"#jenkins.io/v1.Restrictions\">Restrictions</a>, \n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>ReplaceableSliceOfStrings is a slice of strings that can optionally completely replace the slice of strings\ndefined in the parent scheduler</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>entries</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>Items is the string values</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace the existing entries</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.RepoContextPolicy\">RepoContextPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Presubmit\">Presubmit</a>)\n</p>\n<p>\n<p>RepoContextPolicy overrides the policy for repo, and any branch overrides.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>ContextPolicy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ContextPolicy\">\nContextPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>branches</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableMapOfStringContextPolicy\">\nReplaceableMapOfStringContextPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ResourceReference\">ResourceReference\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.CommitStatusDetails\">CommitStatusDetails</a>, \n<a href=\"#jenkins.io/v1.FactSpec\">FactSpec</a>, \n<a href=\"#jenkins.io/v1.SourceRepositoryGroupSpec\">SourceRepositoryGroupSpec</a>, \n<a href=\"#jenkins.io/v1.SourceRepositorySpec\">SourceRepositorySpec</a>, \n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>API version of the referent.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Kind of the referent.\nMore info: <a href=\"https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\">https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name of the referent.\nMore info: <a href=\"http://kubernetes.io/docs/user-guide/identifiers#names\">http://kubernetes.io/docs/user-guide/identifiers#names</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>uid</code></br>\n<em>\nk8s.io/apimachinery/pkg/types.UID\n</em>\n</td>\n<td>\n<p>UID of the referent.\nMore info: <a href=\"http://kubernetes.io/docs/user-guide/identifiers#uids\">http://kubernetes.io/docs/user-guide/identifiers#uids</a></p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Restrictions\">Restrictions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ProtectionPolicy\">ProtectionPolicy</a>, \n<a href=\"#jenkins.io/v1.ReviewPolicy\">ReviewPolicy</a>)\n</p>\n<p>\n<p>Restrictions limits who can merge\nUsers and Teams entries are appended to parent lists.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>users</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>teams</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.ReviewPolicy\">ReviewPolicy\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.ProtectionPolicy\">ProtectionPolicy</a>)\n</p>\n<p>\n<p>ReviewPolicy specifies git provider approval/review criteria.\nAny nil values inherit the policy from the parent, otherwise bool/ints are overridden.\nNon-empty lists are appended to parent lists.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>dismissalRestrictions</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Restrictions\">\nRestrictions\n</a>\n</em>\n</td>\n<td>\n<p>Restrictions appends users/teams that are allowed to merge</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>dismissStaleReviews</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>DismissStale overrides whether new commits automatically dismiss old reviews if set</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requireCodeOwnerReviews</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>RequireOwners overrides whether CODEOWNERS must approve PRs if set</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>requiredApprovingReviewCount</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n<p>Approvals overrides the number of approvals required if set (set to 0 to disable)</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SchedulerAgent\">SchedulerAgent\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>SchedulerAgent defines the scheduler agent configuration</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Agent defines the agent used to schedule jobs, by default Prow</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SchedulerSpec\">SchedulerSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Scheduler\">Scheduler</a>)\n</p>\n<p>\n<p>SchedulerSpec defines the pipeline scheduler (e.g. Prow) configuration</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>schedulerAgent</code></br>\n<em>\n<a href=\"#jenkins.io/v1.SchedulerAgent\">\nSchedulerAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>policy</code></br>\n<em>\n<a href=\"#jenkins.io/v1.GlobalProtectionPolicy\">\nGlobalProtectionPolicy\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>presubmits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Presubmits\">\nPresubmits\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postsubmits</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Postsubmits\">\nPostsubmits\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>trigger</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Trigger\">\nTrigger\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>approve</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Approve\">\nApprove\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>lgtm</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Lgtm\">\nLgtm\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>externalPlugins</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfExternalPlugins\">\nReplaceableSliceOfExternalPlugins\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>merger</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Merger\">\nMerger\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>plugins</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ReplaceableSliceOfStrings\">\nReplaceableSliceOfStrings\n</a>\n</em>\n</td>\n<td>\n<p>Plugins is a list of plugin names enabled for a repo</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>configUpdater</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ConfigUpdater\">\nConfigUpdater\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>welcome</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Welcome\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>periodics</code></br>\n<em>\n<a href=\"#jenkins.io/v1.Periodics\">\nPeriodics\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>attachments</code></br>\n<em>\n<a href=\"#jenkins.io/v1.*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment\">\n[]*github.com/jenkins-x/jx-api/pkg/apis/jenkins.io/v1.Attachment\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SourceRepositoryGroupSpec\">SourceRepositoryGroupSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SourceRepositoryGroup\">SourceRepositoryGroup</a>)\n</p>\n<p>\n<p>SourceRepositoryGroupSpec is the metadata for an Application/Project/SourceRepository</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>metadata</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#objectmeta-v1-meta\">\nKubernetes meta/v1.ObjectMeta\n</a>\n</em>\n</td>\n<td>\nRefer to the Kubernetes API documentation for the fields of the\n<code>metadata</code> field.\n</td>\n</tr>\n<tr>\n<td>\n<code>repositories</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\n[]ResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>scheduler</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.SourceRepositorySpec\">SourceRepositorySpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SourceRepository\">SourceRepository</a>)\n</p>\n<p>\n<p>SourceRepositorySpec provides details of the metadata for an App</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>provider</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Provider stores the URL of the git provider such as <a href=\"https://github.com\">https://github.com</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>org</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>repo</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>providerName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProviderName is a logical name for the provider without any URL scheme which can be used in a label selector</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>providerKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProviderKind is the kind of provider (github / bitbucketcloud / bitbucketserver etc)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL is the web URL of the project page</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>sshCloneURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>SSHCloneURL is the git URL to clone this repository using SSH</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>httpCloneURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>HTTPCloneURL is the git URL to clone this repository using HTTP/HTTPS</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>scheduler</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n<p>Scheduler a reference to a custom scheduler otherwise we default to the Team&rsquo;s Scededuler</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.StageActivityStep\">StageActivityStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PipelineActivityStep\">PipelineActivityStep</a>)\n</p>\n<p>\n<p>StageActivityStep represents a stage of zero to more sub steps in a jenkins pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>CoreActivityStep</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\nCoreActivityStep\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>CoreActivityStep</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#jenkins.io/v1.CoreActivityStep\">\n[]CoreActivityStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Statement\">Statement\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.FactSpec\">FactSpec</a>)\n</p>\n<p>\n<p>Statement represents a decision that was made, for example that a promotion was approved or denied</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>statementType</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>measurementValue</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tags</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.StorageLocation\">StorageLocation\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSettings\">TeamSettings</a>)\n</p>\n<p>\n<p>StorageLocation</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>classifier</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitBranch</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>bucketUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.TeamKindType\">TeamKindType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamSpec\">TeamSpec</a>)\n</p>\n<p>\n<p>TeamKindType is the kind of an Team</p>\n</p>\n<h3 id=\"jenkins.io/v1.TeamProvisionStatusType\">TeamProvisionStatusType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.TeamStatus\">TeamStatus</a>)\n</p>\n<p>\n<p>TeamProvisionStatusType is the kind of an Team</p>\n</p>\n<h3 id=\"jenkins.io/v1.TeamSettings\">TeamSettings\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>TeamSettings the default settings for a team</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>useGitOps</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>askOnCreate</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>branchPatterns</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>forkBranchPatterns</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>quickstartLocations</code></br>\n<em>\n<a href=\"#jenkins.io/v1.QuickStartLocation\">\n[]QuickStartLocation\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPackUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPackRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>helmBinary</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postPreviewJobs</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#job-v1-batch\">\n[]Kubernetes batch/v1.Job\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promotionEngine</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromotionEngineType\">\nPromotionEngineType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>noTiller</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>helmTemplate</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitServer</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>organisation</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>envOrganisation</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineUsername</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineUserEmail</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dockerRegistryOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitPublic</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kubeProvider</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>appsRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPackName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>storageLocations</code></br>\n<em>\n<a href=\"#jenkins.io/v1.StorageLocation\">\n[]StorageLocation\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>deployKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>DeployKind what kind of deployment (&ldquo;default&rdquo; uses regular Kubernetes Services and Deployments, &ldquo;knative&rdquo; uses the Knative Service resource instead)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>importMode</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ImportModeType\">\nImportModeType\n</a>\n</em>\n</td>\n<td>\n<p>ImportMode indicates what kind of</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>prowEngine</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ProwEngineType\">\nProwEngineType\n</a>\n</em>\n</td>\n<td>\n<p>ProwEngine is the kind of prow engine used such as knative build or build pipeline</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>versionStreamUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>VersionStreamURL contains the git clone URL for the Version Stream which is the set of versions to use for charts, images, packages etc</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>versionStreamRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>VersionStreamRef contains the git ref (tag or branch) in the VersionStreamURL repository to use as the version stream</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>appPrefixes</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>AppsPrefixes is the list of prefixes for appNames</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>defaultScheduler</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ResourceReference\">\nResourceReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>prowConfig</code></br>\n<em>\n<a href=\"#jenkins.io/v1.ProwConfigType\">\nProwConfigType\n</a>\n</em>\n</td>\n<td>\n<p>ProwConfig is the way we manage prow configurations</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>profile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Profile is the profile in use (see jx profile)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>bootRequirements</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>BootRequirements is a marshaled string of the jx-requirements.yml used in the most recent run for this cluster</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>deployOptions</code></br>\n<em>\n<a href=\"#jenkins.io/v1.DeployOptions\">\nDeployOptions\n</a>\n</em>\n</td>\n<td>\n<p>DeployOptions configures options for how to deploy applications by default such as using canary rollouts (progressive delivery) or using horizontal pod autoscaler</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.TeamSpec\">TeamSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Team\">Team</a>)\n</p>\n<p>\n<p>TeamSpec is the specification of an Team</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamKindType\">\nTeamKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>members</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.TeamStatus\">TeamStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Team\">Team</a>)\n</p>\n<p>\n<p>TeamStatus is the status for an Team resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>provisionStatus</code></br>\n<em>\n<a href=\"#jenkins.io/v1.TeamProvisionStatusType\">\nTeamProvisionStatusType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>message</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.Trigger\">Trigger\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.SchedulerSpec\">SchedulerSpec</a>)\n</p>\n<p>\n<p>Trigger specifies a configuration for a single trigger.</p>\n<p>The configuration for the trigger plugin is defined as a list of these structures.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>trustedOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>TrustedOrg is the org whose members&rsquo; PRs will be automatically built\nfor PRs to the above repos. The default is the PR&rsquo;s org.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>joinOrgUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>JoinOrgURL is a link that redirects users to a location where they\nshould be able to read more about joining the organization in order\nto become trusted members. Defaults to the Github link of TrustedOrg.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>onlyOrgMembers</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>OnlyOrgMembers requires PRs and/or /ok-to-test comments to come from org members.\nBy default, trigger also include repo collaborators.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ignoreOkToTest</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>IgnoreOkToTest makes trigger ignore /ok-to-test comments.\nThis is a security mitigation to only allow testing from trusted users.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.UserDetails\">UserDetails\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.User\">User</a>, \n<a href=\"#jenkins.io/v1.CommitSummary\">CommitSummary</a>, \n<a href=\"#jenkins.io/v1.IssueSummary\">IssueSummary</a>)\n</p>\n<p>\n<p>UserDetails containers details of a user</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>login</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>email</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>creationTimestamp</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#time-v1-meta\">\nKubernetes meta/v1.Time\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>avatarUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>serviceAccount</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>accountReference</code></br>\n<em>\n<a href=\"#jenkins.io/v1.AccountReference\">\n[]AccountReference\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>externalUser</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.UserSpec\">UserSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.PreviewGitSpec\">PreviewGitSpec</a>)\n</p>\n<p>\n<p>UserSpec is the user details</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>username</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>linkUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>imageUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WebHookEngineType\">WebHookEngineType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.EnvironmentSpec\">EnvironmentSpec</a>)\n</p>\n<p>\n<p>WebHookEngineType is the type of webhook processing implementation the team uses</p>\n</p>\n<h3 id=\"jenkins.io/v1.Welcome\">Welcome\n</h3>\n<p>\n<p>Welcome welcome plugin config</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>message_template</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WorkflowPreconditions\">WorkflowPreconditions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.WorkflowStep\">WorkflowStep</a>)\n</p>\n<p>\n<p>WorkflowPreconditions is the trigger to start a step</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>environments</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>the names of the environments which need to have promoted before this step can be triggered</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WorkflowSpec\">WorkflowSpec\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Workflow\">Workflow</a>)\n</p>\n<p>\n<p>WorkflowSpec is the specification of the pipeline activity</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowStep\">\n[]WorkflowStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WorkflowStatus\">WorkflowStatus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.Workflow\">Workflow</a>)\n</p>\n<p>\n<p>WorkflowStatus is the status for an Environment resource</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WorkflowStatusType\">WorkflowStatusType\n(<code>string</code> alias)</p></h3>\n<p>\n<p>WorkflowStatusType is the status of an activity; usually succeeded or failed/error on completion</p>\n</p>\n<h3 id=\"jenkins.io/v1.WorkflowStep\">WorkflowStep\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.WorkflowSpec\">WorkflowSpec</a>)\n</p>\n<p>\n<p>WorkflowStep represents a step in a pipeline activity</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowStepKindType\">\nWorkflowStepKindType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>description</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>trigger</code></br>\n<em>\n<a href=\"#jenkins.io/v1.WorkflowPreconditions\">\nWorkflowPreconditions\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promote</code></br>\n<em>\n<a href=\"#jenkins.io/v1.PromoteWorkflowStep\">\nPromoteWorkflowStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jenkins.io/v1.WorkflowStepKindType\">WorkflowStepKindType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#jenkins.io/v1.WorkflowStep\">WorkflowStep</a>)\n</p>\n<p>\n<p>WorkflowStepKindType is a kind of step</p>\n</p>\n<hr/>\n<p><em>\nGenerated with <code>gen-crd-api-reference-docs</code>\non git commit <code>11f2023</code>.\n</em></p>\n",
            "content/en/docs/reference/commands/_index.md": "---\ntitle: \"CLI\"\nlinkTitle: \"CLI\"\nweight: 1\ndescription: >\n  jx command line reference\n---\n\n[Overview of jx commands](/commands/jx/)",
            "content/en/docs/reference/commands/deprecation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"deprecated commands\"\nslug: deprecation\nurl: /commands/deprecation/\ndescription: list of jx commands which have been deprecated\n---\n\n\n## Deprecated Commands\n\n\n\n| Command        | Removal Date   | Replacement  |\n|----------------|----------------|--------------|\n| jx create addon kubeless | Sep 1 2020 | jx add app jx-app-kubeless |\n| jx create spring | Sep 1 2020 | jx create project |\n| jx create vault | Sep 1 2020 |  |\n| jx delete vault | Sep 1 2020 |  |\n| jx init | Sep 1 2020 | jx boot |\n| jx install | Sep 1 2020 | jx boot |\n| jx upgrade ingress | Sep 1 2020 | jx boot |\n",
            "content/en/docs/reference/commands/jx.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx\"\nslug: jx\nurl: /commands/jx/\ndescription: list of jx commands\n---\n## jx\n\njx is a command line tool for working with Jenkins X\n\n### Synopsis\n\njx is a command line tool for working with Jenkins X\n\n```\njx [flags]\n```\n\n### Options\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n  -h, --help         help for jx\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx add](/commands/jx_add/)\t - Adds a new resource\n* [jx boot](/commands/jx_boot/)\t - Boots up Jenkins X in a Kubernetes cluster using GitOps and a Jenkins X Pipeline\n* [jx completion](/commands/jx_completion/)\t - Output shell completion code for the given shell (bash or zsh)\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n* [jx context](/commands/jx_context/)\t - View or change the current Kubernetes context (Kubernetes cluster)\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx diagnose](/commands/jx_diagnose/)\t - Print diagnostic information about the Jenkins X installation\n* [jx docs](/commands/jx_docs/)\t - Open the documentation in a browser\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n* [jx environment](/commands/jx_environment/)\t - View or change the current environment in the current Kubernetes cluster\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n* [jx import](/commands/jx_import/)\t - Imports a local project or Git repository into Jenkins\n* [jx logs](/commands/jx_logs/)\t - Tails the log of the latest pod for a deployment\n* [jx namespace](/commands/jx_namespace/)\t - View or change the current namespace context in the current Kubernetes cluster\n* [jx open](/commands/jx_open/)\t - Open a service in a browser\n* [jx options](/commands/jx_options/)\t - \n* [jx preview](/commands/jx_preview/)\t - Creates or updates a Preview Environment for the current version of an application\n* [jx profile](/commands/jx_profile/)\t - Set your jx profile\n* [jx promote](/commands/jx_promote/)\t - Promotes a version of an application to an Environment\n* [jx prompt](/commands/jx_prompt/)\t - Generate the command line prompt for the current team and environment\n* [jx repository](/commands/jx_repository/)\t - Opens the web page for the current Git repository in a browser\n* [jx rsh](/commands/jx_rsh/)\t - Opens a terminal in a pod or runs a command in the pod\n* [jx scan](/commands/jx_scan/)\t - Perform a scan action\n* [jx shell](/commands/jx_shell/)\t - Create a sub shell so that changes to the Kubernetes context, namespace or environment remain local to the shell\n* [jx start](/commands/jx_start/)\t - Starts a process such as a pipeline\n* [jx status](/commands/jx_status/)\t - status of the Kubernetes cluster or named node\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx stop](/commands/jx_stop/)\t - Stops a process such as a pipeline\n* [jx sync](/commands/jx_sync/)\t - Synchronises your local files to a DevPod\n* [jx team](/commands/jx_team/)\t - View or change the current team in the current Kubernetes cluster\n* [jx ui](/commands/jx_ui/)\t - Opens the CloudBees Jenkins X UI app for Kubernetes for visualising CI/CD and your environments\n* [jx uninstall](/commands/jx_uninstall/)\t - Uninstall the Jenkins X platform\n* [jx update](/commands/jx_update/)\t - Updates an existing resource\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n* [jx version](/commands/jx_version/)\t - Print the version information\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_add.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx add\"\nslug: jx_add\nurl: /commands/jx_add/\ndescription: list of jx commands\n---\n## jx add\n\nAdds a new resource\n\n### Synopsis\n\nAdds a new resource.\n  \n  Valid resource types include:\n  \n  * app\n\n```\njx add [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for add\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx add app](/commands/jx_add_app/)\t - Adds an App (an app is similar to an addon)\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_add_app.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx add app\"\nslug: jx_add_app\nurl: /commands/jx_add_app/\ndescription: list of jx commands\n---\n## jx add app\n\nAdds an App (an app is similar to an addon)\n\n### Synopsis\n\nAdds an App to Jenkins X (an app is similar to an addon),\n\n```\njx add app [flags]\n```\n\n### Examples\n\n```\n  # Add an app\n  jx add app jx-app-jacoco\n  \n  # Add an app from a local path\n  jx add app .\n  \n  # Add an app from git repository\n  jx add app https://github.com/jenkins-x-apps/jx-app-kubeless.git\n```\n\n### Options\n\n```\n      --alias string         An alias to use for the app if you wish to install multiple instances of the same app\n      --auto-merge           Automatically merge GitOps pull requests that pass CI\n      --helm-update          Should we run helm update first to ensure we use the latest version (available when NOT using GitOps for your dev environment) (default true)\n  -h, --help                 help for app\n  -n, --namespace string     The Namespace to install into (available when NOT using GitOps for your dev environment)\n      --password string      The password for the repository\n      --repository string    The repository from which the app should be installed (default specified in your dev environment)\n  -s, --set stringArray      The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2) (available when NOT using GitOps for your dev environment)\n      --username string      The username for the repository\n  -f, --values stringArray   List of locations for values files, can be local files or URLs (available when NOT using GitOps for your dev environment)\n  -v, --version string       The chart version to install\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx add](/commands/jx_add/)\t - Adds a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_boot.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx boot\"\nslug: jx_boot\nurl: /commands/jx_boot/\ndescription: list of jx commands\n---\n## jx boot\n\nBoots up Jenkins X in a Kubernetes cluster using GitOps and a Jenkins X Pipeline\n\n### Synopsis\n\nBoots up Jenkins X in a Kubernetes cluster using GitOps and a Jenkins X Pipeline \n\nFor more documentation see: https://jenkins-x.io/docs/getting-started/setup/boot/\n\n```\njx boot [flags]\n```\n\n### Examples\n\n```\n  # create a kubernetes cluster via Terraform or via jx\n  jx create cluster gke --skip-installation\n  \n  # now lets boot up Jenkins X installing/upgrading whatever is needed\n  jx boot\n  \n  # if we have already booted and just want to apply some environment changes without\n  # re-applying ingress and so forth we can start at the environment step:\n  jx boot --start-step install-env\n```\n\n### Options\n\n```\n  -a, --attempt-restore        attempt to boot from an existing dev environment repository\n  -d, --dir string             the directory to look for the Jenkins X Pipeline, requirements and charts (default \".\")\n  -e, --end-step string        the step in the pipeline to end at\n      --git-ref string         override the Git ref for the JX Boot source to start from, ignoring the versions stream. Normally specified with git-url as well\n  -u, --git-url string         override the Git clone URL for the JX Boot source to start from, ignoring the versions stream. Normally specified with git-ref as well\n  -v, --helm-log string        sets the helm logging level from 0 to 9. Passed into the helm CLI via the '-v' argument. Useful to diagnose helm related issues\n  -h, --help                   help for boot\n      --no-update-git          disables any attempt to update the local git clone if its old\n  -r, --requirements string    WARNING: this should only be used for the initial boot of a cluster: requirements file which will overwrite the default requirements file\n  -s, --start-step string      the step in the pipeline to start from\n      --versions-ref string    the bootstrap ref for the versions repo. Once the boot config is cloned, the repo will be then read from the jx-requirements.yml (default \"master\")\n      --versions-repo string   the bootstrap URL for the versions repo. Once the boot config is cloned, the repo will be then read from the jx-requirements.yml (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_completion.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx completion\"\nslug: jx_completion\nurl: /commands/jx_completion/\ndescription: list of jx commands\n---\n## jx completion\n\nOutput shell completion code for the given shell (bash or zsh)\n\n### Synopsis\n\nOutput shell completion code for the given shell (bash or zsh). \n\nThis command prints shell code which must be evaluation to provide interactive completion of jx commands. \n\n  $ source <(jx completion bash)\n  \nwill load the jx completion code for bash. Note that this depends on the bash-completion framework. It must be sourced before sourcing the jx completion, e.g. on the Mac: \n\n  $ brew install bash-completion\n  $ source $(brew --prefix)/etc/bash_completion\n  $ source <(jx completion bash)\n  \nOn a Mac it often works better to generate a file with the completion and source that: \n\n  $ jx completion bash > ~/.jx/bash\n  $ source ~/.jx/bash\n  \nIf you use zsh [1], the following will load jx zsh completion: \n\n  $ source <(jx completion zsh)\n  \n [1] zsh completions are only supported in versions of zsh >= 5.2\n\n```\njx completion SHELL [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for completion\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance\"\nslug: jx_compliance\nurl: /commands/jx_compliance/\ndescription: list of jx commands\n---\n## jx compliance\n\nRun compliance tests against Kubernetes cluster\n\n### Synopsis\n\nRun compliance tests against Kubernetes cluster\n\n```\njx compliance ACTION [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for compliance\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx compliance delete](/commands/jx_compliance_delete/)\t - Deletes the Kubernetes resources allocated by the compliance tests\n* [jx compliance logs](/commands/jx_compliance_logs/)\t - Prints the logs of compliance tests\n* [jx compliance results](/commands/jx_compliance_results/)\t - Shows the results of compliance tests\n* [jx compliance run](/commands/jx_compliance_run/)\t - Runs the compliance tests\n* [jx compliance status](/commands/jx_compliance_status/)\t - Retrieves the status of compliance tests\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance_delete.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance delete\"\nslug: jx_compliance_delete\nurl: /commands/jx_compliance_delete/\ndescription: list of jx commands\n---\n## jx compliance delete\n\nDeletes the Kubernetes resources allocated by the compliance tests\n\n### Synopsis\n\nDeletes the Kubernetes resources allocated by the compliance tests\n\n```\njx compliance delete [flags]\n```\n\n### Examples\n\n```\n  # Delete the Kubernetes resources allocated by the compliance test\n  jx compliance delete\n```\n\n### Options\n\n```\n  -h, --help   help for delete\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance_logs.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance logs\"\nslug: jx_compliance_logs\nurl: /commands/jx_compliance_logs/\ndescription: list of jx commands\n---\n## jx compliance logs\n\nPrints the logs of compliance tests\n\n### Synopsis\n\nPrints the logs of compliance tests\n\n```\njx compliance logs [flags]\n```\n\n### Examples\n\n```\n  # Print the compliance logs\n  jx compliance logs\n```\n\n### Options\n\n```\n  -f, --follow   Specify if the logs should be streamed.\n  -h, --help     help for logs\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance_results.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance results\"\nslug: jx_compliance_results\nurl: /commands/jx_compliance_results/\ndescription: list of jx commands\n---\n## jx compliance results\n\nShows the results of compliance tests\n\n### Synopsis\n\nShows the results of the compliance tests\n\n```\njx compliance results [flags]\n```\n\n### Examples\n\n```\n  # Show the compliance results\n  jx compliance results\n```\n\n### Options\n\n```\n  -h, --help   help for results\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance_run.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance run\"\nslug: jx_compliance_run\nurl: /commands/jx_compliance_run/\ndescription: list of jx commands\n---\n## jx compliance run\n\nRuns the compliance tests\n\n### Synopsis\n\nRuns the compliance tests\n\n```\njx compliance run [flags]\n```\n\n### Examples\n\n```\n  # Run the compliance tests\n  jx compliance run\n```\n\n### Options\n\n```\n  -h, --help   help for run\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_compliance_status.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx compliance status\"\nslug: jx_compliance_status\nurl: /commands/jx_compliance_status/\ndescription: list of jx commands\n---\n## jx compliance status\n\nRetrieves the status of compliance tests\n\n### Synopsis\n\nRetrieves the current status of the compliance tests\n\n```\njx compliance status [flags]\n```\n\n### Examples\n\n```\n  # Get the status\n  jx compliance status\n```\n\n### Options\n\n```\n  -h, --help   help for status\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx compliance](/commands/jx_compliance/)\t - Run compliance tests against Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_context.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx context\"\nslug: jx_context\nurl: /commands/jx_context/\ndescription: list of jx commands\n---\n## jx context\n\nView or change the current Kubernetes context (Kubernetes cluster)\n\n### Synopsis\n\nDisplays or changes the current Kubernetes context (cluster).\n\n```\njx context [flags]\n```\n\n### Examples\n\n```\n  # to select the context to switch to\n  jx context\n  \n  # or the more concise alias\n  jx ctx\n  \n  # view the current context\n  jx ctx -b\n```\n\n### Options\n\n```\n  -f, --filter string   Filter the list of contexts to switch between using the given text\n  -h, --help            help for context\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller\"\nslug: jx_controller\nurl: /commands/jx_controller/\ndescription: list of jx commands\n---\n## jx controller\n\nRuns a controller\n\n### Synopsis\n\nRuns a controller\n\n```\njx controller <command> [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n  -h, --help   help for controller\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx controller backup](/commands/jx_controller_backup/)\t - Runs the backup controller\n* [jx controller build](/commands/jx_controller_build/)\t - Runs the build controller\n* [jx controller buildnumbers](/commands/jx_controller_buildnumbers/)\t - Runs the service to generate build numbers.\n* [jx controller commitstatus](/commands/jx_controller_commitstatus/)\t - Updates commit status\n* [jx controller environment](/commands/jx_controller_environment/)\t - A controller which takes a webhook and updates the environment via GitOps for remote clusters\n* [jx controller pipelinerunner](/commands/jx_controller_pipelinerunner/)\t - Runs the service to generate Tekton PipelineRun resources from source code webhooks such as from Prow\n* [jx controller role](/commands/jx_controller_role/)\t - Controller which mirrors Role & EnvironmentRoleBinding resources to Roles and RoleBindings in all matching Environment namespaces\n* [jx controller team](/commands/jx_controller_team/)\t - Runs the team controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_backup.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller backup\"\nslug: jx_controller_backup\nurl: /commands/jx_controller_backup/\ndescription: list of jx commands\n---\n## jx controller backup\n\nRuns the backup controller\n\n### Synopsis\n\nRuns the backup controller\n\n```\njx controller backup [flags]\n```\n\n### Options\n\n```\n  -h, --help                  help for backup\n  -n, --namespace string      The namespace to watch or defaults to the current namespace\n  -o, --organisation string   The organisation to backup\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_build.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller build\"\nslug: jx_controller_build\nurl: /commands/jx_controller_build/\ndescription: list of jx commands\n---\n## jx controller build\n\nRuns the build controller\n\n### Synopsis\n\nRuns the build controller\n\n```\njx controller build [flags]\n```\n\n### Options\n\n```\n      --fail-on-git-provider-error           If enable then lets terminate quickly if we cannot create a git provider\n      --git-credentials                      If enable then lets run the 'jx step git credentials' step to initialise git credentials\n      --git-reporting                        If enabled then lets report pipeline success/failures to the git provider. Note this is purely tactical until we can do this natively inside tekton\n  -h, --help                                 help for build\n      --job-url-base string                  The base URL, such as 'https://dashboard.jenkins-x.live', for generating the target URL for pipeline logs if git reporting is enabled.\n  -n, --namespace string                     The namespace to watch or defaults to the current namespace\n      --target-url-template --job-url-base   The Go template for generating the target URL of pipeline logs/views if git reporting is enabled. If unspecified, a default will be used based on --job-url-base.\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_buildnumbers.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller buildnumbers\"\nslug: jx_controller_buildnumbers\nurl: /commands/jx_controller_buildnumbers/\ndescription: list of jx commands\n---\n## jx controller buildnumbers\n\nRuns the service to generate build numbers.\n\n### Synopsis\n\nRuns the build number controller that serves sequential build numbers over an HTTP interface.\n\n```\njx controller buildnumbers [flags]\n```\n\n### Examples\n\n```\n  jx buildnumbers\n```\n\n### Options\n\n```\n      --bind string   The interface address to bind to (by default, will listen on all interfaces/addresses).\n  -h, --help          help for buildnumbers\n      --port int      The TCP port to listen on. (default 8080)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_commitstatus.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller commitstatus\"\nslug: jx_controller_commitstatus\nurl: /commands/jx_controller_commitstatus/\ndescription: list of jx commands\n---\n## jx controller commitstatus\n\nUpdates commit status\n\n### Synopsis\n\nUpdates commit status\n\n```\njx controller commitstatus [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for commitstatus\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller environment\"\nslug: jx_controller_environment\nurl: /commands/jx_controller_environment/\ndescription: list of jx commands\n---\n## jx controller environment\n\nA controller which takes a webhook and updates the environment via GitOps for remote clusters\n\n### Synopsis\n\nA controller which takes a webhook and updates the environment via GitOps for remote clusters\n\n```\njx controller environment [flags]\n```\n\n### Examples\n\n```\n  # run the environment controller\n  jx controller environment\n```\n\n### Options\n\n```\n      --bind string                  The interface address to bind to (by default, will listen on all interfaces/addresses).\n  -c, --context string               The pipeline context if there are multiple separate pipelines for a given branch\n      --default-image string         Specify the docker image to use if there is no image specified for a step and there's no Pod Template (default \"gcr.io/jenkinsxio/builder-maven\")\n      --delete-temp-dir              Deletes the temporary directory of cloned files if using the 'clone-git-url' option (default true)\n      --docker-registry string       The Docker Registry host name to use which is added as a prefix to docker images\n      --docker-registry-org string   The Docker registry organisation. If blank the git repository owner is used\n      --duration duration            Retry duration when trying to create a PipelineRun (default 30s)\n      --git-kind string              The kind of git repository. Should be one of: bitbucketcloud, bitbucketserver, gitea, github, gitlab. If not specified defaults to $GIT_KIND\n      --git-server-url string        The git server URL. If not specified defaults to $GIT_SERVER_URL\n  -h, --help                         help for environment\n      --image string                 Specify a custom image to use for the steps which overrides the image in the PodTemplates\n      --kaniko-flags string          Optional flags to pass to kaniko builds; such as to indicate --insecure docker registry being used\n      --kaniko-image string          The docker image for Kaniko (default \"gcr.io/kaniko-project/executor:v0.22.0\")\n      --kaniko-secret string         The name of the kaniko secret (default \"kaniko-secret\")\n      --kaniko-secret-key string     The key in the Kaniko Secret to mount (default \"kaniko-secret\")\n      --kaniko-secret-mount string   The mount point of the Kaniko secret (default \"/kaniko-secret/secret.json\")\n      --no-git-init                  Disables checking we have setup git credentials on startup\n      --no-kaniko                    Disables using kaniko directly for building docker images\n      --no-register-webhook          Disables checking to register the webhook on startup\n      --no-release-prepare           Disables creating the release version number and tagging git and triggering the release pipeline from the new tag\n  -o, --owner string                 The git repository owner. If not specified defaults to $OWNER\n  -p, --pack string                  The build pack name. If none is specified its discovered from the source code\n      --path string                  The path to listen on for requests to trigger a pipeline run. (default \"/hook\")\n      --port int                     The TCP port to listen on. (default 8080)\n      --project-id string            The cloud project ID. If not specified we default to the install project\n      --push-ref string              The git ref passed from the WebHook which should trigger a new deploy pipeline to trigger. Defaults to only webhooks from the master branch (default \"refs/heads/master\")\n  -r, --ref string                   The Git reference (branch,tag,sha) in the Git repository to use\n      --repo string                  The git repository name. If not specified defaults to $REPO\n      --require-headers              If enabled we reject webhooks which do not have the github headers: 'X-GitHub-Event' and 'X-GitHub-Delivery' (default true)\n      --service-account string       The Kubernetes ServiceAccount to use to run the pipeline (default \"tekton-bot\")\n      --source string                The name of the source repository (default \"source\")\n  -s, --source-url string            The source URL of the environment git repository\n      --target-path string           The target path appended to /workspace/${source} to clone the source code\n  -u, --url string                   The URL for the build pack Git repository\n  -w, --webhook-url string           The external WebHook URL of this controller to register with the git provider. If not specified defaults to $WEBHOOK_URL\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_pipelinerunner.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller pipelinerunner\"\nslug: jx_controller_pipelinerunner\nurl: /commands/jx_controller_pipelinerunner/\ndescription: list of jx commands\n---\n## jx controller pipelinerunner\n\nRuns the service to generate Tekton PipelineRun resources from source code webhooks such as from Prow\n\n### Synopsis\n\nRuns the service to generate Tekton resources from source code webhooks such as from Prow\n\n```\njx controller pipelinerunner [flags]\n```\n\n### Examples\n\n```\n  # run the pipeline runner controller\n  jx controller pipelinerunner\n```\n\n### Options\n\n```\n      --bind string                  The interface address to bind to (by default, will listen on all interfaces/addresses). (default \"0.0.0.0\")\n  -h, --help                         help for pipelinerunner\n      --meta-pipeline-image string   Specify the docker image to use if there is no image specified for a step.\n      --no-git-init                  Disables checking we have setup git credentials on startup.\n      --path string                  The path to listen on for requests to trigger a pipeline run. (default \"/\")\n      --port int                     The TCP port to listen on. (default 8080)\n      --semantic-release             Enable semantic releases\n      --service-account string       The Kubernetes ServiceAccount to use to run the pipeline. (default \"tekton-bot\")\n      --use-meta-pipeline            Uses the meta pipeline to create the pipeline. (default true)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_role.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller role\"\nslug: jx_controller_role\nurl: /commands/jx_controller_role/\ndescription: list of jx commands\n---\n## jx controller role\n\nController which mirrors Role & EnvironmentRoleBinding resources to Roles and RoleBindings in all matching Environment namespaces\n\n### Synopsis\n\nController which replicas Role and EnvironmentRoleBinding resources to Roles and RoleBindings in all matching Environment namespaces. \n\nRBAC in Kubernetes is either global with ClusterRoles or is namespace based with Roles per Namespace. \n\nWe use a Custom Resource called EnvironmentRoleBinding which binds Roles and its bindings from the development environment into each Environment's Namespace. \n\ne.g. each EnvironmentRoleBinding will result in a RoleBinding and Role resource being create in each matching Environment. So when a Preview environment is created it will have the correct Role and RoleBinding resources added.\n\n```\njx controller role [flags]\n```\n\n### Examples\n\n```\n  # watch for changes in Role and EnvironmentRoleBindings in the dev namespace\n  # and update the Role + RoleBinding resources in each environment namespace\n  jx controller role\n  \n  # update the current RoleBinding resources in each environment based on the current EnvironmentRoleBindings\n  jx controller role --no-watch\n```\n\n### Options\n\n```\n  -h, --help       help for role\n  -n, --no-watch   To disable watching of the resources - to enable one-shot mode\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_controller_team.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx controller team\"\nslug: jx_controller_team\nurl: /commands/jx_controller_team/\ndescription: list of jx commands\n---\n## jx controller team\n\nRuns the team controller\n\n### Synopsis\n\nRuns the team controller\n\n```\njx controller team [flags]\n```\n\n### Options\n\n```\n      --advanced-mode                         Advanced install options. This will prompt for advanced install options\n      --azure-acr-subscription string         The Azure subscription under which the specified docker-registry is located\n      --buildpack string                      The name of the build pack to use for the Team\n      --cleanup-temp-files                    Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --cloud-environment-repo string         Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n      --config-file string                    Configuration file used for installation\n      --default-admin-password string         the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string         the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string     Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n      --docker-registry string                The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string            The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                         Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                     Only install draft client\n      --environment-git-owner string          The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path        The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string   The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                        Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                          Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                    The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                  The Git API token to use for creating new Git repositories\n      --git-provider-kind string              Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string               The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                            Create new Git repositories as public\n      --git-username string                   The Git username to use for creating new Git repositories\n      --gitops                                Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                         Whether or not to use a cluster global tiller (default true)\n      --helm-client-only                      Only install helm client\n      --helm-tls                              Whether to use TLS with helm\n      --helm3                                 Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                  help for team\n      --ingress-class string                  Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string           The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string             The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string              The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                  Enables automatic dependencies installation when required\n      --install-only                          Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --kaniko                                Use Kaniko for building docker images\n      --keep-exposecontroller-job             Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n      --local-cloud-environment               Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string           The name of the helm repository for the installed ChartMuseum (default \"releases\")\n      --long-term-storage                     Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                     The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n      --namespace string                      The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --ng                                    Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                               Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments               Disables the creation of the default Staging and Production environments\n      --no-gitops-env-apply                   When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                    When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                   When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                       When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-tiller                             Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n      --on-premise                            If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n      --prow                                  Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --recreate-existing-draft-repos         Delete existing helm repos used by Jenkins X under ~/draft/packs\n      --register-local-helmrepo               Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                   Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                         If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n      --skip-auth-secrets-merge               Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                     Don't enable cluster admin role for user\n      --skip-ingress                          Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-setup-tiller                     Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --static-jenkins                        Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --tekton                                Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --tiller-cluster-role string            The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string               The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                        The number of seconds to wait for the helm install to complete (default \"6000\")\n      --urltemplate string                    For ingress; exposers can set the urltemplate to expose\n      --user-cluster-role string              The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n      --username string                       The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                 Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                 If the vault bucket already exists delete it then create it empty (default true)\n      --version string                        The specific platform version to install\n      --versions-ref string                   Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                  Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx controller](/commands/jx_controller/)\t - Runs a controller\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create\"\nslug: jx_create\nurl: /commands/jx_create/\ndescription: list of jx commands\n---\n## jx create\n\nCreate a new resource\n\n### Synopsis\n\nCreates a new resource.\n  \n  Valid resource types include:\n  \n  * cluster  \n  * env  \n  * git  \n  * spring (aka 'springboot')\n\n```\njx create [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for create\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n* [jx create branchpattern](/commands/jx_create_branchpattern/)\t - Create a git branch pattern for your team\n* [jx create chat](/commands/jx_create_chat/)\t - Creates a chat server resource\n* [jx create cluster](/commands/jx_create_cluster/)\t - Create a new Kubernetes cluster\n* [jx create devpod](/commands/jx_create_devpod/)\t - Creates a DevPod for running builds and tests inside the cluster\n* [jx create docker](/commands/jx_create_docker/)\t - Create/update Docker auth for a given host and user in the config.json file\n* [jx create docs](/commands/jx_create_docs/)\t - Creates the documentation files\n* [jx create domain](/commands/jx_create_domain/)\t - Create a domain in a managed DNS service provider\n* [jx create environment](/commands/jx_create_environment/)\t - Create a new Environment which is used to promote your Team's Applications via Continuous Delivery\n* [jx create etc-hosts](/commands/jx_create_etc-hosts/)\t - Creates a new Git server URL\n* [jx create git](/commands/jx_create_git/)\t - Creates a Git resource\n* [jx create gke-service-account](/commands/jx_create_gke-service-account/)\t - Creates a GKE service account\n* [jx create issue](/commands/jx_create_issue/)\t - Create an issue on the git project for the current directory\n* [jx create jenkins](/commands/jx_create_jenkins/)\t - Creates a Jenkins resource\n* [jx create mlquickstart](/commands/jx_create_mlquickstart/)\t - Create a new machine learning app from a set of quickstarts and import the generated code into Git and Jenkins for CI/CD\n* [jx create project](/commands/jx_create_project/)\t - Create a new Project by importing code, using a Quickstart or custom wizard for Spring\n* [jx create pullrequest](/commands/jx_create_pullrequest/)\t - Create a Pull Request on the git project for the current directory\n* [jx create quickstart](/commands/jx_create_quickstart/)\t - Create a new app from a Quickstart and import the generated code into Git and Jenkins for CI/CD\n* [jx create quickstartlocation](/commands/jx_create_quickstartlocation/)\t - Create a location of quickstarts for your team\n* [jx create step](/commands/jx_create_step/)\t - Creates a step in the Jenkins X Pipeline\n* [jx create team](/commands/jx_create_team/)\t - Create a new Team which is then provisioned later on\n* [jx create token](/commands/jx_create_token/)\t - Creates a new user token for a service\n* [jx create tracker](/commands/jx_create_tracker/)\t - Creates an issue tracker resource\n* [jx create user](/commands/jx_create_user/)\t - Create a new User which is then provisioned by the user controller\n* [jx create variable](/commands/jx_create_variable/)\t - Creates an environment variable in the Jenkins X Pipeline\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon\"\nslug: jx_create_addon\nurl: /commands/jx_create_addon/\ndescription: list of jx commands\n---\n## jx create addon\n\nCreates an addon\n\n### Synopsis\n\nCreates an addon\n\n```\njx create addon [flags]\n```\n\n### Options\n\n```\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for addon\n  -n, --namespace string     The Namespace to install into (default \"jx\")\n  -r, --release string       The chart release name\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create addon ambassador](/commands/jx_create_addon_ambassador/)\t - Create an ambassador addon\n* [jx create addon anchore](/commands/jx_create_addon_anchore/)\t - Create the Anchore addon for verifying container images\n* [jx create addon environment](/commands/jx_create_addon_environment/)\t - Create an Environment Controller to handle webhooks and promote changes from GitOps\n* [jx create addon flagger](/commands/jx_create_addon_flagger/)\t - Create the Flagger addon for Canary deployments\n* [jx create addon gitea](/commands/jx_create_addon_gitea/)\t - Create a Gitea addon for hosting Git repositories\n* [jx create addon gloo](/commands/jx_create_addon_gloo/)\t - Create a Gloo and Knative Serve addon for creating serverless applications\n* [jx create addon ingress](/commands/jx_create_addon_ingress/)\t - Create an Ingress Controller to expose services outside of your remote Staging/Production cluster\n* [jx create addon istio](/commands/jx_create_addon_istio/)\t - Create the Istio addon for service mesh\n* [jx create addon owasp-zap](/commands/jx_create_addon_owasp-zap/)\t - Create the OWASP Zed Attack Proxy addon for dynamic security checks against running apps\n* [jx create addon pipeline-events](/commands/jx_create_addon_pipeline-events/)\t - Create the pipeline events addon\n* [jx create addon prometheus](/commands/jx_create_addon_prometheus/)\t - Creates a prometheus addon\n* [jx create addon prow](/commands/jx_create_addon_prow/)\t - Create a Prow addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_ambassador.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon ambassador\"\nslug: jx_create_addon_ambassador\nurl: /commands/jx_create_addon_ambassador/\ndescription: list of jx commands\n---\n## jx create addon ambassador\n\nCreate an ambassador addon\n\n### Synopsis\n\nCreates the ambassador addon for smart load balancing on kubernetes\n\n```\njx create addon ambassador [flags]\n```\n\n### Examples\n\n```\n  # Create the ambassador addon\n  jx create addon ambassador\n  \n  # Create the ambassador addon in a custom namespace\n  jx create addon ambassador -n mynamespace\n```\n\n### Options\n\n```\n  -c, --chart string         The name of the chart to use (default \"datawire/ambassador\")\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for ambassador\n  -n, --namespace string     The Namespace to install into\n  -r, --release string       The chart release name (default \"ambassador\")\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_anchore.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon anchore\"\nslug: jx_create_addon_anchore\nurl: /commands/jx_create_addon_anchore/\ndescription: list of jx commands\n---\n## jx create addon anchore\n\nCreate the Anchore addon for verifying container images\n\n### Synopsis\n\nCreates the anchore addon for serverless on kubernetes\n\n```\njx create addon anchore [flags]\n```\n\n### Examples\n\n```\n  # Create the anchore addon\n  jx create addon anchore\n  \n  # Create the anchore addon in a custom namespace\n  jx create addon anchore -n mynamespace\n```\n\n### Options\n\n```\n  -c, --chart string         The name of the chart to use (default \"stable/anchore-engine\")\n  -d, --config-dir string    The config directory to use (default \"/anchore_service_dir\")\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for anchore\n  -n, --namespace string     The Namespace to install into (default \"anchore\")\n  -p, --password string      The default password to use for Anchore (default \"anchore\")\n  -r, --release string       The chart release name (default \"anchore\")\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install) (default \"0.2.3\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon environment\"\nslug: jx_create_addon_environment\nurl: /commands/jx_create_addon_environment/\ndescription: list of jx commands\n---\n## jx create addon environment\n\nCreate an Environment Controller to handle webhooks and promote changes from GitOps\n\n### Synopsis\n\nCreate an Environment Controller to handle webhooks and promote changes from GitOps\n\n```\njx create addon environment controller [flags]\n```\n\n### Examples\n\n```\n  # Creates the environment controller using a specific environment git repository, project, git user, chart repo\n  jx create addon envctl -s https://github.com/myorg/env-production.git --project-id myproject --docker-registry gcr.io --cluster-rbac true --user mygituser --token mygittoken\n```\n\n### Options\n\n```\n      --buildpack-ref string         The Git reference (branch,tag,sha) in the Git repository to use\n      --buildpack-url string         The URL for the build pack Git repository\n      --cluster-rbac                 Whether to enable cluster level RBAC on Tekton\n      --cluster-role string          The cluster role for the current user to be able to install Cluster RBAC based Environment Controller (default \"cluster-admin\")\n      --docker-registry string       The Docker Registry host name to use which is added as a prefix to docker images\n      --docker-registry-org string   The Docker registry organisation. If blank the git repository owner is used\n      --git-kind string              The kind of git repository. Should be one of: bitbucketcloud, bitbucketserver, gitea, github, gitlab\n  -h, --help                         help for environment\n  -n, --namespace string             The namespace to install the controller\n      --no-cluster-admin             If using cluster RBAC the current user needs 'cluster-admin' karma which this command will add if its possible\n      --project-id string            The cloud project ID\n  -r, --release string               The chart release name (default \"jxet\")\n      --set string                   The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -s, --source-url string            The git URL of the environment repository to promote from\n      --timeout int                  The timeout value for how long to wait for the install to succeed (default 600000)\n  -t, --token string                 The git token to clone and tag the git repository\n  -u, --user string                  The git user to use to clone and tag the git repository\n      --version string               The version of the chart to use - otherwise the latest version is used\n  -w, --webhook-url string           The webhook URL used to expose the exposecontroller and register with the git provider's webhooks\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_flagger.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon flagger\"\nslug: jx_create_addon_flagger\nurl: /commands/jx_create_addon_flagger/\ndescription: list of jx commands\n---\n## jx create addon flagger\n\nCreate the Flagger addon for Canary deployments\n\n### Synopsis\n\nCreates the Flagger addon\n\n```\njx create addon flagger [flags]\n```\n\n### Examples\n\n```\n  # Create the Flagger addon\n  jx create addon flagger\n```\n\n### Options\n\n```\n  -c, --chart string             The name of the chart to use (default \"flagger/flagger\")\n  -e, --environment string       The name of the production environment where Istio will be enabled (default \"production\")\n      --grafana-chart string     The name of the Flagger Grafana chart to use (default \"flagger/grafana\")\n      --grafana-version string   The version of the Flagger Grafana chart\n      --helm-update              Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                     help for flagger\n      --istio-gateway string     The name of the Istio Gateway that will be created if it does not exist (default \"jx-gateway\")\n  -n, --namespace string         The Namespace to install into (default \"istio-system\")\n  -r, --release string           The chart release name (default \"flagger\")\n  -s, --set string               The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray       List of locations for values files, can be local files or URLs\n  -v, --version string           The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_gitea.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon gitea\"\nslug: jx_create_addon_gitea\nurl: /commands/jx_create_addon_gitea/\ndescription: list of jx commands\n---\n## jx create addon gitea\n\nCreate a Gitea addon for hosting Git repositories\n\n### Synopsis\n\nCreates the Gitea addon (hosted Git server)\n\n```\njx create addon gitea [flags]\n```\n\n### Examples\n\n```\n  # Create the Gitea addon\n  jx create addon gitea\n```\n\n### Options\n\n```\n      --admin                Should the new user created be an admin of the Gitea server\n  -c, --chart string         The name of the chart to use (default \"jenkins-x/gitea\")\n  -e, --email string         The email address of the new user to create in Gitea\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for gitea\n  -n, --namespace string     The Namespace to install into\n      --no-token             If true disable trying to create a new token in the Gitea server\n      --no-user              If true disable trying to create a new user in the Gitea server\n  -p, --password string      The password for the user to create in Gitea. Note that Gitea tends to reject passwords less than 6 characters\n  -r, --release string       The chart release name (default \"gitea\")\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -u, --username string      The name for the user to create in Gitea. Note that Gitea tends to reject 'admin'\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_gloo.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon gloo\"\nslug: jx_create_addon_gloo\nurl: /commands/jx_create_addon_gloo/\ndescription: list of jx commands\n---\n## jx create addon gloo\n\nCreate a Gloo and Knative Serve addon for creating serverless applications\n\n### Synopsis\n\nCreate a Gloo and Knative Serve addon for creating serverless applications\n\n```\njx create addon gloo [flags]\n```\n\n### Examples\n\n```\n  # Create the Gloo addon\n  jx create addon gloo\n```\n\n### Options\n\n```\n  -h, --help                       help for gloo\n  -i, --ingress string             The name of the gloo cluster ingress proxy Service (default \"clusteringress-proxy\")\n  -c, --knative-configmap string   The knative serving ConfigMap name (default \"config-domain\")\n  -k, --knative-namespace string   The knative serving namespace (default \"knative-serving\")\n  -n, --namespace string           The gloo system namespace (default \"gloo-system\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_ingress.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon ingress\"\nslug: jx_create_addon_ingress\nurl: /commands/jx_create_addon_ingress/\ndescription: list of jx commands\n---\n## jx create addon ingress\n\nCreate an Ingress Controller to expose services outside of your remote Staging/Production cluster\n\n### Synopsis\n\nCreate an Ingress Controller to expose services outside of your remote Staging/Production cluster\n\n```\njx create addon ingress controller [flags]\n```\n\n### Examples\n\n```\n  # Creates the ingress controller\n  jx create addon ingctl\n```\n\n### Options\n\n```\n      --domain string                 Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --external-ip string            The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n  -h, --help                          help for ingress\n      --ingress-cluster-role string   The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string     The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string      The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string        The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --on-premise                    If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n      --skip-ingress                  Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_istio.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon istio\"\nslug: jx_create_addon_istio\nurl: /commands/jx_create_addon_istio/\ndescription: list of jx commands\n---\n## jx create addon istio\n\nCreate the Istio addon for service mesh\n\n### Synopsis\n\nCreates the istio addon for service mesh on Kubernetes\n\n```\njx create addon istio [flags]\n```\n\n### Examples\n\n```\n  # Create the istio addon\n  jx create addon istio\n  \n  # Create the istio addon in a custom namespace\n  jx create addon istio -n mynamespace\n```\n\n### Options\n\n```\n  -c, --chart string                     The name of the chart to use\n  -d, --config-dir string                The config directory to use (default \"/istio_service_dir\")\n      --helm-update                      Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                             help for istio\n      --ingress-gateway-service string   The name of the ingress gateway service created by Istio (default \"istio-ingressgateway\")\n  -n, --namespace string                 The Namespace to install into (default \"istio-system\")\n      --no-injector-webhook              Disables the injector webhook\n  -p, --password string                  The default password to use for Istio (default \"istio\")\n  -r, --release string                   The chart release name (default \"istio\")\n  -s, --set string                       The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray               List of locations for values files, can be local files or URLs\n  -v, --version string                   The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_owasp-zap.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon owasp-zap\"\nslug: jx_create_addon_owasp-zap\nurl: /commands/jx_create_addon_owasp-zap/\ndescription: list of jx commands\n---\n## jx create addon owasp-zap\n\nCreate the OWASP Zed Attack Proxy addon for dynamic security checks against running apps\n\n### Synopsis\n\nCreates the Owasp dynamic security testing addon\n\n```\njx create addon owasp-zap [flags]\n```\n\n### Examples\n\n```\n  # Create the owasp addon\n  jx create addon owasp-zap\n```\n\n### Options\n\n```\n  -l, --backoff-limit int32   The backoff limit: how many times to retry the job before considering it failed) to run in the Job (default 2)\n  -h, --help                  help for owasp-zap\n  -i, --image string          The OWASP image to use to run the ZA Proxy baseline scan (default \"owasp/zap2docker-live:latest\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_pipeline-events.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon pipeline-events\"\nslug: jx_create_addon_pipeline-events\nurl: /commands/jx_create_addon_pipeline-events/\ndescription: list of jx commands\n---\n## jx create addon pipeline-events\n\nCreate the pipeline events addon\n\n### Synopsis\n\nCreates the Jenkins X pipeline events addon\n\n```\njx create addon pipeline-events [flags]\n```\n\n### Examples\n\n```\n  # Create the pipeline-events addon\n  jx create addon pipeline-events\n  \n  # Create the pipeline-events addon in a custom namespace\n  jx create addon pipeline-events -n mynamespace\n```\n\n### Options\n\n```\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for pipeline-events\n  -n, --namespace string     The Namespace to install into (default \"pipeline-events\")\n  -p, --password string      Password to access pipeline-events services such as Kibana and Elasticsearch.  Defaults to default Jenkins X admin password.\n  -r, --release string       The chart release name (default \"jx-pipeline-events\")\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install) (default \"0.0.11\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_prometheus.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon prometheus\"\nslug: jx_create_addon_prometheus\nurl: /commands/jx_create_addon_prometheus/\ndescription: list of jx commands\n---\n## jx create addon prometheus\n\nCreates a prometheus addon\n\n### Synopsis\n\nCreates a prometheus addon.\n\nBy default Prometheus Server is exposed via Ingress entry http://prometheus.jx.your.domain.com secured\nwith basic authentication. Admin username is 'admin' and default password is 'admin' (see --password flag).\n\n\n```\njx create addon prometheus [flags]\n```\n\n### Options\n\n```\n      --helm-update        Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help               help for prometheus\n  -n, --namespace string   The Namespace to install into (default \"jx\")\n      --password string    Admin password to access Prometheus web UI. (default \"admin\")\n  -r, --release string     The chart release name (default \"prometheus\")\n  -s, --set string         The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_addon_prow.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create addon prow\"\nslug: jx_create_addon_prow\nurl: /commands/jx_create_addon_prow/\ndescription: list of jx commands\n---\n## jx create addon prow\n\nCreate a Prow addon\n\n### Synopsis\n\nCreates the Prow addon for handling webhook events\n\n```\njx create addon prow [flags]\n```\n\n### Examples\n\n```\n  # Create the Prow addon\n  jx create addon prow\n  \n  # Create the Prow addon in a custom namespace\n  jx create addon prow -n mynamespace\n```\n\n### Options\n\n```\n  -c, --chart string         The name of the chart to use (default \"jenkins-x/prow\")\n      --external-dns         Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record (default true)\n      --helm-update          Should we run helm update first to ensure we use the latest version (default true)\n  -h, --help                 help for prow\n      --hmac-token string    OPTIONAL: The hmac-token is the token that you give to GitHub for validating webhooks. Generate it using any reasonable randomness-generator, eg openssl rand -hex 20\n  -n, --namespace string     The Namespace to install into\n      --oauth-token string   OPTIONAL: The oauth-token is an OAuth2 token that has read and write access to the bot account. Generate it from the account's settings -> Personal access tokens -> Generate new token.\n      --password string      Overwrite the default admin password used to login to the Deck UI\n  -r, --release string       The chart release name (default \"jx-prow\")\n  -s, --set string           The chart set values (can specify multiple or separate values with commas: key1=val1,key2=val2)\n  -t, --tekton               Enables Tekton. Otherwise we default to use Knative Build (default true)\n  -f, --values stringArray   List of locations for values files, can be local files or URLs\n  -v, --version string       The chart version to install)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create addon](/commands/jx_create_addon/)\t - Creates an addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_branchpattern.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create branchpattern\"\nslug: jx_create_branchpattern\nurl: /commands/jx_create_branchpattern/\ndescription: list of jx commands\n---\n## jx create branchpattern\n\nCreate a git branch pattern for your team\n\n### Synopsis\n\nCreate a git branch pattern for your team.\n  \nThe pattern should match all the branches you wish to automate CI/CD on when creating or importing projects.\n\n```\njx create branchpattern [flags]\n```\n\n### Examples\n\n```\n  # Create a branch pattern for your team\n  jx create branch pattern \"master|develop|PR-.*\"\n```\n\n### Options\n\n```\n  -h, --help   help for branchpattern\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_chat.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create chat\"\nslug: jx_create_chat\nurl: /commands/jx_create_chat/\ndescription: list of jx commands\n---\n## jx create chat\n\nCreates a chat server resource\n\n### Synopsis\n\nCreates a chat server resource\n\n```\njx create chat [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for chat\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create chat server](/commands/jx_create_chat_server/)\t - Creates a new chat server URL\n* [jx create chat token](/commands/jx_create_chat_token/)\t - Adds a new token/login for a user on a Chat service server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_chat_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create chat server\"\nslug: jx_create_chat_server\nurl: /commands/jx_create_chat_server/\ndescription: list of jx commands\n---\n## jx create chat server\n\nCreates a new chat server URL\n\n### Synopsis\n\nAdds a new chat server URL\n\n```\njx create chat server kind [url] [flags]\n```\n\n### Examples\n\n```\n  # Add a new chat server URL\n  jx create chat server slack https://myroom.slack.server\n```\n\n### Options\n\n```\n  -h, --help          help for server\n  -n, --name string   The name for the chat server being created\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create chat](/commands/jx_create_chat/)\t - Creates a chat server resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_chat_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create chat token\"\nslug: jx_create_chat_token\nurl: /commands/jx_create_chat_token/\ndescription: list of jx commands\n---\n## jx create chat token\n\nAdds a new token/login for a user on a Chat service server\n\n### Synopsis\n\nCreates a new User Token for a Chat service\n\n```\njx create chat token [username] [flags]\n```\n\n### Examples\n\n```\n  # Add a new User Token for a Chat service\n  jx create chat token -n jira someUserName\n  \n  # As above with the password being passed in\n  jx create git token -n jira -p somePassword someUserName\n```\n\n### Options\n\n```\n  -t, --api-token string   The API Token for the user\n  -h, --help               help for token\n  -n, --name string        The name of the Git server to add a user\n      --timeout string     The timeout if using browser automation to generate the API token (by passing username and password)\n  -u, --url string         The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create chat](/commands/jx_create_chat/)\t - Creates a chat server resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_cluster.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create cluster\"\nslug: jx_create_cluster\nurl: /commands/jx_create_cluster/\ndescription: list of jx commands\n---\n## jx create cluster\n\nCreate a new Kubernetes cluster\n\n### Synopsis\n\nThis command creates a new Kubernetes cluster, installing required local dependencies and provisions the Jenkins X platform \n\nYou can see a demo of this command here: https://jenkins-x.io/demos/create_cluster/\n\nValid Kubernetes providers include:\n\n    * aks (Azure Container Service - https://docs.microsoft.com/en-us/azure/aks)\n    * eks (Amazon Web Services Elastic Container Service for Kubernetes - https://docs.aws.amazon.com/eks/latest/userguide/getting-started.html)\n    * gke (Google Container Engine - https://cloud.google.com/kubernetes-engine)\n    # icp (IBM Cloud Private) - https://www.ibm.com/cloud/private\n    * iks (IBM Cloud Kubernetes Service - https://console.bluemix.net/docs/containers)\n    * kubernetes for custom installations of Kubernetes\n\t* openshift for installing on 3.9.x or later clusters of OpenShift\n \n\nDepending on which cloud provider your cluster is created on possible dependencies that will be installed are: \n\n  * kubectl (CLI to interact with Kubernetes clusters)  \n  * helm (package manager for Kubernetes)  \n  * draft (CLI that makes it easy to build applications that run on Kubernetes)  \n  * virtualisation drivers (to run Minikube in a VM)  \n  * gcloud (Google Cloud CLI)  \n  * oci (Oracle Cloud Infrastructure CLI)  \n  * az (Azure CLI)  \n  * ibmcloud (IBM CLoud CLI)  \n\nFor more documentation see: https://jenkins-x.io/getting-started/create-cluster/\n\n```\njx create cluster [kubernetes provider] [flags]\n```\n\n### Examples\n\n```\n  # create a cluster on Google Cloud\n  jx create cluster gke --skip-installation\n  \n  # create a cluster on AWS via EKS\n  jx create cluster eks --skip-installation\n```\n\n### Options\n\n```\n  -h, --help   help for cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create cluster aks](/commands/jx_create_cluster_aks/)\t - Create a new Kubernetes cluster on AKS: Runs on Azure\n* [jx create cluster eks](/commands/jx_create_cluster_eks/)\t - Create a new Kubernetes cluster on AWS using EKS\n* [jx create cluster gke](/commands/jx_create_cluster_gke/)\t - Create a new Kubernetes cluster on GKE: Runs on Google Cloud\n* [jx create cluster iks](/commands/jx_create_cluster_iks/)\t - Create a new kubernetes cluster on IBM Cloud Kubernetes Services\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_cluster_aks.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create cluster aks\"\nslug: jx_create_cluster_aks\nurl: /commands/jx_create_cluster_aks/\ndescription: list of jx commands\n---\n## jx create cluster aks\n\nCreate a new Kubernetes cluster on AKS: Runs on Azure\n\n### Synopsis\n\nThis command creates a new Kubernetes cluster on AKS, installing required local dependencies and provisions the Jenkins X platform \n\nAzure Container Service (AKS) manages your hosted Kubernetes environment, making it quick and easy to deploy and manage containerized applications without container orchestration expertise. It also eliminates the burden of ongoing operations and maintenance by provisioning, upgrading, and scaling resources on demand, without taking your applications offline. \n\nPlease use a location local to you: you can retrieve this from the Azure portal or by running \"az provider list\" in your terminal. \n\nImportant: You will need an account on Azure, with a storage account (https://portal.azure.com/#create/Microsoft.StorageAccount-ARM) and network (https://portal.azure.com/#create/Microsoft.VirtualNetwork-ARM) - both linked to the resource group you use to create the cluster in.\n\n```\njx create cluster aks [flags]\n```\n\n### Examples\n\n```\n  jx create cluster aks\n```\n\n### Options\n\n```\n      --aad-client-app-id string                 The ID of an Azure Active Directory client application\n      --aad-server-app-id string                 The ID of an Azure Active Directory server application\n      --aad-server-app-secret string             The secret of an Azure Active Directory server application\n      --aad-tenant-id string                     The ID of an Azure Active Directory tenant\n      --admin-username string                    User account to create on node VMs for SSH access\n      --advanced-mode                            Advanced install options. This will prompt for advanced install options\n      --azure-acr-subscription string            The Azure subscription under which the specified docker-registry is located\n      --buildpack string                         The name of the build pack to use for the Team\n      --cleanup-temp-files                       Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --client-secret string                     Azure AD client secret to use an existing SP\n      --cloud-environment-repo string            Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n  -c, --cluster-name string                      Name of the cluster\n      --config-file string                       Configuration file used for installation\n      --default-admin-password string            the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string            the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string        Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n      --disk-size string                         Size in GB of the OS disk for each node in the node pool.\n      --dns-name-prefix string                   Prefix for hostnames that are created\n      --dns-service-ip string                    IP address assigned to the Kubernetes DNS service\n      --docker-bridge-address string             An IP address and netmask assigned to the Docker bridge\n      --docker-registry string                   The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string               The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                            Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                        Only install draft client\n      --environment-git-owner string             The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path           The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string      The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                           Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                             Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                       The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                     The Git API token to use for creating new Git repositories\n      --git-provider-kind string                 Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string                  The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                               Create new Git repositories as public\n      --git-username string                      The Git username to use for creating new Git repositories\n      --gitops                                   Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                            Whether or not to use a cluster global tiller (default true)\n      --helm-client-only                         Only install helm client\n      --helm-tls                                 Whether to use TLS with helm\n      --helm3                                    Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                     help for aks\n      --ingress-class string                     Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string              The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string                The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string                 The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                   The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                     Enables automatic dependencies installation when required\n      --install-only                             Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --kaniko                                   Use Kaniko for building docker images\n      --keep-exposecontroller-job                Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -v, --kubernetes-version az aks get-versions   Version of Kubernetes to use for creating the cluster, such as '1.8.11' or '1.9.6'.  Values from: az aks get-versions.\n      --local-cloud-environment                  Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string              The name of the helm repository for the installed ChartMuseum (default \"releases\")\n  -l, --location string                          Location to run cluster in\n      --long-term-storage                        Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                        The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n      --namespace string                         The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --ng                                       Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                                  Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments                  Disables the creation of the default Staging and Production environments\n      --no-gitops-env-apply                      When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                       When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                      When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                          When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-tiller                                Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n  -s, --node-vm-size string                      Size of Virtual Machines to create as Kubernetes nodes\n  -o, --nodes string                             Number of node\n      --on-premise                               If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n  -p, --password string                          Azure password\n  -k, --path-To-public-rsa-key string            Path to public RSA key\n      --pod-cidr string                          A CIDR notation IP range from which to assign pod IPs\n      --prow                                     Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --recreate-existing-draft-repos            Delete existing helm repos used by Jenkins X under ~/draft/packs\n      --register-local-helmrepo                  Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                      Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                            If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n  -n, --resource-group-name string               Name of the resource group\n      --service-cidr string                      A CIDR notation IP range from which to assign service cluster IPs\n      --service-principal string                 Azure AD service principal to use an existing SP\n      --skip-auth-secrets-merge                  Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                        Don't enable cluster admin role for user\n      --skip-ingress                             Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-installation                        Provision cluster only, don't install Jenkins X into it\n      --skip-login az login                      Skip login if already logged in using az login\n      --skip-provider-registration               Skip provider registration\n      --skip-resource-group-creation             Skip resource group creation\n      --skip-setup-tiller                        Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --static-jenkins                           Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --subscription string                      Azure subscription to be used if not default one\n      --tags string                              Space-separated tags in 'key[=value]' format. Use '' to clear existing tags.\n      --tekton                                   Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --tiller-cluster-role string               The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string                  The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                           The number of seconds to wait for the helm install to complete (default \"6000\")\n      --urltemplate string                       For ingress; exposers can set the urltemplate to expose\n      --user-cluster-role string                 The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n  -u, --user-name string                         Azure user name\n      --username string                          The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                    Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                    If the vault bucket already exists delete it then create it empty (default true)\n      --version string                           The specific platform version to install\n      --versions-ref string                      Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                     Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n      --vnet-subnet-id string                    The ID of a subnet in an existing VNet into which to deploy the cluster\n      --workspace-resource-id string             The resource ID of an existing Log Analytics Workspace\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create cluster](/commands/jx_create_cluster/)\t - Create a new Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_cluster_eks.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create cluster eks\"\nslug: jx_create_cluster_eks\nurl: /commands/jx_create_cluster_eks/\ndescription: list of jx commands\n---\n## jx create cluster eks\n\nCreate a new Kubernetes cluster on AWS using EKS\n\n### Synopsis\n\nThis command creates a new Kubernetes cluster on Amazon Web Services (AWS) using EKS, installing required local dependencies and provisions the Jenkins X platform \n\nEKS is a managed Kubernetes service on AWS.\n\n```\njx create cluster eks [flags]\n```\n\n### Examples\n\n```\n  # to create a new Kubernetes cluster with Jenkins X in your default zones (from $EKS_AVAILABILITY_ZONES)\n  jx create cluster eks\n  \n  # to specify the zones\n  jx create cluster eks --zones us-west-2a,us-west-2b,us-west-2c\n```\n\n### Options\n\n```\n      --advanced-mode                         Advanced install options. This will prompt for advanced install options\n      --aws-api-timeout duration              Duration of AWS API timeout (default 20m0s)\n      --azure-acr-subscription string         The Azure subscription under which the specified docker-registry is located\n      --buildpack string                      The name of the build pack to use for the Team\n      --cleanup-temp-files                    Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --cloud-environment-repo string         Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n  -n, --cluster-name string                   The name of this cluster.\n      --config-file string                    Configuration file used for installation\n      --default-admin-password string         the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string         the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string     Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n      --docker-registry string                The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string            The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                         Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                     Only install draft client\n      --eksctl-log-level int                  set log level, use 0 to silence, 4 for debugging and 5 for debugging with AWS debug logging (default 3) (default -1)\n      --environment-git-owner string          The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path        The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string   The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                        Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                          Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                    The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                  The Git API token to use for creating new Git repositories\n      --git-provider-kind string              Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string               The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                            Create new Git repositories as public\n      --git-username string                   The Git username to use for creating new Git repositories\n      --gitops                                Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                         Whether or not to use a cluster global tiller (default true)\n      --helm-client-only                      Only install helm client\n      --helm-tls                              Whether to use TLS with helm\n      --helm3                                 Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                  help for eks\n      --ingress-class string                  Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string           The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string             The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string              The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                  Enables automatic dependencies installation when required\n      --install-only                          Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --kaniko                                Use Kaniko for building docker images\n      --keep-exposecontroller-job             Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n      --local-cloud-environment               Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string           The name of the helm repository for the installed ChartMuseum (default \"releases\")\n      --long-term-storage                     Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                     The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n      --namespace string                      The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --ng                                    Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                               Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments               Disables the creation of the default Staging and Production environments\n      --no-gitops-env-apply                   When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                    When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                   When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                       When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-tiller                             Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n      --node-type string                      node instance type (default \"m5.large\")\n      --node-volume-size int                  node volume size in GB (default 20)\n  -o, --nodes int                             number of nodes (default -1)\n      --nodes-max int                         maximum number of nodes (default -1)\n      --nodes-min int                         minimum number of nodes (default -1)\n      --on-premise                            If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n  -p, --profile string                        AWS profile to use. If provided, this overrides the AWS_PROFILE environment variable\n      --prow                                  Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --recreate-existing-draft-repos         Delete existing helm repos used by Jenkins X under ~/draft/packs\n  -r, --region string                         The region to use. Default: us-west-2\n      --register-local-helmrepo               Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                   Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                         If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n      --skip-auth-secrets-merge               Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                     Don't enable cluster admin role for user\n      --skip-ingress                          Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-installation                     Provision cluster only, don't install Jenkins X into it\n      --skip-setup-tiller                     Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --ssh-public-key string                 SSH public key to use for nodes (import from local path, or use existing EC2 key pair) (default \"~/.ssh/id_rsa.pub\")\n      --static-jenkins                        Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --tags string                           A list of KV pairs used to tag all instance groups in AWS (eg \"Owner=John Doe,Team=Some Team\"). (default \"CreatedBy=JenkinsX\")\n      --tekton                                Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --tiller-cluster-role string            The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string               The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                        The number of seconds to wait for the helm install to complete (default \"6000\")\n      --urltemplate string                    For ingress; exposers can set the urltemplate to expose\n      --user-cluster-role string              The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n      --username string                       The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                 Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                 If the vault bucket already exists delete it then create it empty (default true)\n      --version string                        The specific platform version to install\n      --versions-ref string                   Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                  Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n  -z, --zones string                          Availability Zones. Auto-select if not specified. If provided, this overrides the $EKS_AVAILABILITY_ZONES environment variable\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create cluster](/commands/jx_create_cluster/)\t - Create a new Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_cluster_gke.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create cluster gke\"\nslug: jx_create_cluster_gke\nurl: /commands/jx_create_cluster_gke/\ndescription: list of jx commands\n---\n## jx create cluster gke\n\nCreate a new Kubernetes cluster on GKE: Runs on Google Cloud\n\n### Synopsis\n\nThis command creates a new Kubernetes cluster on GKE, installing required local dependencies and provisions the Jenkins X platform \n\nYou can see a demo of this command here: https://jenkins-x.io/demos/create_cluster_gke/\n\nGoogle Kubernetes Engine is a managed environment for deploying containerized applications. It brings our latest innovations in developer productivity, resource efficiency, automated operations, and open source flexibility to accelerate your time to market. \n\nGoogle has been running production workloads in containers for over 15 years, and we build the best of what we learn into Kubernetes, the industry-leading open source container orchestrator which powers Kubernetes Engine.\n\n```\njx create cluster gke [flags]\n```\n\n### Examples\n\n```\n  jx create cluster gke\n```\n\n### Options\n\n```\n      --advanced-mode                         Advanced install options. This will prompt for advanced install options\n      --azure-acr-subscription string         The Azure subscription under which the specified docker-registry is located\n      --buildpack string                      The name of the build pack to use for the Team\n      --cleanup-temp-files                    Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --cloud-environment-repo string         Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n      --cluster-ipv4-cidr string              The IP address range for the pods in this cluster in CIDR notation (e.g. 10.0.0.0/14)\n  -n, --cluster-name string                   The name of this cluster, default is a random generated name\n      --config-file string                    Configuration file used for installation\n      --default-admin-password string         the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string         the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string     Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n  -d, --disk-size string                      Size in GB for node VM boot disks. Defaults to 100GB\n      --docker-registry string                The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string            The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                         Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                     Only install draft client\n      --enable-autoupgrade                    Sets autoupgrade feature for a cluster's default node-pool(s)\n      --enhanced-apis                         Enable enhanced APIs to utilise Container Registry & Cloud Build\n      --enhanced-scopes                       Use enhanced Oauth scopes for access to GCS/GCR\n      --environment-git-owner string          The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path        The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string   The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                        Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                          Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                    The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                  The Git API token to use for creating new Git repositories\n      --git-provider-kind string              Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string               The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                            Create new Git repositories as public\n      --git-username string                   The Git username to use for creating new Git repositories\n      --gitops                                Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                         Whether or not to use a cluster global tiller (default true)\n      --helm-client-only                      Only install helm client\n      --helm-tls                              Whether to use TLS with helm\n      --helm3                                 Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                  help for gke\n      --image-type string                     The image type for the nodes in the cluster\n      --ingress-class string                  Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string           The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string             The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string              The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                  Enables automatic dependencies installation when required\n      --install-only                          Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --kaniko                                Use Kaniko for building docker images\n      --keep-exposecontroller-job             Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -v, --kubernetes-version string             The Kubernetes version to use for the master and nodes. Defaults to server-specified\n      --labels string                         The labels to add to the cluster being created such as 'foo=bar,whatnot=123'. Label names must begin with a lowercase character ([a-z]), end with a lowercase alphanumeric ([a-z0-9]) with dashes (-), and lowercase alphanumeric ([a-z0-9]) between.\n      --local-cloud-environment               Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string           The name of the helm repository for the installed ChartMuseum (default \"releases\")\n      --long-term-storage                     Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                     The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n  -m, --machine-type string                   The type of machine to use for nodes\n      --max-num-nodes string                  The maximum number of nodes to be created in each of the cluster's zones\n      --min-num-nodes string                  The minimum number of nodes to be created in each of the cluster's zones\n      --namespace string                      The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --network string                        The Compute Engine Network that the cluster will connect to\n      --ng                                    Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                               Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments               Disables the creation of the default Staging and Production environments\n      --no-gitops-env-apply                   When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                    When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                   When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                       When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-tiller                             Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n      --on-premise                            If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n      --preemptible                           Use preemptible VMs in the node-pool\n  -p, --project-id string                     Google Project ID to create cluster in\n      --prow                                  Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --recreate-existing-draft-repos         Delete existing helm repos used by Jenkins X under ~/draft/packs\n  -r, --region string                         Compute region (e.g. us-central1) for the cluster\n      --register-local-helmrepo               Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                   Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                         If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n      --scope stringArray                     The OAuth scopes to be added to the cluster\n      --service-account string                The service account used to run the cluster\n      --skip-auth-secrets-merge               Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                     Don't enable cluster admin role for user\n      --skip-ingress                          Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-installation                     Provision cluster only, don't install Jenkins X into it\n      --skip-login                            Skip Google auth if already logged in via gcloud auth\n      --skip-setup-tiller                     Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --static-jenkins                        Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --subnetwork string                     The Google Compute Engine subnetwork to which the cluster is connected\n      --tekton                                Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --tiller-cluster-role string            The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string               The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                        The number of seconds to wait for the helm install to complete (default \"6000\")\n      --urltemplate string                    For ingress; exposers can set the urltemplate to expose\n      --use-stackdriver-monitoring            Enable Stackdriver Kubernetes Engine Monitoring (default true)\n      --user-cluster-role string              The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n      --username string                       The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                 Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                 If the vault bucket already exists delete it then create it empty (default true)\n      --version string                        The specific platform version to install\n      --versions-ref string                   Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                  Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n  -z, --zone string                           The compute zone (e.g. us-central1-a) for the cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create cluster](/commands/jx_create_cluster/)\t - Create a new Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_cluster_iks.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create cluster iks\"\nslug: jx_create_cluster_iks\nurl: /commands/jx_create_cluster_iks/\ndescription: list of jx commands\n---\n## jx create cluster iks\n\nCreate a new kubernetes cluster on IBM Cloud Kubernetes Services\n\n### Synopsis\n\nThis command creates a new kubernetes cluster on IKS, installing required local dependencies and provisions the Jenkins X platform \n\nIBM\u00ae Cloud Kubernetes Service delivers powerful tools by combining Docker containers, the Kubernetes technology, an intuitive user experience, and built-in security and isolation to automate the deployment, operation, scaling, and monitoring of containerized apps in a cluster of compute hosts. \n\nImportant: In order to create a \"standard cluster\" required for jenkins-x, you must have a Trial, Pay-As-You-Go, or Subscription IBM Cloud account (https://console.bluemix.net/registration/). \"Free cluster\"s are currently not supported.\n\n```\njx create cluster iks [flags]\n```\n\n### Examples\n\n```\n  jx create cluster iks\n```\n\n### Options\n\n```\n  -c, --account string                        Account\n      --advanced-mode                         Advanced install options. This will prompt for advanced install options\n      --apikey string                         The IBM Cloud API Key.\n      --azure-acr-subscription string         The Azure subscription under which the specified docker-registry is located\n      --buildpack string                      The name of the build pack to use for the Team\n      --cleanup-temp-files                    Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --cloud-environment-repo string         Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n      --config-file string                    Configuration file used for installation\n      --create-private-vlan                   Automatically create private vlan (default 'true')\n      --create-public-vlan                    Automatically create public vlan (default 'true')\n      --default-admin-password string         the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string         the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string     Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n      --disk-encrypt                          Optional: Disable encryption on a worker node. (default true)\n      --docker-registry string                The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string            The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                         Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                     Only install draft client\n      --environment-git-owner string          The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path        The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string   The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                        Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                          Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                    The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                  The Git API token to use for creating new Git repositories\n      --git-provider-kind string              Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string               The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                            Create new Git repositories as public\n      --git-username string                   The Git username to use for creating new Git repositories\n      --gitops                                Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                         Whether or not to use a cluster global tiller (default true)\n      --helm-client-only                      Only install helm client\n      --helm-tls                              Whether to use TLS with helm\n      --helm3                                 Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                  help for iks\n      --ingress-class string                  Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string           The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string             The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string              The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                  Enables automatic dependencies installation when required\n      --install-only                          Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --isolation string                      The level of hardware isolation for your worker node. Use 'private' to have available physical resources dedicated to you only, or 'public' to allow physical resources to be shared with other IBM customers. For IBM Cloud Public accounts, the default value is public. (default \"public\")\n      --kaniko                                Use Kaniko for building docker images\n      --keep-exposecontroller-job             Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -k, --kube-version string                   Specify the Kubernetes version, including at least the major.minor version. If you do not include this flag, the default version is used. To see available versions, run \u2018ibmcloud ks kube-versions\u2019.\n      --local-cloud-environment               Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string           The name of the helm repository for the installed ChartMuseum (default \"releases\")\n  -u, --login string                          Username\n      --long-term-storage                     Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                     The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n  -m, --machine-type string                   The machine type of the worker node. To see available machine types, run 'ibmcloud ks machine-types --zone <zone name>'. Default is 'b2c.4x16', 4 cores CPU, 16GB Memory\n  -n, --name string                           Set the name of the cluster that will be created.\n      --namespace string                      The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --ng                                    Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                               Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments               Disables the creation of the default Staging and Production environments\n      --no-gitops-env-apply                   When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                    When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                   When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                       When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-subnet                             Optional: Prevent the creation of a portable subnet when creating the cluster. By default, both a public and a private portable subnet are created on the associated VLAN, and this flag prevents that behavior. To add a subnet to the cluster later, run 'ibmcloud ks cluster-subnet-add'.\n      --no-tiller                             Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n      --on-premise                            If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n  -p, --password string                       Password\n      --private-only                          Use this flag to prevent a public VLAN from being created. Required only when you specify the \u2018--private-vlan\u2019 flag without specifying the \u2018--public-vlan\u2019 flag.\n      --private-vlan string                   Conditional: Specify the ID of the private VLAN. To see available VLANs, run 'ibmcloud ks vlans --zone <zone name>'. If you do not have a private VLAN yet, do not specify this option because one will be automatically created for you. When you specify a private VLAN, you must also specify either the \u2018--public-vlan\u2019 flag or the \u2018--private-only\u2019 flag.\n      --prow                                  Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --public-vlan string                    Conditional: Specify the ID of the public VLAN. To see available VLANs, run 'ibmcloud ks vlans --zone <zone name>'. If you do not have a public VLAN yet, do not specify this option because one will be automatically created for you.\n      --recreate-existing-draft-repos         Delete existing helm repos used by Jenkins X under ~/draft/packs\n  -r, --region string                         The IBM Cloud Region. Default is 'us-east'\n      --register-local-helmrepo               Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                   Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                         If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n      --skip-auth-secrets-merge               Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                     Don't enable cluster admin role for user\n      --skip-ingress                          Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-installation                     Provision cluster only, don't install Jenkins X into it\n      --skip-login ibmcloud login             Skip login if already logged in using ibmcloud login\n      --skip-setup-tiller                     Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --sso                                   SSO Passcode. See run 'ibmcloud login --sso'\n      --static-jenkins                        Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --tekton                                Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --tiller-cluster-role string            The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string               The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                        The number of seconds to wait for the helm install to complete (default \"6000\")\n      --trusted                               Optional: Enable trusted cluster feature.\n      --urltemplate string                    For ingress; exposers can set the urltemplate to expose\n      --user-cluster-role string              The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n      --username string                       The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                 Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                 If the vault bucket already exists delete it then create it empty (default true)\n      --version string                        The specific platform version to install\n      --versions-ref string                   Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                  Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n      --workers string                        The number of cluster worker nodes. Defaults to 3.\n  -z, --zone string                           Specify the zone where you want to create the cluster, the options depend on what region that you are logged in to. To see available zones, run 'ibmcloud ks zones'. Default is 'wdc07'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create cluster](/commands/jx_create_cluster/)\t - Create a new Kubernetes cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_devpod.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create devpod\"\nslug: jx_create_devpod\nurl: /commands/jx_create_devpod/\ndescription: list of jx commands\n---\n## jx create devpod\n\nCreates a DevPod for running builds and tests inside the cluster\n\n### Synopsis\n\nCreates a new DevPod \n\nFor more documentation see: https://jenkins-x.io/developing/devpods/\n\n```\njx create devpod [flags]\n```\n\n### Examples\n\n```\n  # creates a new DevPod asking the user for the label to use\n  jx create devpod\n  \n  # creates a new Maven DevPod\n  jx create devpod -l maven\n```\n\n### Options\n\n```\n      --auto-expose               Automatically expose useful ports via ingresses such as the ide port, debug port, as well as any ports specified using --ports\n      --docker-registry string    The Docker registry to use within the DevPod. If not specified, default to the built-in registry or $DOCKER_REGISTRY\n  -h, --help                      help for devpod\n      --import                    Detect if there is a Git repository in the current directory and attempt to clone it into the DevPod. Ignored if used with --sync (default true)\n  -u, --import-url string         Clone a Git repository into the DevPod. Cannot be used with --sync\n  -l, --label string              The label of the pod template to use\n      --persist                   Persist changes made to the DevPod. Cannot be used with --sync\n  -p, --ports ints                Container ports exposed by the DevPod\n      --pull-secrets string       A list of Kubernetes secret names that will be attached to the service account (e.g. foo, bar, baz)\n  -c, --request-cpu string        The request CPU of the DevPod (default \"1\")\n  -m, --request-memory string     The request Memory of the DevPod (default \"512Mi\")\n      --reuse                     Reuse an existing DevPod if a suitable one exists. The DevPod will be selected based on the label (or current working directory) (default true)\n      --service-account string    The ServiceAccount name used for the DevPod\n      --shell string              The name of the shell to invoke in the DevPod. If nothing is specified it will use 'bash'\n  -s, --suffix string             The suffix to append the pod name\n      --sync                      Also synchronise the local file system into the DevPod\n      --temp-dir                  If enabled and --import-url is supplied then create a temporary directory to clone the source to detect what kind of DevPod to create\n      --theia                     If enabled use Eclipse Theia as the web based IDE\n      --tiller-namespace string   The optional tiller namespace to use within the DevPod.\n      --username string           The username to create the DevPod. If not specified defaults to the current operating system user or $USER'\n  -w, --working-dir string        The working directory of the DevPod\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_docker.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create docker\"\nslug: jx_create_docker\nurl: /commands/jx_create_docker/\ndescription: list of jx commands\n---\n## jx create docker\n\nCreate/update Docker auth for a given host and user in the config.json file\n\n### Synopsis\n\nCreates/updates an entry for secret in the Docker config.json for a given user, host\n\n```\njx create docker auth [flags]\n```\n\n### Examples\n\n```\n  # Create/update Docker auth entry in the config.json file\n  jx create docker auth --host \"foo.private.docker.registry\" --user \"foo\" --secret \"FooDockerHubToken\" --email \"fakeemail@gmail.com\"\n```\n\n### Options\n\n```\n  -e, --email string    The email to associate auth component of config.json\n  -h, --help            help for docker\n  -t, --host string     The Docker host\n  -s, --secret string   The secret to associate auth component of config.json\n  -u, --user string     The user to associate auth component of config.json\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_docs.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create docs\"\nslug: jx_create_docs\nurl: /commands/jx_create_docs/\ndescription: list of jx commands\n---\n## jx create docs\n\nCreates the documentation files\n\n### Synopsis\n\nCreates the documentation markdown files\n\n```\njx create docs [flags]\n```\n\n### Examples\n\n```\n  # Create the documentation files\n  jx create docs\n```\n\n### Options\n\n```\n  -d, --dir string   the directory to generate the docs into (default \".\")\n  -h, --help         help for docs\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_domain.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create domain\"\nslug: jx_create_domain\nurl: /commands/jx_create_domain/\ndescription: list of jx commands\n---\n## jx create domain\n\nCreate a domain in a managed DNS service provider\n\n### Synopsis\n\nCreate a Domain in a managed DNS service such as GCP\n\n```\njx create domain [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for domain\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create domain gke](/commands/jx_create_domain_gke/)\t - Create a managed domain for GKE\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_domain_gke.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create domain gke\"\nslug: jx_create_domain_gke\nurl: /commands/jx_create_domain_gke/\ndescription: list of jx commands\n---\n## jx create domain gke\n\nCreate a managed domain for GKE\n\n### Synopsis\n\nCreate a Domain in GCP so it can be used with GKE\n\n```\njx create domain gke [flags]\n```\n\n### Examples\n\n```\n  # Create the Domain in Google Cloud\n  jx create domain gke -d foo.bar.io\n```\n\n### Options\n\n```\n  -d, --domain string       The Domain you wish to be managed\n  -h, --help                help for gke\n  -p, --project-id string   Override the current Project ID\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create domain](/commands/jx_create_domain/)\t - Create a domain in a managed DNS service provider\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create environment\"\nslug: jx_create_environment\nurl: /commands/jx_create_environment/\ndescription: list of jx commands\n---\n## jx create environment\n\nCreate a new Environment which is used to promote your Team's Applications via Continuous Delivery\n\n### Synopsis\n\nCreates a new Environment\n  \nAn Environment maps to a Kubernetes cluster and namespace and is a place that your team's applications can be promoted to via Continuous Delivery. \n\nYou can optionally use GitOps to manage the configuration of an Environment by storing all configuration in a Git repository and then only changing it via Pull Requests and CI/CD. \n\nFor more documentation on Environments see: https://jenkins-x.io/about/features/#environments\n\n```\njx create environment [flags]\n```\n\n### Examples\n\n```\n  # Create a new Environment, prompting for the required data\n  jx create env\n  \n  # Creates a new Environment passing in the required data on the command line\n  jx create env -n prod -l Production --no-gitops --namespace my-prod\n```\n\n### Options\n\n```\n      --branches string              The branch pattern for branches to trigger CI/CD pipelines on the environment Git repository\n  -c, --cluster string               The Kubernetes cluster for the Environment. If blank and a namespace is specified assumes the current cluster\n      --domain string                Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --env-job-credentials string   The Jenkins credentials used by the GitOps Job for this environment\n      --exposer string               Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n  -f, --fork-git-repo string         The Git repository used as the fork when creating new Environment Git repos (default \"https://github.com/jenkins-x/default-environment-charts.git\")\n      --git-api-token string         The Git API token to use for creating new Git repositories\n      --git-owner string             Git organisation / owner\n      --git-provider-kind string     Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string      The Git server URL to create new Git repositories inside\n      --git-public                   Create new Git repositories as public\n  -r, --git-ref string               The Git repo reference for the source code for GitOps based Environments\n  -g, --git-url string               The Git clone URL for the source code for GitOps based Environments\n      --git-username string          The Git username to use for creating new Git repositories\n  -h, --help                         help for environment\n      --ingress-class string         Used to set the ingress.class annotation in exposecontroller created ingress\n      --keep-exposecontroller-job    Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -l, --label string                 The Environment label which is a descriptive string like 'Production' or 'Staging'\n  -n, --name string                  The Environment resource name. Must follow the Kubernetes name conventions like Services, Namespaces\n  -s, --namespace string             The Kubernetes namespace for the Environment\n  -x, --no-gitops                    Disables the use of GitOps on the environment so that promotion is implemented by directly modifying the resources via helm instead of using a Git repository\n  -o, --order int32                  The order weighting of the Environment so that they can be sorted by this order before name (default 100)\n      --prefix string                Environment repo prefix, your Git repo will be of the form 'environment-$prefix-$envName' (default \"jx\")\n  -p, --promotion string             The promotion strategy\n      --prow                         Install and use Prow for environment promotion\n      --pull-secrets string          A list of Kubernetes secret names that will be attached to the service account (e.g. foo, bar, baz)\n      --remote                       Indicates the Environment resides in a separate cluster to the development cluster. If this is true then we don't perform release piplines in this git repository but we use the Environment Controller inside that cluster: https://jenkins-x.io/getting-started/multi-cluster/\n  -u, --update                       Update environment if already exists\n      --urltemplate string           For ingress; exposers can set the urltemplate to expose\n      --vault                        Sets up a Hashicorp Vault for storing secrets during the cluster creation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_etc-hosts.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create etc-hosts\"\nslug: jx_create_etc-hosts\nurl: /commands/jx_create_etc-hosts/\ndescription: list of jx commands\n---\n## jx create etc-hosts\n\nCreates a new Git server URL\n\n### Synopsis\n\nCreates /etc/hosts entries for all current exposed services\n\n```\njx create etc-hosts kind [url] [flags]\n```\n\n### Examples\n\n```\n  # Creates /etc/hosts entries for all current exposed services\n  sudo jx create etc-hosts\n```\n\n### Options\n\n```\n  -h, --help          help for etc-hosts\n  -i, --ip string     The IP address of the node to point the host entries to\n  -n, --name string   The etc hosts file to edit (default \"/etc/hosts\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_git.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create git\"\nslug: jx_create_git\nurl: /commands/jx_create_git/\ndescription: list of jx commands\n---\n## jx create git\n\nCreates a Git resource\n\n### Synopsis\n\nCreates a Git resource\n\n```\njx create git [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for git\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create git server](/commands/jx_create_git_server/)\t - Creates a new Git server from a URL and kind\n* [jx create git token](/commands/jx_create_git_token/)\t - Adds a new API token for a user on a Git server\n* [jx create git user](/commands/jx_create_git_user/)\t - Adds a new user to the Git server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_git_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create git server\"\nslug: jx_create_git_server\nurl: /commands/jx_create_git_server/\ndescription: list of jx commands\n---\n## jx create git server\n\nCreates a new Git server from a URL and kind\n\n### Synopsis\n\nAdds a new Git Server URL\n\n```\njx create git server [flags]\n```\n\n### Examples\n\n```\n  # Add a new Git server\n  jx create git server --kind bitbucketserver --url http://bitbucket.acme.org\n  \n  # Add a new Git server with a name\n  jx create git server -k bitbucketcloud -u http://bitbucket.org -n MyBitBucket\n  \n  For more documentation see: [https://jenkins-x.io/developing/git/](https://jenkins-x.io/developing/git/)\n```\n\n### Options\n\n```\n  -a, --apiuser string   The git server api user\n  -h, --help             help for server\n  -k, --kind string      The kind of Git server being created\n  -n, --name string      The name for the Git server being created\n  -s, --secret string    The git server api user secret\n  -u, --url string       The git server URL\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create git](/commands/jx_create_git/)\t - Creates a Git resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_git_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create git token\"\nslug: jx_create_git_token\nurl: /commands/jx_create_git_token/\ndescription: list of jx commands\n---\n## jx create git token\n\nAdds a new API token for a user on a Git server\n\n### Synopsis\n\nCreates a new API Token for a user on a Git Server\n\n```\njx create git token [username] [flags]\n```\n\n### Examples\n\n```\n  # Add a new API Token for a user for the local Git server\n  # prompting the user to find and enter the API Token\n  jx create git token -n local someUserName\n  \n  # Add a new API Token for a user for the local Git server\n  # using browser automation to login to the Git server\n  # with the username and password to find the API Token\n  jx create git token -n local -p somePassword someUserName\n```\n\n### Options\n\n```\n  -t, --api-token string   The API Token for the user\n  -h, --help               help for token\n  -n, --name string        The name of the Git server to add a user\n  -p, --password string    The User password to try automatically create a new API Token\n      --timeout string     The timeout if using browser automation to generate the API token (by passing username and password)\n  -u, --url string         The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create git](/commands/jx_create_git/)\t - Creates a Git resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_git_user.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create git user\"\nslug: jx_create_git_user\nurl: /commands/jx_create_git_user/\ndescription: list of jx commands\n---\n## jx create git user\n\nAdds a new user to the Git server\n\n### Synopsis\n\nCreates a new user for a Git Server. Only supported for Gitea so far\n\n```\njx create git user [username] [flags]\n```\n\n### Examples\n\n```\n  # Creates a new user in the local Gitea server\n  jx create git user -n local someUserName -p somepassword -e foo@bar.com\n```\n\n### Options\n\n```\n  -a, --admin              Whether the user is an admin user\n  -t, --api-token string   The API Token for the user\n  -e, --email string       The User email address\n  -h, --help               help for user\n  -n, --name string        The name of the Git server to add a user\n  -p, --password string    The User password to try automatically create a new API Token\n  -u, --url string         The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create git](/commands/jx_create_git/)\t - Creates a Git resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_gke-service-account.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create gke-service-account\"\nslug: jx_create_gke-service-account\nurl: /commands/jx_create_gke-service-account/\ndescription: list of jx commands\n---\n## jx create gke-service-account\n\nCreates a GKE service account\n\n### Synopsis\n\nCreates a GKE service account\n\n```\njx create gke-service-account [flags]\n```\n\n### Examples\n\n```\n  jx create gke-service-account\n  \n  # to specify the options via flags\n  jx create gke-service-account --name my-service-account --project my-gke-project\n```\n\n### Options\n\n```\n  -h, --help             help for gke-service-account\n  -n, --name string      The name of the service account to create\n  -p, --project string   The GCP project to create the service account in\n      --skip-login       Skip Google auth if already logged in via gcloud auth\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_issue.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create issue\"\nslug: jx_create_issue\nurl: /commands/jx_create_issue/\ndescription: list of jx commands\n---\n## jx create issue\n\nCreate an issue on the git project for the current directory\n\n### Synopsis\n\nCreates an issue in a the git project of the current directory\n\n```\njx create issue [flags]\n```\n\n### Examples\n\n```\n  # Create an issue in the current project\n  jx create issue -t \"something we should do\"\n  \n  \n  # Create an issue with a title and a body\n  jx create issue -t \"something we should do\" --body \"\n  some more\n  text\n  goes\n  here\n  \"\"\n  \"\n```\n\n### Options\n\n```\n      --body string         The body of the issue\n      --dir string          The source directory used to detect the Git repository. Defaults to the current directory\n  -h, --help                help for issue\n  -l, --label stringArray   The labels to add to the issue\n  -t, --title string        The title of the issue to create\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_jenkins.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create jenkins\"\nslug: jx_create_jenkins\nurl: /commands/jx_create_jenkins/\ndescription: list of jx commands\n---\n## jx create jenkins\n\nCreates a Jenkins resource\n\n### Synopsis\n\nCreates a Jenkins resource\n\n```\njx create jenkins [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for jenkins\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create jenkins token](/commands/jx_create_jenkins_token/)\t - Adds a new username and API token for a Jenkins server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_jenkins_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create jenkins token\"\nslug: jx_create_jenkins_token\nurl: /commands/jx_create_jenkins_token/\ndescription: list of jx commands\n---\n## jx create jenkins token\n\nAdds a new username and API token for a Jenkins server\n\n### Synopsis\n\nCreates a new user and API Token for the current Jenkins server\n\n```\njx create jenkins token [username] [flags]\n```\n\n### Examples\n\n```\n  # Add a new API Token for a user for the current Jenkins server\n  # prompting the user to find and enter the API Token\n  jx create jenkins token someUserName\n  \n  # Add a new API Token for a user for the current Jenkins server\n  # using browser automation to login to the Git server\n  # with the username an password to find the API Token\n  jx create jenkins token -p somePassword someUserName\n```\n\n### Options\n\n```\n  -t, --api-token string          The API Token for the user\n  -m, --custom                    Use a custom Jenkins App instead of the default execution engine in Jenkins X\n      --health-timeout duration   The maximum duration to wait for the Jenkins service to be healthy before trying to create the API token (default 30m0s)\n  -h, --help                      help for token\n  -j, --jenkins-name string       The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n  -n, --name string               The name of the Git server to add a user\n      --namespace string          The namespace of the secret where the Jenkins API token will be stored\n      --no-rest                   Disables the use of REST calls to automatically find the API token if the user and password are known\n  -p, --password string           The User password to try automatically create a new API Token\n      --recreate-token            Should we recreate the API token if it already exists\n      --timeout string            The timeout if using REST to generate the API token (by passing username and password)\n  -u, --url string                The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create jenkins](/commands/jx_create_jenkins/)\t - Creates a Jenkins resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_mlquickstart.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create mlquickstart\"\nslug: jx_create_mlquickstart\nurl: /commands/jx_create_mlquickstart/\ndescription: list of jx commands\n---\n## jx create mlquickstart\n\nCreate a new machine learning app from a set of quickstarts and import the generated code into Git and Jenkins for CI/CD\n\n### Synopsis\n\nCreate a new machine learning project from a sample/starter (found in https://github.com/machine-learning-quickstarts)\n  \n      This will create two new projects for you from the selected template. One for training and one for deploying a model as a service.\n      It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n      For more documentation see: [https://jenkins-x.io/developing/create-mlquickstart/](https://jenkins-x.io/developing/create-mlquickstart/)\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n```\njx create mlquickstart [flags]\n```\n\n### Examples\n\n```\n  Create a new machine learning project from a sample/starter (found in https://github.com/machine-learning-quickstarts)\n  \n  This will create a new machine learning project for you from the selected template.\n  It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n  jx create mlquickstart\n  \n  jx create mlquickstart -f pytorch\n```\n\n### Options\n\n```\n      --branches string                The branch pattern for branches to trigger CI/CD pipelines on\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n      --credentials string             The Jenkins credentials name used by the job\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --disable-updatebot              disable updatebot-maven-plugin from attempting to fix/update the maven pom.xml\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --external-jenkins-url string    The jenkins url that an external git provider needs to use\n  -f, --filter string                  The text filter\n      --framework string               The framework to filter on\n      --git-api-token string           The Git API token to use for creating new Git repositories\n      --git-host string                The Git server host if not using GitHub when pushing created project\n      --git-provider-kind string       Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string        The Git server URL to create new Git repositories inside\n      --git-public                     Create new Git repositories as public\n      --git-username string            The Git username to use for creating new Git repositories\n  -h, --help                           help for mlquickstart\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n  -m, --import-mode string             The import mode to use. Should be one of Jenkinsfile, YAML\n      --jenkinsfile string             The name of the Jenkinsfile to use. If not specified then 'Jenkinsfile' will be used\n  -l, --language string                The language to filter on\n      --list-packs                     list available draft packs\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --no-draft                       Disable Draft from trying to default a Dockerfile and Helm Chart\n      --no-import                      Disable import after the creation\n      --no-jenkinsfile                 Disable defaulting a Jenkinsfile if its missing\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n  -g, --organisations stringArray      The GitHub organisations to query for quickstarts\n  -o, --output-dir string              Directory to output the project to. Defaults to the current directory\n      --owner string                   The owner to filter on\n      --pack string                    The name of the pack to use\n      --preview-namespace string       The namespace to deploy application previews into\n  -p, --project-name string            The project name (for use with -b batch mode)\n      --scheduler string               The name of the Scheduler configuration to use for ChatOps when using Prow\n  -t, --tag stringArray                The tags on the quickstarts to filter\n      --use-default-git                use default git account\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_project.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create project\"\nslug: jx_create_project\nurl: /commands/jx_create_project/\ndescription: list of jx commands\n---\n## jx create project\n\nCreate a new Project by importing code, using a Quickstart or custom wizard for Spring\n\n### Synopsis\n\nCreate a new Project by importing code, using a Quickstart or custom wizard for Spring.\n  \nSee Also: \n\n  * jx create quickstart : https://jenkins-x.io/commands/jx_create_quickstart  \n  * jx create spring : https://jenkins-x.io/commands/jx_create_spring  \n  * jx import : https://jenkins-x.io/commands/jx_import\n\n```\njx create project [flags]\n```\n\n### Examples\n\n```\n  # Create a project\n  jx create project\n```\n\n### Options\n\n```\n  -h, --help   help for project\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_pullrequest.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create pullrequest\"\nslug: jx_create_pullrequest\nurl: /commands/jx_create_pullrequest/\ndescription: list of jx commands\n---\n## jx create pullrequest\n\nCreate a Pull Request on the git project for the current directory\n\n### Synopsis\n\nCreates a Pull Request in a the git project of the current directory. \n\nIf --push is specified the contents of the directory will be committed, pushed and used to create the pull request\n\n```\njx create pullrequest [flags]\n```\n\n### Examples\n\n```\n  # Create a Pull Request in the current project\n  jx create pullrequest -t \"my PR title\"\n  \n  \n  # Create a Pull Request with a title and a body\n  jx create pullrequest -t \"my PR title\" --body \"\n  some more\n  text\n  goes\n  here\n  \"\"\n  \"\n```\n\n### Options\n\n```\n      --base string         The base branch to create the pull request into (default \"master\")\n      --body string         The body of the pullrequest\n      --dir string          The source directory used to detect the Git repository. Defaults to the current directory\n      --fork                If true, and the username configured to push the repo is different from the org name a PR is being created against, assume that this is a fork\n  -h, --help                help for pullrequest\n  -l, --label stringArray   The labels to add to the pullrequest\n      --push                If true the contents of the source directory will be committed, pushed, and used to create the pull request\n  -t, --title string        The title of the pullrequest to create\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_quickstart.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create quickstart\"\nslug: jx_create_quickstart\nurl: /commands/jx_create_quickstart/\ndescription: list of jx commands\n---\n## jx create quickstart\n\nCreate a new app from a Quickstart and import the generated code into Git and Jenkins for CI/CD\n\n### Synopsis\n\nCreate a new project from a sample/starter (found in https://github.com/jenkins-x-quickstarts)\n  \n      This will create a new project for you from the selected template.\n      It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n      For more documentation see: [https://jenkins-x.io/developing/create-quickstart/](https://jenkins-x.io/developing/create-quickstart/)\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n```\njx create quickstart [flags]\n```\n\n### Examples\n\n```\n  Create a new project from a sample/starter (found in https://github.com/jenkins-x-quickstarts)\n  \n  This will create a new project for you from the selected template.\n  It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n  jx create quickstart\n  \n  jx create quickstart -f http\n```\n\n### Options\n\n```\n      --branches string                The branch pattern for branches to trigger CI/CD pipelines on\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n      --credentials string             The Jenkins credentials name used by the job\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --disable-updatebot              disable updatebot-maven-plugin from attempting to fix/update the maven pom.xml\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --external-jenkins-url string    The jenkins url that an external git provider needs to use\n  -f, --filter string                  The text filter\n      --framework string               The framework to filter on\n      --git-api-token string           The Git API token to use for creating new Git repositories\n      --git-host string                The Git server host if not using GitHub when pushing created project\n      --git-provider-kind string       Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string        The Git server URL to create new Git repositories inside\n      --git-public                     Create new Git repositories as public\n      --git-username string            The Git username to use for creating new Git repositories\n  -h, --help                           help for quickstart\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n  -m, --import-mode string             The import mode to use. Should be one of Jenkinsfile, YAML\n      --jenkinsfile string             The name of the Jenkinsfile to use. If not specified then 'Jenkinsfile' will be used\n  -l, --language string                The language to filter on\n      --list-packs                     list available draft packs\n      --machine-learning               Allow machine-learning quickstarts in results\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --no-draft                       Disable Draft from trying to default a Dockerfile and Helm Chart\n      --no-import                      Disable import after the creation\n      --no-jenkinsfile                 Disable defaulting a Jenkinsfile if its missing\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n  -g, --organisations stringArray      The GitHub organisations to query for quickstarts\n  -o, --output-dir string              Directory to output the project to. Defaults to the current directory\n      --owner string                   The owner to filter on\n      --pack string                    The name of the pack to use\n      --preview-namespace string       The namespace to deploy application previews into\n  -p, --project-name string            The project name (for use with -b batch mode)\n      --scheduler string               The name of the Scheduler configuration to use for ChatOps when using Prow\n  -t, --tag stringArray                The tags on the quickstarts to filter\n      --use-default-git                use default git account\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_quickstartlocation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create quickstartlocation\"\nslug: jx_create_quickstartlocation\nurl: /commands/jx_create_quickstartlocation/\ndescription: list of jx commands\n---\n## jx create quickstartlocation\n\nCreate a location of quickstarts for your team\n\n### Synopsis\n\nCreate a location of quickstarts for your team \n\nFor more documentation see: https://jenkins-x.io/developing/create-quickstart/#customising-your-teams-quickstarts\n\n```\njx create quickstartlocation [flags]\n```\n\n### Examples\n\n```\n  # Create a quickstart location using a GitHub repository organisation\n  jx create quickstartlocation --owner my-quickstarts\n  \n  # Create a quickstart location using a GitHub repository organisation via an abbreviation\n  jx create qsloc --owner my-quickstarts\n  \n  # Create a quickstart location for your Git repo and organisation\n  jx create quickstartlocation --url https://mygit.server.com --owner my-quickstarts\n```\n\n### Options\n\n```\n  -x, --excludes stringArray   The patterns to exclude repositories (default [WIP-*])\n  -h, --help                   help for quickstartlocation\n  -i, --includes stringArray   The patterns to include repositories (default [*])\n  -k, --kind string            The kind of Git service at the URL\n  -o, --owner string           The owner is the user or organisation of the Git provider used to find repositories\n  -u, --url string             The URL of the Git service (default \"https://github.com\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_step.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create step\"\nslug: jx_create_step\nurl: /commands/jx_create_step/\ndescription: list of jx commands\n---\n## jx create step\n\nCreates a step in the Jenkins X Pipeline\n\n### Synopsis\n\nCreates a step in the Jenkins X Pipeline\n\n```\njx create step [flags]\n```\n\n### Examples\n\n```\n  # Create a new step in the Jenkins X Pipeline interactively\n  jx create step\n  \n  # Creates a step on the command line: adding a post step to the release build lifecycle\n  jx create step -sh \"echo hello world\"\n  \n  # Creates a step on the command line: adding a pre step to the pullRequest promote lifecycle\n  jx create step -p pullrequest -l promote -m pre -c \"echo before promote\"\n```\n\n### Options\n\n```\n  -d, --dir string         The root project directory. Defaults to the current dir\n  -h, --help               help for step\n  -l, --lifecycle string   The lifecycle stage to add your step. Possible values: setup, setversion, prebuild, build, postbuild, promote\n  -m, --mode string        The create mode for the new step. Possible values: pre, post, replace\n  -p, --pipeline string    The pipeline kind to add your step. Possible values: release, pullrequest, feature\n  -c, --sh string          The command to invoke for the new step\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_team.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create team\"\nslug: jx_create_team\nurl: /commands/jx_create_team/\ndescription: list of jx commands\n---\n## jx create team\n\nCreate a new Team which is then provisioned later on\n\n### Synopsis\n\nCreates a Team\n\n```\njx create team [flags]\n```\n\n### Examples\n\n```\n  # Create a new pending Team which can then be provisioned\n  jx create team myname\n  \"\n```\n\n### Options\n\n```\n  -h, --help                 help for team\n  -m, --member stringArray   The usernames of the members to add to the Team\n  -n, --name string          The name of the new Team. Should be all lower case and no special characters other than '-'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create token\"\nslug: jx_create_token\nurl: /commands/jx_create_token/\ndescription: list of jx commands\n---\n## jx create token\n\nCreates a new user token for a service\n\n### Synopsis\n\nCreates a new user token for a service\n\n```\njx create token [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for token\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create token addon](/commands/jx_create_token_addon/)\t - Adds a new token/login for a user for a given addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_token_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create token addon\"\nslug: jx_create_token_addon\nurl: /commands/jx_create_token_addon/\ndescription: list of jx commands\n---\n## jx create token addon\n\nAdds a new token/login for a user for a given addon\n\n### Synopsis\n\nCreates a new User Token for an Addon service\n\n```\njx create token addon [username] [flags]\n```\n\n### Examples\n\n```\n  # Add a new User Token for an addonservice\n  jx create token addon -n anchore someUserName\n  \n  # As above with the password being passed in\n  jx create token addon -n anchore -p somePassword someUserName\n```\n\n### Options\n\n```\n  -t, --api-token string   The API Token for the user\n  -h, --help               help for addon\n  -k, --kind string        The kind of addon. Defaults to the addon name if not specified\n  -n, --name string        The name of the Git server to add a user\n  -p, --password string    The password for the user\n      --timeout string     The timeout if using browser automation to generate the API token (by passing username and password)\n  -u, --url string         The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create token](/commands/jx_create_token/)\t - Creates a new user token for a service\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_tracker.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create tracker\"\nslug: jx_create_tracker\nurl: /commands/jx_create_tracker/\ndescription: list of jx commands\n---\n## jx create tracker\n\nCreates an issue tracker resource\n\n### Synopsis\n\nCreates an issue tracker resource\n\n```\njx create tracker [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for tracker\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n* [jx create tracker server](/commands/jx_create_tracker_server/)\t - Creates a new issue tracker server URL\n* [jx create tracker token](/commands/jx_create_tracker_token/)\t - Adds a new token/login for a user on an issue tracker server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_tracker_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create tracker server\"\nslug: jx_create_tracker_server\nurl: /commands/jx_create_tracker_server/\ndescription: list of jx commands\n---\n## jx create tracker server\n\nCreates a new issue tracker server URL\n\n### Synopsis\n\nAdds a new Issue Tracker Server URL\n\n```\njx create tracker server kind [url] [flags]\n```\n\n### Examples\n\n```\n  # Add a new issue tracker server URL\n  jx create tracker server jira myURL\n```\n\n### Options\n\n```\n  -h, --help          help for server\n  -n, --name string   The name for the issue tracker server being created\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create tracker](/commands/jx_create_tracker/)\t - Creates an issue tracker resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_tracker_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create tracker token\"\nslug: jx_create_tracker_token\nurl: /commands/jx_create_tracker_token/\ndescription: list of jx commands\n---\n## jx create tracker token\n\nAdds a new token/login for a user on an issue tracker server\n\n### Synopsis\n\nCreates a new User Token for an Issue Tracker\n\n```\njx create tracker token [username] [flags]\n```\n\n### Examples\n\n```\n  # Add a new User Token for an Issue Tracker\n  jx create tracker token -n jira someUserName\n  \n  # As above with the password being passed in\n  jx create git token -n jira -p somePassword someUserName\n```\n\n### Options\n\n```\n  -t, --api-token string   The API Token for the user\n  -h, --help               help for token\n  -n, --name string        The name of the Git server to add a user\n      --timeout string     The timeout if using browser automation to generate the API token (by passing username and password)\n  -u, --url string         The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create tracker](/commands/jx_create_tracker/)\t - Creates an issue tracker resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_user.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create user\"\nslug: jx_create_user\nurl: /commands/jx_create_user/\ndescription: list of jx commands\n---\n## jx create user\n\nCreate a new User which is then provisioned by the user controller\n\n### Synopsis\n\nCreates a user\n\n```\njx create user [flags]\n```\n\n### Examples\n\n```\n  # Create a user\n  jx create user -e \"user@email.com\" --login username --name username\n```\n\n### Options\n\n```\n  -s, --create-service-account   Enable ServiceAccount for this external user\n  -e, --email string             The users email address\n  -h, --help                     help for user\n  -l, --login string             The user login name\n  -n, --name string              The textual full name of the user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_create_variable.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx create variable\"\nslug: jx_create_variable\nurl: /commands/jx_create_variable/\ndescription: list of jx commands\n---\n## jx create variable\n\nCreates an environment variable in the Jenkins X Pipeline\n\n### Synopsis\n\nCreates an environment variable in the Jenkins X Pipeline\n\n```\njx create variable [flags]\n```\n\n### Examples\n\n```\n  # Create a new environment variable with a name and value\n  jx create var -n CHEESE -v Edam\n  \n  # Create a new environment variable with a name and ask the user for the value\n  jx create var -n CHEESE\n  \n  # Overrides an environment variable from the build pack\n  jx create var\n```\n\n### Options\n\n```\n  -d, --dir string     The root project directory. Defaults to the current dir\n  -h, --help           help for variable\n  -n, --name string    The name of the environment variable to set\n  -v, --value string   The value of the environment variable to set\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx create](/commands/jx_create/)\t - Create a new resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete\"\nslug: jx_delete\nurl: /commands/jx_delete/\ndescription: list of jx commands\n---\n## jx delete\n\nDeletes one or more resources\n\n### Synopsis\n\nDeletes one or more resources.\n\n```\njx delete TYPE [flags]\n```\n\n### Examples\n\n```\n  # Delete an environment\n  jx delete env staging\n```\n\n### Options\n\n```\n  -h, --help   help for delete\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx delete addon](/commands/jx_delete_addon/)\t - Deletes one or more addons\n* [jx delete app](/commands/jx_delete_app/)\t - Deletes one or more apps from Jenkins X (an app is similar to an addon)\n* [jx delete application](/commands/jx_delete_application/)\t - Deletes one or more applications from Jenkins\n* [jx delete branch](/commands/jx_delete_branch/)\t - Deletes one or more branches in git repositories\n* [jx delete chat](/commands/jx_delete_chat/)\t - Deletes one or more chat services resources\n* [jx delete contexts](/commands/jx_delete_contexts/)\t - Deletes one or more Kubernetes contexts\n* [jx delete devpod](/commands/jx_delete_devpod/)\t - Deletes one or more DevPods\n* [jx delete environment](/commands/jx_delete_environment/)\t - Deletes one or more Environments\n* [jx delete git](/commands/jx_delete_git/)\t - Deletes one or more Git resources\n* [jx delete gke](/commands/jx_delete_gke/)\t - Deletes GKE cluster.\n* [jx delete jenkins](/commands/jx_delete_jenkins/)\t - Deletes one or more Jenkins resources\n* [jx delete namespace](/commands/jx_delete_namespace/)\t - Deletes one or more namespaces and their associated resources (Environments, Jenkins etc)\n* [jx delete preview](/commands/jx_delete_preview/)\t - Deletes a preview environment\n* [jx delete quickstartlocation](/commands/jx_delete_quickstartlocation/)\t - Deletes one or more quickstart locations for your team\n* [jx delete repo](/commands/jx_delete_repo/)\t - Deletes one or more Git repositories\n* [jx delete team](/commands/jx_delete_team/)\t - Deletes one or more teams and their associated resources (Environments, Jenkins etc)\n* [jx delete token](/commands/jx_delete_token/)\t - Deletes one or more issue token resources\n* [jx delete tracker](/commands/jx_delete_tracker/)\t - Deletes one or more issue tracker resources\n* [jx delete user](/commands/jx_delete_user/)\t - Deletes one or more users\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete addon\"\nslug: jx_delete_addon\nurl: /commands/jx_delete_addon/\ndescription: list of jx commands\n---\n## jx delete addon\n\nDeletes one or more addons\n\n### Synopsis\n\nDeletes one or more addons\n\n```\njx delete addon [flags]\n```\n\n### Options\n\n```\n  -h, --help    help for addon\n  -p, --purge   Removes the release name from helm so it can be reused again (default true)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete addon environment](/commands/jx_delete_addon_environment/)\t - Deletes the Environment Controller \n* [jx delete addon flagger](/commands/jx_delete_addon_flagger/)\t - Deletes the Flagger addon\n* [jx delete addon gitea](/commands/jx_delete_addon_gitea/)\t - Deletes the Gitea addon\n* [jx delete addon istio](/commands/jx_delete_addon_istio/)\t - Deletes the Istio addon\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_addon_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete addon environment\"\nslug: jx_delete_addon_environment\nurl: /commands/jx_delete_addon_environment/\ndescription: list of jx commands\n---\n## jx delete addon environment\n\nDeletes the Environment Controller \n\n### Synopsis\n\nDeletes the Environment Controller\n\n```\njx delete addon environment controller [flags]\n```\n\n### Examples\n\n```\n  # Deletes the environment controller\n  jx delete addon envctl\n```\n\n### Options\n\n```\n  -h, --help               help for environment\n  -n, --namespace string   The Namespace to delete from (default \"jx\")\n  -p, --purge              Removes the release name from helm so it can be reused again (default true)\n  -r, --release string     The chart release name (default \"jxet\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete addon](/commands/jx_delete_addon/)\t - Deletes one or more addons\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_addon_flagger.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete addon flagger\"\nslug: jx_delete_addon_flagger\nurl: /commands/jx_delete_addon_flagger/\ndescription: list of jx commands\n---\n## jx delete addon flagger\n\nDeletes the Flagger addon\n\n### Synopsis\n\nDeletes the Flagger addon\n\n```\njx delete addon flagger [flags]\n```\n\n### Examples\n\n```\n  # Deletes the Flagger addon\n  jx delete addon flagger\n```\n\n### Options\n\n```\n  -h, --help               help for flagger\n  -n, --namespace string   The Namespace to delete from (default \"istio-system\")\n  -p, --purge              Removes the release name from helm so it can be reused again (default true)\n  -r, --release string     The chart release name (default \"flagger\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete addon](/commands/jx_delete_addon/)\t - Deletes one or more addons\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_addon_gitea.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete addon gitea\"\nslug: jx_delete_addon_gitea\nurl: /commands/jx_delete_addon_gitea/\ndescription: list of jx commands\n---\n## jx delete addon gitea\n\nDeletes the Gitea addon\n\n### Synopsis\n\nDeletes the Gitea addon\n\n```\njx delete addon gitea [flags]\n```\n\n### Examples\n\n```\n  # Deletes the Gitea addon\n  jx delete addon gitea\n```\n\n### Options\n\n```\n  -h, --help             help for gitea\n  -p, --purge            Removes the release name from helm so it can be reused again (default true)\n  -r, --release string   The chart release name (default \"gitea\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete addon](/commands/jx_delete_addon/)\t - Deletes one or more addons\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_addon_istio.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete addon istio\"\nslug: jx_delete_addon_istio\nurl: /commands/jx_delete_addon_istio/\ndescription: list of jx commands\n---\n## jx delete addon istio\n\nDeletes the Istio addon\n\n### Synopsis\n\nDeletes the Istio addon\n\n```\njx delete addon istio [flags]\n```\n\n### Examples\n\n```\n  # Deletes the Istio addon\n  jx delete addon istio\n```\n\n### Options\n\n```\n  -h, --help               help for istio\n  -n, --namespace string   The Namespace to delete from (default \"istio-system\")\n  -p, --purge              Removes the release name from helm so it can be reused again (default true)\n  -r, --release string     The chart release name (default \"istio\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete addon](/commands/jx_delete_addon/)\t - Deletes one or more addons\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_app.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete app\"\nslug: jx_delete_app\nurl: /commands/jx_delete_app/\ndescription: list of jx commands\n---\n## jx delete app\n\nDeletes one or more apps from Jenkins X (an app is similar to an addon)\n\n### Synopsis\n\nDeletes one or more Apps (an app is similar to an addon)\n\n```\njx delete app [flags]\n```\n\n### Examples\n\n```\n  # prompt for the available apps to delete\n  jx delete apps\n  \n  # delete a specific app\n  jx delete app jx-app-cheese\n```\n\n### Options\n\n```\n      --alias string       An alias to use for the app (available when using GitOps for your dev environment)\n      --auto-merge         Automatically merge GitOps pull requests that pass CI\n  -h, --help               help for app\n  -n, --namespace string   The Namespace to install into (available when NOT using GitOps for your dev environment) (default \"jx\")\n      --purge              Should we run helm update first to ensure we use the latest version (available when NOT using GitOps for your dev environment) (default true)\n  -r, --release string     The chart release name (available when NOT using GitOps for your dev environment)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_application.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete application\"\nslug: jx_delete_application\nurl: /commands/jx_delete_application/\ndescription: list of jx commands\n---\n## jx delete application\n\nDeletes one or more applications from Jenkins\n\n### Synopsis\n\nDeletes one or more Applications \n\nNote that this command does not remove the underlying Git Repositories. \n\nFor that see the https://jenkins-x.io/commands/jx_delete_repo/command.\n\n```\njx delete application [flags]\n```\n\n### Examples\n\n```\n  # prompt for the available applications to delete\n  jx delete application\n  \n  # delete a specific app\n  jx delete application cheese\n```\n\n### Options\n\n```\n  -a, --all                             Selects all the matched applications\n      --auto-merge                      Automatically merge GitOps pull requests that pass CI\n  -f, --filter string                   Filter the list of applications to those containing this text\n  -h, --help                            help for application\n      --no-env                          Do not remove the application from any of the Environments\n      --no-merge                        Disables automatic merge of promote Pull Requests\n  -o, --org string                      github organisation/project name that source code resides in\n      --pull-request-poll-time string   Poll time when waiting for a Pull Request to merge (default \"20s\")\n  -t, --timeout string                  The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete (default \"1h\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_branch.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete branch\"\nslug: jx_delete_branch\nurl: /commands/jx_delete_branch/\ndescription: list of jx commands\n---\n## jx delete branch\n\nDeletes one or more branches in git repositories\n\n### Synopsis\n\nDeletes one or more branches in repositories. \n\nNote that command will ask for confirmation before doing anything!\n\n```\njx delete branch [flags]\n```\n\n### Examples\n\n```\n  # Selects the repositories to delete from the given GitHub organisation\n  jx delete branch --org myname --name myrepo -f updatebot- -a\n```\n\n### Options\n\n```\n  -a, --all                   If selecting branches to remove this defaults to selecting them all\n      --all-repos             If selecting projects to remove branches this defaults to selecting them all\n  -f, --filter string         If selecting branches to remove this filters the list of repositories\n      --filter-repos string   If selecting projects to remove brancehs this filters the list of repositories\n  -g, --git-host string       The Git server host if not using GitHub\n      --github                If you wish to pick the repositories from GitHub to import\n  -h, --help                  help for branch\n      --merged                If deleting merged branches in a repository\n  -n, --name stringArray      Specify the Git repository names to delete\n  -o, --org string            Specify the Git provider organisation that includes the repository to delete\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_chat.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete chat\"\nslug: jx_delete_chat\nurl: /commands/jx_delete_chat/\ndescription: list of jx commands\n---\n## jx delete chat\n\nDeletes one or more chat services resources\n\n### Synopsis\n\nDeletes one or more chat services resources\n\n```\njx delete chat [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for chat\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete chat server](/commands/jx_delete_chat_server/)\t - Deletes one or more chat server(s)\n* [jx delete chat token](/commands/jx_delete_chat_token/)\t - Deletes one or more API tokens for a user on a chat server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_chat_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete chat server\"\nslug: jx_delete_chat_server\nurl: /commands/jx_delete_chat_server/\ndescription: list of jx commands\n---\n## jx delete chat server\n\nDeletes one or more chat server(s)\n\n### Synopsis\n\nDeletes one or more chat servers from your local settings\n\n```\njx delete chat server [flags]\n```\n\n### Examples\n\n```\n  # Deletes an chat server\n  jx delete chat server MyProvider\n```\n\n### Options\n\n```\n  -h, --help             help for server\n  -i, --ignore-missing   Silently ignore attempts to remove an chat server name that does not exist\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete chat](/commands/jx_delete_chat/)\t - Deletes one or more chat services resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_chat_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete chat token\"\nslug: jx_delete_chat_token\nurl: /commands/jx_delete_chat_token/\ndescription: list of jx commands\n---\n## jx delete chat token\n\nDeletes one or more API tokens for a user on a chat server\n\n### Synopsis\n\nDeletes one or more API tokens for your chat server from your local settings\n\n```\njx delete chat token [flags]\n```\n\n### Examples\n\n```\n  # Deletes a chat user token\n  jx delete chat token -n slack myusername\n```\n\n### Options\n\n```\n  -h, --help          help for token\n  -n, --name string   The name of the Git server to add a user\n  -u, --url string    The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete chat](/commands/jx_delete_chat/)\t - Deletes one or more chat services resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_contexts.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete contexts\"\nslug: jx_delete_contexts\nurl: /commands/jx_delete_contexts/\ndescription: list of jx commands\n---\n## jx delete contexts\n\nDeletes one or more Kubernetes contexts\n\n### Synopsis\n\nDeletes one or more Kubernetes contexts.\n\n```\njx delete contexts [flags]\n```\n\n### Examples\n\n```\n  # Deletes a context for a cluster that no longer exists\n  jx delete context something\n  \n  # Deletes all contexts containing the word cheese\n  # selecting them all by default\n  jx delete ctx -a cheese\n```\n\n### Options\n\n```\n  -a, --all              Selects all the matched contexts\n      --delete-cluster   Also delete the cluster config associated to the context\n      --delete-user      Also delete the user config associated to the context\n  -f, --filter string    Filter the list of contexts to those containing this text\n  -h, --help             help for contexts\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_devpod.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete devpod\"\nslug: jx_delete_devpod\nurl: /commands/jx_delete_devpod/\ndescription: list of jx commands\n---\n## jx delete devpod\n\nDeletes one or more DevPods\n\n### Synopsis\n\nDeletes one or more DevPods \n\nFor more documentation see: https://jenkins-x.io/developing/devpods/\n\n```\njx delete devpod [flags]\n```\n\n### Examples\n\n```\n  # deletes a DevPod by picking one from the list and confirming to it\n  jx delete devpod\n  \n  # delete a specific DevPod\n  jx delete devpod myuser-maven2\n```\n\n### Options\n\n```\n  -h, --help              help for devpod\n      --username string   The username to create the DevPod. If not specified defaults to the current operating system user or $USER'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete environment\"\nslug: jx_delete_environment\nurl: /commands/jx_delete_environment/\ndescription: list of jx commands\n---\n## jx delete environment\n\nDeletes one or more Environments\n\n### Synopsis\n\nDeletes one or more environments.\n\n```\njx delete environment [flags]\n```\n\n### Examples\n\n```\n  # Deletes an environment\n  jx delete env staging\n```\n\n### Options\n\n```\n  -h, --help        help for environment\n  -n, --namespace   Delete the namespace for the Environment too?\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_git.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete git\"\nslug: jx_delete_git\nurl: /commands/jx_delete_git/\ndescription: list of jx commands\n---\n## jx delete git\n\nDeletes one or more Git resources\n\n### Synopsis\n\nDeletes one or more Git resources\n\n```\njx delete git [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for git\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete git server](/commands/jx_delete_git_server/)\t - Deletes one or more Git servers\n* [jx delete git token](/commands/jx_delete_git_token/)\t - Deletes one or more API tokens for a user on a Git server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_git_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete git server\"\nslug: jx_delete_git_server\nurl: /commands/jx_delete_git_server/\ndescription: list of jx commands\n---\n## jx delete git server\n\nDeletes one or more Git servers\n\n### Synopsis\n\nDeletes one or more Git servers from your local settings\n\n```\njx delete git server [flags]\n```\n\n### Examples\n\n```\n  # Deletes a Git provider\n  jx delete git server MyProvider\n```\n\n### Options\n\n```\n  -h, --help             help for server\n  -i, --ignore-missing   Silently ignore attempts to remove a Git server name that does not exist\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete git](/commands/jx_delete_git/)\t - Deletes one or more Git resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_git_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete git token\"\nslug: jx_delete_git_token\nurl: /commands/jx_delete_git_token/\ndescription: list of jx commands\n---\n## jx delete git token\n\nDeletes one or more API tokens for a user on a Git server\n\n### Synopsis\n\nDeletes one or more git tokens from your local settings\n\n```\njx delete git token [flags]\n```\n\n### Examples\n\n```\n  # Deletes a Git user token\n  jx delete git token -n local myusername\n```\n\n### Options\n\n```\n  -h, --help          help for token\n  -n, --name string   The name of the Git server to add a user\n  -u, --url string    The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete git](/commands/jx_delete_git/)\t - Deletes one or more Git resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_gke.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete gke\"\nslug: jx_delete_gke\nurl: /commands/jx_delete_gke/\ndescription: list of jx commands\n---\n## jx delete gke\n\nDeletes GKE cluster.\n\n### Synopsis\n\nDeletes GKE cluster resource.\n\n```\njx delete gke [flags]\n```\n\n### Examples\n\n```\n  # Delete GKE cluster\n  jx delete gke\n```\n\n### Options\n\n```\n  -h, --help                help for gke\n  -o, --output string       The output format such as 'yaml'\n  -p, --project-id string   Google Project ID to delete cluster from\n      --region string       GKE region to use. Default: europe-west1-c (default \"europe-west1-c\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_jenkins.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete jenkins\"\nslug: jx_delete_jenkins\nurl: /commands/jx_delete_jenkins/\ndescription: list of jx commands\n---\n## jx delete jenkins\n\nDeletes one or more Jenkins resources\n\n### Synopsis\n\nDeletes one or more Jenkins resources\n\n```\njx delete jenkins [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for jenkins\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete jenkins token](/commands/jx_delete_jenkins_token/)\t - Deletes one or more Jenkins user API tokens\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_jenkins_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete jenkins token\"\nslug: jx_delete_jenkins_token\nurl: /commands/jx_delete_jenkins_token/\ndescription: list of jx commands\n---\n## jx delete jenkins token\n\nDeletes one or more Jenkins user API tokens\n\n### Synopsis\n\nDeletes one or more Jenkins user tokens from your local settings\n\n```\njx delete jenkins token [flags]\n```\n\n### Examples\n\n```\n  # Deletes the current Jenkins token\n  jx delete jenkins user admin\n```\n\n### Options\n\n```\n  -m, --custom                Use a custom Jenkins App instead of the default execution engine in Jenkins X\n  -h, --help                  help for token\n  -j, --jenkins-name string   The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n  -n, --name string           The name of the Git server to add a user\n  -u, --url string            The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete jenkins](/commands/jx_delete_jenkins/)\t - Deletes one or more Jenkins resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_namespace.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete namespace\"\nslug: jx_delete_namespace\nurl: /commands/jx_delete_namespace/\ndescription: list of jx commands\n---\n## jx delete namespace\n\nDeletes one or more namespaces and their associated resources (Environments, Jenkins etc)\n\n### Synopsis\n\nDeletes one or more namespaces\n\n```\njx delete namespace [flags]\n```\n\n### Examples\n\n```\n  # Delete the named namespace\n  jx delete namespace cheese\n  \n  # Delete the namespaces matching the given filter\n  jx delete namespace -f foo -a\n```\n\n### Options\n\n```\n  -a, --all             Should we default to selecting all the matched namespaces for deletion\n  -f, --filter string   Filters the list of namespaces you can pick from\n  -h, --help            help for namespace\n  -y, --yes             Confirms we should uninstall this installation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_preview.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete preview\"\nslug: jx_delete_preview\nurl: /commands/jx_delete_preview/\ndescription: list of jx commands\n---\n## jx delete preview\n\nDeletes a preview environment\n\n### Synopsis\n\nDeletes a preview environment\n\n```\njx delete preview [flags]\n```\n\n### Options\n\n```\n  -c, --cluster string                    The Kubernetes cluster for the Environment. If blank and a namespace is specified assumes the current cluster\n      --dev-namespace string              The Developer namespace where the preview command should run\n      --dir string                        The source directory used to detect the git source URL and reference\n  -h, --help                              help for preview\n  -l, --label string                      The Environment label which is a descriptive string like 'Production' or 'Staging'\n  -n, --name string                       The Environment resource name. Must follow the Kubernetes name conventions like Services, Namespaces\n      --namespace string                  The Kubernetes namespace for the Environment\n      --no-comment                        Disables commenting on the Pull Request after preview is created.\n      --post-preview-job-timeout string   The duration before we consider the post preview Jobs failed (default \"2h\")\n      --post-preview-poll-time string     The amount of time between polls for the post preview Job status (default \"10s\")\n      --pr string                         The Pull Request Name (e.g. 'PR-23' or just '23'\n      --pr-url string                     The Pull Request URL\n      --preview-health-timeout string     The amount of time to wait for the preview application to become healthy (default \"5m\")\n      --skip-availability-check           Disables the mandatory availability check.\n      --source-ref string                 The source code git ref (branch/sha)\n  -s, --source-url string                 The source code git URL\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_quickstartlocation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete quickstartlocation\"\nslug: jx_delete_quickstartlocation\nurl: /commands/jx_delete_quickstartlocation/\ndescription: list of jx commands\n---\n## jx delete quickstartlocation\n\nDeletes one or more quickstart locations for your team\n\n### Synopsis\n\nDeletes one or more quickstart locations for your team \n\nFor more documentation see: https://jenkins-x.io/developing/create-quickstart/#customising-your-teams-quickstarts\n\n```\njx delete quickstartlocation [flags]\n```\n\n### Examples\n\n```\n  # Pick a quickstart location to delete for your team\n  jx delete quickstartlocation\n  \n  # Pick a quickstart location to delete for your team using an abbreviation\n  jx delete qsloc\n  \n  # Delete a GitHub organisation 'myorg' for your team\n  jx delete qsloc --owner myorg\n  \n  # Delete a specific location for your team\n  jx delete qsloc --url https://foo.com --owner myowner\n```\n\n### Options\n\n```\n  -h, --help           help for quickstartlocation\n  -o, --owner string   The owner is the user or organisation of the Git provider\n  -u, --url string     The URL of the Git service (default \"https://github.com\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_repo.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete repo\"\nslug: jx_delete_repo\nurl: /commands/jx_delete_repo/\ndescription: list of jx commands\n---\n## jx delete repo\n\nDeletes one or more Git repositories\n\n### Synopsis\n\nDeletes one or more repositories. \n\nThis command will require the delete repo role on your Persona Access Token. \n\nNote that command will ask for confirmation before doing anything!\n\n```\njx delete repo [flags]\n```\n\n### Examples\n\n```\n  # Selects the repositories to delete from the given GitHub organisation\n  jx delete repo --github --org myname\n  \n  # Selects all the repositories in organisation myname that contain 'foo'\n  # you get a chance to select which ones not to delete\n  jx delete repo --github --org myname --all --filter foo\n```\n\n### Options\n\n```\n  -a, --all                If selecting projects to delete from a Git provider this defaults to selecting them all\n  -f, --filter string      If selecting projects to delete from a Git provider this filters the list of repositories\n  -g, --git-host string    The Git server host if not using GitHub\n      --github             If you wish to pick the repositories from GitHub to import\n  -h, --help               help for repo\n  -n, --name stringArray   Specify the Git repository names to delete\n  -o, --org string         Specify the Git provider organisation that includes the repository to delete\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_team.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete team\"\nslug: jx_delete_team\nurl: /commands/jx_delete_team/\ndescription: list of jx commands\n---\n## jx delete team\n\nDeletes one or more teams and their associated resources (Environments, Jenkins etc)\n\n### Synopsis\n\nDeletes one or more teams and their associated resources (Environments, Jenkins etc)\n\n```\njx delete team [flags]\n```\n\n### Examples\n\n```\n  # Delete the named team\n  jx delete team cheese\n  \n  # Delete the teams matching the given filter\n  jx delete team -f foo\n```\n\n### Options\n\n```\n  -a, --all             Should we default to selecting all the matched teams for deletion\n  -f, --filter string   Filters the list of teams you can pick from\n  -h, --help            help for team\n  -y, --yes             Confirms we should uninstall this installation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete token\"\nslug: jx_delete_token\nurl: /commands/jx_delete_token/\ndescription: list of jx commands\n---\n## jx delete token\n\nDeletes one or more issue token resources\n\n### Synopsis\n\nDeletes one or more issue token resources\n\n```\njx delete token [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for token\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete token addon](/commands/jx_delete_token_addon/)\t - Deletes one or more API tokens for a user on an issue addon server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_token_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete token addon\"\nslug: jx_delete_token_addon\nurl: /commands/jx_delete_token_addon/\ndescription: list of jx commands\n---\n## jx delete token addon\n\nDeletes one or more API tokens for a user on an issue addon server\n\n### Synopsis\n\nDeletes one or more API tokens for your addon from your local settings\n\n```\njx delete token addon [flags]\n```\n\n### Examples\n\n```\n  # Deletes an addon user token\n  jx delete token addon -n anchore myusername\n```\n\n### Options\n\n```\n  -h, --help          help for addon\n  -k, --kind string   The kind of addon. Defaults to the addon name if not specified\n  -n, --name string   The name of the Git server to add a user\n  -u, --url string    The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete token](/commands/jx_delete_token/)\t - Deletes one or more issue token resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_tracker.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete tracker\"\nslug: jx_delete_tracker\nurl: /commands/jx_delete_tracker/\ndescription: list of jx commands\n---\n## jx delete tracker\n\nDeletes one or more issue tracker resources\n\n### Synopsis\n\nDeletes one or more issue tracker resources\n\n```\njx delete tracker [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for tracker\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n* [jx delete tracker server](/commands/jx_delete_tracker_server/)\t - Deletes one or more issue tracker server(s)\n* [jx delete tracker token](/commands/jx_delete_tracker_token/)\t - Deletes one or more API tokens for a user on an issue tracker server\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_tracker_server.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete tracker server\"\nslug: jx_delete_tracker_server\nurl: /commands/jx_delete_tracker_server/\ndescription: list of jx commands\n---\n## jx delete tracker server\n\nDeletes one or more issue tracker server(s)\n\n### Synopsis\n\nDeletes one or more issue tracker servers from your local settings\n\n```\njx delete tracker server [flags]\n```\n\n### Examples\n\n```\n  # Deletes an issue tracker server\n  jx delete tracker server MyProvider\n```\n\n### Options\n\n```\n  -h, --help             help for server\n  -i, --ignore-missing   Silently ignore attempts to remove an issue tracker server name that does not exist\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete tracker](/commands/jx_delete_tracker/)\t - Deletes one or more issue tracker resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_tracker_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete tracker token\"\nslug: jx_delete_tracker_token\nurl: /commands/jx_delete_tracker_token/\ndescription: list of jx commands\n---\n## jx delete tracker token\n\nDeletes one or more API tokens for a user on an issue tracker server\n\n### Synopsis\n\nDeletes one or more API tokens for your issue tracker from your local settings\n\n```\njx delete tracker token [flags]\n```\n\n### Examples\n\n```\n  # Deletes an issue tracker user token\n  jx delete tracker token -n jira myusername\n```\n\n### Options\n\n```\n  -h, --help          help for token\n  -n, --name string   The name of the Git server to add a user\n  -u, --url string    The URL of the Git server to add a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete tracker](/commands/jx_delete_tracker/)\t - Deletes one or more issue tracker resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_delete_user.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx delete user\"\nslug: jx_delete_user\nurl: /commands/jx_delete_user/\ndescription: list of jx commands\n---\n## jx delete user\n\nDeletes one or more users\n\n### Synopsis\n\nDeletes one or more users\n\n```\njx delete user [flags]\n```\n\n### Examples\n\n```\n  # Delete the user with the login of cheese\n  jx delete user cheese\n```\n\n### Options\n\n```\n  -a, --all             Should we default to selecting all the matched users for deletion\n  -f, --filter string   Filters the list of users you can pick from\n  -h, --help            help for user\n  -y, --yes             Confirms we should uninstall this installation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx delete](/commands/jx_delete/)\t - Deletes one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_diagnose.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx diagnose\"\nslug: jx_diagnose\nurl: /commands/jx_diagnose/\ndescription: list of jx commands\n---\n## jx diagnose\n\nPrint diagnostic information about the Jenkins X installation\n\n### Synopsis\n\nPrint diagnostic information about the Jenkins X installation\n\n```\njx diagnose ARG [flags]\n```\n\n### Examples\n\n```\n  # To print diagnostic information about pods in n1 namespace\n  jx diagnose pods -n n1\n  Supported arguments to diagnose are [ version status pvc pods ingresses secrets configmaps health]\n  \n  Deprecated usage:\n  # To print all information\n  jx diagnose\n  \n  #To print specific resource information\n  jx diagnose --show=pods --show=version\n```\n\n### Options\n\n```\n      --helm-tls           Whether to use TLS with helm\n  -h, --help               help for diagnose\n  -n, --namespace string   The namespace to display the kube resources from. If left out, defaults to the current namespace\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_docs.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx docs\"\nslug: jx_docs\nurl: /commands/jx_docs/\ndescription: list of jx commands\n---\n## jx docs\n\nOpen the documentation in a browser\n\n### Synopsis\n\nOpen the documentation in a browser\n\n```\njx docs [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for docs\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit\"\nslug: jx_edit\nurl: /commands/jx_edit/\ndescription: list of jx commands\n---\n## jx edit\n\nEdit a resource\n\n### Synopsis\n\nEdit a resource\n\n```\njx edit [flags]\n```\n\n### Examples\n\n```\n  # Lets edit the staging Environment\n  jx edit env staging\n```\n\n### Options\n\n```\n  -h, --help   help for edit\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx edit addon](/commands/jx_edit_addon/)\t - Edits the addon configuration\n* [jx edit app](/commands/jx_edit_app/)\t - Edits the Jenkins Plugins for a Jenkins App\n* [jx edit buildpack](/commands/jx_edit_buildpack/)\t - Edits the build pack configuration for your team\n* [jx edit config](/commands/jx_edit_config/)\t - Edits the project configuration\n* [jx edit deploy](/commands/jx_edit_deploy/)\t - Edits the deploy kind to use for your project or team\n* [jx edit dockerregistryorg](/commands/jx_edit_dockerregistryorg/)\t - Docker registry organisation used for new projects in Jenkins X.\n* [jx edit envOrganisation](/commands/jx_edit_envorganisation/)\t - Default git organisation for new environment repositories\n* [jx edit environment](/commands/jx_edit_environment/)\t - Edits an Environment which is used to promote your Team's Applications via Continuous Delivery\n* [jx edit gitpublic](/commands/jx_edit_gitpublic/)\t - Are new repositories public by default\n* [jx edit gitserver](/commands/jx_edit_gitserver/)\t - Default git server for new repositories\n* [jx edit helmbin](/commands/jx_edit_helmbin/)\t - Configures the helm binary version used by your team\n* [jx edit organisation](/commands/jx_edit_organisation/)\t - Default git organisation for new repositories\n* [jx edit pipelineuseremail](/commands/jx_edit_pipelineuseremail/)\t - Users email used by pipeline. Is given write permission on new repositories.\n* [jx edit pipelineusername](/commands/jx_edit_pipelineusername/)\t - User used by pipeline. Is given write permission on new repositories.\n* [jx edit requirements](/commands/jx_edit_requirements/)\t - Edits the local 'jx-requirements.yml file for 'jx boot'\n* [jx edit storage](/commands/jx_edit_storage/)\t - Configures the storage location for stashing files or storing build logs for your team\n* [jx edit userroles](/commands/jx_edit_userroles/)\t - Edits the roles associated with a User\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit addon\"\nslug: jx_edit_addon\nurl: /commands/jx_edit_addon/\ndescription: list of jx commands\n---\n## jx edit addon\n\nEdits the addon configuration\n\n### Synopsis\n\nEdits an addon\n\n```\njx edit addon [flags]\n```\n\n### Examples\n\n```\n  # Enables or disables an addon\n  jx edit addon\n  \n  # Enables or disables an addon\n  jx edit addon -e true gitea\n```\n\n### Options\n\n```\n  -e, --enabled string   Enables or disables the addon\n  -h, --help             help for addon\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_app.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit app\"\nslug: jx_edit_app\nurl: /commands/jx_edit_app/\ndescription: list of jx commands\n---\n## jx edit app\n\nEdits the Jenkins Plugins for a Jenkins App\n\n### Synopsis\n\nEdits a Jenkins App's plugins\n\n```\njx edit app jenkins plugins [flags]\n```\n\n### Examples\n\n```\n  # Edits the plugins for a Jenkins App\n  jx edit app jenkins plugins\n```\n\n### Options\n\n```\n  -e, --enabled string   Enables or disables the addon\n  -h, --help             help for app\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_buildpack.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit buildpack\"\nslug: jx_edit_buildpack\nurl: /commands/jx_edit_buildpack/\ndescription: list of jx commands\n---\n## jx edit buildpack\n\nEdits the build pack configuration for your team\n\n### Synopsis\n\n* * This command does not work on boot based clusters and has been disabled * * Edits the build pack configuration for your team\n\n```\njx edit buildpack [flags]\n```\n\n### Examples\n\n```\n  # Edit the build pack configuration for your team, picking the build pack you wish to use from the available\n  jx edit buildpack\n  \n  #\u00a0to switch to classic workloads for your team\n  jx edit buildpack -n classic-workloads\n  \n  #\u00a0to switch to kubernetes workloads for your team\n  jx edit buildpack -n kubernetes-workloads\n  \n  For more documentation see: [https://jenkins-x.io/architecture/build-packs/](https://jenkins-x.io/architecture/build-packs/)\n```\n\n### Options\n\n```\n  -h, --help          help for buildpack\n  -n, --name string   The name of the BuildPack resource to use\n  -r, --ref string    The Git reference (branch,tag,sha) in the Git repository to use\n  -u, --url string    The URL for the build pack Git repository\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_config.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit config\"\nslug: jx_edit_config\nurl: /commands/jx_edit_config/\ndescription: list of jx commands\n---\n## jx edit config\n\nEdits the project configuration\n\n### Synopsis\n\nEdits the project configuration\n\n```\njx edit config [flags]\n```\n\n### Examples\n\n```\n  # Edit the project configuration for the current directory\n  jx edit config\n```\n\n### Options\n\n```\n  -d, --dir string    The root project directory. Defaults to the current dir\n  -h, --help          help for config\n  -k, --kind string   The kind of configuration to edit root project directory. Possible values chat, issues, wiki\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_deploy.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit deploy\"\nslug: jx_edit_deploy\nurl: /commands/jx_edit_deploy/\ndescription: list of jx commands\n---\n## jx edit deploy\n\nEdits the deploy kind to use for your project or team\n\n### Synopsis\n\nEdits the deploy kind to use for your project or team\n\n```\njx edit deploy [flags]\n```\n\n### Examples\n\n```\n  # Edit the deploy kind for your current project and prompts you to pick one of the available kinds\n  jx edit deploy\n  \n  #\u00a0to switch to use Knative Serve deployments\n  jx edit deploy knative\n  \n  #\u00a0to switch to normal kubernetes deployments\n  jx edit deploy default\n  \n  #\u00a0to switch to use canary deployments (requires flagger and its dependencies)\n  jx edit deploy --canary\n  \n  #\u00a0to disable canary deployments and don't ask any more questions\n  jx edit deploy --canary=false -b\n  \n  #\u00a0to disable canary deployments and confirm if you want to change the deployment kind and HPA\n  jx edit deploy --canary=false\n  \n  # Edit the default deploy kind for your team and be prompted for answers\n  jx edit deploy --team\n  \n  # Set the default for your team to use knative and canary but no HPA\n  jx edit deploy --team knative --canary=true --hpa=false\n```\n\n### Options\n\n```\n      --canary        should we use canary rollouts (progressive delivery). e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n  -h, --help          help for deploy\n      --hpa           should we enable the Horizontal Pod Autoscaler.\n  -k, --kind string   The kind to use which should be one of: knative, default\n  -t, --team          Edits the team default\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_dockerregistryorg.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit dockerregistryorg\"\nslug: jx_edit_dockerregistryorg\nurl: /commands/jx_edit_dockerregistryorg/\ndescription: list of jx commands\n---\n## jx edit dockerregistryorg\n\nDocker registry organisation used for new projects in Jenkins X.\n\n### Synopsis\n\nDocker registry organisation used for new projects in Jenkins X.\n\n```\njx edit dockerregistryorg [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for dockerregistryorg\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_envOrganisation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit envOrganisation\"\nslug: jx_edit_envOrganisation\nurl: /commands/jx_edit_envorganisation/\ndescription: list of jx commands\n---\n## jx edit envOrganisation\n\nDefault git organisation for new environment repositories\n\n### Synopsis\n\nDefault git organisation for new environment repositories\n\n```\njx edit envOrganisation [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for envOrganisation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit environment\"\nslug: jx_edit_environment\nurl: /commands/jx_edit_environment/\ndescription: list of jx commands\n---\n## jx edit environment\n\nEdits an Environment which is used to promote your Team's Applications via Continuous Delivery\n\n### Synopsis\n\nEdits a new Environment \n\nAn Environment maps to a Kubernetes cluster and namespace and is a place that your team's applications can be promoted to via Continuous Delivery. \n\nYou can optionally use GitOps to manage the configuration of an Environment by storing all configuration in a Git repository and then only changing it via Pull Requests and CI/CD. \n\nFor more documentation on Environments see: https://jenkins-x.io/about/features/#environments\n\n```\njx edit environment [flags]\n```\n\n### Examples\n\n```\n  # Edit the stating Environment, prompting for the required data\n  jx edit env -n stating\n  \n  # Edit the prod Environment in batch mode (so not interactive)\n  jx edit env -b -n prod -l Production --no-gitops --namespace my-prod\n```\n\n### Options\n\n```\n      --branches string              The branch pattern for branches to trigger CI/CD pipelines on the environment Git repository\n  -c, --cluster string               The Kubernetes cluster for the Environment. If blank and a namespace is specified assumes the current cluster\n      --domain string                Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --env-job-credentials string   The Jenkins credentials used by the GitOps Job for this environment\n      --exposer string               Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n  -f, --fork-git-repo string         The Git repository used as the fork when creating new Environment Git repos (default \"https://github.com/jenkins-x/default-environment-charts.git\")\n      --git-api-token string         The Git API token to use for creating new Git repositories\n      --git-provider-kind string     Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string      The Git server URL to create new Git repositories inside\n      --git-public                   Create new Git repositories as public\n  -r, --git-ref string               The Git repo reference for the source code for GitOps based Environments\n  -g, --git-url string               The Git clone URL for the source code for GitOps based Environments\n      --git-username string          The Git username to use for creating new Git repositories\n  -h, --help                         help for environment\n      --ingress-class string         Used to set the ingress.class annotation in exposecontroller created ingress\n      --keep-exposecontroller-job    Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -l, --label string                 The Environment label which is a descriptive string like 'Production' or 'Staging'\n  -n, --name string                  The Environment resource name. Must follow the Kubernetes name conventions like Services, Namespaces\n  -s, --namespace string             The Kubernetes namespace for the Environment\n  -x, --no-gitops                    Disables the use of GitOps on the environment so that promotion is implemented by directly modifying the resources via Helm instead of using a Git repository\n  -o, --order int32                  The order weighting of the Environment so that they can be sorted by this order before name (default 100)\n      --prefix string                Environment repo prefix, your Git repo will be of the form 'environment-$prefix-$envName' (default \"jx\")\n  -p, --promotion string             The promotion strategy\n      --remote                       Indicates the Environment resides in a separate cluster to the development cluster. If this is true then we don't perform release piplines in this git repository but we use the Environment Controller inside that cluster: https://jenkins-x.io/getting-started/multi-cluster/\n      --urltemplate string           For ingress; exposers can set the urltemplate to expose\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_gitpublic.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit gitpublic\"\nslug: jx_edit_gitpublic\nurl: /commands/jx_edit_gitpublic/\ndescription: list of jx commands\n---\n## jx edit gitpublic\n\nAre new repositories public by default\n\n### Synopsis\n\nAre new repositories public by default\n\n```\njx edit gitpublic [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for gitpublic\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_gitserver.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit gitserver\"\nslug: jx_edit_gitserver\nurl: /commands/jx_edit_gitserver/\ndescription: list of jx commands\n---\n## jx edit gitserver\n\nDefault git server for new repositories\n\n### Synopsis\n\nDefault git server for new repositories\n\n```\njx edit gitserver [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for gitserver\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_helmbin.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit helmbin\"\nslug: jx_edit_helmbin\nurl: /commands/jx_edit_helmbin/\ndescription: list of jx commands\n---\n## jx edit helmbin\n\nConfigures the helm binary version used by your team\n\n### Synopsis\n\nConfigures the helm binary version used by your team \n\nThis lets you switch between helm and helm3\n\n```\njx edit helmbin [flags]\n```\n\n### Examples\n\n```\n  # To switch your team to helm3 use:\n  jx edit helmbin helm3\n  \n  # To switch back to 2.x use:\n  jx edit helmbin helm\n```\n\n### Options\n\n```\n  -h, --help   help for helmbin\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_organisation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit organisation\"\nslug: jx_edit_organisation\nurl: /commands/jx_edit_organisation/\ndescription: list of jx commands\n---\n## jx edit organisation\n\nDefault git organisation for new repositories\n\n### Synopsis\n\nDefault git organisation for new repositories\n\n```\njx edit organisation [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for organisation\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_pipelineuseremail.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit pipelineuseremail\"\nslug: jx_edit_pipelineuseremail\nurl: /commands/jx_edit_pipelineuseremail/\ndescription: list of jx commands\n---\n## jx edit pipelineuseremail\n\nUsers email used by pipeline. Is given write permission on new repositories.\n\n### Synopsis\n\nUsers email used by pipeline. Is given write permission on new repositories.\n\n```\njx edit pipelineuseremail [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for pipelineuseremail\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_pipelineusername.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit pipelineusername\"\nslug: jx_edit_pipelineusername\nurl: /commands/jx_edit_pipelineusername/\ndescription: list of jx commands\n---\n## jx edit pipelineusername\n\nUser used by pipeline. Is given write permission on new repositories.\n\n### Synopsis\n\nUser used by pipeline. Is given write permission on new repositories.\n\n```\njx edit pipelineusername [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for pipelineusername\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_requirements.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit requirements\"\nslug: jx_edit_requirements\nurl: /commands/jx_edit_requirements/\ndescription: list of jx commands\n---\n## jx edit requirements\n\nEdits the local 'jx-requirements.yml file for 'jx boot'\n\n### Synopsis\n\nEdits the local 'jx-requirements.yml file for 'jx boot'\n\n```\njx edit requirements [flags]\n```\n\n### Examples\n\n```\n  # edits the local 'jx-requirements.yml' file used for 'jx boot'\n  jx edit requirements --domain foo.com --tls --provider eks\n```\n\n### Options\n\n```\n      --autoupdate-schedule string   the cron schedule for auto upgrading your cluster\n      --autoupgrade                  enables or disables auto upgrades\n      --boot-config-url string       specify the boot configuration git URL\n      --bucket-backups string        the bucket URL to store backups\n      --bucket-logs string           the bucket URL to store logs\n      --bucket-repo string           the bucket URL to store repository artifacts\n      --bucket-reports string        the bucket URL to store reports. If not specified default to te logs bucket\n  -c, --cluster string               configures the cluster name\n      --dir string                   the directory to search for the 'jx-requirements.yml' file (default \".\")\n  -d, --domain string                configures the domain name\n      --env-git-owner string         the git owner (organisation or user) used to own the git repositories for the environments\n      --env-git-public               enables or disables whether the environment repositories should be public\n      --extdns-sa string             configures the External DNS service account name\n      --git-kind string              the kind of git repository to use. Possible values: bitbucketcloud, bitbucketserver, gitea, github, gitlab\n      --git-name string              the name of the git repository\n      --git-server string            the git server host such as https://github.com or https://gitlab.com\n  -g, --gitops                       enables or disables the use of gitops\n      --helm-version string          configures the Helm major version. e.g. 3 to try helm 3\n  -h, --help                         help for requirements\n      --kaniko                       enables or disables the use of kaniko\n      --kaniko-sa string             configures the Kaniko service account name\n  -n, --namespace string             configures the namespace to use\n      --project string               configures the Google Project ID\n  -p, --provider string              configures the kubernetes provider\n  -r, --region string                configures the cloud region\n      --registry string              configures the host name of the container registry\n  -s, --secret string                configures the kind of secret storage. Values: local, vault\n      --terraform                    enables or disables the use of terraform\n      --tls-email string             the TLS email address to enable TLS on the domain\n      --vault-bucket string          specify the vault bucket\n      --vault-disable-url-discover   override the default lookup of the Vault URL, could be incluster service or external ingress\n      --vault-key string             specify the vault key\n      --vault-keyring string         specify the vault key ring\n      --vault-name string            specify the vault name\n      --vault-recreate-bucket        enables or disables whether to rereate the secret bucket on boot\n      --vault-sa string              specify the vault Service Account name\n      --velero-ns string             specify the Velero Namespace\n      --velero-sa string             specify the Velero Service Account name\n      --version-stream-ref string    specify the Version Stream git reference (branch, tag, sha)\n      --version-stream-url string    specify the Version Stream git URL\n  -w, --webhook string               configures the kind of webhook. Values jenkins, lighthouse, prow\n  -z, --zone string                  configures the cloud zone\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_storage.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit storage\"\nslug: jx_edit_storage\nurl: /commands/jx_edit_storage/\ndescription: list of jx commands\n---\n## jx edit storage\n\nConfigures the storage location for stashing files or storing build logs for your team\n\n### Synopsis\n\nConfigures the storage location used by your team to stashing files or storing build logs.\n  \n      If you don't specify any specific storage for a classifier it will try the classifier 'default'. If there is still no configuration then it will default to the git repository for a project.'\n  \nCurrently Jenkins X supports storing files into a branch of a git repository or in cloud blob storage like S3, GCS, Azure blobs etc. \n\nWhen using Cloud Storage we use URLs like 's3://nameOfBucket' on AWS, 'gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket' \n\nSee Also: \n\n  * jx step stash : https://jenkins-x.io/commands/jx_step_stash  \n  * jx get storage : https://jenkins-x.io/commands/jx_get_storage\n\n```\njx edit storage [flags]\n```\n\n### Examples\n\n```\n  # Be prompted what classification to edit\n  jx edit storage\n  \n  # Configure the where to store logs prompting the user to ask for more data\n  jx edit storage -c logs\n  \n  \n  # Configure the git URL of where to store logs (defaults to gh-pages branch)\n  jx edit storage -c logs --git-url https://github.com/myorg/mylogs.git'\n  \n  # Configure the git URL and branch of where to store logs\n  jx edit storage -c logs --git-url https://github.com/myorg/mylogs.git' --git-branch cheese\n  \n  # Configure the git URL of where all storage goes to by default unless a specific classifier has a config\n  jx edit storage -c default --git-url https://github.com/myorg/mylogs.git'\n  \n  \n  # Configure the tests to be stored in cloud storage (using S3 / GCS / Azure Blobs etc)\n  jx edit storage -c tests --bucket-url s3://myExistingBucketName\n  \n  # Creates a new GCS bucket and configures the logs to be stored in it\n  jx edit storage -c logs --bucket myBucketName\n```\n\n### Options\n\n```\n      --bucket string           Specify the name of the bucket to use\n      --bucket-kind string      The kind of bucket to use like 'gs, s3, azure' etc\n      --bucket-url string       Specify the cloud storage bucket URL to send each file to. e.g. use 's3://nameOfBucket' on AWS, gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket'\n  -c, --classifier string       A name which classifies this type of file. Example values: coverage, tests, logs, reports\n      --git-branch string       The branch to use to store files in the git repository (default \"gh-pages\")\n      --git-url string          Specify the Git URL to of the repository to use for storage\n      --gke-project-id string   Google Project ID to use for a new bucket\n      --gke-zone string         The GKE zone (e.g. us-central1-a) where the new bucket will be created\n  -h, --help                    help for storage\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_edit_userroles.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx edit userroles\"\nslug: jx_edit_userroles\nurl: /commands/jx_edit_userroles/\ndescription: list of jx commands\n---\n## jx edit userroles\n\nEdits the roles associated with a User\n\n### Synopsis\n\nEdits the Roles associated with a User\n\n```\njx edit userroles [flags]\n```\n\n### Examples\n\n```\n  # Prompt the CLI to pick a User from the list then select which Roles to update for the user\n  jx edit userrole\n  \n  \n  # Update a user to a given set of roles\n  jx edit userrole --l mylogin -r foo -r bar\n  \"\n```\n\n### Options\n\n```\n  -h, --help               help for userroles\n  -l, --login string       The user login name\n  -r, --role stringArray   The roles to set on a user\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx edit](/commands/jx_edit/)\t - Edit a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_environment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx environment\"\nslug: jx_environment\nurl: /commands/jx_environment/\ndescription: list of jx commands\n---\n## jx environment\n\nView or change the current environment in the current Kubernetes cluster\n\n### Synopsis\n\nDisplays or changes the current environment. \n\nFor more documentation on Environments see: https://jenkins-x.io/about/features/#environments\n\n```\njx environment [flags]\n```\n\n### Examples\n\n```\n  # view the current environment\n  jx env -b\n  \n  # pick which environment to switch to\n  jx env\n  \n  # Change the current environment to 'staging'\n  jx env staging\n```\n\n### Options\n\n```\n  -h, --help   help for environment\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc\"\nslug: jx_gc\nurl: /commands/jx_gc/\ndescription: list of jx commands\n---\n## jx gc\n\nGarbage collects Jenkins X resources\n\n### Synopsis\n\nGarbage collect resources\n  \n  Valid resource types include:\n  \n  * activities  \n  * helm  \n  * previews  \n  * releases\n\n```\njx gc TYPE [flags]\n```\n\n### Examples\n\n```\n  jx gc activities\n  jx gc gke\n  jx gc helm\n  jx gc previews\n  jx gc releases\n```\n\n### Options\n\n```\n  -h, --help   help for gc\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx gc activities](/commands/jx_gc_activities/)\t - garbage collection for PipelineActivities and PipelineRun resources\n* [jx gc gke](/commands/jx_gc_gke/)\t - garbage collection for gke\n* [jx gc helm](/commands/jx_gc_helm/)\t - garbage collection for Helm ConfigMaps\n* [jx gc pods](/commands/jx_gc_pods/)\t - garbage collection for pods\n* [jx gc previews](/commands/jx_gc_previews/)\t - garbage collection for preview environments\n* [jx gc releases](/commands/jx_gc_releases/)\t - garbage collection for Releases\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_activities.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc activities\"\nslug: jx_gc_activities\nurl: /commands/jx_gc_activities/\ndescription: list of jx commands\n---\n## jx gc activities\n\ngarbage collection for PipelineActivities and PipelineRun resources\n\n### Synopsis\n\nGarbage collect the Jenkins X PipelineActivity and PipelineRun resources\n\n```\njx gc activities [flags]\n```\n\n### Examples\n\n```\n  #\u00a0garbage collect PipelineActivity and PipelineRun resources\n  jx gc activities\n  \n  #\u00a0dry run mode\n  jx gc pa --dry-run\n```\n\n### Options\n\n```\n  -d, --dry-run                     Dry run mode. If enabled just list the resources that would be removed\n  -h, --help                        help for activities\n      --pipelinerun-age duration    Maximum age to keep completed PipelineRuns for all pipelines (default 12h0m0s)\n      --pr-history-limit int        Minimum number of PipelineActivities to keep around per repository Pull Request (default 2)\n      --prowjob-age duration        Maximum age to keep completed ProwJobs for all pipelines (default 168h0m0s)\n  -p, --pull-request-age duration   Maximum age to keep PipelineActivities for Pull Requests (default 48h0m0s)\n  -r, --release-age duration        Maximum age to keep PipelineActivities for Releases (default 720h0m0s)\n  -l, --release-history-limit int   Maximum number of PipelineActivities to keep around per repository release (default 5)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_gke.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc gke\"\nslug: jx_gc_gke\nurl: /commands/jx_gc_gke/\ndescription: list of jx commands\n---\n## jx gc gke\n\ngarbage collection for gke\n\n### Synopsis\n\nGarbage collect Google Container Engine resources that are not deleted when a delete cluster is performed \n\nThis command will generate the gcloud command to run and delete external loadbalancers and persistent disks that are no longer in use.\n\n```\njx gc gke [flags]\n```\n\n### Examples\n\n```\n  jx garbage collect gke\n  jx gc gke\n```\n\n### Options\n\n```\n  -h, --help             help for gke\n  -p, --project string   The google project id to create the GC script for\n      --run-now          Execute the script\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_helm.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc helm\"\nslug: jx_gc_helm\nurl: /commands/jx_gc_helm/\ndescription: list of jx commands\n---\n## jx gc helm\n\ngarbage collection for Helm ConfigMaps\n\n### Synopsis\n\nGarbage collect Helm ConfigMaps.  To facilitate rollbacks, Helm leaves a history of chart versions in place in Kubernetes and these should be pruned at intervals to avoid consuming excessive system resources.\n\n```\njx gc helm [flags]\n```\n\n### Examples\n\n```\n  jx garbage collect helm\n  jx gc helm\n```\n\n### Options\n\n```\n      --dry-run                      Does not perform the delete operation on Kubernetes\n  -h, --help                         help for helm\n      --no-backup                    Does not perform the backup operation to store files locally\n  -o, --output-dir string            Relative directory to output backup to. Defaults to ./configmaps (default \"configmaps\")\n      --revision-history-limit int   Minimum number of versions per release to keep (default 10)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_pods.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc pods\"\nslug: jx_gc_pods\nurl: /commands/jx_gc_pods/\ndescription: list of jx commands\n---\n## jx gc pods\n\ngarbage collection for pods\n\n### Synopsis\n\nGarbage collect old Pods that have completed or failed\n\n```\njx gc pods [flags]\n```\n\n### Examples\n\n```\n  # garbage collect old pods of the default age\n  jx gc pods\n  \n  # garbage collect pods older than 10 minutes\n  jx gc pods -a 10m\n```\n\n### Options\n\n```\n  -a, --age duration       The minimum age of pods to garbage collect. Any newer pods will be kept (default 1h0m0s)\n  -h, --help               help for pods\n  -n, --namespace string   The namespace to look for the pods. Defaults to the current namespace\n  -s, --selector string    The selector to use to filter the pods\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_previews.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc previews\"\nslug: jx_gc_previews\nurl: /commands/jx_gc_previews/\ndescription: list of jx commands\n---\n## jx gc previews\n\ngarbage collection for preview environments\n\n### Synopsis\n\nGarbage collect Jenkins X preview environments.  If a pull request is merged or closed the associated preview environment will be deleted.\n\n```\njx gc previews [flags]\n```\n\n### Examples\n\n```\n  jx garbage collect previews\n  jx gc previews\n```\n\n### Options\n\n```\n  -h, --help   help for previews\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_gc_releases.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx gc releases\"\nslug: jx_gc_releases\nurl: /commands/jx_gc_releases/\ndescription: list of jx commands\n---\n## jx gc releases\n\ngarbage collection for Releases\n\n### Synopsis\n\nGarbage collect the Jenkins X Activity Custom Resource Definitions\n\n```\njx gc releases [flags]\n```\n\n### Examples\n\n```\n  jx garbage collect releases\n  jx gc releases\n```\n\n### Options\n\n```\n  -h, --help                         help for releases\n  -l, --revision-history-limit int   Minimum number of Releases per application to keep (default 5)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx gc](/commands/jx_gc/)\t - Garbage collects Jenkins X resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get\"\nslug: jx_get\nurl: /commands/jx_get/\ndescription: list of jx commands\n---\n## jx get\n\nDisplay one or more resources\n\n### Synopsis\n\nDisplay one or more resources. \n\nValid resource types include: \n\n  * environments (aka 'env')  \n  * pipelines (aka 'pipe')  \n  * urls (aka 'url')\n\n```\njx get TYPE [flags]\n```\n\n### Examples\n\n```\n  # List all pipelines\n  jx get pipeline\n  \n  # List all URLs for services in the current namespace\n  jx get url\n```\n\n### Options\n\n```\n  -h, --help   help for get\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx get activities](/commands/jx_get_activities/)\t - Display one or more Activities on projects\n* [jx get addons](/commands/jx_get_addons/)\t - Lists the addons\n* [jx get applications](/commands/jx_get_applications/)\t - Display one or more Applications and their versions\n* [jx get apps](/commands/jx_get_apps/)\t - Display one or more installed Apps (an app is similar to an addon)\n* [jx get branchpattern](/commands/jx_get_branchpattern/)\t - Display the git branch patterns for the current Team used on creating and importing projects\n* [jx get build](/commands/jx_get_build/)\t - Display one or more build resources\n* [jx get buildpack](/commands/jx_get_buildpack/)\t - Display the teams build pack Git repository and references used for the current Team used on creating and importing projects\n* [jx get chat](/commands/jx_get_chat/)\t - Display the current registered chat service URLs\n* [jx get config](/commands/jx_get_config/)\t - Display the project configuration\n* [jx get crd](/commands/jx_get_crd/)\t - Display resources count for all custom resources\n* [jx get cve](/commands/jx_get_cve/)\t - Display Common Vulnerabilities and Exposures (CVEs)\n* [jx get devpod](/commands/jx_get_devpod/)\t - Lists the DevPods\n* [jx get environments](/commands/jx_get_environments/)\t - Display one or more Environments\n* [jx get git](/commands/jx_get_git/)\t - Display the current registered Git service URLs\n* [jx get helmbin](/commands/jx_get_helmbin/)\t - Display the Helm binary name used in the pipelines\n* [jx get issue](/commands/jx_get_issue/)\t - Display the status of an issue\n* [jx get issues](/commands/jx_get_issues/)\t - Display one or more issues\n* [jx get lang](/commands/jx_get_lang/)\t - Display the pack of the current working directory\n* [jx get limits](/commands/jx_get_limits/)\t - Displays the git user limits\n* [jx get pipelines](/commands/jx_get_pipelines/)\t - Display one or more Pipelines\n* [jx get plugins](/commands/jx_get_plugins/)\t - List all visible plugin executables on a user's PATH\n* [jx get previews](/commands/jx_get_previews/)\t - Display one or more Preview Environments\n* [jx get quickstartlocation](/commands/jx_get_quickstartlocation/)\t - Display one or more Quickstart Locations\n* [jx get quickstarts](/commands/jx_get_quickstarts/)\t - Lists the available quickstarts\n* [jx get releases](/commands/jx_get_releases/)\t - Display the Release or Releases the current user is a member of\n* [jx get storage](/commands/jx_get_storage/)\t - Display the storage configuration for different classifications\n* [jx get stream](/commands/jx_get_stream/)\t - Displays the version of a chart, package or docker image from the Version Stream\n* [jx get teamroles](/commands/jx_get_teamroles/)\t - Display the Team or Teams the current user is a member of\n* [jx get teams](/commands/jx_get_teams/)\t - Display the Team or Teams the current user is a member of\n* [jx get token](/commands/jx_get_token/)\t - Display the tokens for different kinds of services\n* [jx get tracker](/commands/jx_get_tracker/)\t - Display the current registered issue tracker service URLs\n* [jx get urls](/commands/jx_get_urls/)\t - Display one or more URLs\n* [jx get users](/commands/jx_get_users/)\t - Display the User or Users the current user is a member of\n* [jx get vault](/commands/jx_get_vault/)\t - Display one or more Vaults\n* [jx get vault-config](/commands/jx_get_vault-config/)\t - Gets the configuration for using the Vault CLI\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_activities.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get activities\"\nslug: jx_get_activities\nurl: /commands/jx_get_activities/\ndescription: list of jx commands\n---\n## jx get activities\n\nDisplay one or more Activities on projects\n\n### Synopsis\n\nDisplay the current activities for one or more projects.\n\n```\njx get activities [flags]\n```\n\n### Examples\n\n```\n  # List the current activities for all applications in the current team\n  jx get activities\n  \n  # List the current activities for application 'foo'\n  jx get act -f foo\n  \n  # Watch the activities for application 'foo'\n  jx get act -f foo -w\n```\n\n### Options\n\n```\n      --build string    The build number to filter on\n  -f, --filter string   Text to filter the pipeline names\n  -h, --help            help for activities\n  -s, --sort            Sort activities by timestamp\n  -w, --watch           Whether to watch the activities for changes\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_addons.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get addons\"\nslug: jx_get_addons\nurl: /commands/jx_get_addons/\ndescription: list of jx commands\n---\n## jx get addons\n\nLists the addons\n\n### Synopsis\n\nDisplay the available addons\n\n```\njx get addons [flags]\n```\n\n### Examples\n\n```\n  # List all the possible addons\n  jx get addon\n```\n\n### Options\n\n```\n  -h, --help   help for addons\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_applications.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get applications\"\nslug: jx_get_applications\nurl: /commands/jx_get_applications/\ndescription: list of jx commands\n---\n## jx get applications\n\nDisplay one or more Applications and their versions\n\n### Synopsis\n\nDisplay applications across environments.\n\n```\njx get applications [flags]\n```\n\n### Examples\n\n```\n  # List applications, their URL and pod counts for all environments\n  jx get applications\n  \n  # List applications only in the Staging environment\n  jx get applications -e staging\n  \n  # List applications only in the Production environment\n  jx get applications -e production\n  \n  # List applications only in a specific namespace\n  jx get applications -n jx-staging\n  \n  # List applications hiding the URLs\n  jx get applications -u\n  \n  # List applications just showing the versions (hiding urls and pod counts)\n  jx get applications -u -p\n```\n\n### Options\n\n```\n  -e, --env string         Filter applications in the given environment\n  -h, --help               help for applications\n  -n, --namespace string   Filter applications in the given namespace\n  -p, --pod                Hide the pod counts\n  -w, --preview            Show preview environments only\n  -u, --url                Hide the URLs\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_apps.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get apps\"\nslug: jx_get_apps\nurl: /commands/jx_get_apps/\ndescription: list of jx commands\n---\n## jx get apps\n\nDisplay one or more installed Apps (an app is similar to an addon)\n\n### Synopsis\n\nDisplay installed Apps (an app is similar to an addon)\n\n```\njx get apps [flags]\n```\n\n### Examples\n\n```\n  # List all apps\n  jx get apps\n  \n  # Display details about the app called cheese\n  jx get app cheese\n  \n  # Display detailed status info about the app called cheese\n  jx get app cheese --status\n  \n  # Display detailed status info about the app called cheese in 'json' format\n  jx get app cheese --status -o json\n  \n  # Display details about the app called cheese in 'yaml' format\n  jx get app cheese -o yaml\n```\n\n### Options\n\n```\n  -h, --help               help for apps\n  -n, --namespace string   The namespace where you want to search the apps in\n  -o, --output string      The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_branchpattern.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get branchpattern\"\nslug: jx_get_branchpattern\nurl: /commands/jx_get_branchpattern/\ndescription: list of jx commands\n---\n## jx get branchpattern\n\nDisplay the git branch patterns for the current Team used on creating and importing projects\n\n### Synopsis\n\nDisplay the git branch patterns for the current Team used on creating and importing projects \n\nFor more documentation see: https://jenkins-x.io/docs/using-jx/creating/import/#branch-patterns\n\n```\njx get branchpattern [flags]\n```\n\n### Examples\n\n```\n  # List the git branch patterns for the current team\n  jx get branchpattern\n```\n\n### Options\n\n```\n  -h, --help            help for branchpattern\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_build.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get build\"\nslug: jx_get_build\nurl: /commands/jx_get_build/\ndescription: list of jx commands\n---\n## jx get build\n\nDisplay one or more build resources\n\n### Synopsis\n\nDisplay one or more resources. \n\nValid resource types include: \n\n  * environments (aka 'env')  \n  * pipelines (aka 'pipe')  \n  * urls (aka 'url')\n\n```\njx get build [flags]\n```\n\n### Examples\n\n```\n  # List all pipelines\n  jx get pipeline\n  \n  # List all URLs for services in the current namespace\n  jx get url\n```\n\n### Options\n\n```\n  -h, --help   help for build\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n* [jx get build log](/commands/jx_get_build_log/)\t - Display a build log\n* [jx get build pods](/commands/jx_get_build_pods/)\t - Displays the build pods and their details\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_build_log.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get build log\"\nslug: jx_get_build_log\nurl: /commands/jx_get_build_log/\ndescription: list of jx commands\n---\n## jx get build log\n\nDisplay a build log\n\n### Synopsis\n\nDisplay a build log\n\n```\njx get build log [flags]\n```\n\n### Examples\n\n```\n  # Display a build log - with the user choosing which repo + build to view\n  jx get build log\n  \n  # Pick a build to view the log based on the repo cheese\n  jx get build log --repo cheese\n  \n  # Pick a pending Tekton build to view the log based\n  jx get build log -p\n  \n  # Pick a pending Tekton build to view the log based on the repo cheese\n  jx get build log --repo cheese -p\n  \n  # Pick a Tekton build for the 1234 Pull Request on the repo cheese\n  jx get build log --repo cheese --branch PR-1234\n  \n  # View the build logs for a specific tekton build pod\n  jx get build log --pod my-pod-name\n```\n\n### Options\n\n```\n      --branch string            Filters the branch\n      --build string             The build number to view\n      --context string           Filters the context of the build\n  -c, --current                  Display logs using current folder as repo name, and parent folder as owner\n      --fail-with-pod            Return an error if the pod fails\n  -f, --filter string            Filters all the available jobs by those that contain the given text\n  -g, --giturl string            The git URL to filter on. If you specify a link to a github repository or PR we can filter the query of build pods accordingly\n  -h, --help                     help for log\n  -o, --owner string             Filters the owner (person/organisation) of the repository\n  -p, --pending                  Only display logs which are currently pending to choose from if no build name is supplied\n      --pod string               The pod name to view\n  -r, --repo string              Filters the build repository\n  -t, --tail                     Tails the build log to the current terminal (default true)\n  -w, --wait                     Waits for the build to start before failing\n  -d, --wait-duration duration   Timeout period waiting for the given pipeline to be created (default 5m0s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get build](/commands/jx_get_build/)\t - Display one or more build resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_build_pods.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get build pods\"\nslug: jx_get_build_pods\nurl: /commands/jx_get_build_pods/\ndescription: list of jx commands\n---\n## jx get build pods\n\nDisplays the build pods and their details\n\n### Synopsis\n\nDisplay the Tekton build pods\n\n```\njx get build pods [flags]\n```\n\n### Examples\n\n```\n  # List all the Tekton build pods\n  jx get build pods\n  \n  # List all the pending Tekton build pods\n  jx get build pods -p\n  \n  # List all the Tekton build pods for a given repository\n  jx get build pods --repo cheese\n  \n  # List all the pending Tekton build pods for a given repository\n  jx get build pods --repo cheese -p\n  \n  # List all the Tekton build pods for a given Pull Request\n  jx get build pods --repo cheese --branch PR-1234\n```\n\n### Options\n\n```\n      --branch string      Filters the branch\n      --build string       Filter a specific build number\n      --context string     Filters the context of the build\n  -f, --filter string      Filters the build name by the given text\n  -g, --giturl string      The git URL to filter on. If you specify a link to a github repository or PR we can filter the query of build pods accordingly\n  -h, --help               help for pods\n  -n, --namespace string   The namespace to look for the build pods. Defaults to the current namespace\n  -o, --owner string       Filters the owner (person/organisation) of the repository\n  -p, --pending            Filter builds which are currently pending or running\n  -r, --repo string        Filters the build repository\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get build](/commands/jx_get_build/)\t - Display one or more build resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_buildpack.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get buildpack\"\nslug: jx_get_buildpack\nurl: /commands/jx_get_buildpack/\ndescription: list of jx commands\n---\n## jx get buildpack\n\nDisplay the teams build pack Git repository and references used for the current Team used on creating and importing projects\n\n### Synopsis\n\nDisplay the teams build pack Git repository and references used when creating and importing projects \n\nFor more documentation see: https://jenkins-x.io/architecture/build-packs/\n\n```\njx get buildpack [flags]\n```\n\n### Examples\n\n```\n  # List the build pack for the current team\n  jx get buildpack\n  \n  # List all the available build packs you can pick from\n  jx get bp -a\n```\n\n### Options\n\n```\n  -a, --all             View all available Build Packs\n  -h, --help            help for buildpack\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_chat.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get chat\"\nslug: jx_get_chat\nurl: /commands/jx_get_chat/\ndescription: list of jx commands\n---\n## jx get chat\n\nDisplay the current registered chat service URLs\n\n### Synopsis\n\nDisplay the chat server URLs.\n\n```\njx get chat [flags]\n```\n\n### Examples\n\n```\n  # List all registered chat server URLs\n  jx get chat\n```\n\n### Options\n\n```\n  -h, --help          help for chat\n  -k, --kind string   Filters the chats by the kinds: slack, irc\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_config.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get config\"\nslug: jx_get_config\nurl: /commands/jx_get_config/\ndescription: list of jx commands\n---\n## jx get config\n\nDisplay the project configuration\n\n### Synopsis\n\nDisplay the project configuration\n\n```\njx get config [flags]\n```\n\n### Examples\n\n```\n  # View the project configuration\n  jx get config\n```\n\n### Options\n\n```\n  -d, --dir string   The root project directory\n  -h, --help         help for config\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_crd.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get crd\"\nslug: jx_get_crd\nurl: /commands/jx_get_crd/\ndescription: list of jx commands\n---\n## jx get crd\n\nDisplay resources count for all custom resources\n\n### Synopsis\n\nCount the number of resources for all custom resources definitions\n\n```\njx get crd count [flags]\n```\n\n### Examples\n\n```\n  # Count the number of resources for all custom resources definitions\n  jx get crd count\n```\n\n### Options\n\n```\n  -h, --help   help for crd\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_cve.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get cve\"\nslug: jx_get_cve\nurl: /commands/jx_get_cve/\ndescription: list of jx commands\n---\n## jx get cve\n\nDisplay Common Vulnerabilities and Exposures (CVEs)\n\n### Synopsis\n\nDisplay Common Vulnerabilities and Exposures (CVEs)\n\n```\njx get cve [flags]\n```\n\n### Examples\n\n```\n  # List all Common Vulnerabilities and Exposures (CVEs)\n  \n  jx get cve # using current dir as the context for app name\n  jx get cve --app foo\n  jx get cve --app foo --version 1.0.0\n  jx get cve --app foo --environment staging\n  jx get cve --environment staging\n```\n\n### Options\n\n```\n  -e, --environment string   The Environment to find running applications\n  -h, --help                 help for cve\n      --image-id string      Image ID in CVE engine if already known\n      --image-name string    Full image name e.g. jenkinsxio/nexus \n      --version string       Version or tag e.g. 0.0.1\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_devpod.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get devpod\"\nslug: jx_get_devpod\nurl: /commands/jx_get_devpod/\ndescription: list of jx commands\n---\n## jx get devpod\n\nLists the DevPods\n\n### Synopsis\n\nDisplay the available DevPods \n\nFor more documentation see: https://jenkins-x.io/developing/devpods/\n\n```\njx get devpod [flags]\n```\n\n### Examples\n\n```\n  # List all the possible DevPods\n  jx get devPod\n```\n\n### Options\n\n```\n      --all-usernames     Gets devpods for all usernames\n  -h, --help              help for devpod\n      --username string   The username to create the DevPod. If not specified defaults to the current operating system user or $USER'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_environments.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get environments\"\nslug: jx_get_environments\nurl: /commands/jx_get_environments/\ndescription: list of jx commands\n---\n## jx get environments\n\nDisplay one or more Environments\n\n### Synopsis\n\nDisplay one or more environments.\n  \nSee Also: \n\n  * jx get previews : https://jenkins-x.io/commands/jx_get_previews\n\n```\njx get environments [flags]\n```\n\n### Examples\n\n```\n  # List all environments\n  jx get environments\n  \n  # List all environments using the shorter alias\n  jx get env\n```\n\n### Options\n\n```\n  -h, --help             help for environments\n  -o, --output string    The output format such as 'yaml'\n  -p, --promote string   Filters the environments by promotion strategy. Possible values: Auto, Manual, Never\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_git.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get git\"\nslug: jx_get_git\nurl: /commands/jx_get_git/\ndescription: list of jx commands\n---\n## jx get git\n\nDisplay the current registered Git service URLs\n\n### Synopsis\n\nDisplay the Git server URLs.\n\n```\njx get git [flags]\n```\n\n### Examples\n\n```\n  # List all registered Git server URLs\n  jx get git\n```\n\n### Options\n\n```\n  -h, --help   help for git\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_helmbin.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get helmbin\"\nslug: jx_get_helmbin\nurl: /commands/jx_get_helmbin/\ndescription: list of jx commands\n---\n## jx get helmbin\n\nDisplay the Helm binary name used in the pipelines\n\n### Synopsis\n\nDisplay the Helm binary name used in pipelines. \n\nThis setting lets you switch from the stable release to early access releases (e.g. from Helm 2 <-> 3)\n\n```\njx get helmbin [flags]\n```\n\n### Examples\n\n```\n  # List the git branch patterns for the current team\n  jx get helmbin\n```\n\n### Options\n\n```\n  -h, --help            help for helmbin\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_issue.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get issue\"\nslug: jx_get_issue\nurl: /commands/jx_get_issue/\ndescription: list of jx commands\n---\n## jx get issue\n\nDisplay the status of an issue\n\n### Synopsis\n\nDisplay the status of an issue for a project.\n\n```\njx get issue [flags]\n```\n\n### Examples\n\n```\n  # Get the status of an issue for a project\n  jx get issue --id ISSUE_ID\n```\n\n### Options\n\n```\n  -d, --dir string      The root project directory\n  -h, --help            help for issue\n  -i, --id string       The issue ID\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_issues.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get issues\"\nslug: jx_get_issues\nurl: /commands/jx_get_issues/\ndescription: list of jx commands\n---\n## jx get issues\n\nDisplay one or more issues\n\n### Synopsis\n\nDisplay one or more issues for a project.\n\n```\njx get issues [flags]\n```\n\n### Examples\n\n```\n  # List open issues on the current project\n  jx get issues\n```\n\n### Options\n\n```\n  -d, --dir string      The root project directory\n      --filter string   The filter to use (default \"open\")\n  -h, --help            help for issues\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_lang.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get lang\"\nslug: jx_get_lang\nurl: /commands/jx_get_lang/\ndescription: list of jx commands\n---\n## jx get lang\n\nDisplay the pack of the current working directory\n\n### Synopsis\n\nDisplay the pack of the current directory\n\n```\njx get lang [flags]\n```\n\n### Examples\n\n```\n  # Print the lang\n  jx get lang\n```\n\n### Options\n\n```\n  -h, --help            help for lang\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_limits.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get limits\"\nslug: jx_get_limits\nurl: /commands/jx_get_limits/\ndescription: list of jx commands\n---\n## jx get limits\n\nDisplays the git user limits\n\n### Synopsis\n\nDisplay the github limits for users\n\n```\njx get limits [flags]\n```\n\n### Examples\n\n```\n  # List all git users with limits\n  jx get limits\n```\n\n### Options\n\n```\n  -h, --help   help for limits\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_pipelines.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get pipelines\"\nslug: jx_get_pipelines\nurl: /commands/jx_get_pipelines/\ndescription: list of jx commands\n---\n## jx get pipelines\n\nDisplay one or more Pipelines\n\n### Synopsis\n\nDisplay one or more pipelines.\n\n```\njx get pipelines [flags]\n```\n\n### Examples\n\n```\n  # list all pipelines\n  jx get pipeline\n```\n\n### Options\n\n```\n  -h, --help            help for pipelines\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_plugins.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get plugins\"\nslug: jx_get_plugins\nurl: /commands/jx_get_plugins/\ndescription: list of jx commands\n---\n## jx get plugins\n\nList all visible plugin executables on a user's PATH\n\n### Synopsis\n\nList all available plugin files on a user's PATH. \n\nPlugins provide extended functionality that is not part of the major command-line distribution. \n\nAvailable plugin files are those that are: - executable - anywhere on the user's PATH - begin with \"jx-\" \n\nPlugins defined by extensions are automatically installed when the plugin is called. \n\nPlease refer to the documentation and examples for more information about how write your own plugins.\n\n```\njx get plugins [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for plugins\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_previews.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get previews\"\nslug: jx_get_previews\nurl: /commands/jx_get_previews/\ndescription: list of jx commands\n---\n## jx get previews\n\nDisplay one or more Preview Environments\n\n### Synopsis\n\nDisplay one or more preview environments.\n  \nSee Also: \n\n  * jx get env : https://jenkins-x.io/commands/jx_get_env\n\n```\njx get previews [flags]\n```\n\n### Examples\n\n```\n  # List all preview environments\n  jx get previews\n  \n  # View the current preview environment URL\n  # inside a CI pipeline\n  jx get preview --current\n```\n\n### Options\n\n```\n  -c, --current         Output the URL of the current Preview application the current pipeline just deployed\n  -h, --help            help for previews\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_quickstartlocation.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get quickstartlocation\"\nslug: jx_get_quickstartlocation\nurl: /commands/jx_get_quickstartlocation/\ndescription: list of jx commands\n---\n## jx get quickstartlocation\n\nDisplay one or more Quickstart Locations\n\n### Synopsis\n\nDisplay one or more Quickstart Locations for the current Team. \n\nFor more documentation see: https://jenkins-x.io/developing/create-quickstart/#customising-your-teams-quickstarts\n\n```\njx get quickstartlocation [flags]\n```\n\n### Examples\n\n```\n  # List all the quickstart locations\n  jx get quickstartlocations\n  \n  # List all the quickstart locations via an alias\n  jx get qsloc\n```\n\n### Options\n\n```\n  -h, --help            help for quickstartlocation\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_quickstarts.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get quickstarts\"\nslug: jx_get_quickstarts\nurl: /commands/jx_get_quickstarts/\ndescription: list of jx commands\n---\n## jx get quickstarts\n\nLists the available quickstarts\n\n### Synopsis\n\nDisplay the available quickstarts\n\n```\njx get quickstarts [flags]\n```\n\n### Examples\n\n```\n  # List all the available quickstarts\n  jx get quickstarts\n```\n\n### Options\n\n```\n  -f, --filter string               The text filter\n      --framework string            The framework to filter on\n  -h, --help                        help for quickstarts\n      --ignore-team                 ignores the quickstarts added to the Team Settings\n  -l, --language string             The language to filter on\n      --machine-learning            Allow machine-learning quickstarts in results\n  -g, --organisations stringArray   The GitHub organisations to query for quickstarts\n      --owner string                The owner to filter on\n  -s, --short                       return minimal details\n  -t, --tag stringArray             The tags on the quickstarts to filter\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_releases.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get releases\"\nslug: jx_get_releases\nurl: /commands/jx_get_releases/\ndescription: list of jx commands\n---\n## jx get releases\n\nDisplay the Release or Releases the current user is a member of\n\n### Synopsis\n\nDisplay one or more Releases\n\n```\njx get releases [flags]\n```\n\n### Examples\n\n```\n  # List the recent releases done by this team\n  jx get release\n  \n  # Filter the releases\n  jx get release -f myapp\n```\n\n### Options\n\n```\n  -f, --filter string      Filter the releases with the given text\n  -h, --help               help for releases\n  -n, --namespace string   The namespace to view or defaults to the current namespace\n  -o, --output string      The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_storage.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get storage\"\nslug: jx_get_storage\nurl: /commands/jx_get_storage/\ndescription: list of jx commands\n---\n## jx get storage\n\nDisplay the storage configuration for different classifications\n\n### Synopsis\n\nDisplay the storage configuration for different classifications.\n  \nCurrently Jenkins X supports storing files into a branch of a git repository or in cloud blob storage like S3, GCS, Azure blobs etc. \n\nWhen using Cloud Storage we use URLs like 's3://nameOfBucket' on AWS, 'gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket' \n\nSee Also: \n\n  * jx step stash : https://jenkins-x.io/commands/jx_step_stash  \n  * jx edit storage : https://jenkins-x.io/commands/jx_edit_storage\n\n```\njx get storage [flags]\n```\n\n### Examples\n\n```\n  # List the storage configurations for different classifications for the current team\n  jx get storage\n```\n\n### Options\n\n```\n  -h, --help            help for storage\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_stream.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get stream\"\nslug: jx_get_stream\nurl: /commands/jx_get_stream/\ndescription: list of jx commands\n---\n## jx get stream\n\nDisplays the version of a chart, package or docker image from the Version Stream\n\n### Synopsis\n\nDisplays the version of a chart, package or docker image from the Version Stream \n\nFor more information see: https://jenkins-x.io/about/concepts/version-stream/\n\n```\njx get stream [flags]\n```\n\n### Examples\n\n```\n  # List the version of a docker image\n  jx get stream -k docker gcr.io/jenkinsxio/builder-jx\n  \n  # List the version of a chart\n  jx get stream -k charts jenkins-x/tekton\n```\n\n### Options\n\n```\n  -h, --help                  help for stream\n  -k, --kind string           The kind of version. Possible values: charts, packages, docker, git (default \"docker\")\n  -r, --repo string           Jenkins X versions Git repo\n      --versions-ref string   Jenkins X versions Git repository reference (tag, branch, sha etc)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_teamroles.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get teamroles\"\nslug: jx_get_teamroles\nurl: /commands/jx_get_teamroles/\ndescription: list of jx commands\n---\n## jx get teamroles\n\nDisplay the Team or Teams the current user is a member of\n\n### Synopsis\n\nDisplay the roles for members of a Team\n\n```\njx get teamroles [flags]\n```\n\n### Examples\n\n```\n  # List the team roles for the current team\n  jx get teamrole\n```\n\n### Options\n\n```\n  -h, --help            help for teamroles\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_teams.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get teams\"\nslug: jx_get_teams\nurl: /commands/jx_get_teams/\ndescription: list of jx commands\n---\n## jx get teams\n\nDisplay the Team or Teams the current user is a member of\n\n### Synopsis\n\nDisplay the Team or Teams a user is a member of.\n\n```\njx get teams [flags]\n```\n\n### Examples\n\n```\n  # List the provisioned team or teams the current user is a member of\n  jx get team\n  \n  # List the pending Teams which are not yet provisioned and available for use\n  jx get team -p\n```\n\n### Options\n\n```\n  -h, --help            help for teams\n  -o, --output string   The output format such as 'yaml'\n  -p, --pending         Display only pending Teams which are not yet provisioned yet\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_token.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get token\"\nslug: jx_get_token\nurl: /commands/jx_get_token/\ndescription: list of jx commands\n---\n## jx get token\n\nDisplay the tokens for different kinds of services\n\n### Synopsis\n\nDisplay the tokens for different kinds of services\n\n```\njx get token [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for token\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n* [jx get token addon](/commands/jx_get_token_addon/)\t - Display the current users and if they have a token for the addons\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_token_addon.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get token addon\"\nslug: jx_get_token_addon\nurl: /commands/jx_get_token_addon/\ndescription: list of jx commands\n---\n## jx get token addon\n\nDisplay the current users and if they have a token for the addons\n\n### Synopsis\n\nDisplay the users with tokens for the addons\n\n```\njx get token addon [flags]\n```\n\n### Examples\n\n```\n  # List all users with tokens for all addons\n  jx get token addon\n```\n\n### Options\n\n```\n  -h, --help          help for addon\n  -k, --kind string   Filters the services by the kind\n  -n, --name string   Filters the services by the name\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get token](/commands/jx_get_token/)\t - Display the tokens for different kinds of services\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_tracker.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get tracker\"\nslug: jx_get_tracker\nurl: /commands/jx_get_tracker/\ndescription: list of jx commands\n---\n## jx get tracker\n\nDisplay the current registered issue tracker service URLs\n\n### Synopsis\n\nDisplay the issue tracker server URLs.\n\n```\njx get tracker [flags]\n```\n\n### Examples\n\n```\n  # List all registered issue tracker server URLs\n  jx get tracker\n```\n\n### Options\n\n```\n  -h, --help          help for tracker\n  -k, --kind string   Filters the issue trackers by the kinds: bugzilla, jira, trello\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_urls.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get urls\"\nslug: jx_get_urls\nurl: /commands/jx_get_urls/\ndescription: list of jx commands\n---\n## jx get urls\n\nDisplay one or more URLs\n\n### Synopsis\n\nDisplay one or more URLs from the running services.\n\n```\njx get urls [flags]\n```\n\n### Examples\n\n```\n  # List all URLs in this namespace\n  jx get url\n```\n\n### Options\n\n```\n  -e, --env string         Specifies the Environment name to look inside\n  -h, --help               help for urls\n      --host               Only displays host names of the URLs and does not open the browser\n  -n, --namespace string   Specifies the namespace name to look inside\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_users.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get users\"\nslug: jx_get_users\nurl: /commands/jx_get_users/\ndescription: list of jx commands\n---\n## jx get users\n\nDisplay the User or Users the current user is a member of\n\n### Synopsis\n\nDisplay the Users\n\n```\njx get users [flags]\n```\n\n### Examples\n\n```\n  # List the users\n  jx get user\n```\n\n### Options\n\n```\n  -h, --help            help for users\n  -o, --output string   The output format such as 'yaml'\n  -p, --pending         Display only pending Users which are not yet provisioned yet\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_vault-config.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get vault-config\"\nslug: jx_get_vault-config\nurl: /commands/jx_get_vault-config/\ndescription: list of jx commands\n---\n## jx get vault-config\n\nGets the configuration for using the Vault CLI\n\n### Synopsis\n\nUsed to echo the Vault connection configuration for the Jenkins X system Vault. To have the settings apply to the current terminal session the output must be evaluated, for example: \n\n$ eval $(jx get vault-config) \n\nTogether with the name and namespace option, this command can be used to echo the connection configuration for any vault installed via 'jx add vault'.\n\n```\njx get vault-config [flags]\n```\n\n### Examples\n\n```\n  # Gets vault config\n  jx get vault-config\n```\n\n### Options\n\n```\n  -h, --help               help for vault-config\n  -m, --name string        Name of the Vault to get the config for\n  -n, --namespace string   Namespace from where to get the Vault config\n  -t, --terminal string    terminal type output override. Values: ['sh', 'cmd'].\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_get_vault.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx get vault\"\nslug: jx_get_vault\nurl: /commands/jx_get_vault/\ndescription: list of jx commands\n---\n## jx get vault\n\nDisplay one or more Vaults\n\n### Synopsis\n\nDisplay Jenkins X system Vault as well as Vault instances created by 'jx create vault'.\n\n```\njx get vault [flags]\n```\n\n### Examples\n\n```\n  # List all vaults\n  jx get vaults\n```\n\n### Options\n\n```\n      --disableURLDiscovery   Disables the automatic Vault URL discovery\n  -h, --help                  help for vault\n  -n, --namespace string      Namespace from where to list the vaults\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx get](/commands/jx_get/)\t - Display one or more resources\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_import.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx import\"\nslug: jx_import\nurl: /commands/jx_import/\ndescription: list of jx commands\n---\n## jx import\n\nImports a local project or Git repository into Jenkins\n\n### Synopsis\n\nImports a local folder or Git repository into Jenkins X.\n  \n      If you specify no other options or arguments then the current directory is imported.\n      Or you can use '--dir' to specify a directory to import.\n  \n      You can specify the git URL as an argument.\n  \n      For more documentation see: [https://jenkins-x.io/docs/using-jx/creating/import/](https://jenkins-x.io/docs/using-jx/creating/import/)\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n```\njx import [flags]\n```\n\n### Examples\n\n```\n  # Import the current folder\n  jx import\n  \n  # Import a different folder\n  jx import /foo/bar\n  \n  # Import a Git repository from a URL\n  jx import --url https://github.com/jenkins-x/spring-boot-web-example.git\n  \n  # Select a number of repositories from a GitHub organisation\n  jx import --github --org myname\n  \n  # Import all repositories from a GitHub organisation selecting ones to not import\n  jx import --github --org myname --all\n  \n  # Import all repositories from a GitHub organisation which contain the text foo\n  jx import --github --org myname --all --filter foo\n```\n\n### Options\n\n```\n      --all                            If selecting projects to import from a Git provider this defaults to selecting them all\n      --branches string                The branch pattern for branches to trigger CI/CD pipelines on\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n  -c, --credentials string             The Jenkins credentials name used by the job\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --disable-updatebot              disable updatebot-maven-plugin from attempting to fix/update the maven pom.xml\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --external-jenkins-url string    The jenkins url that an external git provider needs to use\n      --filter string                  If selecting projects to import from a Git provider this filters the list of repositories\n      --git-api-token string           The Git API token to use for creating new Git repositories\n      --git-provider-kind string       Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string        The Git server URL to create new Git repositories inside\n      --git-public                     Create new Git repositories as public\n      --git-username string            The Git username to use for creating new Git repositories\n      --github                         If you wish to pick the repositories from GitHub to import\n  -h, --help                           help for import\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n  -m, --import-mode string             The import mode to use. Should be one of Jenkinsfile, YAML\n  -j, --jenkinsfile string             The name of the Jenkinsfile to use. If not specified then 'Jenkinsfile' will be used\n      --list-packs                     list available draft packs\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one) (default \"n\")\n      --no-draft                       Disable Draft from trying to default a Dockerfile and Helm Chart\n      --no-jenkinsfile                 Disable defaulting a Jenkinsfile if its missing\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n      --pack string                    The name of the pack to use\n      --preview-namespace string       The namespace to deploy application previews into\n      --scheduler string               The name of the Scheduler configuration to use for ChatOps when using Prow\n  -u, --url string                     The git clone URL to clone into the current directory and then import\n      --use-default-git                use default git account\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_logs.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx logs\"\nslug: jx_logs\nurl: /commands/jx_logs/\ndescription: list of jx commands\n---\n## jx logs\n\nTails the log of the latest pod for a deployment\n\n### Synopsis\n\nTails the logs of the newest pod for a Deployment.\n\n```\njx logs [deployment] [flags]\n```\n\n### Examples\n\n```\n  # Tails the log of the latest pod in deployment myapp\n  jx logs myapp\n  \n  # Tails the log of the container foo in the latest pod in deployment myapp\n  jx logs myapp -c foo\n```\n\n### Options\n\n```\n  -c, --container string   The name of the container to log\n  -d, --edit               Use my Edit Environment to look for the Deployment pods\n  -e, --env string         the Environment to look for the Deployment. Defaults to the current environment\n  -f, --filter string      Filters the available deployments if no deployment argument is provided\n  -h, --help               help for logs\n  -l, --label string       The label to filter the pods if no deployment argument is provided\n  -n, --namespace string   the namespace to look for the Deployment. Defaults to the current namespace\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_namespace.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx namespace\"\nslug: jx_namespace\nurl: /commands/jx_namespace/\ndescription: list of jx commands\n---\n## jx namespace\n\nView or change the current namespace context in the current Kubernetes cluster\n\n### Synopsis\n\nDisplays or changes the current namespace.\n\n```\njx namespace [flags]\n```\n\n### Examples\n\n```\n  # view the current namespace\n  jx --batch-mode ns\n  \n  # interactively select the namespace to switch to\n  jx ns\n  \n  # change the current namespace to 'cheese'\n  jx ns cheese\n  \n  # change the current namespace to 'brie' creating it if necessary\n  jx ns --create brie\n```\n\n### Options\n\n```\n  -c, --create   Creates the specified namespace if it does not exist\n  -h, --help     help for namespace\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_open.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx open\"\nslug: jx_open\nurl: /commands/jx_open/\ndescription: list of jx commands\n---\n## jx open\n\nOpen a service in a browser\n\n### Synopsis\n\nOpens a named service in the browser. \n\nYou can use the '--url' argument to just display the URL without opening it\n\n```\njx open [flags]\n```\n\n### Examples\n\n```\n  # Open the Nexus console in a browser\n  jx open jenkins-x-sonatype-nexus\n  \n  # Print the Nexus console URL but do not open a browser\n  jx open jenkins-x-sonatype-nexus -u\n  \n  # List all the service URLs\n  jx open\n```\n\n### Options\n\n```\n      --classic               Use the classic Jenkins skin instead of Blue Ocean\n  -m, --custom                Use a custom Jenkins App instead of the default execution engine in Jenkins X\n  -e, --env string            Specifies the Environment name to look inside\n  -h, --help                  help for open\n      --host                  Only displays host names of the URLs and does not open the browser\n  -j, --jenkins-name string   The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n  -n, --namespace string      Specifies the namespace name to look inside\n  -u, --url                   Only displays and the URL and does not open the browser\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_options.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx options\"\nslug: jx_options\nurl: /commands/jx_options/\ndescription: list of jx commands\n---\n## jx options\n\n\n\n### Synopsis\n\n\n\n```\njx options [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for options\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_preview.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx preview\"\nslug: jx_preview\nurl: /commands/jx_preview/\ndescription: list of jx commands\n---\n## jx preview\n\nCreates or updates a Preview Environment for the current version of an application\n\n### Synopsis\n\nCreates or updates a Preview Environment for the given Pull Request or Branch. \n\nFor more documentation on Preview Environments see: https://jenkins-x.io/about/features/#preview-environments\n\n```\njx preview [flags]\n```\n\n### Examples\n\n```\n  # Create or updates the Preview Environment for the Pull Request\n  jx preview\n```\n\n### Options\n\n```\n      --alias string                      The optional alias used in the 'requirements.yaml' file\n  -a, --app string                        The Application to promote\n      --build string                      The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n  -c, --cluster string                    The Kubernetes cluster for the Environment. If blank and a namespace is specified assumes the current cluster\n      --dev-namespace string              The Developer namespace where the preview command should run\n      --dir string                        The source directory used to detect the git source URL and reference\n      --domain string                     Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --exposer string                    Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n  -f, --filter string                     The search filter to find charts to promote\n  -r, --helm-repo-name string             The name of the helm repository that contains the app (default \"releases\")\n  -u, --helm-repo-url string              The Helm Repository URL to use for the App\n  -h, --help                              help for preview\n      --ignore-local-file                 Ignores the local file system when deducing the Git repository\n      --ingress-class string              Used to set the ingress.class annotation in exposecontroller created ingress\n      --keep-exposecontroller-job         Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n  -l, --label string                      The Environment label which is a descriptive string like 'Production' or 'Staging'\n  -n, --name string                       The Environment resource name. Must follow the Kubernetes name conventions like Services, Namespaces\n      --namespace string                  The Kubernetes namespace for the Environment\n      --no-comment                        Disables commenting on the Pull Request after preview is created.\n      --no-helm-update                    Allows the 'helm repo update' command if you are sure your local helm cache is up to date with the version you wish to promote\n      --no-merge                          Disables automatic merge of promote Pull Requests\n      --no-poll                           Disables polling for Pull Request or Pipeline status\n      --no-wait                           Disables waiting for completing promotion after the Pull request is merged\n      --pipeline string                   The Pipeline string in the form 'folderName/repoName/branch' which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n      --post-preview-job-timeout string   The duration before we consider the post preview Jobs failed (default \"2h\")\n      --post-preview-poll-time string     The amount of time between polls for the post preview Job status (default \"10s\")\n      --pr string                         The Pull Request Name (e.g. 'PR-23' or just '23'\n      --pr-url string                     The Pull Request URL\n      --preview-health-timeout string     The amount of time to wait for the preview application to become healthy (default \"5m\")\n      --pull-request-poll-time string     Poll time when waiting for a Pull Request to merge (default \"20s\")\n      --release string                    The name of the helm release\n      --skip-availability-check           Disables the mandatory availability check.\n      --source-ref string                 The source code git ref (branch/sha)\n  -s, --source-url string                 The source code git URL\n  -t, --timeout string                    The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete (default \"1h\")\n      --urltemplate string                For ingress; exposers can set the urltemplate to expose\n  -v, --version string                    The Version to promote\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_profile.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx profile\"\nslug: jx_profile\nurl: /commands/jx_profile/\ndescription: list of jx commands\n---\n## jx profile\n\nSet your jx profile\n\n### Synopsis\n\nSets the profile for the jx install\n\n```\njx profile <type> [flags]\n```\n\n### Examples\n\n```\n  # Sets the profile for the jx install to cloudbees\n  jx profile cloudbees\n  \n  # Set the profile for the jx install to open source\n  jx profile oss\n```\n\n### Options\n\n```\n  -h, --help   help for profile\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_promote.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx promote\"\nslug: jx_promote\nurl: /commands/jx_promote/\ndescription: list of jx commands\n---\n## jx promote\n\nPromotes a version of an application to an Environment\n\n### Synopsis\n\nPromotes a version of an application to zero to many permanent environments. \n\nFor more documentation see: https://jenkins-x.io/docs/getting-started/promotion/\n\n```\njx promote [application] [flags]\n```\n\n### Examples\n\n```\n  # Promote a version of the current application to staging\n  # discovering the application name from the source code\n  jx promote --version 1.2.3 --env staging\n  \n  # Promote a version of the myapp application to production\n  jx promote --app myapp --version 1.2.3 --env production\n  \n  # To search for all the available charts for a given name use -f.\n  # e.g. to find a redis chart to install\n  jx promote -f redis\n  \n  # To promote a postgres chart using an alias\n  jx promote -f postgres --alias mydb\n  \n  # To create or update a Preview Environment please see the 'jx preview' command if you are inside a git clone of a repo\n  jx preview\n```\n\n### Options\n\n```\n      --alias string                    The optional alias used in the 'requirements.yaml' file\n      --all-auto                        Promote to all automatic environments in order\n  -a, --app string                      The Application to promote\n      --build string                    The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n  -e, --env string                      The Environment to promote to\n  -f, --filter string                   The search filter to find charts to promote\n  -r, --helm-repo-name string           The name of the helm repository that contains the app (default \"releases\")\n  -u, --helm-repo-url string            The Helm Repository URL to use for the App\n  -h, --help                            help for promote\n      --ignore-local-file               Ignores the local file system when deducing the Git repository\n  -n, --namespace string                The Namespace to promote to\n      --no-helm-update                  Allows the 'helm repo update' command if you are sure your local helm cache is up to date with the version you wish to promote\n      --no-merge                        Disables automatic merge of promote Pull Requests\n      --no-poll                         Disables polling for Pull Request or Pipeline status\n      --no-wait                         Disables waiting for completing promotion after the Pull request is merged\n      --pipeline string                 The Pipeline string in the form 'folderName/repoName/branch' which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n      --pull-request-poll-time string   Poll time when waiting for a Pull Request to merge (default \"20s\")\n      --release string                  The name of the helm release\n  -t, --timeout string                  The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete (default \"1h\")\n  -v, --version string                  The Version to promote\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_prompt.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx prompt\"\nslug: jx_prompt\nurl: /commands/jx_prompt/\ndescription: list of jx commands\n---\n## jx prompt\n\nGenerate the command line prompt for the current team and environment\n\n### Synopsis\n\nGenerate a command prompt for the current namespace and Kubernetes context.\n\n```\njx prompt [flags]\n```\n\n### Examples\n\n```\n  # Generate the current prompt\n  jx prompt\n  \n  # Enable the prompt for bash\n  PS1=\"[\\u@\\h \\W \\$(jx prompt)]\\$ \"\n  \n  # Enable the prompt for zsh\n  PROMPT='$(jx prompt)'$PROMPT\n```\n\n### Options\n\n```\n      --context-color stringArray     The color for the Kubernetes context (default [cyan])\n  -d, --divider string                The divider between the team and environment for the prompt (default \":\")\n  -h, --help                          help for prompt\n  -i, --icon                          Uses an icon for the label in the prompt\n  -l, --label string                  The label for the prompt (default \"k8s\")\n      --label-color stringArray       The color for the label (default [blue])\n      --namespace-color stringArray   The color for the namespace (default [green])\n      --no-label                      Disables the use of the label in the prompt\n  -p, --prefix string                 The prefix text for the prompt\n  -s, --separator string              The separator between the label and the rest of the prompt (default \":\")\n  -x, --suffix string                 The suffix text for the prompt (default \">\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_repository.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx repository\"\nslug: jx_repository\nurl: /commands/jx_repository/\ndescription: list of jx commands\n---\n## jx repository\n\nOpens the web page for the current Git repository in a browser\n\n### Synopsis\n\nOpens the web page for the current Git repository in a browser \n\nYou can use the '--url' argument to just display the URL without opening it\n\n```\njx repository [flags]\n```\n\n### Examples\n\n```\n  # Open the Git repository in a browser\n  jx repo\n  \n  # Print the URL of the Git repository\n  jx repo -u\n  \n  # Use the git URL in a script/pipeline\n  export URL=\"$(jx repo -q -b)\"\n```\n\n### Options\n\n```\n  -h, --help    help for repository\n  -q, --quiet   Quiet mode just displays the git URL only for use in scripts\n  -u, --url     Only displays and the URL and does not open the browser\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_rsh.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx rsh\"\nslug: jx_rsh\nurl: /commands/jx_rsh/\ndescription: list of jx commands\n---\n## jx rsh\n\nOpens a terminal in a pod or runs a command in the pod\n\n### Synopsis\n\nOpens a terminal or runs a command in a pods container\n\n```\njx rsh [deploymentOrPodName] [flags]\n```\n\n### Examples\n\n```\n  # Open a terminal in the first container of the foo deployment's latest pod\n  jx rsh foo\n  \n  # Opens a terminal in the cheese container in the latest pod in the foo deployment\n  jx rsh -c cheese foo\n  \n  # To connect to one of your DevPods use:\n  jx rsh -d\n  \n  # To execute something in the remote shell (like classic rsh or ssh commands)\n  jx rsh -e 'do something'\n```\n\n### Options\n\n```\n  -c, --container string     The name of the container to log\n  -d, --devpod               Connect to a DevPod\n      --environment string   The environment in which to look for the Deployment. Defaults to the current environment\n  -e, --execute string       Execute this command on the remote container (default \"bash\")\n  -h, --help                 help for rsh\n  -n, --namespace string     the namespace to look for the Deployment. Defaults to the current namespace\n  -p, --pod string           the pod name to use\n  -s, --shell string         Path to the shell command\n      --username string      The username to create the DevPod. If not specified defaults to the current operating system user or $USER'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_scan.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx scan\"\nslug: jx_scan\nurl: /commands/jx_scan/\ndescription: list of jx commands\n---\n## jx scan\n\nPerform a scan action\n\n### Synopsis\n\nPerform a scan action.\n\n```\njx scan [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for scan\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx scan cluster](/commands/jx_scan_cluster/)\t - Performs a cluster security scan\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_scan_cluster.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx scan cluster\"\nslug: jx_scan_cluster\nurl: /commands/jx_scan_cluster/\ndescription: list of jx commands\n---\n## jx scan cluster\n\nPerforms a cluster security scan\n\n### Synopsis\n\nPerforms a cluster security scan\n\n```\njx scan cluster [flags]\n```\n\n### Options\n\n```\n  -h, --help            help for cluster\n  -o, --output string   output format is one of: yaml|plain (default \"plain\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx scan](/commands/jx_scan/)\t - Perform a scan action\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_shell.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx shell\"\nslug: jx_shell\nurl: /commands/jx_shell/\ndescription: list of jx commands\n---\n## jx shell\n\nCreate a sub shell so that changes to the Kubernetes context, namespace or environment remain local to the shell\n\n### Synopsis\n\nCreate a sub shell so that changes to the Kubernetes context, namespace or environment remain local to the shell.\n\n```\njx shell [flags]\n```\n\n### Examples\n\n```\n  # create a new shell where the context changes are local to the shell only\n  jx shell\n  \n  # create a new shell using a specific named context\n  jx shell prod-cluster\n  \n  # ends the current shell and returns to the previous Kubernetes context\n  exit\n```\n\n### Options\n\n```\n  -f, --filter string   Filter the list of contexts to switch between using the given text\n  -h, --help            help for shell\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_start.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx start\"\nslug: jx_start\nurl: /commands/jx_start/\ndescription: list of jx commands\n---\n## jx start\n\nStarts a process such as a pipeline\n\n### Synopsis\n\nStarts a process such as a Jenkins pipeline.\n\n```\njx start TYPE [flags]\n```\n\n### Examples\n\n```\n  # Start a pipeline\n  jx start pipeline foo\n```\n\n### Options\n\n```\n  -h, --help   help for start\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx start pipeline](/commands/jx_start_pipeline/)\t - Starts one or more pipelines\n* [jx start protection](/commands/jx_start_protection/)\t - Starts protection\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_start_pipeline.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx start pipeline\"\nslug: jx_start_pipeline\nurl: /commands/jx_start_pipeline/\ndescription: list of jx commands\n---\n## jx start pipeline\n\nStarts one or more pipelines\n\n### Synopsis\n\nStarts the pipeline build.\n\n```\njx start pipeline [flags]\n```\n\n### Examples\n\n```\n  # Start a pipeline\n  jx start pipeline foo\n  \n  # Select the pipeline to start\n  jx start pipeline\n  \n  # Select the pipeline to start and tail the log\n  jx start pipeline -t\n```\n\n### Options\n\n```\n      --branch string            The branch to start. If not specified defaults to master\n  -c, --context string           An optional Prow pipeline context\n  -m, --custom                   Use a custom Jenkins App instead of the default execution engine in Jenkins X\n  -e, --env stringArray          List of custom environment variables to be applied to the generated PipelineRun that are created (can be use multiple times)\n  -f, --filter string            Filters all the available jobs by those that contain the given text\n  -h, --help                     help for pipeline\n  -j, --jenkins-name string      The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n      --kind string              The kind of pipeline such as release or pullrequest\n  -l, --label stringArray        List of custom labels to be applied to the generated PipelineRun (can be use multiple times)\n      --service-account string   The Kubernetes ServiceAccount to use to run the meta pipeline (default \"tekton-bot\")\n  -t, --tail                     Tails the build log to the current terminal\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx start](/commands/jx_start/)\t - Starts a process such as a pipeline\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_start_protection.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx start protection\"\nslug: jx_start_protection\nurl: /commands/jx_start_protection/\ndescription: list of jx commands\n---\n## jx start protection\n\nStarts protection\n\n### Synopsis\n\nStarts protection checking on an app\n\n```\njx start protection [flags]\n```\n\n### Examples\n\n```\n  # Start protection\n  jx start protection <context> <org/repo>\n  \n  # For example, to enable compliance on a repopository called \"example\" in the \"acme\" organization\n  jx start protection compliance-check acme/example\n```\n\n### Options\n\n```\n  -h, --help   help for protection\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx start](/commands/jx_start/)\t - Starts a process such as a pipeline\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_status.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx status\"\nslug: jx_status\nurl: /commands/jx_status/\ndescription: list of jx commands\n---\n## jx status\n\nstatus of the Kubernetes cluster or named node\n\n### Synopsis\n\nGets the current status of the Kubernetes cluster\n\n```\njx status [node] [flags]\n```\n\n### Examples\n\n```\n  # displays the current status of the Kubernetes cluster\n  jx status\n```\n\n### Options\n\n```\n  -h, --help          help for status\n  -n, --node string   the named node to get \n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step\"\nslug: jx_step\nurl: /commands/jx_step/\ndescription: list of jx commands\n---\n## jx step\n\npipeline steps\n\n### Synopsis\n\npipeline steps\n\n```\njx step [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for step\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx step bdd](/commands/jx_step_bdd/)\t - Performs the BDD tests on the current cluster, new clusters or teams\n* [jx step blog](/commands/jx_step_blog/)\t - Creates a blog post with changes, metrics and charts showing improvements\n* [jx step boot](/commands/jx_step_boot/)\t - boot [command]\n* [jx step buildpack](/commands/jx_step_buildpack/)\t - buildpack [command]\n* [jx step changelog](/commands/jx_step_changelog/)\t - Creates a changelog for a git tag\n* [jx step cluster](/commands/jx_step_cluster/)\t - cluster [kind]\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n* [jx step credential](/commands/jx_step_credential/)\t - Returns a secret entry for easy scripting in pipeline steps\n* [jx step custom](/commands/jx_step_custom/)\t - Triggers a pipeline in a custom Jenkins server using the local Jenkinsfile\n* [jx step e2e](/commands/jx_step_e2e/)\t - e2e [command]\n* [jx step env](/commands/jx_step_env/)\t - env [command]\n* [jx step expose](/commands/jx_step_expose/)\t - This step generates Ingress resources for exposed services\n* [jx step get](/commands/jx_step_get/)\t - get [command]\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n* [jx step gpg](/commands/jx_step_gpg/)\t - Creates the GPG credentials file for GPG signing releases\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n* [jx step link](/commands/jx_step_link/)\t - achieve service linking in preview environments\n* [jx step next-buildnumber](/commands/jx_step_next-buildnumber/)\t - Generates the next build unique number for a pipeline.\n* [jx step next-version](/commands/jx_step_next-version/)\t - Writes next semantic version\n* [jx step override-requirements](/commands/jx_step_override-requirements/)\t - Overrides requirements with environment variables to be persisted in the `jx-requirements.yml`\n* [jx step patch-config](/commands/jx_step_patch-config/)\t - Modifies a ConfigMap with the given json patch\n* [jx step post](/commands/jx_step_post/)\t - post step actions\n* [jx step pr](/commands/jx_step_pr/)\t - pipeline step pr\n* [jx step release](/commands/jx_step_release/)\t - performs a release on the current Git repository\n* [jx step replicate](/commands/jx_step_replicate/)\t - \nAnnotates a secret or configmap so it can be replicated across an environment\n\n* [jx step report](/commands/jx_step_report/)\t - report [kind]\n* [jx step restore](/commands/jx_step_restore/)\t - restore [command]\n* [jx step scheduler](/commands/jx_step_scheduler/)\t - scheduler [command]\n* [jx step split](/commands/jx_step_split/)\t - Mirrors the code from a monorepo into separate microservice style Git repositories so its easier to do finer grained releases\n* [jx step stash](/commands/jx_step_stash/)\t - Stashes local files generated as part of a pipeline into long term storage\n* [jx step syntax](/commands/jx_step_syntax/)\t - syntax [command]\n* [jx step tag](/commands/jx_step_tag/)\t - Creates a git tag and pushes to remote repo\n* [jx step unstash](/commands/jx_step_unstash/)\t - Unstashes files generated as part of a pipeline to a local file or directory or displays on the console\n* [jx step update](/commands/jx_step_update/)\t - update [command]\n* [jx step validate](/commands/jx_step_validate/)\t - Validates the command line tools, container and platform to ensure a pipeline can run properly\n* [jx step values](/commands/jx_step_values/)\t - Creates a JSON schema from a template\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n* [jx step wait](/commands/jx_step_wait/)\t - Waits for the given artifact to be available in a maven style repository\n* [jx step wait-for-chart](/commands/jx_step_wait-for-chart/)\t - Waits for the given chart to be available in a helm repository\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_bdd.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step bdd\"\nslug: jx_step_bdd\nurl: /commands/jx_step_bdd/\ndescription: list of jx commands\n---\n## jx step bdd\n\nPerforms the BDD tests on the current cluster, new clusters or teams\n\n### Synopsis\n\nThis pipeline step lets you run the BDD tests in the current team in a current cluster or create a new cluster/team run tests there then tear things down again.\n\n```\njx step bdd [flags]\n```\n\n### Examples\n\n```\n  # run the BDD tests in the current team\n  jx step bdd --use-current-team --git-provider-url=https://my.git.server.com\n  \n  # create a new team for the tests, run the tests then tear everything down again\n  jx step bdd -b --provider=gke --git-provider=ghe --git-provider-url=https://my.git.server.com --default-admin-password=myadminpwd --git-username myuser --git-api-token mygittoken\n```\n\n### Options\n\n```\n      --advanced-mode                         Advanced install options. This will prompt for advanced install options\n      --azure-acr-subscription string         The Azure subscription under which the specified docker-registry is located\n      --base-domain string                    the base domain to use when creating the cluster\n      --binary string                         the binary location of the 'jx' executable for creating clusters (default \"jx\")\n      --buildpack string                      The name of the build pack to use for the Team\n      --cleanup-temp-files                    Cleans up any temporary values.yaml used by helm install [default true] (default true)\n      --cloud-environment-repo string         Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n  -c, --config string                         the config YAML file containing the clusters to create\n      --config-file string                    Configuration file used for installation\n      --default-admin-password string         the default admin password to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus\n      --default-admin-username string         the default admin username to access Jenkins, Kubernetes Dashboard, ChartMuseum and Nexus (default \"admin\")\n      --default-environment-prefix string     Default environment repo prefix, your Git repos will be of the form 'environment-$prefix-$envName'\n      --delete-team                           Whether we should delete the Team we create for each Git Provider (default true)\n      --dir string                            the git clone of the jenkins-x/jenkins-x-versions git repository. Used to default the version of jenkins-x-platform when creating clusters if no --version option is supplied\n      --docker-registry string                The Docker Registry host or host:port which is used when tagging and pushing images. If not specified it defaults to the internal registry unless there is a better provider default (e.g. ECR on AWS/EKS)\n      --docker-registry-org string            The Docker Registry organiation/user to create images inside. On GCP this is typically your Google Project ID.\n      --domain string                         Domain to expose ingress endpoints.  Example: jenkinsx.io\n      --draft-client-only                     Only install draft client\n      --environment-git-owner string          The Git provider organisation to create the environment Git repositories in\n      --exposecontroller-pathmode path        The ExposeController path mode for how services should be exposed as URLs. Defaults to using subnets. Use a value of path to use relative paths within the domain host such as when using AWS ELB host names\n      --exposecontroller-urltemplate string   The ExposeController urltemplate for how services should be exposed as URLs. Defaults to being empty, which in turn defaults to \"{{.Service}}.{{.Namespace}}.{{.Domain}}\".\n      --exposer string                        Used to describe which strategy exposecontroller should use to access applications (default \"Ingress\")\n      --external-dns                          Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record\n      --external-ip string                    The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n      --git-api-token string                  The Git API token to use for creating new Git repositories\n      --git-owner string                      the git owner of new git repositories created by the tests\n  -g, --git-provider string                   the git provider kind\n      --git-provider-kind string              Kind of Git server. If not specified, kind of server will be autodetected from Git provider URL. Possible values: bitbucketcloud, bitbucketserver, gitea, gitlab, github, fakegit\n      --git-provider-url string               The Git server URL to create new Git repositories inside (default \"https://github.com\")\n      --git-public                            Create new Git repositories as public\n      --git-username string                   The Git username to use for creating new Git repositories\n      --gitops                                Creates a git repository for the Dev environment to manage the installation, configuration, upgrade and addition of Apps in Jenkins X all via GitOps\n      --global-tiller                         Whether or not to use a cluster global tiller (default true)\n      --gopath string                         the GOPATH directory where the BDD test git repository will be cloned\n      --helm-client-only                      Only install helm client\n      --helm-tls                              Whether to use TLS with helm\n      --helm3                                 Use helm3 to install Jenkins X which does not use Tiller\n  -h, --help                                  help for bdd\n  -i, --ignore-fail                           Ignores test failures so that a BDD test run can capture the output and report on the test passes/failures\n      --ingress-class string                  Used to set the ingress.class annotation in exposecontroller created ingress\n      --ingress-cluster-role string           The cluster role for the Ingress controller (default \"cluster-admin\")\n      --ingress-deployment string             The name of the Ingress controller Deployment (default \"jxing-nginx-ingress-controller\")\n      --ingress-namespace string              The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string                The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --install-dependencies                  Enables automatic dependencies installation when required\n      --install-only                          Force the install command to fail if there is already an installation. Otherwise lets update the installation\n      --kaniko                                Use Kaniko for building docker images\n      --keep-exposecontroller-job             Prevents Helm deleting the exposecontroller Job and Pod after running.  Useful for debugging exposecontroller logs but you will need to manually delete the job if you update an environment\n      --local-cloud-environment               Ignores default cloud-environment-repo and uses current directory \n      --local-helm-repo-name string           The name of the helm repository for the installed ChartMuseum (default \"releases\")\n      --long-term-storage                     Enable the Long Term Storage option to save logs and other assets into a GCS bucket (supported only for GKE)\n      --lts-bucket string                     The bucket to use for Long Term Storage. If the bucket doesn't exist, an attempt will be made to create it, otherwise random naming will be used\n      --namespace string                      The namespace the Jenkins X platform should be installed into (default \"jx\")\n      --ng                                    Use the Next Generation Jenkins X features like Prow, Tekton, No Tiller, Vault, Dev GitOps\n      --no-brew                               Disables brew package manager on MacOS when installing binary dependencies\n      --no-default-environments               Disables the creation of the default Staging and Production environments\n      --no-delete-app                         Disables deleting the created app after the test\n      --no-delete-repo                        Disables deleting the created repository after the test\n      --no-gitops-env-apply                   When using GitOps to create the source code for the development environment and installation, don't run 'jx step env apply' to perform the install\n      --no-gitops-env-repo                    When using GitOps to create the source code for the development environment this flag disables the creation of a git repository for the source code\n      --no-gitops-env-setup                   When using GitOps to install the development environment this flag skips the post-install setup\n      --no-gitops-vault                       When using GitOps to create the source code for the development environment this flag disables the creation of a vault\n      --no-tiller                             Whether to disable the use of tiller with helm. If disabled we use 'helm template' to generate the YAML from helm charts then we use 'kubectl apply' to install it to avoid using tiller completely. (default true)\n      --on-premise                            If installing on an on premise cluster then lets default the 'external-ip' to be the Kubernetes master IP address\n      --parallel                              Should we process each cluster configuration in parallel\n      --provider string                       Cloud service providing the Kubernetes cluster.  Supported providers: aks, alibaba, aws, eks, gke, icp, iks, jx-infra, kubernetes, oke, openshift, pks\n      --prow                                  Enable Prow to implement Serverless Jenkins and support ChatOps on Pull Requests\n      --recreate-existing-draft-repos         Delete existing helm repos used by Jenkins X under ~/draft/packs\n      --register-local-helmrepo               Registers the Jenkins X ChartMuseum registry with your helm client [default false]\n      --remote-environments                   Indicates you intend Staging and Production environments to run in remote clusters. See https://jenkins-x.io/getting-started/multi-cluster/\n      --remote-tiller                         If enabled and we are using tiller for helm then run tiller remotely in the kubernetes cluster. Otherwise we run the tiller process locally. (default true)\n      --reports-dir string                    the directory used to copy in any generated report files (default \"reports\")\n      --skip-auth-secrets-merge               Skips merging the secrets from local files with the secrets from Kubernetes cluster\n      --skip-cluster-role                     Don't enable cluster admin role for user\n      --skip-ingress                          Skips the installation of ingress controller. Note that a ingress controller must already be installed into the cluster in order for the installation to succeed\n      --skip-setup-tiller                     Don't setup the Helm Tiller service - lets use whatever tiller is already setup for us.\n      --skip-test-git-repo-clone              Skip cloning the bdd test git repo\n      --source-dir string                     the directory to run from where we look the requirements file (default \".\")\n      --static-jenkins                        Install a static Jenkins master to use as the pipeline engine. Note this functionality is deprecated in favour of running serverless Tekton builds\n      --tekton                                Enables the Tekton pipeline engine (which used to be called knative build pipeline) along with Prow to provide Serverless Jenkins. Otherwise we default to use Knative Build if you enable Prow\n      --test-git-branch string                the git repository branch to use for the BDD tests (default \"master\")\n      --test-git-pr-number string             the Pull Request number to fetch from the repository for the BDD tests\n  -r, --test-git-repo string                  the git repository to clone for the BDD tests (default \"https://github.com/jenkins-x/bdd-jx.git\")\n  -t, --tests stringArray                     the list of the test cases to run (default [test-quickstart-node-http])\n      --tiller-cluster-role string            The cluster role for Helm's tiller (default \"cluster-admin\")\n      --tiller-namespace string               The namespace for the Tiller when using a global tiller (default \"kube-system\")\n      --timeout string                        The number of seconds to wait for the helm install to complete (default \"6000\")\n      --urltemplate string                    For ingress; exposers can set the urltemplate to expose\n      --use-current-team                      If enabled lets use the current Team to run the tests\n      --use-revision                          Use the git revision from the current git clone instead of the Pull Request branch (default true)\n      --user-cluster-role string              The cluster role for the current user to be able to administer helm (default \"cluster-admin\")\n      --username string                       The Kubernetes username used to initialise helm. Usually your email address for your Kubernetes account\n      --vault                                 Sets up a Hashicorp Vault for storing secrets during installation (supported only for GKE)\n      --vault-bucket-recreate                 If the vault bucket already exists delete it then create it empty (default true)\n      --version string                        The specific platform version to install\n      --version-repo-pr                       For use with jenkins-x-versions PR. Indicates the git revision of the PR should be used to clone the jenkins-x-versions\n      --versions-ref string                   Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string                  Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_blog.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step blog\"\nslug: jx_step_blog\nurl: /commands/jx_step_blog/\ndescription: list of jx commands\n---\n## jx step blog\n\nCreates a blog post with changes, metrics and charts showing improvements\n\n### Synopsis\n\nGenerates charts for a project\n\n```\njx step blog [flags]\n```\n\n### Examples\n\n```\n  # create charts for the cuect\n  jx step chart\n```\n\n### Options\n\n```\n      --blog-dir string            The Hugo-style blog source code to generate the charts into\n  -n, --blog-name string           The blog name\n  -c, --combine-minor              If enabled lets combine minor releases together to simplify the charts (default true)\n      --dev-channel-members int    If no chat bots can connect to your chat server you can pass in the counts for the developer channel here\n  -d, --dir string                 The directory to query to find the projects .git directory\n  -f, --from-date string           The date to create the charts from. Defaults to a week before the to date. Should be a format: January 2 2006\n  -h, --help                       help for blog\n  -t, --to-date string             The date to query up to. Defaults to now. Should be a format: January 2 2006\n      --user-channel-members int   If no chat bots can connect to your chat server you can pass in the counts for the user channel here\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_boot.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step boot\"\nslug: jx_step_boot\nurl: /commands/jx_step_boot/\ndescription: list of jx commands\n---\n## jx step boot\n\nboot [command]\n\n### Synopsis\n\nboot [command]\n\n```\njx step boot [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for boot\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step boot vault](/commands/jx_step_boot_vault/)\t - This step boots up Vault in the current cluster if its enabled in the 'jx-requirements.yml' file and is not already installed\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_boot_vault.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step boot vault\"\nslug: jx_step_boot_vault\nurl: /commands/jx_step_boot_vault/\ndescription: list of jx commands\n---\n## jx step boot vault\n\nThis step boots up Vault in the current cluster if its enabled in the 'jx-requirements.yml' file and is not already installed\n\n### Synopsis\n\nThis step boots up Vault in the current cluster if its enabled in the 'jx-requirements.yml' file and is not already installed. \n\nThis step is intended to be used in the Jenkins X Boot Pipeline: https://jenkins-x.io/docs/getting-started/setup/boot/\n\n```\njx step boot vault [flags]\n```\n\n### Examples\n\n```\n  # boots up Vault if its required\n  jx step boot vault\n```\n\n### Options\n\n```\n  -d, --dir string                   the directory to look for the requirements file: jx-requirements.yml (default \".\")\n  -h, --help                         help for vault\n      --namespace string             the namespace that Jenkins X will be booted into. If not specified it defaults to $DEPLOY_NAMESPACE\n      --provider-values-dir string   The optional directory of kubernetes provider specific files\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step boot](/commands/jx_step_boot/)\t - boot [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_buildpack.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step buildpack\"\nslug: jx_step_buildpack\nurl: /commands/jx_step_buildpack/\ndescription: list of jx commands\n---\n## jx step buildpack\n\nbuildpack [command]\n\n### Synopsis\n\nbuildpack [command]\n\n```\njx step buildpack [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for buildpack\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step buildpack apply](/commands/jx_step_buildpack_apply/)\t - Applies the current teams build pack to the project to add any missing resources like a Jenkinsfile\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_buildpack_apply.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step buildpack apply\"\nslug: jx_step_buildpack_apply\nurl: /commands/jx_step_buildpack_apply/\ndescription: list of jx commands\n---\n## jx step buildpack apply\n\nApplies the current teams build pack to the project to add any missing resources like a Jenkinsfile\n\n### Synopsis\n\nApplies the build pack for a project to add any missing files like a Jenkinsfile\n\n```\njx step buildpack apply [flags]\n```\n\n### Examples\n\n```\n  # applies the current build pack for the current team adding any missing files like Jenkinsfile\n  jx step buildpack apply\n  \n  # applies the 'maven' build pack to the current project\n  jx step buildpack apply --pack maven\n```\n\n### Options\n\n```\n  -d, --dir string           The directory to query to find the projects .git directory\n  -h, --help                 help for apply\n      --jenkinsfile string   The name of the Jenkinsfile to use. If not specified then 'Jenkinsfile' will be used\n      --no-jenkinsfile       Disable defaulting a Jenkinsfile if its missing\n      --pack string          The name of the pack to use\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step buildpack](/commands/jx_step_buildpack/)\t - buildpack [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_changelog.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step changelog\"\nslug: jx_step_changelog\nurl: /commands/jx_step_changelog/\ndescription: list of jx commands\n---\n## jx step changelog\n\nCreates a changelog for a git tag\n\n### Synopsis\n\nGenerates a Changelog for the latest tag \n\nThis command will generate a Changelog as markdown for the git commit range given. If you are using GitHub it will also update the GitHub Release with the changelog. You can disable that by passing'--update-release=false' \n\nIf you have just created a git tag this command will try default to the changes between the last tag and the previous one. You can always specify the exact Git references (tag/sha) directly via '--previous-rev' and '--rev' \n\nThe changelog is generated by parsing the git commits. It will also detect any text like 'fixes #123' to link to issue fixes. You can also use Conventional Commits notation: https://conventionalcommits.org/ to get a nicer formatted changelog. e.g. using commits like 'fix:(my feature) this my fix' or 'feat:(cheese) something' \n\nThis command also generates a Release Custom Resource Definition you can include in your helm chart to give metadata about the changelog of the application along with metadata about the release (git tag, url, commits, issues fixed etc). Including this metadata in a helm charts means we can do things like automatically comment on issues when they hit Staging or Production; or give detailed descriptions of what things have changed when using GitOps to update versions in an environment by referencing the fixed issues in the Pull Request. \n\nYou can opt out of the release YAML generation via the '--generate-yaml=false' option \n\nTo update the release notes on GitHub / Gitea this command needs a git API token.\n\nBy default jx commands look for a file '~/.jx/gitAuth.yaml' to find the API tokens for Git servers. You can use 'jx create git token' to create a Git token.\n\nAlternatively if you are running this command inside a CI server you can use environment variables to specify the username and API token.\ne.g. define environment variables GIT_USERNAME and GIT_API_TOKEN\n\n\n```\njx step changelog [flags]\n```\n\n### Examples\n\n```\n  # generate a changelog on the current source\n  jx step changelog\n  \n  # specify the version to use\n  jx step changelog --version 1.2.3\n  \n  # specify the version and a header template\n  jx step changelog --header-file docs/dev/changelog-header.md --version 1.2.3\n```\n\n### Options\n\n```\n      --build string               The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n  -c, --crd                        Generate the CRD in the chart\n      --crd-yaml-file string       the name of the file to generate the Release CustomResourceDefinition YAML (default \"release-crd.yaml\")\n      --dir string                 The directory of the Git repository. Defaults to the current working directory\n      --fail-if-no-commits         Do we want to fail the build if we don't find any commits to generate the changelog\n      --footer string              The changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n      --footer-file string         The file name of the changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n  -y, --generate-yaml              Generate the Release YAML in the local helm chart (default true)\n      --header string              The changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n      --header-file string         The file name of the changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n  -h, --help                       help for changelog\n      --include-merge-commits      Include merge commits when generating the changelog\n      --no-dev-release             Disables the generation of Release CRDs in the development namespace to track releases being performed\n      --output-markdown string     The file to generate for the changelog output if not updating a Git provider release\n  -o, --overwrite                  overwrites the Release CRD YAML file if it exists\n      --previous-date string       the previous date to find a revision in format 'MonthName dayNumber year'\n  -p, --previous-rev string        the previous tag revision\n      --release-yaml-file string   the name of the file to generate the Release YAML (default \"release.yaml\")\n  -r, --rev string                 the current tag revision\n  -t, --templates-dir string       the directory containing the helm chart templates to generate the resources\n      --update-release             Should we update the release on the Git repository with the changelog (default true)\n  -v, --version string             The version to release\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_cluster.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step cluster\"\nslug: jx_step_cluster\nurl: /commands/jx_step_cluster/\ndescription: list of jx commands\n---\n## jx step cluster\n\ncluster [kind]\n\n### Synopsis\n\ncluster [kind]\n\n```\njx step cluster [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step cluster label](/commands/jx_step_cluster_label/)\t - Labels the given cluster\n* [jx step cluster lock](/commands/jx_step_cluster_lock/)\t - Locks and joins a cluster using a lock label and optional label filters\n* [jx step cluster unlock](/commands/jx_step_cluster_unlock/)\t - Unlocks the given cluster name so it joins the pool of test clusters again\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_cluster_label.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step cluster label\"\nslug: jx_step_cluster_label\nurl: /commands/jx_step_cluster_label/\ndescription: list of jx commands\n---\n## jx step cluster label\n\nLabels the given cluster\n\n### Synopsis\n\nLabels the given cluster.\n\n```\njx step cluster label [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --fake                 Use the fake clusters client\n      --gke-project string   The GKE project name\n      --gke-region string    The GKE project name\n  -h, --help                 help for label\n  -l, --label stringArray    The label key and value to set. Of the form 'label=value'\n  -n, --name string          The name of the cluster to unlock\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step cluster](/commands/jx_step_cluster/)\t - cluster [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_cluster_lock.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step cluster lock\"\nslug: jx_step_cluster_lock\nurl: /commands/jx_step_cluster_lock/\ndescription: list of jx commands\n---\n## jx step cluster lock\n\nLocks and joins a cluster using a lock label and optional label filters\n\n### Synopsis\n\nLocks and joins a cluster using a lock label and optional label filters.\n\n```\njx step cluster lock [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --fake                 Use the fake clusters client\n  -f, --filter stringArray   The labels of the form 'key=value' to filter the clusters to choose from\n      --gke-project string   The GKE project name\n      --gke-region string    The GKE project name\n  -h, --help                 help for lock\n  -l, --label string         The label name for the lock (default \"locked\")\n  -t, --test string          The name of the test to label on the cluster\n      --test-label string    The label name for the test (default \"test\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step cluster](/commands/jx_step_cluster/)\t - cluster [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_cluster_unlock.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step cluster unlock\"\nslug: jx_step_cluster_unlock\nurl: /commands/jx_step_cluster_unlock/\ndescription: list of jx commands\n---\n## jx step cluster unlock\n\nUnlocks the given cluster name so it joins the pool of test clusters again\n\n### Synopsis\n\nUnlocks the given cluster name so it joins the pool of test clusters again.\n\n```\njx step cluster unlock [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --fake                 Use the fake clusters client\n      --gke-project string   The GKE project name\n      --gke-region string    The GKE project name\n  -h, --help                 help for unlock\n  -l, --label string         The label name for the lock (default \"locked\")\n  -n, --name string          The name of the cluster to unlock\n      --test-label string    The label name for the test (default \"test\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step cluster](/commands/jx_step_cluster/)\t - cluster [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create\"\nslug: jx_step_create\nurl: /commands/jx_step_create/\ndescription: list of jx commands\n---\n## jx step create\n\ncreate [command]\n\n### Synopsis\n\ncreate [command]\n\n```\njx step create [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for create\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step create devpod](/commands/jx_step_create_devpod/)\t - Creates the DevPod workspace files\n* [jx step create helmfile](/commands/jx_step_create_helmfile/)\t - Alpha command, expect this to change or be removed, created: Jan 28 2020\n* [jx step create install](/commands/jx_step_create_install/)\t - Verifies the ingress configuration defaulting the ingress domain if necessary\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n* [jx step create task](/commands/jx_step_create_task/)\t - Creates a Tekton PipelineRun for the current folder or given build pack\n* [jx step create templated](/commands/jx_step_create_templated/)\t - Create a YAML config file from a Go template file and a jx requirements file\n* [jx step create values](/commands/jx_step_create_values/)\t - Creates the values.yaml file from a schema\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_devpod.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create devpod\"\nslug: jx_step_create_devpod\nurl: /commands/jx_step_create_devpod/\ndescription: list of jx commands\n---\n## jx step create devpod\n\nCreates the DevPod workspace files\n\n### Synopsis\n\nCreates the DevPod workspace files\n\n```\njx step create devpod workspace [flags]\n```\n\n### Examples\n\n```\n  # create the DevPod Workspace files\n  jx step create devpod workspace\n```\n\n### Options\n\n```\n  -d, --dir string               The workspace directory to write to (default \"/workspace\")\n  -h, --help                     help for devpod\n      --vscode                   If enabled also setup the VS Code settings to enable the devpodsh Terminal script\n      --vscode-home string       The VS Code default home dir file relative to the workspace home dir (default \"/root\")\n      --vscode-settings string   The VS Code settings file relative to the workspace home dir (default \".local/share/code-server/User/settings.json\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_helmfile.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create helmfile\"\nslug: jx_step_create_helmfile\nurl: /commands/jx_step_create_helmfile/\ndescription: list of jx commands\n---\n## jx step create helmfile\n\nAlpha command, expect this to change or be removed, created: Jan 28 2020\n\n### Synopsis\n\nAlpha command, expect this to change or be removed, created: Jan 28 2020\n** EXPERIMENTAL COMMAND ** Generates a helmfile from a jx-apps.yml see enhancement https://github.com/jenkins-x/enhancements/pull/1\n\n```\njx step create helmfile [flags]\n```\n\n### Examples\n\n```\n  # Create a new helmfile.yaml from a jx-apps.yaml\n  jx create helmfile\n```\n\n### Options\n\n```\n      --dir string           the directory to look for a 'jx-apps.yml' file (default \".\")\n  -h, --help                 help for helmfile\n      --outputDir string     The directory to write the helmfile.yaml file\n      --values stringArray   specify values in a YAML file or a URL(can specify multiple)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_install.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create install\"\nslug: jx_step_create_install\nurl: /commands/jx_step_create_install/\ndescription: list of jx commands\n---\n## jx step create install\n\nVerifies the ingress configuration defaulting the ingress domain if necessary\n\n### Synopsis\n\nVerifies the ingress configuration defaulting the ingress domain if necessary\n\n```\njx step create install values [flags]\n```\n\n### Examples\n\n```\n  # populate the ingress domain if not using a configured 'ingress.domain' setting\n  jx step verify ingress\n```\n\n### Options\n\n```\n  -d, --dir string                 the directory to look for the values.yaml file (default \".\")\n      --external-ip string         The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n  -h, --help                       help for install\n      --ingress-namespace string   The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string     The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --lazy-create string         Specify true/false as to whether to lazily create missing resources. If not specified it is enabled if Terraform is not specified in the jx-requirements.yml file\n  -n, --namespace string           the namespace to install into. Defaults to $DEPLOY_NAMESPACE if not\n      --provider string            Cloud service providing the Kubernetes cluster.  Supported providers: aks, alibaba, aws, eks, gke, icp, iks, jx-infra, kubernetes, oke, openshift, pks\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest\"\nslug: jx_step_create_pullrequest\nurl: /commands/jx_step_create_pullrequest/\ndescription: list of jx commands\n---\n## jx step create pullrequest\n\ncreate pullrequest [command]\n\n### Synopsis\n\ncreate pullrequest [command]\n\n```\njx step create pullrequest [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for pullrequest\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n* [jx step create pullrequest brew](/commands/jx_step_create_pullrequest_brew/)\t - Creates a Pull Request on a git repository updating the homebrew file\n* [jx step create pullrequest chart](/commands/jx_step_create_pullrequest_chart/)\t - Creates a Pull Request on a git repository updating the Chart\n* [jx step create pullrequest docker](/commands/jx_step_create_pullrequest_docker/)\t - Creates a Pull Request on a git repository updating the docker file\n* [jx step create pullrequest go](/commands/jx_step_create_pullrequest_go/)\t - Creates a Pull Request on a git repository updating a go module dependency\n* [jx step create pullrequest make](/commands/jx_step_create_pullrequest_make/)\t - Creates a Pull Request on a git repository, doing an update to a Makefile\n* [jx step create pullrequest quickstarts](/commands/jx_step_create_pullrequest_quickstarts/)\t - Creates a Pull Request on a version stream to include all the quickstarts found in a github organisation\n* [jx step create pullrequest regex](/commands/jx_step_create_pullrequest_regex/)\t - Creates a Pull Request on a git repository, doing an update using the provided regex\n* [jx step create pullrequest repositories](/commands/jx_step_create_pullrequest_repositories/)\t - Creates a Pull Request on a 'jx boot' git repository to mirror all the SourceRepository CRDs into the repositories Chart\n* [jx step create pullrequest versions](/commands/jx_step_create_pullrequest_versions/)\t - Creates a Pull Request on the versions git repository for a new versionstream of a chart/package\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_brew.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest brew\"\nslug: jx_step_create_pullrequest_brew\nurl: /commands/jx_step_create_pullrequest_brew/\ndescription: list of jx commands\n---\n## jx step create pullrequest brew\n\nCreates a Pull Request on a git repository updating the homebrew file\n\n### Synopsis\n\nCreates a Pull Request on a git repository updating any lines in the Dockerfile that start with FROM, ENV or ARG=\n\n```\njx step create pullrequest brew [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -h, --help                 help for brew\n      --labels stringArray   Labels to add to the created PR\n  -r, --repo stringArray     Git repo to update\n      --sha string           The sha of the brew archive to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_chart.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest chart\"\nslug: jx_step_create_pullrequest_chart\nurl: /commands/jx_step_create_pullrequest_chart/\ndescription: list of jx commands\n---\n## jx step create pullrequest chart\n\nCreates a Pull Request on a git repository updating the Chart\n\n### Synopsis\n\nCreates a Pull Request on a git repository updating the requirements.yaml and values.yaml with the new version\n\n```\njx step create pullrequest chart [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -h, --help                 help for chart\n      --labels stringArray   Labels to add to the created PR\n  -n, --name stringArray     The name of the property to update\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_docker.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest docker\"\nslug: jx_step_create_pullrequest_docker\nurl: /commands/jx_step_create_pullrequest_docker/\ndescription: list of jx commands\n---\n## jx step create pullrequest docker\n\nCreates a Pull Request on a git repository updating the docker file\n\n### Synopsis\n\nCreates a Pull Request on a git repository updating any lines in the Dockerfile that start with FROM, ENV or ARG=\n\n```\njx step create pullrequest docker [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -h, --help                 help for docker\n      --labels stringArray   Labels to add to the created PR\n  -n, --name stringArray     The name of the property to update\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_go.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest go\"\nslug: jx_step_create_pullrequest_go\nurl: /commands/jx_step_create_pullrequest_go/\ndescription: list of jx commands\n---\n## jx step create pullrequest go\n\nCreates a Pull Request on a git repository updating a go module dependency\n\n### Synopsis\n\nCreates a Pull Request to change a go module dependency, updating the go.mod and go.sum files to use a new version \n\nFiles named Makefile or Makefile. * will be updated\n\n```\njx step create pullrequest go [flags]\n```\n\n### Examples\n\n```\n  # update a go dependency\n  jx step create pr go --name github.com/myorg/myrepo --version v1.2.3 --repo https://github.com/jenkins-x/cloud-environments.git\n  \n  # update a go dependency using a custom build step (to update the 'go.sum' file)\n  jx step create pr go --name github.com/myorg/myrepo --version v1.2.3 --build \"make something\" --repo https://github.com/jenkins-x/cloud-environments.git\n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --build string         The build command to update the 'go.sum' file after the change to the source (default \"make build\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n      --fail-on-build        Should we fail to create the Pull Request if the build command fails. Its common for incompatible changes to the go code to fail to build so we usually want to go ahead with the Pull Request anyway\n  -h, --help                 help for go\n      --labels stringArray   Labels to add to the created PR\n      --name string          The name of the go module dependency to use when doing updates\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_make.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest make\"\nslug: jx_step_create_pullrequest_make\nurl: /commands/jx_step_create_pullrequest_make/\ndescription: list of jx commands\n---\n## jx step create pullrequest make\n\nCreates a Pull Request on a git repository, doing an update to a Makefile\n\n### Synopsis\n\nCreates a Pull Request updating a Makefile so that any variables defined as <name>:= <value>will have the value replaced with the new version \n\nFiles named Makefile or Makefile. * will be updated\n\n```\njx step create pullrequest make [flags]\n```\n\n### Examples\n\n```\n  jx step create pr make --name CHART_VERSION --version 1.2.3 --repo https://github.com/jenkins-x/cloud-environments.git\n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -h, --help                 help for make\n      --labels stringArray   Labels to add to the created PR\n      --name string          The name of the variable to use when doing updates\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_quickstarts.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest quickstarts\"\nslug: jx_step_create_pullrequest_quickstarts\nurl: /commands/jx_step_create_pullrequest_quickstarts/\ndescription: list of jx commands\n---\n## jx step create pullrequest quickstarts\n\nCreates a Pull Request on a version stream to include all the quickstarts found in a github organisation\n\n### Synopsis\n\nCreates a Pull Request a version stream to include all the quickstarts found in a github organisation\n\n```\njx step create pullrequest quickstarts [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --base string            The branch to create the pull request into (default \"master\")\n      --branch string          Branch to clone and generate a pull request from (default \"master\")\n      --component string       The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run                Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -x, --excludes stringArray   The name patterns to exclude (default [WIP-*])\n  -f, --filter stringArray     The name patterns to include - such as '*' for all names (default [*])\n  -k, --git-kind string        The kind of git provider (default \"github\")\n      --git-server string      The git server to find the quickstarts (default \"https://github.com\")\n  -h, --help                   help for quickstarts\n      --labels stringArray     Labels to add to the created PR\n  -n, --owner string           The name of the git owner (user or organisation) to query for quickstart git repositories (default \"jenkins-x-quickstarts\")\n  -r, --repo stringArray       Git repo to update\n      --skip-auto-merge        Disable auto merge of the PR if status checks pass\n      --src-repo string        The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string         The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_regex.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest regex\"\nslug: jx_step_create_pullrequest_regex\nurl: /commands/jx_step_create_pullrequest_regex/\ndescription: list of jx commands\n---\n## jx step create pullrequest regex\n\nCreates a Pull Request on a git repository, doing an update using the provided regex\n\n### Synopsis\n\nCreates a Pull Request on a git repository updating files using a regex.\n  \n      Any named capturing group called \"version\" will be replaced. If there are no named capturing groups, then the\n      all the capturing group will be used.\n  \n\"\n\n```\njx step create pullrequest regex [flags]\n```\n\n### Examples\n\n```\n  # Create a PR to change the value of release = <value> to $VERSION in the config.toml file\n  ./build/linux/jx step create pr regex --regex \"\\s*release = \\\"(.*)\\\"\" --version $VERSION --files config.toml \\\n  --repo https://github.com/jenkins-x/jx-docs.git\n  \n  # Create a PR to change the value of the ImageTag: <value> to ${VERSION} where the previous line is Image:\n  # \"jenkinsxio/jenkinsx\" in the jenkins-x-platform/values.yaml file\n  jx step create pr regex --regex \"^(?m)\\s+Image: \\\"jenkinsxio\\/jenkinsx\\\"\\s+ImageTag: \\\"(.*)\\\"$\" \\\n  --version ${VERSION} --files values.yaml --repo https://github.com/jenkins-x/jenkins-x-platform.git\n  \n  # Create a PR to change the value of the named capture to $VERSION in the config.toml file\n  ./build/linux/jx step create pr regex --regex \"\\s*release = \\\"(?P<version>.*)\\\"\" --version $VERSION --files config.toml \\\n  --repo https://github.com/jenkins-x/jx-docs.git\n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n      --files stringArray    A glob describing the files to change\n  -h, --help                 help for regex\n      --labels stringArray   Labels to add to the created PR\n      --regex stringArray    The regex to use when doing updates\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_repositories.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest repositories\"\nslug: jx_step_create_pullrequest_repositories\nurl: /commands/jx_step_create_pullrequest_repositories/\ndescription: list of jx commands\n---\n## jx step create pullrequest repositories\n\nCreates a Pull Request on a 'jx boot' git repository to mirror all the SourceRepository CRDs into the repositories Chart\n\n### Synopsis\n\nCreates a Pull Request on a 'jx boot' git repository to mirror all the SourceRepository CRDs into the repositories Chart\n\n```\njx step create pullrequest repositories [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --base string          The branch to create the pull request into (default \"master\")\n      --branch string        Branch to clone and generate a pull request from (default \"master\")\n      --component string     The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run              Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -h, --help                 help for repositories\n      --labels stringArray   Labels to add to the created PR\n  -r, --repo stringArray     Git repo to update\n      --skip-auto-merge      Disable auto merge of the PR if status checks pass\n      --src-repo string      The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string       The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_pullrequest_versions.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create pullrequest versions\"\nslug: jx_step_create_pullrequest_versions\nurl: /commands/jx_step_create_pullrequest_versions/\ndescription: list of jx commands\n---\n## jx step create pullrequest versions\n\nCreates a Pull Request on the versions git repository for a new versionstream of a chart/package\n\n### Synopsis\n\nCreates a Pull Request on the versions git repository for a new versionstream of a chart/package\n\n```\njx step create pullrequest versions [flags]\n```\n\n### Examples\n\n```\n  # create a Pull Request to update a chart versionstream\n  jx step create pr versions -n jenkins-x/prow -v 1.2.3\n  \n  # create a Pull Request to update a chart versionstream to the latest found in the helm repo\n  jx step create pr versions -n jenkins-x/prow\n  \n  # create a Pull Request to update all charts matching a filter to the latest found in the helm repo\n  jx step create pr versions pr -f \"*\"\n  \n  # create a Pull Request to update all charts in the 'jenkins-x' chart repository to the latest found in the helm repo\n  jx step create pr versions -f \"jenkins-x/*\"\n  \n  # create a Pull Request to update all charts in the 'jenkins-x' chart repository and update the BDD test images\n  jx step create pr versions -f \"jenkins-x/*\" --images\n```\n\n### Options\n\n```\n      --base string            The branch to create the pull request into (default \"master\")\n      --branch string          Branch to clone and generate a pull request from (default \"master\")\n      --component string       The component of the git repo which caused this change; useful if you have a complex or monorepo setup and want to differentiate between different components from the same repo\n      --dry-run                Perform a dry run, the change will be generated and committed, but not pushed or have a PR created\n  -x, --excludes stringArray   The name patterns to exclude\n  -f, --filter stringArray     The name patterns to include - such as '*' for all names\n  -h, --help                   help for versions\n      --images                 Update the tekton builder images for the Jenkins X Versions BDD tests\n  -k, --kind stringArray       The kinds of versionstream. Possible values: charts, packages, docker, git. (default [charts,git])\n      --labels stringArray     Labels to add to the created PR\n  -n, --name string            The name of the versionstream to update. e.g. the name of the chart like 'jenkins-x/prow'\n  -r, --repo stringArray       Git repo to update\n      --skip-auto-merge        Disable auto merge of the PR if status checks pass\n      --src-repo string        The git repo which caused this change; if this is a dependency update this will cause commit messages to be generated which can be parsed by jx step changelog. By default this will be read from the environment variable REPO_URL\n  -v, --version string         The version to change. If no version is supplied the latest version is found\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create pullrequest](/commands/jx_step_create_pullrequest/)\t - create pullrequest [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_task.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create task\"\nslug: jx_step_create_task\nurl: /commands/jx_step_create_task/\ndescription: list of jx commands\n---\n## jx step create task\n\nCreates a Tekton PipelineRun for the current folder or given build pack\n\n### Synopsis\n\nCreates a Tekton Pipeline Run for a project\n\n```\njx step create task [flags]\n```\n\n### Examples\n\n```\n  # create a Tekton Pipeline Run and render to the console\n  jx step create task\n  \n  # create a Tekton Pipeline Task\n  jx step create task -o mytask.yaml\n  \n  # view the steps that would be created\n  jx step create task --view\n```\n\n### Options\n\n```\n      --branch string                The git branch to trigger the build in. Defaults to the current local branch name\n      --branch-as-revision           Use the provided branch as the revision for release pipelines, not the version tag\n      --build-number string          The build number\n      --clone-dir string             Specify the directory of the directory containing the git clone\n      --clone-git-url string         Specify the git URL to clone to a temporary directory to get the source code\n  -c, --context string               The pipeline context if there are multiple separate pipelines for a given branch\n      --default-image string         Specify the docker image to use if there is no image specified for a step and there's no Pod Template (default \"gcr.io/jenkinsxio/builder-maven\")\n      --delete-temp-dir              Deletes the temporary directory of cloned files if using the 'clone-git-url' option (default true)\n      --docker-registry string       The Docker Registry host name to use which is added as a prefix to docker images\n      --docker-registry-org string   The Docker registry organisation. If blank the git repository owner is used\n      --dry-run                      Disables creating the Pipeline resources in the kubernetes cluster and just outputs the generated Task to the console or output file, without side effects\n      --duration duration            Retry duration when trying to create a PipelineRun (default 30s)\n      --effective-pipeline           Just view the effective pipeline definition that would be created\n      --end-step string              When in interpret mode this specifies the step to end at\n  -e, --env stringArray              List of custom environment variables to be applied to resources that are created\n  -h, --help                         help for task\n      --image string                 Specify a custom image to use for the steps which overrides the image in the PodTemplates\n      --interpret                    Enable interpret mode. Rather than spinning up Tekton CRDs to create a Pod just invoke the commands in the current shell directly. Useful for bootstrapping installations of Jenkins X and tekton using a pipeline before you have installed Tekton.\n      --kaniko-flags string          Optional flags to pass to kaniko builds; such as to indicate --insecure docker registry being used\n      --kaniko-image string          The docker image for Kaniko (default \"gcr.io/kaniko-project/executor:v0.22.0\")\n      --kaniko-secret string         The name of the kaniko secret (default \"kaniko-secret\")\n      --kaniko-secret-key string     The key in the Kaniko Secret to mount (default \"kaniko-secret\")\n      --kaniko-secret-mount string   The mount point of the Kaniko secret (default \"/kaniko-secret/secret.json\")\n  -k, --kind string                  The kind of pipeline to create such as: release, pullrequest, feature (default \"release\")\n  -l, --label stringArray            List of custom labels to be applied to resources that are created\n      --no-apply                     Disables creating the Pipeline resources in the kubernetes cluster and just outputs the generated Task to the console or output file\n      --no-kaniko                    Disables using kaniko directly for building docker images\n      --no-release-prepare           Disables creating the release version number and tagging git and triggering the release pipeline from the new tag\n  -o, --output string                The directory to write the output to as YAML. Defaults to 'out' (default \"out\")\n  -p, --pack string                  The build pack name. If none is specified its discovered from the source code\n      --pr-number string             If a Pull Request this is it's number\n      --project-id string            The cloud project ID. If not specified we default to the install project\n  -r, --ref string                   The Git reference (branch,tag,sha) in the Git repository to use\n      --revision string              The git revision to checkout, can be a branch name or git sha\n      --semantic-release             Enable semantic releases\n      --service-account string       The Kubernetes ServiceAccount to use to run the pipeline (default \"tekton-bot\")\n      --source string                The name of the source repository (default \"source\")\n      --start-step string            When in interpret mode this specifies the step to start at\n      --target-path string           The target path appended to /workspace/${source} to clone the source code\n  -u, --url string                   The URL for the build pack Git repository\n      --view                         Just view the steps that would be created\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_templated.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create templated\"\nslug: jx_step_create_templated\nurl: /commands/jx_step_create_templated/\ndescription: list of jx commands\n---\n## jx step create templated\n\nCreate a YAML config file from a Go template file and a jx requirements file\n\n### Synopsis\n\nCreates a config file from a Go template file and a jx requirements file\n\n```\njx step create templated config [flags]\n```\n\n### Examples\n\n```\n  # creates a config file from a template file and a jx requirements file\n  jx step create templated config -t config.tmpl.yml -c config.yml\n```\n\n### Options\n\n```\n  -c, --config-file string        The rendered config YAML file\n  -h, --help                      help for templated\n  -p, --parameters-file string    The values file used as parameters in the template file\n  -r, --requirements-dir string   The jx requirements file directory (default \".\")\n  -t, --template-file string      The template file used to render the config YAML file\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_create_values.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step create values\"\nslug: jx_step_create_values\nurl: /commands/jx_step_create_values/\ndescription: list of jx commands\n---\n## jx step create values\n\nCreates the values.yaml file from a schema\n\n### Synopsis\n\nCreates a values.yaml from a schema\n\n```\njx step create values [flags]\n```\n\n### Examples\n\n```\n  # create the values.yaml file from values.schema.json in the current directory\n  jx step create values\n  \n  # create the values.yaml file from values.schema.json in the /path/to/values directory\n  jx step create values -d /path/to/values\n  \n  # create the cheese.yaml file from cheese.schema.json in the current directory\n  jx step create values --name cheese\n```\n\n### Options\n\n```\n  -d, --dir string                the directory to look for the <kind>.schema.json and write the <kind>.yaml, defaults to the current directory\n  -h, --help                      help for values\n      --name string               the kind of the file to create (and, by default, the schema name) (default \"values\")\n      --namespace string          the namespace Jenkins X is installed into. If not specified it defaults to $DEPLOY_NAMESPACE or else defaults to the current kubernetes namespace\n      --out string                the path to the file to create, overrides --dir and --name\n      --schema string             the path to the schema file, overrides --dir and --name\n      --secret-base-path string   the secret path used to store secrets in vault / file system. Typically a unique name per cluster+team. If none is specified we will default it to the cluster name from the jx-requirements.yml file in the current or a parent directory.\n      --secrets-scheme string     the scheme to store/reference any secrets in, valid options are vault and local. If none are specified we will default it from the jx-requirements.yml file in the current or a parent directory.\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step create](/commands/jx_step_create/)\t - create [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_credential.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step credential\"\nslug: jx_step_credential\nurl: /commands/jx_step_credential/\ndescription: list of jx commands\n---\n## jx step credential\n\nReturns a secret entry for easy scripting in pipeline steps\n\n### Synopsis\n\nReturns a credential from a Secret for easy scripting in pipeline steps. \n\nSupports the https://jenkinsci.github.io/kubernetes-credentials-provider-plugin/examples/\n\nIf you specify --optional then if the key or secret doesn't exist then the command will only print a warning and will not error.\n\n```\njx step credential [flags]\n```\n\n### Examples\n\n```\n  # get the password of a secret 'foo' which uses the Jenkins Credentials Provider labels\n  export MY_PWD=\"$(jx step credential -s foo)\"\n  \n  # get the password entry of a secret 'foo' as an environment variable\n  export MY_PWD=\"$(jx step credential -s foo -k passwordj)\"\n  \n  #\u00a0create a local file from a file based secret using the Jenkins Credentials Provider labels\n  export MY_KEY_FILE=\"$(jx step credential -s foo)\"\n  \n  #\u00a0create a local file called cheese from a given key\n  export MY_KEY_FILE=\"$(jx step credential -s foo -f cheese -k data)\"\n  \n  #\u00a0create a local file called cheese from a given key, if the key exists'\n  export MY_KEY_FILE=\"$(jx step credential -s foo -f cheese -k data --optional)\"\n```\n\n### Options\n\n```\n  -f, --file string        the key for the filename to use if this is a file based Secret\n  -h, --help               help for credential\n  -k, --key string         the key in the Secret to output\n  -s, --name string        the name of the Secret\n  -n, --namespace string   the namespace to look for a Secret\n      --optional           if true, then the command will only warn (not error) if the secret or the key doesn't exist\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_custom.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step custom\"\nslug: jx_step_custom\nurl: /commands/jx_step_custom/\ndescription: list of jx commands\n---\n## jx step custom\n\nTriggers a pipeline in a custom Jenkins server using the local Jenkinsfile\n\n### Synopsis\n\nThis pipeline step lazily creates a Pipeline job inside a custom Jenkins App and then triggers it\n\n```\njx step custom pipeline [flags]\n```\n\n### Examples\n\n```\n  # triggers the Jenkinsfile in the current directory in the custom Jenkins App\n  jx step custom pipeline\n```\n\n### Options\n\n```\n  -d, --dir string             the directory to look for the Jenkisnfile inside (default \".\")\n  -h, --help                   help for custom\n  -j, --jenkins-name string    The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n  -p, --jenkins-path string    The Jenkins folder path to create the pipeline inside. If not specified it defaults to the git 'owner/repoName/branch'\n  -f, --jenkinsfile string     The name of the Jenkinsfile to use (default \"Jenkinsfile\")\n      --multi-branch-project   Use a Multi Branch Project in Jenkins\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_e2e.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step e2e\"\nslug: jx_step_e2e\nurl: /commands/jx_step_e2e/\ndescription: list of jx commands\n---\n## jx step e2e\n\ne2e [command]\n\n### Synopsis\n\ne2e [command]\n\n```\njx step e2e [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for e2e\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step e2e gc](/commands/jx_step_e2e_gc/)\t - Removes unused e2e clusters\n* [jx step e2e label](/commands/jx_step_e2e_label/)\t - Removes unused e2e clusters\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_e2e_gc.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step e2e gc\"\nslug: jx_step_e2e_gc\nurl: /commands/jx_step_e2e_gc/\ndescription: list of jx commands\n---\n## jx step e2e gc\n\nRemoves unused e2e clusters\n\n### Synopsis\n\nThis pipeline step removes stale E2E test clusters\n\n```\njx step e2e gc [flags]\n```\n\n### Examples\n\n```\n  # delete stale E2E test clusters\n  jx step e2e gc\n```\n\n### Options\n\n```\n  -d, --duration int            How many hours old a cluster should be before it is deleted if it does not have a --delete tag (default 2)\n  -h, --help                    help for gc\n  -p, --project-id string       Google Project ID to delete cluster from\n      --providers stringArray   The providers to run the cleanup for (default [gke])\n      --region string           GKE region to use. Default: europe-west1-c (default \"europe-west1-c\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step e2e](/commands/jx_step_e2e/)\t - e2e [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_e2e_label.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step e2e label\"\nslug: jx_step_e2e_label\nurl: /commands/jx_step_e2e_label/\ndescription: list of jx commands\n---\n## jx step e2e label\n\nRemoves unused e2e clusters\n\n### Synopsis\n\nAdd a label to a cluster used for e2e testing\n\n```\njx step e2e label [flags]\n```\n\n### Examples\n\n```\n  # Mark a cluster to not be deleted by the gc\n  jx step e2e label --keep clusterName\n  \n  # Mark a cluster to be deleted by the gc\n  jx step e2e label --delete clusterName\n```\n\n### Options\n\n```\n  -d, --delete              Add a label top mark cluster for deletion\n  -h, --help                help for label\n  -k, --keep                Add a label top mark cluster for non deletion\n  -p, --project-id string   Google Project ID to delete cluster from\n      --region string       GKE region to use. Default: europe-west1-c (default \"europe-west1-c\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step e2e](/commands/jx_step_e2e/)\t - e2e [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_env.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step env\"\nslug: jx_step_env\nurl: /commands/jx_step_env/\ndescription: list of jx commands\n---\n## jx step env\n\nenv [command]\n\n### Synopsis\n\nenv [command]\n\n```\njx step env [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for env\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step env apply](/commands/jx_step_env_apply/)\t - Applies the GitOps source code to an environment\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_env_apply.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step env apply\"\nslug: jx_step_env_apply\nurl: /commands/jx_step_env_apply/\ndescription: list of jx commands\n---\n## jx step env apply\n\nApplies the GitOps source code to an environment\n\n### Synopsis\n\nApplies the GitOps source code (by default in the current directory) to the Environment. \n\nThis command will lazily create an environment, setup Helm and build and apply any helm charts defined in the env/Chart.yaml\n\n```\njx step env apply [flags]\n```\n\n### Examples\n\n```\n  # setup and/or update the helm charts for the environment\n  jx step env apply --namespace jx-staging\n```\n\n### Options\n\n```\n      --change-namespace   Set the given namespace as the current namespace in Kubernetes configuration\n  -d, --dir string         The directory to look for the environment chart\n  -f, --force              Whether to to pass '--force' to helm to help deal with upgrading if a previous promote failed (default true)\n  -h, --help               help for apply\n  -r, --name string        The name of the release\n  -n, --namespace string   The Kubernetes namespace to apply the helm charts to\n      --no-helm-version    Don't set Chart version before applying\n      --vault              Environment secrets are stored in vault\n      --wait               Wait for Kubernetes readiness probe to confirm deployment (default true)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step env](/commands/jx_step_env/)\t - env [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_expose.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step expose\"\nslug: jx_step_expose\nurl: /commands/jx_step_expose/\ndescription: list of jx commands\n---\n## jx step expose\n\nThis step generates Ingress resources for exposed services\n\n### Synopsis\n\n\"This step generates Ingress resources for exposed services\n\n```\njx step expose [flags]\n```\n\n### Examples\n\n```\n  # runs the expose step as part of the Staging/Production pipeline\n  # looking in the env folder for the ingress template 'ingress.tmpl.yaml'\n  jx step expose -d env\n```\n\n### Options\n\n```\n  -d, --dir string         the directory to look for the install requirements file (default \".\")\n  -h, --help               help for expose\n      --namespace string   the namespace that Jenkins X will be booted into. If not specified it defaults to $DEPLOY_NAMESPACE\n  -s, --selector string    the optional label selector to only process a subset of the Service resources\n  -t, --template string    the go template to generate the Ingress YAML for each service\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_get.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step get\"\nslug: jx_step_get\nurl: /commands/jx_step_get/\ndescription: list of jx commands\n---\n## jx step get\n\nget [command]\n\n### Synopsis\n\nget [command]\n\n```\njx step get [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for get\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step get buildnumber](/commands/jx_step_get_buildnumber/)\t - Outputs the current build number from environment variables or using the Downward API inside build pods\n* [jx step get dependency-version](/commands/jx_step_get_dependency-version/)\t - Outputs the version of a dependency from the Jenkins X dependency matrix\n* [jx step get version-changeset](/commands/jx_step_get_version-changeset/)\t - Creates environment variables from the differences of versions between jenkins-x-version branches\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_get_buildnumber.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step get buildnumber\"\nslug: jx_step_get_buildnumber\nurl: /commands/jx_step_get_buildnumber/\ndescription: list of jx commands\n---\n## jx step get buildnumber\n\nOutputs the current build number from environment variables or using the Downward API inside build pods\n\n### Synopsis\n\nOutputs the current build number from environment variables or using the Downward API inside build pods\n\n```\njx step get buildnumber [flags]\n```\n\n### Examples\n\n```\n  # dislay the current build number\n  jx step get buildnumber\n```\n\n### Options\n\n```\n  -h, --help   help for buildnumber\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step get](/commands/jx_step_get/)\t - get [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_get_dependency-version.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step get dependency-version\"\nslug: jx_step_get_dependency-version\nurl: /commands/jx_step_get_dependency-version/\ndescription: list of jx commands\n---\n## jx step get dependency-version\n\nOutputs the version of a dependency from the Jenkins X dependency matrix\n\n### Synopsis\n\nOutputs the version of a specific dependency from the dependency matrix in the version stream or a local directory\n\n```\njx step get dependency-version [flags]\n```\n\n### Examples\n\n```\n  # display the version of jx in the version stream\n  jx step get dependency-version --host=github.com --owner=jenkins-x --repo=jx\n  \n  # display the version of jx in a local directory containing a \"dependency-matrix\" subdirectory, only logging the version\n  jx step get dependency-version --host=github.com --owner=jenkins-x --repo=jx --dir=/some/directory --short\n```\n\n### Options\n\n```\n      --dir string     Directory to read dependency matrix from instead of using the version stream\n  -h, --help           help for dependency-version\n      --host string    Host for dependency repo in the matrix\n      --owner string   Owner for dependency repo in the matrix\n      --repo string    Repo name for dependency repo in the matrix\n      --short          Display the dependency version only\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step get](/commands/jx_step_get/)\t - get [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_get_version-changeset.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step get version-changeset\"\nslug: jx_step_get_version-changeset\nurl: /commands/jx_step_get_version-changeset/\ndescription: list of jx commands\n---\n## jx step get version-changeset\n\nCreates environment variables from the differences of versions between jenkins-x-version branches\n\n### Synopsis\n\nThis pipeline step generates environment variables from the differences of versions between jenkins-x-version branches\n\n```\njx step get version-changeset [flags]\n```\n\n### Examples\n\n```\n  # This pipeline step generates environment variables from the differences of versions between jenkins-x-version PR21 and the master branch\n  jx step get version-changeset --pr 21\n  \n  # This pipeline step generates environment variables from the differences of versions between jenkins-x-version PR21 and a branch called stuff\n  jx step get version-changeset --stable-branch stuff --pr 21\n```\n\n### Options\n\n```\n  -h, --help                    help for version-changeset\n      --pr string               the PR in the versions repository top clone\n  -r, --repo string             Jenkins X versions Git repo\n      --stable-branch string    the versions git repository branch to compare against (default \"master\")\n      --testing-branch string   the versions git repository branch to clone (default \"master\")\n      --versions-dir string     the directory containing the versions repo\n      --versions-ref string     Jenkins X versions Git repository reference (tag, branch, sha etc)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step get](/commands/jx_step_get/)\t - get [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git\"\nslug: jx_step_git\nurl: /commands/jx_step_git/\ndescription: list of jx commands\n---\n## jx step git\n\ngit [command]\n\n### Synopsis\n\ngit [command]\n\n```\njx step git [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for git\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step git close](/commands/jx_step_git_close/)\t - Closes issue trackers, wikis and projects\n* [jx step git credentials](/commands/jx_step_git_credentials/)\t - Creates the Git credentials file for the current pipeline\n* [jx step git envs](/commands/jx_step_git_envs/)\t - Creates the Git environment variables for the current pipeline Git credentials\n* [jx step git fork-and-clone](/commands/jx_step_git_fork-and-clone/)\t - Forks and clones a git repo\n* [jx step git merge](/commands/jx_step_git_merge/)\t - Merge a number of SHAs into the HEAD of master\n* [jx step git validate](/commands/jx_step_git_validate/)\t - Validates the .gitconfig is correctly configured\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_close.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git close\"\nslug: jx_step_git_close\nurl: /commands/jx_step_git_close/\ndescription: list of jx commands\n---\n## jx step git close\n\nCloses issue trackers, wikis and projects\n\n### Synopsis\n\nThis pipeline step will close git provider issue trackers, wikis and projects that are not in use (no issues, no wiki pages, no projects). It will log any it can't close, indicating why.\n\n```\njx step git close [flags]\n```\n\n### Examples\n\n```\n  # Close unused issue trackers, wikis and projects for organizations\n  jx step git close --org https://github.com/jenkins-x --org https://github.com/jenkins-x\n  \n  # Close unused issue trackers, wikis and projects for an organization\n  jx step git close --org https://github.com/jenkins-x --include jenkins-x/jx\n```\n\n### Options\n\n```\n      --dir string            The directory in which the git repo is checked out, by default the working directory\n      --dry-run               execute as a dry run - print what would be done but exit before making any changes\n      --exclude stringArray   A repo to ignore when closing issue trackers, wikis and projects e.g. jenkins-x/jx\n  -h, --help                  help for close\n      --include stringArray   If any includes are specified then only those repos will have issue trackers, wikis and projects closed\n      --org stringArray       An org to close issue trackers, wikis and projects for\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_credentials.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git credentials\"\nslug: jx_step_git_credentials\nurl: /commands/jx_step_git_credentials/\ndescription: list of jx commands\n---\n## jx step git credentials\n\nCreates the Git credentials file for the current pipeline\n\n### Synopsis\n\nThis pipeline step generates a Git credentials file for the current Git provider secrets\n\n```\njx step git credentials [flags]\n```\n\n### Examples\n\n```\n  # generate the Git credentials file in the canonical location\n  jx step git credentials\n  \n  # generate the Git credentials to a output file\n  jx step git credentials -o /tmp/mycreds\n  \n  # respond to a gitcredentials request\n  jx step git credentials --credential-helper\n```\n\n### Options\n\n```\n      --credential-helper           respond to a gitcredentials request\n  -s, --credentials-secret string   The secret name to read the credentials from\n      --git-kind string             The git kind. e.g. github, bitbucketserver etc\n  -g, --github-app-owner string     Deprecated - The owner (organisation or user name) if using GitHub App based tokens\n  -h, --help                        help for credentials\n  -o, --output string               The output file name\n  -r, --repo-owner string           The owner (organisation or user name) if using GitHub App based tokens\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_envs.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git envs\"\nslug: jx_step_git_envs\nurl: /commands/jx_step_git_envs/\ndescription: list of jx commands\n---\n## jx step git envs\n\nCreates the Git environment variables for the current pipeline Git credentials\n\n### Synopsis\n\nThis pipeline step generates a Git environment variables from the current Git provider pipeline Secrets\n\n```\njx step git envs [flags]\n```\n\n### Examples\n\n```\n  # Sets the Git environment variables for the current GitHub provider\n  jx step git envs\n  \n  # Sets the Gie environment variables for the current Gtilab provider\n  jx step git envs --service-kind=gitlab\n```\n\n### Options\n\n```\n  -h, --help                  help for envs\n      --service-kind string   The kind of git service (default \"github\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_fork-and-clone.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git fork-and-clone\"\nslug: jx_step_git_fork-and-clone\nurl: /commands/jx_step_git_fork-and-clone/\ndescription: list of jx commands\n---\n## jx step git fork-and-clone\n\nForks and clones a git repo\n\n### Synopsis\n\nThis pipeline step will clone a git repo, creating a fork if required. The fork is created if the owner of the repo is not the current git user (and that forking the git repo is allowed).\n\n```\njx step git fork-and-clone [flags]\n```\n\n### Examples\n\n```\n  # Fork and clone the jx repo\n  jx step git fork-and-clone https://github.com/jenkins-x/jx.git\n  \n  # Duplicate and clone the jx repo. This will create a new repo and mirror the contents of the source repo into,\n  # but it won't mark it as a fork in the git provider\n  jx step git fork-and-clone https://github.com/jenkins-x/jx.git --duplicate\n```\n\n### Options\n\n```\n      --base string     The base ref to start from (default \"master\")\n      --dir string      The directory in which the git repo is checked out, by default the working directory\n  -h, --help            help for fork-and-clone\n      --print-out-dir   prints the directory the fork has been cloned to on stdout\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_merge.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git merge\"\nslug: jx_step_git_merge\nurl: /commands/jx_step_git_merge/\ndescription: list of jx commands\n---\n## jx step git merge\n\nMerge a number of SHAs into the HEAD of master\n\n### Synopsis\n\nThis pipeline step merges any SHAs specified into the HEAD of master. \n  \nIf no SHAs are specified then the PULL _REFS environment variable will be parsed for a branch:sha comma separated list of shas to merge. For example: \n\nmaster:ef08a6cd194c2687d4bc12df6bb8a86f53c348ba,2739:5b351f4eae3c4afbb90dd7787f8bf2f8c454723f,2822:bac2a1f34fd54811fb767f69543f59eb3949b2a5\n\n```\njx step git merge [flags]\n```\n\n### Examples\n\n```\n  # Merge the SHAs from the PULL_REFS environment variable\n  jx step git merge\n  \n  # Merge the SHA into the HEAD of master\n  jx step git merge --sha 123456a\n  \n  # Merge a number of SHAs into the HEAD of master\n  jx step git merge --sha 123456a --sha 789012b\n```\n\n### Options\n\n```\n      --baseBranch string   The branch to merge to, if not specified then the  first entry in PULL_REFS is used \n      --baseSHA string      The SHA to use on the base branch, if not specified then the first entry in PULL_REFS is used\n      --dir string          The directory in which the git repo is checked out\n  -h, --help                help for merge\n      --remote string       The name of the remote (default \"origin\")\n      --sha stringArray     The SHA(s) to merge, if not specified then the value of the env var PULL_REFS is used\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_git_validate.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step git validate\"\nslug: jx_step_git_validate\nurl: /commands/jx_step_git_validate/\ndescription: list of jx commands\n---\n## jx step git validate\n\nValidates the .gitconfig is correctly configured\n\n### Synopsis\n\nThis pipeline step validates that the .gitconfig is correctly configured\n\n```\njx step git validate [flags]\n```\n\n### Examples\n\n```\n  # validates the user.name & user.email values are set in the .gitconfig\n  jx step git validate\n```\n\n### Options\n\n```\n  -h, --help   help for validate\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step git](/commands/jx_step_git/)\t - git [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_gpg.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step gpg\"\nslug: jx_step_gpg\nurl: /commands/jx_step_gpg/\ndescription: list of jx commands\n---\n## jx step gpg\n\nCreates the GPG credentials file for GPG signing releases\n\n### Synopsis\n\nThis pipeline step generates GPG credentials files from the jenkins-release-gpg secret\n\n```\njx step gpg credentials [flags]\n```\n\n### Examples\n\n```\n  # generate the GPG credentials file in the canonical location\n  jx step gpg credentials\n  \n  # generate the git credentials to a output file\n  jx step gpg credentials -o /tmp/mycreds\n```\n\n### Options\n\n```\n  -h, --help            help for gpg\n  -o, --output string   The output directory\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm\"\nslug: jx_step_helm\nurl: /commands/jx_step_helm/\ndescription: list of jx commands\n---\n## jx step helm\n\nhelm [command]\n\n### Synopsis\n\nhelm [command]\n\n```\njx step helm [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for helm\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step helm apply](/commands/jx_step_helm_apply/)\t - Applies the helm chart in a given directory\n* [jx step helm build](/commands/jx_step_helm_build/)\t - Builds the helm chart in a given directory and validate the build completes\n* [jx step helm delete](/commands/jx_step_helm_delete/)\t - Deletes the given helm release\n* [jx step helm env](/commands/jx_step_helm_env/)\t - Generates the helm environment variables\n* [jx step helm install](/commands/jx_step_helm_install/)\t - Installs the given chart\n* [jx step helm list](/commands/jx_step_helm_list/)\t - List the helm releases\n* [jx step helm release](/commands/jx_step_helm_release/)\t - Releases the helm chart in the current directory\n* [jx step helm version](/commands/jx_step_helm_version/)\t - Updates the chart version in the given directory\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_apply.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm apply\"\nslug: jx_step_helm_apply\nurl: /commands/jx_step_helm_apply/\ndescription: list of jx commands\n---\n## jx step helm apply\n\nApplies the helm chart in a given directory\n\n### Synopsis\n\nApplies the helm chart in a given directory. \n\nThis step is usually used to apply any GitOps promotion changes into a Staging or Production cluster. \n\n    Environment Variables:\n  \n  * JX NO DELETE TMP DIR=\"true\" - prevents the removal of the temporary directory.\n\n```\njx step helm apply [flags]\n```\n\n### Examples\n\n```\n  # apply the chart in the env folder to namespace jx-staging\n  jx step helm apply --dir env --namespace jx-staging\n```\n\n### Options\n\n```\n      --boot                          In Boot mode we load the Version Stream from the 'jx-requirements.yml' and use that to replace any missing versions in the 'requirements.yaml' file from the Version Stream\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n  -f, --force                         Whether to to pass '--force' to helm to help deal with upgrading if a previous promote failed (default true)\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for apply\n  -n, --name string                   The name of the release\n      --namespace string              The Kubernetes namespace to apply the helm chart to\n      --no-helm-version               Don't set Chart version before applying\n      --no-masking                    The effective 'values.yaml' file is output to the console with parameters masked. Enabling this flag will show the unmasked secrets in the console output\n      --no-vault                      Disables loading secrets from Vault. e.g. if bootstrapping core services like Ingress before we have a Vault\n      --provider-values-dir string    The optional directory of kubernetes provider specific override values.tmpl.yaml files a kubernetes provider specific folder\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n      --vault                         Helm secrets are stored in vault\n      --wait                          Wait for Kubernetes readiness probe to confirm deployment (default true)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_build.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm build\"\nslug: jx_step_helm_build\nurl: /commands/jx_step_helm_build/\ndescription: list of jx commands\n---\n## jx step helm build\n\nBuilds the helm chart in a given directory and validate the build completes\n\n### Synopsis\n\nBuilds the helm chart in a given directory. \n\nThis step is usually used to validate any GitOps Pull Requests.\n\n```\njx step helm build [flags]\n```\n\n### Examples\n\n```\n  # builds the helm chart in the env directory\n  jx step helm build --dir env\n```\n\n### Options\n\n```\n      --boot                          In Boot mode we load the Version Stream from the 'jx-requirements.yml' and use that to replace any missing versions in the 'reuqirements.yaml' file from the Version Stream\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for build\n      --provider-values-dir string    The optional directory of kubernetes provider specific override values.tmpl.yaml files a kubernetes provider specific folder\n  -r, --recursive                     Build recursively the dependent charts\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_delete.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm delete\"\nslug: jx_step_helm_delete\nurl: /commands/jx_step_helm_delete/\ndescription: list of jx commands\n---\n## jx step helm delete\n\nDeletes the given helm release\n\n### Synopsis\n\nDeletes a helm release\n\n```\njx step helm delete [releaseName] [flags]\n```\n\n### Examples\n\n```\n  # list all the helm releases in the current namespace\n  jx step helm list\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for delete\n  -n, --namespace string              the namespace to look for the helm releases. Defaults to the current namespace\n      --purge                         Whether to purge the helm release\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_env.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm env\"\nslug: jx_step_helm_env\nurl: /commands/jx_step_helm_env/\ndescription: list of jx commands\n---\n## jx step helm env\n\nGenerates the helm environment variables\n\n### Synopsis\n\nGenerates the helm environment variables\n\n```\njx step helm env [flags]\n```\n\n### Examples\n\n```\n  # output the helm environment variables that should be set to use helm directly\n  jx step helm env\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for env\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_install.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm install\"\nslug: jx_step_helm_install\nurl: /commands/jx_step_helm_install/\ndescription: list of jx commands\n---\n## jx step helm install\n\nInstalls the given chart\n\n### Synopsis\n\nInstalls the given chart\n\n```\njx step helm install [flags]\n```\n\n### Examples\n\n```\n  # installs a helm chart\n  jx step helm install foo/bar\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for install\n  -n, --name string                   The name of the release to install\n      --namespace string              The namespace to install into. Defaults to the current namespace\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n      --set stringArray               The values to override in the helm chart\n      --set-file stringArray          The values files to override values in the helm chart\n      --set-string stringArray        The STRING values to override in the helm chart\n  -v, --version string                The version to install. Defaults to the latest\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_list.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm list\"\nslug: jx_step_helm_list\nurl: /commands/jx_step_helm_list/\ndescription: list of jx commands\n---\n## jx step helm list\n\nList the helm releases\n\n### Synopsis\n\nList the helm releases\n\n```\njx step helm list [flags]\n```\n\n### Examples\n\n```\n  # list all the helm releases in the current namespace\n  jx step helm list\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for list\n  -n, --namespace string              the namespace to look for the helm releases. Defaults to the current namespace\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_release.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm release\"\nslug: jx_step_helm_release\nurl: /commands/jx_step_helm_release/\ndescription: list of jx commands\n---\n## jx step helm release\n\nReleases the helm chart in the current directory\n\n### Synopsis\n\nThis pipeline step releases the Helm chart in the current directory\n\n```\njx step helm release [flags]\n```\n\n### Examples\n\n```\n  jx step helm release\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for release\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_helm_version.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step helm version\"\nslug: jx_step_helm_version\nurl: /commands/jx_step_helm_version/\ndescription: list of jx commands\n---\n## jx step helm version\n\nUpdates the chart version in the given directory\n\n### Synopsis\n\nUpdates version of the Helm Chart.yaml in the given directory\n\n```\njx step helm version [flags]\n```\n\n### Examples\n\n```\n  # updates the current Helm Chart.yaml to the latest build number version\n  jx step helm version\n```\n\n### Options\n\n```\n      --clone-https git@foo/bar.git   Clone the environment Git repo over https rather than ssh which uses git@foo/bar.git (default true)\n  -d, --dir string                    The directory containing the helm chart to apply (default \".\")\n      --git-provider string           The Git provider for the environment Git repository (default \"github.com\")\n  -h, --help                          help for version\n      --remote                        If enabled assume we are in a remote cluster such as a stand alone Staging/Production cluster\n  -v, --version string                The version to update. If none specified it defaults to $BUILD_NUMBER\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step helm](/commands/jx_step_helm/)\t - helm [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_link.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step link\"\nslug: jx_step_link\nurl: /commands/jx_step_link/\ndescription: list of jx commands\n---\n## jx step link\n\nachieve service linking in preview environments\n\n### Synopsis\n\nThis pipeline step helps to link microservices from different namespaces like staging/production onto a preview environment\n\n```\njx step link services [flags]\n```\n\n### Examples\n\n```\n  #Link services from jx-staging namespace to the current namespace\n  jx step link services --from-namespace jx-staging\n  \n  #Link services from jx-staging namespace to the jx-prod namespace\n  jx step link services --from-namespace jx-staging --to-namespace jx-prod\n  \n  #Link services from jx-staging namespace to the jx-prod namespace including all but the ones starting with  the characters 'cheese'\n  jx step link services --from-namespace jx-staging --to-namespace jx-prod --includes * --excludes cheese*\n```\n\n### Options\n\n```\n  -e, --excludes stringArray    What services from the source namespace to exclude from the linking process\n  -f, --from-namespace string   The source namespace from which the linking would happen\n  -h, --help                    help for link\n  -i, --includes stringArray    What services from source namespace to include in the linking process\n  -t, --to-namespace string     The destination namespace to which the linking would happen\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_next-buildnumber.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step next-buildnumber\"\nslug: jx_step_next-buildnumber\nurl: /commands/jx_step_next-buildnumber/\ndescription: list of jx commands\n---\n## jx step next-buildnumber\n\nGenerates the next build unique number for a pipeline.\n\n### Synopsis\n\nGenerates the next build unique number for a pipeline\n\n```\njx step next-buildnumber [flags]\n```\n\n### Examples\n\n```\n  jx step next-buildnumber\n```\n\n### Options\n\n```\n      --branch string   The Git branch (default \"master\")\n  -h, --help            help for next-buildnumber\n  -o, --owner string    The Git repository owner\n  -r, --repo string     The Git repository name\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_next-version.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step next-version\"\nslug: jx_step_next-version\nurl: /commands/jx_step_next-version/\ndescription: list of jx commands\n---\n## jx step next-version\n\nWrites next semantic version\n\n### Synopsis\n\nThis pipeline step command works out a semantic version, writes a file ./VERSION and optionally updates a file\n\n```\njx step next-version [flags]\n```\n\n### Examples\n\n```\n  jx step next-version\n  jx step next-version --filename package.json\n  jx step next-version --filename package.json --tag\n  jx step next-version --filename package.json --tag --version 1.2.3\n  \n  #\u00a0lets use git to create a new version from a tag and tag git\n  jx step next-version --use-git-tag-only --tag\n```\n\n### Options\n\n```\n      --charts-dir string   the directory of the chart to update the version (in conjunction with --tag)\n  -d, --dir string          the directory to look for files that contain a pom.xml or Makefile with the project version to bump\n  -f, --filename string     Filename that contains version property to update, e.g. package.json\n  -h, --help                help for next-version\n      --semantic-release    use conventional commits to determine next version. Ignores the --use-git-tag-only and --version options See https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines\n  -t, --tag                 tag and push new version\n      --use-git-tag-only    only use a git tag so work out new semantic version, else specify filename [pom.xml,package.json,Makefile,Chart.yaml]\n      --version string      optional version to use rather than generating a new one\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_override-requirements.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step override-requirements\"\nslug: jx_step_override-requirements\nurl: /commands/jx_step_override-requirements/\ndescription: list of jx commands\n---\n## jx step override-requirements\n\nOverrides requirements with environment variables to be persisted in the `jx-requirements.yml`\n\n### Synopsis\n\nOverrides requirements with environment variables to be persisted in the `jx-requirements.yml`\n\n```\njx step override-requirements [flags]\n```\n\n### Options\n\n```\n  -d, --dir string   the directory to look for the install requirements file (default \".\")\n  -h, --help         help for override-requirements\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_patch-config.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step patch-config\"\nslug: jx_step_patch-config\nurl: /commands/jx_step_patch-config/\ndescription: list of jx commands\n---\n## jx step patch-config\n\nModifies a ConfigMap with the given json patch\n\n### Synopsis\n\nThis step will take a json patch and attempt to modify the given ConfigMap. This is supposed to be used by Helm hooks to modify certain configuration values depending on the chart needs\n\n```\njx step patch-config [flags]\n```\n\n### Examples\n\n```\n  # Update the plank property in the data section of a config map, which is an embedded yaml file as a string literal called config.yaml:\n  jx step patch-config -m config --first-level-property config.yaml -p '[\"op\": \"replace\", \"path\": \"/plank\", \"value\": {\"foo\": \"bar\"}]'\n  \n  # Update a root level property of a config map using strategic merge:\n  jx step patch-config -m config -t strategic -p '{\"metadata\": {\"initializers\": {\"result\": {\"status\": \"newstatus\"}}}}'\n```\n\n### Options\n\n```\n  -m, --config-map string             The ConfigMap that will be modified\n      --first-level-property string   The first level property within \"Data:\" where the json patch will be applied. If left empty, the patch will be applied to the whole ConfigMap\n  -h, --help                          help for patch-config\n  -o, --output string                 the output of the modified ConfigMap if dry-run was provided\n  -p, --patch string                  The Json patch that will be applied to the Data within the ConfigMap\n  -t, --type string                   The type of patch being provided; one of [json merge strategic] - If the \"first-level-property\" flag is provided, this has no effect\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_post.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step post\"\nslug: jx_step_post\nurl: /commands/jx_step_post/\ndescription: list of jx commands\n---\n## jx step post\n\npost step actions\n\n### Synopsis\n\npost step actions\n\n```\njx step post [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for post\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step post build](/commands/jx_step_post_build/)\t - Performs post build actions in a pipeline\n* [jx step post install](/commands/jx_step_post_install/)\t - Runs any post install actions\n* [jx step post run](/commands/jx_step_post_run/)\t - Runs any post build actions\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_post_build.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step post build\"\nslug: jx_step_post_build\nurl: /commands/jx_step_post_build/\ndescription: list of jx commands\n---\n## jx step post build\n\nPerforms post build actions in a pipeline\n\n### Synopsis\n\nThis pipeline step performs post build actions such as CVE analysis\n\n```\njx step post build [flags]\n```\n\n### Examples\n\n```\n  jx step post build\n```\n\n### Options\n\n```\n  -h, --help           help for build\n      --image string   The full image name to be analysed including the registry prefix\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step post](/commands/jx_step_post/)\t - post step actions\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_post_install.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step post install\"\nslug: jx_step_post_install\nurl: /commands/jx_step_post_install/\ndescription: list of jx commands\n---\n## jx step post install\n\nRuns any post install actions\n\n### Synopsis\n\nThis pipeline step ensures that all the necessary jobs are imported and the webhooks set up - e.g. for the current Environments. \n\nIt is designed to work with GitOps based development environments where the permanent Environments like Staging and Production are defined in a git repository. This step is used to ensure that all the 'Environment' resources have their associated CI+CD jobs setup in Jenkins or Prow with the necessary webhooks in place.\n\n```\njx step post install [flags]\n```\n\n### Examples\n\n```\n  jx step post install\n```\n\n### Options\n\n```\n      --env-job-credentials string   The Jenkins credentials used by the GitOps Job for this environment\n  -h, --help                         help for install\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step post](/commands/jx_step_post/)\t - post step actions\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_post_run.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step post run\"\nslug: jx_step_post_run\nurl: /commands/jx_step_post_run/\ndescription: list of jx commands\n---\n## jx step post run\n\nRuns any post build actions\n\n### Synopsis\n\nThis pipeline step executes any post build actions added during Pipeline execution\n\n```\njx step post run [flags]\n```\n\n### Examples\n\n```\n  jx step post run\n```\n\n### Options\n\n```\n  -h, --help   help for run\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step post](/commands/jx_step_post/)\t - post step actions\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_pr.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step pr\"\nslug: jx_step_pr\nurl: /commands/jx_step_pr/\ndescription: list of jx commands\n---\n## jx step pr\n\npipeline step pr\n\n### Synopsis\n\npipeline step pr\n\n```\njx step pr [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for pr\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step pr comment](/commands/jx_step_pr_comment/)\t - pipeline step pr comment\n* [jx step pr labels](/commands/jx_step_pr_labels/)\t - List all labels of a given pull-request\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_pr_comment.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step pr comment\"\nslug: jx_step_pr_comment\nurl: /commands/jx_step_pr_comment/\ndescription: list of jx commands\n---\n## jx step pr comment\n\npipeline step pr comment\n\n### Synopsis\n\npipeline step pr comment\n\n```\njx step pr comment [flags]\n```\n\n### Options\n\n```\n      --code                  Treat the comment as code\n  -c, --comment string        comment to add to the Pull Request\n  -h, --help                  help for comment\n  -o, --owner string          Git organisation / owner\n  -p, --pull-request string   Git Pull Request number\n  -r, --repository string     Git repository\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step pr](/commands/jx_step_pr/)\t - pipeline step pr\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_pr_labels.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step pr labels\"\nslug: jx_step_pr_labels\nurl: /commands/jx_step_pr_labels/\ndescription: list of jx commands\n---\n## jx step pr labels\n\nList all labels of a given pull-request\n\n### Synopsis\n\nCreates environment variables from the labels in a pull request. \n\nEnvironment variables are prefixed per default with JX PR LABELS. You can use the '--prefix' argument to set a different prefix.\n\n```\njx step pr labels [flags]\n```\n\n### Examples\n\n```\n  # List all labels of a given pull-request\n  jx step pr labels\n  \n  # List all labels of a given pull-request using a custom prefix\n  jx step pr --prefix PRL\n  \n  # List all labels of a given pull-request using a custom pull-request number\n  jx step pr --pr PR-34\n  jx step pr --pr 34\n```\n\n### Options\n\n```\n  -h, --help            help for labels\n      --pr string       Git Pull Request number\n  -p, --prefix string   Environment variable prefix\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step pr](/commands/jx_step_pr/)\t - pipeline step pr\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_release.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step release\"\nslug: jx_step_release\nurl: /commands/jx_step_release/\ndescription: list of jx commands\n---\n## jx step release\n\nperforms a release on the current Git repository\n\n### Synopsis\n\nperforms a release on the current Git repository\n\n```\njx step release [flags]\n```\n\n### Options\n\n```\n  -a, --application string                the Docker application image name\n      --build string                      The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n  -r, --docker-registry docker-registry   the Docker registry host or host:port to use. If not specified it is loaded from the docker-registry ConfigMap\n  -e, --git-email string                  The Git email address to configure if there is none already setup\n  -u, --git-username string               The Git username to configure if there is none already setup\n      --helm-repo-name string             The name of the helm repository that contains the app (default \"releases\")\n      --helm-repo-url string              The Helm Repository URL to use for the App\n  -h, --help                              help for release\n      --no-batch                          Whether to disable batch mode\n  -o, --organisation string               the Docker organisation for the generated Docker image\n      --pull-request-poll-time string     Poll time when waiting for a Pull Request to merge (default \"20s\")\n  -t, --timeout string                    The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete (default \"1h\")\n      --xdg-config-home string            The home directory where git config is setup (default \"/home/jenkins\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_replicate.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step replicate\"\nslug: jx_step_replicate\nurl: /commands/jx_step_replicate/\ndescription: list of jx commands\n---\n## jx step replicate\n\n\nAnnotates a secret or configmap so it can be replicated across an environment\n\n\n### Synopsis\n\nWorks with the replicator app https://github.com/jenkins-x-charts/kubernetes-replicator \n\njx add app replicator \n\nThis step will annotate a secret or configmap so that the replicator can replicate the data into another namespace\n\n```\njx step replicate [flags]\n```\n\n### Examples\n\n```\n  NOTE: quote and namespaces that include a wildcard\n  # lets collect some files to the team's default storage location (which if not configured uses the current git repository's gh-pages branch)\n  jx step replicate configmap foo --replicate-to-namespace jx-staging --replicate-to-namespace \"foo-preview*\"\n  \n  # lets collect some files to the team's default storage location (which if not configured uses the current git repository's gh-pages branch)\n  jx step replicate secret bar --replicate-to-namespace jx-staging --replicate-to-namespace \"foo-preview*\"\n```\n\n### Options\n\n```\n      --create-namespace                     Should create any missing namespaces\n  -h, --help                                 help for replicate\n  -r, --replicate-to-namespace stringArray   Specify a list of namespaces to replicate data into\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_report.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step report\"\nslug: jx_step_report\nurl: /commands/jx_step_report/\ndescription: list of jx commands\n---\n## jx step report\n\nreport [kind]\n\n### Synopsis\n\nreport [kind]\n\n```\njx step report [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for report\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step report chart](/commands/jx_step_report_chart/)\t - Creates a report of all the images used in the charts in a version stream\n* [jx step report image](/commands/jx_step_report_image/)\t - Creates a report of a set of package versions\n* [jx step report junit](/commands/jx_step_report_junit/)\t - Creates a HTML report from junit files\n* [jx step report version](/commands/jx_step_report_version/)\t - Creates a report of a set of package versions\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_report_chart.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step report chart\"\nslug: jx_step_report_chart\nurl: /commands/jx_step_report_chart/\ndescription: list of jx commands\n---\n## jx step report chart\n\nCreates a report of all the images used in the charts in a version stream\n\n### Synopsis\n\nCreates a report of all the images used in the charts in a version stream\".\n\n```\njx step report chart [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n  -d, --dir string          The dir of the version stream. If not specified it the version stream is cloned\n  -f, --fail-on-duplicate   If true lets fail the step if we have any duplicate\n  -h, --help                help for chart\n  -n, --name string         The name of the file to generate (default \"chart-images\")\n  -o, --out-dir string      The directory to store the resulting reports in\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step report](/commands/jx_step_report/)\t - report [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_report_image.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step report image\"\nslug: jx_step_report_image\nurl: /commands/jx_step_report_image/\ndescription: list of jx commands\n---\n## jx step report image\n\nCreates a report of a set of package versions\n\n### Synopsis\n\nCreates a report of a set of package versions. This command is typically used inside images to determine what tools are inside.\n\n```\njx step report image versions [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n      --active-deadline-seconds int   The number of seconds before the Job can be terminated (default 14400)\n  -l, --backoff-limit int32           The backoff limit: how many times to retry the job before considering it failed) to run in the Job (default 1)\n      --batch-size int                Number of images to process per Job (default 10)\n      --branch string                 The git branch to store the results\n      --container-dir string          the report directory of the reports (default \"/workspace/reports\")\n  -d, --dir string                    The dir of the version stream. If not specified it the version stream is cloned\n  -e, --email string                  The email if using git storage (default \"jenkins-x@googlegroups.com\")\n  -x, --exclude stringArray           The text strings to exclude on the image names (default [machine-learning])\n  -f, --filter stringArray            The text to filter image names (default [gcr.io/jenkinsxio])\n      --git-url string                The git URL of the project to store the results\n  -h, --help                          help for image\n  -n, --name string                   The name of the file to generate\n      --no-delete-job                 Should we not delete the Job?\n      --no-wait                       Should we not wait for the Job to complete?\n  -o, --out-dir string                The directory to store the resulting reports in\n  -p, --path string                   The output path in the bucket/git repository to store the reports (default \"reports/imageVersions\")\n      --service-account string        The Kubernetes ServiceAccount to use to run the Job (default \"tekton-bot\")\n      --stash-image string            The container image used to stash the results (default \"gcr.io/jenkinsxio/builder-go:latest\")\n      --test-image string             Override the actual image used in the container jobs so we can test out changes to the jx steps before they make it into the builders\n  -u, --username string               The user if using git storage (default \"jenkins-x-bot\")\n      --wait-timeout duration         Amount of time to wait for the Job to complete before failing (default 1h0m0s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step report](/commands/jx_step_report/)\t - report [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_report_junit.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step report junit\"\nslug: jx_step_report_junit\nurl: /commands/jx_step_report_junit/\ndescription: list of jx commands\n---\n## jx step report junit\n\nCreates a HTML report from junit files\n\n### Synopsis\n\nThis step is used to generate an HTML report from *.junit.xml files created from running BDD tests.\n\n```\njx step report junit [flags]\n```\n\n### Examples\n\n```\n  # Collect every *.junit.xml file from --in-dir, merge them, and store them in --out-dir with a file name --output-name and provide an HTML report title\n  jx step report --in-dir /randomdir --out-dir /outdir --merge --output-name resulting_report.html --suite-name This_is_the_report_title\n  \n  # Collect every *.junit.xml file without defining --in-dir and use the value of $REPORTS_DIR , merge them, and store them in --out-dir with a file name --output-name\n  jx step report --out-dir /outdir --merge --output-name resulting_report.html\n  \n  # Select a single *.junit.xml file and create a report form it\n  jx step report --in-dir /randomdir --out-dir /outdir --target-report test.junit.xml --output-name resulting_report.html\n```\n\n### Options\n\n```\n  -h, --help                   help for junit\n  -f, --in-dir string          The directory to get the reports from\n  -m, --merge                  Whether or not to merge the report files in the \"in-folder\" to parse them and show it as a single test run\n  -o, --out-dir string         The directory to store the resulting reports in\n  -n, --output-name string     The result of parsing the report(s) in HTML format\n  -s, --suite-name string      The name of the tests suite to be shown in the HTML report\n  -t, --target-report string   The name of a single report file to parse\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step report](/commands/jx_step_report/)\t - report [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_report_version.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step report version\"\nslug: jx_step_report_version\nurl: /commands/jx_step_report_version/\ndescription: list of jx commands\n---\n## jx step report version\n\nCreates a report of a set of package versions\n\n### Synopsis\n\nCreates a report of a set of package versions. This command is typically used inside images to determine what tools are inside.\n\n```\njx step report version [flags]\n```\n\n### Examples\n\n```\n  \n```\n\n### Options\n\n```\n  -h, --help                  help for version\n  -n, --name string           The name of the file to generate\n  -o, --out-dir string        The directory to store the resulting reports in\n  -p, --package stringArray   The name of the packages to version (default [jx,kubectl,helm,helm3,git,skaffold])\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step report](/commands/jx_step_report/)\t - report [kind]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_restore.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step restore\"\nslug: jx_step_restore\nurl: /commands/jx_step_restore/\ndescription: list of jx commands\n---\n## jx step restore\n\nrestore [command]\n\n### Synopsis\n\nrestore [command]\n\n```\njx step restore [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for restore\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step restore from-backup](/commands/jx_step_restore_from-backup/)\t - This step attempts a velero restore from a selected velero backup\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_restore_from-backup.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step restore from-backup\"\nslug: jx_step_restore_from-backup\nurl: /commands/jx_step_restore_from-backup/\ndescription: list of jx commands\n---\n## jx step restore from-backup\n\nThis step attempts a velero restore from a selected velero backup\n\n### Synopsis\n\nRestores the cluster custom data from the a backup.\n\n```\njx step restore from-backup [flags]\n```\n\n### Examples\n\n```\n  # executes the step which restores data from a backup\n  jx step restore from-backup\n```\n\n### Options\n\n```\n  -h, --help               help for from-backup\n      --latest             This indicates whether to use the latest velero backup as the restore point\n      --namespace string   The namespace where velero has been installed (default \"velero\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step restore](/commands/jx_step_restore/)\t - restore [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_scheduler.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step scheduler\"\nslug: jx_step_scheduler\nurl: /commands/jx_step_scheduler/\ndescription: list of jx commands\n---\n## jx step scheduler\n\nscheduler [command]\n\n### Synopsis\n\nThis pipeline step command allows you to work with the scheduler. Sub commands include: \n\n  * jx step scheduler config apply  \n  * jx step scheduler config generate  \n  * jx step scheduler config create pr\n\n```\njx step scheduler [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for scheduler\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step scheduler config](/commands/jx_step_scheduler_config/)\t - scheduler config [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_scheduler_config.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step scheduler config\"\nslug: jx_step_scheduler_config\nurl: /commands/jx_step_scheduler_config/\ndescription: list of jx commands\n---\n## jx step scheduler config\n\nscheduler config [command]\n\n### Synopsis\n\nThis pipeline step command allows you to work with the scheduler configuration. Sub commands include: \n\n  * jx step scheduler config apply\n\n```\njx step scheduler config [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for config\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step scheduler](/commands/jx_step_scheduler/)\t - scheduler [command]\n* [jx step scheduler config apply](/commands/jx_step_scheduler_config_apply/)\t - scheduler config apply\n* [jx step scheduler config migrate](/commands/jx_step_scheduler_config_migrate/)\t - scheduler config migrate\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_scheduler_config_apply.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step scheduler config apply\"\nslug: jx_step_scheduler_config_apply\nurl: /commands/jx_step_scheduler_config_apply/\ndescription: list of jx commands\n---\n## jx step scheduler config apply\n\nscheduler config apply\n\n### Synopsis\n\nThis command will transform your pipeline schedulers in to prow config. If you are using gitops the prow config will be added to your environment repository. For non-gitops environments the prow config maps will applied to your dev environment.\n\n```\njx step scheduler config apply [flags]\n```\n\n### Examples\n\n```\n  jx step scheduler config apply\n```\n\n### Options\n\n```\n      --agent string   The scheduler agent to use e.g. Prow (default \"prow\")\n      --direct         Skip generating a PR and apply the pipeline config directly to the cluster when using gitops mode.\n  -h, --help           help for apply\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step scheduler config](/commands/jx_step_scheduler_config/)\t - scheduler config [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_scheduler_config_migrate.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step scheduler config migrate\"\nslug: jx_step_scheduler_config_migrate\nurl: /commands/jx_step_scheduler_config_migrate/\ndescription: list of jx commands\n---\n## jx step scheduler config migrate\n\nscheduler config migrate\n\n### Synopsis\n\nThis command will generate pipeline scheduler resources from either the prow config maps or prow config files. For gitops users they will be added to the dev environment git repository. For non gitops users they will be applied directly to the cluster if --dryRun=false.\n\n```\njx step scheduler config migrate [flags]\n```\n\n### Examples\n\n```\n  # Test the migration but do not apply\n  jx step scheduler config migrate\n  \n  # Generate the pipeline schedulers and apply them either via gitops or directly to the cluster\n  jx step scheduler config migrate --dryRun=false\n  \n  # Generate the pipeline schedulers from files instead of the existing configmaps in the cluster\n  jx step scheduler config migrate --prow-config-file=config.yaml --prow-plugins-file=plugins.yaml\n  \n  # Disable validation checks when migrating to pipeline schedulers\n  jx step scheduler config migrate --skipVerification=true\n```\n\n### Options\n\n```\n      --agent string               The scheduler agent to use e.g. Prow (default \"prow\")\n      --dryRun                     Do not apply the generated configuration (default true)\n  -h, --help                       help for migrate\n      --prow-config-file string    The location of the config file to use\n      --prow-plugins-file string   The location of the plugins file to use\n      --skipVerification           Skip verification of the new configuration\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step scheduler config](/commands/jx_step_scheduler_config/)\t - scheduler config [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_split.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step split\"\nslug: jx_step_split\nurl: /commands/jx_step_split/\ndescription: list of jx commands\n---\n## jx step split\n\nMirrors the code from a monorepo into separate microservice style Git repositories so its easier to do finer grained releases\n\n### Synopsis\n\nMirrors the code from a monorepo into separate microservice style Git repositories so its easier to do finer grained releases. \n\nIf you have lots of apps in folders in a monorepo then this command can run on that repo to mirror changes into a number of microservice based repositories which can each then get auto-imported into Jenkins X\n\n```\njx step split monorepo [flags]\n```\n\n### Examples\n\n```\n  # Split the current folder up into separate Git repositories\n  jx step split monorepo -o mygithuborg\n```\n\n### Options\n\n```\n  -g, --glob string                The glob pattern to find folders to mirror to separate repositories (default \"*\")\n  -h, --help                       help for split\n      --kubernetes-folder string   The folder containing all the Kubernetes YAML for each app (default \"kubernetes\")\n      --no-git                     If enabled then don't try to clone/create the separate repositories in github\n  -o, --organisation string        The GitHub organisation to split the repositories into\n  -d, --output-dir string          The output directory where new projects are created (default \"generated\")\n  -n, --reponame string            The GitHub monorepo to be split\n  -s, --source-dir string          The source directory to look inside for the folders to move into separate Git repositories\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_stash.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step stash\"\nslug: jx_step_stash\nurl: /commands/jx_step_stash/\ndescription: list of jx commands\n---\n## jx step stash\n\nStashes local files generated as part of a pipeline into long term storage\n\n### Synopsis\n\nThis pipeline step stashes the specified files from the build into some stable storage location.\n  \nCurrently Jenkins X supports storing files into a branch of a git repository or in cloud blob storage like S3, GCS, Azure blobs etc. \n\nWhen using Cloud Storage we use URLs like 's3://nameOfBucket' on AWS, 'gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket' \n\nSee Also: \n\n  * jx step unstash : https://jenkins-x.io/commands/jx_step_unstash  \n  * jx edit storage : https://jenkins-x.io/commands/jx_edit_storage\n\n```\njx step stash [flags]\n```\n\n### Examples\n\n```\n  # lets collect some files to the team's default storage location (which if not configured uses the current git repository's gh-pages branch)\n  jx step stash -c tests -p \"target/test-reports/*\"\n  \n  # lets collect some files to a specific Git URL for a repository\n  jx step stash -c tests -p \"target/test-reports/*\" --git-url https://github.com/myuser/myrepo.git\n  \n  # lets collect some files with the file names relative to the 'target/test-reports' folder and store in a Git URL\n  jx step stash -c tests -p \"target/test-reports/*\" --basedir target/test-reports --git-url https://github.com/myuser/myrepo.git\n  \n  # lets collect some files to a specific AWS cloud storage bucket\n  jx step stash -c coverage -p \"build/coverage/*\" --bucket-url s3://my-aws-bucket\n  \n  # lets collect some files to a specific cloud storage bucket\n  jx step stash -c tests -p \"target/test-reports/*\" --bucket-url gs://my-gcp-bucket\n  \n  # lets collect some files to a specific cloud storage bucket and specify the path to store them inside\n  jx step stash -c tests -p \"target/test-reports/*\" --bucket-url gs://my-gcp-bucket --to-path tests/mystuff\n```\n\n### Options\n\n```\n      --basedir string           The base directory to use to create relative output file names. e.g. if you specify '--pattern \"target/*.xml\" then you may want to supply '--basedir target' to strip the 'target/' prefix from all collected files\n      --bucket-url string        Specify the cloud storage bucket URL to send each file to. e.g. use 's3://nameOfBucket' on AWS, gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket'\n  -c, --classifier string        A name which classifies this type of file. Example values: coverage, tests, logs, reports\n      --dir string               The source directory to try detect the current git repository or branch. Defaults to using the current directory\n      --git-branch string        The branch to use to store files in the git repository (default \"gh-pages\")\n      --git-url string           Specify the Git URL to of the repository to use for storage\n  -h, --help                     help for stash\n  -p, --pattern stringArray      Specify the pattern to use to look for files\n      --project-branch string    The project git branch of the project to collect for. Used to default the branch folder in the storage. If not specified its discovered from the local '.git' folder\n      --project-git-url string   The project git URL to collect for. Used to default the organisation and repository folders in the storage. If not specified its discovered from the local '.git' folder\n  -t, --to-path string           The path within the storage to store the files. If not specified it defaults to 'jenkins-x/$category/$owner/$repoName/$branch/$buildNumber'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax\"\nslug: jx_step_syntax\nurl: /commands/jx_step_syntax/\ndescription: list of jx commands\n---\n## jx step syntax\n\nsyntax [command]\n\n### Synopsis\n\nsyntax [command]\n\n```\njx step syntax [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for syntax\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step syntax effective](/commands/jx_step_syntax_effective/)\t - Outputs an effective representation of the pipeline to be executed\n* [jx step syntax schema](/commands/jx_step_syntax_schema/)\t - Output the JSON schema either for jenkins-x.yml files or for build packs' pipeline.yaml files\n* [jx step syntax validate](/commands/jx_step_syntax_validate/)\t - validate [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax_effective.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax effective\"\nslug: jx_step_syntax_effective\nurl: /commands/jx_step_syntax_effective/\ndescription: list of jx commands\n---\n## jx step syntax effective\n\nOutputs an effective representation of the pipeline to be executed\n\n### Synopsis\n\nReads the appropriate jenkins-x.yml, depending on context, from the current directory, if one exists, and outputs an effective representation of the pipelines\n\n```\njx step syntax effective [flags]\n```\n\n### Examples\n\n```\n  # view the effective pipeline\n  jx step syntax effective\n  \n  # view the short version of the effective pipeline\n  jx step syntax effective -s\n```\n\n### Options\n\n```\n  -c, --context string               The pipeline context if there are multiple separate pipelines for a given branch\n      --default-image string         Specify the docker image to use if there is no image specified for a step and there's no Pod Template (default \"gcr.io/jenkinsxio/builder-maven\")\n      --docker-registry string       The Docker Registry host name to use which is added as a prefix to docker images\n      --docker-registry-org string   The Docker registry organisation. If blank the git repository owner is used\n  -e, --env stringArray              List of custom environment variables to be applied to resources that are created\n  -h, --help                         help for effective\n      --image string                 Specify a custom image to use for the steps which overrides the image in the PodTemplates\n      --kaniko-image string          The docker image for Kaniko (default \"gcr.io/kaniko-project/executor:v0.22.0\")\n      --output-dir string            The directory to write the output to as YAML. Defaults to STDOUT if neither --output-dir nor --output-file is specified.\n      --output-file string           The file to write the output to as YAML. If unspecified and --output-dir is specified, the filename defaults to 'jenkins-x[-context]-effective.yml'\n  -p, --pack string                  The build pack name. If none is specified its discovered from the source code\n      --project-id string            The cloud project ID. If not specified we default to the install project\n  -r, --ref string                   The Git reference (branch,tag,sha) in the Git repository to use\n      --service-account string       The Kubernetes ServiceAccount to use to run the pipeline (default \"tekton-bot\")\n  -s, --short                        Use short concise output\n      --source string                The name of the source repository (default \"source\")\n  -u, --url string                   The URL for the build pack Git repository\n      --use-kaniko                   Enables using kaniko directly for building docker images (default true)\n      --validate-in-cluster          Validate that resources referenced in the effective pipeline, such as volumes, exist in the current context cluster\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step syntax](/commands/jx_step_syntax/)\t - syntax [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax_schema.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax schema\"\nslug: jx_step_syntax_schema\nurl: /commands/jx_step_syntax_schema/\ndescription: list of jx commands\n---\n## jx step syntax schema\n\nOutput the JSON schema either for jenkins-x.yml files or for build packs' pipeline.yaml files\n\n### Synopsis\n\nOutput the JSON schema either for jenkins-x.yml files or for build packs' pipeline.yaml files\n\n```\njx step syntax schema [flags]\n```\n\n### Examples\n\n```\nschema --pipeline\n```\n\n### Options\n\n```\n      --buildpack      Output the JSON schema for build pack pipeline.yaml files\n  -h, --help           help for schema\n  -o, --out string     the name of the output file for the generated JSON schema\n      --pipeline       Output the JSON schema for jenkins-x.yml files. Defaults to this option if '--buildpack' is not specified\n      --pod            Output the JSON schema for k8s Pod files\n      --requirements   Output the JSON schema for jx-requirements.yml files\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step syntax](/commands/jx_step_syntax/)\t - syntax [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax_validate.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax validate\"\nslug: jx_step_syntax_validate\nurl: /commands/jx_step_syntax_validate/\ndescription: list of jx commands\n---\n## jx step syntax validate\n\nvalidate [command]\n\n### Synopsis\n\nvalidate [command]\n\n```\njx step syntax validate [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for validate\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step syntax](/commands/jx_step_syntax/)\t - syntax [command]\n* [jx step syntax validate buildpacks](/commands/jx_step_syntax_validate_buildpacks/)\t - Validates all available build packs\n* [jx step syntax validate pipeline](/commands/jx_step_syntax_validate_pipeline/)\t - Validates a pipeline YAML file\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax_validate_buildpacks.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax validate buildpacks\"\nslug: jx_step_syntax_validate_buildpacks\nurl: /commands/jx_step_syntax_validate_buildpacks/\ndescription: list of jx commands\n---\n## jx step syntax validate buildpacks\n\nValidates all available build packs\n\n### Synopsis\n\nValidates all available build packs\n\n```\njx step syntax validate buildpacks [flags]\n```\n\n### Examples\n\n```\nbuildpacks\n```\n\n### Options\n\n```\n  -h, --help   help for buildpacks\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step syntax validate](/commands/jx_step_syntax_validate/)\t - validate [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_syntax_validate_pipeline.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step syntax validate pipeline\"\nslug: jx_step_syntax_validate_pipeline\nurl: /commands/jx_step_syntax_validate_pipeline/\ndescription: list of jx commands\n---\n## jx step syntax validate pipeline\n\nValidates a pipeline YAML file\n\n### Synopsis\n\nValidates the pipeline YAML file in the current directory for the given context, or jenkins-x.yml by default\n\n```\njx step syntax validate pipeline [flags]\n```\n\n### Examples\n\n```\n  # validates the jenkins-x.yml in the current directory\n  jx step syntax validate pipeline\n  \n  # validates the jenkins-x-bdd.yml file in the current directory\n  jx step syntax validate pipeline --context bdd\n```\n\n### Options\n\n```\n  -c, --context string   The context for the pipeline YAML to validate instead of the default.\n  -d, --dir string       The directory to query to find the pipeline YAML file\n  -h, --help             help for pipeline\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step syntax validate](/commands/jx_step_syntax_validate/)\t - validate [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_tag.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step tag\"\nslug: jx_step_tag\nurl: /commands/jx_step_tag/\ndescription: list of jx commands\n---\n## jx step tag\n\nCreates a git tag and pushes to remote repo\n\n### Synopsis\n\nThis pipeline step command creates a git tag using a version number prefixed with 'v' and pushes it to a remote origin repo. \n\nThis commands effectively runs: \n\n  $ git commit -a -m \"release $(VERSION)\" --allow-empty\n  $ git tag -fa v$(VERSION) -m \"Release version $(VERSION)\"\n  $ git push origin v$(VERSION)\n\n```\njx step tag [flags]\n```\n\n### Examples\n\n```\n  jx step tag --version 1.0.0\n```\n\n### Options\n\n```\n  -d, --charts-dir string                the directory of the chart to update the version\n  -r, --charts-value-repository string   the fully qualified image name without the version tag. e.g. 'dockerregistry/myorg/myapp'\n      --dir string                       the directory which may contain a 'jenkins-x.yml'\n  -h, --help                             help for tag\n      --no-apply                         Do not push the tag to the server, this is used for example in dry runs\n  -v, --version string                   version number for the tag [required]\n      --version-file string              The file name used to load the version number from if no '--version' option is specified (default \"VERSION\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_unstash.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step unstash\"\nslug: jx_step_unstash\nurl: /commands/jx_step_unstash/\ndescription: list of jx commands\n---\n## jx step unstash\n\nUnstashes files generated as part of a pipeline to a local file or directory or displays on the console\n\n### Synopsis\n\nThis pipeline step unstashes the files in storage to a local file or the console\n  \nCurrently Jenkins X supports storing files into a branch of a git repository or in cloud blob storage like S3, GCS, Azure blobs etc. \n\nWhen using Cloud Storage we use URLs like 's3://nameOfBucket' on AWS, 'gs://anotherBucket' on GCP or on Azure 'azblob://thatBucket' \n\nSee Also: \n\n  * jx step stash : https://jenkins-x.io/commands/jx_step_stash  \n  * jx edit storage : https://jenkins-x.io/commands/jx_edit_storage\n\n```\njx step unstash [flags]\n```\n\n### Examples\n\n```\n  # unstash a file to the reports directory\n  jx step unstash --url s3://mybucket/tests/myOrg/myRepo/mybranch/3/junit.xml -o reports\n  \n  # unstash the file to the from GCS to the console\n  jx step unstash -u gs://mybucket/foo/bar/output.log\n```\n\n### Options\n\n```\n  -h, --help               help for unstash\n  -o, --output string      The output file or directory\n  -t, --timeout duration   The timeout period before we should fail unstashing the entry (default 30s)\n  -u, --url string         The fully qualified URL to the file to unstash including the storage host, path and file name\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_update.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step update\"\nslug: jx_step_update\nurl: /commands/jx_step_update/\ndescription: list of jx commands\n---\n## jx step update\n\nupdate [command]\n\n### Synopsis\n\nupdate [command]\n\n```\njx step update [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for update\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step update release-status](/commands/jx_step_update_release-status/)\t - update release-status [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_update_release-status.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step update release-status\"\nslug: jx_step_update_release-status\nurl: /commands/jx_step_update_release-status/\ndescription: list of jx commands\n---\n## jx step update release-status\n\nupdate release-status [command]\n\n### Synopsis\n\nupdate release-status [command]\n\n```\njx step update release-status [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for release-status\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step update](/commands/jx_step_update/)\t - update [command]\n* [jx step update release-status github](/commands/jx_step_update_release-status_github/)\t - Updates a release to either a prerelease or a release\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_update_release-status_github.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step update release-status github\"\nslug: jx_step_update_release-status_github\nurl: /commands/jx_step_update_release-status_github/\ndescription: list of jx commands\n---\n## jx step update release-status github\n\nUpdates a release to either a prerelease or a release\n\n### Synopsis\n\nupdates the status of a release to be either a prerelease or a release\n\n```\njx step update release-status github [flags]\n```\n\n### Examples\n\n```\n  jx step update release github -o jenkins-x -r jx -v 1.2.3 -p=false\n```\n\n### Options\n\n```\n  -h, --help                help for github\n      --owner string        The owner of the git repository (default \"o\")\n  -p, --prerelease          The release state of that version release of the repository\n  -r, --repository string   The git repository\n  -v, --version string      The version to udpate. If no version is found an error is returned\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step update release-status](/commands/jx_step_update_release-status/)\t - update release-status [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_validate.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step validate\"\nslug: jx_step_validate\nurl: /commands/jx_step_validate/\ndescription: list of jx commands\n---\n## jx step validate\n\nValidates the command line tools, container and platform to ensure a pipeline can run properly\n\n### Synopsis\n\nValidates the command line tools, container and platform to ensure a pipeline can run properly. \n\nThis helps ensure that your platform installation, 'addons, builder images and Jenkinsfile' are all on compatible versions.\n\n```\njx step validate [flags]\n```\n\n### Examples\n\n```\n  # Validates that the jx version is new enough\n  jx step validate --min-jx-version 2.1.138\n```\n\n### Options\n\n```\n  -d, --dir string              The project directory to look inside for the Project configuration for things like required addons\n  -h, --help                    help for validate\n  -v, --min-jx-version string   The minimum version of the 'jx' command line tool required\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_values.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step values\"\nslug: jx_step_values\nurl: /commands/jx_step_values/\ndescription: list of jx commands\n---\n## jx step values\n\nCreates a JSON schema from a template\n\n### Synopsis\n\nCreates a JSON schema from a template\n\n```\njx step values schema template [flags]\n```\n\n### Examples\n\n```\n  jx step values schema template\n```\n\n### Options\n\n```\n      --config-map-key string    The name of the key in the config map which contains values.schema.json (default \"values.schema.json\")\n      --config-map-name string   The name of the config map to use, by default read from the VALUES_SCHEMA_JSON_CONFIG_MAP_NAME environment variable\n  -h, --help                     help for values\n      --set stringArray          the values to pass to the template e.g. --set foo=bar. Can be specified multiple times They can be accessed as .Values.<name> e.g. .Values.foo\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify\"\nslug: jx_step_verify\nurl: /commands/jx_step_verify/\ndescription: list of jx commands\n---\n## jx step verify\n\nverify [command]\n\n### Synopsis\n\nverify [command]\n\n```\njx step verify [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for verify\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n* [jx step verify behavior](/commands/jx_step_verify_behavior/)\t - Verifies the cluster behaves correctly by running the BDD tests to verify we can create quickstarts, previews and promote applications\n* [jx step verify dependencies](/commands/jx_step_verify_dependencies/)\t - \n* [jx step verify dns](/commands/jx_step_verify_dns/)\t - Verifies DNS resolution for ingress rules\n* [jx step verify environments](/commands/jx_step_verify_environments/)\t - Verifies that the Environments have valid git repositories setup - lazily creating them if needed\n* [jx step verify git](/commands/jx_step_verify_git/)\t - \n* [jx step verify ingress](/commands/jx_step_verify_ingress/)\t - Verifies the ingress configuration defaulting the ingress domain if necessary\n* [jx step verify install](/commands/jx_step_verify_install/)\t - Verifies that an installation is setup correctly\n* [jx step verify packages](/commands/jx_step_verify_packages/)\t - Verifies the versions of the required command line packages\n* [jx step verify pod](/commands/jx_step_verify_pod/)\t - pod [command]\n* [jx step verify preinstall](/commands/jx_step_verify_preinstall/)\t - Verifies all of the cloud infrastructure is setup before we try to boot up a cluster via 'jx boot'\n* [jx step verify requirements](/commands/jx_step_verify_requirements/)\t - Verifies all the helm requirements.yaml files have a version number populated from the Version Stream\n* [jx step verify url](/commands/jx_step_verify_url/)\t - Verifies a URL returns an expected HTTP code\n* [jx step verify values](/commands/jx_step_verify_values/)\t - \n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_behavior.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify behavior\"\nslug: jx_step_verify_behavior\nurl: /commands/jx_step_verify_behavior/\ndescription: list of jx commands\n---\n## jx step verify behavior\n\nVerifies the cluster behaves correctly by running the BDD tests to verify we can create quickstarts, previews and promote applications\n\n### Synopsis\n\nVerifies the cluster behaves correctly by running the BDD tests to verify we can create quickstarts, previews and promote applications.\n\n```\njx step verify behavior [flags]\n```\n\n### Examples\n\n```\n  # runs the BDD tests on the current cluster to verify it behaves nicely\n  jx step verify behavior\n```\n\n### Options\n\n```\n      --branch string               The git branch to use to run the BDD tests (default \"master\")\n      --credentials-secret string   The name of the secret to generate the bdd credentials from, if not specified, the default git auth will be used\n      --git-organisation string     Override the git org for the tests rather than reading from teamSettings\n  -u, --git-url string              The git URL of the BDD tests pipeline (default \"https://github.com/jenkins-x/bdd-jx.git\")\n  -h, --help                        help for behavior\n      --no-import                   Create the pipeline directly, don't import the repository\n      --test-suite string           Override the default test suite \n      --use-go-proxy                Enable the GoProxy for the bdd tests\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_dependencies.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify dependencies\"\nslug: jx_step_verify_dependencies\nurl: /commands/jx_step_verify_dependencies/\ndescription: list of jx commands\n---\n## jx step verify dependencies\n\n\n\n### Synopsis\n\n\n\n```\njx step verify dependencies [flags]\n```\n\n### Options\n\n```\n      --dir string   The directory of the repository to validate, there should be a dependency-matrix dir in it\n  -h, --help         help for dependencies\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_dns.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify dns\"\nslug: jx_step_verify_dns\nurl: /commands/jx_step_verify_dns/\ndescription: list of jx commands\n---\n## jx step verify dns\n\nVerifies DNS resolution for ingress rules\n\n### Synopsis\n\nThis step checks that dns has propagated for all ingresses\n\n```\njx step verify dns [flags]\n```\n\n### Examples\n\n```\n  jx step verify dns --timeout 10m\n```\n\n### Options\n\n```\n  -h, --help               help for dns\n  -t, --timeout duration   The default timeout for the endpoint to return the expected HTTP code (default 10m0s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_environments.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify environments\"\nslug: jx_step_verify_environments\nurl: /commands/jx_step_verify_environments/\ndescription: list of jx commands\n---\n## jx step verify environments\n\nVerifies that the Environments have valid git repositories setup - lazily creating them if needed\n\n### Synopsis\n\nVerifies that the Environments have valid git repositories setup - lazily creating them if needed\n\n```\njx step verify environments [flags]\n```\n\n### Options\n\n```\n  -d, --dir string   The directory to look for the jx-requirements.yml file, by default the current working directory\n  -h, --help         help for environments\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_git.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify git\"\nslug: jx_step_verify_git\nurl: /commands/jx_step_verify_git/\ndescription: list of jx commands\n---\n## jx step verify git\n\n\n\n### Synopsis\n\n\n\n```\njx step verify git [flags]\n```\n\n### Options\n\n```\n  -g, --github-app-owner string   The owner (organisation or user name) if using GitHub App based tokens\n  -h, --help                      help for git\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_ingress.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify ingress\"\nslug: jx_step_verify_ingress\nurl: /commands/jx_step_verify_ingress/\ndescription: list of jx commands\n---\n## jx step verify ingress\n\nVerifies the ingress configuration defaulting the ingress domain if necessary\n\n### Synopsis\n\nVerifies the ingress configuration defaulting the ingress domain if necessary\n\n```\njx step verify ingress [flags]\n```\n\n### Examples\n\n```\n  # populate the ingress domain if not using a configured 'ingress.domain' setting\n  jx step verify ingress\n```\n\n### Options\n\n```\n  -d, --dir string                 the directory to look for the values.yaml file (default \".\")\n      --external-ip string         The external IP used to access ingress endpoints from outside the Kubernetes cluster. For bare metal on premise clusters this is often the IP of the Kubernetes master. For cloud installations this is often the external IP of the ingress LoadBalancer.\n  -h, --help                       help for ingress\n      --ingress-namespace string   The namespace for the Ingress controller (default \"kube-system\")\n      --ingress-service string     The name of the Ingress controller Service (default \"jxing-nginx-ingress-controller\")\n      --lazy-create string         Specify true/false as to whether to lazily create missing resources. If not specified it is enabled if Terraform is not specified in the jx-requirements.yml file\n  -n, --namespace string           the namespace to install into. Defaults to $DEPLOY_NAMESPACE if not\n      --provider string            Cloud service providing the Kubernetes cluster.  Supported providers: aks, alibaba, aws, eks, gke, icp, iks, jx-infra, kubernetes, oke, openshift, pks\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_install.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify install\"\nslug: jx_step_verify_install\nurl: /commands/jx_step_verify_install/\ndescription: list of jx commands\n---\n## jx step verify install\n\nVerifies that an installation is setup correctly\n\n### Synopsis\n\nVerifies that an installation is setup correctly\n\n```\njx step verify install [flags]\n```\n\n### Options\n\n```\n      --debug                    Output logs of any failed pod\n  -d, --dir string               the directory to look for the install requirements file (default \".\")\n  -h, --help                     help for install\n      --namespace string         the namespace that Jenkins X will be booted into. If not specified it defaults to $DEPLOY_NAMESPACE\n  -w, --pod-wait-time duration   The default wait time to wait for the pods to be ready (default 1s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_packages.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify packages\"\nslug: jx_step_verify_packages\nurl: /commands/jx_step_verify_packages/\ndescription: list of jx commands\n---\n## jx step verify packages\n\nVerifies the versions of the required command line packages\n\n### Synopsis\n\nVerifies the versions of the required command line packages\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n```\njx step verify packages [flags]\n```\n\n### Examples\n\n```\n  Verifies the versions of the required command line packages\n  \n  # verify packages and fail if any are not valid:\n  jx step verify packages\n  \n  # override the error if the 'jx' binary is out of range (e.g. for development)\n  export JX_DISABLE_VERIFY_JX=\"true\"\n  jx step verify packages\n```\n\n### Options\n\n```\n  -d, --dir string             the directory to recursively look upwards for any 'jx-requirements.yml' file to determine the version stream (default \".\")\n      --helm-tls               Whether to use TLS with helm\n  -h, --help                   help for packages\n  -n, --namespace string       The namespace to use to look for helm's tiller\n  -p, --packages stringArray   The packages to verify (default [jx,kubectl,git,helm,kaniko])\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_pod.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify pod\"\nslug: jx_step_verify_pod\nurl: /commands/jx_step_verify_pod/\ndescription: list of jx commands\n---\n## jx step verify pod\n\npod [command]\n\n### Synopsis\n\npod [command]\n\n```\njx step verify pod [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for pod\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n* [jx step verify pod count](/commands/jx_step_verify_pod_count/)\t - Performs deployment verification in a pipeline\n* [jx step verify pod ready](/commands/jx_step_verify_pod_ready/)\t - Verifies all the pods are ready\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_pod_count.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify pod count\"\nslug: jx_step_verify_pod_count\nurl: /commands/jx_step_verify_pod_count/\ndescription: list of jx commands\n---\n## jx step verify pod count\n\nPerforms deployment verification in a pipeline\n\n### Synopsis\n\nThis pipeline step performs deployment verification\n\n```\njx step verify pod count [flags]\n```\n\n### Examples\n\n```\n  jx step verify\n```\n\n### Options\n\n```\n      --after int32      The time in seconds after which the application should be ready (default 60)\n  -h, --help             help for count\n  -p, --pods int32       Number of expected pods to be running (default 1)\n  -r, --restarts int32   Maximum number of restarts which are acceptable within the given time\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify pod](/commands/jx_step_verify_pod/)\t - pod [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_pod_ready.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify pod ready\"\nslug: jx_step_verify_pod_ready\nurl: /commands/jx_step_verify_pod_ready/\ndescription: list of jx commands\n---\n## jx step verify pod ready\n\nVerifies all the pods are ready\n\n### Synopsis\n\nThis step checks the status of all kubernetes pods\n\n```\njx step verify pod ready [flags]\n```\n\n### Examples\n\n```\n  jx step verify pod\n```\n\n### Options\n\n```\n      --debug                Output logs of any failed pod\n      --exclude-build        Exclude build pods\n  -h, --help                 help for ready\n  -w, --wait-time duration   The default wait time to wait for the pods to be ready (default 1s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify pod](/commands/jx_step_verify_pod/)\t - pod [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_preinstall.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify preinstall\"\nslug: jx_step_verify_preinstall\nurl: /commands/jx_step_verify_preinstall/\ndescription: list of jx commands\n---\n## jx step verify preinstall\n\nVerifies all of the cloud infrastructure is setup before we try to boot up a cluster via 'jx boot'\n\n### Synopsis\n\nVerifies all of the cloud infrastructure is setup before we try to boot up a cluster via 'jx boot'\n\n```\njx step verify preinstall [flags]\n```\n\n### Options\n\n```\n      --debug                        Output logs of any failed pod\n  -d, --dir string                   the directory to look for the install requirements file (default \".\")\n      --disable-verify-helm          Disable Helm verification, helpful when testing different Helm versions.\n      --disable-verify-packages      Disable packages verification, helpful when testing different package versions.\n  -h, --help                         help for preinstall\n      --lazy-create string           Specify true/false as to whether to lazily create missing resources. If not specified it is enabled if Terraform is not specified in the jx-requirements.yml file\n      --namespace string             the namespace that Jenkins X will be booted into. If not specified it defaults to $DEPLOY_NAMESPACE\n      --provider-values-dir string   The optional directory of kubernetes provider specific files\n      --workload-identity            Enable this if using GKE Workload Identity to avoid reconnecting to the Cluster.\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_requirements.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify requirements\"\nslug: jx_step_verify_requirements\nurl: /commands/jx_step_verify_requirements/\ndescription: list of jx commands\n---\n## jx step verify requirements\n\nVerifies all the helm requirements.yaml files have a version number populated from the Version Stream\n\n### Synopsis\n\nVerifies all the helm requirements.yaml files have a version number populated from the Version Stream.\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n```\njx step verify requirements [flags]\n```\n\n### Examples\n\n```\n  Verifies all the helm requirements.yaml files have a version number populated from the Version Stream\n  \n  # verify packages and fail if any are not valid:\n  jx step verify packages\n  \n  # override the error if the 'jx' binary is out of range (e.g. for development)\n  export JX_DISABLE_VERIFY_JX=\"true\"\n  jx step verify packages\n```\n\n### Options\n\n```\n  -d, --dir string   the directory to recursively look for 'requirements.yaml' files (default \".\")\n  -h, --help         help for requirements\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_url.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify url\"\nslug: jx_step_verify_url\nurl: /commands/jx_step_verify_url/\ndescription: list of jx commands\n---\n## jx step verify url\n\nVerifies a URL returns an expected HTTP code\n\n### Synopsis\n\nThis step checks the status of a URL\n\n```\njx step verify url [flags]\n```\n\n### Examples\n\n```\n  jx step verify url --endpoint https://jenkins-x.io\n```\n\n### Options\n\n```\n  -c, --code int             The HTTP code which should be returned by the endpoint (default 200)\n  -e, --endpoint string      The endpoint on which to wait for expected HTTP code\n  -h, --help                 help for url\n  -i, --insecureSkipVerify   If the URL requires an insucure request\n  -t, --timeout duration     The default timeout for the endpoint to return the expected HTTP code (default 10m0s)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_verify_values.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step verify values\"\nslug: jx_step_verify_values\nurl: /commands/jx_step_verify_values/\ndescription: list of jx commands\n---\n## jx step verify values\n\n\n\n### Synopsis\n\n\n\n```\njx step verify values [flags]\n```\n\n### Options\n\n```\n  -h, --help                      help for values\n  -r, --requirements-dir string   the path to the dir which contains the jx-requirements.yml file, if omitted looks in the current directory\n  -s, --schema-file string        the path to the JSON schema file\n  -v, --values-file string        the path to the values YAML file\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step verify](/commands/jx_step_verify/)\t - verify [command]\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_wait-for-chart.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step wait-for-chart\"\nslug: jx_step_wait-for-chart\nurl: /commands/jx_step_wait-for-chart/\ndescription: list of jx commands\n---\n## jx step wait-for-chart\n\nWaits for the given chart to be available in a helm repository\n\n### Synopsis\n\nWaits for the given Chart to be available in a Helm repository\n\n```\njx step wait-for-chart [flags]\n```\n\n### Examples\n\n```\n  # wait for a chart to be available\n  jx step wait-for-chart --chart-name foo --chart-version 1.0.0\n```\n\n### Options\n\n```\n      --chart-name string      Helm chart name to search for [required]\n      --chart-repo string      The repo to search for the helm chart (default \"https://storage.googleapis.com/chartmuseum.jenkins-x.io\")\n      --chart-version string   Helm chart version to search for [required]\n  -h, --help                   help for wait-for-chart\n      --poll-time string       The amount of time between polls for the Chart being present (default \"30s\")\n      --repo-password string   Helm Repo password if auth enabled\n      --repo-username string   Helm Repo username if auth enabled\n  -t, --timeout string         The duration before we consider this operation failed (default \"1h\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_step_wait.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx step wait\"\nslug: jx_step_wait\nurl: /commands/jx_step_wait/\ndescription: list of jx commands\n---\n## jx step wait\n\nWaits for the given artifact to be available in a maven style repository\n\n### Synopsis\n\nWaits for the given artifact to be available in a maven style repository\n\n```\njx step wait for artifact [flags]\n```\n\n### Examples\n\n```\n  # wait for a\n  jx step gpg credentials\n  \n  # generate the git credentials to a output file\n  jx step gpg credentials -o /tmp/mycreds\n```\n\n### Options\n\n```\n  -a, --artifact string       The artifact ID of the artifact to search for\n      --artifact-url string   The full URL of the artifact to wait for. If not specified it is calculated from the repository URL, group, artifact and version\n  -x, --ext string            The file extension to search for (default \"pom\")\n  -g, --group string          The group ID of the artifact to search for\n  -h, --help                  help for wait\n      --poll-time string      The amount of time between polls for the artifact URL being present (default \"10s\")\n  -r, --repo string           The URL of the maven style repository to query for the artifact (default \"https://repo1.maven.org/maven2/\")\n  -t, --timeout string        The duration before we consider this operation failed (default \"1h\")\n  -v, --version string        The version of the artifact to search for\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx step](/commands/jx_step/)\t - pipeline steps\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_stop.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx stop\"\nslug: jx_stop\nurl: /commands/jx_stop/\ndescription: list of jx commands\n---\n## jx stop\n\nStops a process such as a pipeline\n\n### Synopsis\n\nStops a process such as a Jenkins pipeline.\n\n```\njx stop TYPE [flags]\n```\n\n### Examples\n\n```\n  # Stop a pipeline\n  jx stop pipeline foo\n```\n\n### Options\n\n```\n  -h, --help   help for stop\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx stop pipeline](/commands/jx_stop_pipeline/)\t - Stops one or more pipelines\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_stop_pipeline.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx stop pipeline\"\nslug: jx_stop_pipeline\nurl: /commands/jx_stop_pipeline/\ndescription: list of jx commands\n---\n## jx stop pipeline\n\nStops one or more pipelines\n\n### Synopsis\n\nStops the pipeline build.\n\n```\njx stop pipeline [flags]\n```\n\n### Examples\n\n```\n  # Stop a pipeline\n  jx stop pipeline foo/bar/master -b 2\n  \n  # Select the pipeline to stop\n  jx stop pipeline\n```\n\n### Options\n\n```\n      --build int             The build number to stop\n  -m, --custom                Use a custom Jenkins App instead of the default execution engine in Jenkins X\n  -f, --filter string         Filters all the available jobs by those that contain the given text\n  -h, --help                  help for pipeline\n  -j, --jenkins-name string   The name of the custom Jenkins App if you don't wish to use the default execution engine in Jenkins X\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx stop](/commands/jx_stop/)\t - Stops a process such as a pipeline\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_sync.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx sync\"\nslug: jx_sync\nurl: /commands/jx_sync/\ndescription: list of jx commands\n---\n## jx sync\n\nSynchronises your local files to a DevPod\n\n### Synopsis\n\nSynchronises your local files to a DevPod so you an build and test your code easily on the cloud \n\nFor more documentation see: https://jenkins-x.io/developing/devpods/\n\n```\njx sync [flags]\n```\n\n### Examples\n\n```\n  # Starts synchronizing the current directory files to the users DevPod\n  jx sync\n```\n\n### Options\n\n```\n      --daemon                    Runs ksync in a background daemon\n  -h, --help                      help for sync\n      --no-init                   Disables the use of 'ksync init' to ensure we have initialised ksync\n      --single-mode ksync watch   Terminates eagerly if ksync watch fails\n      --watch-only                Deprecated this flag is now ignored!\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_team.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx team\"\nslug: jx_team\nurl: /commands/jx_team/\ndescription: list of jx commands\n---\n## jx team\n\nView or change the current team in the current Kubernetes cluster\n\n### Synopsis\n\nDisplays or changes the current team. \n\nFor more documentation on Teams see: https://jenkins-x.io/about/features/#teams\n\n```\njx team [flags]\n```\n\n### Examples\n\n```\n  # view the current team\n  jx team -b\n  \n  # pick which team to switch to\n  jx team\n  \n  # Change the current team to 'cheese'\n  jx team cheese\n```\n\n### Options\n\n```\n  -h, --help   help for team\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_ui.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx ui\"\nslug: jx_ui\nurl: /commands/jx_ui/\ndescription: list of jx commands\n---\n## jx ui\n\nOpens the CloudBees Jenkins X UI app for Kubernetes for visualising CI/CD and your environments\n\n### Synopsis\n\nOpens the CloudBees JX UI in a browser. \n\nWhich helps you visualise your CI/CD pipelines.\n\n```\njx ui [flags]\n```\n\n### Examples\n\n```\n  # Open the JX UI dashboard in a browser\n  jx ui\n  \n  # Print the Jenkins X console URL but do not open a browser\n  jx ui -u\n```\n\n### Options\n\n```\n  -h, --help                help for ui\n  -l, --hide-label          Hides the URL label from display\n  -p, --local-port string   The local port to forward the data to\n  -u, --url                 Only displays the label and the URL and does not open the browser\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_uninstall.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx uninstall\"\nslug: jx_uninstall\nurl: /commands/jx_uninstall/\ndescription: list of jx commands\n---\n## jx uninstall\n\nUninstall the Jenkins X platform\n\n### Synopsis\n\nUninstalls the Jenkins X platform from a Kubernetes cluster. This will remove all Jenkins X components, secrets, config and namespaces including any environment related namespaces\n\n```\njx uninstall [flags]\n```\n\n### Examples\n\n```\n  # Uninstall the Jenkins X platform\n  jx uninstall\n```\n\n### Options\n\n```\n      --context string      The kube context to uninstall JX from. This will be compared with the current context to prevent accidental uninstallation from the wrong cluster\n  -h, --help                help for uninstall\n      --keep-environments   Don't delete environments. Uninstall Jenkins X only.\n  -n, --namespace string    The team namespace to uninstall. Defaults to the current namespace.\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_update.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx update\"\nslug: jx_update\nurl: /commands/jx_update/\ndescription: list of jx commands\n---\n## jx update\n\nUpdates an existing resource\n\n### Synopsis\n\nUpdates an existing resource.\n  \n  Valid resource types include:\n  \n  * cluster\n\n```\njx update [flags]\n```\n\n### Options\n\n```\n  -h, --help   help for update\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx update webhooks](/commands/jx_update_webhooks/)\t - Updates the webhooks for all the source repositories optionally filtering by owner and/or repository\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_update_webhooks.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx update webhooks\"\nslug: jx_update_webhooks\nurl: /commands/jx_update_webhooks/\ndescription: list of jx commands\n---\n## jx update webhooks\n\nUpdates the webhooks for all the source repositories optionally filtering by owner and/or repository\n\n### Synopsis\n\nUpdates the webhooks for all the source repositories optionally filtering by owner and/or repository\n\n```\njx update webhooks [flags]\n```\n\n### Examples\n\n```\n  # update all the webhooks for all SourceRepository and Environment resource:\n  jx update webhooks\n  \n  # only update the webhooks for a given owner\n  jx update webhooks --org=mycorp\n```\n\n### Options\n\n```\n      --endpoint string            Don't use the endpoint from the cluster, use the provided endpoint\n      --exact-hook-url-match       Whether to exactly match the hook based on the URL (default true)\n  -h, --help                       help for webhooks\n      --hmac string                Don't use the HMAC token from the cluster, use the provided token\n  -o, --owner string               The name of the git organisation or user to filter on\n      --previous-hook-url string   Whether to match based on an another URL\n  -r, --repo string                The name of the repository to filter on\n      --warn-on-fail               If enabled lets just log a warning that we could not update the webhook\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx update](/commands/jx_update/)\t - Updates an existing resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade\"\nslug: jx_upgrade\nurl: /commands/jx_upgrade/\ndescription: list of jx commands\n---\n## jx upgrade\n\nUpgrades a resource\n\n### Synopsis\n\nUpgrade the whole Jenkins X platform.\n\n```\njx upgrade [flags]\n```\n\n### Examples\n\n```\n  # upgrade the command line tools\n  jx upgrade cli\n  \n  # upgrade extensions\n  jx upgrade extensions\n```\n\n### Options\n\n```\n  -h, --help   help for upgrade\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n* [jx upgrade addons](/commands/jx_upgrade_addons/)\t - Upgrades any Addons added to Jenkins X if there are any new releases available\n* [jx upgrade apps](/commands/jx_upgrade_apps/)\t - Upgrades any Apps to the latest release (an app is similar to an addon)\n* [jx upgrade binaries](/commands/jx_upgrade_binaries/)\t - Upgrades the command line binaries (like helm or eksctl) - if there are new versions available\n* [jx upgrade boot](/commands/jx_upgrade_boot/)\t - Upgrades jx boot config\n* [jx upgrade cli](/commands/jx_upgrade_cli/)\t - Upgrades the jx command line application if there is a new version available in the version stream\n* [jx upgrade crd](/commands/jx_upgrade_crd/)\t - Upgrades the Jenkins X Custom Resource Definitions in the Kubernetes Cluster\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_addons.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade addons\"\nslug: jx_upgrade_addons\nurl: /commands/jx_upgrade_addons/\ndescription: list of jx commands\n---\n## jx upgrade addons\n\nUpgrades any Addons added to Jenkins X if there are any new releases available\n\n### Synopsis\n\nUpgrades any Addons added to Jenkins X if there are any new releases available\n\n```\njx upgrade addons [flags]\n```\n\n### Examples\n\n```\n  # Upgrades any Addons added to Jenkins X\n  jx upgrade addons\n```\n\n### Options\n\n```\n      --cloud-environment-repo string   Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n  -h, --help                            help for addons\n      --local-cloud-environment         Ignores default cloud-environment-repo and uses current directory \n  -n, --namespace string                The Namespace to upgrade\n  -s, --set string                      The Helm parameters to pass in while upgrading\n      --versions-dir string             The directory containing the versions repo\n      --versions-ref string             Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string            Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n* [jx upgrade addons prow](/commands/jx_upgrade_addons_prow/)\t - Upgrades any AddonProw added to Jenkins X if there are any new releases available\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_addons_prow.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade addons prow\"\nslug: jx_upgrade_addons_prow\nurl: /commands/jx_upgrade_addons_prow/\ndescription: list of jx commands\n---\n## jx upgrade addons prow\n\nUpgrades any AddonProw added to Jenkins X if there are any new releases available\n\n### Synopsis\n\nUpgrades the Jenkins X platform if there is a newer release\n\n```\njx upgrade addons prow [flags]\n```\n\n### Examples\n\n```\n  # Upgrades the Jenkins X platform\n  jx upgrade addon prow\n```\n\n### Options\n\n```\n      --cloud-environment-repo string      Cloud Environments Git repo (default \"https://github.com/jenkins-x/cloud-environments\")\n      --external-dns                       Installs external-dns into the cluster. ExternalDNS manages service DNS records for your cluster, providing you've setup your domain record (default true)\n  -h, --help                               help for prow\n      --local-cloud-environment            Ignores default cloud-environment-repo and uses current directory \n  -n, --namespace string                   The Namespace to upgrade\n      --new-knative-build-version string   The new kanative build verion that prow needs to work with (default \"0.1.1\")\n  -s, --set string                         The Helm parameters to pass in while upgrading\n  -t, --tekton                             Enables Knative Build Pipeline. Otherwise we default to use Knative Build (default true)\n      --versions-dir string                The directory containing the versions repo\n      --versions-ref string                Jenkins X versions Git repository reference (tag, branch, sha etc)\n      --versions-repo string               Jenkins X versions Git repo (default \"https://github.com/jenkins-x/jenkins-x-versions.git\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade addons](/commands/jx_upgrade_addons/)\t - Upgrades any Addons added to Jenkins X if there are any new releases available\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_apps.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade apps\"\nslug: jx_upgrade_apps\nurl: /commands/jx_upgrade_apps/\ndescription: list of jx commands\n---\n## jx upgrade apps\n\nUpgrades any Apps to the latest release (an app is similar to an addon)\n\n### Synopsis\n\nUpgrades Apps to newer releases (an app is similar to an addon)\n\n```\njx upgrade apps [flags]\n```\n\n### Examples\n\n```\n  # Upgrade all apps\n  jx upgrade apps\n  \n  # Upgrade a specific app\n  jx upgrade app cheese\n```\n\n### Options\n\n```\n      --alias string        An alias to use for the app [--gitops]\n      --ask-all             Ask all configuration questions. By default existing answers are reused automatically.\n      --auto-merge          Automatically merge GitOps pull requests that pass CI\n      --helm-update         Should we run helm update first to ensure we use the latest version (available when NOT using GitOps for your dev environment) (default true)\n  -h, --help                help for apps\n      --namespace string    The Namespace to promote to [--no-gitops]\n      --password string     The password for the repository\n  -r, --release string      The chart release name (by default the name of the app, available when NOT using GitOps for your dev environment)\n      --repository string   The repository from which the app should be installed\n  -s, --set stringArray     The Helm parameters to pass in while upgrading [--no-gitops]\n      --username string     The username for the repository\n  -v, --version string      The chart version to install [--gitops]\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_binaries.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade binaries\"\nslug: jx_upgrade_binaries\nurl: /commands/jx_upgrade_binaries/\ndescription: list of jx commands\n---\n## jx upgrade binaries\n\nUpgrades the command line binaries (like helm or eksctl) - if there are new versions available\n\n### Synopsis\n\nUpgrades the Jenkins X command line binaries (like helm or eksctl) if there is a newer release\n\n```\njx upgrade binaries [flags]\n```\n\n### Examples\n\n```\n  # Upgrades the Jenkins X binaries (like helm or eksctl)\n  jx upgrade binaries\n```\n\n### Options\n\n```\n  -h, --help   help for binaries\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_boot.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade boot\"\nslug: jx_upgrade_boot\nurl: /commands/jx_upgrade_boot/\ndescription: list of jx commands\n---\n## jx upgrade boot\n\nUpgrades jx boot config\n\n### Synopsis\n\nThis command creates a pr for upgrading a jx boot gitOps cluster, incorporating changes to the boot config and version stream ref\n\n```\njx upgrade boot [flags]\n```\n\n### Examples\n\n```\n  # create pr for upgrading a jx boot gitOps cluster\n  jx upgrade boot\n```\n\n### Options\n\n```\n  -d, --dir string                          the directory to look for the Jenkins X Pipeline and requirements\n  -h, --help                                help for boot\n      --labels stringArray                  Labels to add to the generated upgrade PR\n      --latest-release                      upgrade to latest release tag\n      --upgrade-version-stream-ref string   a version stream ref to use to upgrade to (default \"master\")\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_cli.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade cli\"\nslug: jx_upgrade_cli\nurl: /commands/jx_upgrade_cli/\ndescription: list of jx commands\n---\n## jx upgrade cli\n\nUpgrades the jx command line application if there is a new version available in the version stream\n\n### Synopsis\n\nUpgrades the Jenkins X command line tools if there is a different version stored in the version stream. \n\nThe exact version used for the version stream is stored in the Team Settings on the 'dev' Environment CRD. \n\nFor more information on Version Streams see: https://jenkins-x.io/about/concepts/version-stream/\n\n```\njx upgrade cli [flags]\n```\n\n### Examples\n\n```\n  # Upgrades the Jenkins X CLI tools\n  jx upgrade cli\n```\n\n### Options\n\n```\n  -h, --help             help for cli\n      --no-brew          Disables brew package manager on MacOS when installing binary dependencies\n  -v, --version string   The specific version to upgrade to (requires --no-brew on macOS)\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_upgrade_crd.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx upgrade crd\"\nslug: jx_upgrade_crd\nurl: /commands/jx_upgrade_crd/\ndescription: list of jx commands\n---\n## jx upgrade crd\n\nUpgrades the Jenkins X Custom Resource Definitions in the Kubernetes Cluster\n\n### Synopsis\n\nUpgrades the Jenkins X Custom Resource Definitions in the Kubernetes Cluster\n\n```\njx upgrade crd [flags]\n```\n\n### Examples\n\n```\n  # Upgrades the Custom Resource Definitions\n  jx upgrade crd\n```\n\n### Options\n\n```\n  -h, --help   help for crd\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx upgrade](/commands/jx_upgrade/)\t - Upgrades a resource\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/commands/jx_version.md": "---\ndate: 2020-09-02T10:36:03-04:00\ntitle: \"jx version\"\nslug: jx_version\nurl: /commands/jx_version/\ndescription: list of jx commands\n---\n## jx version\n\nPrint the version information\n\n### Synopsis\n\nPrint the version information\n\n```\njx version [flags]\n```\n\n### Options\n\n```\n  -h, --help    help for version\n      --short   Print version\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n### SEE ALSO\n\n* [jx](/commands/jx/)\t - jx is a command line tool for working with Jenkins X\n\n###### Auto generated by spf13/cobra on 2-Sep-2020\n",
            "content/en/docs/reference/components/_index.md": "---\ntitle: \"Components in Jenkins X\"\nlinkTitle: \"Components\"\nweight: 19\ndescription: >\n  What Jenkins X is made of.\n---\n",
            "content/en/docs/reference/components/custom-resources.md": "---\ntitle: Custom Resources\nlinktitle: Custom Resources\ndescription: Custom Resources defined by Jenkins X\nparent: \"components\"\nweight: 10\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/custom-resources\n---\n\nKubernetes provides an extension mechanism called [Custom Resources](https://kubernetes.io/docs/concepts/api-extension/custom-resources/) which allows microservices to extend the Kubernetes platform to solve higher order problems.\n\nSo in Jenkins X, we have added a number of Custom Resources to help extend Kubernetes to support CI/CD.\n\nYou can also [browse the Custom Resource API Reference](/apidocs/)\n\n## Environments\n\nJenkins X natively supports [environments](/about/concepts/features/#environments) allowing them to be defined for your team and then queried via [jx get environments](/commands/jx_get_environments/):\n\n```sh\njx get environments\n```\n\nUnder the covers that command uses the custom Kubernetes resource `Environments`.\n\nSo you can also query the environments via [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) as well:\n\n\n```sh\nkubectl get environments\n```\n\nOr edit them via `YAML` directly if you want:\n\n```sh\nkubectl edit env staging\n```\n\nthough you may prefer the easier to use [jx edit environment](/commands/jx_edit_environment/) command.\n\n## Release\n\nThe Jenkins X pipelines generate a custom `Release` resource which we can use to keep track of:\n\n* what version, Git tag and Git URL map to a release in Kubernetes/Helm\n* what Jenkins pipeline URL and log was used to perform the release\n* which commits, issues and Pull Requests were part of each release so that we can implement [feedback as issues are fixed in Staging/Production](/about/concepts/features/#feedback)\n\n## SourceRepository\n\nThis stores information about source code repositories that Jenkins X is set to build.\n\nIt is created by `jx import` and `jx create quickstart` and removed whenever a `jx delete application` is invoked.\n\n## Scheduler\n\nThis is used to define a configuration for one or more `SourceRepository` and is used by [jx boot]() to generate the Prow configuration.\n\nThis lets you setup a default `Scheduler` for a team and then you don't have to touch your prow configuration at all; all imported/created projects will inherit from the default `Scheduler`.\n\nOr when you perform `jx import` or `jx create quickstart` you can pass in a `--scheduler` command line argument to use a specific scheduler.\n\n\n## PipelineActivity\n\nThis resource stores the pipeline status in terms of Jenkins Pipeline stages plus the [promotion activity](/about/concepts/features/#promotion).\n\nThis resource is also used by the [jx get activities](/commands/jx_get_activities/) command.\n\n## Team\n\nThe `Team` Custom Resource is created via the [jx create team](/commands/jx_create_team/) command and is used by the `team controller` to watch for new `Team` resources and then create an installation of Jenkins X in the `teams` namespace. For more background on teams see the [team feature](/about/concepts/features/#teams).\n\n### User\n\nThe `User` Custom Resource is used to support RBAC across the various [environments](/about/concepts/features/#environments) and [preview environments](/about/concepts/features/#preview-environments) in teams.\n\nIt is also used by the [jx edit userroles](/commands/jx_edit_userroles/) to change user roles.\n\n## EnvironmentRoleBinding\n\nThe `EnvironmentRoleBinding` resource is like the standard Kubernetes [RoleBinding](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#rolebinding-v1-rbac-authorization-k8s-io) resource, but it allows mapping of a `Role` to multiple [environments](/about/concepts/features/#environments) and [preview environments](/about/concepts/features/#preview-environments) in a team by using a selector of Environments on which to bind roles.\n\nThis makes it easy to bind a `Role` to either all environments, all preview environments or both or a given set of users.\n\n\n",
            "content/en/docs/reference/components/decisions.md": "---\ntitle: Decisions\nlinktitle: Decisions\ndescription: Documented decisions made by the Jenkins X project\nweight: 20\n---\n\n# Decisions\n\nJenkins X is an opinionated developer experience, here we will explain the background and decisions we have taken to help explain the reasons for these opinions.  You may also want to take a look at the [Accelerate](/docs/reference/components/decisions/) page for details on how Jenkins X implements the capabilities recommended by\n\n## Kubernetes\n\nFirst is why Jenkins X is purely focused on Kubernetes and is only intended to run on it.\n\nKubernetes has won the cloud wars, every major cloud provider now either supports Kubernetes or is actively working on a Kubernetes solution.  Google, Microsoft, Amazon, Red Hat, Oracle, IBM, Alibaba, Digital Ocean, Docker, Mesos and Cloud Foundry to name a few.  We now have one deployment platform to target and develop first class portable applications for.\n\nThe Kubernetes ecosystem is rich with innovation and with a vibrant, forward thinking, diverse open source community which is inviting only suggests great things for all involved.\n\nJenkins X strongly recommends using public cloud managed Kubernetes clusters where possible. GKE, AKS and EKS all offer managed Kubernetes services, which dramatically reduces risk of installing, upgrading and maintaining your Kubernetes cluster so you can focus on developing awesome code.\n\n\ni.e. let folks that know how to run containers and manage clusters at scale so you can focus on adding value to your business.\n\n\n## Draft\n\n[Draft](https://draft.sh) has a few capabilities but Jenkins X only uses the language detection and pack creation feature.  Jenkins X maintains it's own [draft packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) tailored to run with Jenkins X.\n\nDraft provides a great way to bootstrap a source code project with the necessary packaging needed to run the application on Kubernetes.\n\nThe Draft project came from Deis who were acquired by Microsoft and continue to invest and evolve their Kubernetes developer story.\n\n## Helm\n\n[Helm](https://helm.sh) provides the templated packaging for running applications on Kubernetes.  We've received mixed feedback from our use of Helm.  From our experience being able to template and compose multiple Helm Charts together has been a very welcome find. This lead to our use of using Helm to compose, install and upgrade entire environments and being able to easily override values such as number of replicas or application resource limits per environment for example.\n\nOpenShift Templates aimed to do a similar thing however they are OpenShift specific.\n\nLots of the concerns with Helm are being addressed with the major version upgrade of Helm 3.  Removing the use of Tiller the server side component of Helm is a big win as it's seen as being insecure given the elevated permissions it needs to run.  Jenkins X [provides a way](/docs/reference/components/helm3/) to use the beta version of Helm 3 for folks that would like to try this instead, we're using this ourselves and it's working great so far.  If there are issues we'd like to feedback to the Helm project so we can help get them to GA sooner.\n\nThe Helm project came from Deis who were acquired by Microsoft and continue to invest and evolve their Kubernetes developer story.\n\n## Skaffold\n\nJenkins X uses [Skaffold](https://github.com/GoogleContainerTools/skaffold) to perform the build and push image actions in a pipeline.  Skaffold allows us to implement different image builder and registries services like [Google Container Builder](https://cloud.google.com/container-builder/), [Azure Container Builder](https://github.com/Azure/acr-builder) and [ECR](https://aws.amazon.com/ecr/).  \n\nFor folks that aren't running on a public cloud with container builder or registry services then Skaffold can also work with [kaniko](https://github.com/GoogleContainerTools/kaniko), this allows pipelines to build docker images using rootless containers.  This is significantly more secure than mounting the docker socket from each node in the cluster.\n\n## Prow\n\n[Prow](https://github.com/kubernetes/test-infra/tree/master/prow) handles Git events and can trigger workflows in Kubernetes.\n\nProw can run in a highly available mode where multiple pods for a webhook ingress URL.  In contrast with Jenkins if you perform an upgrade then Jenkins has some downtime where webhook events can be missed.  This is in our future plans and we hope to be available soon.\n\n## Nexus\n\n[Nexus](https://help.sonatype.com/repomanager3) is an overweight JVM that recently moved to OSGi however it does the job we need of it.  Cache dependencies for faster builds and provide a shared repository where teams can share their released artifacts.  \n\nIf someone developed an open source artifact repository server in a more cloud friendly language like Go then Jenkins X would likely switch to save on cloud bills.\n\nRight now Jenkins X doesn't use the docker registry from Nexus.  The main reason was we needed to do some work to setup pod definitions with image pull secrets so we can use the authenticated registry.  Our preferred approach however is to switch to using native cloud provider registries like Amazon's [ECR](https://aws.amazon.com/ecr/), [Google Container Registry](https://cloud.google.com/container-registry/) or Dockerhub for example with the help of Skaffold.\n\n## Docker registry\n\nAs above, we don't intend to use [this registry](https://github.com/kubernetes/charts/tree/master/stable/docker-registry) long term as we prefer using cloud provider registries like Amazon's [ECR](https://aws.amazon.com/ecr/), [Google Container Registry](https://cloud.google.com/container-registry/) or Dockerhub for example with the help of Skaffold.\n\n## ChartMuseum\n\nAt time of creating Jenkins X there were few options of how to publish Helm Charts, the Kubernetes community uses GitHub pages but we wanted to find a solution that works for folks that use any git provider.  [ChartMuseum](https://github.com/kubernetes-helm/chartmuseum) is written in Go so performs well in the cloud, it supports multiple cloud storage and works great with Monocular.\n\n## Monocular\n\nWe use [Monocular](https://github.com/kubernetes-helm/monocular) to discover our Teams published applications, we could use KubeApps by default instead if it is preferred by the community but we'll enable KubeApps as an addon regardless.\n\n## Git\n\nJenkins X only works with Git.  There are a lot of dependencies and client implementations Jenkins X already needs to support for different Git providers, we don't hear enough demand to support other version control systems so for now Jenkins X is tied to Git.\n\n## Programming languages\n\nJenkins X aims to help provide the right level of feedback for developers to understand how their applications are performing and give them easy ways to experiment with other languages which may suit both the feature and running on the Cloud better.  For example there are a lot of Java based organizations that only know how to write, run and maintain Java applications.  Java is extremely resource intensive compared with Golang, Rust, Swift, NodeJS to name a few, this results in much much higher cloud bills each month.  With Jenkins X we aim to help developers experiment with other options using quickstarts and metrics addons like Grafana and Prometheus to see how they behave in the cloud.\n\nFor example any new microservice that we build on the Jenkins X project tends to be in either Golang or NodeJS given the huge effect is has on our cloud billing.  It does take time to shift to a new programming language but with Jenkins X we hope we can mitigate a lot of risk using quickstarts, automated CI/CD and a relatively consistent way of working on all languages.\n\n### Maven\n\nMaven has some tooling that a lot of folks are used to using which doesn't suit CD particularly well.  For example the [maven release plugin](http://maven.apache.org/maven-release/maven-release-plugin/) will version a project and commit directly back to master the new next SNAPSHOT version which in CD world would trigger another release resulting in a recursive loop.\n\nFor Java projects Jenkins X uses the [maven version:set plugin](https://www.mojohaus.org/versions-maven-plugin/set-mojo.html) to update all poms in a project using the next release version following the #Versioning step mentioned above.\n\nIf a new major or minor version increment is needed users can create a new Git tag with the new major / minor number and Jenkins X will respect that.  Alternatively you can update the parent `pom.xml` and any child pom files yourself and Jenkins X will detect and use the new major or minor version.\n",
            "content/en/docs/reference/components/docker-registry.md": "---\ntitle: Docker Registry\nlinktitle: Docker Registry\ndescription: Configuring your docker registry\nweight: 90\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/docker-registry\n---\n\nTo be able to create and publish Docker images, we use a Docker Registry.\nIf you want to change the default registry, you need to:\n\n1. tell Jenkins X, which Docker registry host to use.\n1. ensure `env/parameters.yaml` contains the required authentication parameters\n1. ensure your secret store contains the necessary secret\n1. ensure `values.tmpl.yaml` for your Kubernetes provider contains the correct _DockerConfig_ configuration\n\nThe following sections provide more details around these steps.\n\n{{% alert %}}\nThis guide assumes that you already have a Jenkins X cluster using the default registry and you want to switch to a custom, non-default one.\nIf you are installing Jenkins X on a fresh cluster, not all steps are necessary and handled interactively after you answer _yes_ to the question: \"Do you want to configure an external Docker Registry?\".\n{{% /alert  %}}\n\n{{% alert %}}\nYou need a checkout of your Boot configuration repository in which you run `jx boot` locally or create a pull request.\nFor more information refer to [Changing your installation](/docs/install-setup/boot/#changing-your-installation) in the Boot documentation.\n{{% /alert %}}\n\n## Configure Docker registry\n\nTo change the default Docker registry, you need set the registry host in the `registry` property of your `jx-requirements.yml` file.\nIn case you want to use Docker Hub, the configuration would look like this:\n\n```yaml\ncluster:\n  registry: docker.io\n```\n\n## Ensure authentication parameters\n\nNext, you have to check the file `env/parameters.yaml` in your checkout of the Boot repository.\nIt needs to contain a _docker_ configuration section, similar to this:\n\n```yaml\nenableDocker: true\ndocker:\n  email: <email>\n  password: vault:<cluster-name>/docker:password\n  url: <url>\n  username: <username>\n```\n\nIf you have been using the default registry your `env/parameters.yaml` might not contain a _docker_ section at all.\nIf so, add the required configuration and make sure to set `enableDocker: true`.\n\nThe password uses a special format which allows to reference secrets from your configured [secret store](/docs/install-setup/boot/secrets/).\n[Injecting secrets into the parameters](/docs/install-setup/boot/how-it-works/#injecting-secrets-into-the-parameters) describes in more detail how secrets work in conjunction with `env/parameters.yaml`.\n\n{{% alert %}}\nAn alternative approach is to just set `enableDocker: true` and run `jx boot` locally.\nIn this case, it will interactively ask for the required parameters again and persist them into `env/parameters.yaml` and the underlying secret store.\n{{% /alert  %}}\n\n## Update secret store\n\nThe next step is to make sure the password is stored in the secret store.\nAssuming you are using [Vault](/docs/install-setup/boot/secrets/) as the secret store, you need to make sure the secret identified by the URI _vault:\\<cluster-name\\>/docker:password_ exists.\nThis can be achieved by running (you need the `vault` CLI installed for that):\n\n```sh\neval $(jx get vault-config)\nvault kv put /secret/<cluster-name>/docker password=<my-password>\n```\n\nYou can find more information on how to interact with Vault secrets in the [Manage your secrets](/docs/reference/components/vault/) section.\n\n## Update Kubernetes provider configuration\n\nFinally, you need to make sure that the correct Docker authentication `config.json` gets generated and stored in the Kubernetes Secret `jenkins-docker-cfg` (within your development namespace).\nUltimately, this secret is mounted into the Pod executing the `docker push` and is responsible for authenticating against the configured Docker registry.\n\n{{% alert %}}\nIf you are running an old `jx install` based cluster, changing your Docker registry credentials comes just down to changing the `jenkins-docker-cfg` Secret.\n\n```sh\nkubectl delete secret jenkins-docker-cfg -n jx\nkubectl create secret generic jenkins-docker-cfg -n jx --from-file=./config.json\n```\n\n{{% /alert  %}}\n\nWith Jenkins X Boot, the `jenkins-docker-cfg` Secret is created in the Kubernetes provider-specific file `values.tmpl.yaml`.\nYou can find this file in the [_kubeProviders_](https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/kubeProviders) subdirectory of your Boot configuration repository.\nThe Docker specific configuration in `values.tmpl.yaml` for GKE looks like this:\n\n```yaml\njenkins-x-platform:\n  PipelineSecrets:\n\n{{- if eq .Parameters.enableDocker true }}\n    DockerConfig: |-\n      {\n        \"auths\":{\n          {{ .Parameters.docker.url | quote }}:\n            {\n              \"auth\": {{ printf \"%s:%s\" .Parameters.docker.username .Parameters.docker.password | b64enc | quote}},\n              \"email\": {{ .Parameters.docker.email | quote}}\n            }\n        }\n      }\n{{- else}}\n    # lets enable GCR Docker builds\n    DockerConfig: |-\n      {\n          \"credHelpers\": {\n              \"gcr.io\": \"gcr\",\n              \"us.gcr.io\": \"gcr\",\n              \"eu.gcr.io\": \"gcr\",\n              \"asia.gcr.io\": \"gcr\",\n              \"staging-k8s.gcr.io\": \"gcr\"\n          }\n      }\n{{- end}}\n```\n\nYou can see how the _enableDocker_ parameter discussed in [Ensure authentication parameters](/docs/reference/components/docker-registry/#ensure-authentication-parameters) is used to switch between the different formats of `config.json`.\nYou need to ensure that the enabled _DockerConfig_ matches your requirements.\nIf that is not the case adjust `values.tmpl.yaml` to match the format required by your registry.\n\nThe following sections describe some of the typical `config.json` formats used by various Docker registries.\n\n### Google Container Registry (GCR)\n\nIf you want to use GCR, you can create your `config.json` by running:\n\n```sh\ngcloud auth configure-docker\n```\n\nThe above command will ask you to confirm writing a _credHelpers_ section to your `config.json` in your home directory under `.docker/config.json`.\nIt is sufficient to place the _credHelpers_ section into a new `config.json`.\nThe content should look similar to:\n\n```json\n {\n  \"credHelpers\": {\n    \"gcr.io\": \"gcloud\",\n    \"marketplace.gcr.io\": \"gcloud\",\n    \"eu.gcr.io\": \"gcloud\",\n    \"us.gcr.io\": \"gcloud\",\n    \"staging-k8s.gcr.io\": \"gcloud\",\n    \"asia.gcr.io\": \"gcloud\"\n  }\n}\n```\n\n### Elastic Container Registry (ECR)\n\nFor AWS and its  Elastic Container Registry (ECR), the `config.json` looks like:\n\n```json\n{\n    \"credsStore\": \"ecr-login\"\n}\n```\n\n### Docker Hub\n\nIf you want to publish images to Docker Hub, then you need a `config.json` with and _auth_ section containing your Docker Hub auth token.\nFor example:\n\n```json\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"MyDockerHubToken\"\n        }\n    }\n}\n```\n\nCheck `.docker/config.json` in your home directory to see whether it contains the required configuration.\n\nIf you don't have a `.docker/config.json`, you can run:\n\n```sh\ndocker login -u <username> -p <password>\n```\n\nOn macOS you might find something like this:\n\n```json\n\"credsStore\": \"osxkeychain\"\n```\n\nin `.docker/config.json` without an _auths_ section.\nIn this case, you can edit the _credsStore_ line and set the value of this property to \"\".\nThen run:\n\n```sh\ndocker logout\ndocker login -u <username> -p <password>\n```\n\n### jFrog BinTray (Artifactory)\n\nIt is also possible to use jFrog BinTray as a private registry.\nThe content should look similar to:\n\n```json\n{\n    \"auths\": {\n        \"https://private-reg.bintray.io\": {\n            \"auth\": \"username:password (base64 encoded)\",\n            \"email\": \"myemail@acme.com\"\n        }\n    }\n}\n```\n",
            "content/en/docs/reference/components/helm3.md": "---\ntitle: Helm 3\nlinktitle: Helm 3\ndescription: Using Helm 3 with Jenkins X \nweight: 110\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/helm3\n---\n\ncurrently the stable release of Jenkins X uses helm 2.x\n",
            "content/en/docs/reference/components/lighthouse.md": "---\ntitle: Lighthouse\nlinktitle: Lighthouse\ndescription: Lightweight webhook and [ChatOps](/docs/resources/faq/using/chatops/) handling for multiple Git providers\nweight: 41\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/lighthouse\n  - /architecture/lighthouse\n---\n\n[Lighthouse](https://github.com/jenkins-x/lighthouse) is a lightweight [ChatOps](/docs/resources/faq/using/chatops/) based webhook handler which can trigger [Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) on webhooks from multiple git providers such as: GitHub, GitHub Enterprise, GitLab, and BitBucket Server. It is a successor to [Prow](/docs/reference/components/prow/), providing support for more SCM providers, a smaller footprint, and an easier path to adding features going forward. Lighthouse has been the default webhook handler in Jenkins X since early May, 2020.\n\nCurrently Lighthouse is focused on using [Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) with tekton.\n## Features\n\nCurrently Lighthouse supports the common [prow plugins](https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow/plugins) and handles push webhooks to branches & Pull Request webhooks to then trigger Jenkins X pipelines.\n\nLighthouse uses the same `config.yaml` and `plugins.yaml` file structure from Prow so that we can easily migrate from `prow <-> lighthouse`.\n\nThis also means we get to reuse the clean generation of Prow configuration from the `SourceRepository`, `SourceRepositoryGroup` and `Scheduler` CRDs integrated into [jx boot](/docs/reference/boot/). e.g. here's the [default scheduler configuration](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/templates/default-scheduler.yaml) which is used for any project imported into your Jenkins X cluster; without you having to touch the actual prow configuration files. You can create many schedulers and associate them to different `SourceRepository` resources.\n\nWe can also reuse Prow's capability of defining many separate pipelines on a repository (for PRs or releases) via having separate `contexts`. Then on a Pull Request we can use `/test something` or `/test all` to trigger pipelines and use the `/ok-to-test` and `/approve` or `/lgtm` commands\n\n\n## Using Lighthouse with boot\n\nWe have integrated [lighthouse](https://github.com/jenkins-x/lighthouse) into [jx boot](/docs/reference/boot/). To switch to `lighthouse` from `prow` you need to add something like this to your `jx-requirements.yml` file:\n\n```yaml\nwebhook: lighthouse\n```\n\nOnce you have modified your `jx-requirements.yml` file you just need to run `jx boot`.\n\nIf you are using something else other than github.com as your git provider you will also require some extra YAML to configure the git provider. Here are some examples:\n\n## GitHub Enterprise\n\n```yaml\ncluster:\n  provider: gke\n  zone: europe-west1-c\n  environmentGitOwner: myowner\n  gitKind: github\n  gitName: ghe\n  gitServer: https://my-github.com\nwebhook: lighthouse\n```\n\n## BitBucket Server\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myowner\n  gitKind: bitbucketserver\n  gitName: bs\n  gitServer: https://my-bitbucket-server.com\nwebhook: lighthouse\n```\n\n## GitLab\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myowner\n  gitKind: gitlab\n  gitName: gitlab\n  gitServer: https://my-gitlab-server.com\nwebhook: lighthouse\n```\n\n## Comparisons to Prow\n\nLighthouse is based on a fork of Prow's source code, including most of the built-in [plugins from prow](https://github.com/jenkins-x/lighthouse/tree/master/pkg/plugins)\n\nThe most noteworthy differences are:\n\n* In order to support multiple SCM providers, Lighthouse uses [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) as an abstraction layer, allowing additional provider support to be implemented without needing significant changes within Lighthouse itself.\n* Lighthouse has less moving parts and potential configuration than Prow, resulting in only four pods being run for Lighthouse: two webhook receiver replicas, a Keeper pod, which handles deciding when to merge and actually merging pull requests, and a Foghorn pod, which handles reporting commit statuses back to the provider.\n\n## Porting Prow commands\n\nIf there are any Prow commands you want which we've not yet ported over, it's relatively easy to port Prow plugins.\n\nWe've reused the Prow plugin code and configuration code as the basis for Lighthouse; so its mostly a case of switching imports of `k8s.io/test-infra/prow` to `github.com/jenkins-x/lighthouse` - then modifying the github client structs from, say, `github.PullRequest` to `scm.PullRequest`.\n\nMost of the GitHub structs map 1-1 with the [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) equivalents (e.g. Issue, Commit, PullRequest) though the go-scm API does tend to return slices to pointers to resources by default. There are some naming differences at different parts of the API though.\n\ne.g. compare the `githubClient` API for the [Prow lgtm](https://github.com/kubernetes/test-infra/blob/344024d30165cda6f4691cc178f25b16f1a1f5af/prow/plugins/lgtm/lgtm.go#L134-L150) versus the `scmProviderClient` API for the [Lighthouse lgtm](https://github.com/jenkins-x/lighthouse/blob/b2090082db828fb2d4c11095c5e59bf4a828c8de/pkg/plugins/lgtm/lgtm.go#L135-L151).\n\nAll the Prow-descended plugin related code lives in the [pkg/plugins](https://github.com/jenkins-x/lighthouse/tree/master/pkg/plugins) tree of packages. Mostly all we've done is switch to using [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) and switch out the current Prow agents and instead use a single `tekton` agent using the [PipelineLauncher](https://github.com/jenkins-x/lighthouse/blob/master/pkg/launcher/interface.go#L12) to trigger pipelines.\n\n\n## Environment variables\n\nThe following environment variables are used:\n\n| Name  |  Description |\n| ------------- | ------------- |\n| `GIT_KIND` | the kind of git server: `github, bitbucket, gitea, stash` |\n| `GIT_SERVER` | the URL of the server if not using the public hosted git providers: https://github.com or https://bitbucket.org https://gitlab.com |\n| `GIT_USER` | the git user (bot name) to use on git operations |\n| `GIT_TOKEN` | the git token to perform operations on git (add comments, labels etc) |\n| `HMAC_TOKEN` | the token sent from the git provider in webhooks |\n| `JX_SERVICE_ACCOUNT` | the service account to use for generated pipelines |\n",
            "content/en/docs/reference/components/pod-templates.md": "---\ntitle: Pod Templates\nlinktitle: Pod Templates\ndescription: Pods used to implement Jenkins pipelines\nweight: 160\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/pod-templates\n---\n\nWe implement CI/CD pipelines using declarative Jenkins pipelines using a `Jenkinsfile` in the source of each application or environment git repository.\n\nWe use the [kubernetes plugin](https://github.com/jenkinsci/kubernetes-plugin) for Jenkins to be able to spin up new pods on kubernetes for each build - giving us an elastic pool of agents to run pipelines thanks to kubernetes.\n\nThe Kubernetes plugin uses _pod templates_ to define the pod used to run a CI/CD pipeline which consists of:\n\n* one or more build containers for running commands inside (e.g. your build tools like `mvn` or `npm` along with tools we use for other parts of the pipeline like `git, jx, helm, kubectl` etc)\n* volumes for persistence\n* environment variables\n* secrets so the pipeline can write to git repositories, docker registries, maven/npm/helm repositories and so forth\n\n## Referring to Pod Templates\n\nJenkins X comes with a default set of pod templates for supported languages and runtimes in our [build packs](/architecture/build-packs/) and are named something like: `jenkins-$PACKNAME`.\n\nFor example the [maven build pack](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/) uses the pod template `jenkins-maven`.\n\nWe can then [refer to the pod template name in the Jenkinsfile](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/Jenkinsfile#L1-L4) using the `agent { label \"jenkins-$PACKNAME\" }` syntax in the declarative pipeline. e.g.\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-maven\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('maven') {\n            sh \"mvn deploy\"\n          }\n          ...\n```\n\n## Submitting new Pod Templates\n\nIf you are working on a new [build pack](/architecture/build-packs/) then we'd love you to [submit](/docs/contributing/) a new pod template and we can include it in the Jenkins X distribution!\n\nThere now follows instructions on how to do this - please if anything is not clear come [join the community and just ask](/community/) we are happy to help!\n\nTo submit a new build pack:\n\n* fork the [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/) repository\n* add your build pack to the [values.yaml file in the jenkins-x-platform repository](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml) in the `jenkins.Agent.PodTemplates` section of the YAML\n* you may want to start by copy/pasting the most similar existing pod template (e.g. copy `Maven` if you are working on a Java based build pod) and just configuring the name, label and `Image` etc.\n* now submit a Pull Request on the [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/) repository for your pod template\n\n### Build containers\n\nWhen using pod templates and Jenkins pipelines you could use lots of different containers for each tool. e.g. one container for `maven` and another for `git` etc.\n\nWe've found its much simpler to just have a single builder container with all the common tools inside. This also means you can use `kubectl exec` or [jx rsh](/commands/jx_rsh/) to open a shell inside the build pod and have all the tools you need available for use when debugging/diagnosing problem pipelines.\n\nSo we have a [builder-base](https://github.com/jenkins-x/builder-base) docker image which [contains all the different tools](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common#L4-L15) we tend to use in CI/CD pipelines like `jx, skaffold, helm, git, updatebot`.\n\nIf you want to use a single builder image for your new pod template then you could use builder base as the base and then add your custom tools on top.\n\ne.g. [builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven) uses a [Dockerfile](https://github.com/jenkins-x/jenkins-x-builders/blob/master/builder-maven/Dockerfile#L1) to reference the builder base.\n\nSo the simplest thing could be to copy a similar builder - like [builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven) and then edit the `Dockerfile` to add whatever build tools you need.\n\nWe love Pull Requests and [contributions](/docs/contributing/) so please submit Pull Requests for new build containers and Pod Templates and we're more than happy to [help](/docs/contributing/)!\n\n## Adding your own Pod Templates\n\nTo keep things DRY and simple we tend to define pod templates in the Jenkins configuration then refer to the by name in the `Jenkinsfile`.\n\nThere are attempts to make it easy to inline pod template definitions inside your `Jenkinsfile` if you need it; though a pod template tends to have lots of developer environment specific stuff inside it, like secrets, so we'd prefer to keep most of the pod templates inside the source code of your development environment rather than copy/pasting them into each app.\n\nToday the easiest way to add new Pod Templates is via the Jenkins console. e.g.\n\n```sh\njx console\n```\n\nThat will open the Jenkins console. Then navigate to `Manage Jenkins` (on the left hand menu) then `Configure System`.\n\nYou will now be faced with a large page of configuration options ;) The pod templates are usually towards the bottom; you should see all the current pod templates for things like maven, NodeJS etc.\n\nYou can edit/add/remove pod templates in that page and hit Save.\n\nNote though that longer term we are hoping to [maintain your development environment via GitOps like we do for Staging & Production](https://github.com/jenkins-x/jx/issues/604) - which means changes made via the Jenkins UI will be lost when [upgrading your development environment](/commands/deprecation/).\n\nSo longer term we're hoping to add the Pod Templates into your `values.yaml` file in your developer environment git repository like we do for the [jenkins-x-platform chart](https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431).\n\nIf you are creating pod templates using open source build tools then it may be simpler for you to just [submit your pod template in a Pull Request](#submitting-new-pod-templates) and we can bake that pod template into future releases of Jenkins X?\n\n",
            "content/en/docs/reference/components/prow.md": "---\ntitle: Prow\nlinktitle: Prow\ndescription: The CI/CD system that Kubernetes uses to build itself\nparent: \"components\"\nweight: 40\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/prow\n  - /architecture/prow\n---\n\nProw is a Kubernetes based CI/CD system. Jobs can be triggered by various types of events and report their status to many different services. In addition to job execution, Prow provides GitHub automation in the form of policy enforcement, chat-ops via /foo style commands, and automatic PR merging.\n\nProw has a microservice architecture implemented as a collection of container images that run as Kubernetes deployments\n\n## hook\nThere is a [binary called hook](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook) that receives all the web hooks from GitHub. It is a stateless server that listens for GitHub webhooks and dispatches them to the appropriate plugins. Hook's plugins are used to trigger jobs, implement 'slash' commands, post to Slack, and more. The hook binary exposes a /hook endpoint to receive the Git server web hook requests (basically all web hooks go to /hook). There is an ingress rule that exposes that endpoint to outside the cluster.\n\n## Prow Plugins\nThe [hook binary](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook) uses several different plugins that can be enable/disable independently, to do different things. They are basically event handlers for the different GitHub events received through web hooks. These plugins are configured using a yaml config that is passed from a kubernetes ConfigMap to hook and can be enabled per repo or org. \nAll plugins have the same interface. The hook process passes two objects to every plugin: a plugin client that let them talk to k8s, git, GitHub, owners file in git repo, slack, etc., and the deserialized GitHub event (like IssueCommentEvent).\n\n### lgtm plugin\n[The LGTM plugin](https://github.com/kubernetes/test-infra/tree/master/prow/plugins/lgtm) is a good example to get started on plugins. It's a plugin that adds the LGTM label when someone comments /lgtm on a Pull Request.\n\n### UpdateConfig plugin\n[A plugin that automatically updates a ConfigMap](https://github.com/kubernetes/test-infra/tree/master/prow/plugins/updateconfig) whenever a PR is merged in a repository. That way you can automatically keep your ConfigMaps up to date, following a GitOps flow.\nYou can map specific files to ConfigMaps, or even use regex.\nIt\u2019s normally used to update the ConfigMap that contains the prow configuration, so every time a PR is merged with changes in the files containing the prow configuration, the ConfigMap is automatically updated.\n\n### Trigger plugin\nProbably the most important plugin. It's plugin that reacts to comments on PR\u2019s, so we can trigger builds (by writing \u201ctest\u201d as a comment or any other trigger). It determines which jobs to run based on the job config. When find a job that needs to be trigger, it creates a [ProwJob CRD](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85), using the configuration found in the hook ConfigMap (that way you can create a different [ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85) object depending on the org or repo, like using a different build agent (Jenkins vs Knative vs pods), the type of the job, etc). This CRD contains some interesting fields:\n\n- agent: to select which k8s controller will take care of this job\n- refs: GitHub repository and revision to use for the source code\n- type: whether is presubmit or post submit (run the job before merging or post merge)\n- pod_spec: spec to create a Pod object, if we use [plank](https://github.com/kubernetes/test-infra/tree/master/prow/plank)\n- build_spec: spec to create a [Knative Build object](https://github.com/knative/docs/blob/master/build/builds.md), if we use [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go)\n\nThe life cycle of a [ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85) is handled by the ProwJob controllers running on the cluster. Potential ProwJob states are:\n\n- triggered: the job has been created but not yet scheduled.\n- pending: the job is scheduled but not yet running.\n- Success/failure: the job has completed.\n- aborted: means prow killed the job early (new commit pushed, perhaps).\n- error: means the job could not schedule (bad config, perhaps).\n\n#### Job Type\nIn the Prow configuration you can configure per-repo Presubmits and Postsubmits jobs that are triggered by the trigger plugin. Presubmits are run when the PR code changes (opening a new PR or pushing code to the PR\u2019s branch), so you can test your new code changes. Postsubmits are run whenever there is a new commit appearing on an origin branch (GitHub push event).\n\nThe use-case for postsubmits is that there may be fewer than 100 merges a day to a really high-volume repo, but there could be ten or one hundred times that many presubmit jobs run. Postsubmits can be used when something is very expensive to test and is not necessarily blocking for merge, but you do want signal. Similarly, the way the system works is that your presubmit check will run with your code merged into the branch you're targeting, so technically the merge commit that ends up in `master` branch has effectively been tested already and often this means you may want a presubmit job but not to duplicate it also postsubmit as it gives you no more signal.\n\n### ProwJob controllers\nWe can later use different Kubernetes Operators that react to ProwJob objects to run our builds, based on the agent field (each operator looks for ProwJobs with specific agent value):\n\n- [Plank](https://github.com/kubernetes/test-infra/blob/master/prow/plank/controller.go) is one that uses kubernetes pods. Uses the `pod_spec` field.\n- [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go) is a build operator that uses Knative Build CRD. Uses the build_spec field.\n- There is a [jenkins-operator](https://github.com/kubernetes/test-infra/blob/master/prow/jenkins/controller.go) that runs builds on Jenkins. This is currently not recommended.\n\nThese controllers manage the [the life cycle of a ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/life_of_a_prow_job.md).\n\n#### [plank](https://github.com/kubernetes/test-infra/tree/master/prow/plank)\nPlank is a Kubernetes operator that reacts to ProwJob custom resources. It creates a Pod to run the build associated with the ProwJob object. The ProwJob object itself contains a PodSpec.\n\n- If ProwJob doesn\u2019t have a Pod, it creates a pod to run the build. Use init-containers to do VCS checkout.\n- If ProwJob has a Pod with completed status, mark ProwJob as completed.\n- If ProwJob is completed, do nothing.\n\nWe are using Knative build in Jenkins X, which uses the [prow-build controller](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go), so you shouldn't have to worry about plank.\n\n#### [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go)\nKubernetes operator that watches ProwJob objects, and reacts to those whose agent field is the Knative build agent. It will create [a Knative Build object](https://github.com/knative/docs/blob/master/build/builds.md) based on the build_spec field of the ProwJob object. \n[The Knative build controller](https://github.com/knative/build/blob/master/cmd/controller/main.go) reacts to it and creates a Pod to run the build. All the ProwJob, the Build and the Pod have the same name (a UUID).\n\nThe Build object contains interesting fields:\n\n- serviceAccountName: [ServiceAccount that contains the Secrets required to access the Git server or the Docker registry](https://github.com/knative/docs/blob/master/build/auth.md).\n- source: Git repository and revision to use for source code.\n- steps: Specifies one or more container images that you want to run in your build. Each container image runs until completion or until the first failure is detected.\n- template: contains the name of a registered Knative BuildTemplate, along with environment variables to pass to the Build object. The template must be a BuildTemplate object that exists in the cluster. **If template field is defined, the steps field will be ignored**.\n\n##### Steps\nThe steps in a build are the different actions that will be executed as part of that build. Each step in a build must specify a Builder image, or type of container image that adheres to the [Knative builder contract](https://github.com/knative/docs/blob/master/build/builder-contract.md). These steps/builder images\n\n- Are run and evaluated in order, starting from the top of the configuration file.\n- Each runs until completion or until the first failure is detected.\n- Have two volumes that are shared between all the steps. One will be mounted in /workspace, which contains the code specified in the Build source field. Another one is /builder/home that is mounted in $HOME, and it\u2019s mostly used to save credential files that will be used in different steps.\n\nA builder image is a special image that we can run as a Build CRD's step, and that it is typically a purpose-built container whose entrypoint is a tool that performs some action and exits with a zero status on success. These entrypoints are often command-line tools, for example, git, docker, mvn, and so on.\n\n##### BuildTemplate\n[A BuildTemplate](https://github.com/knative/docs/blob/master/build/build-templates.md) encapsulates a shareable build process with some limited parameterization capabilities.\n\nA template contains steps to be executed in the build. Instead of specifying the same steps in different builds, we can reuse those steps creating a BuildTemplate that contains these steps. We use BuildTemplates to share steps between different Builds. [There are community BuildTemplates](https://github.com/knative/build-templates/) that you can use, or you can define your own templates.\n\n###### Jenkins X Build Templates\nJenkins X uses custom BuildTemplates to run the builds of the applications. [In this repository](https://github.com/jenkins-x/jenkins-x-serverless) you can find the different BuildTemplates available, depending on the application language. These BuildTemplates use a different Step builder image depending on the language, since they have to build the application using different tools like maven, go or Gradle. So every Builder image has different tools installed, although eventually all the builder images basically run [serverless Jenkins](/news/serverless-jenkins/) (AKA [Jenkinsfile-Runner](https://github.com/jenkinsci/jenkinsfile-runner)). That allows our builds to define the steps in a Jenkinsfile. All these steps are executed inside the same [Jenkinsfile Runner container](https://hub.docker.com/r/jenkins/jenkinsfile-runner/dockerfile/), which doesn't match the Knative Build steps model.\n\n##### The job is run inside a Pod\nThe Pod that\u2019s created to run the actual build has a container that does nothing, but it has init containers to do the steps required to run the job:\n\n- [creds-init](https://github.com/knative/build/tree/master/cmd/creds-init): Service account secrets are mounted in /var/build-secrets/ so this container has access to them. It aggregates them into their respective credential files in $HOME, which is another volume shared between all the steps. Typically credentials for git server and docker registry.\n- [git-init](https://github.com/knative/build/tree/master/cmd/git-init): clones the specified SHA/revision Git repository into one of the shared volumes /workspace.\n- Another init-container for every step defined in the Build or BuildTemplate.\n\nRemember that each init container uses its own container image. Also, they have different filesystem linux namespaces. But they have some shared volumes like the $HOME and the /workspace folders.\n\n## sinker\n[Garbage collector](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/sinker) for ProwJobs and Pods created to run builds. It removes completed ProwJobs after 2 days, and completed pods after 30 minutes.\n\n## crier\nAnother Kubernetes controller that watches ProwJobs CRDs. It contains different reporters to notify ProwJob changes to external clients, like GitHub status check, or message to PubSub.\n\nIt's used to update the GitHub commit status when the ProwJob finishes.\n\n## deck\n[Presents a UI of recent jobs](https://prow.k8s.io/), and [command/plugin help information](https://prow.k8s.io/command-help).\n\n## tide\nPRs satisfying a set of predefined criteria can be configured to be automatically merged by [Tide](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/tide/README.md). It will automatically retest PRs that meet the criteria (\"tide comes in\") and automatically merge them when they have up-to-date passing test results (\"tide goes out\u201d).\n\nIt will query GitHub every once in a while trying to merge PR\u2019s. It doesn\u2019t react to events, it\u2019s not a plugin.\n\n## Ongoing efforts\nUsing init-containers for steps [may change in the future](https://github.com/knative/build/pull/470), due to limitations on init-containers.\nKnative Build CRD is being deprecated in favor of the Pipeline CRD. The Build CRD will be superseded by the new Task CRD, but they are really similar.\n",
            "content/en/docs/reference/components/source.md": "---\ntitle: Source\nlinktitle: Source\ndescription: The location of the various source code repositories\nparent: \"components\"\nweight: 400\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/source\n---\n\nJenkins X is built on the shoulders of giants and also has lots of different source repositories to make various things from CLI tools, docker images, helm charts and [addon Apps](/docs/contributing/addons/)\n\nThis page lists the main organisations and repositories.\n\n## Organisations\n\n* [jenkins-x](https://github.com/jenkins-x) the main organisation for source code\n* [jenkins-x-apps](https://github.com/jenkins-x-apps) contains the standard  [addon Apps](/docs/contributing/addons/) for Jenkins X\n* [jenkins-x-charts](https://github.com/jenkins-x-charts) the main helm charts we distribute\n* [jenkins-x-images](https://github.com/jenkins-x-images) contains some custom docker image builds\n* [jenkins-x-quickstarts](https://github.com/jenkins-x-quickstarts) the quickstart projects used by [create quickstart](/docs/getting-started/first-project/create-quickstart/)\n* [jenkins-x-test-projects](https://github.com/jenkins-x-test-projects) test projects we use in test cases \n\n### 3.x\n\nThe following organisations are for [version 3.x](https://jenkins-x.io/v3/):\n\n* [jenkins-x-plugins](https://github.com/jenkins-x-plugins) contains plugins to Jenkins X 3.x. See the [extension guide](https://jenkins-x.io/v3/about/extending/#plugins) for details\n* [jx3-gitops-repositories](https://github.com/jx3-gitops-repositories) the quickstart repositories for creating new infrastructure and installations on different cloud providers\n\n## 2.x\n\nThe following organisations are for 2.x code:\n\n* [jenkins-x-buildpacks](https://github.com/jenkins-x-buildpacks) contains the available [build packs](/docs/create-project/build-packs/)\n\n## Repositories\n\nHere we'll call out of some of the main repositories in the above organisations:\n\n* [jenkins-x/jx-docs](https://github.com/jenkins-x/jx-docs) the Hugo based documentation which generates this website\n* [jenkins-x/bdd-jx](https://github.com/jenkins-x/bdd-jx) the BDD tests we use to verify the platform changes and verify PRs on [jenkins-x/jx](https://github.com/jenkins-x/jx)\n\n### 3.x\n\nThe following repositories are for [version 3.x](https://jenkins-x.io/v3/):\n\n* [jenkins-x/jx](https://github.com/jenkins-x/jx) is the 3.x CLI \n* [jenkins-x/jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog) the main [Pipeline Catalog](https://jenkins-x.io/v3/guides/pipeline-catalog/)\n* [jenkins-x/jxr-versions](https://github.com/jenkins-x/jxr-versions) contains the [version stream](/about/concepts/version-stream/) - the stable versions of all _charts_ and CLI _packages_\n\n### 2.x\n\nThe following repositories are for 2.x code:\n\n* [jenkins-x/jx](https://github.com/jenkins-x/jx) the main repository which creates the `jx` CLI and reusable pipeline steps\n* [jenkins-x/jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform) the main composite helm chart for the Jenkins X platform\n* [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) contains the [version stream](/about/concepts/version-stream/) - the stable versions of all _charts_ and CLI _packages_\n* [jenkins-x/jenkins-x-boot-config](https://github.com/jenkins-x/jenkins-x-boot-config) the default boot configuration for a `jx boot` based install\n\n\n### Build pods and images\n\n* [jenkins-x/jenkins-x-builders](https://github.com/jenkins-x/jenkins-x-builders) generates the static jenkins server build pod docker images        \n* [jenkins-x/jenkins-x-image](https://github.com/jenkins-x/jenkins-x-image) generates the docker image for the static jenkins server we use by default\n\n### Tools\n\n* [jenkins-x/lighthouse](https://github.com/jenkins-x/lighthouse) the strategic solution for webhooks and ChatOps for multiple git providers.\n* [jenkins-x/octant-jx](https://github.com/jenkins-x/octant-jx) the [octant](https://octant.dev/) plugin for Jenkins X to provide a complete RBAC based console for kubernetes, CI/CD and Jenkins X. For more information see the [documentation](https://jenkins-x.io/docs/reference/components/ui/)\n* [jenkins-x/jx-pipelines-visualizer](https://github.com/jenkins-x/jx-pipelines-visualizer) open source read only UI for visualising pipelines and logs see the [documentation](https://jenkins-x.io/docs/reference/components/ui/)\n\n#### Legacy tools\n\n* [jenkins-x/exposecontroller](https://github.com/jenkins-x/exposecontroller) a `Deployment` or `Job` that can be used to generate/update `Ingress` resources (or `Route` on OpenShift) if you change your DNS domain or enable TLS - it can also inject external URLs into your application via `ConfigMap` injection \n",
            "content/en/docs/reference/components/ui.md": "---\ntitle: UI\nlinktitle: UI\ndescription: Octant the OSS web UI for Jenkins X\nparent: \"components\"\nweight: 5\n---\n\nIf you want an open source web UI for working with Jenkins X we highly recommend [Octant](https://github.com/vmware-tanzu/octant) along with the [octant-jx](https://github.com/jenkins-x/octant-jx) plugin.\n\nSee the [installation guide](https://github.com/jenkins-x/octant-jx#install) to get started.\n\n## Why Octant?\n\nWe love [Octant](https://github.com/vmware-tanzu/octant) because:\n\n* open source and very easy to extend with plugins in Go or TypeScript/JavaScript\n* lets you visualise and work with all kubernetes and custom resources across multiple clusters\n* thanks to [octant-jx](https://github.com/jenkins-x/octant-jx)  has awesome integration with Jenkins X components like apps, environments, pipelines, repositories etc.\n\n## Features\n\nLonger term we're planning on making most of the developer and operations features of Jenkins X available through the UI via [octant-jx](https://github.com/jenkins-x/octant-jx) but already you can:\n\n* view applications, environments, pipelines, repositories\n* for a pipeline quickly navigate to:\n  * its Pod, Log, Pull Request or Preview Environment\n  * for each step you can view the step detail or log of the step\n* see the various jobs and pipelines used to operate Jenkins X itself\n* over time will add management UI capabilities for installing, upgrading and administering Jenkins  \n\n## Demo\n\nHere is a [demo video showing octant in action with Jenkins X](https://www.youtube.com/watch?v=2LCPHi0BnUg&feature=youtu.be):\n\n <iframe width=\"1292\" height=\"654\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n  \nWe also [presented octant-jx](https://www.youtube.com/watch?v=Njl247hjRuU&t=2027s) at the [octant office hours this week](https://octant.dev/community/).",
            "content/en/docs/reference/components/vault.md": "---\ntitle: Vault\nlinktitle: Vault\ndescription: Manage your secrets\ndate: 2019-01-08\npublishdate: 2019-01-08\nweight: 200\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/vault\n  - /architecture/vault\n---\n\n## What is Vault\n\n[Hashicorp Vault](https://www.vaultproject.io) is an open source project for securely managing secrets.\nSecrets are resources that provide authentication to your computing environment such as tokens, keys, passwords, and certificates.\nVault is the preferred way in Jenkins X to manage these secrets.\nFor example, the GitHub personal access token generated for the pipeline bot is stored in Vault.\n\nThere are two ways you can use Vault in Jenkins X.\nIf you are already a Vault instance, you can configure Jenkins X to use this instance to store its secrets.\nThis way you have a central location for managing all secrets of your infrastucture.\nIf you do not have a Vault instance, Jenkins X can, depending on where you run your cluster, install Vault as part of the installation process.\nIn this case, the [Bank-Vaults operator](https://github.com/bank-vaults/vault-operator) is provisioned in the Jenkins X development namespace.\n\n{{% alert %}}\nThe Bank-Vaults operator is currently only supported with GKE or EKS.\n{{% /alert %}}\n\n## Configuration\n\nThe configuration of Vault occurs during Jenkins X [Boot](/docs/install-setup/boot/).\nRefer to the [Boot setup instructions for Vault](/docs/install-setup/boot/secrets/#vault) to see how to configure Jenkins X to use an internal or external Vault instance.\n\n### Security\n\nFrom a security point of view it is important that the communication with the Vault API is secured by TLS.\nIf you use your own external Vault instance, TLS configuration is in your hands and hopefully already setup.\nIf you let Jenkins X install and manage the Bank-Vaults operator, TLS is per default not enabled.\nRefer to [Configuring DNS and TLS on GKE](/docs/install-setup/boot/clouds/google) and [Configuring DNS and TLS on EKS](/docs/install-setup/boot/clouds/amazon/#configuring-dns-and-tls-on-eks) for more information on how to secure your Jenkins X installation using TLS for the cloud providers Google and AWS.\n\n## Accessing secrets\n\nYou can read and write secrets stored in Vault from the command line.\nTo do so, you need first to download an install the [`vault`](https://learn.hashicorp.com/vault/getting-started/install) CLI.\nOnce you have `vault` installed you can configure your terminal session to connect to Vault by running:\n\n```sh\neval `jx get vault-config`\n```\n\n### Listing secrets\n\nYou can start exploring the Jenkins X secrets stored in Vault by runnning:\n\n```sh\nvault kv list secret\n```\n\n_secret_ is the default [mount point](https://www.vaultproject.io/docs/secrets) for the Jenkins X secrets.\nIf you are using an external Vault instance this mount point is configurable via the _secretEngineMountPoint_ option in _jx-requirements.yml_.\nYou find more information in the Vault configuration paragraph of the [Boot](/docs/install-setup/boot/) documentation.\n\n{{% alert %}}\nThe Vault configuration is also stored in the _jx-install-config_ ConfigMap of your Jenkins X development namespace.\nYou can retrieve it by running:\n\n```sh\nkubectl get cm jx-install-config -o=jsonpath=\"{.data['vaultSecretEngineMountPoint']}\"\n```\n\n{{% /alert %}}\n\n### Reading secrets\n\nYou can then read a secret via:\n\n```sh\n vault kv get secret/<cluster-name>/pipelineUser\n```\n\n### Updating secrets\n\nYou can update a secret via:\n\n```sh\nvault kv put secret/<cluster-name>/pipelineUser token=<token-value>\n```\n\nIf you have a blob of JSON to encode as a secret, such as a service account key then base64 encode the data first:\n\n```sh\ncat my-service-account.json | base64 > my-service-account-base64.txt\nvault kv put secret/<cluster-name>/my-secret token=my-service-account-base64.txt\n```\n\n## Rotating secrets\n\nTo rotate a secret, follow the steps described in the [Updating a secret](/docs/reference/components/vault#updating-secrets) section followed by rerunning [Boot](/docs/install-setup/boot/) (`jx boot`).\nThe reason you need to run Boot, either locally or kicking of the master pipline of the dev repository, is that as part of the Boot process the secrets within Vault get copied into appropriate Kubernetes Secrets which then are accessed by the various components of Jenkins X.\nWithout running Boot the changes to Vault will not take effect yet.\n",
            "content/en/docs/reference/config/_index.md": "---\ntitle: Configuration\nlinktitle: Configuration\ndescription: Configuration File Reference\nweight: 8\n---\n\nJenkins X supports a number of different configuration file formats.\n\n* [jenkins-x.yml reference](/docs/reference/config/config/#config.jenkins.io/v1.ProjectConfig) defines the [Serverless Jenkins X Pipeline](/about/concepts/jenkins-x-pipelines/) using [Tekton](https://tekton.dev/)\n* [jx-requirements.yml reference](/docs/reference/config/config/#config.jenkins.io/v1.RequirementsConfig) defines the [jx boot requirements](/docs/getting-started/setup/boot/) ",
            "content/en/docs/reference/config/config.md": "---\ntitle: Configuration Reference\nlinktitle: Reference\nweight: 9\n---\n<p>Packages:</p>\n<ul>\n<li>\n<a href=\"#config.jenkins.io%2fv1\">config.jenkins.io/v1</a>\n</li>\n</ul>\n<h2 id=\"config.jenkins.io/v1\">config.jenkins.io/v1</h2>\n<p>\n<p>Package v1 is the v1 version of the API.</p>\n</p>\nResource Types:\n<ul><li>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>\n</li></ul>\n<h3 id=\"config.jenkins.io/v1.ProjectConfig\">ProjectConfig\n</h3>\n<p>\n<p>ProjectConfig defines Jenkins X Pipelines usually stored inside the <code>jenkins-x.yml</code> file in projects</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>apiVersion</code></br>\nstring</td>\n<td>\n<code>\nconfig.jenkins.io/v1\n</code>\n</td>\n</tr>\n<tr>\n<td>\n<code>kind</code></br>\nstring\n</td>\n<td><code>ProjectConfig</code></td>\n</tr>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n<p>List of global environment variables to add to each branch build and each step</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>previewEnvironments</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PreviewEnvironmentConfig\">\nPreviewEnvironmentConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>issueTracker</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.IssueTrackerConfig\">\nIssueTrackerConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>chat</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ChatConfig\">\nChatConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>wiki</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.WikiConfig\">\nWikiConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>addons</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/pkg/config.AddonConfig\">\n[]*github.com/jenkins-x/jx/pkg/config.AddonConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPack</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPackGitURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPackGitRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelineConfig</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineConfig\">\nPipelineConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>noReleasePrepare</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dockerRegistryHost</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dockerRegistryOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AddonConfig\">AddonConfig\n</h3>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>version</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsService\">AdminSecretsService</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>JXBasicAuth</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>chartmuseum</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ChartMuseum\">\nChartMuseum\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>grafana</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Grafana\">\nGrafana\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>jenkins</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Jenkins\">\nJenkins\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>nexus</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Nexus\">\nNexus\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>PipelineSecrets</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineSecrets\">\nPipelineSecrets\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>KanikoSecret</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.KanikoSecret\">\nKanikoSecret\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AdminSecretsFlags\">AdminSecretsFlags\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsService\">AdminSecretsService</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>DefaultAdminUsername</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DefaultAdminPassword</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>KanikoSecret</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AdminSecretsService\">AdminSecretsService\n</h3>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>FileName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Secrets</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">\nAdminSecretsConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Flags</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsFlags\">\nAdminSecretsFlags\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ingressAuth</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.BasicAuth\">\nBasicAuth\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Agent\">Agent\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">ParsedPipeline</a>, \n<a href=\"#config.jenkins.io/v1.PipelineConfig\">PipelineConfig</a>, \n<a href=\"#config.jenkins.io/v1.PipelineOverride\">PipelineOverride</a>, \n<a href=\"#config.jenkins.io/v1.Stage\">Stage</a>, \n<a href=\"#config.jenkins.io/v1.Step\">Step</a>)\n</p>\n<p>\n<p>Agent defines where the pipeline, stage, or step should run.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>label</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>One of label or image is required.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>image</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>container</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Legacy fields from jenkinsfile.PipelineAgent</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>dir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Application\">Application\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ApplicationConfig\">ApplicationConfig</a>)\n</p>\n<p>\n<p>Application is an application to install during boot</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name of the application / helm chart</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>repository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Repository the helm repository</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace to install the application into</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>phase</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Phase\">\nPhase\n</a>\n</em>\n</td>\n<td>\n<p>Phase of the pipeline to install application</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ApplicationConfig\">ApplicationConfig\n</h3>\n<p>\n<p>ApplicationConfig contains applications to install during boot</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>applications</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Application\">\n[]Application\n</a>\n</em>\n</td>\n<td>\n<p>Applications of applications</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>defaultNamespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>DefaultNamespace the default namespace to install applications into</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AutoUpdateConfig\">AutoUpdateConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>AutoUpdateConfig contains auto update config</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Enabled autoupdate</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>schedule</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Schedule cron of auto updates</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.AzureConfig\">AzureConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ClusterConfig\">ClusterConfig</a>)\n</p>\n<p>\n<p>AzureConfig contains Azure specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>registrySubscription</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>RegistrySubscription the registry subscription for defaulting the container registry.\nNot used if you specify a Registry explicitly</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.BasicAuth\">BasicAuth\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsService\">AdminSecretsService</a>)\n</p>\n<p>\n<p>BasicAuth keeps the credentials for basic authentication</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>username</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Username stores the basic authentication user name</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>password</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Password stores the basic authentication password</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.BuildPackConfig\">BuildPackConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>BuildPackConfig contains build pack info</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>buildPackLibrary</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.BuildPackLibrary\">\nBuildPackLibrary\n</a>\n</em>\n</td>\n<td>\n<p>Location contains location config</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.BuildPackLibrary\">BuildPackLibrary\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.BuildPackConfig\">BuildPackConfig</a>)\n</p>\n<p>\n<p>BuildPackLibrary contains buildpack location</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitURL</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitRef</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.CRDsFromPipelineParams\">CRDsFromPipelineParams\n</h3>\n<p>\n<p>CRDsFromPipelineParams is how the parameters to GenerateCRDs are specified</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>PipelineIdentifier</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>BuildIdentifier</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>PodTemplates</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#*k8s.io/api/core/v1.pod--\">\nmap[string]*k8s.io/api/core/v1.Pod\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>VersionsDir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>TaskParams</code></br>\n<em>\n[]github.com/tektoncd/pipeline/pkg/apis/pipeline/v1beta1.ParamSpec\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>SourceDir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Labels</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DefaultImage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>InterpretMode</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ChartMuseum\">ChartMuseum\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ChartMuseumEnv\">\nChartMuseumEnv\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ChartMuseumEnv\">ChartMuseumEnv\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ChartMuseum\">ChartMuseum</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>secret</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ChartMuseumSecret\">\nChartMuseumSecret\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ChartMuseumSecret\">ChartMuseumSecret\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ChartMuseumEnv\">ChartMuseumEnv</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>BASIC_AUTH_USER</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>BASIC_AUTH_PASS</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ChatConfig\">ChatConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>developerChannel</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>userChannel</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ClusterConfig\">ClusterConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>ClusterConfig contains cluster specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>azure</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.AzureConfig\">\nAzureConfig\n</a>\n</em>\n</td>\n<td>\n<p>AzureConfig the azure specific configuration</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>chartRepository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ChartRepository the repository URL to deploy charts to</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gke</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.GKEConfig\">\nGKEConfig\n</a>\n</em>\n</td>\n<td>\n<p>GKEConfig the gke specific configuration</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environmentGitOwner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>EnvironmentGitOwner the default git owner for environment repositories if none is specified explicitly</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environmentGitPublic</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>EnvironmentGitPublic determines whether jx boot create public or private git repos for the environments</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitPublic</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>GitPublic determines whether jx boot create public or private git repos for the applications</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>provider</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Provider the kubernetes provider (e.g. gke)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace the namespace to install the dev environment</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>project</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProjectID the cloud project ID e.g. on GCP</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>clusterName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ClusterName the logical name of the cluster</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>vaultName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>VaultName the name of the vault if using vault for secrets\nDeprecated</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>region</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Region the cloud region being used</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>zone</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Zone the cloud zone being used</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitName is the name of the default git service</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitKind is the kind of git server (github, bitbucketserver etc)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitServer</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitServer is the URL of the git server</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>externalDNSSAName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ExternalDNSSAName the service account name for external dns</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>registry</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Registry the host name of the container registry</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>vaultSAName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>VaultSAName the service account name for vault\nDeprecated</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>kanikoSAName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>KanikoSAName the service account name for kaniko</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>helmMajorVersion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>HelmMajorVersion contains the major helm version number. Assumes helm 2.x with no tiller if no value specified</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>devEnvApprovers</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>DevEnvApprovers contains an optional list of approvers to populate the initial OWNERS file in the dev env repo</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>dockerRegistryOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>DockerRegistryOrg the default organisation used for container images</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>strictPermissions</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>StrictPermissions lets you decide how to boot the cluster when it comes to permissions\nIf it&rsquo;s false, cluster wide permissions will be used, normal, namespaced permissions will be used otherwise\nand extra steps will be necessary to get the cluster working</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.CreateJenkinsfileArguments\">CreateJenkinsfileArguments\n</h3>\n<p>\n<p>CreateJenkinsfileArguments contains the arguents to generate a Jenkinsfiles dynamically</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>ConfigFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>TemplateFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>OutputFile</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>IsTekton</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ClearContainerNames</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.CreatePipelineArguments\">CreatePipelineArguments\n</h3>\n<p>\n<p>CreatePipelineArguments contains the arguments to translate a build pack into a pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Lifecycles</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">\nPipelineLifecycles\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>PodTemplates</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#*k8s.io/api/core/v1.pod--\">\nmap[string]*k8s.io/api/core/v1.Pod\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>CustomImage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DefaultImage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>WorkspaceDir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitHost</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ProjectID</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DockerRegistry</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DockerRegistryOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>KanikoImage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>UseKaniko</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>NoReleasePrepare</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>StepCounter</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.EnabledConfig\">EnabledConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig</a>)\n</p>\n<p>\n<p>EnabledConfig to configure the feature on/off</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.EnvironmentConfig\">EnvironmentConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>EnvironmentConfig configures the organisation and repository name of the git repositories for environments</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>key</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Key is the key of the environment configuration</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>owner</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Owner is the git user or organisation for the repository</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>repository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Repository is the name of the repository within the owner</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitServer</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitServer is the URL of the git server</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitKind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>GitKind is the kind of git server (github, bitbucketserver etc)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ingress</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.IngressConfig\">\nIngressConfig\n</a>\n</em>\n</td>\n<td>\n<p>Ingress contains ingress specific requirements</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>remoteCluster</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>RemoteCluster specifies this environment runs on a remote cluster to the development cluster</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>promotionStrategy</code></br>\n<em>\ngithub.com/jenkins-x/jx/v2/pkg/apis/jenkins.io/v1.PromotionStrategyType\n</em>\n</td>\n<td>\n<p>PromotionStrategy what kind of promotion strategy to use</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>urlTemplate</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URLTemplate is the template to use for your environment&rsquo;s exposecontroller generated URLs</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ExposeController\">ExposeController\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig</a>, \n<a href=\"#config.jenkins.io/v1.PreviewValuesConfig\">PreviewValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>config</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ExposeControllerConfig\">\nExposeControllerConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Annotations</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>production</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ExposeControllerConfig\">ExposeControllerConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ExposeController\">ExposeController</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>domain</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>exposer</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>http</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tlsacme</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pathMode</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>urltemplate</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ingressClass</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tlsSecretName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.GKEConfig\">GKEConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ClusterConfig\">ClusterConfig</a>)\n</p>\n<p>\n<p>GKEConfig contains GKE specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>projectNumber</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ProjectNumber the unique project number GKE assigns to a project (required for workload identity).</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.GithubAppConfig\">GithubAppConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>GithubAppConfig contains github app config</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Enabled this determines whether this install should use the jenkins x github app for access tokens</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>schedule</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Schedule cron of the github app token refresher</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL contains a URL to the github app</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Grafana\">Grafana\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>server</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.GrafanaSecret\">\nGrafanaSecret\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.GrafanaSecret\">GrafanaSecret\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Grafana\">Grafana</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>adminUser</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>adminPassword</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfigService\">HelmValuesConfigService</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>expose</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ExposeController\">\nExposeController\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>jenkins</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsValuesConfig\">\nJenkinsValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>prow</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ProwValuesConfig\">\nProwValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>PipelineSecrets</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsPipelineSecretsValuesConfig\">\nJenkinsPipelineSecretsValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>controllerbuild</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.EnabledConfig\">\nEnabledConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>controllerworkflow</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.EnabledConfig\">\nEnabledConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>docker-registry</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.EnabledConfig\">\nEnabledConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dockerRegistry</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.HelmValuesConfigService\">HelmValuesConfigService\n</h3>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>FileName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Config</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">\nHelmValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Image\">Image\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Preview\">Preview</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>repository</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tag</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ImportFile\">ImportFile\n</h3>\n<p>\n<p>ImportFile represents an import of a file from a module (usually a version of a git repo)</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Import</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>File</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ImportFileResolver\">ImportFileResolver\n</h3>\n<p>\n<p>ImportFileResolver resolves a build pack file resolver strategy</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.IngressConfig\">IngressConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.EnvironmentConfig\">EnvironmentConfig</a>, \n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>IngressConfig contains dns specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>externalDNS</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>DNS is enabled</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>cloud_dns_secret_name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>CloudDNSSecretName secret name which contains the service account for external-dns and cert-manager issuer to\naccess the Cloud DNS service to resolve a DNS challenge</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>domain</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Domain to expose ingress endpoints</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ignoreLoadBalancer</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>IgnoreLoadBalancer if the nginx-controller LoadBalancer service should not be used to detect and update the\ndomain if you are using a dynamic domain resolver like <code>.nip.io</code> rather than a real DNS configuration.\nWith this flag enabled the <code>Domain</code> value will be used and never re-created based on the current LoadBalancer IP address.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>exposer</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Exposer the exposer used to expose ingress endpoints. Defaults to &ldquo;Ingress&rdquo;</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespaceSubDomain</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>NamespaceSubDomain the sub domain expression to expose ingress. Defaults to &ldquo;.jx.&rdquo;</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>tls</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.TLSConfig\">\nTLSConfig\n</a>\n</em>\n</td>\n<td>\n<p>TLS enable automated TLS using certmanager</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>domainIssuerURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>DomainIssuerURL contains a URL used to retrieve a Domain</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.IssueTrackerConfig\">IssueTrackerConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>project</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Jenkins\">Jenkins\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Master</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsAdminSecret\">\nJenkinsAdminSecret\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsAdminSecret\">JenkinsAdminSecret\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Jenkins\">Jenkins</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>AdminPassword</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsGiteaServersValuesConfig\">JenkinsGiteaServersValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.JenkinsServersValuesConfig\">JenkinsServersValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Credential</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsGithubServersValuesConfig\">JenkinsGithubServersValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.JenkinsServersValuesConfig\">JenkinsServersValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsPipelineSecretsValuesConfig\">JenkinsPipelineSecretsValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>DockerConfig,flow</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsServersGlobalConfig\">JenkinsServersGlobalConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.JenkinsServersValuesConfig\">JenkinsServersValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>EnvVars</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsServersValuesConfig\">JenkinsServersValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.JenkinsValuesConfig\">JenkinsValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Gitea</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsGiteaServersValuesConfig\">\n[]JenkinsGiteaServersValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GHE</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsGithubServersValuesConfig\">\n[]JenkinsGithubServersValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Global</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsServersGlobalConfig\">\nJenkinsServersGlobalConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JenkinsValuesConfig\">JenkinsValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Servers</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.JenkinsServersValuesConfig\">\nJenkinsServersValuesConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.JxInstallProfile\">JxInstallProfile\n</h3>\n<p>\n<p>JxInstallProfile contains the jx profile info</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>InstallType</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.KanikoSecret\">KanikoSecret\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n<p>KanikoSecret store the kaniko service account</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Data</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Loop\">Loop\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Step\">Step</a>)\n</p>\n<p>\n<p>Loop is a special step that defines a variable, a list of possible values for that variable, and a set of steps to\nrepeat for each value for the variable, with the variable set with that value in the environment for the execution of\nthose steps.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>variable</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>The variable name.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>values</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>The list of values to iterate over</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Step\">\n[]Step\n</a>\n</em>\n</td>\n<td>\n<p>The steps to run</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Module\">Module\n</h3>\n<p>\n<p>Module defines a dependent module for a build pack</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitUrl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitRef</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Modules\">Modules\n</h3>\n<p>\n<p>Modules defines the dependent modules for a build pack</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>modules</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/jenkinsfile.Module\">\n[]*github.com/jenkins-x/jx/v2/pkg/jenkinsfile.Module\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.NamedLifecycle\">NamedLifecycle\n</h3>\n<p>\n<p>NamedLifecycle a lifecycle and its name</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>Name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>Lifecycle</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Nexus\">Nexus\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>defaultAdminPassword</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ParsedPipeline\">ParsedPipeline\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">PipelineLifecycles</a>, \n<a href=\"#config.jenkins.io/v1.Pipelines\">Pipelines</a>)\n</p>\n<p>\n<p>ParsedPipeline is the internal representation of the Pipeline, used to validate and create CRDs</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Agent\">\nAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>options</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.RootOptions\">\nRootOptions\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>stages</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Stage\">\n[]Stage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>post</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Post\">\n[]Post\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n<p>Replaced by Env, retained for backwards compatibility</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Phase\">Phase\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Application\">Application</a>)\n</p>\n<p>\n<p>Phase of the pipeline to install application</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.PipelineConfig\">PipelineConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>)\n</p>\n<p>\n<p>PipelineConfig defines the pipeline configuration</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>extends</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineExtends\">\nPipelineExtends\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Agent\">\nAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipelines</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Pipelines\">\nPipelines\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>containerOptions</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#container-v1-core\">\nKubernetes core/v1.Container\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PipelineExtends\">PipelineExtends\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.PipelineConfig\">PipelineConfig</a>)\n</p>\n<p>\n<p>PipelineExtends defines the extension (e.g. parent pipeline which is overloaded</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>import</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>file</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PipelineLifecycle\">PipelineLifecycle\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.NamedLifecycle\">NamedLifecycle</a>, \n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">PipelineLifecycles</a>, \n<a href=\"#config.jenkins.io/v1.Pipelines\">Pipelines</a>)\n</p>\n<p>\n<p>PipelineLifecycle defines the steps of a lifecycle section</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\">\n[]*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>preSteps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\">\n[]*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\n</a>\n</em>\n</td>\n<td>\n<p>PreSteps if using inheritance then invoke these steps before the base steps</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>replace</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Replace if using inheritance then replace steps from the base pipeline</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PipelineLifecycleArray\">PipelineLifecycleArray\n(<code>[]github.com/jenkins-x/jx/v2/pkg/jenkinsfile.NamedLifecycle</code> alias)</p></h3>\n<p>\n<p>PipelineLifecycleArray an array of named lifecycle pointers</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.PipelineLifecycles\">PipelineLifecycles\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.CreatePipelineArguments\">CreatePipelineArguments</a>, \n<a href=\"#config.jenkins.io/v1.Pipelines\">Pipelines</a>)\n</p>\n<p>\n<p>PipelineLifecycles defines the steps of a lifecycle section</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>setup</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>setVersion</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>preBuild</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>build</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>postBuild</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>promote</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">\nParsedPipeline\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PipelineOverride\">PipelineOverride\n</h3>\n<p>\n<p>PipelineOverride allows for overriding named steps, stages, or pipelines in the build pack or default pipeline</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pipeline</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>stage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>step</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Step\">\nStep\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\">\n[]*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>type</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StepOverrideType\">\nStepOverrideType\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Agent\">\nAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>containerOptions</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#container-v1-core\">\nKubernetes core/v1.Container\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>volumes</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#*k8s.io/api/core/v1.volume--\">\n[]*k8s.io/api/core/v1.Volume\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PipelineSecrets\">PipelineSecrets\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.AdminSecretsConfig\">AdminSecretsConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>MavenSettingsXML</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Pipelines\">Pipelines\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.PipelineConfig\">PipelineConfig</a>)\n</p>\n<p>\n<p>Pipelines contains all the different kinds of pipeline for different branches</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>pullRequest</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">\nPipelineLifecycles\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>release</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">\nPipelineLifecycles\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>feature</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycles\">\nPipelineLifecycles\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>post</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PipelineLifecycle\">\nPipelineLifecycle\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>overrides</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.PipelineOverride\">\n[]*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.PipelineOverride\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>default</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">\nParsedPipeline\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Post\">Post\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">ParsedPipeline</a>, \n<a href=\"#config.jenkins.io/v1.Stage\">Stage</a>)\n</p>\n<p>\n<p>Post contains a PostCondition and one more actions to be executed after a pipeline or stage if the condition is met.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>condition</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PostCondition\">\nPostCondition\n</a>\n</em>\n</td>\n<td>\n<p>TODO: Conditional execution of something after a Task or Pipeline completes is not yet implemented</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>actions</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.PostAction\">\n[]PostAction\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PostAction\">PostAction\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Post\">Post</a>)\n</p>\n<p>\n<p>PostAction contains the name of a built-in post action and options to pass to that action.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>TODO: Notifications are not yet supported in Build Pipeline per se.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>options</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n<p>Also, we&rsquo;ll need to do some magic to do type verification during translation - i.e., this action wants a number\nfor this option, so translate the string value for that option to a number.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PostCondition\">PostCondition\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Post\">Post</a>)\n</p>\n<p>\n<p>PostCondition is used to specify under what condition a post action should be executed.</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.Preview\">Preview\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.PreviewValuesConfig\">PreviewValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>image</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Image\">\nImage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PreviewEnvironmentConfig\">PreviewEnvironmentConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>disabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>maximumInstances</code></br>\n<em>\nint\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.PreviewValuesConfig\">PreviewValuesConfig\n</h3>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>expose</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ExposeController\">\nExposeController\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>preview</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Preview\">\nPreview\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.ProwValuesConfig\">ProwValuesConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.HelmValuesConfig\">HelmValuesConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>user</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>hmacToken</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>oauthToken</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.RepositoryType\">RepositoryType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>RepositoryType is the type of a repository we use to store artifacts (jars, tarballs, npm packages etc)</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsValues\">RequirementsValues</a>)\n</p>\n<p>\n<p>RequirementsConfig contains the logical installation requirements in the <code>jx-requirements.yml</code> file when\ninstalling, configuring or upgrading Jenkins X via <code>jx boot</code></p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>autoUpdate</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.AutoUpdateConfig\">\nAutoUpdateConfig\n</a>\n</em>\n</td>\n<td>\n<p>AutoUpdate contains auto update config</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>bootConfigURL</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>BootConfigURL contains the url to which the dev environment is associated with</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>buildPacks</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.BuildPackConfig\">\nBuildPackConfig\n</a>\n</em>\n</td>\n<td>\n<p>BuildPackConfig contains custom build pack settings</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>cluster</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.ClusterConfig\">\nClusterConfig\n</a>\n</em>\n</td>\n<td>\n<p>Cluster contains cluster specific requirements</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>environments</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.EnvironmentConfig\">\n[]EnvironmentConfig\n</a>\n</em>\n</td>\n<td>\n<p>Environments the requirements for the environments</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>githubApp</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.GithubAppConfig\">\nGithubAppConfig\n</a>\n</em>\n</td>\n<td>\n<p>GithubApp contains github app config</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>gitops</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>GitOps if enabled we will setup a webhook in the boot configuration git repository so that we can\nre-run &lsquo;jx boot&rsquo; when changes merge to the master branch</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>helmfile</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Indicates if we are using helmfile and helm 3 to spin up environments. This is currently an experimental\nfeature flag used to implement better Multi-Cluster support. See <a href=\"https://github.com/jenkins-x/jx/issues/6442\">https://github.com/jenkins-x/jx/issues/6442</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>kaniko</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Kaniko whether to enable kaniko for building docker images</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ingress</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.IngressConfig\">\nIngressConfig\n</a>\n</em>\n</td>\n<td>\n<p>Ingress contains ingress specific requirements</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>repository</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.RepositoryType\">\nRepositoryType\n</a>\n</em>\n</td>\n<td>\n<p>Repository specifies what kind of artifact repository you wish to use for storing artifacts (jars, tarballs, npm modules etc)</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>secretStorage</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.SecretStorageType\">\nSecretStorageType\n</a>\n</em>\n</td>\n<td>\n<p>SecretStorage how should we store secrets for the cluster</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>storage</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StorageConfig\">\nStorageConfig\n</a>\n</em>\n</td>\n<td>\n<p>Storage contains storage requirements</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>terraform</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Terraform specifies if  we are managing the kubernetes cluster and cloud resources with Terraform</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>vault</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.VaultConfig\">\nVaultConfig\n</a>\n</em>\n</td>\n<td>\n<p>Vault the configuration for vault</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>velero</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.VeleroConfig\">\nVeleroConfig\n</a>\n</em>\n</td>\n<td>\n<p>Velero the configuration for running velero for backing up the cluster resources</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>versionStream</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.VersionStreamConfig\">\nVersionStreamConfig\n</a>\n</em>\n</td>\n<td>\n<p>VersionStream contains version stream info</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>webhook</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.WebhookType\">\nWebhookType\n</a>\n</em>\n</td>\n<td>\n<p>Webhook specifies what engine we should use for webhooks</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.RequirementsValues\">RequirementsValues\n</h3>\n<p>\n<p>RequirementsValues contains the logical installation requirements in the <code>jx-requirements.yml</code> file as helm values</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>jxRequirements</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">\nRequirementsConfig\n</a>\n</em>\n</td>\n<td>\n<p>RequirementsConfig contains the logical installation requirements</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.RootOptions\">RootOptions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">ParsedPipeline</a>, \n<a href=\"#config.jenkins.io/v1.StageOptions\">StageOptions</a>)\n</p>\n<p>\n<p>RootOptions contains options that can be configured on either a pipeline or a stage</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>timeout</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Timeout\">\nTimeout\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>retry</code></br>\n<em>\nbyte\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>containerOptions</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#container-v1-core\">\nKubernetes core/v1.Container\n</a>\n</em>\n</td>\n<td>\n<p>ContainerOptions allows for advanced configuration of containers for a single stage or the whole\npipeline, adding to configuration that can be configured through the syntax already. This includes things\nlike CPU/RAM requests/limits, secrets, ports, etc. Some of these things will end up with native syntax approaches\ndown the road.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>volumes</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#*k8s.io/api/core/v1.volume--\">\n[]*k8s.io/api/core/v1.Volume\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>distributeParallelAcrossNodes</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>tolerations</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#toleration-v1-core\">\n[]Kubernetes core/v1.Toleration\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>podLabels</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.SecretStorageType\">SecretStorageType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>SecretStorageType is the type of storage used for secrets</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.Stage\">Stage\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ParsedPipeline\">ParsedPipeline</a>, \n<a href=\"#config.jenkins.io/v1.Stage\">Stage</a>)\n</p>\n<p>\n<p>Stage is a unit of work in a pipeline, corresponding either to a Task or a set of Tasks to be run sequentially or in\nparallel with common configuration.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Agent\">\nAgent\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>options</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StageOptions\">\nStageOptions\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Step\">\n[]Step\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>stages</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Stage\">\n[]Stage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>parallel</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Stage\">\n[]Stage\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>post</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Post\">\n[]Post\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>environment</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n<p>Replaced by Env, retained for backwards compatibility</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.StageOptions\">StageOptions\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Stage\">Stage</a>)\n</p>\n<p>\n<p>StageOptions contains both options that can be configured on either a pipeline or a stage, via\nRootOptions, or stage-specific options.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>RootOptions</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.RootOptions\">\nRootOptions\n</a>\n</em>\n</td>\n<td>\n<p>\n(Members of <code>RootOptions</code> are embedded into this type.)\n</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>stash</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Stash\">\nStash\n</a>\n</em>\n</td>\n<td>\n<p>TODO: Not yet implemented in build-pipeline</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>unstash</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Unstash\">\nUnstash\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>workspace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Stash\">Stash\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.StageOptions\">StageOptions</a>)\n</p>\n<p>\n<p>Stash defines files to be saved for use in a later stage, marked with a name</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>files</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Eventually make this optional so that you can do volumes instead</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Step\">Step\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Loop\">Loop</a>, \n<a href=\"#config.jenkins.io/v1.PipelineOverride\">PipelineOverride</a>, \n<a href=\"#config.jenkins.io/v1.Stage\">Stage</a>)\n</p>\n<p>\n<p>Step defines a single step, from the author&rsquo;s perspective, to be executed within a stage.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>An optional name to give the step for reporting purposes</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>command</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>One of command, step, or loop is required.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>args</code></br>\n<em>\n[]string\n</em>\n</td>\n<td>\n<p>args is optional, but only allowed with command</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>dir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>dir is optional, but only allowed with command. Refers to subdirectory of workspace</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>step</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>options</code></br>\n<em>\nmap[string]string\n</em>\n</td>\n<td>\n<p>options is optional, but only allowed with step\nAlso, we&rsquo;ll need to do some magic to do type verification during translation - i.e., this step wants a number\nfor this option, so translate the string value for that option to a number.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>loop</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Loop\">\nLoop\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>agent</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.Agent\">\nAgent\n</a>\n</em>\n</td>\n<td>\n<p>agent can be overridden on a step</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>image</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Image alows the docker image for a step to be specified</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>env</code></br>\n<em>\n<a href=\"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#envvar-v1-core\">\n[]Kubernetes core/v1.EnvVar\n</a>\n</em>\n</td>\n<td>\n<p>env allows defining per-step environment variables</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>comment</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Legacy fields from jenkinsfile.PipelineStep before it was eliminated.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>groovy</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>steps</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\">\n[]*github.com/jenkins-x/jx/v2/pkg/tekton/syntax.Step\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>when</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>container</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>sh</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.StepOverrideType\">StepOverrideType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.PipelineOverride\">PipelineOverride</a>)\n</p>\n<p>\n<p>StepOverrideType is used to specify whether the existing step should be replaced (default), new step(s) should be\nprepended before the existing step, or new step(s) should be appended after the existing step.</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.StepPlaceholderReplacementArgs\">StepPlaceholderReplacementArgs\n</h3>\n<p>\n<p>StepPlaceholderReplacementArgs specifies the arguments required for replacing placeholders in build pack directories.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>WorkspaceDir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>GitHost</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DockerRegistry</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>DockerRegistryOrg</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>ProjectID</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>KanikoImage</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>UseKaniko</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.StorageConfig\">StorageConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>StorageConfig contains dns specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>logs</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StorageEntryConfig\">\nStorageEntryConfig\n</a>\n</em>\n</td>\n<td>\n<p>Logs for storing build logs</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>reports</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StorageEntryConfig\">\nStorageEntryConfig\n</a>\n</em>\n</td>\n<td>\n<p>Tests for storing test results, coverage + code quality reports</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>repository</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StorageEntryConfig\">\nStorageEntryConfig\n</a>\n</em>\n</td>\n<td>\n<p>Repository for storing repository artifacts</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>backup</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.StorageEntryConfig\">\nStorageEntryConfig\n</a>\n</em>\n</td>\n<td>\n<p>Backup for backing up kubernetes resource</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.StorageEntryConfig\">StorageEntryConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.StorageConfig\">StorageConfig</a>)\n</p>\n<p>\n<p>StorageEntryConfig contains dns specific requirements for a kind of storage</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Enabled if the storage is enabled</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL the cloud storage bucket URL such as &lsquo;gs://mybucket&rsquo; or &lsquo;s3://foo&rsquo; or `azblob://thingy&rsquo;\nsee <a href=\"https://jenkins-x.io/architecture/storage/\">https://jenkins-x.io/architecture/storage/</a></p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.TLSConfig\">TLSConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.IngressConfig\">IngressConfig</a>)\n</p>\n<p>\n<p>TLSConfig contains TLS specific requirements</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>enabled</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>TLS enabled</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>email</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Email address to register with services like LetsEncrypt</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>production</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>Production false uses self-signed certificates from the LetsEncrypt staging server, true enables the production\nserver which incurs higher rate limiting <a href=\"https://letsencrypt.org/docs/rate-limits/\">https://letsencrypt.org/docs/rate-limits/</a></p>\n</td>\n</tr>\n<tr>\n<td>\n<code>secretName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>SecretName the name of the secret which contains the TLS certificate</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.Timeout\">Timeout\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RootOptions\">RootOptions</a>)\n</p>\n<p>\n<p>Timeout defines how long a stage or pipeline can run before timing out.</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>time</code></br>\n<em>\nint64\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>unit</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.TimeoutUnit\">\nTimeoutUnit\n</a>\n</em>\n</td>\n<td>\n<p>Has some sane default - probably seconds</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.TimeoutUnit\">TimeoutUnit\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.Timeout\">Timeout</a>)\n</p>\n<p>\n<p>TimeoutUnit is used for calculating timeout duration</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.Unstash\">Unstash\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.StageOptions\">StageOptions</a>)\n</p>\n<p>\n<p>Unstash defines a previously-defined stash to be copied into this stage&rsquo;s workspace</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dir</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.VaultAWSConfig\">VaultAWSConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.VaultConfig\">VaultConfig</a>)\n</p>\n<p>\n<p>VaultAWSConfig contains all the Vault configuration needed by Vault to be deployed in AWS</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>VaultAWSUnsealConfig</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.VaultAWSUnsealConfig\">\nVaultAWSUnsealConfig\n</a>\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>autoCreate</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dynamoDBTable</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>dynamoDBRegion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>iamUserName</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.VaultAWSUnsealConfig\">VaultAWSUnsealConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.VaultAWSConfig\">VaultAWSConfig</a>)\n</p>\n<p>\n<p>VaultAWSUnsealConfig contains references to existing AWS resources that can be used to install Vault</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kmsKeyId</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>kmsRegion</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>s3Bucket</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>s3Prefix</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>s3Region</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.VaultConfig\">VaultConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>VaultConfig contains Vault configuration for Boot</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>name</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Name the name of the Vault if using Jenkins X managed Vault instance.\nCannot be used in conjunction with the URL attribute</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>bucket</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>recreateBucket</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>keyring</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>key</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>disableURLDiscovery</code></br>\n<em>\nbool\n</em>\n</td>\n<td>\n<p>DisableURLDiscovery allows us to optionally override the default lookup of the Vault URL, could be incluster service or external ingress</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>aws</code></br>\n<em>\n<a href=\"#config.jenkins.io/v1.VaultAWSConfig\">\nVaultAWSConfig\n</a>\n</em>\n</td>\n<td>\n<p>AWSConfig describes the AWS specific configuration needed for the Vault Operator.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL specifies the URL of an Vault instance to use for secret storage.\nNeeds to be specified together with the Service Account and namespace to use for connecting to Vault.\nThis cannot be used in conjunction with the Name attribute.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>serviceAccount</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ServiceAccount is the name of the Kubernetes service account allowed to authenticate against Vault.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace of the Kubernetes service account allowed to authenticate against Vault.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>secretEngineMountPoint</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>SecretEngineMountPoint is the secret engine mount point to be used for writing data into the KV engine of Vault.\nIf not specified the &lsquo;secret&rsquo; is used.</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>kubernetesAuthPath</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>KubernetesAuthPath is the auth path of used for this cluster\nIf not specified the &lsquo;kubernetes&rsquo; is used.</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.VeleroConfig\">VeleroConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>VeleroConfig contains the configuration for velero</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>namespace</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Namespace the namespace to install velero into</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>serviceAccount</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>ServiceAccount the cloud service account used to run velero</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>schedule</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Schedule of backups</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ttl</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>TimeToLive period for backups to be retained</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.VersionStreamConfig\">VersionStreamConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>VersionStreamConfig contains version stream config</p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>URL of the version stream to use</p>\n</td>\n</tr>\n<tr>\n<td>\n<code>ref</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n<p>Ref of the version stream to use</p>\n</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"config.jenkins.io/v1.WebhookType\">WebhookType\n(<code>string</code> alias)</p></h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.RequirementsConfig\">RequirementsConfig</a>)\n</p>\n<p>\n<p>WebhookType is the type of a webhook strategy</p>\n</p>\n<h3 id=\"config.jenkins.io/v1.WikiConfig\">WikiConfig\n</h3>\n<p>\n(<em>Appears on:</em>\n<a href=\"#config.jenkins.io/v1.ProjectConfig\">ProjectConfig</a>)\n</p>\n<p>\n</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<code>kind</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>url</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n<tr>\n<td>\n<code>space</code></br>\n<em>\nstring\n</em>\n</td>\n<td>\n</td>\n</tr>\n</tbody>\n</table>\n<hr/>\n<p><em>\nGenerated with <code>gen-crd-api-reference-docs</code>\non git commit <code>90ca3ea85</code>.\n</em></p>\n",
            "content/en/docs/reference/devpods.md": "---\ntitle: Dev Pods\nlinktitle: Dev Pods\ndescription: Develop in a pod on your cloud\nweight: 20\naliases:\n  - /developing/devpods\n---\n\nThe initial focus of Jenkins X is around automating and improving CI/CD for kubernetes. The use of [Preview Environments](/about/concepts/features/#preview-environments) really helps to validate and approve Pull Requests before they get merged to `master`; but how do you try things out before you are ready submit a Pull Request?\n\nJenkins X has a concept of `Dev Pods` which are pods for developers to use as a terminal/shell which are based on the exact same operating system, docker containers and tools installed as the [pod templates](/docs/resources/guides/managing-jx/common-tasks/pod-templates/) used in the Jenkins X CI/CD pipelines.\n\nThis lets build, run tests or redeploy apps before you commit to git safe in the knowledge you're using the exact same tools as the CI/CD pipelines!\n\n## Creating a DevPod\n\nTo create your own `DevPod` use the command [jx create devpod](/commands/jx_create_devpod/).\n\nFor example if you want to create a `maven` based DevPod use:\n\n```sh\njx create devpod -l maven\n```\n\nThis will then create a new `DevPod` based on the maven based [pod template](/docs/resources/guides/managing-jx/common-tasks/pod-templates/) and open your terminal inside that pod. You are now free to use the various tools like `git, docker, maven, skaffold, jx` which will all be using the same exact configuration as the CI/CD pipelines will.\n\n\n## Using web based VS Code\n\nIf you don't use `--sync` then the DevPod will embed the [web based version of VS Code](https://github.com/cdr/code-server) in your DevPod so that you can open the IDE in a browser and work on the source code inside your DevPod!\n\nThe source code is mounted into the workspace of the DevPod in the folder `/workspace`.\n\nTo get an incremental redeploy as you edit source inside VS Code then open a `Terminal` in VS Code and type:\n\n`./watch.sh`\n\ninside the shell of the DevPod.\n\nHere's a [demo showing how to use web based VS Code in a DevPod](/images/developing/vscode-devpod.mp4):\n\n<figure>\n<embed src=\"https://jenkins-x.io/images/developing/vscode-devpod.mp4\" autostart=\"false\" height=\"400\" width=\"600\" />\n<figcaption>\n<h5>Use web based VS Code inside a DevPod</h5>\n</figcaption>\n</figure>\n\n\n\n## Using Theia IDE\n\nIf you don't use `--sync` and you use `--theia` then the DevPod will embed the [Theia IDE](https://www.theia-ide.org/) so that you can open the IDE in a browser and work on the source code inside your DevPod!\n\nThe source code is mounted into the workspace of the DevPod in the folder `/workspace`.\n\nTo get an incremental redeploy as you edit source inside [Theia IDE](https://www.theia-ide.org/) then type:\n\n`./watch.sh`\n\ninside the shell of the DevPod.\n\n## Using a desktop IDE\n\nIf you wish to use a desktop IDE then you need to sync your source code you can work on it there, using your preferred editor on your desktop. In this case the workflow is:\n\n1. run `jx sync` once on your system\n2. cd into your project dir, and run `jx create devpod --reuse --sync`\n3. Once in the DevPod from step 2: run `./watch.sh`\n\nThis will open a shell (and create a DevPod, or re-use an existing one) and ensure the changes are synced up to the DevPod. Step 3: when  you run this then any changes you make locally will be pushed up to the DevPod, built, and then a temporary \"edit\" version of your application will be published.\n\nWhen you run `jx get applications` you will see your \"edit\" application listed. You can open this in a browser, and edit away, and refresh, as if you were developing locally.\n\n_if you are using the Visual Studio code extension to do this, you don't need to worry about this, it will be done automatically for you_\n\n\n\n## Opening a DevPod shell\n\nIf you have other terminals that want to connect into an existing `DevPod` use [jx rsh -d](/commands/jx_rsh/)\n\n```sh\njx rsh -d\n```\n\nIf you have more than one `DevPod` active you will be prompted for the list of available `DevPod`s to pick from. Otherwise your shell will open in the `DevPod` directly.\n\nIf you use `jx create devpod --reuse` it will lazily create a devpod if one doesn't exist for the project  directory you are in.\n\n### Viewing my DevPods\n\nUse the [jx get devpod](/commands/jx_get_devpod/) command:\n\n\n```sh\njx get devpod\n```\n\n### Deleting a DevPod\n\nUse the [jx delete devpod](/commands/jx_delete_devpod/) command:\n\n\n```sh\njx delete devpod\n```\n\nThen pick the devpod to delete and confirm. Or pass in the name of the devpod you want to delete as an argument.\n\n\n## Synchronizing source code\nIf you are using a desktop IDE you can synchronise your local source code into your DevPod via the [jx sync](/commands/jx_sync/) command.\n\nThis will allow you to edit source code in your preferred IDE like [VS Code](https://code.visualstudio.com/) or [IDEA](https://www.jetbrains.com/idea/).\n\n\n```sh\njx sync\n```\n\nYou just run this once on your system (if you are using the Visual Studio code extension to do this, you don't need to worry about this, it will be done automatically for you)\n\nThis command will download and install the excellent [ksync](https://github.com/vapor-ware/ksync) tool if its not already installed, run `ksync init` to add it to your cluster and then run `ksync watch` and then use `ksync create` to create a synchronisation spec.\n\nThen by default the code with be bidirectionally synchronized between the current directory and the `/code` folder in the `DevPod`. \nYou can now edit the code in your IDE and run build/test commands inside the `DevPod`!\n\ne.g. you can build your code with whatever tools you are using (`maven, gradle, make` etc), perform `docker` builds or run `skaffold` in developer mode.\n\nOver time, we are hoping to polish this experience to make it super easy to edit code in your IDE and get fast reloading working inside the kubernetes cluster using the same kubernetes resources, manifests and services!\n\n## Incremental building\n\nOne of the benefits of integrating with [skaffold](https://github.com/GoogleContainerTools/skaffold) for building docker images is that we can perform incremental rebuilds of docker images and redeploys of the associated helm charts.\n\nSo inside of your DevPod you can perform a regular build if your app is Java based. e.g. via maven:\n\n```sh\nmvn install\n```\n\nThen to trigger incremental rebuilding and deploying of the local code in the DevPod you can use:\n\n```sh\n./watch.sh\n```\n\nThis will use the `dev` profile to generate a new docker image using the generated _digest_ then use it in the helm chart to deploy.\n\nWhen you created your DevPod it was associated with an _Edit Environment_ for your _username_ so that any apps deployed in a DevPod will appear in your _Edit Environment_.\n\nSo once the `skaffold dev -p dev` (what `watch.sh` does) command has built the docker image and installed the helm chart, your app will show up via  [jx get applications](/commands/jx_get_applications/):\n\n```sh\njx get applications\n```\n\nNow if you edit code and trigger a docker rebuild, which for most languages is just changing the source code; though for Java apps its whenever you rebuild the jar - the image is regenerated and the helm chart updated!\n\n",
            "content/en/docs/reference/multi-cluster.md": "---\ntitle: Multiple Clusters\nlinktitle: Multiple Clusters\ndescription: Use separate cluster, account or clouds\ndate: 2016-11-01\npublishdate: 2016-11-01\nlastmod: 2018-01-02\ncategories: [getting started]\nkeywords: [install,kubernetes]\nweight: 30\naliases:\n  - /getting-started/multi-cluster\n---\n\nA common requirement for a production setup is to isolate your Development, Staging and Production environments onto separate Kubernetes clusters and to isolate the clusters from each other in separate cloud accounts or VPNs etc.\n\nThe challenge is how to install and manage all the separate kubernetes clusters with GitOps management and promotion between them all.\n\nWe currently have this approach:\n\n## Environment Controller\n\nWith this approach you install the `Environment Controller` chart into your Staging or Production cluster.\n\nThis is good because its already integrated into the stable version of Jenkins X.\n\nThough it has a number of drawbacks:\n\n* only works for github.com repositories\n* cannot be used to add/remove any apps like ingress, cert manager or external DNS for TLS\n* can only work with helm 2\n* can only support helm charts deployed into a single namespace\n\nOur assumption with the Environment Controller is that we need something that:\n\n* runs inside your Staging or Production cluster to avoid having to expose write/admin access to Staging/Production outside of your cluster\n* has a small with minimal RBAC footprint so it can be installed in any namespace in any Staging/Production cluster which are usually really locked down for security\n* makes few assumptions about the cluster (e.g. does not depend on a particular Ingress controller)\n* does not require access to the development cluster or anything else in Jenkins X other than the environments git repository and a docker + chart repository\n\n### Creating your Dev cluster\n\nIf you are creating a new installation then when you use [jx create cluster](/commands/jx_create_cluster/) or [jx install](/commands/deprecation/) then please specify `--remote-environments` to indicate that `Staging/Production` environments will be remote from the development cluster.\n\ne.g.\n\n```sh\njx create cluster gke --remote-environments --tekton\n```\n\nWhen creating your Environments via [jx create environment](/commands/jx_create_environment/) you can also specify the environment is remote via the `--remote` or answering `Y` to the question when prompted.\n\nWhat this means is that if an environment is remote to the development cluster then we don't register the release pipeline\nof the environment in the Dev cluster; we leave that to the Environment Controller to perform running inside the remote cluster.\n\n### Configure an existing Dev cluster\n\nIf you already have a Dev cluster that was setup with `Staging` and `Production` namespaces inside your Dev cluster then please do the following:\n\nEdit the environments to mark them as remote via [jx edit environment](/commands/jx_edit_environment/):\n\n```sh\njx edit env staging --remote\njx edit env production --remote\n```\n\nYou need to manually disable the release pipeline in the Dev cluster.\n\ne.g. by removing the `postsubmit` setting in your Prow configuration if you are using [serverless Jenkins X Pipelines and tekton](/about/concepts/jenkins-x-pipelines/) - or comment out the `jx step helm apply` command in your `Jenkinsfile` if using static jenkins server\n\n### Installing Environment Controller\n\nFirst you need to connect to your remote kubernetes cluster for `Staging` or `Production` using your managed kubernetes provider's tooling.\n\nYou also need to have RBAC karma to be able to [escalate roles](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#privilege-escalation-prevention-and-bootstrapping) for `Role` and/or `ClusterRole` permissions.\n\nThen to install the Environment Controller use [jx create addon envctl](/commands/jx_create_addon_environment/).\n\nYou need to specify the environments git repository and docker registry host and on GCP the project ID:\n\n```sh\njx create addon envctl -s https://github.com/myorg/env-production.git --project-id myproject --docker-registry gcr.io --cluster-rbac true --user mygituser --token mygittoken\n```\n\nThe installer needs a user + API token for the git repository which it will prompt you for the known values from your `~/.jx/gitAuth.yaml` file so if you already installed Jenkins X it should be able to default those values for you.\n\nIf you prefer you can install the helm chart `jenkins-x/environment-controller` directly with helm by specifying the [required values from the values.yaml file](https://github.com/jenkins-x-charts/environment-controller/blob/master/environment-controller/values.yaml#L3-L19)\n\n**Fetch issues during installation**\n\nYou might run into the issue, that you cannot deploy the envirnment controller, since helm is unable to download the chart file. This might be due to the fact, that older helm versions have issues with a missing trailing slash on the repo url. See [helm/issues/4954](https://github.com/helm/helm/issues/4954)\n\n```sh\nhelm fetch -d /tmp/helm-template-workdir-742964675/jxet/chartFiles --untar environment-controller --repo https://storage.googleapis.com/chartmuseum.jenkins-x.io --version\nError: Failed to fetch https://storage.googleapis.com/charts/environment-controller-0.0.617.tgz : 403 Forbidden\n```\n\nIn that case, upgrading your helm version might help.\n\n### Installing Ingress Controller\n\nIf you don't already have any kind of Ingress Controller in your remote `Staging` / `Production` cluster then it is recommend - particularly if you want to try out our [quickstarts](/docs/getting-started/first-project/create-quickstart/) which depend on Ingress to be able to be used from a web browser.\n\nTo install the default ingress controller into a remote cluster (which doesn't have Jenkins X installed) you can use the command [jx create addon ingctl](/commands/jx_create_addon_ingress/)\n\n```sh\njx create addon ingctl\n```\n\nThis will setup the Ingress Controller; find its external domain and then setup a Pull Request on the environments git repository so that future promotions in the environment will use the correct `domain` value on the generated `Ingress` resources.\n\n### How it works\n\nOn startup the Environment Controller registers itself into the github repository as a webhook endpoint using its LoadBalancer service IP address. If you are using a custom ingress/DNS endpoint you can override this via the `webhookUrl` chart value or [--webhook-url CLI option](/commands/jx_create_addon_environment/)\n\nWhenever there is a push to the `master` branch (PRs and feature branches are handled by your Development cluster) the Environment Controller triggers a new [Jenkins X Pipeline](/about/concepts/jenkins-x-pipelines/) for the Promotion. All other push events on other branches are ignored (as they are processed by the Development cluster).\n\nThen the tekton controller turns this set of Pipeline resources is turned into one or more Pods which run the pipeline. By default promotion pipelines just use a single pod - but you can [customise your deployment pipeline](/about/concepts/jenkins-x-pipelines/) which may use sequential/parallel tasks which result in multiple pods.\n\nBecause Environment Controller reacts purely to merges to the environment git repository and we are using canonical git source code; it works with both Static Jenkins Servers and [serverless Jenkins X Pipelines and tekton](/about/concepts/jenkins-x-pipelines/) in the Development cluster.\n\n### Demo\n\nThere was a demo of using environment controller in the [April 19, 2019 Office Hours](/community/office_hours/2019-04-19/)\n\n### Known limitations\n\nThe following things are not yet automatically configured for you but we hope to automate them soon:\n\n* currently you have to manually add the `CHART_REPOSITORY` environment variable into the `jenkins-x.yml` file in your environment git repository. e.g. a `jenkins-x.yml` file like this will do the trick - using the real URL to your chartmuseum (use `jx open` in your development cluster:\n\n```yaml\npipelineConfig:\n  env:\n  - name: CHART_REPOSITORY\n    value: http://chartmuseum.jx.1.2.3.4.nip.io\n ```\n\nYou can do the above via the [jx create var -n CHART_REPOSITORY](/commands/jx_create_variable/) command if you are inside a clone of the staging/production git repository - then git commit + merge the change.\n",
            "content/en/docs/reference/pipeline-syntax-reference.md": "---\ntitle: Jenkins X Pipeline Syntax Reference\nlinktitle: Pipeline Reference\ndescription: cloud native serverless pipelines\ndate: 2019-06-20\npublishdate: 2019-06-20\nkeywords: [tekton]\nweight: 8\naliases:\n  - /architecture/pipeline-syntax-reference\n---\n\n# Syntax for `jenkins-x.yml` and build packs\n\n## Where to Define Your Pipelines\n\nPipelines can either be defined in [build packs](/docs/create-project/build-packs/), used for\nmultiple projects, or in the `jenkins-x.yml` file in a project's repository.\nWhen defining pipelines in a build pack, the top-level configuration below is\nused directly, while in `jenkins-x.yml`, the top-level configuration is under\nthe `pipelineConfig` key.\n\n## Top-Level Configuration\n\n* **<a id='extends'>`extends`</a>** - A build pack can extend another build pack,\ninheriting its configuration and contributing its own additional behavior.\n    * **`file`** - The name of the build pack to inherit from.\n    * **`import`** - If the build pack to inherit from is not in the same\n    repository as this build pack, specify where to import it from.\n* **[`agent`](#agent)** - A default agent configuration for all pipelines in the\nbuild pack or project.\n* **[`env`](#env)** - Environment variables to be made available for all\npipelines in the build pack or project.\n* **[`containerOptions`](#containerOptions)** - Default configuration for step\ncontainers for all pipelines in the build pack or project.\n* **<a id='pipelines'>`pipelines`</a>** - The pipeline definitions for this\nbuild pack or project.\n\n## Specifying and Overriding Release, Pull Request, and Feature Pipelines\n\n* **<a id='pullRequest-release-feature'>`pullRequest`, `release`, `feature`</a>** -\nThe configuration for the three pipeline types for this build pack or project.\n    * **[`setup`](#build-pack-stages)** - The first stage to run.\n    * **[`setVersion`](#build-pack-stages)** - The second stage to run.\n    * **[`preBuild`](#build-pack-stages)** - The third stage to run.\n    * **[`build`](#build-pack-stages)** - The fourth stage to run.\n    * **[`postBuild`](#build-pack-stages)** - The fifth stage to run.\n    * **[`promote`](#build-pack-stages)** - The sixth and final stage to run.\n    * **[`pipeline`](#defining-an-individual-pipeline)** - The full definition\n    of the pipeline. Mutually exclusive with `setup`, etc.\n* **<a id='overrides'>`overrides`</a>** - A list of overriding changes to make\nto the inherited or default pipeline.\n    * **`pipeline`** - The name of the pipeline this override should be applied\n    to (`release`, `pullRequest`, or `feature`). If unspecified, this override\n    will be applied to all pipelines.\n    * **`stage`** - The name of the stage this override should be applied to.\n    If unspecified, this override will be applied to all stages.\n    * **`name`** - The name of the step this override should be applied to. If\n    unspecified, this override will be applied to all steps.\n    * **`step`** - A single [step](#configuration-for-steps) which will be used\n    to override the named step or, if no step name is given, all steps in the\n    specified stage. If neither `step` nor `steps` is given, all steps in\n    matching stages in matching pipelines will be removed.\n    * **`steps`** - One or more [steps](#configuration-for-steps) which will be\n    used to override the named step or, if no name is given, all steps in the\n    specified stage.\n    * **`type`** - Whether the `step` or `steps` should replace the named step,\n    be prepended before the named step, or be appended after the named step.\n    Possible values are `replace`, `before`, or `after`.\n    * **[`agent`](#agent)** - An agent definition that will replace the\n    existing agent definition for matching pipelines and stages. Step agents\n    are not changed.\n* **<a id='default'>`default`</a>** - A full [pipeline definition](#defining-an-individual-pipeline)\nthat will be used for the `pullRequest`, `release`, and `feature` pipelines if\nthey are not already specified.\n\n### Build pack stages\n\n* **[`preSteps`](#configuration-for-steps)** - A list of steps to run before\nthe main body of steps for this stage. `preSteps` is *not* inherited from parent\nbuild packs.\n* **[`steps`](#configuration-for-steps)** - The main body of steps to run for\nthis stage. If inheriting from a parent build pack, these steps will be appended\nto the parent build pack's `steps` by default.\n* **`replace`** - An optional boolean. If true, the inherited stage definition's\n`steps` will be replaced, rather than appended to.\n\n## Defining an Individual Pipeline\n\n### Configuration for the Whole Pipeline\n\n* **[`agent`](#agent)** - A default agent definition to use for any\n[stages](#configuration-for-stages) without their own agents specified.\nOverrides [build pack or project](#top-level-configuration) agent definition.\n* **[`env`](#env)** - Environment variables set for the entire pipeline, which\ncan be overridden in individual stages and steps.\n* **<a id='options'>`options`</a>** - Additional configuration for the entire\npipeline.\n    * **<a id='timeout'>`timeout`</a>** - The maximum duration for execution\n    of the pipeline, after which the build will be terminated.\n        * **`time`** - How long to wait until timing out the build.\n        * **`unit`** - The unit for `time`. Can be any of `seconds`, `minutes`,\n        or `hours`. Defaults to `seconds` if unspecified.\n    * **[`containerOptions`](#containerOptions)** - Default configuration for\n    step containers within this pipeline, overriding any common settings with\n    [build pack or project](#top-level-configuration) default configuration.\n    * **`sidecars`** - One or more [Kubernetes containers](https://kubernetes.io/docs/concepts/containers/)\n    which will be added to every stage in the pipeline, to provide additional\n    features in the pods.\n    * **`volumes`** - One or more [Kubernetes volumes](https://kubernetes.io/docs/concepts/storage/volumes/)\n    which will be added to every stage in the pipeline, and can be mounted via\n    `containerOptions`.\n* **<a id='dir'>`dir`</a>** - Optional default working directory for stages and\nsteps in this pipeline. Can either be relative, under the `/workspace/source`\ndirectory were the project source will be checked out, or absolute.\n* **<a id='stages'>`stages`</a>** - A list of one or more [stages](#configuration-for-stages).\n\n### Configuration for Stages\n\n* **<a id='name'>`name`</a>** - The name of the stage. Required and must be\nunique.\n* **[`agent`](#agent)** - The agent definition to use for this stage,\noverriding the agent specified for [the whole pipeline](#configuration-for-the-whole-pipeline)\nif one is specified.\n* **<a id='options'>`options`</a>** - Additional configuration for the stage.\n    * **[`containerOptions`](#containerOptions)** - Default configuration for\n    step containers within this stage, overriding any common settings with\n    [the whole pipeline](#configuration-for-the-whole-pipeline) default\n    configuration.\n    * **`sidecars`** - One or more [Kubernetes containers](https://kubernetes.io/docs/concepts/containers/)\n    which will be added to this stage's pod, to provide additional features.\n    * **`volumes`** - One or more [Kubernetes volumes](https://kubernetes.io/docs/concepts/storage/volumes/)\n    which will be added to this stage's pod, and can be mounted via `containerOptions`.\n* **[`env`](#env)** - Environment variables set for all steps or nested stages,\noverriding any variables defined for [the whole pipeline](#configuration-for-the-whole-pipeline).\n* **<a id='nestedstages'>`stages`</a>** - A list of stages to run sequentially\nwithin this stage, inheriting this stage's configuration. Cannot be used with\neither `steps` or `parallel`.\n* **<a id='parallel'>`parallel`</a>** - A list of stages to run in parallel,\ninheriting this stage's configuration. Cannot be used with either `steps` or\n`stages`.\n* **<a id='dir'>`dir`</a>** - Optional default working directory for steps and\nnested stages. Can either be relative under the `/workspace/source` directory or\nabsolute.\n* **[`steps`](#configuration-for-steps)** - A list of steps to run in this stage. Cannot be used\nwith either `stages` or `parallel`.\n\n### Configuration for Steps\n\n* **<a id='name'>`name`</a>** - A name for the step, used in logging and for\noverrides.\n* **<a id='command'>`command`</a>** - The command to execute in this step.\n* **<a id='args'>`args`</a>** - An array of arguments to the command.\n* **<a id='dir'>`dir`</a>** - Optional working directory for this step.\n* **[`agent`](#agent)** - Optional agent configuration for this step.\n* **<a id='loop'>`loop`</a>** - Repeats the nested [`steps`](#configuration-for-steps)\nfor each value in the specified list.\n    * **`variable`** - The name of the environment variable to be set with the\n    value for this loop iteration.\n    * **`values`** - A list of strings to iterate over.\n    * **[`steps`](#configuration-for-steps)** - One or more steps to run for\n    each iteration of the loop.\n* **[`env`](#env)** - Environment variables set for this step, adding to\ninherited environment variables from the stage and pipeline.\n\n## Common Directives\n\n* **<a id='agent'>`agent`</a>** - What container image should be used.\n    * **`image`** - A container image, either as a fully qualified image or a\n    [pod template name](/docs/reference/components/pod-templates/).\n    * **`label`** - Only used with static Jenkins masters - the Jenkins agent\n    label to use.\n* **<a id='env'>`env`</a>** - One or more environment variables.\n    * **`name`** - The name of the environment variable.\n    * **`value`** - The value of the environment variable.\n* **<a id='containerOptions'>`containerOptions`</a>**\n    * See [Kubernetes container configuration](https://kubernetes.io/docs/concepts/containers).\n    `name`, `command`, `args`, `image`, and `workingDir` cannot be specified.\n    * Common use cases for `containerOptions` include resource requests and\n    limits, and volume mounts.\n\n# Examples\n\n## Full pipeline definition in `jenkins-x.yml`\n\n```yaml\n# If a build pack is specified, the `pipeline` in `release`, `pullRequest`, and `feature` will be ignored.\nbuildPack: none\n\npipelineConfig:\n  pipelines:\n    release:\n    # While the legacy build pack built-in stages can be used in jenkins-x.yaml, pipeline is preferred.\n      pipeline:\n        # Define a default container image we'll use throughout the pipeline, unless an explicit agent is\n        # specified on a stage or step.\n        agent:\n          image: \"some/image@version\" # or \"maven\" - this means \"use the maven pod template\"\n        # Environment variables are either static key/value pairs or Kubernetes valueFrom EnvVarSources.\n        # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#envvarsource-v1-core\n        # for more information on valueFrom.\n        # Environment variables defined at the top level can be overridden in stages and individual\n        # steps.\n        environment:\n          - name: SOME_VAR\n            value: A value for the env var\n          - name: SOME_OTHER_VAR\n            value: Another var\n          - name: SOME_API_KEY\n            valueFrom:\n              secretKeyRef:\n                name: mysecret\n                key: apikey\n        # Options contains other configuration for the pipeline.\n        options:\n          # containerOptions allows specifying more advanced default configuration for the containers\n          # used for all stages and steps in this scope, using the standard Kubernetes syntax for\n          # containers.\n          # See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#container-v1-core.\n          # Not all fields can be configured - e.g., name, command, arguments, image, and dir are all\n          # defined via the syntax - but everything else can be.\n          # Like with environment variables, containerOptions at the top level can be overridden and\n          # added to by stages.\n          containerOptions:\n            # Here we're setting the resource requests and limits for all step containers within this\n            # pipeline.\n            resources:\n              requests:\n                cpu: 0.1\n                memory: 64Mi\n              limits:\n                cpu: 0.2\n                memory: 128Mi\n          # timeout allows you to set the maximum duration for builds of this pipeline.\n          timeout:\n            time: 15\n            unit: minutes\n        # A pipeline must contain at least one stage, and each stage must have a unique name.\n        stages:\n          - name: Stage With Steps And Options Etc\n            # agent, options, and environment are valid on stages as well. For the parents of nested\n            # sequential or parallel stages, their children inherit the parent's agent, options,\n            # and environment.\n            # options on a stage currently only can contain containerOptions.\n            options:\n              containerOptions:\n                resources:\n                  limits:\n                    cpu: 0.4\n                    memory: 256Mi\n            # A stage must contain at least one of \"steps\", \"stages\", or \"parallel\"\n            # Steps must contain at least one command to be executed or a loop.\n            steps:\n              - command: mvn\n                # args are a YAML array, so can be specified either on multiple lines or in a []\n                args:\n                  - clean\n                  - install\n                dir: foo  # Optional, allows running this step in a subdirectory of the workspace, or\n                          # a different absolute directory.\n                # Steps can have their own images specified, overriding the stage and top-level images.\n                agent:\n                  image: some-other-image\n              # A loop allows you to specify a list of potential values for an environment variable and a\n              # set of one or more steps. Those steps will be run, sequentially, for each of the\n              # potential values. Loops can also be nested for more complex combinations.\n              - loop:\n                  variable: LANGUAGE\n                  values:\n                    - maven\n                    - gradle\n                    - nodejs\n                  steps:\n                    - command: echo\n                      args:\n                        - hello\n                        - ${LANGUAGE}\n          - name: Stage with nested sequential stages\n            # Any configuration of agent, options, or environment will apply to all child stages.\n            environment:\n              - name: SPECIFIC_TO_SEQUENTIAL_PARENT\n                value: something\n            # A list of nested stages to run sequentially. This is meant to allow for avoiding\n            # copy-pasting configuration across a set of stages that need to have the same configuration\n            # but where that configuration shouldn't be in place for *all* stages in the pipeline.\n            stages:\n              # ...insert stages here. =)\n          - name: Stage with nested parallel stages\n            # Works very similarly to sequential stages, except that the stages are executed in parallel,\n            # rather than sequentially.\n            parallel:\n              # ...insert stages here. =)\n```\n",
            "content/en/docs/resources/_index.md": "---\ntitle: Guides and resources\nlinktitle: Guides and resources\ntype: docs\ndescription: Guides, tutorials, demos, resources and FAQ to help you learn Jenkins X\nweight: 50\naliases:\n  - /resources\n  - /docs/resources/\n---\n\n",
            "content/en/docs/resources/content/_index.md": "---\ntitle: Presentations and artwork \nlinktitle: Presentations and artwork\ntype: docs\ndescription: Artwork and resources to help you evangelize and showcase Jenkins X to your team!\nweight: 50\n---\n\n## Presentations\n\nWe have developed a presentation to help you introduce Jenkins X to your team, we will be adding more soon! Right from this site, you can present.\n\n<iframe src=\"https://gitpitch.com/sharepointoscar/presentations/master?p=talks/intro-to-jenkins-x#/\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" id=\"emb_5jtc6n\" height=\"401\" width=\"600\" style=\"border: none; position: relative; visibility: visible; display: block; margin: 0px; padding: 0px; max-width: 100%; min-width: 200px;\"></iframe>\n\n***\n\n## Official Artwork\n\nJenkins X logos can be downloaded in a number of sizes, or as vector graphics, from [our artwork repo](https://github.com/cdfoundation/artwork/tree/master/jenkinsx). The repo also contains our brand guidelines and color palette.\n\nYou can read more about our new logo for Jenkins X [here](https://jenkins-x.io/blog/2019/07/31/new-logo-jenkins-x/).\n\n{{< figure src=\"/news/new-logo-jenkins-x/jenkinsx-stacked-color.png\" >}}\n",
            "content/en/docs/resources/demos-talks-posts/_index.md": "---\ntitle: \"Demos, talks and blog posts\"\ndate: 2017-01-05\nweight: 30\naliases:\n  - /demos/  \ndescription: >\n  A list of useful demos, talks and blog posts to continue on your getting started journey.\n---\n",
            "content/en/docs/resources/demos-talks-posts/articles.md": "---\ntitle: Articles\ndate: 2018-05-05T10:36:00+02:00\ndescription: See what folks have written about Jenkins X\nweight: 10\n---\n\n* [Defining And Running Serverless Deployments With Knative And Jenkins X](https://technologyconversations.com/2019/07/17/defining-and-running-serverless-deployments-with-knative-and-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), July 17th, 2019\n* [Jenkins X\u200a\u2014\u200aManaging Nexus](https://itnext.io/jenkins-x-managing-nexus-17d31ad493d6?source=friends_link&sk=8bfb32a5e9bf1170c0b3430731144adf) by [Steve Boardwell](https://medium.com/@sboardwell), August 23th, 2019\n* [Jenkins X\u200a\u2014\u200aManaging Jenkins](https://itnext.io/jenkins-x-managing-jenkins-926f0e0f8bcf?source=friends_link&sk=3dcd9c4a8c028661f0b09156c14c271e) by [Steve Boardwell](https://medium.com/@sboardwell), August 8th, 2019\n* [Overriding Pipelines, Stages, And Steps And Implementing Loops In Jenkins X Pipelines](https://technologyconversations.com/2019/06/30/overriding-pipelines-stages-and-steps-and-implementing-loops-in-jenkins-x-pipelines/) by [Viktor Farcic](https://technologyconversations.com), June 30th, 2019\n* [Jenkins X\u200a\u2014\u200aTLS enabled Previews](https://itnext.io/jenkins-x-tls-enabled-previews-d04fa68c7ce9?source=friends_link&sk=c13828b223f56ed662fd7ec0872c3d1e) by [Steve Boardwell](https://medium.com/@sboardwell), June 26th, 2019\n* [Jenkins X\u200a\u2014\u200aSecuring the Cluster](https://itnext.io/jenkins-x-securing-the-cluster-e1b9fcd8dd05?source=friends_link&sk=e1e46e780908b2e3c8415c3191e82c56) by [Steve Boardwell](https://medium.com/@sboardwell), June 22nd, 2019\n* [Ten Commandments Of GitOps Applied To Continuous Delivery](https://technologyconversations.com/2019/06/21/ten-commandments-of-gitops-applied-to-continuous-delivery/) by [Viktor Farcic](https://technologyconversations.com), June 21th, 2019\n* [Upgrading Ingress Rules And Adding TLS Certificates With Jenkins X](https://technologyconversations.com/2019/05/31/upgrading-ingress-rules-and-adding-tls-certificates-with-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), May 31th, 2019\n* [The Evolution Of Jenkins Jobs And How We Got To The YAML-Based jenkins-x.yml Format](https://technologyconversations.com/2019/05/09/the-evolution-of-jenkins-jobs-and-how-we-got-to-the-yaml-based-jenkins-x-yml-format/) by [Viktor Farcic](https://technologyconversations.com), May 9th, 2019\n* [Implementing ChatOps With Jenkins X](https://technologyconversations.com/2019/04/24/implementing-chatops-with-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), April 24th, 2019\n* [Going Serverless With Jenkins X: Exploring Prow, Jenkins X Pipeline Operator, And Tekton](https://technologyconversations.com/2019/04/15/going-serverless-with-jenkins-x-exploring-prow-jenkins-x-pipeline-operator-and-tekton/) by [Viktor Farcic](https://technologyconversations.com), April 15th, 2019\n* [Working With Pull Requests And Preview Environments](https://technologyconversations.com/2019/03/25/working-with-pull-requests-and-preview-environments/) by [Viktor Farcic](https://technologyconversations.com), March 25th, 2019\n* [Improving And Simplifying Software Development With Jenkins X](https://technologyconversations.com/2019/03/10/improving-and-simplifying-software-development-with-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), March 10th, 2019\n* [Exploring Jenkins X: DevPods](https://www.cloudbees.com/blog/exploring-jenkins-x-devpod) on March 6th, 2019 by [Nicolas DeLoof](https://www.cloudbees.com/blogs/nicolas-deloof)\n* [Setting up Jenkins X on Azure Kubernetes Service (AKS)](https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/) on March 6th, 2019 by [Pui Chee Chan](https://cloudblogs.microsoft.com/opensource/author/pui-chee-chan/)\n* [Progressive Delivery with Jenkins X: Automatic Canary Deployments](https://blog.csanchez.org/2019/03/05/progressive-delivery-with-jenkins-x-automatic-canary-deployments/) on March 5th, 2019 by  [Carlos Sanchez](https://blog.csanchez.org/author/carlossanchez/)\n* [Jenkins X Environment Specific Variables](https://nicholasduffy.com/posts/jenkins-x-environment-specific-variables/) on March 4th, 2019 by [Nicholas Duffy](https://nicholasduffy.com/) \n* [Creating Custom Jenkins X Build Packs](https://technologyconversations.com/2019/02/27/creating-custom-jenkins-x-build-packs/) by [Viktor Farcic](https://technologyconversations.com), February 27th, 2019\n* [Is Your Cluster Ready For Jenkins X?](https://technologyconversations.com/2019/02/05/is-your-cluster-ready-for-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), February 5th, 2019\n* [Zero cost preview environments on Kubernetes with Jenkins X and Osiris](https://medium.com/@vbehar/zero-cost-preview-environments-on-kubernetes-with-jenkins-x-and-osiris-bd9ce0148d03) by [Vincent Behar](https://medium.com/@vbehar), February 5th, 2019\n* [What Is Jenkins X?](https://technologyconversations.com/2019/01/29/what-is-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com), January 29th, 2019\n* [Jenkins X: Preview Environment](https://medium.com/@MichalFoksa/jenkins-x-preview-environment-3bf2424a05e4) by [Michal Foksa](https://medium.com/@MichalFoksa), January 10th, 2019\n* [Continuous Delivery with Amazon EKS and Jenkins X](https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/) by [Henryk Konsek](https://twitter.com/hekonsek), 7th November, 2018\n* [Trying out Jenkins X on Azure Kubernetes Service(AKS)](https://medium.com/@puichan/trying-out-jenkins-x-on-azure-kubernetes-service-aks-20fe94bd72d2) by [PC Chan](https://medium.com/@puichan) on October 29th, 2018\n* [Installing Jenkins X on IBM Cloud Kubernetes Service](https://www.ibm.com/blogs/bluemix/2018/08/installing-jenkins-x-on-ibm-cloud-kubernetes-service/) on August 28th, 2018 by [Ram Vennam](https://www.ibm.com/blogs/bluemix/author/rvennamus-ibm-com/) \n* [Jenkins X and Pivotal PKS](http://www.routetocloud.com/2018/08/1969/) on 1st August, 2018 by [Roie Ben-haim](https://twitter.com/roie9876)\n* [Accelerate with Jenkins X](https://jenkins.io/blog/2018/07/19/jenkins-x-accelerate/) by [James Rawlings](https://twitter.com/jdrawlings/) on July 20, 2018 \n* [Add CI/CD to Your Spring Boot App with Jenkins X and Kubernetes](https://developer.okta.com/blog/2018/07/11/ci-cd-spring-boot-jenkins-x-kubernetes) by [Matt Raible](https://twitter.com/mraible/) on July 11, 2018 \n* [Don't Install Developer Tools!](https://www.cloudbees.com/blog/don%E2%80%99t-install-development-tools) by Michael Neale on 30 May 2018\n* [Introducing Jenkins X: a CI/CD solution for modern cloud applications on Kubernetes](https://jenkins.io/blog/2018/03/19/introducing-jenkins-x/) by [James Strachan](https://twitter.com/jstrachan) on 19th March, 2018\n* [Don't Install Kubernetes!](https://www.cloudbees.com/blog/dont-install-kubernetes) by Michael Neale on 27th February, 2018\n* [Jenkins X Explained Part 1\u200a-\u200aan integrated CI/CD solution for Kubernetes](https://jenkins.io/blog/2018/04/16/jenkins-x-explained-part1/) by James Rawlings on 16th April, 2018\n* [Serverless and Kubernetes: Serverless Isn't Processless](https://www.cloudbees.com/blog/serverless-and-kubernetes-serverless-isnt-processless) by Michael Neale on 12th April, 2018\n* [Opinionated Kubernetes and Jenkins X](https://www.cloudbees.com/blog/opinionated-kubernetes-and-jenkins-x) by Michael Neale on 13th February, 2018\n* [Now on DevOps Radio: James Strachan - Introduces Jenkins X, Taking Continuous Delivery to the NeXt Level](https://www.cloudbees.com/blog/now-devops-radio-james-strachan-introduces-jenkins-x-taking-continuous-delivery-next-level) by Heidi Gilmore on 28th February, 2018\n* [Why Kubernetes Changes Everything!](https://www.cloudbees.com/blog/why-kubernetes-changes-everything) by Rob Davies on 17th April, 2018\n* [JenkinsX \u2013 new Kubernetes dream? Part 1](https://blog.octo.com/en/jenkinsx-new-kubernetes-dream-part-1/) by Mykyta Shulhin, Ilya Trofimov on 17th April, 2018\n* [JenkinsX \u2013 new Kubernetes dream? Part 2 - Technical!](https://blog.octo.com/en/jenkinsx-new-kubernetes-dream-part-2/) by Mykyta Shulhin, Ilya Trofimov on 19th April, 2018\n* [Jenkins: X or 2.0 ?](https://dzone.com/articles/jenkins-x-the-good-bad-and-ugly) by [Oleksii Dzhulai](https://medium.com/@odzhu) on 13th April, 2018 \n* [Want to Help Build CloudBees for Kubernetes with Jenkins X?](https://www.cloudbees.com/blog/want-help-build-cloudbees-kubernetes-jenkins-x) by Rob Davies on 2nd May, 2018\n* [Jenkins X: Announcing CVE docker image analysis with Anchore](https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/) by James Rawlings on 8th May, 2018\n* [Activiti Cloud & Jenkins X: Blueprint in AWS and GCE](https://salaboy.com/2018/05/15/activiti-cloud-jenkins-x-blueprint-in-aws-and-gce/) by [Salaboy](https://salaboy.com/) on 15th May, 2018\n* [CI/CD with Jenkins-x on your existing (GKE) cluster\u200a\u2014\u200aruby on rails application](https://medium.com/@maniankara/ci-cd-with-jenkins-x-on-your-existing-gke-cluster-ruby-on-rails-application-785d8390a857) by [anoop vijayan maniankara](https://medium.com/@maniankara) on May 20th, 2018\n\nAlso check out the [Jenkins X Blog](/blog/news/) and [Talks and Conferences](/docs/resources/demos-talks-posts/)\n\n",
            "content/en/docs/resources/demos-talks-posts/create_cluster.md": "---\ntitle: Create Cluster\nlinktitle: Create Cluster\ndescription: How to create a Kubernetes cluster and install Jenkins X\nweight: 30\n---\n\nThis [demo](https://www.youtube.com/watch?v=ELA4tytdFeA) [creates a new kubernetes cluster](/docs/getting-started/setup/create-cluster/) using these commands in parallel:\n\n* [jx create cluster gke](/commands/jx_create_cluster_gke/)\n* [jx create cluster aks](/commands/jx_create_cluster_aks/)\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ELA4tytdFeA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/en/docs/resources/demos-talks-posts/create_cluster_gke.md": "---\ntitle: Create Cluster GKE\nlinktitle: Create Cluster GKE\ndescription: How to create a Kubernetes cluster on GKE and install Jenkins X\nweight: 40\naliases:\n  - /demos/create_cluster_gke\n---\n\nThis [demo](https://www.youtube.com/watch?v=r8-J9Qg-p9U) uses the [jx create cluster gke](/commands/jx_create_cluster_gke/) command to [create a new kubernetes cluster](/docs/getting-started/setup/create-cluster/):\n\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/r8-J9Qg-p9U\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/en/docs/resources/demos-talks-posts/create_spring.md": "---\ntitle: Create Spring\nlinktitle: Create Spring\ndescription: How to create a new Spring Boot application with CI / CD and GitOps Promotion\nweight: 50\naliases:\n  - /developing/create-spring\n---\n\nThis [demo](https://www.youtube.com/watch?v=kPes3rvT1UM) uses the [jx create spring](/commands/deprecation/) command to [create a new Spring Boot application with CI / CD pipelines](/developing/create-spring/) with [GitOps promotions](/about/concepts/features/#promotion):\n\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kPes3rvT1UM\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/en/docs/resources/demos-talks-posts/devoxx-uk-2018.md": "---\ntitle: \"DevOxx UK 2018 Demo\"\ndate: 2018-05-05T10:36:00+02:00\ndescription: \"Jenkins X live demo on GKE at DevOxx UK, 2018\" \nweight: 60\n---\n\nHere is the [video of a talk by James Strachan: Jenkins X: Continuous Delivery for Kubernetes](https://youtu.be/BF3MhFjvBTU?list=PLRsbF2sD7JVpRvLpv_Cub94zsM1aHm-Op) at [DevOxx UK, 2018](https://www.devoxx.co.uk/). \n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/BF3MhFjvBTU?list=PLRsbF2sD7JVpRvLpv_Cub94zsM1aHm-Op\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nYou can also [get the slides from this talk here](https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit#slide=id.p)\n",
            "content/en/docs/resources/demos-talks-posts/kubecon-2018.md": "---\ntitle: \"KubeCon 2018 Demo\"\ndate: 2018-05-05T10:36:00+02:00\ndescription: \"Jenkins X overview at KubeCon Copenhagen\"\nweight: 70\n---\n\nHere is the [video of a talk by James Strachan: Jenkins X: Easy CI/CD for Kubernetes](https://youtu.be/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo) at [KubeCon Europe 2018](https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/). \n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nYou can also [get the slides from this talk here](https://docs.google.com/presentation/d/19DAFONpT3L4t6sisyTuK2_chHrVorQO_1ijWEo8Euas/edit?usp=sharing)\n\n<img src=\"/news/jenkins-x-does-kubecon/kubecon-talk.jpg\">\n",
            "content/en/docs/resources/demos-talks-posts/talks.md": "---\ntitle: Recorded Talks\ndate: 2018-05-05T10:36:00+02:00\ndescription: Talks at Meetups and Conferences\nweight: 20\n---\n* [2019-10-03 The Recipe For Continuous Delivery](https://2019.devopsunicorns.com/sessions/the-recipe-to-continuous-delivery/) at [DevOps Unicorns](https://2019.devopsunicorns.com/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://youtu.be/YuGEAmPj_Fw)\n\n* [2019-10-01 Choosing The Right Deployment Strategy](https://www.devclub.lv/announcement-of-devops-unicorns-warmup-79th-devclub-lv/) at [DevClub Riga](https://www.devclub.lv/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=5MTx-xL6iQ0)\n\n* [2019-09-11 Jenkins X: Progressive Delivery for Kubernetes](https://2019.javazone.no/program/d8f893f0-3e08-41ef-9ec6-fe2fa93cd4ce) at [JavaZone](https://2019.javazone.no) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 Vimeo](https://vimeo.com/362768726)\n\n* [2019-05-27 Running Serverless Continuous Delivery](https://www.jbcnconf.com/2019/infoTalk.html?id=5cd1f98438da161cb0381424) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://youtu.be/PEmsqzbiNFc)\n\n* [2019-07-18 Progressive Delivery en Kubernetes (Spanish)](https://www.youtube.com/watch?v=u7Z1V_NcmPY)\ud83c\udfa5 with [NorthemQuality](https://northemquality.github.io/) by [Carlos Sanchez](https://csanchez.org)\n\n* [2019-07-04 Modern CI/CD with Tekton and Prow Automated via Jenkins X](https://kccnceu19.sched.com/event/MPZ4?iframe=no) at [KubeCon (Barcelona)](https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2019/) by [Christie Wilson ](https://twitter.com/bobcatwilson) and [James Rawlings](https://twitter.com/jdrawlings) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=4EyTGYB7GvA)\n\n* [2019-06-25 GitOps by courtesy of Jenkins X](https://containerdays.sched.com/event/Q4Oc/gitops-by-courtesy-of-jenkins-x) at [ContainerDays 2019, Hamburg (Germany)](https://www.containerdays.io/) by [Gerd Aschemann](https://twitter.com/GerdAschemann) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=XzZIeCrB8p0) ([Slides](http://aschemann.net/gerd/publications/jx-talk-condays-2019/))\n\n* [2019-06-24 Progressive Delivery: Continuous Delivery the Right Way](https://cdsummitchina19.sched.com/event/QaSO/progressive-delivery-continuous-delivery-the-right-way) at [CDSummit China](https://cdsummitchina19.sched.com) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=-3VHVsgBTyo&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&index=2)\n\n* [2019-06-13 The recipe for continuous delivery](https://www.meetup.com/Cloud-Native-Computing-Bern/events/260536132/) at [Cloud Native Bern](https://www.meetup.com/Cloud-Native-Computing-Bern/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=mPcQ4MY35go)\n\n* [2019-06-24 Serverless Jenkins on Kubernetes - Jenkins X](https://sched.co/Nrmd) at [KubeCon CloudNativeCon 2019 (China)](https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/) by [RunZe Xia](https://github.com/runzexia) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=oHz6pBuvchE&t=3s)\n\n* [2019-06-11 Cloud Native CI/CD with Jenkins X and Tekton Pipelines](https://www.youtube.com/watch?v=f1wVRnao-BE) on [Jenkins X YouTube](https://www.youtube.com/channel/UCN2kblPjXKMcjjVYmwvquvg/) by [Christie Wilson](https://twitter.com/bobcatwilson) and [James Rawlings](https://twitter.com/jdrawlings) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=f1wVRnao-BE)\n\n* [2019-05-27: Running Serverless Continuous Delivery](http://www.jbcnconf.com/2019/infoTalk.html?id=5cd1f98438da161cb0381424) at [JBCNConf](http://www.jbcnconf.com/2019/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=PEmsqzbiNFc)\n\n* [2019-04-24 Jenkins X: Continous Delivery for Kubernetes](https://voxxeddays.com/minsk/) at [Voxxed Days Minsk](https://voxxeddays.com/minsk/) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=wb2PK5uf5uI&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&index=4)\n\n* [2019-03-26 Ten Commandments Of GitOps Applied To Continuous Delivery](https://www.meetup.com/Barcelona-Jenkins-Area-Meetup/events/259869827/) at [Barcelona Jenkins Area Meetup](https://www.meetup.com/Barcelona-Jenkins-Area-Meetup/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=PtC6YvoL_W8&t=2s)\n\n* [2019-03-06 Cloud Native CI/CD for Kubernetes with JenkinsX](https://www.meetup.com/Dubai-Jenkins-Area-Meetup/events/258523035/) at [Jenkins Area Meetup(JAM) Dubai](https://www.meetup.com/Dubai-Jenkins-Area-Meetup/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=PtC6YvoL_W8) \n\n* [2019-03-05 Cloud Native CI/CD with Jenkins X and Tekton Pipelines](https://qconlondon.com/london2019/presentation/cloud-native-cicd-jenkins-x-and-knative-pipelines) at [QConLondon](https://qconlondon.com/) by [James Rawlings](https://twitter.com/jdrawlings) and [Christie Wilson](https://twitter.com/bobcatwilson) [slides](https://qconlondon.com/system/files/presentation-slides/cloud_native_ci_cd_with_jenkins_x_and_knative_pipelines.pdf) [\ud83c\udfa5 InfoQ](https://www.infoq.com/presentations/cloud-native-ci-cd-jenkins-knative/?utm_source=presentations&utm_medium=london&utm_campaign=qcon)\n\n* [2019-02-28 Jenkins X: Continuous Delivery for Kubernetes](https://www.youtube.com/watch?v=hrridH35y64&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&t=0s&index=2) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=hrridH35y64&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&t=0s&index=2)\n\n* [2019-01-14 Jenkins X - Continuously Driving the Kloud (German)](https://www.meetup.com/de-DE/DevOps-Wuerzburg-Mainfranken/events/255614733/) at [DevOps Meetup W\u00fcrzburg (Germany)](https://www.meetup.com/DevOps-Wuerzburg-Mainfranken/) by [Gerd Aschemann](https://twitter.com/GerdAschemann) - ([\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=NDIut5uYVS0), [Slides](http://aschemann.net/gerd/publications/jx-talk-devops-wue-2019/))\n\n* [2018-12-12 KubeCon NA Seattle: Jenkins X: Continuous Delivery for Kubernetes](http://sched.co/GrT2) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=IDEa8seAzVc&index=1&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO)\n\n* [2018-12-05 Jenkins x Kubernetes\u304c\u7c21\u5358\u3060\u3068\u601d\u3063\u305f\u3089\u5927\u5909\u3060\u3063\u305f\u8a71 (Japanese)](https://www.slideshare.net/YamamotoMasaki/jenkins-x-kubernetes) at [JapanContainerDays v18.12](https://containerdays.jp/) by [Masaki Yamamoto](https://blog.nnasaki.com/) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=3-1MKJE6_mI)\n\n* [2018-11-23 CommitConf Madrid: Jenkins X: Continuous Delivery for Kubernetes (Spanish)](https://www.koliseo.com/events/commit-2018/r4p/5630471824211968/agenda#/5116072650866688/5742659054338048) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://youtu.be/_FDl0wAxDME)\n\n* [2018-11-15 DevOpsPro Moscow: Using Kubernetes for Continuous Integration and Continuous Delivery](https://www.devopspro.ru/carlos-sanchez/) by [Carlos Sanchez](https://csanchez.org) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=p7fuJONFyeY&list=PLqYhGsQ9iSEq6jC6bxW_q7ezr16TpLRwR&index=25&t=0s)\n\n* [2018-11-14 Jenkins X - Continuously Driving the Kloud (German)](https://www.continuouslifecycle.de/veranstaltung-7488-jenkins-x-%E2%80%93-continuously-driving-the-kloud.html?id=7488) at [Continuous Lifecycle (Mannheim, Germany)](https://www.continuouslifecycle.de/) by [Gerd Aschemann](https://twitter.com/GerdAschemann) ([Slides](http://aschemann.net/gerd/publications/jx-talk-conli-2018/))\n\n* [2018-10-13 Jenkins X - Continuously Driving the Kloud (German)](https://openspacer.org/60-devops-community/222-devops-camp-compact-2018/session/926-jenkins-x/) at [Devops Camp Compact 2018 N\u00fcrnberg (Germany)](https://devops-camp.de/) by [Gerd Aschemann](https://twitter.com/GerdAschemann) - [\ud83c\udfa5 YouTube Stream of Part 1](https://youtu.be/hqg7mbjBDTo?t=13352&end=16578) ([Slides](http://aschemann.net/gerd/publications/jx-talk-docc-2018/))\n\n* [2018-09-29 Software Crafters, Barcelona, Spain: Continuous Deployment With Jenkins X And Kubernetes](https://scbcn.github.io) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://youtu.be/zoT8FyqITLI)\n\n* [2018-10-08 JDD Poland: End to End automation and Continuous Delivery of Microservices for Kubernetes](http://bit.ly/jdd-conference-jx) by [Paolo Carta](https://twitter.com/cl4mer) with [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=Twg6Ld3niW0)\n\n* [2018-09-12 JavaZone: Using Kubernetes for Continuous Integration and Continuous Delivery](https://2018.javazone.no/program/7f3694e6-1936-4d14-9ac1-2b1f7585da41) \ud83c\udfa5 by [Carlos Sanchez](https://csanchez.org)\n\n* [2018-06-30 CI/CD for Spring Boot Applications with Jenkins X](http://perujug.org/perujavaday2018/) at JavaDay Per\u00fa by [Edd\u00fa Mel\u00e9ndez](https://twitter.com/eddumelendez) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=zCdCx5tCvtc)\n\n* [2018-06-11 Jenkins X: Continuous Delivery for Kubernetes](http://www.jbcnconf.com/2018/infoTalk.html?id=37)\ud83c\udfa5 at [JBCNConf 2018](http://www.jbcnconf.com/2018/) by [James Strachan](https://twitter.com/jstrachan)\n\n* [2018-06-05 Continuous Integration and Delivery with Kubernetes](https://www.youtube.com/watch?v=bIdMveCe75c&feature=youtu.be)\ud83c\udfa5 by [CNCF](https://www.cncf.io/) by [James Strachan](https://twitter.com/jstrachan) [slides](https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit?usp=sharing)\n\n* [2018-06-05 Jenkins X: Continuous Delivery for Kubernetes](https://www.youtube.com/watch?time_continue=1&v=53AtxQGXnMk)\ud83c\udfa5 on [@virtualJUG](https://twitter.com/virtualJUG) with [slides](https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit?usp=sharing) by [James Strachan](https://twitter.com/jstrachan)\n\n* [Devoxx UK: Jenkins X: Continuous Delivery for Kubernetes](https://cfp.devoxx.co.uk/2018/talk/XWT-9637/Jenkins_X:_Continuous_Delivery_for_Kubernetes) by [James Strachan](https://twitter.com/jstrachan) [\ud83c\udfa5 YouTube](https://www.youtube.com/watch?v=BF3MhFjvBTU)\n\n* [2018-05-31 Dev Days, Riga: Continuous Deployment With Jenkins X And Kubernetes](https://rigadevdays.lv/) by [Viktor Farcic](https://twitter.com/vfarcic) [\ud83c\udfa5 YouTube](https://youtu.be/iughcmtWz8s)\n\n* [2018-05-04 Jenkins X:Easy CI/CD for Kubernetes](https://www.youtube.com/watch?v=uHe7R_iZSLU)\ud83c\udfa5 at [KubeCon + CloudNativeCon Europe 2018](https://events19.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/) by [James Strachan](https://twitter.com/jstrachan)\n\n* [2018-04-19 Devoxx France: Using Kubernetes for Continuous Integration and Continuous Delivery](https://www.youtube.com/watch?v=jls74bflA3s&t=0s&list=PLHsuXkXI4xdjGlGkCBdxIAmkzfWXqsUrO&index=2)\ud83c\udfa5 by [Carlos Sanchez](https://csanchez.org)\n\n* [2018-04-12 CI/CD with Jenkins X on Kubernetes](https://skillsmatter.com/skillscasts/11833-kubernetes-april)\ud83c\udfa5 at [Kubernetes Meetup, London](https://skillsmatter.com/meetups/10867-kubernetes-april)  by [Rob Davies](https://twitter.com/rajdavies) and [JamesRawlings](https://twitter.com/jdrawlings)\n\n\nAlso check out the [Jenkins X Blog](/blog/news/) and [Articles](/docs/resources/demos-talks-posts/articles/)\n\n",
            "content/en/docs/resources/faq/_index.md": "---\ntitle: FAQ\nlinktitle: FAQ\ndescription: Frequently asked questions about Jenkins X\naliases:\n  - /faq/setup/\ntype: docs\nweight: 140\nmenu:\n  docs:\n    title: \"FAQs\"\n\n---\n\n",
            "content/en/docs/resources/faq/config.md": "---\ntitle: Configuration questions\nlinktitle: Configuration questions\ndescription: Questions about configuring Jenkins X\nweight: 30\n---\n\n## How do I add a user to my Jenkins X installation?\n\nJenkins X assumes each user has access to the same development kubernetes cluster that Jenkins X is running on.\n\nIf your user does not have access to the kubernetes cluster we need to setup their `~/.kube/config` file so that they can access it.\n\nIf you are using Google's GKE then you can browse the [GKE Console](https://console.cloud.google.com) to view all the clusters and click on the `Connect` button next to your development cluster and then that lets you copy/paste the command to connect to the cluster.\n\nFor other clusters we are planning on writing some [CLI commands to export and import the kube config](https://github.com/jenkins-x/jx/issues/1406).\n\n### Once the user has access to the kubernetes cluster\n\nOnce your user has access to the kubernetes cluster:\n\n* [install the jx binary](/docs/getting-started/setup/install/)\n\nIf Jenkins X was installed in the namespace `jx` then the following should [switch your context](/docs/resources/guides/using-jx/developing/kube-context/) to the `jx` namespace:\n\n    jx ns jx\n\nTo test you should be able to type:\n\n    jx get env\n    jx open\n\nTo view the environments and any development tools like the Jenkins or Nexus consoles.\n\n## How does access control and security work?\n\nSee the [access control documentation](/docs/resources/guides/managing-jx/common-tasks/access-control/)\n\n## How do I upgrade the jx binary used inside the builds when using serverless jenkins?\n\nWe use specific `BuildTemplates` for different programming languages. These `BuildTemplates` describe the steps that will be executed as part of the job, which in case of the Jenkins X BuildTemplates, they all execute the `JenkinsfileRunner` to execute the project's Jenkinsfile.\n\n```sh\n$ kubectl get buildtemplates\nNAME                        AGE\nenvironment-apply           9d\nenvironment-build           9d\njenkins-base                9d\njenkins-csharp              9d\njenkins-cwp                 9d\njenkins-elixir              9d\njenkins-filerunner          9d\njenkins-go                  9d\njenkins-go-nodocker         9d\njenkins-go-script-bdd       1d\njenkins-go-script-ci        1d\njenkins-go-script-release   1d\njenkins-gradle              9d\njenkins-javascript          9d\njenkins-jenkins             9d\njenkins-maven               9d\njenkins-python              9d\njenkins-rust                9d\njenkins-scala               9d\njenkins-test                9d\nknative-chart-ci            9d\nknative-chart-release       9d\nknative-deploy              9d\nknative-maven-ci            9d\nknative-maven-release       9d\n```\n\nThe docker image that has the `Jenkinsfile` runner has also other tools installed, like the `jx` binary. If you need to update jx to a newer version, you need to modify [the base Dockerfile used for the Jenkinsfile runner step of the BuildTemplate](https://github.com/jenkins-x/jenkins-x-serverless/blob/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base#L120-L123), so that it uses the jx version that you want. Althought [this is normally done automatically](https://github.com/jenkins-x/jenkins-x-serverless/commits/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base).\n\nOnce this is done, you need to change the BuildTemplate in your cluster so that it starts using the new version of the docker image. For example, you can see the current version of this image for the Go BuildTemplate in your cluster\n\n```sh\n$ kubectl describe buildtemplate jenkins-go | grep Image\nImage:       jenkinsxio/jenkins-go:256.0.44\n```\n\nIf you want to use a different version that uses a newer jx version you could manually change all the BuildTemplates but instead let's jx take care of it\n\n```sh\njx upgrade addon jx-build-templates\n```\n\nCheck that the change has been done\n\n```sh\n$ kubectl describe buildtemplate jenkins-go | grep Image\nImage:       jenkinsxio/jenkins-go:256.0.50\n```\n\n## How does `--prow` differ from `--gitops`\n\n* `--prow` uses [serverless jenkins](/news/serverless-jenkins/) and uses [prow](https://github.com/kubernetes/test-infra/tree/master/prow) to implement ChatOps on Pull Requests.\n*  `--gitops` is still work in progress but will use GitOps to manage the Jenkins X installation (the dev environment) so that the platform installation is all stored in a git repo and upgrading / adding Apps / changing config is all changed via Pull Requests like changes to promotion of applications to the Staging or Production environments\n\n## How do I reuse my existing Ingress controller?\n\nBy default when you [install Jenkins X into an existing kubernetes cluster](/docs/getting-started/install-on-cluster/) it prompts you if you want to install an Ingress controller. Jenkins X needs an Ingress controller of some kind so that we can setup `Ingress` resources for each `Service` so we can access web applications via URLs outside of the kubneretes cluster (e.g. inside web browsers).\n\nThe [jx install](/commands/deprecation/) command takes a number of CLI arguments starting with `--ingress` where you can point to the namespace, deployment name and service name of the ingress controller you wish to use for the installation.\n\nWe do recommend you use the default ingress controller if you can - as we know it works really well and only uses a single LoadBalancer IP for the whole cluster (your cloud provider often charges per IP address). However if you want to point at a different ingress controller just specify those arguments on install:\n\n```sh\njx install \\\n  --ingress-service=$(yoursvcname) \\\n  --ingress-deployment=$(yourdeployname) \\\n  --ingress-namespace=kube-system\n```\n\n## How do I enable HTTPS URLs?\n\nIn general use the [jx upgrade ingress](/commands/deprecation/) command.\n\nFor more detail see these blogs posts:\n\n* [Upgrading Ingress Rules And Adding TLS Certificates With Jenkins X](https://technologyconversations.com/2019/05/31/upgrading-ingress-rules-and-adding-tls-certificates-with-jenkins-x/) by [Viktor Farcic](https://technologyconversations.com)\n* [Jenkins X\u200a\u2014\u200aTLS enabled Previews](https://itnext.io/jenkins-x-tls-enabled-previews-d04fa68c7ce9?source=friends_link&sk=c13828b223f56ed662fd7ec0872c3d1e) by [Steve Boardwell](https://medium.com/@sboardwell)\n* [Jenkins X\u200a\u2014\u200aSecuring the Cluster](https://itnext.io/jenkins-x-securing-the-cluster-e1b9fcd8dd05?source=friends_link&sk=e1e46e780908b2e3c8415c3191e82c56) by [Steve Boardwell](https://medium.com/@sboardwell)\n\n\n## How do I change the URLs in an environment?\n\nWe use [exposecontroller](https://github.com/jenkins-x/exposecontroller) to automate the setup of `Ingress` resources for exposed Services, enabling TLS and also injecting external URLs for services into code (e.g. so we can register webhooks).\n\nThe default `UrlTemplate` for each environment is of the form: `{{.Service}}.{{.Namespace}}.{{.Domain}}` where `Service` is the name of the service, `Namespace` is the kubernetes namespace and `Domain` is the configured DNS domain.\n\nIf you want to modify the URL schemes of your service in an environment then edit the file `env/values.yaml` in your Environments git repository. To find the URLs to each source repository use the [jx get environments](/commands/jx_get_environments/) command.\n\nThen modify the contents of `env/values.yaml` to include the `urlTemplate:` value as follows:\n\n```yaml\nexpose:\n  config:\n    urltemplate: \"{{.Service}}-{{.Namespace}}.{{.Domain}}\"\n```\n\nWe've left out the other values of `expose:` and `config:` for brevity - the important thing is to ensure you specify a custom `expose.config.urltemplate` value. The default is `{{.Service}}.{{.Namespace}}.{{.Domain}}` if none is specified.\n\nWhenever you modify the git repository for an environment the GitOps pipeline will run to update your Ingress resources to match your `UrlTemplate`.\n\n## Is there a UI available for Jenkins X?\n\nWe have a new OSS [UI](/docs/reference/components/ui/) for Jenkins X powered by the awesome extensible [Octant](https://octant.dev/)! You can watch James Strachan demo the UI [here](https://www.youtube.com/watch?v=Njl247hjRuU&feature=youtu.be). Find out more about the new Jenkins X UI and how extensible it is [here](https://github.com/jenkins-x/octant-jx).\n",
            "content/en/docs/resources/faq/general.md": "---\ntitle: General questions\nlinktitle: General questions\ndescription: General questions about the Jenkins X project\nweight: 10\n---\n\nWe have tried to collate common issues here with work arounds. If your issue isn't listed here please [let us know](https://github.com/jenkins-x/jx/issues/new).\n\n\n## Is Jenkins X Open Source?\n\nYes! All of Jenkins X source code and artifacts are open source; either Apache or MIT and will always remain so!\n\n## How does Jenkins X compare to Jenkins?\n\nJenkins X provides [automated CI + CD](/about/concepts/features/#automated-pipelines) for applications on kubernetes with [GitOps promotion through environments](/about/concepts/features/#promotion) and [preview environments on Pull Requests\n](/about/concepts/features/#preview-environments). (See the [features for more details](/about/concepts/features/)).\n\nJenkins is a general purpose CI/CD server that can be configured to do anything you like by adding plugins, changing configuration and writing your own pipelines.\n\nWith Jenkins X you just [install Jenkins X](/docs/getting-started/) which automatically sets up all of the various tools (helm, docker registry, nexus etc) and then [create](/docs/resources/guides/using-jx/common-tasks/create-spring/)/[import](/docs/resources/guides/using-jx/creating/import/) projects and you get fully automated CI/CD and previews. This lets your developers focus on building applications while you delegate to Jenkins X to manage your CI+CD.\n\nJenkins X supports different execution engines; so it can orchestrate a Jenkins server per team by reusing Jenkins in a docker container. Though when using [serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) we use [Tekton](https://tekton.dev/) rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.\n\n\n## Is Jenkins X a fork of Jenkins?\n\nNo! Jenkins X can orchestrate Jenkins by reusing it inside a container and configures it to be as kubernetes native as possible.\n\nThough when using [serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) we use [Tekton](https://tekton.dev/) rather than Jenkins as the underlying CI/CD engine to provide a modern highly available cloud native architecture.\n",
            "content/en/docs/resources/faq/issues.md": "---\ntitle: Common Problems\nlinktitle: Common Problems\ndescription: Questions on common issues setting up Jenkins X.\nweight: 100\naliases:\n  - /faq/issues/\n---\n\nWe have tried to collate common issues here with work arounds. If your issue isn't listed here please [let us know](https://github.com/jenkins-x/jx/issues/new).\n\n## Jenkins X does not startup\n\nIf your install fails to start there could be a few different reasons why the Jenkins X pods don't start.\n\nYour cluster could be out of resources. You can check the spare resources on your cluster via [jx status](/commands/jx_status/):\n\n```sh\njx status\n```\n\nWe also have a diagnostic command that looks for common problems [jx step verify install](/commands/jx_step_verify_install/):\n\n```sh\njx step verify install\n```\n\nA common issue for pods not starting is if your cluster does not have a [default storage class](https://kubernetes.io/docs/concepts/storage/storage-classes/) setup so that `Persistent Volume Claims` can be bound to `Persistent Volumes` as described in the [install instructions](/docs/getting-started/install-on-cluster/).\n\nYou can check your storage class and persistent volume setup via:\n\n```sh\nkubectl get pvc\n```\n\nIf things are working you should see something like:\n\n```sh\n$ kubectl get pvc\nNAME                        STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\njenkins                     Bound     pvc-680b39b5-94f1-11e8-b93d-42010a840238   30Gi       RWO            standard       12h\njenkins-x-chartmuseum       Bound     pvc-6808fb5e-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\njenkins-x-docker-registry   Bound     pvc-680a415c-94f1-11e8-b93d-42010a840238   100Gi      RWO            standard       12h\njenkins-x-mongodb           Bound     pvc-680d6fd9-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\njenkins-x-nexus             Bound     pvc-680fc692-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\n```\n\nIf you see `status` of `Pending` then this indicates that you have no [default storage class](https://kubernetes.io/docs/concepts/storage/storage-classes/) setup on your kubnernetes cluster or you have ran out of persistent volume space.\n\nPlease try create a [default storage class](https://kubernetes.io/docs/concepts/storage/storage-classes/) for your cluster or contact your operations team or cloud provider.\n\nIf the `Persistent Volume Claims` are all `Bound` and things still have not started then try\n\n```sh\nkubectl get pod\n```\n\nIf a pod cannot start try\n\n```sh\nkubectl describe pod some-pod-name\n```\n\nMaybe that gives you a clue. Is it RBAC related maybe?\n\nIf you are still stuck try [create an issue](https://github.com/jenkins-x/jx/issues/new)\n\n## http: server gave HTTP response to HTTPS client\n\nIf your pipeline fails with something like this:\n\n```sh\nThe push refers to a repository [100.71.203.90:5000/lgil3/jx-test-app]\ntime=\"2018-07-09T21:18:31Z\" level=fatal msg=\"build step: pushing [100.71.203.90:5000/lgil3/jx-test-app:0.0.2]: Get https://100.71.203.90:5000/v1/_ping: http: server gave HTTP response to HTTPS client\"\n```\n\nThen this means that you are using the internal docker registry inside Jenkins X for your images but your kubernetes cluster's docker daemons has not been configured for `insecure-registries` so that you can use `http` to talk to the docker registry service `jenkins-x-docker-registry` in your cluster.\n\nBy default docker wants all docker registries to be exposed over `https` and to use TLS and certificates. This should be done for all public docker registries. However when using Jenkins X with an internal local docker registry this is hard since its not available at a public DNS name and doesn't have HTTPS or certificates; so we default to requiring `insecure-registry` be configured on all the docker daemons for your kubernetes worker nodes.\n\nWe try to automate this setting when using `jx create cluster`  e.g. on AWS we default this value to the IP range `100.64.0.0/10` to match most kubernetes service IP addresses.\n\nOn [EKS](/commands/jx_create_cluster_eks/) we default to using ECR to avoid this issue. Similarly we will soon default to GCR and ACR on GKE and AKS respectively.\n\nSo a workaround is to use a real [external docker registry](/docs/resources/guides/managing-jx/common-tasks/docker-registry/) or enable `insecure-registry` on your docker daemons on your compute nodes on your Kubernetes cluster.\n\n\n## Helm fails with Error: UPGRADE FAILED: incompatible versions client[...] server[...]'\n\nGenerally speaking this happens when your laptop has a different version of helm to the version used in our build pack docker images and/or the version of tiller thats running in your server.\n\nThe simplest fix for this is to just [not use tiller at all](/blog/2018/10/03/helm-without-tiller/) - which actually helps avoid this problem ever happening and solves a raft of security issues too.\n\nHowever switching from using Tiller to No Tiller does require a re-install of Jenkins X (though you could try do that in separate set of namespaces then move projects across incrementally?).\n\nThe manual workaround is to install the [exact same version of helm as used on the server](https://github.com/helm/helm/releases)\n\nOr you can try switch tiller to match your client version:\n\n* run `helm init --upgrade`\n\nThough as soon as a pipeline runs it'll switch the tiller version again so you'll have to keep repeating the above.\n\n\n## error creating jenkins credential jenkins-x-chartmuseum 500 Server Error\n\nThis is a [pending issue](https://github.com/jenkins-x/jx/issues/1234) which we will hopefully fix soon.\n\nIt basically happens if you have an old API token in `~/.jx/jenkinsAuth.yaml` for your jenkins server URL. You can either:\n\n* remove it from that file by hand\n* run the following command [jx delete jenkins token](/commands/deprecation/):\n\n    jx delete jenkins token admin\n\n## errors with chartmuseum.build.cd.jenkins-x.io\n\nIf you see errors like:\n\n```sh\nerror:failed to add the repository 'jenkins-x' with URL 'https://chartmuseum.build.cd.jenkins-x.io'\n```\n\nor\n\n```sh\nLooks like \"https://chartmuseum.build.cd.jenkins-x.io\" is not a valid chart repository or cannot be reached\n```\n\nthen it looks like you have a reference to an old chart museum URL for Jenkins X charts.\n\nThe new URL is: http://chartmuseum.jenkins-x.io\n\nIt could be your helm install has an old repository URL installed. You should see...\n\n```sh\n$ helm repo list\nNAME     \tURL\nstable   \thttps://kubernetes-charts.storage.googleapis.com\njenkins-x\thttp://chartmuseum.jenkins-x.io\n```\n\nIf you see this...\n\n```sh\n$ helm repo list\nNAME     \tURL\njenkins-x\thttps://chartmuseum.build.cd.jenkins-x.io\n```\n\nthen please run...\n\n```sh\nhelm repo remove jenkins-x\nhelm repo add jenkins-x\thttp://chartmuseum.jenkins-x.io\n```\n\nand you should be good to go again.\n\nAnother possible cause is an old URL in your environment's git repository may have old references to the URL.\n\nSo open your `env/requirements.yaml` in your staging/production git repositories and modify them to use the URL http://chartmuseum.jenkins-x.io instead of **chartmuseum.build.cd.jenkins-x.io** like this [env/requirements file](https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml)\n\n## git errors: POST 401 Bad credentials\n\nThis indicates your git API token either was input incorrectly or has been regenerated and is now incorrect.\n\nTo recreate it with a new API token value try the following (changing the git server name to match your git provider):\n\n```sh\njx delete git token -n github <yourUserName>\njx create git token -n github <yourUserName>\n```\n\n## Invalid git token to scan a project\n\nIf you get an error in Jenkins when it tries to scan your repositories for branches something like:\n\n```sh\nhudson.AbortException: Invalid scan credentials *****/****** (API Token for acccessing https://github.com git service inside pipelines) to connect to https://api.github.com, skipping\n```\n\nThen your git API token was probably wrong or has expired.\n\nTo recreate it with a new API token value try the following (changing the git server name to match your git provider):\n\n```sh\njx delete git token -n GitHub admin\njx create git token -n GitHub admin\n```\n\n## What are the credentials to access core services?\n\nAuthenticated core services of Jenkins X include Jenkins, Nexus, ChartMuseum.  The default username is `admin`and the password by default is generated and printed out in the terminal after `jx create cluster` or `jx install`.\n\n### Set Admin Username and Password values for Core Services\nYou can also set the admin username via the `--default-admin-username=username` flag.\n\n{{< alert >}}\nPerhaps you are using the  Active Directory security realm in Jenkins.  It is in this scenario that setting the Admin Username via the `--default-admin-username` based on your existing service accounts makes sense.\n\nYou may also pass this value via the `myvalues.yaml`.\n{{< /alert >}}\n\nIf you would like to set the default password yourself then you can set the flag `--default-admin-password=foo` to the two comamnds above.\n\nIf you don't have the terminal console output anymore you can look in the local file `~/.jx/jenkinsAuth.yaml` and find the password that matches your Jenkins server URL for the desired cluster.\n\n## Persistent Volume Claims do not bind\n\nIf you notice that the persistent volume claims created when installing Jenkins X don't bind with\n\n    kubectl get pvc\n\nThe you should check that you have a cluster default storage class for dynamic persistent volume provisioning.  See [here](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/) for more details.\n\n\n## I cannot connect to nodes on AWS\n\nIf you don't see any valid nodes returned by `kubectl get node` or you get errors running `jx status` something like:\n\n```sh\nUnable to connect to the server: dial tcp: lookup abc.def.regino.eks.amazonaws.com on 10.0.0.2:53: no such host\n```\n\nit could be your kube config is stale. Try\n\n```sh\naws eks --region <CLUSTER_REGION> update-kubeconfig --name <CLUSTER_NAME>\n```\n\nThat should regenerate your local `~/kube/config` file and so `kubectl get node` or `jx status` should find your nodes\n\n## How can I diagnose exposecontroller issues?\n\nWhen you promote a new version of your application to an environment, such as the Staging Environment a Pull Request is raised on the environment repository.\n\nWhen the master pipeline runs on an environment a Kubernetes `Job` is created for [exposecontroller](https://github.com/jenkins-x/exposecontroller) which runs a pod until it terminates.\n\nIt can be tricky finding the log for temporary jobs since the pod is removed.\n\nOne way to diagnose logs in your, say, Staging environment is to [download and install kail](https://github.com/boz/kail) and add it to your `PATH`.\n\nThen run this command:\n\n```sh\nkail -l job-name=expose -n jx-staging\n```\n\nIf you then promote to the Staging environment or retrigger the pipeline on the `master` branch of your Staging git repository (e.g. via [jx start pipeline](/commands/jx_start_pipeline/)) then you should see the output of the [exposecontroller](https://github.com/jenkins-x/exposecontroller) pod.\n\n\n## Why is promotion really slow?\n\nIf you find you get lots of warnings in your pipelines like this...\n\n```sh\n\"Failed to query the Pull Request last commit status for https://github.com/myorg/environment-mycluster-staging/pull/1 ref xyz Could not find a status for repository myorg/environment-mycluster-staging with ref xyz\n```\n\nand promotion takes 30 minutes from a release pipeline on an application starting to the change hitting `Staging` then its mostly probably due to Webhooks.\n\nWhen we [import projects](/docs/resources/guides/using-jx/creating/import/) or [create quickstarts](/docs/getting-started/first-project/create-quickstart/) we automate the setup of CI/CD pipelines for the git repository. What this does is setup Webhooks on the git repository to trigger Jenkins X to trigger pipelines (either using Prow for [serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) or the static jenkins server if not).\n\nHowever sometimes your git provider (e.g. [GitHub](https://github.com/) may not be able to do connect to your Jenkins X installation (e.g. due to networking / firewall issues).\n\nThe easiest way to diagnose this is opening the git repository (e.g. for your environment repository).\n\n```sh\njx get env\n```\n\nThen:\n\n* click on the generated URL for, say, your `Staging`  git repository\n* click the `Settings` icon\n* select the `Webhooks` tab on the left\n* select your Jenkins X webhook URL\n* view the last webhook - did it succeed? Try re-trigger it? That should highlight any network issues etc\n\nIf you cannot use public webhooks you could look at something like [ultrahook](http://www.ultrahook.com/)\n\n## How do I see the log of exposecontroller?\n\nUsually we run the [exposecontroller]() as a post install `Job` when we perform promotion to `Staging` or `Production` to expose services over Ingress and possibly inject external URLs into applications configuration.\n\n\nSo the `Job` will trigger a short lived `Pod` to run in the namespace of your environment, then the pod will be deleted.\n\nIf you want to view the logs of the `exposecontroller` you will need to watch for the logs using a selector then trigger the promotion pipeline to capture it.\n\nOne way to do that is via the [kail](https://github.com/boz/kail) CLI:\n\n\n```sh\nkail -l  job-name=expose\n```\n\nThis will watch for exposecontroller logs and then dump them to the console. Now trigger a promotion pipeline and you should see the output within a minute or so.\n\n## Cannot create TLS certificates during Ingress setup\n\n> [cert-manager](https://docs.cert-manager.io/en/latest/index.html) cert-manager is a seperate project from _Jenkins X_.\n\nNewly created GKE clusters or existing cluster running _kubernetes_ **v1.12** or older will encounter the following error when configuring Ingress with site-wide TLS:\n\n```sh\nWaiting for TLS certificates to be issued...\nTimeout reached while waiting for TLS certificates to be ready\n```\n\nThis issue is caused by the _cert-manager_ pod not having the `disable-validation` label set, which is a known cert-manager issue which is [documented on their website](https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html). The following steps, taken from the [cert-manager/troubleshooting-installation](https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html#troubleshooting-installation) webpage, should resolve the issue:\n\nCheck if the _disable-validation_ label exists on the _cert-manager_ pod.\n```sh\nkubectl describe namespace cert-manager\n```\n\nIf you cannot see the `certmanager.k8s.io/disable-validation=true` label on your namespace, you should add it with:\n```sh\nkubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true\n```\n\nConfirm the label has been added to the _cert-manager_ pod.\n```sh\nkubectl describe namespace cert-manager\n\nName:         cert-manager\nLabels:       certmanager.k8s.io/disable-validation=true\nAnnotations:  <none>\nStatus:       Active\n...\n```\n\nNow rerun _jx_ Ingress setup:\n```sh\njx upgrade ingress\n```\n\nWhile the ingress command is running, you can tail the _cert-manager_ logs in another terminal and see what is happening. You will need to find the name of your _cert-manager_ pod using:\n```sh\nkubectl get pods --namespace cert-manager\n```\n\nThen tail the logs of the _cert-manager_ pod.\n```sh\nkubectl logs YOUR_CERT_MNG_POD --namespace cert-manager -f\n```\n\nYour TLS certificates should now be set up and working, otherwise checkout the [official _cert-manager_ troubleshooting](https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html) instructions.\n\n\n## Recreating a cluster with the same name\n\nIf you want to destroy a cluster that was created with boot and recreate it with the exact same name, there is some clean that needs to be done first.\n\nMake sure you uninstall jx:\n```sh\njx uninstall\n```\n\nDelete the cluster either from the web console or terminal by using the Kubernetes provider CLI command:\n```sh\ngcloud container clusters delete <cluster-name> --zone <cluster-zone>\n```\n\nAfter you have successfully done this, remove the `~/.jx` and `~/.kube` directories:\n```sh\nrm -rf ~/.jx ~/.kube\n```\n\nDelete any repositories created by `jx` on your Github organisations account.\n\nDelete the local git `jenkins-x-boot-config` repository.\n\nThat should leave your Kubernetes provider and your local environment in a clean state.\n\n## No External IP assigned to the ingress in EKS\n\nIf you have never created an Elastic Load Balancer (ELB) in AWS, then the `jx boot` command will fail to assign an ip to the ingress controller.\n\nIn this case, the output from `jx boot` might look like this:\n```sh\nerror: failed to discover the Ingress domain: getting a domain for ingress service kube-system/jxing-nginx-ingress-controller: Timed out after 5m0s, last error: %!s(<nil>)\n```\n\nTo verify this is the case, run:\n```sh\nkubectl get svc --all-namespaces\n```\n\nIf you see `pending` for external IP for `jxing-nginx-ingress-controller`\n```sh\nNAMESPACE     NAME                                  TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE\n.....\nkube-system   jxing-nginx-ingress-controller        LoadBalancer   X.X.X.X         <pending>     80:32632/TCP,443:32036/TCP   4h45m\n...\n```\nthen create an ELB manually outside of EKS, and tear it down.\n\nAfter that, run `jx boot` again.\n\n## Other issues\n\nPlease [let us know](https://github.com/jenkins-x/jx/issues/new) and see if we can help? Good luck!\n",
            "content/en/docs/resources/faq/setup.md": "---\ntitle: Install and setup questions\nlinktitle: Install and setup questions\ndescription: Questions on installing and setting up Jenkins X\nweight: 20\nautolink: false\naliases:\n  - /faq/setup/\n  - /resources/faq/boot/\n---\n\nFor more detail check out how to use [jx boot](/docs/install-setup/boot/).\n\n## How do I upgrade boot?\n\nIf you are using [jx boot](/docs/install-setup/boot/) you can upgrade via `jx upgrade boot`.\nRefer to [Upgrading Jenkins X](/docs/install-setup/upgrade-jx/#upgrading-jenkins-x) for more information.\n\nIf anything ever goes wrong (e.g. your cluster, namespace or tekton gets deleted), you can always re-run [jx boot](/docs/install-setup/boot/) on your laptop to restore your cluster.\n\n## How do I add more resources?\n\nAdd more resources (e.g. `Ingress, ConfigMap, Secret`) to your development environment by adding YAML files to the boot `env/templates` directory.\n\n## How do I add new Environments?\n\nAdd a new `SourceRepository` and `Environment` resource to the `env/templates` folder for each new environment you want tto create. We\u2019ve only added `dev, staging, production` currently.\n\nFrom your running cluster you can always grab the staging `SourceRepository` and `Environment` resource via the following (where XXX is the name of the staging repository returned via `kubectl get sr`):\n\n```sh\nkubectl get env staging -oyaml > env/templates/myenv.yaml\nkubectl get sr XXX -oyaml > env/templates/myenv-sr.yaml\n```\n\nthen modify the YAML to suit, changing the names of the resources to avoid clashing with your staging repository.\n\n## How to to manage SourceRepository resources?\n\nSee how to update your [boot configuration with the latest SourceRepository resources](/docs/install-setup/boot/how-it-works/#source-repositories)\n\n## How do I map SourceRepository to a custom Scheduler\n\nYou need to map your `SourceRepository` to a `Scheduler` via either specifying `--scheduler` when you `jx create quickstart / jx import` your repository or modifying the `SourceRepository` CRD's `spec.scheduler.name` in your development git repository or specifying a different default scheduler on the `dev environment.spec.teamSettings.defaultScheduler.name` then the next time the prow configuration is generated (on `jx create quickstart / jx import / jx boot` it'll update the prow config to use your scheduler\n\nSee also [How do I add multiple parallel pipelines to a project?](/docs/resources/faq/using/chatops/#how-do-i-add-multiple-parallel-pipelines-to-a-project)\n\n## How do I add more charts to Jenkins X?\n\nIt depends on which namespace you want the charts to be installed.\n\nIf its in the development environment (the `jx` namespace by default) then `env/requirements.yaml` is where to add the chart and for a chart `foo` you can add `env/foo/values.yaml` to configure it. (or `env/foo/values.tmpl.yaml` if you want to use some [templating](/docs/install-setup/boot/how-it-works/#improvements-to-valuesyaml) of the `values.yaml`)\n\nThough if you want our chart to be in another namespace then we use the convention of adding a folder in the `system` directory in the boot configuration (e.g. like we do for ingress, cert manager, velero, service mesh etc). So make a new folder in `system` and add the `jx step helm apply` step in the pipeline in `jenkins-x.yml` like we do for `cert-manager`, `nginx`, `velero` etc.\n\n## How do I disable the ingress controller?\n\nIf you already have your own ingress controller and do not want `jx boot` to install another one you can just delete the `install-nginx-controller` step in your dev environment git repository. e.g. [remove this step](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml#L85-L99) from the `jenkins-x.yml` in your dev environment git repository\n\n## What do I do if `jx boot` hangs on `step-install-jenkins-x`?\n\nYou may have a problem with Terminating a PVC that is protected.\n\nDescribe your pvc.  In the case I saw, it was the jenkins pvc.\n```sh\nkubectl -n jx describe pvc jenkins\n```\nIf it's stuck in Terminating and you see that the Finalizer has protection:\n```sh\nFinalizers:    [kubernetes.io/pvc-protection]\n```\nThen, you can remove the protection by issuing the following command and your install should continue.\n```sh\nkubectl -n jx patch pvc jenkins -p '{\"metadata\":{\"finalizers\": []}}' --type=merge\n```\n\n## How do I debug issues with terraform and JenkinsX?\nSet the `TF_LOG` environment variable to `TRACE`, and then run your terraform commands such as `terraform apply` or `terraform plan`.\n```bash\nTF_LOG=TRACE terraform apply\n```\nUse the global `--verbose` flag to add more verbosity to the JenkinsX logs:\n```bash\njx boot --verbose\n```\n\n## How to get a clean terraform destroy\nThe following steps need to be performed before a terraform destroy can be executed successfully for the EKS cluster.\n* Empty the s3 buckets created by jenkinsX (This is required if `force_destroy` was set to false, when provisioning \nthe EKS cluster)\n* Delete the Network load balancer (The load balancer is created outside terraform, so you need to delete it manually \nin the EC2 console before executing a terraform destroy.\nYou can also import it to terraform, and then execute destroy)\n\nIf you do not delete the load balancer, you will have issues with detaching the internet gateway (IGW) and deleting it.\nThis can lead to a race condition where terraform tries to destroy the auto scaling group and the IGW, and eventually\ntimes out.\n\n## Does Jenkins X install a load balancer?\n\nJenkins X installs `nginx` which has a `LoadBalancer` kubernetes `Service`. But the underlying kubernetes platform needs to implement the load balancing network and infrastructure. This comes OOTB on all public clouds. \n \nOn-premises you need to install something like [MetalLB](https://metallb.universe.tf/)\n",
            "content/en/docs/resources/faq/using/_index.md": "---\ntitle: \"Using Jenkins X\"\nlinkTitle: \"Using Jenkins X\"\ndescription: Questions on how to develop cloud native application with Jenkins X\nweight: 40\naliases:\n  - /resources/guides/using-jx/faq/\n---\n\n## How do I enable bash completion?\n\nUsing bash completion really helps using the `jx` command line letting you `TAB`-complete commands and command line arguments.\n\nTo see how to enable bash completion check out the [jx completion](/commands/jx_completion/)\n\n## How do I inject environment specific configuration?\n\nEach environment in Jenkins X is defined in a git repository; we use GitOps to manage all changes in each environment such as:\n\n* adding/removing apps\n* changing the version of an app (up or down)\n* configuring any app with environment specific values\n\nThe first two items are defined in the `env/requirements.yaml`  file in the git repository for your environment. the latter is defined in the `env/values.yaml` file.\n\nHelm charts use a [values.yaml file](https://github.com/helm/helm/blob/master/docs/chart_template_guide/values_files.md) so that you can override any configuration inside your Chart to modify settings such as labels or annotations on any resource or configurations of resources (e.g. `replicaCount`) or to pass in things like environment variables into a `Deployment`.\n\nSo if you wish to change, say, the `replicaCount` of an app `foo` in `Staging` then find the git repository for the `Staging` environment via [jx get env](/commands/jx_get_environments/) to find the git URL.\n\nNavigate to the `env/values.yaml` file and add/edit a bit of YAML like this:\n\n```yaml\nfoo:\n  replicaCount: 5\n```\n\nSubmit that change as a Pull Request so it can go through the CI tests and any peer review/approval required; then when its merged it master it will modify the `replicaCount` of the `foo` application (assuming there's a chart called `foo` in the `env/requirements.yaml` file)\n\nYou can use vanilla helm to do things like injecting the current namespace if you need that.\n\nTo see a more complex example of how you can use a `values.yaml` file to inject into charts, see how we use these files to [configure Jenkins X itself](/docs/resources/guides/managing-jx/common-tasks/config/)\n\n\n## How do I inject preview specific configuration?\n\nSee the [above question on how to inject environment specific configuration into environments](#how-do-i-inject-environment-specific-configuration)\n\nPreview Environments are similar to other environments like `Staging` and `Production` only instead of storing the environments in a separate git repository the preview environment is defined inside each applications `charts/preview` folder.\n\nSo to inject any custom configuration into your Preview environment you can modify the `charts/preview/values.yaml` file in your applications git repository to override any helm template parameters defined in your chart (in the `charts/myapp` folder).\n\nYou may need to modify your helm charts to add extra helm configuration if the configuration you wish to configure is not easily changed via the `values.yaml` file.\n\n## How do I manage secrets in each environment?\n\n[Hashicorp Vault](https://www.vaultproject.io/) is the preferred way in Jenkins X to manage secrets. For example, the GitHub personal access token generated for the pipeline bot is stored in Vault. [Read more about using Vault to manage your secrets with Jenkins X](https://jenkins-x.io/docs/reference/components/vault/).\n\nIn addition, the Jenkins X team are big fans of [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) and are developing [jx-secret](https://github.com/jenkins-x/jx-secret), a small command line tool working with Kubernetes External Secrets.\n\n\n## When do Preview Environments get removed?\n\nWe have a background garbage collection job which removes Preview Environments after the Pull Request is closed/merged. You can run it any time you like via the [jx gc previews](/commands/jx_gc_previews/) command\n\n```sh\njx gc previews\n```\n\nYou can also view the current previews via  [jx get previews](/commands/jx_get_previews/):\n\n```sh\njx get previews\n```\n\n\nand delete a preview by choosing one to delete via [jx delete preview](/commands/jx_delete_preview/):\n\n```sh\njx delete preview\n```\n\n## How do I add other services into a Preview?\n\nWhen you create a Pull Request by default Jenkins X creates a new [Preview Environment](/about/concepts/features/#preview-environments). Since this is a new dynamic namespace you may want to configure additional microservices in the namespace so you can properly test your preview build.\n\nTo find out more see [how to add dependent charts, services or configuration to your preview environment](/docs/build-test-preview/preview/#adding-more-resources)\n\n\n## Can I use my existing release pipeline?\n\nWith Jenkins X you are free to create your own pipeline to do the release if you wish; though doing so means you miss out on our [extension model](/docs/contributing/addons/) which lets you easily enable various extension Apps like Governance, Compliance, code quality, code coverage, security scanning, vulnerability testing and various other extensions which are being added all the time through our community.\n\nWe've specifically built this extension model to minimise the work your teams have in having to edit + maintain pipelines across many separate microservices; the idea is we're trying to automate both the pipelines and the extensions to the pipelines so teams can focus on their actual code and less on the CI/CD plumbing which is pretty much all undifferentiated heavy lifting these days.\n\n## How can I handle custom branches with Tekton?\n\nWe don't use `branch patterns` with Tekton; they are a Jenkins specific configuration.\n\nFor Tekton we use the [prow](/docs/reference/components/prow/) / [lighthouse](/docs/reference/components/lighthouse/) configuration to specify which branches trigger which pipeline contexts.\n\nIf you are using [boot](/docs/install-setup/boot/) to install Jenkins X then you can create your own custom `Scheduler` custom resource in `env/templates/myscheduler.yaml` based on the [default one that is included](https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml).\n\ne.g. here is how we specify the [branches used to create releases](https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml#L48).\n\nYou can also create additional pipeline contexts; e.g. here's how we add multiple parallel testing pipelines on the [version stream](/about/concepts/version-stream/) via a [custom Scheduler](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/templates/jx-versions-scheduler.yaml#L21) so that we can have many integration tests run in parallel on a single PR. Then each named context listed has an associated `jenkins-x-$context.yml` file in the source repository to define the pipeline to run [like this example which defines the `boot-lh` context](https://github.com/jenkins-x/jenkins-x-versions/blob/master/jenkins-x-boot-lh.yml)\n\nYou can then associate your `SourceRepository` resources with your custom scheduler by:\n\n* specifying the scheduler name on the `spec.scheduler.name` property of your `SourceRepository` via `kubectl edit sr my-repo-name`)\n* specifying the scheduler name when you import a project via `jx import --scheduler myname`\n* specifying the default scheduler name in your `dev` `Environment` at `spec.teamSettings.defaultScheduler.name` before you import projects\n\nIf you are not using [boot](/docs/install-setup/boot/) then you can use `kubectl edit cm config` and modify the prow configuration by hand - though we highly recommend using [boot](/docs/install-setup/boot/) and GitOps instead; the prow configuration is easy to break if changing it by hand.\n\n## How does promotion actually work?\n\nThe kubernetes resources being deployed are defined as YAML files in the source code of your application in `charts/myapp/templates/*.yaml`. If you don't specify anything then Jenkins X creates default resources (a `Service + Deployment`) but you are free to add any k8s resources as YAML into that folder (`PVCs, ConfigMaps, Services`, etc).\n\nThen the Jenkins X release pipeline automatically tars up the YAML files into an immutable versioned tarball (using the same version number as the docker image, git tag and release notes) and deploys it into a chart repository of your choice (defaults to chartmuseum but you can easily switch that to cloud storage/nexus/whatever) so that the immutable release can be easily used by any promotion.\n\nPromotion in Jenkins X is completely separate to Release & we support promoting any releases if packaged as a helm chart. Promotion via [jx promote](/docs/build-test-preview/promotion/) CLI generates a Pull Request in the git repository for an environment (Staging, Canary, Production or whatever). This is GitOps basically - specifying which versions and configurations of which apps are in each environment using a git repository and configuration as code.\n\nThe PR triggers a CI pipeline to verify the changes are valid (e.g. the helm chart exists and can be downloaded, the docker images exist etc). Whenever the PR gets merged (could be automatically or may require additional reviews/+1s/JIRA/ServiceNow tickets or whatever) - then another pipeline is triggered to apply the helm charts from the master branch to the destination k8s cluster and namespace.\n\nJenkins X automates all of the above but given both these pipelines are defined in the environments git repository in a `Jenkinsfile` you are free to customise to add your own pre/post steps if you wish. e.g. you could analyse the YAML to pre-provision PVs for any PVCs using some custom disk snapshot tool you may have.  Or you can do that in a pre or post-install helm hook job. Though we'd prefer these tools to be created as part of the Jenkins X [extension model](/docs/contributing/addons/) to avoid custom pipeline hacking which could break in future Jenkins X releases - though its not a huge biggie.\n\n## How do I change the owner of a docker image?\n\nWhen using a docker registry like gcr.io then the docker image owner `gcr.io/owner/myname:1.2.3` can be different to your git owner/organisation.\n\nOn Google's GCR this is usually your GCP Project ID; which you can have many different projects to group images together.\n\nThere's a few options for defining which docker registry owner to use:\n\n* specify it in your `jenkins-x.yml`\n\n```yaml\ndockerRegistryHost: gcr.io\ndockerRegistryOwner: my-gcr-project-id\n```\n* specify it in the [Environment CRD](/docs/reference/components/custom-resources/) called `dev` at `env.spec.teamSettings.dockerRegistryOrg`\n* define the environment variable `DOCKER_REGISTRY_ORG`\n\nIf none of those are found then the code defaults to the git repository owner.\n\nFor more details the code to resolve it is [here](https://github.com/jenkins-x/jx/blob/65962ff5ef1a6d1c4776daee0163434c9c2cb566/pkg/cmd/opts/docker.go#L14)\n\n## What if my team does not want to use helm?\n\nTo help automate CI/CD with GitOps we assume helm charts are created as part of the automated project setup and CI/CD. e.g. just [import your source code](/docs/resources/guides/using-jx/creating/import/) and a docker image + helm chart will be generated for you - the developers don't need to know or care if they don't want to use helm:\n\nIf a developer wants to specifically create a specific resource (e.g. `Secret, ConfigMap` etc) they can just hack the YAML directly in `charts/myapp/templates/*.yaml`. Increasingly most IDEs now have UI wizards for creating + editing kubernetes resources.\n\nBy default things like resource limits are put in `values.yaml` so its easy to customise those as needed in different environments (requests/limits, liveness probe timeouts and the like).\n\nIf you have a developer who is fundamentally opposed to helm's configuration management solution for environment specific configuration you can just opt out of that and just use helm as a way to version and download immutable tarballs of YAML and just stick to vanilla YAML files in, say, `charts/myapp/templates/deployment.yaml`).\n\nThen if you wish to use another configuration management tool you can add it in - e.g. [kustomise support](https://github.com/jenkins-x/jx/issues/2302).\n\n## How do I change the domain of serverless apps?\n\nIf you use [serverless apps](/docs/resources/tutorials/serverless-apps/) with Knative we don't use thee default exposecontroller mechanism for defaulting the `Ingress` resources since knative does not use kubernetes `Service` resources.\n\nYou can work around this by manually editing the _knative_ config via:\n\n```sh\nkubectl edit cm config-domain --namespace knative-serving\n```\n\nFor more help see [using a custom domain with knative](https://knative.dev/docs/serving/using-a-custom-domain/)\n\n## Can I reuse exposecontroller for my apps?\n\nYou should be able to use [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) directly in any app you deploy in any environment (e.g. Staging or Production) as we already trigger exposecontroller on each new release.\n\nWe use [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) for Jenkins X to handle the generation of `Ingress` resources so that we can support wildcard DNS on a domain or automate the setup of HTTPS/TLS along with injecting external endpoints into applications in ConfigMaps via [annotations](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources).\n\nTo get [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) to generate the `Ingress` for a `Service` just [add the label to your Service](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#label). e.g. add this to your `charts/myapp/templates/service.yaml`:\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\n  annotations:\n    fabric8.io/expose: \"true\"\n```\n\nIf you want to inject the URL or host name of the external URL or your ingress just [use these annotations](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources).\n\n## How To Add Custom Annotations to Ingress Controller?\n\nThere may be times when you need to add your custom annotations to the ingress controller or [exposecontroller](https://github.com/jenkins-x/exposecontroller) which `jx` uses to expose services.\n\nYou can add a list of annotations to your application's service Helm Chart, which is found in your app's code repository.\n\nA custom annotation may be added to the `charts/myapp/values.yaml` and it may look as follows:\n\n```yaml\n# Default values for node projects.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\nreplicaCount: 1\nimage:\n  repository: draft\n  tag: dev\n  pullPolicy: IfNotPresent\nservice:\n  name: node-app\n  type: ClusterIP\n  externalPort: 80\n  internalPort: 8080\n  annotations:\n    fabric8.io/expose: \"true\"\n    fabric8.io/ingress.annotations: \"kubernetes.io/ingress.class: nginx\"\n\n```\n\nTo see an example of where we add multiple annotations that the `exposecontroller` adds to generated ingress rules, take a look at this [values.yaml](https://github.com/jenkins-x/jenkins-x-platform/blob/08a304ff03a3e19a8eb270888d320b4336237005/values.yaml#L655)\n\n\n## How can I use a monorepo?\n\nIf you have an existing monorepo you want to import into Jenkins X you can; just be aware that you'll have to create and maintain your own pipelines for your monorepo. So just modify them `jenkins-x.yml` file after you import your monorepo.\n\nSee how to [add a custom step to your pipeline](/about/concepts/jenkins-x-pipelines/).\n\n## How do I inject Vault secrets into staging/production/preview environments?\n\n### Staging/Production\n\nBy default, [enabling Vault](/docs/install-setup/boot/secrets/) via `jx boot`'s `jx-requirements.yml` will only activate it in your pipeline and preview environments, not in staging and production. To also activate it in those environments, simply add a `jx-requirements.yml` file to the root of their repo, with at least the following content:\n\n```yaml\nsecretStorage: vault\n```\n\nNote that the file **must** be named with `.yml`, not `.yaml`, or else the requirements loader cannot load the proper file.\n\nThen, assuming you have a secret in Vault with path `secret/path/to/mysecret` containing key `password`, you can inject it into service `myapp` (for instance, as a `PASSWORD` environment variable) by adding the following to your staging repo's `/env/values.yaml`:\n\n```yaml\nmyapp:\n  env:\n    PASSWORD: vault:path/to/mysecret:password\n```\n\nNotice the prefixing with `vault:` URL scheme and also that we omit first path component (`secret/`), as it gets added automatically. Finally, the key name is separated from path by a colon (`:`).\n\nIf your secret is not environment-specific, you can also inject it directly into your app's `/charts/myapp/values.yaml`:\n\n```yaml\nenv:\n  PASSWORD: vault:path/to/mysecret:password\n```\n\nHowever, note that this value would be overriden at the environment level if the same key is also present there.\n\n### Preview\n\nVault does not need to be explicitly enabled for preview environment. To inject same secret as above into your preview, simply add the following to your app's `/charts/preview/values.yaml`:\n\n```yaml\npreview:\n  env:\n    PASSWORD: vault:path/to/mysecret:password\n```\n\n## How do I inject a Vault secret via a Kubernetes Secret?\n\nWhen you inject secrets directly into environment variables, they appear in Deployment yaml as plain text, which is not advisable. It is recommended to rather inject them into a Secret yaml that will itself be mounted as environment variables.\n\nFor example, start by injecting the secret into your staging repo's `/env/values.yaml`:\n\n```yaml\nmyapp\n  mysecrets:\n    password: vault:path/to/mysecret:password\n```\n\nThen, in your app's `/charts/myapp/templates`, create a `mysecrets.yaml` file, in which you refer to the secret you just added:\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecrets\ndata:\n  PASSWORD: {{ .Values.mysecrets.password | b64enc }}\n```\n\nNotice how we encode the secret value in Base64, as this is the format expected in a Secret yaml.\n\nAlso, make sure to add a default value for the same key in your app's `/charts/myapp/values.yaml`:\n\n```yaml\nmysecrets:\n  password: \"\"\n```\n\nThat allows Helm to resolve to some value during linting of your `mysecrets.yaml`, as linting seems not to consider values from the environment. Otherwise, you might get something like:\n\n```sh\nerror: failed to build dependencies for chart from directory '.': failed to lint the chart '.': failed to run 'helm lint --values values.yaml' command in directory '.', output: '==> Linting .\n[ERROR] templates/: render error in \"myapp/templates/secrets.yaml\": template: myapp/templates/secrets.yaml:6:21: executing \"myapp/templates/secrets.yaml\" at <.Values.mysecrets.password>: nil pointer evaluating interface {}.password\n```\n\nFinally, mount the Secret yaml as environment variables in your app's `/charts/myapp/templates/deployment.yaml`:\n\n```yaml\n...\n    spec:\n      containers:\n      - name: {{ .Chart.Name }}\n        envFrom:\n        - secretRef:\n            name: mysecrets\n...\n```\n",
            "content/en/docs/resources/faq/using/chatops.md": "---\ntitle: ChatOps\nlinktitle: ChatOps\ndescription: Using ChatOps with Jenkins X\nweight: 20\naliases:\n  - /resources/guides/using-jx/faq/chatops/\n---\n\n## What is ChatOps?\n\nWe use the phrase _ChatOps_ to mean operating code changes and GitOPs promotion via chat. More specifically this usually is done via commenting on Pull Requests on your git providers website; though in the future this could be via Slack or web consoles too.\n\n## What are the benefits of ChatOps?\n\nChatOps helps developers collaborate on Pull Requests and speeds up merging of Pull Requests. We want to be able to merge changes as quickly as possible into master so that we continuously integrate code which minimises the downsides of long term feature branching and merge hell.\n\nChatOps (and [tide in particular](#what-does-hook-do)) also helps automate and speeds up tasks:\n\n* developers don't have to keep hitting reload on a Pull Request page waiting for all the tests to pass so that they can click `Merge`. Just add a `/lgtm` comment or approve the code review and the Pull Request will automatically get merged once its tests go green. This also avoids developers accidentally hitting `Merge` before all the test pass!\n* all Pull Request are automatically rebased and tested against master before merging - further ensuring we don't accidentally break master\n* batch merging of Pull Requests is supported to speed up merging Pull Requests.\n\nFor more details see [what does tide do](#what-does-hook-do).\n\n## Which kinds of webhook support ChatOps?\n\n[Prow](/docs/reference/components/prow/) and [Lighthouse](/architecture/lighthouse/) support both webhooks and [ChatOps](/docs/resources/faq/using/chatops/) whereas Jenkins just supports webhooks only.\n\n## How do I re-trigger a PR pipeline?\n\nIf a pipeline fails due to some compile error or failing test - fix the code and push your changes and the Pull Request pipeline will rerun.\n\nIf you think the pipeline failed due to some temporary infrastructure reason then you can use ChatOps to re-trigger the pipeline via commenting on the Pull Request:\n\n* `/retest` reruns only failed pipelines\n* `/test all` reruns all failed pipelines.\n* `/test foo` reruns the pipeline called `foo` only\n\nNote that you need to be in the `OWNERS` file as an [approver for this to work](#why-did-a-pullrequest-have-no-pipeline-triggered). \n\n## How do I add multiple parallel pipelines to a project?\n\nIt can be useful to have multiple pipelines to perform different kinds of long running tests on Pull Requests. e.g. running the same test suite using different databases, microservice configurations or underlying infrastructure.\n\nIn Jenkins X you can create a custom `Scheduler` resource in your [jx boot](/docs/getting-started/setup/boot/) configuration (in `env/templates/myscheduler.yaml`) which you can add multiple named contexts in the `presubmits` section. Then for each context name make sure you have a file called `jenkins-x-${context}.yml` in your project. \n\nThen Jenkins X will invoke each context on demand via `/test mycontext` or automatically if you enable `alwaysRun: true`.\n\nYou can see how we define lots of [parallel testing contexts in the version stream here](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/f377a72498282de9ee49b807b4d5ba74321a4fab/env/templates/jx-versions-scheduler.yaml#L18) which all run in parallel and report their status on each pull request on the [version stream](/about/concepts/version-stream/)\n\nSee also [How do I map SourceRepository to a custom Scheduler?](/docs/resources/faq/setup/#how-do-i-map-sourcerepository-to-a-custom-scheduler)\n\n## What does hook do?\n\n`hook` is the name of the microservice in [Prow](/docs/reference/components/prow/) and the http endpoint in [Lighthouse](/architecture/lighthouse/) which listens to webhooks coming in from your git provider which then gets processed as either a ChatOps command or a trigger of a pipeline.\n\n## What does tide do?\n\n`tide` is a microservice in  [Prow](/docs/reference/components/prow/) and [Lighthouse](/architecture/lighthouse/) which periodically queries open pull requests on the repositories you have imported into Jenkins X. Then it performs the following logic:\n\n* if a Pull Request has passed all of its review + CI tests (e.g. its got the `approved` and/or `lgtm` labels applied or has passed a github code review) and is green and is based off of master it is automatically merged.\n* if a Pull Request has passed all of its review + CI tests but is not based off of master its pipelines are re-triggered based off of master to ensure the Pull Request will be valid if it were merged.\n* if batching is enabled and there are multiple pending Pull Requests which are approved and green, a batch pipeline is triggered which combines multiple Pull Requests together into a single change - if all those pipelines go green then all the PRs are merged together at once and closed. This greatly speeds up getting multiple Pull Requests merged together (as it avoids re-triggering each PR's tests after each one is merged).\n\n## How can I make ChatOps HA?\n\nTo make ChatOps highly avialable scale up the deployments which listen for http requests to, say, 3 replicas.\n\nWhen using [Lighthouse](/architecture/lighthouse/) that just means modifying the replicas for the `lighthouse` deployment. e.g. in your [boot](/docs/getting-started/setup/boot/) git repository try changing `env/lighthouse/values.tmpl.yaml` to:\n\n```yaml\nreplicaCount: 3\n```\n\n\nWhen using [Prow](/docs/reference/components/prow/) you need to scale up `hook` and `pipelinerunner`. e.g. in your [boot](/docs/getting-started/setup/boot/) git repository try changing `env/prow/values.tmpl.yaml` to:\n\n```yaml\nhook:\n  replicaCount: 3\npipelinerunner:\n  replicaCount: 3\n```\n\n\n## Should I use prow or lighthouse?\n\nIf you are using a git server other than https://github.com then we recommend [Lighthouse](/architecture/lighthouse/).\n\nIf you are using https://github.com then for your git server then for now we recommend [Prow](/docs/reference/components/prow/) as it has had more testing than [Lighthouse](/architecture/lighthouse/).\n\nThough [Lighthouse](/architecture/lighthouse/) is our strategic direction. We are starting to incrementally move our open source repositories over to [Lighthouse](/architecture/lighthouse/). At some point in the future once we've been using [Lighthouse](/architecture/lighthouse/) in production for all of our open source and commercial repositories [Lighthouse](/architecture/lighthouse/) will become our recommended solution for all git providers so that we can have a single, simpler & smaller codebase to maintain.\n\n## How to handle a flaky/broken pipeline\n\nIf you have a pending Pull Request which is blocked on a flaky test or an incorrectly failing lint or code review; you can use ChatOps to override its status via the ChatOps command: `/override nameOfPipeline`\n\n## Why did a PullRequest have no pipeline triggered?\n\n[Prow](/docs/reference/components/prow/) and [Lighthouse](/architecture/lighthouse/) use an `OWNERS` file stored in each git repository to define which developers are allowed to review and approve changes. You can even limit those roles to different folders.\n\nIf a non-reviewer submits a Pull Request it won't trigger CI pipelines by default until a reviewer adds an `/ok-to-test` comment on the Pull Request.\n\nIf you have public git repositories this also avoids the security issue of a non-approver submitting a Pull Request to change the pipeline to email them your security credentials in the CI pipeline ;)\n\n",
            "content/en/docs/resources/faq/using/pipelines.md": "---\ntitle: Pipelines Questions\nlinktitle: Pipelines Questions\ndescription: Questions on how to use Serverless Jenkins X Pipelines\nweight: 10\naliases:\n  - /resources/guides/using-jx/faq/pipelines/\n---\n\nFor more background see the guide on [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) using [Tekton](https://tekton.dev/). There is also the [Jenkins X Pipelines Syntax Reference](/docs/reference/pipeline-syntax-reference/)\n\n## How do I add a custom step?\n\nTo add a new custom step to your `jenkins-x.yml` file see [how to use the jx create step](/about/concepts/jenkins-x-pipelines/)\n\n## How do I override a step?\n\nIf there is a named step in the pipeline you wish to override you can add some YAML to your `jenkins-x.yml` file as \n follows:\n\nIn this case were are going to replace the step called `helm-release` in the `release` pipeline\n\n``` \npipelineConfig:\n  pipelines:\n    overrides:\n      - pipeline: release\n        name: helm-release\n        step: \n          image: busybox\n          sh: echo \"this command is replaced\"\n```   \n\nYou can see the effect of this change locally before you commit it to git via the [jx step syntax effective](/commands/jx_step_syntax_effective/) command:\n\n``` \njx step syntax effective -s\n```\n\nYou can override whole Stages or replace a specific step with a single step or a sequence of steps. You can also add steps before/after another step.\n\nFor more detail check out [how to override steps](/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines)\n\n## How can I override the default container image?\n\nAs you can see above you can override any step in any build pack; but you can also override the container image used by default in all the steps by adding this YAML to your `jenkins-x.yml`:\n\n``` \npipelineConfig:\n  agent:\n    label: jenkins-go\n    container: somerepo/my-container-image:1.2.3\n```\n\nYou can see the effect of this change locally before you commit it to git via the [jx step syntax effective](/commands/jx_step_syntax_effective/) command:\n\n``` \njx step syntax effective -s\n```         \n\nFor more detail check out [how to override steps](/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines)\n\n## How do Jenkins X Pipelines compare to Jenkins pipelines?\n\nSee [Jenkins X Pipelines](/docs/build-test-preview/jenkins-x-pipelines/)\n\n\n## What environment variables are available by default inside a pipeline?\n\nSee the [default environment variables created for pipeline steps](/docs/resources/guides/using-jx/pipelines/envvars/#default-environment-variables)\n\n## Is there a reference for the syntax?\n\nSee the [Jenkins X Pipelines Syntax Reference](/docs/reference/pipeline-syntax-reference/)\n\n## How do I mount a Secret or ConfigMap?\n\nEach step in a Jenkins X Pipeline in the `jenkins-x.yml` file is basically a [Container](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#container-v1-core) from kubernetes so you can specify the image, resource limits, environment variables and mount them from a `ConfigMap` or `Secret`\n\nYou can see [an example of mounting a Secret to an environment variable here](/docs/reference/pipeline-syntax-reference/#full-pipeline-definition-in-jenkins-xyml)\n\nIf you are inside a shell script you can also use the [jx step credential](/commands/deprecation/)\n\n## Can I mount a Persistent Volume in my pipeline?\n\nTekton already mounts a separate Persistent Volume for each build pod at `/workspace` so the build results are kept around for a while until they are garbage collected.\n\nOn most kubernetes clusters you cannot easily share a single Persistent Volume across multiple pods; so having a shared PV across builds isn't generally easy or compatible. You can however add a step to populate your PV on startup from a cloud bucket and at the end of a pipeline copy data into a bucket to speed up caching.\n\nYou can also do things like use Nexus as a network cache for fetching maven dependencies (which happens OOTB with Maven builds in Jenkins X) or add the Athens proxy for Go.\n\nHopefully the Tekton community will figure out some even better caching solutions to speed up builds.\n\n\n## How do I define an environment variable inside a step for other steps to use?\n\nFiles are the easiest approach as the `/workspace` directory is shared with all steps. So write in one step and use the value from other steps etc.\n\nThe other option is mounting a `ConfigMap` as environment variables into each step and modifying that on one step; but files are easier really.\n\n\n\n",
            "content/en/docs/resources/guides/_index.md": "---\ntitle: Guides\nlinkTitle: Guides\ndescription: Guides for core tasks working with Jenkins X\ntype: docs\nweight: 10\n---\n\nA collection of authored guides to help you address specific real-world scenarios.\n",
            "content/en/docs/resources/guides/extending-jx/_index.md": "---\ntitle: Extending Jenkins X\nlinkTitle: Extending Jenkins X\ndescription: Learn how to extend Jenkins X using the Apps Framework\ntype: docs\nweight: 30\naliases:\n  - /docs/guides/extending-jx/\n---\n\nNote that for Version 3.x of Jenkins X we have an [improved extending guide](/v3/about/extending)\n",
            "content/en/docs/resources/guides/extending-jx/apps.md": "---\ntitle: Apps\nlinktitle: Apps Framework\ndescription: Extending Jenkins X using the Apps Framework\ntype: docs\nweight: 20\naliases:\n    - /docs/contributing/addons/\n    - /docs/guides/extending-jx/introduction/\n---\n\n## What are Apps\n\nJenkins X Apps are distributed as Helm Charts via Helm Chart repositories. Any Helm chart can be installed as an app\nusing `jx add app`, although Jenkins X adds various capabilities to Helm Charts including:\n\n* the ability to interactively ask questions to generate `values.yaml` based on JSON Schema\n* the ability to create pull requests against the GitOps repo that manages your team/cluster\n* the ability to store secrets in vault\n* the ability to upgrade all apps to the latest version\n\nPlanned features include:\n\n* integrating [kustomize](https://github.com/kubernetes-sigs/kustomize) to allow existing charts to be modified\n* storing Helm repository credentials in vault\n* taking existing `values.yaml` as defaults when asking questions based on JSON Schema during app upgrade\n* only asking new questions during app upgrade\n* integration for bash completion\n\n### Official Apps repositry\n\nJenkins X provides a lot Apps like: Gloo, Istio, Kubeless and more in https://github.com/jenkins-x-apps.\n\n### CLI Commands\n\n* [jx add app](/commands/jx_add_app/) - Adds an app to Jenkins X\n* [jx delete app](/commands/jx_delete_app/) - Deletes one or more apps from Jenkins X\n* [jx get apps](/commands/jx_get_apps/) - Display one or more installed apps\n* [jx upgrade apps](/commands/jx_upgrade_apps/) - Upgrades one or more apps to a newer release\n\n## Structure of an App chart\n\nIn addition to the structure of a regular helm chart a Jenkins X App chart contains the following:\n\n* `values.schema.yaml`: a JSON schema extended with conditions, field values and questions that is used to point out and prompt the user for customizable values the app should be installed with.\n* `templates/app.yaml`: a Jenkins X `App` custom resource: allows to define a `values.schema.yaml` transformation which can be used to inject cluster-specific values as for instance its domain and TLS settings (which can be obtained by mounting the ConfigMap `ingress-config`).\n\nWhen `jx add app` is called the corresponding helm chart is fetched, its `values.schema.yaml` transformed using the `App` resource and the user prompted for the contained questions (non-const fields).\nFrom the user's answers a `values.yaml` is generated and used to install the chart.\n\n## How to test local App chart changes\n\nYou can build your app chart locally, upload it in your cluster's chart repository and call `jx add app` referencing your uploaded chart.\nThis can be done as follows from within your chart's directory:\n\n```sh\nCHART_NAME=<YOUR_APP_NAME>\nCHART_VERSION=<YOUR_APP_VERSION>\nCHART_REPO=<YOUR_CHART_REPO_URL> # listed by `jx get urls`\nCHART_REPO_USR=<YOUR_USERNAME>\nCHART_REPO_PSW=<YOUR_PASSWORD>\nhelm init --client-only\nhelm repo add <DEP_REPO_NAME> <DEP_REPO_URL> # required if dependencies need to be loaded\nhelm dependency build\nsed \"s/version: .*/version: $CHART_VERSION/g\" -i Chart.yaml # set the app's current version\nhelm lint .\nhelm package .\ncurl --fail -u \"$CHART_REPO_USR:$CHART_REPO_PSW\" --data-binary \"@${CHART_NAME}-${CHART_VERSION}.tgz\" ${CHART_REPO}/api/charts\njx add app --repository $CHART_REPO --version $CHART_VERSION $CHART_NAME\n```\n",
            "content/en/docs/resources/guides/extending-jx/buildpacks.md": "---\ntitle: Build Packs\nlinktitle: Build Packs\ndescription: Extending Jenkins X using custom Build Packs\ntype: docs\nweight: 40\n---\n\n## Build Packs & Pod Templates\n\nIn Jenkins X a _Build Pack_ allows you to transform source code into a applications which can be deployed on Kubernetes. Build Packs are based on [draft](https://draft.sh/), and will automatically add:\n\n* `Dockerfile` to turn the code into an immutable docker image for running on kubernetes\n* `Jenkinsfile` to define the declarative Jenkins pipeline to define the CI/CD steps for the application\n* helm chart in the `charts` folder to generate the kubernetes resources to run the application on kubernetes\n* a *preview chart* in the `charts/preview` folder to define any dependencies for deploying a preview environment on a Pull Request\n\nIf you need to add support for different languages or build tools then you will need to create a new _Pod Template_. A pod template defines the pod used to run the build, and consists of:\n\n* one or more build containers for running commands inside (e.g. your build tools like `mvn` or `npm` along with tools we use for other parts of the pipeline like `git`, `jx`, `helm`, `kubectl` etc)\n* volumes for persistence\n* environment variables\n* secrets so the pipeline can write to git repositories, docker registries, maven/npm/helm repositories and so forth\n\nRead more about [creating build packs](/docs/create-project/build-packs/#creating-new-build-packs) and [creating pod templates](/docs/reference/components/pod-templates/).\n",
            "content/en/docs/resources/guides/extending-jx/plugins.md": "---\ntitle: Binary Plugins\nlinktitle: Binary Plugins\ndescription: Binary Plugins for the Jenkins X CLI\ntype: docs\nweight: 30\naliases:\n    - /docs/contributing/addons/plugins/\n    - /docs/guides/extending-jx/plugins/\n---\n\nThis guide shows you how to write plugins for the `jx` CLI. Plugins extend the `jx` CLI with new sub-commands allowing for new\nfeatures not included in Jenkins X. `jx` plugins can be managed by Jenkins X meaning neither the plugin developer nor\nthe plugin user has to worry about how to install the plugin onto the user's computer.\n\nYou might want to write a plugin for the `jx` CLI if you developed some new functionality for Jenkins X and wanted to provide a\nway for the user to easily interact with it via the `jx` CLI rather than make them install a new CLI. This could be particularly\nuseful inside a pipeline step.\n\n## Before you begin\n\nYou need to have a working `jx` binary installed, one newer than around `v1.3.600`. You need to have Go installed.\n\n## Writing Jenkins X CLI plugins\n\nYou can write a plugin in any programming language or script that allows you to write command-line commands.\n\nThere is no plugin installation or pre-loading required. Plugin executables receive the inherited environment from the\n `jx` binary.\n\n### Example plugin\n\nHere is a simple plugin that simply outputs a log statement.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n)\n\nfunc main() {\n\tfmt.Println(\"Have some tasty brie.\")\n\tos.Exit(0)\n}\n```\n\nWe strongly recommend using Go and the [Cobra CLI framework](https://github.com/spf13/cobra). This allows you to easily\nbuild a well structured plugin with subcommands and argument handling.\n\nWe [plan](https://github.com/jenkins-x/jx/issues/2832) to build a quickstart and build pack that allows you to\nquickly create a new Cobra based plugin.\n\n### Using the plugin\n\n1. Build a binary\n\n```sh\ngo build -o jx-brie brie.go\n```\n\n2. Add it to your path\n```sh\nsudo mv ./jx-brie /usr/local/bin\n```\n\n3. You can now use the plugin\n\n```sh\n$ jx brie\nHave some tasty brie\n```\n\n## Plugin Management\n\nWhilst being able to run a plugin is useful you'll normally want to make it available to everyone who uses your Jenkins X cluster.\n\nJenkins X provides binary plugin management via the `plugin` custom resource.\n\nTODO\n\n## Distributing your plugin using Apps\n\nNow that you've written your plugin you'll want to distribute it.\n\nTODO\n",
            "content/en/docs/resources/guides/extending-jx/quickstart.md": "---\ntitle: Custom Quickstarts\nlinktitle: Custom Quickstarts\ndescription: Extending Jenkins X building custom quickstarts\ntype: docs\nweight: 50\n---\n\n## Custom Quickstarts\n\nJenkins X ships with a series of quickstarts that provide you with pre-made applications that you can start a project with.\n\nYou can create your own quickstarts that give your team members a starting point. Read more about [creating quickstarts](/docs/create-project/creating/).\n\nYou can customize the list of quickstarts available to your team making it easier for them to select the right place to start. Read more about [customizing the quickstarts available](/docs/create-project/creating/#customising-your-teams-quickstarts).\n",
            "content/en/docs/resources/guides/extending-jx/worked-example.md": "---\ntitle: Worked Example\nlinktitle: Worked Example\ndescription: Implement support for JUnit Test reports in Jenkins X\ntype: docs\nweight: 60\naliases:\n    - /docs/contributing/addons/worked-example/\n    - /docs/guides/extending-jx/worked-example/\n---\n\nIn this worked example we will implement the functionality of the classic [JUnit Plugin](https://wiki.jenkins.io/display/JENKINS/JUnit+Plugin) from Jenkins in Jenkins X as a series of extensions to Jenkins X.\n\n> This guide is still a work in progress!\n\n# Functional Requirements\n\n* Collect JUnit XML files from build\n* Associate with pipeline / pipeline step execution\n* Notify user of URL to view test results\n* Provide historical/trend view of tests\n* Allow test results to affect build health\n\n# Implementation\n\n## Prerequisites\n\n* A working installation of `jx`\n* A working Jenkins X cluster\n* A working local install of Java and Maven\n\n## Collect JUnit XML files from build\n\n### Create a sample project\n\nWe'll start by creating a sample Java project which will run some tests.\n\n1. Run `jx create quickstart -f spring-boot-web`. You can accept the defaults when prompted.\n1. Import the created sources into your favorite IDE.\n1. Open `pom.xml` and add JUnit as a dependency:\n\n    ```xml\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <scope>test</scope>\n      <version>4.12</version>\n    </dependency>\n    ```\n\n1. Create the file `src/test/java/jenkinsx/example/springboot/WelcomeControllerTest.java`.\n1. Copy and paste this code into the `WelcomeControllerTest`\n\n    ```java\n    package jenkinsx.example.springboot;\n\n    import org.junit.Assert;\n    import org.junit.Test;\n\n    import java.util.HashMap;\n    import java.util.Map;\n\n    public class WelcomeControllerTest {\n\n        @Test\n        public void testWelcome() {\n            WelcomeController wc = new WelcomeController();\n            Map<String, Object> res = new HashMap<String, Object>();\n            wc.welcome(res);\n            Assert.assertEquals(res.get(\"message\"), \"Hello World\");\n        }\n    }\n\n    ```\n\n1. Validate your changes by running `mvn test`.\n2. Commit your changes and make sure the app makes it to staging in Jenkins X.\n3. Our test reports will be generated in Jenkins X build pods, so we want to use that for development. Jenkins X DevPods make that easy. Run `jx create devpod --sync` in your project.\n4. Validate the DevPod is working by running `mvn test`.\n\n### Generate a Human Readable Report\n\nBy default Maven Surefire doesn't generate HTML files, just XML reports. We want people to be able to look at the reports, as well as be able to submit the XML for analysis.\n\n1. In the DevPod run `mvn install surefire-report:report`. Validate that `target/site/surefire-report.html` is generated.\n1. Create a script `junit.sh` in the sample project with this code:\n\n    ```bash\n    #!/bin/bash\n\n    # Generate the HTML report\n    mvn surefire-report:report\n    ```\n\n### Store the reports\n\nWe need a place to store the reports. A simple Go program will suffice for now.\n\n1. Run `jx create quickstart -f spring-boot-web`. You can accept the defaults when prompted.\n2. Replace the `main.go` contents with this code:\n\n    ```golang\n    package main\n\n    import (\n      \"fmt\"\n      \"io/ioutil\"\n      \"log\"\n      \"net/http\"\n      \"os\"\n      \"path/filepath\"\n    )\n\n    const maxUploadSize = 2 * 1024 * 1024 // 2 MB\n    const uploadPath = \"/reports\"\n    const downloadPort = 8080\n    const uploadPort = 8081\n    const bind = \"0.0.0.0\"\n\n    func main() {\n      go uploadServer()\n      downloadServer()\n    }\n\n    func downloadServer() {\n      server:= http.NewServeMux()\n      server.Handle(\"/\", http.FileServer(http.Dir(uploadPath)))\n      log.Printf(\"Download server listening on %s:%d\\n\", bind, downloadPort)\n      http.ListenAndServe(fmt.Sprintf(\"%s:%d\", bind, downloadPort), server)\n    }\n\n    func uploadServer() {\n      server:= http.NewServeMux()\n      server.HandleFunc(\"/\", uploadFileHandler())\n      log.Printf(\"Upload server listening on %s:%d\\n\", bind, uploadPort)\n      http.ListenAndServe(fmt.Sprintf(\"%s:%d\", bind, uploadPort), server)\n    }\n\n    func uploadFileHandler() http.HandlerFunc {\n      return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // validate file size\n        r.Body = http.MaxBytesReader(w, r.Body, maxUploadSize)\n        if err := r.ParseMultipartForm(maxUploadSize); err != nil {\n          log.Println(err)\n          renderError(w, \"FILE_TOO_BIG\", http.StatusBadRequest)\n          log.Println(err)\n          return\n        }\n\n        // parse and validate file and post parameters\n        file, _, err := r.FormFile(\"upload\")\n        if err != nil {\n          renderError(w, \"INVALID_FILE\", http.StatusBadRequest)\n          log.Println(err)\n          return\n        }\n        defer file.Close()\n        fileBytes, err := ioutil.ReadAll(file)\n        if err != nil {\n          renderError(w, \"INVALID_FILE\", http.StatusBadRequest)\n          log.Println(err)\n          return\n        }\n        filename, dir := filepath.Split(r.URL.Path)\n        newPath := filepath.Join(dir, filename)\n\n        err = os.MkdirAll(dir, os.FileMode(0755))\n        if err != nil {\n          renderError(w, \"CANT_CREATE_DIR\", http.StatusInternalServerError)\n          log.Println(err)\n          return\n        }\n        // write file\n        newFile, err := os.Create(newPath)\n        if err != nil {\n          renderError(w, \"CANT_WRITE_FILE\", http.StatusInternalServerError)\n          log.Println(err)\n          return\n        }\n        defer newFile.Close() // idempotent, okay to call twice\n        if _, err := newFile.Write(fileBytes); err != nil || newFile.Close() != nil {\n          renderError(w, \"CANT_WRITE_FILE\", http.StatusInternalServerError)\n          log.Println(err)\n          return\n        }\n        w.Write([]byte(\"SUCCESS\"))\n      })\n    }\n\n    func renderError(w http.ResponseWriter, message string, statusCode int) {\n      w.WriteHeader(http.StatusBadRequest)\n      w.Write([]byte(message))\n    }\n    ```\n\n    This code will create an HTTP server that listens on two ports. It listens on 8080 to serve files from the `/reports` directory, and listens on 8081 for file uploads (using the URL path as the path as the location under `/reports` to store the file). By listening on different ports for download and upload we can easily expose the downloads service outside the cluster, but restrict the uploads service to inside the cluster meaning we have no need to secure the transport.\n\n    We'll add authentication to the upload endpoint at a later point.\n1. We need to store the reports somewhere, and in Kubernetes this means using a volume. Add this snippet to the bottom of `charts/jenkins-x-reports/templates/deployment.yaml`:\n\n    ```yaml\n          volumes:\n          - name: {{ .Values.service.reportVolumeName }}\n            emptyDir: {}\n    ```\n\n    and add this snippet to the container (just below above `ports` will work well):\n\n    ```yaml\n            volumeMounts:\n            - name: {{ .Values.service.reportVolumeName }}\n              mountPath: {{ .Values.service.reportMountPath }}\n    ```\n\n    Now modify `charts/jenkins-x-reports/values.yaml` and modify the `service` and add (just after `internalPort` will work well):\n    ```yaml\n      reportVolumeName: reports-volume\n      reportMountPath: /reports\n    ```\n\n    You'll notice that we've used `emptyDir{}` to store the reports - this is transient and reports will be lost when the pod dies. We'll replace this with a persistent volume later.\n1. Modify the `Dockerfile` to expose port `8081` as well by adding the line `EXPOSE 8081` just after `EXPOSE 8080`.\n2. Modify `charts/jenkins-x-reports/values.yaml` and add the values for the upload service just after the existing service:\n\n    ```yaml\n    serviceUpload:\n      name: jenkins-x-reports-upload\n      type: ClusterIP\n      externalPort: 80\n      internalPort: 8081\n    ```\n\n    Notice how we've given it a unique name, set the internal port correctly and removed the annotations that instruct Jenkins X to expose the service outside the cluster.\n\n    We now need to create a template for these values. Add the file `charts/jenkins-x-reports/templates/service-upload.yaml`:\n\n      ```\n      apiVersion: v1\n      kind: Service\n      metadata:\n      {{- if .Values.serviceUpload.name }}\n        name: {{ .Values.serviceUpload.name }}\n      {{- else }}\n        name: {{ template \"fullname\" . }}\n      {{- end }}\n        labels:\n          chart: \"{{ .Chart.Name }}-{{ .Chart.Version | replace \"+\" \"_\" }}\"\n      {{- if .Values.serviceUpload.annotations }}\n        annotations:\n      {{ toYaml .Values.serviceUpload.annotations | indent 4 }}\n      {{- end }}\n      spec:\n        type: {{ .Values.serviceUpload.type }}\n        ports:\n        - port: {{ .Values.serviceUpload.externalPort }}\n          targetPort: {{ .Values.serviceUpload.internalPort }}\n          protocol: TCP\n          name: http\n        selector:\n          app: {{ template \"fullname\" . }}\n      ```\n\n    This file is simply a copy of `service.yaml` with the `service` variable changed to `serviceUpload`.\n\n\n    We also need to add the upload port to the list of container ports. Just below `containerPort: {{ .Values.service.internalPort }}` add:\n\n    ```yaml\n              containerPort: {{ .Values.serviceUpload.internalPort }}\n    ```\n1. Run this as an app on your Jenkins X cluster by pushing your code changes to GitHub. The app will build and can be tested in the staging environment.\n1. Validate you can upload and download files. In the DevPod for the sample app run `curl -F upload=@target/site/surefire-report.html http://jenkins-x-reports-upload.jx-staging/test/1` and then validate that the file is there by running `curl http://jenkins-x-reports.jx-staging/test/1`.\n2. Promote the app to production using `jx promote -a jenkins-x-reports -e production -v 0.0.1` (assuming you are still on your first version of the app)\n1. To POST all the JUnit artifacts to the reports server use this script\n\n    ```bash\n    #!/bin/bash\n\n    UPLOADED=uploaded.yaml\n    REPORT_HOST=`jx get urls -e production | grep -o http://jenkins-x-reports.jx-production.*`\n\n    function upload() {\n        upload_junit_artifacts\n    }\n\n    function upload_junit_artifacts() {\n        # Generate the HTML report\n        mvn surefire-report:report\n        upload_file target/site/surefire-report.html\n        for f in target/surefire-reports/*.xml; do\n            upload_file ${f}\n        done\n    }\n\n    function upload_file() {\n        [ -f \"$1\" ] || break\n        filename=$(basename $1)\n        path=$ORG/$APP_NAME/$VERSION/$filename\n        set -x\n        curl -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$path\n        set +x\n        echo \"    ${filename}: ${REPORT_HOST}/${path}\" >> $UPLOADED\n    }\n    ```\n\n1. Make the script executable by running `chmod u+x junit.sh`\n1. Tell Jenkins to execute the script by adding this snippet to the `Jenkinsfile` just above the `jx step post build` lines in both the `CI Build and push snapshot` and `Build Release` stages:\n```bash\n            sh \"VERSION=`cat VERSION` ./junit.sh\"\n```\n\nSo far we've had to add a script to the sample and modify the `Jenkinsfile` to run the script. Later in this tutorial we'll implement this functionality as a cross-cutting concern and be able to remove this from the sample project. But for now let's focus on the functionality we need.\n\n### Create an index of reports\n\nIn order to provide the user with access to reports we need to create a central list. A Kubernetes `ConfigMap` is a simple way to store this information. A config map does have some limitations (they aren't ideal for large amounts of rapidly changing data) so we'll come back at a later stage and provide a better solution, but for now it allows us to focus on the user functionality.\n\nWe'll use one `ConfigMap` per app, and we'll use a standard naming pattern so that other tools can work out where the test report config map is for each app. We'll store the config maps in the `jx` namespace.\n\n1. Update the `junit.sh` script with these three functions:\n\n    ```bash\n\n    CM_NAME=$ORG-$APP_NAME-test-reports\n\n    function create_cm_if_needed() {\n        if ! kubectl get cm $CM_NAME &> /dev/null; then\n            echo \"Creating ConfigMap $CM_NAME\"\n            kubectl create cm $CM_NAME\n        fi\n    }\n\n    function init_patch() {\n        rm -f $UPLOADED\n        echo \"data:\" >> $UPLOADED\n        echo \"  $VERSION: |-\" >> $UPLOADED\n    }\n\n    function update_cm() {\n        set -x\n        kubectl -v1 patch cm $CM_NAME --patch \"$(cat $UPLOADED)\"\n        set +x\n    }\n    ```\n\n2. And update the `upload()` function to call these functions:\n\n    ```bash\n    function upload() {\n        create_cm_if_needed\n        init_patch\n        upload_junit_artifacts\n        update_cm\n    }\n    ```\n\n### Visualize the test results\n\nWe'll use Kibana and ElasticSearch to create dashboards to visualize the test results.\n\n1. Install ElasticSearch by running `helm install --name jenkins-x-reports-elasticsearch incubator/elasticsearch`\n2. Install Kibana by running `helm install stable/kibana --name=jenkins-x-reports-kibana --set service.annotations.\"fabric8\\.io/expose\"=true --set files.\"kibana\\.yml\".\"elasticsearch\\.url\"=http://jenkins-x-reports-elasticsearch-client:9200 --set  && jx upgrade ingress`.\n\n    The ingress upgrade will ask you a number of questions, and you can just accept the defaults. You can now access Kibana by running `jx get urls` and copying the URL for `jenkins-x-reports-kibana` into your browser.\n\n3. Create a mapping for the JUnit XML format in Kibana by pasting this code into the Kibana console:\n\n    ```json\n    PUT tests\n    {\n        \"mappings\": {\n          \"junit\": {\n            \"properties\": {\n            \"errors\": { \"type\": \"integer\" },\n            \"failures\": { \"type\": \"integer\" },\n            \"name\": { \"type\": \"keyword\" },\n            \"noNamespaceSchemaLocation\": { \"type\": \"text\" },\n            \"skipped\": { \"type\": \"integer\" },\n            \"tests\": { \"type\": \"integer\" },\n            \"time\": { \"type\": \"double\" },\n            \"xsi\": { \"type\": \"text\" },\n            \"appName\": { \"type\": \"keyword\" },\n            \"org\": { \"type\": \"keyword\" },\n            \"version\": { \"type\": \"keyword\" },\n            \"timestamp\": { \"type\": \"date\" }\n          }\n          }\n        }\n    }\n    ```\n\n1. An initial client for sending data to Kibana is available at (https://github.com/pmuir/junit-runner). Download it and get it building.\nAs we start to convert the functionality we've built so far to a Jenkins X extension, we'll move the scripted code we've written so far into this Go program. For now, we can just use the current version.\n1. Add this function to `junit.sh`:\n\n    ```bash\n\n    function dashboard() {\n        curl https://github.com/pmuir/junit-runner/releases/download/v0.0.4/junit-runner > junit-runner\n        chmod u+x junit-runner\n        ./junit-runner\n    }\n    ```\n\n    and call it from `upload()`. Push your changes to the sample repo and watch as Kibana starts to be populated with data.\n\n### A better way to build functionality\n\nIf you have built plugins for something like Jenkins or Eclipse, you will be used to building the functionality you need to run \"in process\" - inside the main process that the application is running (e.g. the Jenkins master). More recently a different approach to writing plugins has become more popular where you build the functionality as a separate process that is managed by the main process; this is the model used by VS Code for example. We would recommend using this approach in Jenkins X, and because Jenkins X is based on Kubernetes, that means using a separate container or Pod to build your functionality, and calling out to using REST APIs.\n\nIn this case that means that it would be better to build the functionality we created in `junit-runner` into a separate pod, rather than run it inside the build pod. As it so happens we already have a pod - the one we built to store and serve the test artifacts.\n\nLet's open that project up, and move the code which transforms the JUnit XML and sends it to elastic search into it.\n\n1. Open the `main.go` file and add this function:\n\n    ```go\n    func toJson(json []byte) ([]byte, error) {\n      m, err := mxj.NewMapJson(json)\n      if err != nil {\n        return nil, err\n      }\n\n      if err != nil {\n        return nil, err\n      }\n      // Kibana is quite restrictive in the way it accepts JSON, so just rebuild the JSON entirely!\n\n      utc, _ := time.LoadLocation(\"UTC\")\n      data := map[string]interface{} {\n        \"org\": os.Getenv(\"ORG\"),\n        \"appName\": os.Getenv(\"APP_NAME\"),\n        \"version\": os.Getenv(\"VERSION\"),\n        \"errors\": m.ValueOrEmptyForPathString(\"testsuite.-errors\"),\n        \"failures\": m.ValueOrEmptyForPathString(\"testsuite.-failures\"),\n        \"testsuiteName\": m.ValueOrEmptyForPathString(\"testsuite.-name\"),\n        \"skippedTests\": m.ValueOrEmptyForPathString(\"testsuite.-skipped\"),\n        \"tests\": m.ValueOrEmptyForPathString(\"testsuite.-tests\"),\n        \"time\": m.ValueOrEmptyForPathString(\"testsuite.-time\"),\n        \"timestamp\": time.Now().In(utc).Format(\"2006-01-02T15:04:05Z\"),\n        // TODO Add the TestCases\n      }\n      fmt.Printf(\"%s\", data)\n      return json2.Marshal(data)\n    }\n    ```\n\n    This function comes directly from the `junit-runner` code and is responsible for building a piece of JSON that is used by Kibana.\n2. We also need to add this function from the `junit-runner` code which reads the XML file, converts it to JSON using `toJson()`, and then sends it onwards to our ElasticSearch instance:\n\n    ```go\n    func sendToElasticSearch(reader io.Reader, path string) error {\n      _, json, err := x2j.XmlReaderToJson(reader)\n      if err != nil {\n        return err\n      }\n      json, err = toJson(json)\n      fmt.Printf(\"Successfully annnotated JUnit result with build info\\n\")\n      if err != nil {\n        return err\n      }\n      req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(json))\n\n      req.Header.Set(\"Content-Type\", \"application/json\")\n\n      if err != nil {\n        return err\n      }\n\n      client := &http.Client{}\n      resp, err := client.Do(req)\n      if err != nil {\n        return err\n      }\n      defer resp.Body.Close()\n      if (resp.StatusCode >= 200 && resp.StatusCode < 300 ) {\n        fmt.Printf(\"Sent %s to %s\\n\", path, url)\n      } else {\n        body, _ := ioutil.ReadAll(resp.Body)\n        return errors.New(fmt.Sprintf(\"HTTP status: %s; HTTP Body: %s\\n\", resp.Status, body))\n      }\n      return nil\n    }\n    ```\n\n    Finally, we need to add a const to the go file which specifies the URL of the ElasticSearch instance. Add this to the top of `main.go` file:\n\n    ```go\n    const url = \"http://jenkins-x-reports-elasticsearch-client:9200/tests/junit/\"\n    ```\n\n3. Once you've resolved all the imports, you'll notice that we still have some errors. That's because we are missing a dependency on the `mxj` library which we are using to work with XML and JSON. Make sure you have these imports:\n\n    ```go\n      \"github.com/clbanning/mxj\"\n      \"github.com/clbanning/mxj/x2j\"\n      json2 \"encoding/json\"\n    ```\n\n    And then add this by running `dep init` which will detect our dependency and set it up properly.\n4. We'll also need to call it for each JUnit XML file we receive. And only for JUnit files. We can use the HTTP headers for this:\nJust above where we write the success message to the HTTP stream, add this code to call `sendToElasticSearch()`:\n\n    ```go\n        if r.Header.Get(\"X-Content-Type\") == \"text/vnd.junit-xml\" {\n          err = sendToElasticSearch(r.Body, r.URL.Path)\n          if err != nil {\n            renderError(w, \"CANT_SEND_TO_ELASTICSEATCH\", http.StatusInternalServerError)\n            log.Println(err)\n          }\n        }\n    ```\n\n    Push your changes up to Git to have the updated server built on Jenkins X.\n5. We now need to modify our script to send JUnit XML files with the mime type set to `text/vnd.junit-xml`. In the `junit.sh` file in the sample project modify the curl command in `upload_file()` to add the header. The whole line should look like:\n\n    ```bash\n        curl -H \"X-Content-Type: text/vnd.junit-xml\" -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$path\n    ```\n\n    If you are wondering why we use `X-Content-Type` it is to avoid breaking the multipart form upload for the file!\n6. And of course we need to remove `junit-runner`. Delete the `dashboard()` function and remove the call to it from `upload()`.\n7. Now, let's clean things up a bit more by moving the code creating the configmap from the `junit.sh` script into the `jenkins-x-reports` code. First, we need to add a dependency on kubernetes-client to our code. Edit `Gopkg.toml` and add:\n\n    ```toml\n    [[constraint]]\n      name = \"k8s.io/api\"\n      version = \"kubernetes-1.11.0\"\n\n    [[constraint]]\n      name = \"k8s.io/apimachinery\"\n      version = \"kubernetes-1.11.0\"\n    [[constraint]]\n      name = \"k8s.io/client-go\"\n      version = \"kubernetes-1.11.0\"\n    ```\n\n8. Now we can add this function to create the Kubernetes client:\n\n    ```go\n    func createKubernetesClient() (*kubernetes.Clientset, error) {\n      // creates the in-cluster config\n      config, err := rest.InClusterConfig()\n      if err != nil {\n        return nil, err\n      }\n      // creates the clientset\n      client, err := kubernetes.NewForConfig(config)\n      if err != nil {\n        return nil, err\n      }\n      return client, nil\n    }\n    ```\n\n    And call it by adding these lines to the top of `main()`:\n\n    ```go\n      client, err := createKubernetesClient()\n      if err != nil {\n        panic(err)\n      }\n    ```\n\n1. We now need to pass it to the `uploadServer()` function and change the signature of `uploadServer()` to `func uploadServer(client *kubernetes.Clientset)`, and then do the same to `uploadFileHandler()`, changing the signature to `func uploadServer(client *kubernetes.Clientset)`.\n2. Now, we can write a function that gets or creates the configmap:\n\n    ```go\n    func getOrCreateConfigMap(org string, app string, client kubernetes.Interface) (*corev1.ConfigMap, error) {\n      cmName := fmt.Sprintf(\"%s-%s-test-reports\", org, app)\n      cm, err := client.CoreV1().ConfigMaps(cmNamespace).Get(cmName, metav1.GetOptions{})\n      if err != nil {\n        return nil, err\n      }\n      if cm == nil {\n        return client.CoreV1().ConfigMaps(cmNamespace).Create(&corev1.ConfigMap{\n          ObjectMeta: metav1.ObjectMeta{\n            Name: cmName,\n          },\n        })\n        if err != nil {\n          return nil, err\n        }\n      }\n      return cm, nil\n    }\n    ```\n\n3. In order to pass the org name and the app name to the config map creator, we can pass them using HTTP Headers. We can call the config map creation from the `uploadFileHandler()`, just before we write success by adding these lines to the top of the function:\n\n    ```go\n        // Get and validate headers\n        org := r.Header.Get(\"X-Org\")\n        if org == \"\" {\n          renderError(w, \"MUST_PROVIDE_X-ORG_HEADER\", http.StatusInternalServerError)\n          log.Println(\"No X-ORG HEADER provided\")\n        }\n        app := r.Header.Get(\"X-App\")\n        if app == \"\" {\n          renderError(w, \"MUST_PROVIDE_X-APP_HEADER\", http.StatusInternalServerError)\n          log.Println(\"No X-APP HEADER provided\")\n        }\n    ```\n\n    And this to the bottom, just above the success message:\n\n    ```go\n    getOrCreateConfigMap(org, app, client)\n    ```\n\n    And before we forget, update the `junit.sh` script to send these values. The curl command should now look like `curl -H \"X-Content-Type: text/vnd.junit-xml\" -H \"X-ORG: ${ORG}\" -H \"X-APP: ${APP_NAME} -s -F upload=@$1`.\n4. Now, let's implement the function `updateConfigMap()` to perform the actual patch. Use this function:\n\n    ```go\n    func updateConfigMap(cm *corev1.ConfigMap, version string, filename string, url string, client kubernetes.Interface) (*corev1.ConfigMap, error){\n      fmt.Printf(\"Updating %s with data for %s and Data %s\\n\", cm.Name, version, cm.Data )\n      if cm.Data[version] == \"\" {\n        cm.Data[version] = fmt.Sprintf(\"|-\\n\")\n      }\n      cm.Data[version] = fmt.Sprintf(\"%s\\n    %s: %s\\n\", cm.Data[version], filename, url)\n      return client.CoreV1().ConfigMaps(cmNamespace).Update(cm)\n    }\n    ```\n\n1. Now we need to figure out the host URL for the report downloads. Use this function:\n\n    ```go\n    func getReportHost(client kubernetes.Interface) (string, error) {\n      svc, err := client.CoreV1().Services(\"jx-production\").Get(\"jenkins-x-reports\", metav1.GetOptions{})\n      if err != nil {\n        return \"\", err\n      }\n      return svc.Annotations[\"fabric8.io/exposeUrl\"], nil\n    }\n    ```\n\n2. We now need to wire it in. Add a version header to the top of the `uploadFileHandler()` function:\n\n    ```go\n    version := r.Header.Get(\"X-Version\")\n    if version == \"\" {\n      renderError(w, \"MUST_PROVIDE_X-VERSION_HEADER\", http.StatusInternalServerError)\n      log.Println(\"No X-VERSION HEADER provided\")\n    }\n    ```\n\n    And add just above the success message:\n\n    ```go\n    cm, err := getOrCreateConfigMap(org, app, client)\n\t\tif err != nil {\n\t\t\trenderError(w, \"ERROR_CREATING_CONFIG_MAP\", http.StatusInternalServerError)\n\t\t\tlog.Println(err)\n\t\t}\n\t\treportHost, err := getReportHost(client)\n\t\tif err != nil {\n\t\t\trenderError(w, \"ERROR_CREATING_CONFIG_MAP\", http.StatusInternalServerError)\n\t\t\tlog.Println(err)\n\t\t}\n\n\t\turl := fmt.Sprintf(\"%s/%s/%s/%s/%s\", reportHost, org, app, version, filename)\n\t\tcm, err = updateConfigMap(cm, version, filename, url, client )\n\t\tif err != nil {\n\t\t\trenderError(w, \"ERROR_UPDATING_CONFIG_MAP\", http.StatusInternalServerError)\n\t\t\tlog.Println(err)\n\t\t}\n    ```\n1. We can also improve the way we are storing the files now, using the headers to create the path rather than just copying the path that was used for upload by changing the variable `dir` to look more like `dir := filepath.Join(uploadPath, org, app, version)`\n2. Finally, let's tidy up `junit.sh` by removing the remnants of the patching code and adding the version header. Your final curl command should look like: `    curl -H \"X-Content-Type: text/vnd.junit-xml\" -H \"X-Org: ${ORG}\" -H \"X-App: ${APP_NAME}\" -H \"X-Version: ${VERSION}\" -s -F upload=@$1 http://jenkins-x-reports-upload.jx-production/$filename`\n\n## Progress Review\n\nWe still have some steps to complete.\n\n* Add token based authentication for the upload endpoint to prevent random pieces of code updating it (it's only accessible in the cluster anyway)\n* Allow contribution to build health (requires additional JX support `jx step post` and `jx step pre`)\n\nAt this point the JX team have also learned that we want to build some additional extension points into Jenkins X:\n\n* A `jx step post` support for a 'post build` steps. This will allow us to implement build health, as it will allow us to:\n   * Inject additional steps into the build that allow us to run e.g. `mvn surefire-report:report` without modifying the build\n* `jx step collect` for collecting build artifact that will run even if the build fails\n  * Add URLs to the `PipelineActivity` CRD\n\nTODO complete the guide\n",
            "content/en/docs/resources/guides/managing-jx/_index.md": "---\ntitle: Managing Jenkins X\nlinkTitle: Managing Jenkins X\ndescription: Managing Jenkins X\nweight: 20\naliases:\n  - /docs/resources/guides/managing-jx/\n---\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/_index.md": "---\ntitle: \"Core Tasks\"\nlinkTitle: \"Core Tasks\"\nweight: 10\ndescription: >\n  The core tasks to help you manage the Jenkins X platform.\n---\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/access-control.md": "---\ntitle: Access Control\nlinktitle: Access Control\naliases: [/rbac/]\ndescription: Managing Access Control\nweight: 10\n---\n\nJenkins X uses Role-Based Access Control (RBAC) policies to control access to its various resources.  The enforcement of the policies is provided by [Kubernetes' RBAC support](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n\n[Teams](/about/concepts/features/#teams) can have a number of [Environments](/about/concepts/features/#environments) (e.g., Dev, Staging, Production) along with dynamic [Preview Environments](/docs/reference/preview/); keeping  the [`Role`](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) and [`RoleBinding`](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) resources from [Kubernetes RBAC](https://kubernetes.io/docs/reference/access-authn-authz/rbac/) in sync with all the various namespaces and members of your team can be challenging.\n\nTo make this management easier, Jenkins X creates a new [Custom Resource](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) called [`EnvironmentRoleBinding`](/docs/reference/components/custom-resources/#environmentrolebinding) which allows you to associate a `Role` labeled with `jenkins.io/kind=EnvironmentRole` with as many `Users` or `ServiceAccounts` as you like. As Environments are created or the `Role` or `EnvironmentRoleBinding` in the Dev environment is modified, the [`role controller`](/commands/jx_controller_role/#jx-controller-role) ensures that the configuration is replicated to all the environment namespaces by creating or updating all of the `Role` and `RoleBinding`s per namespace.\n\nRoles are per Team so it is possible to have special roles per team, or to use common names for roles but have them customized for each team.\n\n## Security Implications for the admin namespace\n\nJenkins X stores various configuration and settings (e.g., `Users`, `Teams`) in the main admin namespace (`jx`). Be careful when granting roles in the default `jx` team as allowing users to edit some of these files may allow them to escalate their permissions.\nInstead of granting non-admin users access to the `jx` namespace, create teams and grant users access to those when using a shared cluster.\n\n## Default Roles\n\nJenkins X ships with a collection of default `Role` objects you can use in the `jenkins-x-platform` template.  You can create your own if you wish, but any edits may be lost when Jenkins X is upgraded.\n\n[viewer](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/viewer-role.yaml)\n: The `viewer` role allows access to read projects, builds, and logs. It does not allow access to sensitive information\n\n[committer](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/committer-role.yaml)\n: The `committer` role provides the same permissions as `viewer` and allows the user to trigger builds and import new projects.\n\n[owner](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/owner-role.yaml)\n: The owner role allows users to modify all team resources.\n\n## Adding Users\n\nTo add users use the [jx create user](/commands/jx_create_user/) command:\n\n```sh\njx create user --email \"joe@example.com\" --login joe --name \"Joe Bloggs\"\n```\n\n## Changing User Roles\n\nTo modify the roles for a user, use [jx edit userroles](/commands/jx_edit_userroles/):\n\n```sh\njx edit userrole --login joe\n```\n\nIf you omit the `--login` (`-l`) flag, you will be prompted to pick the user to edit.\n\nFor example, to make a user `joe` have the `committer` Role (and remove any existing roles):\n\n```sh\njx edit userrole --login joe --role committer\n```\n\nIf you have fine-grained roles and want to grant multiple roles to a user, you can specify the roles as a comma-separated list:\n```sh\njx edit userrole --login joe --role committer,viewer\n```\n\n\nModifying a user's roles changes the `EnvironmentRoleBinding`. The [role controller](/commands/jx_controller_role/#jx-controller-role) will replicate these changes to all the underlying Environment namespaces.\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/connectivity.md": "---\ntitle: Connectivity\nlinktitle: Connectivity\ndescription: Connectivity requirements for running Jenkins-X\nweight: 30\n---\n\nThe tables below list some of the connectivity requirements for Jenkins X. These tables only apply to JX clusters\nsecured with TLS.\n\n## Ingress\n\n| Service                   | Protocol | Port | Reason                                     |\n| ------------------------- | -------- | ---- | ------------------------------------------ |\n| Kube API Server           | HTTPS    | 443  | Allow the JX cli to connect to the cluster | \n| Nexus                     | HTTPS    | 443  | For developers using maven, to allow them to download/proxy artifacts stored in nexus |\n| Hook                      | HTTPS    | 443  | To receive webhook events from the git provider |\n| Chartmuseum               | HTTPS    | 443  | Remote clusters to download helm charts |\n\n## Egress\n\n| Service                   | Protocol | Port | Location | Reason |\n| ------------------------- | -------- | ---- | -------- | ------ |\n| Docker Images             | HTTPS    | 443  | dockerhub/gcr.io | |\n| Docker Registry           | HTTPS    | 443  | gcr.io | | \n| Docker Registry (Internal) | HTTP    | 8080 | docker-registry-pod | |\n| Nexus                     | HTTPS    | 443  | mirrored repositories | |\n| Git Provider              | HTTPS    | 443  | provider dependent | \n| Storage                   | HTTPS    | 443  | GCS/S3 | Log Storage | \n| github.com                | HTTPS    | 443  | github.com | version stream, build packs & quickstarts |\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/dns.md": "---\ntitle: DNS\nlinktitle: DNS\ndescription: Configuring DNS for external access to cluster services\nweight: 80\n---\n\nTo be able to access services hosted within your cluster we default to an [nip.io](https://nip.io/) domain. This makes it super easy to setup and manage DNS.\n\nHowever, for users who want services in the cluster to be available on a personal domain, we use external-dns which is just as easy.\n\n## external-dns\n**NOTE**: *Currently only supported on GKE*\n\n[ExternalDNS](https://github.com/kubernetes-incubator/external-dns) can be used to help expose Kubernetes Services and Ingresses by synchronizing with DNS providers.\n\nIf you are using [jx boot](/docs/install-setup/boot/) to install and configure your setup then modify your `jx-requirements.yml` file to enable `ingress.externalDNS: true` as described in the [boot ingress documentation](/docs/install-setup/boot/ingress/)\n\nOtherwise to setup your cluster using ExternalDNS use:\n\n```sh\njx install --provider gke --tekton --external-dns\n```\n\n*This will then prompt you for your domain.*\n\n```sh\n\ud83d\ude45 developer ~/go-workspace/jx(master)$ jx install --provider gke --tekton --external-dns\nWARNING: When using tekton, only kaniko is supported as a builder\nContext \"gke_<your-project-id>_europe-west1-b_<your-cluster-name>\" modified.\nset exposeController Config URLTemplate \"{{.Service}}-{{.Namespace}}.{{.Domain}}\"\nGit configured for user: **********  and email *********@****.***\nhelm installed and configured\n? Provide the domain Jenkins X should be available at: your-domain.com\n```\n\nA CloudDNS managed zone is then created within your clusters GCP Project, the record-sets which expose your services will be created by ExternalDNS within this managed zone.\n\n```sh\n\ud83d\ude45 developer ~/go-workspace()$ gcloud dns managed-zones list\nNAME                           DNS_NAME                   DESCRIPTION                       VISIBILITY\nyour-domain-com-zone           your-domain.com.           managed-zone utilised by jx       public\n```\n\n### delegation\n\nOnce the installation is complete, a list of name servers will be outputted to the terminal, please update your registrar using these name servers in order to delegate your domain onto Google CloudDNS.\n\n```sh\n\n        ********************************************************\n\n            External DNS: Please delegate your-domain.com via\n            your registrar onto the following name servers:\n                ns-cloud-d1.googledomains.com.\n                ns-cloud-d2.googledomains.com.\n                ns-cloud-d3.googledomains.com.\n                ns-cloud-d4.googledomains.com.\n\n        ********************************************************\n\n```\n\n#### [Google domains](https://domains.google)\n\nIf you're using Google Domains as your domain registrar please see [here](https://support.google.com/domains/answer/3290309?hl=en-GB&ref_topic=9018335) for details on delegating to custom name servers.\n\n### URL template\n\nAll services should be available on the same domain, of which is derived as follows:\n\n```sh\n<service>-<namespace>.<your-domain>\n```\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/storage.md": "---\ntitle: Storage\nlinktitle: Storage\ndescription: Let's save your pipeline files somewhere cloud native!\nweight: 180\naliases:\n  - /architecture/storage/\n---\n\nWhen we use a Static Jenkins Server with Jenkins X we inherit the usual Jenkins storage model; that build logs and test results and reports are stored on the Persistent Volume of the Jenkins server.\n\nHowever as we move towards a more Cloud Native Jenkins and use [Serverless Jenkins](/news/serverless-jenkins/) we need a better solution for the storage of things like logs, test results, code coverage reports etc.\n\n## Storage Extensions\n\nSo we've added a storage extension point which is used from:\n\n* storing logs when using [Serverless Jenkins](/news/serverless-jenkins/) which is done by the [jx controller build](/commands/jx_controller_build/) command\n* using the [jx step stash](/commands/jx_step_stash/) command which stashes files from a build (test or coverage reports)\n\n## Configuring Storage\n\nYou can setup the default location to use for storage. We currently support:\n\n* storing files (logs, test or coverage reports) in a branch of a git repository. e.g. they could be part of your `gh-pages` branch for your static site.\n* storing files in Cloud Storage buckets like S3, GCS, Azure blobs etc\n\nStorage uses classifications which are used to define the folder in which the kind of resources live such as\n\n* logs\n* tests\n* coverage\n\nYou can also use the special classification `default` which is used if you don't have a configuration for the classification in question. e.g. you could define a location of `default` and then just configure where `logs` go if thats different.\n\nIf you are using [jx boot](/docs/install-setup/boot/) to install and configure your setup then modify your `jx-requirements.yml` file to configure storage as described in the [boot storage documentation](/docs/install-setup/boot/storage/)\n\nOtherwise to configure the storage location for a classification and team you use the [jx edit storage](/commands/jx_edit_storage/)\n\ne.g.\n\n```sh\n# Configure the tests to be stored in cloud storage (using S3 / GCS / Azure Blobs etc)\njx edit storage -c tests --bucket-url s3://myExistingBucketName\n\n# Configure the git URL and branch of where to store logs\njx edit storage -c logs --git-url https://github.com/myorg/mylogs.git --git-branch cheese\n\n# Configure your own category\njx edit storage -c <new-category> --bucket-url gs://myExistingBucketName\n```\n\nYou can view your teams storage settings via [jx get storage](/commands/jx_get_storage/)\n\n## Using Stash\n\nInside a pipeline you can then run the [jx step stash](/commands/jx_step_stash/) command to stash files:\n\n```sh\n# lets collect some files with the file names relative to the 'target/test-reports' folder and store in a Git URL\njx step stash -c tests -p \"target/test-reports/*\" --basedir target/test-reports\n\n# lets collect some files to a specific AWS cloud storage bucket\njx step stash -c coverage -p \"build/coverage/*\" --bucket-url s3://my-aws-bucket\n```\n\n* specify the `classifier` via `-c` such as for `tests` or `coverage` etc.\n* specify the files to collect via `-p` which supports wildcards like `*`. files which will be stored with the relative directory path\n* if you want to remove a directory prefix from the stashed files, like `target/reports` you can use `--basedir` to specify the directory to create relative file names from\n\n{{< pageinfo >}}\n**NOTE** Be aware that you have to run `jx step stash` inside your git repository,\ntherefore `dir:` should be set to `/workspace/source` in your stash step.\n{{< /pageinfo >}}\n\nBy default [jx step stash](/commands/jx_step_stash/) will use your team's configured location for the classification you give. If you wish you can override the location for a stash using `--git-url` or `--bucket-url`\n\n### Unstashing\n\nIf you need to you can unstash previously stored files via [jx step unstash](/commands/jx_step_unstash/)\n\nIf you are in some Go source code and you have a URL from Jenkins X, such as a Build Log URL or Attachment from a [PipelineActivity Custom Resource](/docs/reference/components/custom-resources/) the URL could be in various forms such as:\n\n* `gs://anotherBucket/mydir/something.txt` : using a GCS bucket on GCP\n* `s3://nameOfBucket/mydir/something.txt` : using S3 bucket on AWS\n* `azblob://thatBucket/mydir/something.txt` : using an Azure bucket\n* `http://foo/bar` : file stored in git not using HTTPS\n* `https://foo/bar` : file stored in a git repo using HTTPS\n\nIf you want to easily be able to read from the URL from Go source code you can use the [`ReadURL` function](https://github.com/jenkins-x/jx/blob/e5a7943dc0c3d79c27f30aea73235f18b3f5dcff/pkg/cloud/buckets/buckets.go#L44-L45).\n\n## GKE Storage Permissions\nIn GKE your node-pool requires additional permissions to be able to write into GCS buckets,\nmore specifically the `devstorage.full_control` permission.\n\nIf you already have a cluster, you can see these permissions in your [cluster overview](https://console.cloud.google.com/kubernetes),\nunder the dropdown `Permissions`.\n\nThe description of the field `Storage` should be `Full`,\nby default it is `Read Only`.\n\nThere are two ways to change your permissions,\neither you create a new cluster with the appropriate permissions\nor you just migrate the node-pool, if you already have a running cluster.\n\n### Create a new GKE Cluster with Full-Control\n\nTo create a new cluster with the right permissions,\nyou need to use the `--scopes` flag with the `storage-full` argument, as seen here:\n\n```bash\ngcloud container clusters create <name> --machine-type <type> --zone <zone> --scopes=storage-full\n```\n\n### Migrate to a node-pool with Full-Control\n\nMigrating to a new node-pool is quite simple, it's done in 2 steps!\n\nFirst create a new node-pool with the required permissions:\n\n```bash\ngcloud container node-pools create <node-pool-name> --cluster <cluster-name> --machine-type <type> --scopes=storage-full\n```\n\nNow delete the old node-pool, all your `Pods` will\nbe rescheduled on the new node-pool through Kubernetes magic!\n\n```bash\ngcloud container node-pools delete <node-pool-name>\n```\n",
            "content/en/docs/resources/guides/managing-jx/common-tasks/tls.md": "---\ntitle: TLS\nlinktitle: TLS\ndescription: Configuring TLS with Jenkins X\ndate: 2019-08-28\nweight: 190\n---\n\nAs documented in the [Ingress](/docs/install-setup/boot/ingress/) section of the Boot documentation, you can configure a global default certificate for all Jenkins X ingresses.\nThis requires using [DNS01](https://cert-manager.io/docs/configuration/acme/dns01/) for a wildcard certificate, or manually adding and updating your certificate.\nIn case this is not practical, and you want to generate one certificate per ingress using [http01](https://cert-manager.io/docs/configuration/acme/http01/), you can specify the `secretName` to be used for each ingress in the `values.yaml` as described below:\n\n```yaml\ningress:\n  annotations:\n    cert-manager.io/cluster-issuer: letsencrypt-prod\nhook:\n  ingress:\n    tls:\n     secretName: tls-hook\nnexus:\n  ingress:\n    tls:\n     secretName: tls-nexus\n...\n```\n",
            "content/en/docs/resources/guides/managing-jx/old/_index.md": "---\ntitle: \"Deprecated documentation\"\nlinkTitle: \"Deprecated\"\nweight: 59\ndescription: >\n  Documentation from the pre-boot approach to managing Jenkins X\n---\n\n**NOTE** the following documentation is now deprecated. It represents how we used to install and configure Jenkins X before we moved to [jx boot](/docs/getting-started/setup/boot/) as the strategic approach.\n",
            "content/en/docs/resources/guides/managing-jx/old/config.md": "---\ntitle: Configuration\nlinktitle: Configuration\ndescription: Customising your Jenkins X installation\ndate: 2016-11-01\npublishdate: 2016-11-01\nlastmod: 2018-01-02\ncategories: [getting started]\nkeywords: [install,kubernetes]\naliases:\n  - /getting-started/config\n  - /docs/resources/guides/managing-jx/common-tasks/config/\nweight: 50\n---\n\nJenkins X should work out of the box with smart defaults for your cloud provider. e.g. Jenkins X automatically uses ECR if you are using AWS or EKS.\n\nHowever you can configure values in the underlying helm charts used by Jenkins X.\n\nTo do this you need to create a `myvalues.yaml` file in the current directory you are in when you run either [jx create cluster](/commands/jx_create_cluster/) or [jx install](/commands/deprecation/)\n\nThen this YAML file can be used to override any of the underlying [`values.yaml`](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml) in any of the [charts](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/requirements.yaml) in Jenkins X.\n\n## Making changes after the install\n\nOnce you have installed you can make more changes via [jx upgrade platform](/commands/deprecation/) which will reuse your `myvalues.yaml` file.\n\nOr if you use [GitOps management](/docs/resources/guides/managing-jx/common-tasks/manage-via-gitops/) you can just create a Pull Request on your Development environment git repository.\n\n## Nexus\n\ne.g. if you wish to disable Nexus being installed and instead service link to a separate nexus at a different host name you can use this `myvalues.yaml`:\n\n```yaml\nnexus:\n  enabled: false\nnexusServiceLink:\n  enabled: true\n  externalName: \"nexus.jx.svc.cluster.local\"\n```\n\n## ChartMuseum\n\nTo disable and service link chart museum add:\n\n```yaml\nchartmuseum:\n  enabled: false\nchartmuseumServiceLink:\n  enabled: true\n  externalName: \"jenkins-x-chartmuseum.jx.svc.cluster.local\"\n```\n\n## Jenkins Image\n\nWe ship with a default Jenkins docker image [jenkinsxio/jenkinsx](https://hub.docker.com/r/jenkinsxio/jenkinsx/) with Jenkins X which has all of our required plugins inside.\n\nIf you wish to add your own plugins you can create your own `Dockerfile` and image using our base image like this:\n\n```dockerfile\n# Dockerfile for adding plugins to Jenkins X\nFROM jenkinsxio/jenkinsx:latest\n\nCOPY plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/openshift-plugins.txt\n```\n\nThen add your custom plugins to `plugins.txt` locally of the form:\n\n```txt\nmyplugin:1.2.3\nanotherplugin:4.5.6\n```\n\nOnce you have built and released your image via CI/CD you can then use it in your Jenkins X installation.\n\nTo configure Jenkins X to use your custom image you can specify your own Jenkins image via a `myvalues.yaml` file:\n\n```yaml\njenkins:\n  Master:\n    Image: \"acme/my-jenkinsx\"\n    ImageTag: \"1.2.3\"\n```\n\nThere is an example OSS project [jenkins-x/jenkins-x-openshift-image](https://github.com/jenkins-x/jenkins-x-openshift-image) you could use as a template which creates a new Jenkins image to add OpenShift specific plugins and configuration for using Jenkins X on OpenShift.\n\n## Docker Registry\n\nWe try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.\n\nHowever you can also specify this via the `--docker-registry` option when running  [jx create cluster](/commands/jx_create_cluster/) or [jx install](/commands/deprecation/)\n\ne.g.\n\n```sh\njx create cluster gke --docker-registry eu.gcr.io\n```\n\nThough if you use a different Docker Registry you will probably need to [also modify the secret for connecting to docker](/docs/reference/components/docker-registry).\n",
            "content/en/docs/resources/guides/managing-jx/old/create-cluster.md": "---\ntitle: Create cluster documentation\nlinktitle: Create cluster\ndescription: How to create a new Kubernetes cluster with Jenkins X installed\nweight: 110\n---\n\n\nTo create a new Kubernetes cluster with Jenkins X installed use the  [jx create cluster](/commands/jx_create_cluster/) command.\n\nA number of different public cloud providers are supported as shown below.\n\n__For the best getting started experience we currently recommend using Google Container Engine (GKE)__. The Google Cloud Platform offers a $300 free credit if you don't have a Google Cloud account.  See https://console.cloud.google.com/freetrial\n\nHere's a little demo showing GKE, AKS and Minikube (not supported anymore) in parallel. It can take some time to start on different machines/clouds so please be patient!\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ELA4tytdFeA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n## Using Google Cloud (GKE)\n\nFirst make sure you have created/selected a Project in the [Google Cloud Console](https://console.cloud.google.com/).\n\n<img src=\"/images/quickstart/gke-select-project.png\" class=\"img-thumbnail\">\n\nCurrently the best experience for running Jenkins X is on Google Container Engine (GKE).\n\nNow [download](/docs/getting-started/setup/install/) the `jx` CLI which is used to create and interact with the Jenkins X cluster.\n\nNow use the [jx create cluster gke](/commands/jx_create_cluster_gke/) command:\n\n    jx create cluster gke\n\nIf you wish to name your cluster and provide your own admin password you can run:\n\n    jx create cluster gke --default-admin-password=mySecretPassWord123 -n myclustername\n\nThen follow all the prompts on the console (mostly just hitting enter will do).\n\n## Using the Google Cloud Shell\n\nThe simplest way to install Jenkins X on Google Cloud is using the [Google Cloud Shell](https://console.cloud.google.com/) as it already comes with most of the things you may need to install (`git, gcloud, kubectl` etc).\n\nFirst you need to open the Google Cloud Shell via the button in the toolbar:\n\n<img src=\"/images/quickstart/gke-start-shell.png\" class=\"img-thumbnail\">\n\nThen you need to download the `jx` binary:\n\n```sh\ncurl -L https://storage.googleapis.com/artifacts.jenkinsxio.appspot.com/binaries/cjxd/latest/jx-linux-amd64.tar.gz | tar xzv\nsudo mv jx /usr/local/bin\n```\n\nNow use the [jx create cluster gke](/commands/jx_create_cluster_gke/) command:\n\n```sh\njx create cluster gke --skip-login\n```\n\nIf you wish to name your cluster and provide your own admin password you can run:\n\n```sh\njx create cluster gke --skip-login  --default-admin-password=mySecretPassWord123 -n myclustername\n```\n\n## The `jx create cluster gke` process\n\nThe Jenkins X cluster creation process is a multi-step interactive\nprocess performed via command-line interface and your desktop web\nbrowser.\n\n1.  Open a terminal or command prompt window (or the GCP Cloud Shell in\n    your web browser) and commence the Jenkins X installation process.\n    In this example, the Google Kubernetes Engine is used as the\n    Kubernetes provider:\n\n```sh\njx create cluster gke\n```\n\n2.  The installation is interactive, stepping you through the entire\n    installation and configuration of the Kubernetes cluster creation\n    process.\n\n    After automatically installing the `helm` command for package\n    management and `gcloud` command for cluster configuration on\n    kubernetes, the installer prompts you for your administrative\n    password to complete the installation process.\n\n3.  A browser window appears prompting you to choose the email address\n    associated with your Google Cloud Platform account, then prompts you\n    to accept rights permission to associate your GCP account\n\n4.  The installer prompts you to choose a `regional` or `zonal` cluster:\n\n    -   Regional clusters spread kubernetes resources in a region to\n        multiple zones with each zone having a cluster master.\n\n    -   Zonal clusters run multiple kubernetes resources to multiple\n        cluster nodes using one cluster master.\n\n5.  The installer prompts you for your Cloud node machine type:\n\n    -   Standard: a machine that scales CPU and Memory evenly, (1 vCPU\n        with 3.75GB RAM, 2 vCPU with 7.5GB RAM, and so on).\n\n    -   High-memory: a machine with higher memory allocation for each\n        CPU (2 vCPU with 13GB RAM, 4 vCPU with 26GB RAM, and so on).\n\n    -   High-CPU: a machine with higher vCPU allocation relative to\n        Memory (2 vCPU 1.8GB RAM, 4 vCPU 3.6GB RAM, and so on).\n\n6.  The installer asks to enter the *minimum* quantity of nodes for the\n    cluster. The recommended minimum for a Jenkins X cluster is 3 nodes\n    for each cluster zone.\n\n7.  The installer asks you to enter the *maximum* quantity of nodes per\n    zone. The recommended maximum for Jenkins X is 5 nodes per cluster\n\n8.  The installer asks if you want to use *preemptible VMs*. Preemptible\n    VMs are used typically for less than 24 hours for specific tasks\n    such as short-term compute cluster calculations, media rendering or\n    transcoding, financial industry asset performance modeling, and\n    others. It is *not* recommended for typical Jenkins X deployments.\n\n9.  The installer asks if you want access to Google Cloud Storage or\n    Google Container Registry. If you enter `Y` for yes, the installer\n    creates Oauth enabled scopes for accessing Google Cloud Storage and\n    Google Cloud Registry API authentication and access. Default is\n    `no`.\n\n10. The installer asks if you want to enable Kaniko for building\n    container images. `kaniko` is used to create Docker Images without\n    access to a `docker` daemon. Jenkins X default is `no`.\n\n11. The installer continues the installation process to\n    post-installation configuration. The first post-installation prompt\n    searches for a configured *ingress controller*. An ingress\n    controller works with an external load balancer (such as Google\n    Cloud Load Balancing) to control various traffic types such as\n    HTTP(S), SSL, TCP and others on any externally accessible network\n    port. Jenkins X requires this in typical deployments, so the default\n    is `yes`.\n\n12. You are then prompted with creating a DNS service to use for your\n    cluster load balancer. If your network does not provide custom DNS,\n    the Jenkins X installer will create a simple wildcard DNS services\n    to translate to your cluster load balancer and allow access to the\n    nodes from the Internet. By default, the installer uses `nip.io` to\n    create a domain based on your IP address.\n\n    For example, if your external internet IP address is 172.31.0.2, the\n    installer will assign the domain name `172.31.0.2.nip.io` so that\n    users and Jenkins X administrators can access the cluster.\n\n13. The installer asks for a local git user for GitHub access:\n    1.  Enter the GitHub User Name you want to associate to the cluster\n\n    2.  Choose whether or not you want to use GitHub as the CI/CD\n        pipeline `git` server. The default is `yes`.\n\n    3.  When prompted, copy and paste the provided URL into a browser\n        and create a GitHub API token for use in your cluster.\n\n    4.  Choose whether you want to use Serverless Jenkins X Pipelines\n        with Tekton or traditional Jenkins with Jenkinsfile. Choose\n        Serverless Jenkins X Pipelines with Tekton, as that method\n        supports cloud native CI/CD declarative pipelines for kubernetes\n        clusters using Tekton custom resources.\n\n    5.  The installer creates an autogenerated password for\n        administrative access to the cluster. Copy that password and\n        paste it for later access.\n\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n### Connecting to the cluster from your laptop\n\nIf you wish to work with the Jenkins X cluster from your laptop then click on the `Connect` button on the [Kubernetes Engine page](https://console.cloud.google.com/kubernetes/list) in the [Google Console](https://console.cloud.google.com/)\n\n<img src=\"/images/quickstart/gke-connect.png\" class=\"img-thumbnail\">\n\nYou should now be able to use the `kubectl` and `jx` CLI tools on your laptop to talk to the GKE cluster.\n\n### Using Google Cloud from your laptop\n\nUse the [jx create cluster gke](/commands/jx_create_cluster_gke/) command:\n\n```sh\njx create cluster gke --verbose\n```\n\nOr if you are already logged in by previously using `gcloud init` or `gcloud auth login`:\n\n```sh\njx create cluster gke --skip-login --verbose\n```\n\nThose commands assume you have a google account and you've set up a default project that you can use to create the kubernetes cluster within.\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n## Using Amazon (AWS)\n\nIf you are using AWS be sure to check out the detailed blog on [Continuous Delivery with Amazon EKS and Jenkins X](https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/) by [Henryk Konsek](https://twitter.com/hekonsek) which goes into lots of detail on how to setup AWS + EKS with Jenkins X.\n\nWe support both `kops` or `eks` to create your Kubernetes cluster with Jenkins X where EKS is the most strategic direction; increasingly AWS will manage more of the kubernetes side for you with EKS.\n\n### Ingress options\n\nOn AWS the ideal setup is to use a Route 53 DNS wildcard CNAME to point `*.somedomain` at your ELB or NLB host name; then when prompted by `jx` you install `somedomain` (where `somedomain` is an actual DNS domain/subdomain you own).\n\nThen all the `Ingress` resources for any exposed service in any namespace will appear as `mysvc.myns.somedomain` - whether for things like Jenkins or Nexus or for your own microservices or Preview Environments.\n\nUsing wildcard DNS pointing to your ELB/NLB also means you'll be able to use all the availability zones on AWS.\n\nThe `jx` command will ask you if you want to automate the setup fo the Route 53 wildcard CNAME. If you want to do it yourself you need to point to the ELB host name defined via:\n\n```sh\nkubectl get service -n kube-system jxing-nginx-ingress-controller  -oyaml | grep hostname\n```\n\n#### Avoiding DNS\n\nIf you want to kick the tires of Jenkins X without going to the trouble of getting a DNS domain name to use and setting up wildcard DNS you can instead use an NLP and use one of the IP addresses of one of the availability zones as your domain via `$IP.ip`.\n\nThis is not really intended for real production installations; but can be a quick way to get started trying out Jenkins X.\n\nWhen using `jx create cluster aws`, `jx create cluster eks` or `jx install --provider=(aws|eks)` you are prompted if you want to use DNS and optionally setup a wildcard DNS CNAME record on Route 53; if not we are assuming you're gonna avoid DNS to kick the tires on a single availability zone IP address by resolving the NLB host name to one of the availability zone IP addresses.\n\n### EKS\n\nUse the [jx create cluster eks](/commands/jx_create_cluster_eks/) command:\n\n```sh\njx create cluster eks\n```\n\nUnder the covers this will download and use the [eksctl](https://eksctl.io/) tool to create a new EKS cluster, then it'll install Jenkins X on top.\n\n### Kops\n\nUse the [jx create cluster aws](/commands/deprecation/) command:\n\n```sh\njx create cluster aws\n```\n\nThis will use [kops](https://github.com/kubernetes/kops) on your Amazon account to create a new kubernetes cluster and install Jenkins X.\n\nTo try this out we recommend you follow the [AWS Workshop for Kubernetes](https://github.com/aws-samples/aws-workshop-for-kubernetes/tree/master/01-path-basics/101-start-here#create-aws-cloud9-environment) to set up an AWS Cloud9 IDE session.\n\nThen create a new terminal in Cloud9 and try these commands:\n\n```sh\ncurl -L https://github.com/jenkins-x/jx/releases/download/v{{.Site.Params.release}}/jx-linux-amd64.tar.gz | tar xzv\nsudo mv jx /usr/local/bin\njx create cluster aws\n```\n\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n## Using Azure (AKS)\n\nBefore you start you may find [this blog helpful](https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/).\n\nUse the [jx create cluster aks](/commands/jx_create_cluster_aks/) command:\n\n```sh\njx create cluster aks\n```\n\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n## Using Oracle (OKE)\n\nUse the [jx create cluster oke](/commands/deprecation/) command:\n\n```sh\njx create cluster oke\n```\n\nThis will use [oci](https://github.com/oracle/oci-cli) on your Oracle Cloud Infrastructure account to create a new OKE cluster and install Jenkins X.\n\nPlease add your $HOME/bin to $PATH otherwise jx will have issue invoking OCI CLI command. If you have already installed OCI CLI, please make sure it is in $PATH.\n\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n## Using IBM Cloud Kubernetes Service (IKS)\n\nUse the [jx create cluster iks](/commands/jx_create_cluster_iks/) command:\n\n```sh\njx create cluster iks --apikey=<IBM Cloud API Key>\n```\n\nThis will use [IBM Cloud CLI](https://console.bluemix.net/docs/cli/index.html#overview) on your IBM Cloud Infrastructure account to create a new IKS cluster and install Jenkins X.\n\nYou need to make sure you have the $HOME/.jx/bin folder in your $PATH.\n\nNow **[develop apps faster with Jenkins X](/docs/getting-started/)**.\n\n## Troubleshooting\n\nIf you hit any issues installing Jenkins X then please check out our [troubleshooting guide](/docs/resources/faq/) or [let us know](/community/) and we'll try our best to help.\n",
            "content/en/docs/resources/guides/managing-jx/old/create-custom-builder.md": "---\ntitle: Create custom Builder\nlinktitle: Create custom Builder\ndescription: How to create a custom Builder for Jenkins X using static master\ndate: 2013-07-01\npublishdate: 2013-07-01\ncategories: [getting started]\nkeywords: [install,builder]\nweight: 260\naliases:\n  - /getting-started/create-custom-builder\n---\n\nIn Jenkins X, using the deprecated static master installation type, it is possible to create your custom Builders (aka [POD templates](https://github.com/jenkinsci/kubernetes-plugin)) or overwrite existing ones.\nTo do so, you need to base your Docker image on this [builder-base](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common) image.\nThis image contain a number of pre-installed tools which get constantly updated and published to [Docker Hub](https://hub.docker.com/r/jenkinsxio/builder-base/).\n\n## Create a custom Builder from scratch\n\n### Builder image\n\nFirst you need to create a docker image for your builder. For instance a starting `Dockerfile` can look like this:\n\n```dockerfile\nFROM jenkinsxio/builder-base:latest\n\n# Install your tools and libraries\nRUN yum install -y gcc openssl-devel\n\nCMD [\"gcc\"]\n```\n\nNow you can build the image and publish it to your registry:\n\n```sh\nexport BUILDER_IMAGE=<YOUR_REGISTRY>/<YOUR_BUILDER_IMAGE>:<VERSION>\ndocker build -t ${BUILDER_IMAGE} .\ndocker push ${BUILDER_IMAGE}\n```\n\nDo not worry, you do not have to run these steps manually every time when a new image needs to be built.\nJenkins X can manage this for you. You just need to push your `Dockerfile` in a repository similar with [this](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-go) one.\nAdjust the `Jenkinsfile` according with your organization and application name, and then import the repository into your Jenkins X platform with:\n\n```sh\njx import --url <REPOSITORY_URL>\n```\n\nFrom now on, every time you push a change, Jenkins X will build and publish automatically the image.\n\n### Install the Builder\n\nYou can now install your builder either when you install Jenkins X or upgrade it.\n\nCreate a `myvalues.yaml` file in your `~/.jx/` folder with the following content:\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      MyBuilder:\n        Name: mybuilder\n        Label: jenkins-mybuilder\n        volumes:\n        - type: Secret\n          secretName: jenkins-docker-cfg\n          mountPath: /home/jenkins/.docker\n        EnvVars:\n          JENKINS_URL: http://jenkins:8080\n          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_NAME: jenkins-x-bot\n          GIT_COMMITTER_NAME: jenkins-x-bot\n          XDG_CONFIG_HOME: /home/jenkins\n          DOCKER_CONFIG: /home/jenkins/.docker/\n        ServiceAccount: jenkins\n        Containers:\n          Jnlp:\n            Image: jenkinsci/jnlp-slave:3.14-1\n            RequestCpu: \"100m\"\n            RequestMemory: \"128Mi\"\n            Args: '${computer.jnlpmac} ${computer.name}'\n          Dlang:\n            Image: <YOUR_BUILDER_IMAGE>\n            Privileged: true\n            RequestCpu: \"400m\"\n            RequestMemory: \"512Mi\"\n            LimitCpu: \"1\"\n            LimitMemory: \"1024Mi\"\n            Command: \"/bin/sh -c\"\n            Args: \"cat\"\n            Tty: true\n```\n\nReplace the builder name and image accordingly.\n\nYou can proceed now with the Jenkins X installation, the builder will be automatically added to the platform.\n\n### Use the Builder\n\nNow that your builder was installed in Jenkins, you can easily reference it in a `Jenkinsfile`:\n\n```Groovy\npipeline {\n    agent {\n        label \"jenkins-mybuilder\"\n    }\n    stages {\n      stage('Build') {\n        when {\n          branch 'master'\n        }\n        steps {\n          container('mybuilder') {\n              // your steps\n          }\n        }\n      }\n    }\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n```\n\n## Overwrite existing Builders\n\nJenkins X comes with a number of [pre-installed builders](https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/jenkins-x-platform/values.yaml) which you can overwrite if required during installation or upgrade.\n\nYou just need to build your custom image either based on the [builder-base](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common) image or the [builder image](https://hub.docker.com/u/jenkinsxio/) you want to overwrite. See more details above.\n\nThen you can create a `myvalues.yaml` file in your `~/.jx/` folder with the following content:\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      Maven:\n        Containers:\n          Maven:\n            Image: <YOUR_REGISTRY>/<YOUR_MAVEN_BUILDER_IMAGE>:<VERSION>\n      Nodejs:\n        Containers:\n          Nodejs:\n            Image: <YOUR_REGISTRY>/<YOUR_NODEJS_BUILDER_IMAGE>:<VERSION>\n      Go:\n        Containers:\n          Go:\n            Image: <YOUR_REGISTRY>/<YOUR_GO_BUILDER_IMAGE>:<VERSION>\n```\n\nYou can proceed now with the Jenkins X installation, the builder will  be added automatically to the platform.\n",
            "content/en/docs/resources/guides/managing-jx/old/install-on-cluster-what-happens.md": "---\ntitle: What happens during installation\nlinktitle: What happens during installation\ndescription: What does install Jenkins X actually do\ndate: 2018-07-10\npublishdate: 2018-07-10\nlastmod: 2018-07-10\ncategories: [getting started]\nkeywords: [install,kubernetes]\nweight: 210\n---\n\nThe Jenkins X CLI will do the following when installing the Jenkins X platform:\n\n##  Install client binaries to manage your cluster\n\n{{< alert >}}\nIf you are running on Mac OS X, Jenkins X is using `Homebrew` to install the various CLI. It will install it if not present.\n{{< /alert >}}\n\n### Install kubectl\n\n[kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/) is the CLI of Kubernetes. It allows you to interact with your Kubernetes cluster via the API server. \n\n### Install Helm\n\nJenkins X will install the [helm](https://github.com/kubernetes/helm) client - (either  helm *2.x* or helm *3*), if it does not already exist in your command shell path. Helm is used for packaging applications/resources (called charts) on Kubernetes, and is rapidly becoming the default standard for doing so.\n\n### Install cloud provider CLI\n\nIf you are using a public cloud, there will be an associated CLI for interacting with it. When install is called via the [jx create cluster](/docs/getting-started/setup/create-cluster/) command, the associated binary to your cloud provider will also be installed, if not present on your command shell path.\n\n- `az` for AKS cluster (Azure)\n- `gcloud` for GKE cluster (Google Cloud)\n- `kops` for AWS cluster (Amazon Web Services)\n- `eksctl` for [AWS EKS](https://aws.amazon.com/eks/) cluster\n- `oci` for OKS cluster (Oracle Cloud)\n\nLast but not least, Jenkins X will install the VM driver when required, typically `xhyve` for Mac OS X or `hyperv` for Windows. Other drivers (VirtualBox, VMWare...) must be installed manually.\n\n## Create the Kubernetes cluster\n\nThe cluster is then created using the cloud provider CLI (for example `az aks create` command  for Azure).\n\n## Setup the Jenkins X platform\n\n### Create the Jenkins X namespace\n\nThen Jenkins X install will create a namespace for the Jenkins X platform where all the Jenkins X infrastructure components will reside. The default is *jx*\n\n### Install Tiller (optional, only for Helm 2)\n\nTiller, the server part of Helm, is then deployed on the *kube-system* namespace. [Helm](https://www.helm.sh/) is THE package manager of Kubernetes and is used subsequently to deploy all other components of Jenkins X.\n\n### Setup the Ingress controller\n\nIn a Kubernetes cluster, services and pods have IPs that are only routable from by the cluster network. In order for traffic to flow into the cluster, an Ingress must be created. An ingress is a collection of rules for routing traffic to your services inside Kubernetes. The ingress rules are configured in an ingress resource held on the Kubernetes API server, and an ingress controller has to be created to fulfil those ingress rules. Jenkins X does all this for you by setting up an ingress controller and associated backend plus ingress rules for the following services (once deployed):\n\n- chartmuseum\n- docker-registry\n- jenkins\n- monocular\n- nexus\n\n{{< alert >}}\nBy default, Jenkins X will expose the ingress via the *nip.io* domain and generate self-signed certificates. You can easily adapt them by using our own custom domain and certificate after the installation with `jx upgrade ingress --cluster`\n{{< /alert >}}\n\n### Configure git source repository\n\nJenkins X requires a git repository provider to be able to create the environment repositories. It defaults to GitHub if you did not provide a *git-provider-url* parameter. You need to provide a username and a token that would be used to interact with the git, especially Jenkins.\n\n## Create Admin secrets\n\nJenkins X generates an administration password for Monocular/Nexus/Jenkins and save it in secrets. It then retrieves git secrets for the helm install (so they can be used in the pipelines).\n\n### Clone the cloud environments repo\n\nThe [cloud environment repository](https://github.com/jenkins-x/cloud-environments) holds all the specific configuration and encrypted secrets that will be applied to the Jenkins Platform on your Kubernetes cluster. The secrets are encrypted and unencrypted by the Helm package manager. \n\n## Install the Jenkins X platform\n\nThe [Jenkins X Platform](https://github.com/jenkins-x/jenkins-x-platform) holds the Helm charts for installing the components that provide the Jenkins X true CD solution. These include \n\n- [Jenkins](https://github.com/jenkinsci/jenkins) a CI/CD pipeline solution\n- [Nexus](https://www.sonatype.com/nexus-repository-oss) an artifact repository\n- [ChartMuseum](https://github.com/kubernetes-helm/chartmuseum) - a Helm Chart repository\n- [Monocular](https://github.com/kubernetes-helm/monocular) which provides a Web UI for searching and discovering charts deployed into your cluster via Jenkins X.\n",
            "content/en/docs/resources/guides/managing-jx/old/install-on-cluster.md": "---\ntitle: Install on Kubernetes\nlinktitle: Install on Kubernetes\ndescription: How to install Jenkins X on an existing Kubernetes cluster\ndate: 2016-11-01\npublishdate: 2016-11-01\nlastmod: 2018-01-02\ncategories: [getting started]\nkeywords: [install,kubernetes]\nweight: 130\naliases:\n  - /getting-started/install-on-cluster\n  - /docs/getting-started/install-on-cluster\n  - /docs/resources/guides/managing-jx/common-tasks/install-on-cluster\n---\n\nJenkins X can be installed on 1.8 or later of Kubernetes. The requirements are:\n\n* RBAC is enabled\n* Your Kubernetes cluster has a [default storage class](https://kubernetes.io/docs/concepts/storage/storage-classes/) setup so that `Persistent Volume Claims` can be bound to `Persistent Volumes`\n* If not using the `aws` or `eks` providers, then we need to make sure that insecure Docker registries are enabled. This is so that pipelines can use a Docker registry running inside the Kubernetes cluster (which typically is not public, so no https support). You can modify your pipelines to use other registries later.\n* A cluster with at least 4 vCPUs in addition to the master node (e.g. 2 m4.large worker nodes + 1 m4.large master node)\n\n### Validating cluster conformance\n\nYou can validate that your cluster is compliant with Jenkins X by executing the following command:\n\n    jx compliance run\n\nIt will run the Kubernetes conformance tests provided by [sonobuoy](https://github.com/heptio/sonobuoy). Typically, the execution takes up to an hour.\nYou can check the status at any time with this command:\n\n    jx compliance status\n\nWhen the compliance tests are completed, you can see the results with:\n\n    jx compliance results\n\nIdeally, you should not see any failed tests in the output.\n\nAll the resources created by the conformance tests can be cleaned up with:\n\n    jx compliance delete\n\n## Using AWS\n\nIf you are using AWS, be sure to check out the detailed blog on [Continuous Delivery with Amazon EKS and Jenkins X](https://aws.amazon.com/blogs/opensource/continuous-delivery-eks-jenkins-x/) by [Henryk Konsek](https://twitter.com/hekonsek) which goes into lots of detail on how to setup AWS + EKS with Jenkins X.\n\n<!--\nTODO Terraform \nIf you want to go further with infrastructure as code you can follow this\n[guide](/docs/resources/guides/managing-jx/common-tasks/aws-terraform-install-gitops/) about setting up an EKS cluster and other\nrequirements in AWS with Terraform and then installing Jenkins X on it using GitOps for the\ninstallation.\n-->\n\n### Ingress on AWS\n\nOn AWS, the ideal setup is to use a Route 53 DNS wildcard CNAME to point `*.somedomain` at your ELB or NLB host name. Then, when prompted by `jx`, you install `somedomain` (where `somedomain` is an actual DNS domain/subdomain you own).\n\nThen, all the `Ingress` resources for any exposed service in any namespace will appear as `mysvc.myns.somedomain` - whether for things like Jenkins or Nexus or for your own microservices or Preview Environments.\n\nUsing wildcard DNS pointing to your ELB/NLB also means you'll be able to use all the availability zones on AWS.\n\nThe `jx` command will ask you if you want to automate the setup fo the Route 53 wildcard CNAME. If you want to do it yourself, you need to point to the ELB host name defined via:\n\n```\nkubectl get service -n kube-system jxing-nginx-ingress-controller  -oyaml | grep hostname\n```\n\n#### Avoiding DNS\n\nIf you want to kick the tires of Jenkins X without going to the trouble of getting a DNS domain name to use and setting up wildcard DNS, you can instead use an NLB and use one of the IP addresses of one of the availability zones as your domain via `$IP.ip`.\n\nThis is not really intended for real production installations. However, it can be a quick way to get started trying out Jenkins X.\n\nWhen using `jx install --provider=(aws|eks)`, you are prompted if you want to use DNS and optionally setup a wildcard DNS CNAME record on Route 53. If not, we assume you're going to avoid DNS to kick the tires on a single availability zone IP address by resolving the NLB host name to one of the availability zone IP addresses.\n\n### Getting registries to work on AWS with cluster set up with kops\n\nThe default on AWS is to use ECR as the Docker container registry. For this to work, the nodes need permission to upload images to ECR. If you instead want to use the embedded Docker registry of Jenkins X inside your Kubernetes cluster, you will need to enable insecure Docker registries.\n\n#### Give nodes permission to use ECR\n\nDo the following:\n\n```sh\nkops edit cluster\n```\n\nThen make sure the YAML has this `additionalPolicies` entry inside the `spec` section:\n\n```yaml\n...\nspec:\n  additionalPolicies:\n    node: |\n      [\n        {\n        \"Effect\": \"Allow\",\n        \"Action\": [\"ecr:InitiateLayerUpload\", \"ecr:UploadLayerPart\",\"ecr:CompleteLayerUpload\",\"ecr:PutImage\"],\n        \"Resource\": [\"*\"]\n        }\n      ]\n```\n\nNow to make this change active on your cluster type:\n\n```sh\nkops update cluster --yes\n```\n\nYou should now be good to go!\n\n\n#### Enabling insecure registries on kops ####\n\nDo the following:\n\n```sh\nkops edit cluster\n```\n\nThen make sure the YAML has this `docker` entry inside the `spec` section:\n\n```yaml\n...\nspec:\n  docker:\n    insecureRegistry: 100.64.0.0/10\n    logDriver: \"\"\n```\n\nThat IP range, `100.64.0.0/10`, works on AWS, but you may need to change it on other Kubernetes clusters. It depends on the IP range of Kubernetes services.\n\nThen save the changes. You can verify your changes via:\n\n```sh\nkops get cluster -oyaml\n```\n\nand looking for the `insecureRegistry` section.\n\nNow to make this change active on your cluster type:\n\n```sh\nkops update cluster --yes\nkops rolling-update cluster --yes\n```\n\nYou should now be good to go!\n\n## Installing Jenkins X on a cloud\n\nTo install Jenkins X on an existing Kubernetes cluster, you can then use the [jx install](/commands/deprecation/) command:\n\n```sh\njx install\n```\n\nIf you know the provider, you can specify the provider on the command line. e.g.\n\n```sh\njx install --provider=aws\n```\n\n## Installing Jenkins X on-premises\n\n__Prerequisits__\n- Kubernetes > 1.8\n- RBAC enabled\n- A default cluster [dynamic storage class](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/) for provisioning persistent volumes.\n\nWhen using an on-premises Kubernetes cluster, you can use this command line:\n\n```sh\njx install --provider=kubernetes --on-premise\n```\n\nThis will default the argument for `--external-ip` to access services inside your cluster to use the Kubernetes master IP address.\n\nIf you wish to use a different external IP address, you can use:\n\n```sh\njx install --provider=kubernetes --external-ip 1.2.3.4\n```\n\nOtherwise, the `jx install` will try and wait for the Ingress Controllers `Service.Status.LoadBalancer.Ingress` to resolve to an IP address - which can fail on-premises.\n\nIf you already have an ingress controller installed, then try:\n\n```sh\njx install --provider=kubernetes \\\n  --skip-ingress \\\n  --external-ip=10.20.30.40 \\\n  --domain=10.20.30.40.nip.io\n```\n\nIf you do not know the domain or want it extracted from your Ingress deployment, try\n\n```sh\njx install --provider=kubernetes --external-ip 10.123.0.17 \\\n  --ingress-service=$(yoursvcname) \\\n  --ingress-deployment=$(yourdeployname) \\\n  --ingress-namespace=kube-system\n```\n\nIf you want an explanation of what the [jx install](/commands/deprecation/) command does, you can read [what happens with the install](../install-on-cluster-what-happens/)\n\n## Installing Jenkins X on IBM Cloud Private\n\n__Prerequisites__\n- IBM Cloud Private version 3.1.0 is compatible with Jenkins X version 1.3.572.\n- You might have to clean up with the `helm delete --purge jenkins-x` or `jx uninstall` commands. However, the `jx uninstall` command might not correctly pick up Helm releases at the `default` namespace if you point to the `kube-system` Tiller.\n\nIBM Cloud Private includes a Docker registry and ingress controller. You can install Jenkins X into IBM Cloud Private with the following command:\n\n```sh\njx install --provider=icp\n```\n\nThe installation process prompts for the master IP address in your Kubernetes cluster. The master IP address is the same address that you used to access the IBM Cloud Private dashboard.\n\nCreate `ClusterImagePolicies` on IBM Cloud Private version 3.1.0 and set the following permissions:\n\n```txt\n- name: docker.io/*\n- name: gcr.io/*\n- name: quay.io/*\n- name: k8s.gcr.io/*\n```\n\nSpecify the following two `jx install` parameters with the command line or when prompted by the IBM Cloud Private provider:\n- The `domain=''` parameter is the domain to expose ingress endpoints, for example, `jenkinsx.io`.\n- The `external-ip=''` parameter is the external IP that is used to access ingress endpoints from outside the Kubernetes cluster and for bare metal on-premises clusters.\n\nIf you don't specify these parameters, then the `jx install --provider=icp` command first prompts you to enter the `external-ip` parameter. Next, it prompts you to enter the `domain` parameter and offers you the `<external-ip>.nip.io` default value. After you enter these values, an ingress endpoint becomes available at `http://jenkins.jx.<your cluster IP>.nip.io`.\n\nA Tiller is set in the default namespace as part of the Jenkins X installation process. To ensure that all Helm commands point to the correct Tiller, enter the `export TILLER_NAMESPACE=default` command when interacting with your Jenkins X installation.\n\nCreate registry secrets and patch the default service account in any of the namespaces that Jenkins X creates. Deployments can then pull images from the IBM Cloud Private registry.\n\nIf you create environments manually, you can specify `--pull-secrets <secret name>` with the `jx create environment` command. The created service account is automatically configured to use the pull secret that you mention. The pull secret needs to exist in the created namespace.\n",
            "content/en/docs/resources/guides/managing-jx/old/manage-via-gitops.md": "---\ntitle: Manage by GitOps\nlinktitle: Manage by GitOps\ndescription: Use GitOps to configure and upgrade your Jenkins X installation\ndate: 2016-11-01\npublishdate: 2016-11-01\nlastmod: 2018-01-02\ncategories: [getting started]\nkeywords: [install,kubernetes]\nweight: 150\naliases:\n  - /docs/resources/guides/managing-jx/common-tasks/manage-via-gitops/\n---\n\nWe recommend you use GitOps to manage your installation of Jenkins X, to upgrade it, configure it and add or remove extension [Apps](/docs/contributing/addons/) so it\u2019s easy to audit who changes what in your installation and to easily revert bad changes.\n\nCurrently this only works on AWS and Google cloud as it requires our vault operator (which needs cloud storage & KMS) to store secrets while all other configuration is stored in the development environment git repository.\n\n## Using GitOps to manage Jenkins X\n\nIf you are creating a cluster or installing on an existing cluster there is a quick and handy way to use GitOps to manage Jenkins X itself - it\u2019s `\u2014ng` for the next generation of Jenkins X. We\u2019ll make this feature flags options the default when we release 2.x of Jenkins X later this year.\n\n\nThe `\u2014ng` flag is an alias for these flags: `\u2014gitops \u2014vault \u2014no-tiller \u2014tekton`. So it also comes with baked in support for [Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) - the modern cloud native pipeline engine based on Tekton.\n\n\nOnce you have installed Jenkins X using GitOps to manage the dev environment- the install of Jenkins X and it\u2019s additional Apps - you get an extra git repository for Dev, Staging and Production. It also means that if you use an upgrade command like [jx upgrade platform](/commands/deprecation/) or add, upgrade or delete Apps via [jx add app](/commands/jx_add_app/) then those commands will generate Pull Requests on the dev environment git repository - rather like how promotion works when you release new versions of your microservices.\n\n\n## If things go bad\n\nGenerally speaking Jenkins X can upgrade itself quite easily when using tekton. However if an upgrade breaks Jenkins X from implementing CI/CD then the GitOps to revert the change won\u2019t work ;)\n\nif you hit any issues upgrading Jenkins X there is a manual way to apply the contents of the development environment\u2019s git repository\n\n```sh\ngit clone $MY_DEV_GIT_CLONE_URL jenkins-x-dev-env\ncd jenkins-x-dev-env/env\njx step env apply\n```\n",
            "content/en/docs/resources/guides/mlops/_index.md": "---\ntitle: \"MLOps with Jenkins X\"\ndate: 2020-03-13T14:57:07Z\nlinkTitle: \"MLOps with Jenkins X\"\ndescription: Using Jenkins X to implement MLOps.\nweight: 40\naliases:\n  - /documentation/mlops\n---\n\nJenkins X allows you to treat your Machine Learning and Natural Language Processing assets as first class citizens within your CI/CD eco-system, training, versioning and deploying models as part of your normal release process.",
            "content/en/docs/resources/guides/mlops/data.md": "---\ntitle: \"Managing Data\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Managing Data\"\ndescription: Approaches for working with data.\nweight: 20\naliases:\n  - /documentation/mlops/data\n---\n\nIn most scenarios, you will be expecting to remotely access data hosted elsewhere on your network and can manage this in code as part of your training scripts and service implementations. There are however a couple of situations in which Jenkins X can help you to manage certain types of data.\n\n## Handling data in Buckets\nIf you are working with data in the form of arbitrary files, you can transfer these to your training environment via a Storage Bucket in your Cloud project with the following helper step within your build pipeline:\n\n```\n> jx step unstash -u <URL of bucket> -o <output filename or directory>\n```\n\nThe URL should be in the form: s3://mybucket/tests/myOrg/myData/trainingset.xml where the protocol is set as appropriate to the Cloud provider you are using.\n\nYou must ensure that the data has been uploaded to this bucket prior to starting the training build and should bear in mind that this command copies the specified file from the bucket to the working volume of the build container executing the current build step.\n\n## Working with Volumes\nUnder some circumstances, you may wish to create versioned collections of immutable training data that can be shared across multiple models and which are too large to easily copy from buckets in a timely manner.\n\nUnder these circumstances, it is straightforward to create a named, persistent Kubernetes Volume within your Cloud project, mount it in read/write mode and upload your training data files to it, then unmount it ready for use.\n\nWithin your training pipelines, you can then specify that this volume be mounted during the training build, in read-only mode, in more than one project in parallel.\n\nTo do this, you need to modify the `jenkins-x.yml` file in your training projects to reference the `volume` and `volumeMount` config necessary to connect the build container instance to your training data volume.\n\n```\nbuildPack: ml-python-gpu-training\n\npipelineConfig:\n  pipelines:\n    overrides:\n      - pipeline: release\n        stage: training\n        name: training\n        volumes:\n          - name: trainingset\n            gcePersistentDisk:\n              pdName: mytrainingvolume01\n              fsType: ext4\n              readonly: true\n        containerOptions:\n          resources:\n            limits:\n              cpu: 4\n              memory: 32Gi\n              nvidia.com/gpu: 1\n            requests:\n              cpu: 0.5\n              memory: 8Gi\n              nvidia.com/gpu: 1\n          volumeMounts:\n            - name: trainingset\n              mountPath: /trainingset\n              readOnly: true \n```\nNote that it is only possible to simultaneously share volumes that are mounted read-only.",
            "content/en/docs/resources/guides/mlops/gpu.md": "---\ntitle: \"Working with GPUs\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Working with GPUs\"\ndescription: Setting up Jenkins X for use with GPU resources.\nweight: 15\naliases:\n  - /documentation/mlops/gpu\n---\n\nTo use CUDA to accelerate your ML training and services, you first need to set up your Kubernetes cluster to add some physical GPU resources to your nodes.\n\nTo do this, typically you will need to request an allocation of GPU resources from your Cloud provider and then configure an additional Node Pool to provision a set of Nodes such that each Node has access to at least one physical GPU card.\n\nSee the documentation for your Cloud platform for details.\nThe instructions for GCP are here: [https://cloud.google.com/kubernetes-engine/docs/how-to/gpus](https://cloud.google.com/kubernetes-engine/docs/how-to/gpus)\n\nAdditionally, each Node will require a CUDA installation and the drivers appropriate to the physical accelerator cards chosen. Note that this introduces fixed dependencies upon the driver version for your specific hardware and the installed CUDA version that spans the entire Node Pool, impacting every service you deploy to this pool.\n\nBe aware that you will be charged for use of the GPU resources from the point at which each Node starts up, NOT just whilst you are running a training! It is recommended to use elastic node scaling on your pool so that you release GPU resources that are not currently being utilised.\n\nOnce your cluster is configured, you can allocate GPU resources to containers as part of your application config.\n\nFor the training project, you will need to ensure that the build container used has access to GPU resources. This can be provisioned via the `jenkins-x.yml` file in that project, like this:\n\n```\nbuildPack: ml-python-gpu-training\n\npipelineConfig:\n  pipelines:\n    overrides:\n      - pipeline: release\n        stage: training\n        name: training\n        containerOptions:\n          resources:\n            limits:\n              cpu: 4\n              memory: 32Gi\n              nvidia.com/gpu: 1\n            requests:\n              cpu: 0.5\n              memory: 8Gi\n              nvidia.com/gpu: 1\n```\nNote that at the moment, it is not possible to modify the container resources of a single pipeline step, but only the resources for every container in a stage. As a result, it is necessary to perform all ML build activities in a single step in a dedicated stage or Kubernetes will attempt to allocate a physical GPU to a new container for every step in the stage, draining all available resources and likely blocking the build.\n\nThis pipeline config is set up for you in all the existing GPU quickstarts.\n\nTo configure the service project, you can adjust the resource section of the `values.yaml` file in the project chart to set `nvidia.com/gpu: 2` to indicate how many GPU cards to allocate to each Pod instance. Note that you cannot exceed the number of GPUs available to a Node and Pods may become unschedulable if there are insufficient free GPU cards in the pool.\n\nOnce you have deployed a GPU-based service, it will reserve the cards allocated to it, so care is needed to avoid running up unnecessarily large bills by leaving non-essential services or preview environments up.\n\nYou will, of course, have to ensure that your training script and service implementation code are set up to use CUDA features.",
            "content/en/docs/resources/guides/mlops/introduction.md": "---\ntitle: \"Introduction\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Introduction\"\ndescription: An introduction to MLOps with Jenkins X.\nweight: 1\naliases:\n  - /documentation/mlops/introduction\n---\n\n## Understanding MLOps\nWhen we talk about MLOps, what we are referring to is best defined as the extension of the DevOps methodology to include Machine Learning and Data Science assets as first class citizens within the best known methods of DevOps. The aim is to demystify Machine Learning and re-integrate the delivery of technology solutions as a seamless process of product development and deployment.\n\nThe Continuous Delivery Foundation hosts a collaborative Roadmap for MLOps and Jenkins X is committed to implementing features aligned to that model.\n\nSoftware systems including Machine Learning components tend to be decision-making systems rather than just data processing systems and thus are required to be held accountable to much higher standards than most conventional software projects. As a result, it is especially important that release processes associated with these solutions meet the highest levels of quality.\n\nMachine Learning project teams are however often a relatively new addition to many organisations and are sometimes lacking in experience when it comes to delivering solutions into production. MLOps is an approach designed to help bridge the gap between where teams find themselves today and where they need to reach in terms of quality and maturity.\n\nOrganisations pursuing the development of ML products need to be able to manage cost and time to market by optimising the process of taking ML features into production, reducing Lead Time and shortening the feedback loop between production and development for ML assets.\n\nWith Jenkins X, we unify the release cycle for ML and conventional software assets, allowing you to manage your whole solution as part of one standard release process. By doing this, you are able to apply conventional automated testing approaches to your ML assets as well as the rest of your codebase, extending security checks, static analysis, dynamic analysis, dependency scanning and integrity checking to your entire application stack.\n\nMLOps is a framework-agnostic methodology and Jenkins X supports the deployment of ML assets based upon a wide range of different ML frameworks and libraries. We currently support training and deployment of models using both CPU and GPU, across a range of Cloud infrastructure, or in-house.\n\nThe use of MLOps should teach best known methods of applying MLOps. It should be recognised that many customers will be experts in the field of Data Science but may have had relatively little exposure to DevOps or other SDLC principles. To minimise this learning curve, the MLOps features of Jenkins X provide defaults aligned to best practice in production environments, reducing the amount of effort necessary to get working solutions into production reliably.\n\n## What about my Jupyter Notebooks?\nIt is common to teach the basics of Machine Learning using convenient scratchpad environments such as Jupyter Notebooks that facilitate casual experimentation and ease of learning. Such courses rarely however progress on to teaching more advanced topics regarding the challenges of managing real-life software assets in mission-critical situations. This leaves a significant knowledge gap across data science teams that must be filled before products can be safely delivered to customers.\n\nJenkins X seeks to minimise the pain of moving teams beyond the 'training-wheels' environment of scratch-built models, scripted ad-hoc on uncontrolled laptops.\n\nBy providing a consistent, logical and familiar approach to managing all your project assets to the highest standards, it becomes simple to train teams to work collaboratively and effectively at pace.\n\nSimple 'quickstarts' allow teams to create working example projects based upon best practice for managing critical IP that can be extended incrementally to deliver desired funtionality in a safe and friendly manner without relying upon everyone involved having in-depth knowledge of all the aspects of a robust software development lifecycle.\n\nWhen using MLOps features within Jenkins X, ML assets are automatically managed under version control and audit trails maintained such that it is always possible to understand which version of which data set, training script, model or service is deployed in any given production environment and to quickly revert or upgrade to specific versions of assets in the event of a problem.\n\nJenkins X makes it easy to wrap model instances in service implementations so that they can be securely and robustly deployed into application solutions in a way that is resilient and scalable.\n\nBuilt-in release governance processes ensure that all ML assets pass through the same rigourous automated testing and QA processes normally applied to conventional software components, ensuring that you never have to worry about someone's uncontrolled Jupyter Notebook making it into a customer-facing environment.\n\n## Breaking down the New Wall\nThe success of DevOps as an approach is in large part due to the way in which it tore down the wall between software development teams designing new products and operational staff trying to own and run them cost-effectively and safely. Teaching developers to have responsibility for operational concerns and helping operational staff to communicate their requirements to development teams has been instrumental in reducing the time to market for new products.\n\nThe introduction of Machine Learning capabilities through dedicated Data Science teams has created a new silo, a new wall to throw things over and a fresh chorus of \"Well, it worked on my laptop!\" in engineering departments worldwide.\n\nMLOps tears down this new wall to blur the line between Data Scientists, Software Developers, Operational teams and Product Owners, making it faster, safer and cheaper to get AI-driven ideas into the marketplace.",
            "content/en/docs/resources/guides/mlops/mlquickstarting.md": "---\ntitle: \"Using Machine Learning Quickstarts\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Using ML Quickstarts\"\ndescription: How to use Machine Learning quickstarts.\nweight: 5\naliases:\n  - /documentation/mlops/mlquickstarting\n---\n\nThe Jenkins X MLOps Quickstarts Library provides template projects to make it quick and easy to set up everything you need to get started with a building a new ML-based asset.\n\nEach quickstart project comprises two repositories, one which contains your training script and a second which takes the final model you have trained and wraps it as a RESTful service for deployment into your overall solution.\n\n## Getting started\nYou can create an instance of a project using the command:\n\n```\n> jx create mlquickstart\n```\nand follow the instructions to select a template from the list.\n\nOnce the quickstart process completes, you will find two new projects in your current folder, one with the suffix `-training` and the other with the suffix `-service`.\n\nThe training project contains an example training script and some tests for the class of ML solution you selected. All the quickstarts are working examples, so you can see the solution in action and then start to modify it to meet your desired outcome.\n\nThe service project is designed to take your model and make it easy to wrap it in a microservice so you can deploy it into your application. Notice that at this stage, there is no model in this service project because you haven't trained it yet.\n\nIf you check the Git account you used to create the quickstart project, you will see that the two folders have been created as repositories and linked to your Jenkins X cluster.\n\nLooking at your Jenkins X instance, you should be able to see that two builds have started for these projects. The service build will probably complete first, and it will create an instance of a new microservice in your staging environment, but this instance will fail to start and will end up in CrashLoopBackOff at this stage because it is waiting for the model to train.\n\nThe second build is training an example model. When this completes successfully, it will persist the model in ONNX format and will make a Pull Request against your service project to add the model and the training metrics to your service. If you check the repository for the service, you should be able to see the open PR and can verify the files that have been added.\n\nAt this stage, a preview environment will have been created for the service and you can verify its operation by connecting to it via a browser.\n\nOnce you are happy with the model, merge the PR and the service will be redeployed into staging with the model you trained.\n\nYou can watch this in action in the following video:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AqL_ME7BM6U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Customising your project\nNow you are ready to go back to the local copy of your training project and can start editing the training script to change the model.\n\nYou will see that there are several steps annotated in the comments.\n\nThe first step is where you define success criteria for your training. We only want to go to the effort of deploying an instance of our model if we consider it sufficiently accurate for our purposes so you should always create one or more metrics by which you will later judge whether your training run was successful.\n\nIn the second step, we define the code to train your model. Feel free to change this to do what you want it to do.\n\nIn the third step is where we evaluate the trained model we hold in memory against the criteria you specified earlier. You are free to modify this code in line with your desired metrics.\n\nStep four is only executed if your model passes the success threshold. If it does not, the training build is marked as 'failed' and stops. Within this step, we convert the in-memory model into ONNX format and persist it temporarily to the local filesystem of the container in which the training build is running. We also write any metrics data and plots we wish to persist into a folder called 'metrics'.\n\nThe training script exits at this point, however the Jenkins X pipeline for the training build will take the ONNX model and anything you placed in the 'metrics' folder and will create a PR against the service repo as shown earlier.\n\n## Starting a training run\nTo trigger a training run after modifying the training script, you need to commit your changes to the remote repository associated with this project:\n\n```\n> git add app.py\n> git commit -m \"feat: Added new training feature...\"\n> git push\n```\n\nThis will trigger Jenkins X to start a new training run which you can monitor via the UI or with:\n\n```\n> jx get build logs\n```\n\n## Additional training runs\nIf you would like to trigger a training run to start again without modifying the script, perhaps because your initial run failed to meet your success criteria you can run:\n\n```\n> jx start pipeline\n```\nand select the name of the training project you would like to trigger.\n\n## Versioned assets\nEvery successful model trained creates a new version of your microservice. This enables you to do things like promoting an initial version of a model to your staging environment so that others on the team can focus on integrating your ML component with the rest of the application whilst you test alternate versions of the model in your preview environment to optimise performance. Once you are happy with your optimised model, you can promote it for integration by merging the Pull Request.\n\nYou can also use the git repository to go back to previous model instances in the event that you need to investigate any issues that might occur with deployed versions of earlier code. This gives you full traceability and an audit trail for your models.\n\nShould you need to revert a model from a staging or production environment, you can simply change the revision number of the service application in the GitOps repo for the target environment to the last known good instance and commit your changes. Jenkins X will then update your environment as necessary.",
            "content/en/docs/resources/guides/mlops/mlquickstarts.md": "---\ntitle: \"Finding a Machine Learning Quickstart\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"ML Quickstarts Directory\"\ndescription: Directory of template Machine Learning projects.\nweight: 10\naliases:\n  - /documentation/mlops/mlquickstarts\n---\n\nThis directory is intended to help you find your way around the Jenkins X MLOps Quickstarts Library and get you up and running rapidly with a template project based around the class of Machine Learning approach you wish to work with and the language and framework you prefer.\n\nThe directory is divided by target programming language (Python only at this stage, but with additional quickstarts to follow in other languages) and then by ML framework.\n\nThe section for each framework is then divided by class of ML approach and CPU/GPU-based solutions.\n\nTo create an instance of a project, find the title of the particular quickstart you wish to use and then select this from the list that is presented when you use the command:\n\n```\n> jx create mlquickstart\n```\n\n\n**Python Quickstarts:**\n---\n<img src=\"https://avatars-04.gitter.im/group/iv/4/57542d4cc43b8c601977b6ad?s=48\" alt=\"LightGBM Logo\" width=\"40\" align=\"right\">\n\n---\n## LightGBM\nLightGBM is a gradient boosting framework that uses tree based learning algorithms. It is designed to be distributed and efficient with the following advantages:\n\n- Faster training speed and higher efficiency.\n- Lower memory usage.\n- Better accuracy.\n- Support of parallel and GPU learning.\n- Capable of handling large-scale data.\n\nLightGBM can outperform existing boosting frameworks on both efficiency and accuracy, with significantly lower memory consumption.\n\nDocumentation is at [https://lightgbm.readthedocs.io/](https://lightgbm.readthedocs.io/)\n\n**CPU-based:**\n\n`ML-python-lightgbm-cpu` is a project for training and deploying tree based learning algorithms using the LightGBM library.\n\nTraining Script : [ML-python-lightgbm-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-lightgbm-cpu-training)\n\nService Wrapper : [ML-python-lightgbm-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-lightgbm-cpu-service)\n\n---\n<img src=\"https://pytorch.org/assets/images/logo-dark.svg\" alt=\"PyTorch Logo\" width=\"140\" align=\"right\">\n\n## PyTorch\nPytorch is a rich ecosystem of tools, libraries, and more to support, accelerate, and explore AI development.\n\nDocumentation is at [https://pytorch.org/](https://pytorch.org/)\n### Convolutional Neural Networks\n**CPU-based:**\n\n`ML-python-pytorch-cpu` is a simple example demostrating the use of Pytorch with a Convolutional Neural Network (AlexNet) for image recognition.\n\nTraining Script : [ML-python-pytorch-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-cpu-training)\n\nService Wrapper : [ML-python-pytorch-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-cpu-service)\n\n\n### Multi-layer Perceptron Networks\n**CPU-based:**\n\n`ML-python-pytorch-mlpc-cpu` is a project for training and deploying Multi-layer Perceptron Networks in Pytorch.\n\nTraining Script : [ML-python-pytorch-mlpc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training)\n\nService Wrapper : [ML-python-pytorch-mlpc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service)\n\n**GPU-based:**\n\n`ML-python-pytorch-mlpc-gpu` is a project for training and deploying Multi-layer Perceptron Networks in Pytorch with CUDA acceleration.\n\nTraining Script : [ML-python-pytorch-mlpc-gpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training)\n\nService Wrapper : [ML-python-pytorch-mlpc-gpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service)\n\n---\n<img src=\"https://scikit-learn.org/stable/_static/scikit-learn-logo-small.png\" alt=\"Scikit Logo\" width=\"140\" align=\"right\">\n\n\n## Scikit-Learn\nSimple and efficient tools for predictive data analysis, accessible to everybody, and reusable in various contexts. \n\nBuilt on NumPy, SciPy, and matplotlib\n\nDocumentation is at: [https://scikit-learn.org/](https://scikit-learn.org/)\n\n### K Nearest Neighbor Classification\n**CPU-based:**\n\n`ML-python-sklearn-knc-cpu` is a project for training and deploying K Nearest Neighbor Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-knc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-knc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-knc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-knc-cpu-service)\n\n### Naive Bayes Classification\n**CPU-based:**\n\n`ML-python-sklearn-nbc-cpu` is a project for training and deploying Naive Bayes Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-nbc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-nbc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-nbc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-nbc-cpu-service)\n\n### Random Forest Classification\n**CPU-based:**\n\n`ML-python-sklearn-rfc-cpu` is a project for training and deploying Random Forest Classifications using the SciKit-Learn library\n\nTraining Script : [ML-python-sklearn-rfc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rfc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-rfc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rfc-cpu-service)\n\n### Ridge Classification\n**CPU-based:**\n\n`ML-python-sklearn-rc-cpu` is a project for training and deploying Random Forest Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-rc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-rc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rc-cpu-service)\n\n### Support Vector Machines\n**CPU-based:**\n\n`ML-python-sklearn-svm-cpu` is a project for training and deploying Support Vector Machines using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-svm-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-svm-cpu-training)\n\nService Wrapper : [ML-python-sklearn-svm-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-svm-cpu-service)\n\n---\n<img src=\"https://www.gstatic.com/devrel-devsite/prod/vbc166ea82921a0c6d4f6ee6c94a3e0bcf7b885b334dd31c4592509cb25134992/tensorflow/images/lockup.svg\" alt=\"TensorFlow Logo\" width=\"140\" align=\"right\">\n\n## TensorFlow\nTensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications.\n\nDocumentation is at [https://www.tensorflow.org/](https://www.tensorflow.org/)\n\n### Classification (MNIST)\n**CPU-based:**\n\n`ML-python-tensorflow-mnist-cpu` is a project for training and deploying an MNIST classifier using TensorFlow.\n\nTraining Script : [ML-python-tensorflow-mnist-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-cpu-training)\n\nService Wrapper : [ML-python-tensorflow-mnist-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-cpu-service)\n\n**GPU-based:**\n\n`ML-python-tensorflow-mnist-gpu` is a project for training and deploying an MNIST classifier using TensorFlow with CUDA acceleration.\n\nTraining Script : [ML-python-tensorflow-mnist-gpu-training](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-gpu-training)\n\nService Wrapper : [ML-python-tensorflow-mnist-gpu-service](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-gpu-service)\n\n---\n<img src=\"https://xgboost.ai/images/logo/xgboost-logo.png\" alt=\"XGBoost Logo\" width=\"140\" align=\"right\">\n\n## XGBoost\nScalable and flexible Gradient Boosting. Supports regression, classification, ranking and user defined objectives.\n\nDocumentation is at: [https://xgboost.readthedocs.io/en/latest/](https://xgboost.readthedocs.io/en/latest/)\n\n### Gradient Boosted Decision Trees\n**CPU-based:**\n\n`ML-python-xgb-cpu` is a project for training and deploying gradient boosted decision trees using the XGBoost library.\n\nTraining Script : [ML-python-xgb-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-xgb-cpu-training)\n\nService Wrapper : [ML-python-xgb-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-xgb-cpu-service)\n\n",
            "content/en/docs/resources/guides/using-jx/_index.md": "---\ntitle: \"Using Jenkins X\"\nlinkTitle: \"Using Jenkins X\"\nweight: 20\ndescription: >\n  Learn how to use Jenkins X and what you can do with it.\n---\n",
            "content/en/docs/resources/guides/using-jx/developing/_index.md": "---\ntitle: \"Developing with Jenkins X\"\nlinkTitle: \"Developing\"\nweight: 6\ndescription: >\n  How to work on your source code that has been added to Jenkins X\n---",
            "content/en/docs/resources/guides/using-jx/developing/browsing.md": "---\ntitle: Browsing\nlinktitle: Browsing\ndescription: Browsing resources in Jenkins X\nweight: 10\naliases:\n  - /developing/browsing\n---\n\n\nIf you have used kubernetes before you're probably used the [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) command line to view kubernetes resources:\n\n```sh\nkubectl get pods\n```\n\nThe Jenkins X command line tool, [jx](/commands/jx/), has a similar look and feel to [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) and lets you get the status of all the Jenkins X resources.\n\n### View Jenkins Console\n\nIf you are familiar with the Jenkins console then you can use [jx console](/commands/deprecation/):\n\n```sh\njx console\n```\n\nto open it in a browser.\n\n### Pipeline Activity\n\nTo view the current pipeline activity [jx get activities](/commands/jx_get_activities/):\n\n```sh\njx get activities\n```\n\nIf you want to watch whats going on with your app `myapp`  you can use:\n\n```sh\njx get activities -f myapp -w\n```\n\nWhich will watch the pipeline activities and update the screen whenever a significant change happens (e.g. a release completes, a PR is created to start [promotion](/developing/promote/) etc).\n\n### Pipeline Build logs\n\nTo view the current pipeline build logs via [jx get build logs](/commands/jx_get_build_log/):\n\n```sh\njx get build logs\n```\n\nYou are then presented with all the possible pipelines to watch.\n\nYou can quickly filter that via\n\n```sh\njx get build logs -f myapp\n```\n\nor if you wish to be explicit\n\n```sh\njx get build logs myorg/myapp/master\n```\n\n### Pipelines\n\nTo view the current configured pipelines use [jx get pipelines](/commands/jx_get_pipelines/):\n\n```sh\njx get pipelines\n```\n\n### Applications\n\nTo view all the applications in your team across all your environments with URLs and pod counts use  [jx get applications](/commands/jx_get_applications/):\n\n```sh\njx get applications\n```\n\nIf you want to hide the URLs or the pod counts you can use `u` or `-p`. e.g. to hide the URLs:\n\n```sh\njx get applications -u\n```\n\nOr hide the pod counts:\n\n```sh\njx get applications -p\n```\n\nYou can also filter the apps by an environment:\n\n```sh\njx get applications -e staging\n```\n\n\n\n### Environments\n\nTo view the [environments](/about/concepts/features/#environments) defined for your team use [jx get environments](/commands/jx_get_environments/):\n\n```sh\njx get environments\n```\n\nYou can also\n\n* create a new environment via [jx create environment](/commands/jx_create_environment/)\n* edit an environment via [jx edit environment](/commands/jx_edit_environment/)\n* delete an environment via [jx delete environment](/commands/jx_delete_environment/)\n",
            "content/en/docs/resources/guides/using-jx/developing/issues.md": "---\ntitle: Issues\nlinktitle: Issues\ndescription: Working with issues\nweight: 80\n---\n\nJenkins X defaults to using the issue tracker in your git provider for creating and browsing issues.\n\ne.g. if you are inside the source code of a github project then you can type [jx create issue](/commands/jx_create_issue/):\n\n```sh\njx create issue -t \"lets make things more awesome\"\n```\n\nAnd a new issue will be created on github.\n\nYou can list open the issues on your project via [jx get issues](/commands/jx_get_issues/):\n\n```sh\njx get issues\n```\n\n### Using a different issue tracker\n\nIf you wish to use, say, JIRA on a project you first need to add a JIRA service.\n\nYou can register your JIRA service via [jx create tracker server](/commands/jx_create_tracker_server/):\n\n```sh\njx create tracker server jira https://mycompany.atlassian.net/\n```\n\nYou can then view your issue tracker server via [jx get tracker](/commands/jx_get_tracker/):\n\n```sh\njx get tracker\n```\n\nThen add a user and token via:\n\n```sh\njx create tracker token -n jira  myEmailAddress\n```\n\n### configure the issue tracker on a project\n\nIn the source code of your project then use [jx edit config](/commands/jx_edit_config/):\n\n```sh\njx edit config -k issues\n```\n\nThen\n\n* if you have multiple issue trackers, pick the one you wish to use for the project\n* enter the name of the project in the issue tracker (e.g. the upper case name of the JIRA project)\n\nA file called `jenkins-x.yml` will be modified in your project source code which should be added to your git repository.\n\n\n\n\n\n\n\n",
            "content/en/docs/resources/guides/using-jx/developing/kube-context.md": "---\ntitle: Kubernetes Context\nlinktitle: Kubernetes Context\ndescription: How to switch between different Kubernetes clusters, environments and namespaces\naliases:\n  - /developing/kube-context\nweight: 90\n---\n\nThe kubernetes CLI tool [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) keeps track of the kubernetes cluster and namespace you are using via a local file `~/.kube/config` (or a file at `$KUBECONFIG`).\n\nIf you want to change the namespace using the kubectl command line you can use:\n\n```sh\nkubectl config set-context `kubectl config current-context` --namespace=foo\n```\n\nHowever [jx](/commands/jx/) provides lots of helper commands for changing clusters, namespaces or environments:\n\n### Changing Environments\n\nUse [jx environment](/commands/jx_environment/) to switch [environments](/about/concepts/features/#environments)\n\n```sh\njx environment\n```\n\nYou will be presented with a list of the environments for the current team. Use the cursor keys and enter to select the one you wish to switch to. Or press `Ctrl+C` to terminate and not change the environment.\n\nOr if you know the environment you wish to switch to just type it as an argument:\n\n```sh\njx env staging\n```\n\n### Changing Namespace\n\nUse [jx namespace](/commands/jx_namespace/) to switch between different kubernetes namespaces.\n\n\n```sh\njx namespace\n```\n\nYou will be presented with a list of all the namespaces in the kubernetes cluster. Use the cursor keys and enter to select the one you wish to switch to. Or press `Ctrl+C` to terminate and not change the namespace.\n\nOr if you know the kubernetes namespace you wish to switch to just type it as an argument:\n\n```sh\njx ns jx-production\n```\n\n### Changing Cluster\n\nUse [jx context](/commands/jx_context/) to switch between different kubernetes clusters (or contexts).\n\n\n```sh\njx context\n```\n\nYou will be presented with a list of all the contexts that you have used on your machine. Use the cursor keys and enter to select the one you wish to switch to. Or press `Ctrl+C` to terminate and not change the namespace.\n\nOr if you know the kubernetes namespace you wish to switch to just type it as an argument:\n\n```sh\njx ctx gke_jenkinsx-dev_europe-west2-a_myuserid-foo\n```\n\n### Local changes\n\nWhen you change namespace or context in kubernetes via [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) or the commands above then the kubernetes context and namespace is changed for **all of your terminals** as it updates the shared file (`~/.kube/config` or `$KUBECONFIG`).\n\nThis can be handy - but is sometimes dangerous. e.g. if you want to do something on a production cluster; but forget and then re-run a command in another terminal to delete all the pods in your development namespace - but forget you just switched to the production namespace!\n\n So its sometimes useful to be able to change the kubernetes context and/or namespace locally in a single shell only. For example if you ever want to look at a production cluster, only use that cluster in one shell only to minimise accidents.\n\n You can do that with the [jx shell](/commands/jx_shell/) command which prompts you to pick a different kubernetes context like the  [jx context](/commands/jx_context/) command. However changes to the namespace and/or cluster made in this shell only affect the current shell only!\n\n[jx shell](/commands/jx_shell/) also automatically updates your command prompt using [jx prompt](/commands/jx_prompt/)\nso that it is clear your shell has changed the context and/or namespace,\nand adds bash completion via [jx prompt](/commands/jx_prompt/).\n\n### Customize your shell\n\nYou can use [jx prompt](/commands/jx_prompt/)  to add the current kubernetes cluster and namespace to your terminals prompt.\n\nTo add bash completion to your shell for [jx commands](/commands/jx/) then try the  [jx completion](/commands/jx_completion/).\n\n\n\n",
            "content/en/docs/resources/guides/using-jx/pipelines/_index.md": "---\ntitle: \"Working with Jenkins X Pipelines\"\nlinkTitle: \"Pipelines\"\nweight: 4\ndescription: >\n  How to create and modify your own Jenkins X Pipeline\n---\n\nThis section goes into more detail on what you can do with a Jenkins X Pipeline and how to deal with specific use cases.\n\nThere are two main ways of creating a new pipeline:\n\n* Create a new project using a [quick start](/docs/resources/guides/using-jx/creating/)\n* Create a new `jenkins-x.yml` file and build a pipeline from scratch\n\nNaturally, the first option is the simplest, even for having a starting point, but you can always start from scratch and just [import your existing project](/docs/resources/guides/using-jx/creating/import/)\n\nThe pages you\u2019ll find in this section will apply to both ways of creating a pipeline\n\nFor more general information about Jenkins X Pipelines, see the [Jenkins X Pipeline overview](/about/concepts/jenkins-x-pipelines/) and the [Jenkins X Pipeline syntax reference](/docs/reference/pipeline-syntax-reference/)",
            "content/en/docs/resources/guides/using-jx/pipelines/customimages.md": "---\ntitle: \"Custom images in steps\"\nlinkTitle: \"Custom Images\"\nweight: 5\ndescription: >\n  Using custom docker images in your steps\n---\nJenkins X supports various types of Docker builder images, as long as the image is published in an accessible registry. \n\nOne example is to re-use Google\u2019s fairly small [cloud builder images](https://github.com/GoogleCloudPlatform/cloud-builders) to perform quick tasks:\n```yaml\n         - image: gcr.io/cloud-builders/npm\n           name: install-dependencies\n           command: npm\n           args: ['install']\n```\n\nOr you can use your own published images like this:\n```yaml\n          - image: gcr.io/jenkinsxio/hugo-extended:0.60.1-3\n            name: build-website\n            command: hugo\n            args:\n            - -d\n            - tmp-website\n            - --enableGitInfo\n            - --baseURL http://${APP_NAME}.jx-${REPO_OWNER}-${REPO_NAME}-pr-${PULL_NUMBER}.${DOMAIN}/\n```\n\nThe main requirement is that the image is available, either with or without authentication.\n",
            "content/en/docs/resources/guides/using-jx/pipelines/envvars.md": "---\ntitle: \"Pipeline Environment Variables\"\nlinkTitle: \"Environment Variables\"\nweight: 3\ndescription: >\n  Using environment variables in your pipelines\n---\n\nThere are variables that are available by default, and there are those that you can define yourself.\n\n## Default environment variables\n\nThe following environment variables are available for use in a step in Jenkins X Pipelines:\n\n| Name | Description |\n| --- | --- |\n| DOCKER_REGISTRY | the docker registry host (e.g. `docker.io` or `gcr.io`) |\n| BUILD_NUMBER | the build number (1, 2, 3) starts at `1` for each repo and branch |\n| PIPELINE_KIND | the kind of pipeline such as `release` or `pullrequest` |\n| PIPELINE_CONTEXT | the pipeline context if there are multiple pipelines per PR (for different tests/governance/lint etc) |\n| REPO_OWNER | the git repository owner |\n| REPO_NAME | the git repository name |\n| JOB_NAME | the job name which typically looks like `$REPO_OWNER/$REPO_NAME/$BRANCH_NAME` |\n| APP_NAME | the name of the app which typically is the `$REPO_NAME`\n| BRANCH_NAME | the name of the branch such as `master` or `PR-123` |\n| JX_BATCH_MODE | indicates to jx to use batch mode if `true` |\n| VERSION | contains the version number being released or the PR's preview version |\n| BUILD_ID | same as `$BUILD_NUMBER`\n| JOB_TYPE | the prow job type such as `presubmit` for PR or `postsubmit` for release |\n| PULL_BASE_REF | the branch/ref of git |\n| PULL_BASE_SHA | the git SHA being built |\n| PULL_NUMBER | for PRs this will be the number without the `PR-` prefix\n| PULL_REFS | for batch merging all the git refs |\n\n### ${VERSION}\n\nThis particular variable is populated by Jenkins X when running pipelines. You can use this to tag docker images or anything else where you need a version number for the application you\u2019re building.\n\nFor Release pipelines, Jenkins X will look up the latest Git tag and use that as a basis for the value, increment it and create a new tag. For example, if your latest tag is `1.3.34`, Jenkins X will populate `${VERSION}` with `1.3.35` and will tag the HEAD of the master branch with the same value. This all happens automatically, giving you a record of the last successful build of the master branch.\n\nFor `pullRequest` pipelines, the value is populated based on the version recorded in the GitOps repo for your application, and appended with `PR-<pull request number>-<build number>` giving each build a pull request a unique version.\n\n#### Triggering a major or minor version bump\n\nWhen the version is bumped automatically, only the patch version is changed. To change the major or minor version, manually add a tag (e.g. 1.4.0) to your repo and Jenkins X will continue to increment from there (making the next application version 1.4.1 in the previous example).\n\n#### Overriding ${VERSION}\n\nFor `pullRequest` pipelines, the logic behind `${VERSION}` cannot yet be overridden, but you could likely construct a version string out of the other variables mentioned above, if the default doesn\u2019t serve your purpose.\n\nFor `Release` pipelines, you can override the default logic by adding a `setVersion` declaration above the `pipeline` keyword like this:\n\n```yaml\n    release:\n      setVersion:\n        steps:\n          - name: next-version\n            sh: \"jx step next-version --version $(cat HUGO_VERSION)-${BUILD_NUMBER} --tag\"\n```\n\nThe example above uses a file with a version number to construct a specific version string where the unique part is the build number. The `--tag` part makes Jenkins X also tag the repo with the generated string. In the example, we wanted to keep the official Hugo version and have a separate indicator for the build number, to avoid bumping the patch number and making our image seem ahead of the official Hugo version. The string generated ends up looking like `0.60.1-3`\n\n## Self defined variables\n\nYou can define your own environment variables either at the pipeline level:\n\n```yaml\n    release:\n      pipeline:\n        environment:\n          - name: PIPELINE_VAR\n            value: A value for the pipeline variable\n```\nat a stage level:\n\n```yaml\n    release:\n      pipeline:\n        stages:\n          environment:\n            - name: STAGE_VAR\n              value: A value for the stage level variable\n```\n\nor at a step level:\n\n```yaml\n    release:\n      pipeline:\n        stages:\n          steps:\n            environment:\n              - name: STEP_VAR\n                value: A value for the step level variable\n```\n\nEach level will add their variables to the variables defined in the level(s) above them, or potentially replace a variable if the same name is used.\n",
            "content/en/docs/resources/guides/using-jx/pipelines/newpipeline.md": "---\ntitle: \"Creating Jenkins X Pipelines from scratch\"\nlinkTitle: \"Create from scratch\"\nweight: 1\ndescription: >\n  How to create a new Jenkins X Pipeline from scratch\n---\n\nIf you\u2019re starting out with a blank canvas, it\u2019s still a good idea to have a look at the [quickstart templates](https://github.com/jenkins-x-quickstarts) to get inspiration for creating a pipeline with proper syntax and structure.\n\nYou can copy the basic structure over from an existing file, or copy from here, but at the very minimum you need to define two pipelines, pullRequest and Release, which will encompass the more detailed stages and steps:\n\n```yaml\nbuildPack: none\npipelineConfig:\n pipelines:\n   pullRequest:\n   release:\n```\n\nFor the `pullRequest` pipeline you define the stages and steps that Jenkins X will execute for each pull request, and `Release` is the same, just for what should happen to create the final product (whether a k8s app, docker image, static website, etc.)\n\nYou can also specify a `feature` pipeline, for processing merges to a feature branch. However, note that the [Accelerate book](/about/overview/accelerate/) recommends against long term feature branches. Instead, consider using trunk based development which is a practice of high performing teams.\n\nEach pipeline will have an `agent` defined (usually Kaniko for building docker images) and at least one `stage`:\n\n```yaml\n    release:\n      pipeline:\n        agent:\n          image: gcr.io/kaniko-project/executor:9912ccbf8d22bbafbf971124600fbb0b13b9cbd6\n        stages:\n        - name: release\n          steps:\n```\n\nWithin each stage you\u2019ll define the steps, which can generally be anything you can call on a command line or execute via a docker container. [Configuration for steps](/docs/reference/pipeline-syntax-reference/#configuration-for-steps) lists the various parameters you can use in a step.\n",
            "content/en/docs/resources/tutorials/_index.md": "---\ntitle: \"Tutorials\"\nlinkTitle: \"Tutorials\"\nweight: 20\ndescription: >\n  Tutorials on how to setup and use Jenkins X\naliases:\n  - /docs/resources/guides/managing-jx/tutorials/jenkins-x-gke-install-with-bot\n  - /docs/guides/tutorials/\n---\n",
            "content/en/docs/resources/tutorials/custom-builder.md": "---\ntitle: Jenkins X Video Tutorial Series - Specify Your Own Builder Within A Pipeline\nlinktitle: Custom Builder\ndescription: There may be times when a Jenkins X Builder does not have the correct language version your app requires.  How do you handle that?  In this tutorial, I walk you through one of two ways you can specify your own builder image with the right language version.\ndate: 2018-08-01\npublishdate: 2018-08-01\nlastmod: 2018-08-01\nweight: 10\n---\n\n</br>\n{{< youtube YCEbOI4ZVQ4 >}}",
            "content/en/docs/resources/tutorials/google-hosted.md": "---\ntitle: Google Cloud Hosted Tutorials\nlinktitle: Google Cloud Tutorials\ndraft: true\ndescription: Tutorials using Google Kubernetes Engine & Cloud Shell\nweight: 10\n---\n\n\n These tutorials can be used against [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/) utilising its [Google Cloud Shell](https://cloud.google.com/shell/docs/) feature to help you get up and running quickly.\n\n### Installing JX on GKE\n\n**Time to complete.** About 25 minutes\n\nAt the end of this guide you will have:\n\n* a working JX installation on Google Kubernetes Engine\n* created an application using a quickstart\n* promoted that application to production\n\n\n\n[<svg height=\"54\" width=\"274\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.2\">\n  <g\n     transform=\"translate(0,-6)\"\n     id=\"layer1\">\n    <rect\n       width=\"266.465\"\n       height=\"50.53175\"\n       ry=\"4.6644692\"\n       x=\"1.7675018\"\n       y=\"7.7341251\"\n       id=\"rect3101\"\n       style=\"fill:#3367d6;fill-opacity:1\" />\n  </g>\n  <g\n     id=\"layer2\">\n    <text\n       x=\"52.473\"\n       y=\"31.976562\"\n       id=\"text4303\"\n       xml:space=\"preserve\"\n       style=\"font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none\">OPEN IN GOOGLE CLOUD SHELL</text>\n    <g\n       transform=\"matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)\"\n       id=\"g3949\"\n       style=\"fill:#ffffff\">\n      <path\n         d=\"M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z\"\n         id=\"path3937\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 10,17.8 h 4 V 20 h -4 z\"\n         id=\"path3939\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 8,20 h 8 v 2 H 8 z\"\n         id=\"path3941\"\n         style=\"fill:#ffffff\" />\n    </g>\n  </g>\n</svg>](https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&page=editor&print=install-guide.txt&tutorial=tutorials%2Finstall-jx-on-gke%2Flesson.md)\n\n### Installing JX on GKE with Terraform\n\n**Time to complete.** About 30 minutes\n\nAt the end of this guide you will have:\n\n* a working JX installation on Google Kubernetes Engine using Terraform\n* created an application using a quickstart\n* promoted that application to production using prow\n\n[<svg height=\"54\" width=\"274\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.2\">\n  <g\n     transform=\"translate(0,-6)\"\n     id=\"layer1\">\n    <rect\n       width=\"266.465\"\n       height=\"50.53175\"\n       ry=\"4.6644692\"\n       x=\"1.7675018\"\n       y=\"7.7341251\"\n       id=\"rect3101\"\n       style=\"fill:#3367d6;fill-opacity:1\" />\n  </g>\n  <g\n     id=\"layer2\">\n    <text\n       x=\"52.473\"\n       y=\"31.976562\"\n       id=\"text4303\"\n       xml:space=\"preserve\"\n       style=\"font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none\">OPEN IN GOOGLE CLOUD SHELL</text>\n    <g\n       transform=\"matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)\"\n       id=\"g3949\"\n       style=\"fill:#ffffff\">\n      <path\n         d=\"M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z\"\n         id=\"path3937\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 10,17.8 h 4 V 20 h -4 z\"\n         id=\"path3939\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 8,20 h 8 v 2 H 8 z\"\n         id=\"path3941\"\n         style=\"fill:#ffffff\" />\n    </g>\n  </g>\n</svg>](https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&page=editor&print=install-guide.txt&tutorial=tutorials%2Finstall-jx-on-gke-with-terraform%2Flesson.md)",
            "content/en/docs/resources/tutorials/image-security.md": "---\ntitle: \"Docker Image CVE Scanning\"\nlinkTitle: \"CVE Scanning\"\ndate: 2018-05-05T10:36:00+02:00\ndescription: \"Detect security vulnerabilities in your Docker images using Anchore\" \nweight: 10\n---\n\nThere is a [blog on Announcing CVE docker image analysis with Anchore](https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/)\n\nYou can watch the [video here](https://www.youtube.com/watch?v=rB8Sw0FqCQk) \n\n<iframe width=\"854\" height=\"480\" src=\"https://www.youtube.com/embed/rB8Sw0FqCQk\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n",
            "content/en/docs/resources/tutorials/java-gradle-app.md": "---\ntitle: Jenkins X Video Tutorial Series - Deploy a Java Gradle app and add custom Tekton Steps To Your Pipeline\nlinkTitle: Deploy a Java Gradle app\ndescription: In this video we walk you through the process of deploying a Java Gradle application, which we create using our built-in QuickStart.  After creating the app, we add a custom step to the Tekton pipeline and show you the build logs so that you can see the custom step ran successfully.\ndate: 2018-08-01\npublishdate: 2018-08-01\nlastmod: 2018-08-01\nweight: 20\n---\n\n</br>\n{{< youtube scFfqwgSA5M >}}",
            "content/en/docs/resources/tutorials/pluralsight.md": "---\ntitle: Jenkins X Pluralsight Course\nlinktitle: Jenkins X Pluralsight Course\ndescription: Learn how to use Jenkins X through an online video course on Pluralsight\ndate: 2018-08-01\npublishdate: 2020-06-26\nlastmod: 2020-06-26\nweight: 10\n---\n\nThere is a [Pluralsight course for Jenkins X](https://app.pluralsight.com/library/courses/jenkins-x-cloud-native-ci-cd/table-of-contents), taking you through much of it's core concepts.\n",
            "content/en/docs/resources/tutorials/progressive-delivery.md": "---\ntitle: Progressive Delivery\nlinktitle: Progressive Delivery\ndescription: Gradually rollout changes and canary releases\nweight: 30\n---\n\n\nIt's likely you have heard of \"blue green deployment\" or \"canary deployment\". The idea is to carefully roll out new versions of your application, if problems happen (gasp!) in production, then the system will automatically roll them back, and the majority of users will not be impacted.\n\nThis has become a popular CD technique over the years.\n\nAs Jenkins X runs on top of Kubernetes, there are some additional built in protections about starting new versions: if a new application fails to start, it is likely that it will never really make it to production, this is a good thing! And you get it for free!\n\nProgressive Delivery takes this a bit further: changes can be rolled out to a small percentage of users or traffic (say 1%) and then progressively released to more users (say 5%) before the delivery is considered complete.\n\n> **Progressive Delivery** makes it easier to adopt Continuous Delivery, by deploying new versions to a subset of users and evaluating their correctness and performance before rolling them to the totality of the users, and rolled back if not matching some key metrics.\n\nProgressive Delivery is used by Netflix, Facebook and others to reduce the risk of deployments. But you can now adopt it when using Jenkins X.\n\nIn particular we focused on Canary releases and made it really easy to adopt them in your Jenkins X applications. Canary releases consist on sending a small percentage of traffic to the new version of your application and validate there are no errors before rolling it out to the rest of the users. Facebook does it this way, delivering new versions first to internal employees, then a small percentage of the users, then everybody else, but you don\u2019t need to be Facebook to take advantage of it!\n\nYou can [read more on Canaries at Martin Fowler\u2019s website](https://martinfowler.com/bliki/CanaryRelease.html).\n\n\n# Jenkins X Promotion with Canaries\n\nIf you already have an application in Jenkins X you know that you can promote it to the *production* environment with `jx promote myapp --version 1.0 --env production`. But it can also be automatically and gradually rolled it out to a percentage of users while checking that the new version is not failing. If that happens the application will be automatically rolled back. No human intervention at all during the process.\n\nAs the first step three Jenkins X addons need to be installed:\n\n* [Istio](https://istio.io/): [a service mesh](https://istio.io/docs/concepts/what-is-istio/) that allows us to manage traffic to our services.\n* [Flagger](https://github.com/weaveworks/flagger): a project that uses Istio to automate canarying and rollbacks using metrics from Prometheus.\n\nThe addons can be installed with\n\n```sh\njx create addon istio --version 1.1.7\njx create addon flagger\n```\n\nThis will enable Istio in the **jx-production** namespace for metrics gathering.\n\nNow get the ip of the Istio ingress and point a wildcard domain to it (e.g. `*.example.com`), so we can use it to route multiple services based on host names. The Istio ingress provides the routing capabilities needed for Canary releases (traffic shifting) that the traditional Kubernetes ingress objects do not support.\n\n```sh\nkubectl -n istio-system get service istio-ingressgateway \\\n-o jsonpath='{.status.loadBalancer.ingress[0].ip}'\n```\n\nThe cluster is configured, and it\u2019s time to configure our application. Add a `canary.yaml` to your helm chart, under `charts/myapp/templates`.\n\n```yaml\n{{- if eq .Release.Namespace \"jx-production\" }}\n{{- if .Values.canary.enable }}\napiVersion: flagger.app/v1alpha2\nkind: Canary\nmetadata:\n  name: {{ template \"fullname\" . }}\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: {{ template \"fullname\" . }}\n  progressDeadlineSeconds: 60\n  service:\n    port: {{.Values.service.internalPort}}\n{{- if .Values.canary.service.gateways }}\n    gateways:\n{{ toYaml .Values.canary.service.gateways | indent 4 }}\n{{- end }}\n{{- if .Values.canary.service.hosts }}\n    hosts:\n{{ toYaml .Values.canary.service.hosts | indent 4 }}\n{{- end }}\n  canaryAnalysis:\n    interval: {{ .Values.canary.canaryAnalysis.interval }}\n    threshold: {{ .Values.canary.canaryAnalysis.threshold }}\n    maxWeight: {{ .Values.canary.canaryAnalysis.maxWeight }}\n    stepWeight: {{ .Values.canary.canaryAnalysis.stepWeight }}\n{{- if .Values.canary.canaryAnalysis.metrics }}\n    metrics:\n{{ toYaml .Values.canary.canaryAnalysis.metrics | indent 4 }}\n{{- end }}\n{{- end }}\n{{- end }}\n```\n\nThen append to the `charts/myapp/values.yaml` the following, changing `myapp.example.com` to your host name or names:\n\n```yaml\ncanary:\n  enable: true\n  service:\n    # Istio virtual service host names\n    hosts:\n    - myapp.example.com\n    gateways:\n    - jx-gateway.istio-system.svc.cluster.local\n  canaryAnalysis:\n    # schedule interval (default 60s)\n    interval: 60s\n    # max number of failed metric checks before rollback\n    threshold: 5\n    # max traffic percentage routed to canary\n    # percentage (0-100)\n    maxWeight: 50\n    # canary increment step\n    # percentage (0-100)\n    stepWeight: 10\n    metrics:\n    - name: request-success-rate\n      # minimum req success rate (non 5xx responses)\n      # percentage (0-100)\n      threshold: 99\n      interval: 60s\n    - name: request-duration\n      # maximum req duration P99\n      # milliseconds\n      threshold: 500\n      interval: 60s\n```\n\nThat\u2019s it! Now when the app is promoted to the production environment with `jx promote myapp --version 1.0 --env production` it will do a Canary rollout. Note that the first time it is promoted it will not do a Canary as it needs a previous version data to compare to, but it will work from the second promotion on.\n\nWith the configuration in the values.yaml file above it would look like:\n\n* minute 1: send 10% of the traffic to the new version\n* minute 2: send 20% of the traffic to the new version\n* minute 3: send 30% of the traffic to the new version\n* minute 4: send 40% of the traffic to the new version\n* minute 5: send 100% of the traffic to the new version\n\nIf the metrics we have configured (request duration over 500 milliseconds or more than 1% responses returning 500 errors) fail, Flagger then will note that failure, and if it is repeated 5 times it will rollback the release, sending 100% of the traffic to the old version.\n\nTo get the Canary events run\n\n```sh\n$ kubectl -n jx-production get events --watch \\\n  --field-selector involvedObject.kind=Canary\nLAST SEEN   FIRST SEEN   COUNT   NAME                                                  KIND     SUBOBJECT   TYPE     REASON   SOURCE    MESSAGE\n23m         10d          7       jx-production-myapp.1584d8fbf5c306ee   Canary               Normal   Synced   flagger   New revision detected! Scaling up jx-production-myapp.jx-production\n22m         10d          8       jx-production-myapp.1584d89a36d2e2f2   Canary               Normal   Synced   flagger   Starting canary analysis for jx-production-myapp.jx-production\n22m         10d          8       jx-production-myapp.1584d89a38592636   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 10\n21m         10d          7       jx-production-myapp.1584d917ed63f6ec   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 20\n20m         10d          7       jx-production-myapp.1584d925d801faa0   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 30\n19m         10d          7       jx-production-myapp.1584d933da5f218e   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 40\n18m         10d          6       jx-production-myapp.1584d941d4cb21e8   Canary               Normal   Synced   flagger   Advance jx-production-myapp.jx-production canary weight 50\n18m         10d          6       jx-production-myapp.1584d941d4cbc55b   Canary               Normal   Synced   flagger   Copying jx-production-myapp.jx-production template spec to jx-production-myapp-primary.jx-production\n17m         10d          6       jx-production-myapp.1584d94fd1218ebc   Canary               Normal   Synced   flagger   Promotion completed! Scaling down jx-production-myapp.jx-production\n```\n\n## Dashboard\n\nFlagger includes a Grafana dashboard for visualization purposes as it is not needed for the Canary releases. It can be accessed locally using Kubernetes port forwarding\n\n```sh\nkubectl --namespace istio-system port-forward deploy/flagger-grafana 3000\n```\n\nThen accessing http://localhost:3000 using admin/admin, selecting the canary-analysis dashboard and\n\n* namespace: jx-production\n* primary: jx-production-myapp-primary\n* canary: jx-production-myapp\n\nwould provide us with a view of different metrics (cpu, memory, request duration, response errors,\u2026) of the incumbent and new versions side by side.\n\n<img src=\"/images/grafana-canary-analysis.png\" class=\"img-thumbnail\">\n\n\n## Caveats\n\nNote that Istio 1.0.x by default will prevent access from your pods to the outside of the cluster, a behavior that has changed in Istio 1.1. [Learn how to control the Istio egress traffic](https://istio.io/docs/tasks/traffic-management/egress/).\n\nIf a rollback happens automatically because the metrics fail, the Jenkins X GitOps repository for the production environment becomes out of date, still using the new version instead of the old one. This is something planned to be fixed in next releases.\n",
            "content/en/docs/resources/tutorials/serverless-apps.md": "---\ntitle: Serverless Apps\nlinktitle: Serverless Apps\ndescription: Develop serverless applications with Knative\nweight: 40\n---\n\nServerless applications are regular applications that \"scale to zero\". This means when your application isn't in use - no resources at all will be used. You only pay for what you use. These applications scale up elastically to meet the workload.\n\nOnce you have this feature enabled - all new apps you import or quickstarts you use by default will be serverless style (you can override as needed - see below). You don't have to change the way you build web apps. This is currently in a preview state (but works well), and in future most web apps will work in this fashion (and this will be the default).\n\n## Enabling serverless apps\n\n```sh\njx create addon gloo\n```\n\nAnd you are then good to go. Any new projects you create will be created in this serverless style.\n\n\n## Converting existing applications\n\nIf you already have a microservice and you want to convert it over to Knative Serve just [import the source repository into Jenkins X](/docs/resources/guides/using-jx/creating/import/) and you should be all done.\n\nIf your application was imported recently into Jenkins X but before you installed and enabled Knative Serve you can use [jx edit deploy](/commands/deprecation/) to switch between the `default` deployment kind (using kubernetes `Deployment` and `Service` resources) and the `knative` kind (using Knative `Service` resource)\n\n```sh\njx edit deploy\n```\n\nThis command will modify the `knativeDeploy` flag in your helm `charts/myapp/values.yaml` file to enable / disable Knative Serve. Once you have committed that code change and merged to master your application will be released to staging using Knative Serve by the automated CI/CD pipeline in Jenkins X.\n\n\n## Edit your team\u2019s deploy kind\n\nYou can edit the default deployment kind for your team which is used when\u2019re you create a QuickStart or import a repository via the [jx edit deploy](/commands/deprecation/) command with the `-t` argument:\n\n```sh\njx edit deploy -t\n```\n\n\n### How it works\n\nWe use an open source project called [Knative](https://www.knative.dev/) to provide the elastic scaling of your applications and functions.\n\n[Knative Serve](https://www.knative.dev/) exposes functions in any programming language over HTTP with elastic scaling from zero to many pods. This lets you build serverless applications which run on any cloud or kubernetes cluster and make an efficient use of resources.\n\n[Knative](https://www.knative.dev/) works with service mesh technologies like [Istio](https://istio.io/) or [Gloo](https://gloo.solo.io/).\n\nThe Jenkins X builld packs create a Knative Serve resource in your helm chart at `charts/myapp/templates/ksvc.yaml`. This resource is only created if the `knativeDeploy` flag is true / otherwise the default kubernetes `Service` & `Deployment` are created.\n\n\n\n## Installing Knative Serve\n\n[Gloo](https://gloo.solo.io/) is much smaller and simpler to install than [Istio](https://istio.io/) so in this guide we are going to use that.\n\nWe have a simple command [jx create addon gloo](/commands/jx_create_addon_gloo/) to install Gloo and Knative Serve on Jenkins X:\n\n```sh\njx create addon gloo\n```\nThis command will install Knative Serve into the `knative-serving` namespace and Gloo into the `gloo-system` namespace. You can check it\u2019s all installed and working via:\n\n```sh\nkubectl get pod -n knative-serving\nkubectl get pod -n gloo-system\n```\n\nOr you can follow the [Knative install guide](https://www.knative.dev/docs/install/) to install it directly via istio or gloo.\n\n## Using Knative Serve\n\nNow you have installed [Knative Serve](https://www.knative.dev/) snd [Gloo](https://gloo.solo.io/) you can [create a new quicktart](/docs/getting-started/first-project/create-quickstart/) or [create a new spring boot application](/docs/resources/demos-talks-posts/create_spring/) and it will default to using Knative Serve to elastically scale your microservice based on its load over HTTP.\n\nYou can check if Knative Serve is being used on your application by doing:\n\n```sh\nkubectl get ksvc -n jx-staging\n```\nWhich should show all of the Knative Service resources in your Staging environment.\n\n\n\n## Demo\n\nHere is a [demo of using Knative Serve snd Gloo](https://youtu.be/eYIaz_plUOw?t=1980) from the [April 4th, 2019](/community/april-4/) [Office Hours](/community/):\n\n<iframe width=\"565\" height=\"480\" src=\"https://www.youtube.com/embed/eYIaz_plUOw\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
            "content/en/v3/_index.md": "---\ntitle: Jenkins X 3.x\nlinktitle: Documentation\ntype: docs\nweight: 45\naliases:\n  - /labs\n  - /v3/\n  - /docs/v3/\n---\n\n\n## Developing\n\n{{< developcards >}}\n\n\n## Administration\n\n{{< admincards >}}\n\n",
            "content/en/v3/about/_index.md": "---\ntitle: About\nlinktitle: About\ntype: docs\ndescription: Documentation about Jenkins X 3.x benefits, comparison and how it works\nweight: 5\nmenu:\n  main:\n    weight: 10\naliases: \n    - /v3/about/\n---\n\n## Developing\n\n{{< developcards >}}\n\n\n## Administration\n\n{{< admincards >}}\n\n",
            "content/en/v3/about/benefits.md": "---\ntitle: Benefits\nlinktitle: Benefits\ntype: docs\ndescription: Benefits of using Jenkins X 3.x\nweight: 80\naliases: \n    - /v3/about/benefits/\n---\n\n\n* We can use vanilla tools like [helm 3](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [kustomize](https://kustomize.io/), [kpt](https://googlecontainertools.github.io/kpt/) to install, update or delete charts in any namespace without needing helm 2.x or tiller or custom code to manage `helm template`.\n  * We can avoid all the complexities of the `jx step helm apply` logic we used in Jenkins X 2.x\n  * Instead we can replace this with vanilla [helmfile](https://github.com/roboll/helmfile) to allow optional templating of `values.yaml` files when using helm\n* The new [Getting Started](/v3/admin/platform/) approach is much simpler, easier to configure and customise and is cleanly integrated with tools like Terraform and works well with different cloud infrastructure platforms.\n  * The default install/upgrade pipelines check in all the generated kubernetes resources and custom resources as YAML so its easy to understand\n  * You can read more about the [git layout here](https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md)\n    * The `config-root/cluster` folder contains all the global cluster level resources like `ClusterRole`, `Namespace` or Custom Resources\n    * The `config-root/namespaces/jx` folder contains all the namespaced resources in the `jx` namespace\n  * This makes it easy to use flexible apply logic in different boot `Jobs` with different RBAC (or a system admin could apply the cluster level resources for you by hand) - to make it easier to install Jenkins X on more locked down and restricted clusters\n* We use [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to provide a single way to manage secrets which supports the following back end systems:\n  * Alibaba Cloud KMS Secret Manager\n  * AWS Secrets Manager\n  * Azure Key Vault\n  * GCP Secret Manager\n  * Hashicorp Vault\n* It opens the door to a flexible [multi-cluster support](/v3/guides/multi-cluster/) so that every cluster can be managed in the same canonical GitOps approach from a single git repository \n* The new [getting started approach](/v3/admin/platform/) runs the boot pipeline as a `Job` inside the Kubernetes cluster. This ensures consistency in tooling used and also improves security by avoiding having the secrets on a developers laptop. \n  * The only thing you run on your local machine when installing Jenkins X is [installing the git operator](/v3/guides/operator/) which is a simple helm chart.\n* Everything is now an app. So if you want to remove our `nginx-ingress` chart and replace it with another ingress solution (knative / istio / gloo / ambassador / linkerd or whatever) just go ahead and use the [apps commands](/v3/develop/apps/) to add/remove apps and have boot manage everything in a consistent way\n    * e.g. here's [an example](https://github.com/jx3-gitops-repositories/jx3-kind-vault/blob/master/helmfile.yaml#L17) of removing `chartmusem` and `nexus` and replacing it with `bucketrepo` via a single simple yaml change.\n* You can install an app in a specific namespace if you wish\n    * This also opens the door to using boot to setup multi-team installations where multiple teams use different namespaces but share services in the same cluster\n* The cluster GitOps repository is simpler and easier to keep in sync/rebase/merge with the upstream git repositories.\n  * We use [kpt](https://googlecontainertools.github.io/kpt/) to do that for us\n  * We now include the [version stream](https://jenkins-x.io/about/concepts/version-stream/) inside your GitOps repository too inside the `versionStream` directory after installation so that all the information about your installation is inside a single git repository so its simpler to test changes & ensure consistency.\n* We can avoid composite charts to simplfiy configuration and upgrades\n* We no longer use `exposecontroller`, instead use regular helm configuration to create `Ingress` resources and [override domain names](/v3/develop/faq/#how-do-i-configure-the-ingress-domain-in-dev-staging-or-production)\n* secret handling is currently much simpler using Kubernetes External Secrets for any secrets in any namespace or cluster for your own apps or for those used by Jenkins X.\n",
            "content/en/v3/about/changes.md": "---\ntitle: Changes\nlinktitle: Changes\ntype: docs\ndescription: The change log for Jenkins X 3.x\nweight: 55\ntoc_hide: true\nhide_summary: true\naliases:\n    - /v3/about/changes/\n---\n\nYou may also find the [Roadmap](/community/roadmap/) and [Maturity Matrix](/v3/about/maturity-matrix/) documents useful:\n\n\n## Breaking Changes\n\n* we have [noticed a regression](https://github.com/jenkins-x/jx/issues/7870) in the [auto upgrade jobs](/v3/admin/setup/upgrades/cluster/#automatic-upgrades) which causes them to fail with an error like this:\n```bash\nupdatebot WARNING: no $GIT_SECRET_MOUNT_PATH environment variable set                      \nupdatebot error: failed to setup git: failed to clone the cluster git URL: failed to clone cluster git repository https://github.com/myorg/myrepo.git: failed to clone cluster git repo https://github.com/\nupdatebot fatal: could not read Username for 'https://github.com': No such device or address\n```\n\n* you can fix this by following the [workarounds on this issue](https://github.com/jenkins-x/jx/issues/7870) which should get you past this and working [auto upgrade jobs](/v3/admin/setup/upgrades/cluster/#automatic-upgrades) again\n\n\n* we now default to using `Ingress` `v1` which was introduced in kubernetes 1.19. The `v1beta1` version of `Ingress` has been deprecated since 1.14 and is removed in 1.22. If you are on 1.18 of kubernetes you could upgrade to 1.19 or later. Otherwise you can [configure your cluster to keep on v1beta1 if you want](/v3/develop/faq/config/ingress/#how-do-i-configure-to-use-v1beta1-ingress) until you can move forwards to 1.19 or later.\n* the new tekton version (0.20.x) now requires kubernetes 1.17 or later. If your cluster is older and you are using the cloud just upgrade your kubernetes version before upgrading your cluster. Otherwise you may want to explicitly override your `tekton-pipeline` version to pin it at `0.19.1` instead in your [helmfiles/tekton-pipelines/helmfile.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/helmfiles/tekton-pipelines/helmfile.yaml#L12) file\n* if you are upgrading from an alpha cluster you may have vault installed in the `secret-infra` namespace. check out the [FAQ on vault in the wrong namespace](/v3/develop/faq/config/vault/#after-an-upgrade-the-boot-job-is-waiting-for-vault-in-jx-vault) for how to upgrade.\n\n## Changes\n\n* we have a new [jx pipeline grid](/v3/develop/reference/jx/pipeline/grid/) command to easily view whats happening in your cluster on the CLI in a similar way to the [Octant Console](/v3/develop/ui/octant/) or [Dashboard](/v3/develop/ui/dashboard/)\n* The [reference guide](/v3/develop/reference/) now has a full [Command Line Reference](/v3/develop/reference/jx/) for browsing the command line of the various [Jenkins X Plugins](https://github.com/jenkins-x-plugins)\n* There is now support for [automatic upgrades](/v3/admin/setup/upgrades/cluster/#automatic-upgrades) where a Pull Request is automatically generated on your development cluster repository to upgrade the versions of charts in your installation. You can define the upgrade schedule and whether or not the Pull Request is auto merged or requires a manual approval/merge.\n* A preview can fail to create for a multitude of reasons; bad helm charts, missing secrets/volumes, invalid configuration in `jx-requirements.yml`, bad image names, no capacity on the server to name but a few. Unfortunately `helmfile sync` does not give much information other than it succeeded of failed.\n  * to improve feedback on why some previews can fail we have added additional output in the [jx preview create](/v3/develop/reference/jx/preview/create) command to tail the kubernetes events in the preview namespace. This basically runs `kubectl exec get event -n $PREVIEW_NAMESPACE -w` and adds the output to the pipeline output (prefixed with `$PREVIEW_NAMESPACE:`      \n  * this means the reason for why a preview fails should appear as a kubernetes event in the pipeline log\n* we have a shiny new [Slack bot for Jenkins X](/v3/develop/ui/slack/) to help notify developers of failing pipelines\n* its now much easier to [write system tests against Preview Environments](https://github.com/jenkins-x/jx-preview#system-tests-in-previews) so it's easier to test images and charts function as you expect inside a Pull Request before you are happy to merge the work for faster feedback\n* check out the new [DevOps, GitOps and Cloud Native](https://jenkins-x.io/v3/devops/) documentation we're putting together based on the learnings of continuously deliverying Jenkins X with Jenkins X.\n* new clusters created using Terraform that use Vault will be using the `jx-vault` namespace to setup Vault (so that its managed by Terraform)       \n* you can now use [jx pipeline convert](/v3/develop/reference/jx/pipeline/convert) to [convert any old pipelines](/v3/develop/pipelines/upgrading/#converting-older-pipelines) across to the latest [concise syntax](/v3/develop/pipelines/catalog/)\n* we have an awesome [new syntax to help share pipelines across git repositories](/v3/develop/pipelines/catalog/) that makes it easier to simplify the pipelines in each repository while keeping things vanilla Tekton YAML and letting you override and customise anything anywhere\n* the boot job now upgrades the `docs` folder to show what charts and versions are deployed in each namespace. You can view the `docs` folder in your own git repositories once you've [upgraded your cluster](/v3/admin/setup/upgrades/cluster/)\n  * you can see the default reports for [kubernetes](https://github.com/jx3-gitops-repositories/jx3-kubernetes/tree/master/docs ), [aws](https://github.com/jx3-gitops-repositories/jx3-eks-vault/tree/master/docs), [azure](https://github.com/jx3-gitops-repositories/jx3-azure-akv) and [gke](https://github.com/jx3-gitops-repositories/jx3-gke-gsm/tree/master/docs )\n* We now use multiple helmfiles per namespace so its easier to understand the organisation of your charts across namespaces\n* The [3.0 beta is almost ready](/blog/2020/12/04/jx-v3-update/) so if you have been using the 3.0 alpha we now have a [migration guide](/v3/admin/guides/migrate/v3-alpha/) to smooth your transition to the beta\n\n* You can now easily open the [Octant Console](/v3/develop/ui/octant/) or [Pipeline Dashboard](/v3/develop/ui/dashboard/) via 2 easy commands:\n\n```bash\njx ui\njx dash\n```    \n\n* We now have [Tekton Catalog integration](/v3/develop/pipelines/) so that you can:\n  * easily [edit any pipeline in any git repository](/v3/develop/pipelines/#editing-pipelines) by just modifying the `PipelineRun` files in your `.ligthhouse/jenkins-x` folder\n  * [reuse Tasks from the Tekton catalog](/v3/develop/pipelines/#adding-tasks-from-the-tekton-catalog) and optionally modify them locally in your repository\n  * [add new pipelines to any git repository](/v3/develop/pipelines/#add-new-taskspipelines-by-hand) to reuse any `PipelineRun` files you find from places like the [tekton catalog](https://github.com/tektoncd/catalog) into your repositories\n\n* We have migrated most of the [Jenkins X Plugins](https://github.com/jenkins-x/jx#plugins) over to the new client-go 1.19.x version now which is a fairly major change due to the API changes in client-go. So we've moved many of the [libraries](https://github.com/jenkins-x/jx#libraries) over to use `v3` instead such as using libraries like [jx-api](https://github.com/jenkins-x/jx-api) or [jx-helpers](https://github.com/jenkins-x/jx-helpers)\n  * if you were planning on submitting a Pull Request on any plugin please make sure you rebase before submitting a Pull Request. Also upgrade to go `1.15.2` ASAP\n\n* New [Maturity Matrix](/v3/about/maturity-matrix/) published! You can now view at a glance the different capabilities across clouds and infrastructure. Many thanks [Nitin](https://github.com/borntorock) for all your hard work\n\n* Preview environments now use [helmfile](https://github.com/roboll/helmfile) as a declarative way to describe all of the dependencies you need in your preview environment.\n\n  * This is all handled by the new [jx-preview](https://github.com/jenkins-x/jx-preview) plugin\n  * This also opens up the possibility of using multiple namespaces per preview; or using canary releases on multiple previews into a shared environment.\n\n* The new Jenkins X version 3 CLI [jx](https://github.com/jenkins-x/jx) is now plugins all the way down; so that all of the features are implemented by [separate binary plugins](https://github.com/jenkins-x/jx#plugins) making the CLI more modular and easier to work on.\n",
            "content/en/v3/about/comparison.md": "---\ntitle: Comparison\nlinktitle: Comparison\ntype: docs\ndescription: Comparison of Jenkins X version 3.x to 2.x\nweight: 90\naliases: \n    - /v3/about/comparison/\n---\n\n\nThis document outlines the similarities and differences of the 3.x approach for those who are aware of `jx boot` with helm 2 in 2.x of Jenkins X.\n\n## Similarities between 2.x and 3.x\n\nJust like classic boot with the [jenkins-x-boot-config](https://github.com/jenkins-x/jenkins-x-boot-config/) git repository, this new [helmfile](https://github.com/roboll/helmfile) solution supports:\n\n* you can install and upgrade Jenkins X via GitOps\n* you can reuse helm charts from the internet, local charts or charts built by Jenkins X in any environment\n* a YAML file is used to store all the charts that are applied during install/upgrade\n\n## Differences with in 3.x\n\n* we support any permutation of tools such as: [helm 3](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [kustomize](https://kustomize.io/) and/or [kpt](https://googlecontainertools.github.io/kpt/) to create the kubernetes resources\n* in 3.x the installation/upgrade of Jenkins X is run inside the kubernetes cluster via a `Job` rather than on a developers laptop which helps with consistency and security.\n* in 3.x we use a single git repository for each cluster; which can manage as many teams/namespaces as you like within the cluster\n  * so any local environments like `Staging` which reside in the same kubernetes cluster are defined in the same git repository in 3.x - whereas in 2.x we used a separate git repository for `Dev`, `Staging` and `Production` when sharing the same cluster.\n  * if `Dev`, `Preprod` and `Production` environments are in separate kubernetes clusters then those will have a git repository each.\n* any helm chart can be deployed in any namespace (previously we used a single namespace for all charts in the [env/requirements.yaml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/requirements.yaml))\n* instead of using [env/requirements.yaml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/requirements.yaml) we now use a simple and more powerful [helmfile.yaml](https://github.com/jenkins-x-labs/boot-helmfile-poc/blob/master/helmfile.yaml) file which is similar but supports:\n  * we can specify a `namespace` on any chart\n  * we can add extra `values` files to use with the chart to override the helm `values.yaml` files\n* instead of copying lots of `env/$appName/values*.yaml` files into the boot config like we do in [these folders](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/) such as [the lighthouse/values.tmpl.yaml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/lighthouse/values.tmpl.yaml) we can instead default all of these from the version stream at [apps/jenkins-x/lighthouse](https://github.com/jenkins-x/jxr-versions/tree/master/apps/jenkins-x/lighthouse) - which means the boot config git repository is much simpler, we can share more configuration with the version stream and it avoids lots of git merge/rebase issues.\n* adding and removing apps in your GitOps repository causes those resources to be properly installed or uninstalled\n  * you can also review exactly what kubernetes resources will change on the Pull Request\n* we no longer use a composite chart for `env/Chart.yaml` and instead deploy each chart independently\n  * this means that each chart has its own unique version number you can see in the `helmfile.yaml` file\n* we have done away with the complexity of `jenkins-x-platform` (a composite chart containing logs of [dependencies](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/requirements.yaml) like `jenkins` + `chartmuseum` + `nexus` etc) so that each chart can be added/removed independently or swapped out with a different version/distribution\n\n## Removing complexity and magic\n \nRemoving complexity out of Jenkins X and reusing other solutions wherever possible.  Jenkins X 2.x was tightly coupled to helm 2 for example.  There were `jx` CLI steps that wrapped helm commands when installing applications into the cluster which injected secrets from an internal Vault and ultimately made it very confusing for users and maintainers. \n\nJenkins X 3.x prefers to avoid wrapping other CLIs unless a consistent higher level UX is being provided say around managing secrets and underlying commands being executed are clearly printed in users terminals.\n\n## Maintainability\n \nCreated a new `jx` CLI which includes an extensible plugin model where each main subcommand off the jx base is it's own releasable git repository.  This has significantly improved the Jenkins X codebase which helps with maintainability and contributions.\n\n ",
            "content/en/v3/about/concepts/_index.md": "---\ntitle: Jenkins X concept models\nlinktitle: Concepts\ntype: docs\ndescription: Introduction to Jenkins X Concepts\nweight: 20\naliases:\n  - /v3/about/concepts/\n---\n\nThis is a conceptual description of the moving parts of Jenkins X.\n",
            "content/en/v3/about/concepts/deployment-lifecycle.md": "---\ntitle: Deployment lifecycle\nlinktitle: Deployment lifecycle\ntype: docs\ndescription: How Jenkins X deploys your code\nweight: 400\naliases:\n  - /v3/about/concepts/deployment-lifecycle\n---\n\nEver wondered how the code you commit to your source control repository ends up deployed in production by Jenkins X?\nWell, this document is an attempt to answer that question.\n\nPlease go over documentation regarding [source repositories](../source-repository), [environments](../environments) and [pipeline activities](../pipeline-activity) before reading this section.\n\nAfter you have [installed Jenkins X in a kubernetes cluster](/v3/admin/) and created a [quickstart or imported an existing repository](/v3/develop/create-project/), you should see a folder structure which resembles this:\n\n```text\n\u251c\u2500\u2500 charts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 app\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Chart.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 .helmignore\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Kptfile\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Makefile\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 README.md\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 canary.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 deployment.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 _helpers.tpl\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 hpa.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ingress.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ksvc.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 NOTES.txt\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 sa.yaml\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 service.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 values.yaml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 .lighthouse\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 jenkins-x\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pullrequest.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 release.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 triggers.yaml\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 OWNERS\n\u251c\u2500\u2500 OWNERS_ALIASES\n\u2514\u2500\u2500 preview\n    \u251c\u2500\u2500 helmfile.yaml\n    \u251c\u2500\u2500 Kptfile\n    \u2514\u2500\u2500 values.yaml.gotmpl\n```\n\nThe Jenkins X pipeline files are all located in the `.lighthouse/jenkins-x` folder.\nInside this folder, you should see these files:\n\n- triggers.yaml: Defines the rules for triggering pipelines defined in the pull request and release yaml files\n- pullrequest.yaml: Runs the steps when you open a pull request against the base branch of the repository\n- release.yaml: Runs the steps when a change is made to the base branch of the repository\n\nAn example of a triggers.yaml is as follows:\n\n```yaml\napiVersion: config.lighthouse.jenkins-x.io/v1alpha1\nkind: TriggerConfig\nspec:\n  presubmits:\n    - name: pr\n      context: \"pr\"\n      always_run: true\n      optional: false\n      source: \"pullrequest.yaml\"\n  postsubmits:\n    - name: release\n      context: \"release\"\n      source: \"release.yaml\"\n      branches:\n        - ^main$\n        - ^master$\n```\n\nThere are two types of trigger configurations\n\n- Presubmit: Determines what to run when a pull request is opened against the base branch\n- Postsubmit: Determines what to run when commits are pushed to the base branch.\n\nThe source field sets the location of the files which have the pipeline definitions.\n\nAn example of a pullrequest file is as follows:\n\n```yaml\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  creationTimestamp: null\n  name: pullrequest\nspec:\n  pipelineSpec:\n    tasks:\n      - name: from-build-pack\n        resources: {}\n        taskSpec:\n          metadata: {}\n          stepTemplate:\n            image: uses:jenkins-x/jx3-pipeline-catalog/tasks/go/pullrequest.yaml@versionStream\n            name: \"\"\n            resources:\n              # override limits for all containers here\n              limits: {}\n            workingDir: /workspace/source\n          steps:\n            - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream\n              name: \"\"\n              resources: {}\n            - name: jx-variables\n              resources:\n                # override requests for the pod here\n                requests:\n                  cpu: 400m\n                  memory: 600Mi\n            - name: build-make-linux\n              resources: {}\n            - name: build-container-build\n              resources: {}\n  podTemplate: {}\n  serviceAccountName: tekton-bot\n  timeout: 1h0m0s\nstatus: {}\n```\n\nJenkins X allows the end users to write pipelines in native tekton format.\nHere we are defining a tekton pipelinerun with one task named `from-build-pack` which has a few steps.\nRefer to tekton documentation to learn more about [pipelineruns](https://tekton.dev/docs/pipelines/pipelineruns/) and [tasks](https://tekton.dev/docs/pipelines/tasks/).\n\nThe thing that is different from tekton is the `uses` key.\n\n```yaml\n- image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone-pr.yaml@versionStream\n  name: \"\"\n  resources: {}\n```\n\nJenkins X resolves this step at runtime as follows:\n\n- It looks for a file git-clone-pr.yaml under tasks/git-clone in the `jx3-pipeline-catalog` repository in the jenkins-x organization in github.\n  In this case, the steps defined [here](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/git-clone/git-clone-pr.yaml) are added to the pipeline run.\n- It looks at the portion after `@`.\n  - If this is set to `versionstream`, it looks at the `LIGHTHOUSE_VERSIONSTREAM_JENKINS_X_JX3_PIPELINE_CATALOG` environment variable set in the lighthouse webhook pod to retrieve the sha. This sha belongs to a commit in the base branch of the `jx3-pipeline-catalog` repository\n  - If this is not set to `versionstream`, it uses the sha to get the version of the git-clone-pr.yaml file.\n  - If sha is missing, an error is returned.\n\nWhen a pull request is opened against the base branch of the repository, the lighthouse webhook component of Jenkins X will create a lighthouse job and subsequently a tekton pipelinerun.\n\nThe tekton pipelinerun created after a PR is opened looks like this (some fields are removed for simplicity):\n\n```yaml\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  ...\nspec:\n  params:\n  - name: BUILD_ID\n    value: \"\"\n  ...\n  pipelineSpec:\n    params:\n    - description: the specification of the job\n      name: JOB_SPEC\n      type: string\n    ...\n    tasks:\n    - name: from-build-pack\n      params:\n      - name: BUILD_ID\n        value: $(params.BUILD_ID)\n      ...\n      resources: {}\n      taskSpec:\n        metadata: {}\n        params:\n        - description: the unique build number\n          name: BUILD_ID\n          type: string\n        ...\n        spec: null\n        stepTemplate:\n          env:\n          - name: HOME\n            value: /tekton/home\n          ...\n          envFrom:\n          - secretRef:\n              name: jx-boot-job-env-vars\n              optional: true\n          name: \"\"\n          resources: {}\n          workingDir: /workspace/source\n        steps:\n        - envFrom:\n          - secretRef:\n              name: jx-boot-job-env-vars\n              optional: true\n          image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0\n          name: git-clone\n          resources: {}\n          script: |\n            #!/bin/sh\n            export SUBDIR=\"source\"\n            echo \"git cloning url: $REPO_URL version $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $SUBDIR\"\n            git config --global --add user.name ${GIT_AUTHOR_NAME:-jenkins-x-bot}\n            git config --global --add user.email ${GIT_AUTHOR_EMAIL:-jenkins-x@googlegroups.com}\n            git config --global credential.helper store\n            git clone $REPO_URL $SUBDIR\n            cd $SUBDIR\n            git fetch origin $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER\n            git checkout $(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER\n            git reset --hard $PULL_PULL_SHA\n            echo \"checked out revision: $PULL_PULL_REF:$(echo $JOB_NAME | tr '[:lower:]' '[:upper:]')-$PULL_NUMBER@$PULL_PULL_SHA to dir: $SUBDIR\"\n          workingDir: /workspace\n        - envFrom:\n          - secretRef:\n              name: jx-boot-job-env-vars\n              optional: true\n          image: ghcr.io/jenkins-x/jx-boot:3.2.402\n          name: git-merge\n          resources: {}\n          script: |\n            #!/usr/bin/env sh\n            jx gitops git merge\n          workingDir: /workspace/source\n        - image: ghcr.io/jenkins-x/jx-boot:3.2.402\n          name: jx-variables\n          resources:\n            requests:\n              cpu: 400m\n              memory: 600Mi\n          script: |\n            #!/usr/bin/env sh\n            jx gitops variables\n            jx gitops pr variables\n        - image: golang:1.17.9\n          name: build-make-linux\n          resources: {}\n          script: |\n            #!/bin/sh\n            make linux\n        - image: gcr.io/kaniko-project/executor:v1.6.0-debug\n          name: build-container-build\n          resources: {}\n          script: |\n            #!/busybox/sh\n            source .jx/variables.sh\n            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json\n            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION\n        workspaces:\n        - description: The git repo will be cloned onto the volume backing this workspace\n          mountPath: /workspace\n          name: output\n      workspaces:\n      - name: output\n        workspace: output\n    workspaces:\n    - description: The git repo will be cloned onto the volume backing this workspace\n      name: output\n  podTemplate: {}\n  serviceAccountName: tekton-bot\n  timeout: 1h0m0s\n  workspaces:\n  - emptyDir: {}\n    name: output\nstatus:\n  ...\n  taskRuns:\n    jx-test-pr-13-pr-scfbz-from-build-pack-bx72q:\n      pipelineTaskName: from-build-pack\n      status:\n        ...\n```\n\nAnother component of Jenkins X, the `jx-build-controller` running in the dev namespace (jx by default) watches newly created tekton pipelineruns and creates Jenkins X pipeline activities from them.\n\nThe pipeline activity generated from the tekton pipelinerun looks as follows:\n\n```yaml\napiVersion: jenkins.io/v1\nkind: PipelineActivity\nmetadata:\n  ...\nspec:\n  ...\n  steps:\n    - kind: Stage\n      stage:\n        ...\n        steps:\n          - completedTimestamp: \"2022-07-02T23:52:12Z\"\n            name: Git Clone\n            startedTimestamp: \"2022-07-02T23:52:10Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-02T23:52:14Z\"\n            name: Git Merge\n            startedTimestamp: \"2022-07-02T23:52:13Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-02T23:52:16Z\"\n            name: Jx Variables\n            startedTimestamp: \"2022-07-02T23:52:14Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-02T23:52:34Z\"\n            name: Build Make Linux\n            startedTimestamp: \"2022-07-02T23:52:16Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-02T23:53:16Z\"\n            name: Build Container Build\n            startedTimestamp: \"2022-07-02T23:52:34Z\"\n            status: Succeeded\n```\n\nOnce this pull request is approved and merged into the base branch, a release pipeline is started (as configured in the triggers file).\n\nThe release pipeline has a promote step, which looks like this:\n\n```yaml\n- name: promote-jx-promote\n  resources: {}\n```\n\nwhich resolves to this\n\n```yaml\n- image: ghcr.io/jenkins-x-plugins/jx-promote:0.4.0\n  name: promote-jx-promote\n  resources: {}\n  script: |\n    #!/usr/bin/env sh\n    source .jx/variables.sh\n    jx promote -b --all --timeout 1h --no-poll\n```\n\nThis opens a pull request (PR) in the cluster git repository.\nNormally two PRs are opened, one for the staging environment and one for the production environment.\nThe staging environment PR is merged automatically if the pipeline passes, thereby promoting the application to the staging environment.\nThe production environment PR needs to be merged manually.\nOnce the production PR is merged, Jenkins X will promote your code to production.\n",
            "content/en/v3/about/concepts/environments.md": "---\ntitle: Environments\nlinktitle: Environments\ntype: docs\ndescription: Introduction to Jenkins X Environments\nweight: 200\naliases:\n  - /v3/about/concepts/environments\n---\n\nEnvironment is a [kubernetes custom resource (CR)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) in Jenkins X where the application code lives.\nExamples of environment include development, testing, staging and production.\nEnvironments are scoped to kubernetes namespaces and essentially extend a namespace with additional Jenkins X related metadata.\n\nAfter installing Jenkins X, a development environment is created.\nThis is the environment where all Jenkins X related resources like lighthouse, build controller, nexus, chart museum are installed.\nDev environment by default is in the `jx` namespace, but it is configurable.\nThis is also the environment where all your pipelines will run.\n\nOther environments like staging and production can be in the same cluster as the development environment or in remote clusters.\n\nEnvironments can be of different types:\n\n- Permanent\n- Preview\n- Test\n- Edit\n- Development\n\nApplications can be promoted to environments by using any of the three stratergies:\n\n- Manual\n- Auto\n- Never\n\nAn example of an environment is as follows (some fields are removed for simplicity):\n\n```yaml\napiVersion: jenkins.io/v1\nkind: Environment\nmetadata:\n  labels:\n    env: dev\n  name: dev\n  namespace: jx\nspec:\n  kind: Development\n  label: Development\n  namespace: jx\n  promotionStrategy: Never\n  source:\n    ref: master\n    url: https://github.com/jenkins-x/jx3-eks-vault.git\n  webHookEngine: Lighthouse\n```\n\nThis is an environment of type `Development` that is located in the namespace `jx`.\nIt has promotion strategy set to `never` to not allow your application specific code to be deployed in this development namespace.\n\nYou can view all environments in your cluster by running:\n\n```bash\nkubectl get environments -A\n```\n",
            "content/en/v3/about/concepts/pipeline-activity.md": "---\ntitle: Pipeline activites\nlinktitle: Pipeline activites\ntype: docs\ndescription: Introduction to Jenkins X Pipeline activites\nweight: 300\naliases:\n  - /v3/about/concepts/pipeline-activities\n---\n\nJenkins X creates pipeline activites for jobs.\nIt's a [kubernetes custom resource (CR)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) which is scoped to a namespace.\n\nPipeline activities are made up of steps.\nA step can have three kinds\n\n- Stage\n- Preview\n- Promote\n\nEach type of step has a name, status, start and end timestamp.\nA pipeline activity can have steps of different kinds (for example a pipeline activity can have a stage, preview and promote step)\nLet's look at each of these kinds in detail.\n\n### Stage\n\nA step of kind step is made up of multiple sub steps and is normally associated with the Continuous Integration (CI) part of Jenkins X.\nThe build controller which runs in the development environment creates a stage for every [tekton taskrun](https://tekton.dev/docs/pipelines/taskruns/).\n\nExample of a pipeline activity with a step of kind stage is shown below (some fields are left out for simplicity):\n\n```yaml\napiVersion: jenkins.io/v1\nkind: PipelineActivity\nspec:\n  pipeline: jenkins-x-plugins/jx-secret/PR-382\n  startedTimestamp: \"2022-06-28T21:58:12Z\"\n  status: Succeeded\n  steps:\n    - kind: Stage\n      stage:\n        completedTimestamp: \"2022-06-28T22:12:20Z\"\n        name: jx secret lint\n        startedTimestamp: \"2022-06-28T21:58:21Z\"\n        status: Succeeded\n        steps:\n          - completedTimestamp: \"2022-06-28T21:58:23Z\"\n            name: Git Clone\n            startedTimestamp: \"2022-06-28T21:58:21Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-06-28T22:12:20Z\"\n            name: Make Lint\n            startedTimestamp: \"2022-06-28T21:58:25Z\"\n            status: Succeeded\n```\n\nThis is a simple Jenkins X pipeline activity which has a step of kind **stage**.\n\n### Preview\n\nA Preview step is responsible for creating a preview environment as part of a pull request.\nTo learn more about environments see [this](../environments).\n\nA simple pipeline activity with a step of kind preview is shown below (some fields are left out for simplicity):\n\n```yaml\napiVersion: jenkins.io/v1\nkind: PipelineActivity\nspec:\n  steps:\n    - kind: Stage\n      stage:\n        completedTimestamp: \"2022-07-01T20:33:32Z\"\n        name: from build pack\n        startedTimestamp: \"2022-07-01T20:31:14Z\"\n        status: Succeeded\n        steps:\n          - completedTimestamp: \"2022-07-01T20:31:33Z\"\n            name: Git Clone\n            startedTimestamp: \"2022-07-01T20:31:14Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-01T20:31:34Z\"\n            name: Git Merge\n            startedTimestamp: \"2022-07-01T20:31:33Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-07-01T20:33:32Z\"\n            name: Promote Jx Preview\n            startedTimestamp: \"2022-07-01T20:33:10Z\"\n            status: Succeeded\n    - kind: Preview\n      preview:\n        applicationURL: https://jx-docs-jx-jenkins-x-jx-docs-pr-3619.infra.jenkins-x.rocks\n        pullRequestURL: https://github.com/jenkins-x/jx-docs/pull/3619\n        startedTimestamp: \"2022-07-01T20:33:32Z\"\n```\n\nApart from the stage step, there is a preview step in the pipeline activity.\n\n### Promote\n\nA Promote step is responsible for deploying a version of the application to an environment.\nTo learn more about environments see [this](../environments).\n\nA simple pipeline activity with step of kind promotion is shown below (some fields are left out for simplicity):\n\n```yaml\napiVersion: jenkins.io/v1\nkind: PipelineActivity\nspec:\n  steps:\n    - kind: Stage\n      stage:\n        completedTimestamp: \"2022-06-05T18:21:44Z\"\n        name: from build pack\n        startedTimestamp: \"2022-06-05T18:20:23Z\"\n        status: Succeeded\n        steps:\n          - completedTimestamp: \"2022-06-05T18:20:24Z\"\n            name: Git Clone\n            startedTimestamp: \"2022-06-05T18:20:23Z\"\n            status: Succeeded\n          - completedTimestamp: \"2022-06-05T18:20:25Z\"\n            name: Next Version\n            startedTimestamp: \"2022-06-05T18:20:24Z\"\n            status: Succeeded\n    - kind: Promote\n      promote:\n        environment: staging\n        pullRequest:\n          pullRequestURL: https://github.com/jx/jx-promote/pull/28\n          startedTimestamp: \"2022-06-05T18:21:35Z\"\n          status: Succeeded\n        startedTimestamp: \"2022-06-05T18:21:35Z\"\n        status: Succeeded\n    - kind: Promote\n      promote:\n        environment: production\n        pullRequest:\n          pullRequestURL: https://github.com/jx/jx-promote/pull/29\n          startedTimestamp: \"2022-06-05T18:21:41Z\"\n          status: Succeeded\n        startedTimestamp: \"2022-06-05T18:21:41Z\"\n        status: Succeeded\n  version: 0.1.3\n```\n\nThis pipeline activity has two steps of kind promote (apart from the one step of kind stage).\nThe first promote step promotes to staging environment and the second step promotes to production environment.\n\nYou can view all pipeline activities in your cluster by running:\n\n```bash\nkubectl get pipelineactivities -A\n```\n",
            "content/en/v3/about/concepts/source-repository.md": "---\ntitle: Source Repositories\nlinktitle: Source Repositories\ntype: docs\ndescription: Introduction to Jenkins X Source Repositories\nweight: 100\naliases:\n  - /v3/about/concepts/sourcerepositories\n---\n\nSource Control Management (SCM) Repositories which have been configured to run CI/CD pipelines using Jenkins X are represented as Source Repositories.\nSource Repositories are a [kubernetes custom resource (CR)](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) scoped to a namespace and created in the development namespace/environment.\n\nA source repository includes information about the SCM provider, Organization, Repository name and clone URLs.\n\nA simple example of a source repository is shown below\n\n```yaml\napiVersion: jenkins.io/v1\nkind: SourceRepository\nmetadata:\n  labels:\n    gitops.jenkins-x.io/pipeline: namespaces\n    owner: jenkins-x\n    provider: github\n    repository: jx\n  name: jenkins-x-jx\n  namespace: jx\nspec:\n  httpCloneURL: https://github.com/jenkins-x/jx.git\n  org: jenkins-x\n  provider: https://github.com\n  providerKind: github\n  providerName: github\n  repo: jx\n  url: https://github.com/jenkins-x/jx\n```\n\nThis shows a source repository named `jenkins-x-jx` in the namespace `jx`.\nIt represents a repository named `jx` in the `jenkins-x` organization which is hosted in `github`.\n\nYou can view all source repositories in your cluster by running:\n\n```bash\nkubectl get sourcerepositories -A\n```\n",
            "content/en/v3/about/extending.md": "---\ntitle: Extending\nlinktitle: Extending\ntype: docs\ndescription: How to extend Jenkins X 3.x \nweight: 500\naliases: \n    - /v3/about/extending/\n---\n\nJenkins X has a number of extension points you can use to extend the CI/CD platform to suit your needs:\n\n## Charts\n\n[Helm](https://helm.sh/) [charts](https://helm.sh/docs/topics/charts/) are the standard way to package applications for kubernetes.\n\nIt's easy to use GitOps to [add charts](/v3/develop/apps/#adding-charts) to any of your clusters and [customize them](/v3/develop/apps/#customising-charts) however you need.\n\n\nYou can also easily [add one or more kubernetes resources to a cluster via a source layout chart](/v3/develop/apps/#adding-resources)\n    \n\n## Plugins\n\nThe `jx` command line in version 3 is build on [plugins](https://github.com/jenkins-x/jx#plugins).\n\nIt turns out anyone can create a new plugin to wrap up some functionality that is either ran on a developer laptop or is used via a container image inside a pipeline step.\n\nPlugins usually written in [Go](https://golang.org/) as it has awesome Kubernetes support and generates easy to use statically compiled binaries - though you are free to create plugins in any programming language.\n\nIf you wish to create a new plugin try browse the [jenkins-x-plugins organisation](https://github.com/jenkins-x-plugins) for inspiration or check out the [standard plugins used in the jx cli](https://github.com/jenkins-x/jx#plugins)\n  \n\n### Developing Plugins\n\nThe easiest way to work on the plugins is to clone the source of a plugin locally and make local changes and build the code (you will need a [go 1.15 installation](https://golang.org/doc/install)).\n\ne.g.\n\n```bash \ngit clone https://github.com/jenkins-x/jx-gitops \ncd jx-gitops\nmake build\n```\n\nNow you can test out the local build of a plugin by calling **./build/jx-gitops** instead of using, say **jx gitops**\n\n### Testing local builds with **jx**\n\nIf you add your **./build** for your locally built plugin to your **$PATH** environment variable you can invoke your local **./build/jx-gitops** binary as if its a regular **jx** plugin via:\n\n```bash \njx gitops help\n```\n\nBasically **jx myplugin** will normally download the **jx-myplugin** binary and invoke that - unless it finds **jx-myplugin** on the **$PATH**.\n\n\n### Using a specific version of a plugin\n\nIf you want to test a new plugin version before its been tested released in the version stream you can use an environment variable...\n\n```bash \nexport JX_GITOPS_VERSION 1.2.3\n\n# we will now try version 1.2.3 of the gitops plugin:\njx gitops help\n```\n\n## Triggers\n\nWith version 3.x we default to using [Pipeline Catalogs](/v3/develop/pipelines/) containing Tekton resources to define CI/CD pipelines.\n\ne.g. the default CI/CD pipelines from the [default Jenkins X Pipeline Catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs) define tekton pipelines in the `.lighthouse/jenkins-x` folder.\n\nInside each repository there is now a trigger file called `triggers.yaml` defined at`.lighthouse/jenkins-x/triggers.yaml` to define the [lighthouse](https://github.com/jenkins-x/lighthouse) `presubmits` and `postsubmits` (i.e. Pull Request pipelines and release pipelines).\n\nYou can add any number of folders with the `.lighthouse` folder to add any number of `presubmits` and `postsubmits` (i.e. Pull Request pipelines and releases).\n\nIf you define a pipeline you want to share with other repositories you can then use [kpt pkg get](https://googlecontainertools.github.io/kpt/reference/pkg/get/) to copy the folder into other repositories. Later on you can then use [kpt pkg update](https://googlecontainertools.github.io/kpt/reference/pkg/update/) to replicate upstream changes to other repositories. Or use the [jx gitops upgrade](/v3/guides/upgrade/#cluster) command which uses `kpt pkg update` under the covers.\n\n## Pipeline Catalog\n\nThe `pipeline catalog` contains default triggers, tekton pipelines and associated files (e.g. `Dockerfile` and helm charts) for different languages and runtimes.\n\nThe pipeline catalog is used to default the triggers, pipelines and other files for [new projects](/v3/develop/create-project/) when you import or create new quickstarts.\n\nYou can browse the [default Jenkins X Pipeline Catalog here](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs).\n\nIf you want you can fork the [jenkins-x/jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog) repository and make your modifications to add/remove folders for different languages or modify the pipelines and associated files.\n\nWe'd prefer if any improvements or enhancements could be submitted back to the project via a Pull Request then we all get to share your improvements; but its totally fine to have some local modifications for your specific business requirements. \n\nTo use your custom fork modify the [extensions/pipeline-catalog.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/extensions/pipeline-catalog.yaml) file in your cluster git repository to link to your fork instead of the  [jenkins-x/jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog) repository:\n\n```yaml \n...\napiVersion: project.jenkins-x.io/v1alpha1\nkind: PipelineCatalog\nmetadata:\n  creationTimestamp: null\nspec:\n  repositories:\n  - gitRef: 0ad0e49dca4d3a1e952c6f7c548e77b2136c5035\n    gitUrl: https://github.com/myorg/jx3-pipeline-catalog\n    label: My Pipeline Catalog\n ```\n\n#### Updatebot for custom pipeline catalogs\n\nYou can use _updatebot_ to keep your custom pipeline catalog up to date. Add this config to your cluster repo in _.jx/updatebot.yaml_:\n\n```yaml\napiVersion: updatebot.jenkins-x.io/v1alpha1\nkind: UpdateConfig\nspec:\n  rules:\n    - urls:\n        - https://github.com/my-org/jx3-pipeline-catalog\n      changes:\n        - regex:\n            pattern: \"jenkins-x/jx:(.*)\"\n            files:\n              - \"**/*.yaml\"\n        - regex:\n            pattern: \"jenkins-x/jx-boot:(.*)\"\n            files:\n              - \"**/*.yaml\"\n```\n\nTo update your pipeline catalog with every cluster upgrade, add these steps to your _.lighthouse/jenkins-x/release.yaml_  before the _admin-log_ step:\n\n```yaml\n- image: perl:slim\n  name: next-version\n  script: |\n    #!/usr/bin/env sh\n    perl -ne'/version: (.*)/ && print $1' versionStream/packages/jx.yml > VERSION\n- image: uses:jenkins-x/jx3-pipeline-catalog/tasks/updatebot/release.yaml@versionStream\n  name: promote-release\n```\n\nThis will open a PR on the pipeline catalog repo if updates are available. If Jenkins X manages the pipeline catalog repo, the PRs will be automatically merged.\n\n## QuickStarts\n\nQuickstarts are sample projects which are used `jx project quickstart` when you [create new projects](/v3/develop/create-project/)\n\nThe default quickstart projects are in the [jenkins-x-quickstarts](https://github.com/jenkins-x-quickstarts/) github organisation.\n\nThe quickstarts are defined in your [extensions/quickstarts.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/extensions/quickstarts.yaml) file and defaults to including all of the quickstarts in the [versionStream/quickstarts.yml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/versionStream/quickstarts.yaml) file.\n         \nYou can include/exclude quickstarts from the version stream using the `includes` and `excludes` regular expressions in the [extensions/quickstarts.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/extensions/quickstarts.yaml) file as shown below. \n             \nYou can add your own quickstarts into the [extensions/quickstarts.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/extensions/quickstarts.yaml) file as follows\n\n\n```yaml \napiVersion: project.jenkins-x.io/v1alpha1\nkind: Quickstarts\nspec:\n  defaultOwner: myorg\n\n  # custom quickstarts\n  quickstarts:\n  - name: cheese\n    language: JavaScript\n    downloadZipURL: https://codeload.github.com/jenkins-x-quickstarts/cheese/zip/master\n\n  # shared quickstarts from the version stream\n  imports:\n  - file: versionStream/quickstarts.yaml\n    includes:\n    - \".*\"\n    excludes:\n    - \".*/node.*\"\n```\n\n## Octant\n\n\nOur preferred UI for Kubernetes, Tekton and Jenkins X is [octant](/v3/develop/ui/octant) as its easy to install/run and has fined grained RBAC and security without the hassle of setting up TLS, DNS and SSO on every cluster.\n\nOne of the awesome features of [Octant](https://octant.dev/) is it supports plugins so that anyone can build a plugin to extend the UI. We've created the [octant-jx](https://github.com/jenkins-x/octant-jx) plugin to extend [Octant](https://octant.dev/) with the Jenkins X capabilities of environments, pipelines, source repositories and so forth. \n\nIf you wish to extend [Octant](https://octant.dev/) further either contribute to the [octant-jx](https://github.com/jenkins-x/octant-jx) plugin or create your own!\n",
            "content/en/v3/about/how-it-works.md": "---\ntitle: How it works\nlinktitle: How it works\ntype: docs\ndescription: How Jenkins X 3.x works under the covers\nweight: 130\naliases: \n    - /docs/v3/about/how-it-works/\n    - /v3/about/how-it-works/\n---\n\n\n## How it works\n\nThe GitOps repository templates contain the source code, scripts and docs to help you get your cloud resources created (e.g. a kubernetes cluster and maybe buckets and/or a secret manager).\n\nOnce you have created the GitOps repository from one of the [available templates and followed the instructions](/v3/admin/platform/) to set up your infrastructure you [install the git operator](/v3/guides/operator/) via the [jx admin operator](https://github.com/jenkins-x/jx-admin/blob/master/docs/cmd/jx-admin_operator.md) command:\n\n\n```bash\n    jx admin operator\n```\n\n\nThat command essentially installs the [git operator](https://github.com/jenkins-x/jx-git-operator) chart, passing in the git URL, username and token to run the boot process.\n\n\n### Git Operator\n\nThe [git operator](https://github.com/jenkins-x/jx-git-operator) works by polling the git repository looking for changes and running a kubernetes Job on each change. The Job resource is defined inside the git repository at **versionStream/git-operator/job.yaml**\n\nYou can view the boot Job log via the command:\n\n\n```bash\n    jx admin log\n```\n\n\nOr you can browse the log in the Octant UI in the operations tab.\n\n\n### Boot Job\n\nThe boot job runs on startup and on any git commit to the GitOps repository you used to install the operator.\n\nThe boot job is defined in **versionStream/git-operator/job.yaml** in git and essentially:\n\n\n* Runs the generate step\n* Runs the apply step\n\n\n#### Generate step\n\nThis step is run in the following situations:\n\n\n* On startup \n* After each commit in a Pull Request\n* Whenever a commit is made to the main branch which isn\u2019t a merge of a Pull Request merge\n\n\nThe generate step does the following:\n\n\n* Resolves any missing values (cluster information, domain name) in the **jx-values.yaml** file\n* Resolves any missing versions or helm values.yaml files the **helmfile.yaml** file\n* Runs `helmfile template` to generate the kubernetes resources for all the charts\n* Copy all the generated resources into a tree of files in **config-root/namespaces/myns/somechart/*.yaml** where \n    * **myns** is the namespace for the resources\n    * **Somechart** is the name of the chart (or chart alias) \n* Any **Secret** resource is converted to an **ExternalSecret** so that it can be checked into git\n  * we use [secret mapping](https://github.com/jenkins-x/jx-secret#mappings) to generate **ExternalSecret** resources which define where the `Secret` will be populated from (e.g. vault or your cloud provider secret store)\n  * secrets can be populated by either:\n    * directly in the secret store (e.g. via vault or the cloud secret store directly). If you are using vault you can [follow these instructions](/v3/guides/secrets/vault/#using-vault) to access the vault UI\n    * via [jx secret edit](/v3/guides/secrets/#edit-secrets) command\n    * via the [jx secret populate](/v3/develop/reference/jx/secret/populate) command inside the boot job which uses the `versionStream/charts/*/secret-schema.yaml` files to populate with generators and default values from the [secret schema files](https://github.com/jenkins-x/jx-secret#schema) \n* A few extra steps are run on the YAMLs to help deployments\n    * Add a common label so that `kubectl apply --prune --selector` can be used\n    * Add some hashes to resources so that changes to configurations causes a rolling upgrade\n    * Add support for the [pusher wave](https://github.com/pusher/wave) operator so that changing of secret values (inside, say, vault or Amazon/Azure/Google secret manager) causes a rolling upgrade of pods.\n\n\n#### Apply step\n\nThis step is run on any commit to the main branch(after the generate step has completed).\n\nIt essentially does `kubectl apply` of the resources in the **config-root** tree in git.\n\nThe apply step could be performed by other tools if need be (e.g. Google Anthos Config Sync or flux).\n\n\n### Promotion\n\nWhen you create a quickstart or import a new project a new release is created then promotion is triggered just like in Jenkins X 2.x.\n\nOne change from Jenkins X 2.x is we default to including the specific kubernetes resources in git; rather than, say, just the name of a helm chart and the version.\n\nSo what tends to happen is:\n\n* the promote step in a pipeline creates a Pull Request on the cluster repository for the cluster to add or upgrade a helm chart and version\n* The above [Generate](#generate-step) and [Apply step](#apply-step) runs to fill in more details to the Pull Request of the actual kubernetes resources that will be added, modified or removed\n* a second git commit is added to the Pull Request with the title `chore: regenerated`\n* the `updatebot` label is added to the Pull Request so that the Pull Request can be considered for automatic merging if all of the git checks are green (including the Pull Request pipelines)\n* once the Pull Request merges to the main branch the `git operator` will trigger to apply the kubernetes resources to the cluster via the above apply step\n\n\nSo you will see 2 commits on a typical promotion pull request:\n\n* the high level change of the helm chart(s) and versions. e.g. to change `myapp` to version `1.2.3` \n* the detail of the actual changes that will apply to kubernetes resources. e.g. a new `Deployment` or changes to the `image:` of an existing `Deployment` \n\n\n### Importing / Creating Quickstarts\n\nDue to the new GitOps model this is a little more complex than in v2 since imports are done via GitOps and the changes in git result in a Job / Pipeline running in the cluster to effect change.\n\nHere are the steps involved in [creating projects](/v3/develop/create-project/) via importing / creating quickstarts:\n\n* Run the `jx project quickstart` or `jx project import` command as [described here](/v3/develop/create-project/)\n* New git repository is created if:\n  * you are creating a quickstart via `jx project quickstart`\n  * you are running `jx project import` inside a directory which has never been pushed to a git repository before\n* A Pull Request is created on your cluster repo that registers your app's repository to the cluster\n  * this Pull Request will create or modify a file called `.jx/gitops/source-config.yaml`\n* The `jx project` command now waits for: \n  * the Pull Request to merge\n  * Lighthouse configuration to be updated to include the new repository\n  * a webhook to be setup for the new repository    \n* The Pull Request on your cluster repo triggers a pipeline like the above [Promotion flow](#promotion) \n  * a second git commit is generated and pushed to the Pull Request with the title `chore: regenerated` to add the git repository to the Lighthouse configuration\n* When the Pull Request merges the above [Apply step](#apply-step) runs\n  * Lighthouse configuration is updated\n  * a Webhook is registered for Lighthouse on the app's repository\n* The `jx project` command now continues and pushes the new [tekton pipelines for your app](/v3/develop/pipelines/) to the main branch of the git repository\n  * this triggers a new pipeline to run on your app which creates a new release of your app \n  * once the release is complete a Pull Request is created to start the [Promotion flow](#promotion) of the new app version\n  * when this Promote Pull Request merges your application will be running in `Staging` \n\n\nYou can see an example of this in the [demo of Jenkins X V3](/blog/2020/09/16/jx-v3-alpha/)  \n   \n\n### Secrets \n\nWe want to [check all of the kubernetes resources into git](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template) so they are all nicely versioned through time so its easy to diagnose when things start to misbehave.\n\nSo we do this:\n\n* Any **Secret** resource generated in a helm chart is is converted to an **ExternalSecret** so that it can be checked into git\n  * we use [secret mapping](https://github.com/jenkins-x/jx-secret#mappings) to generate **ExternalSecret** resources which define where the `Secret` will be populated from (e.g. vault or your cloud provider secret store)\n* secrets can be populated by either:\n  * directly in the secret store (e.g. via vault or the cloud secret store directly). If you are using vault you can [follow these instructions](/v3/guides/secrets/vault/#using-vault) to access the vault UI\n  * via [jx secret edit](/v3/guides/secrets/#edit-secrets) command\n  * via the [jx secret populate](/v3/develop/reference/jx/secret/populate) command inside the boot job which uses the `versionStream/charts/*/secret-schema.yaml` files to populate with generators and default values from the [secret schema files](https://github.com/jenkins-x/jx-secret#schema) \n\n\nWhat this basically means is that helm charts with secrets just work and you can then modify secrets or rotate secrets via the secret store. Also if you lose or move a cluster, GitOps will restore your cluster again using the contents of your git repository and whatever is in your secret store. \n\n#### Troubleshooting\n\nIf you are not able to create quickstarts or import projects its most probably webhooks not being setup correctly.\n\nCheck out the [webhooks troubleshooting guide](/v3/admin/troubleshooting/webhooks/)\n\n## Comparison to 2.x\n\nFrom a high level Jenkins X 3.x similar to 2.x in that:\n\n* We use GitOps to manage applications, configurations and versions; keeping everything but secret values in git\n\nHowever we\u2019ve made a few changes in 3.x:\n\n* We have a [simpler UX now for setting up Jenkins X](/v3/admin/platform/) which uses a library of GitOps repository templates you can start from\n    * This lets you choose the closest example to the kind of infrastructure, tools and secret store you want to use so it\u2019s easier to get started if your requirements fit the common quickstarts\n* The setup/install/upgrade process runs inside kubernetes rather than on a developers laptop\n    * This avoids all kinds of issues with different installations of tools like git, kubectl, helm etc\n* In 2.x we always had a git repository for Dev, Staging and Production. In 3.x if those environments are all inside the same cluster we use the same git repository for configuring cluster level resources and resources in any namespaces.\n    * So by default there is 1 git repository with Jenkins X 3.x for the installation\n    * Whenever you create separate clusters (e.g. for muticluster support and you want Staging / Production environments to be separate), then each cluster gets its own git repository.\n",
            "content/en/v3/about/maturity-matrix.md": "---\ntitle: Maturity Level Matrix\nlinktitle: Maturity Level Matrix\ntype: docs\ndescription: Jenkins X 3.x features maturity assessment on different cloud providers\nweight: 60\ntoc_hide: true\nhide_summary: true\naliases:\n    - /v3/about/maturity-matrix/\n---\n\n<img src=\"/images/v3/v3-maturity.png\">\n\n<img src=\"/images/v3/jx-v3alpha-color-rep.png\">\n\n<br />\n\nThis maturity matrix describes the tentative plan post Jenkins X v3.0 __GA__ release. This matrix will continue to evolve as we progress further.\n\n<img src=\"/images/v3/jx-v3ga-maturity-matrix.png\">\n",
            "content/en/v3/about/overview/_index.md": "---\ntitle: Overview\nlinktitle: Overview\ntype: docs\ndescription: Overview of the architecture, concepts and motivations for Jenkins X 3.x\nweight: 50\naliases: \n    - /v3/about/overview/\n---\n \nJenkins X 3.x creates clearer separation of concerns between conceptual areas and releasable components.\n \n<iframe style=\"border:none\" width=\"800\" height=\"450\" src=\"https://whimsical.com/embed/SnJBgXG6jz9pqQewiDTNRt@2Ux7TurymNDXVRa4FpLk\"></iframe>\n\n\n## Demo\n\nThe following demo walks you through an overview of the architecture:\n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/bVp5_tZ21AA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n## Microservices \n\nJenkins X uses the following microservices by namespace.\n\nNote that if you have a working Jenkins X installation you can browse all the actual kubernetes resources used across each namespace via the `config-root/namespaces/$namespace/$chartName` folder in your cluster git repository.\n\n\n### `jx-git-operator`\n\nContains the [git operator](/v3/about/how-it-works/#git-operator) from [jenkins-x/git-operator](https://github.com/jenkins-x/jx-git-operator) microservice and the associated [boot jobs](/v3/about/how-it-works/#boot-job).\n\n### `jx` \n\nContains the main development services of Jenkins X:\n\n* **jx-build-controller** watches for `PipelineRun` resources and creates/updates the associated `PipelineActivity` resources used by `jx get build log`, [octant](/v3/develop/ui/octant) and the [pipelines visualizer](/v3/develop/ui/dashboard) \n* **jx-pipelines-visualizer** visualises `PipelineActivity` resources and the associated build logs in a read only UI\n* **jx-preview-gc-jobs** periodically garbage collects `Preview` resources and their associated preview environments created by [jx preview](https://github.com/jenkins-x/jx-preview)\n* **jxboot-helmfile-resources-gcactivities** periodically garbage collects old and completed `PipelineActivity` resources\n* **jxboot-helmfile-resources-gcpods** periodically garbage collects completed `Pods`\n* **jx-kh-check** supports additional [kuberhealthy](https://github.com/Comcast/kuberhealthy) based [health checks](/v3/guides/health/) for Jenkins X specific resources\n\n### `lighthouse`\n\n[jenkins-x/lighthouse](https://github.com/jenkins-x/lighthouse) creates [tekton pipelines](https://tekton.dev/) and triggers [ChatOps](/docs/resources/faq/using/chatops/) on Pull Requests. Its made up of the following components:\n\n* **lighthouse-webhooks** converts webhooks from your git provider into `LighthouseJob` custom resources\n* **lighthouse-tekton-controller** converts `LighthouseJob` custom resources into [tekton](https://tekton.dev/) `PipelineRun` resources (the [tekton controller](https://tekton.dev/) converts `PipelineRun` resources into kubernetes `Pods`\n* **lighthouse-foghorn** watches the execution of `PipelineRun` resources triggered by lighthouse and updates the pipeline status in git so that you see pipelines start, complete or fail on your git provider along with having links the [pipelines visualizer](/v3/develop/ui/dashboard) on each context on a Pull Request\n* **lighthouse-keeper** looks for open Pull Requests with green pipelines and the necessary **approve** labels to be able to auto merge\n* **lighthouse-gc-jobs** periodically garbage collects `LighthouseJob` resources and their associated resources (e.g. `PipelineRun` and `Pods`\n\nthe following are optional extras:\n\n* [bucket repository](https://github.com/jenkins-x/bucketrepo) a lightweight cloud native artifact, chart repository and maven proxy that can be configured to use cloud storage. It's a lightweight cloud native alternative to [nexus](https://www.sonatype.com/nexus/repository-oss)\n* [chart museum](https://github.com/helm/chartmuseum) an optional chart repository\n* [nexus](https://www.sonatype.com/nexus/repository-oss) if used as an artifact repository and maven proxy\n\n\n### `kuberhealthy`\n\nContains the [kuberhealthy](https://github.com/Comcast/kuberhealthy) service to support [health and improve observability](/v3/guides/health/) which used by [jx health](https://github.com/jenkins-x-plugins/jx-health)\n\n### `nginx`\n\nContains the [nginx-ingress](https://github.com/helm/charts/tree/master/stable/nginx-ingress) provider if enabled\n\n### `jx-vault` \n\nthe following are optional extras if not using your cloud providers native secret manager:\n\n* **vault-operator** contains the [vault operator](https://bank-vaults.dev/docs/operator/) which converts `Vault` resources into instances of [HashiCorp Vault](https://www.vaultproject.io/)\n* **vault-instance** contains the [vault instance](https://github.com/jenkins-x-charts/vault-instance) which creates the default `Vault` resource\n\n\n### `secret-infra` \n\n* **kubernetes-external-secrets** contains the [external-secrets/kubernetes-external-secrets](https://github.com/external-secrets/kubernetes-external-secrets) service for handling `ExternalSecrets`. See [how we use secrets](/v3/guides/secrets/))\n* **pusher-wave** contains the [pusher/wave](https://github.com/pusher/wave) service for performing a rolling upgrade of any microservice which consumes `Secret` resources from either vault or a cloud providers secret store and the secrets change in the underlying store \n\n### `tekton-pipelines`\n\nContains the [tekton pipelines](https://tekton.dev/) controllers\n \n",
            "content/en/v3/about/overview/projects.md": "---\ntitle: Projects\nlinktitle: Projects\ntype: docs\ndescription: The open source projects used by Jenkins X\nweight: 55\n---\n\nJenkins X stands on the shoulders of many open source giants...\n\n## Command Line Tools\n\n* [helm](https://helm.sh/) a package manager for kubernetes\n* [helmfile](https://github.com/roboll/helmfile) a tool for installing, upgrading and configuring [helm](https://helm.sh/) charts\n* [kaniko](https://github.com/GoogleContainerTools/kaniko) creates container images on kubernetes using the familiar `dockerfile`\n* [kapp](https://get-kapp.io/) is a tool for applying changes to kubernetes resources safely with dependency tracking\n* [kpt](https://googlecontainertools.github.io/kpt/) provides tools for sharing and configuring YAML files across git repositories\n* [kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/) a command line tool for interacting with kubernetes clusters\n* [kustomize](https://kustomize.io/) a tool for configuring and modifying kubernetes resources \n* [mink](https://github.com/mattmoor/mink) a command line tool for building container images and resolving the image digest in JSON/YAML files for local development or for use inside pipelines (we use the [mink plugin for this](https://github.com/jenkins-x-plugins/mink)\n* [octant](https://octant.dev/) an awesome kubernetes console with plugins which we use for the [Jenkins X Console](/v3/develop/ui/octant/)\n* [skaffold](https://github.com/GoogleContainerTools/skaffold) a tool for incremental development of container images and deployments\n* [tekton cli](https://github.com/tektoncd/cli) the CLI tool for working with [tekton pipelines](https://github.com/tektoncd/pipeline)\n* [terraform](https://www.terraform.io/) a tool managing infrastructure as code\n\n## Microservices\n\n* [CNCF build packs](https://buildpacks.io/) for packaging source code as container images. Or you can use [kaniko](https://github.com/GoogleContainerTools/kaniko) which uses a familiar `dockerfile` to package container images\n* [cert-manager](https://docs.cert-manager.io/en/latest/index.html) for managing certificates for [TLS and DNS](/v3/admin/guides/tls_dns/)\n* [external-dns](https://github.com/kubernetes-sigs/external-dns) for managing certificates for [TLS and DNS](/v3/admin/guides/tls_dns/)\n* [knative](https://knative.dev/) a framework for building auto scaling (to zero) serverless style applications on kubernetes\n* [kuberhealthy](https://github.com/Comcast/kuberhealthy) for health reporting of Kubernetes itself, Jenkins X and other microservices\n* [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) for [managing secrets](/v3/admin/setup/secrets/) via [Hashicorp Vault](https://www.vaultproject.io/) or the cloud native secret managers on Alibaba, Amazon, Azure, Google etc\n* [jenkins](https://jenkins.io) the most popular build automation server which can be [setup via GitOps with Jenkins X](/v3/admin/guides/jenkins/) and a fellow [CDF founding project](https://cd.foundation/projects/)\n* [jenkinsfile runner](https://github.com/jenkinsci/jenkinsfile-runner) a way of running a jenkins pipeline in a container\n* [lighthouse](https://github.com/jenkins-x/lighthouse) our strategic solution for webhooks and ChatOps for multiple git providers\n* [push-wave](https://github.com/jenkins-x-charts/pusher-wave#wave) for automatically performing rolling upgrades when secrets are rotated in your secret store\n* [tekton pipelines](https://github.com/tektoncd/pipeline) cloud native pipeline engine for kubernetes and a fellow [CDF founding project](https://cd.foundation/projects/)\n* [tekton catalog](https://github.com/tektoncd/catalog) a catalog of reusable [tekton pipelines](https://github.com/tektoncd/pipeline) which [can be used easily with Jenkins ](/v3/develop/pipelines/#adding-tasks-from-the-tekton-catalog)\n* [vault](https://www.vaultproject.io/) a secret store\n* [vault operator](https://bank-vaults.dev/docs/operator/) an operator for installing and unsealing [vault](https://www.vaultproject.io/)\n",
            "content/en/v3/about/overview/source.md": "---\ntitle: Source\nlinktitle: Source\ntype: docs\ndescription: The location of the various source code repositories\nweight: 400\n---\n\nJenkins X is built on the [shoulders of open source giants](/v3/about/overview/projects/) and also has lots of different source repositories to make various things from CLI tools, docker images and helm charts \n\nThis page lists the main organisations and repositories.\n\n## Organisations\n\n* [jenkins-x](https://github.com/jenkins-x) the main organisation for source code\n* [jenkins-x-plugins](https://github.com/jenkins-x-plugins) contains plugins to Jenkins X 3.x. See the [extension guide](https://jenkins-x.io/v3/about/extending/#plugins) for details\n* [jenkins-x-charts](https://github.com/jenkins-x-charts) the main helm charts we distribute\n* [jenkins-x-images](https://github.com/jenkins-x-images) contains some custom docker image builds\n* [jenkins-x-quickstarts](https://github.com/jenkins-x-quickstarts) the quickstart projects used by [create quickstart](/docs/getting-started/first-project/create-quickstart/)\n* [jenkins-x-test-projects](https://github.com/jenkins-x-test-projects) test projects we use in test cases \n* [jx3-gitops-repositories](https://github.com/jx3-gitops-repositories) the quickstart repositories for [creating new infrastructure and installations](/v3/admin/) on different cloud providers\n\n## Repositories\n\nHere we'll call out of some of the main repositories in the above organisations:\n\n* [jenkins-x/jx](https://github.com/jenkins-x/jx) is the 3.x CLI \n* [jenkins-x/jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog) the main [Pipeline Catalog](https://jenkins-x.io/v3/guides/pipeline-catalog/)\n* [jenkins-x/jx3-versions](https://github.com/jenkins-x/jx3-versions) contains the [version stream](/about/concepts/version-stream/) - the stable versions of all _charts_ and CLI _packages_\n\nAdditional repositories:\n\n* [jenkins-x/jx-docs](https://github.com/jenkins-x/jx-docs) the Hugo based documentation which generates this website\n* [jenkins-x/bdd-jx3](https://github.com/jenkins-x/bdd-jx3) the BDD tests we use to verify the platform changes and verify PRs on [jenkins-x/jx](https://github.com/jenkins-x/jx)\n\n### Tools\n\n* [jenkins-x/lighthouse](https://github.com/jenkins-x/lighthouse) the strategic solution for webhooks and ChatOps for multiple git providers.\n* [jenkins-x/octant-jx](https://github.com/jenkins-x/octant-jx) the [octant](https://octant.dev/) plugin for Jenkins X to provide a complete RBAC based console for kubernetes, CI/CD and Jenkins X. For more information see the [documentation](https://jenkins-x.io/docs/reference/components/ui/)\n* [jenkins-x/jx-pipelines-visualizer](https://github.com/jenkins-x/jx-pipelines-visualizer) open source read only UI for visualising pipelines and logs see the [documentation](https://jenkins-x.io/docs/reference/components/ui/)\n\n",
            "content/en/v3/about/what.md": "---\ntitle: What is Jenkins X?\nlinktitle: What is Jenkins X?\ntype: docs\ndescription: Introduction to what Jenkins X is\nweight: 10\naliases:\n   - /v3/about/what/\n\n---\n\nJenkins X automates and accelerates Continuous Integration and Continuous Delivery for developers on the cloud, so they can focus on building awesome software.\n \nEmbracing popular open source projects Jenkins X automates the setup and management to provide an integrated Cloud Native solution teams can use to develop better software faster and more reliably than traditional non cloud solutions.\n \nOpen Source projects that Jenkins X integrates with:\n \n- [Kubernetes](https://kubernetes.io/) target platform Jenkins X is installed onto, optionally deploy and run applications built with Jenkins X\n- [Tekton](https://tekton.dev/) Cloud Native pipeline orchestration\n- [Kuberhealthy](https://github.com/kuberhealthy/kuberhealthy) Periodic health checks of the systems\n- [Grafana](https://grafana.com) __[optional]__ Centralised logs and Observability\n- [Jenkins](https://www.jenkins.io/) __[optional]__ traditional pipeline orchestration\n- [Nexus](https://www.sonatype.com/nexus/repository-oss) __[optional]__ artifact repository\n \nAt a high level Jenkins X can be split into a few areas:\n\n### Infrastructure\n\nJenkins X aims to use the cloud well, Kubernetes to host the core services, storage buckets for long term storage, container registries and hosted services like secrets managers. All of this needs to be created and managed.  Jenkins X defers to [Terraform](https://www.terraform.io/) to setup and manage the Cloud infrastructure needed by Jenkins X.\n \n### GitOps\n\nThe entire Jenkins X experience is based around Git.  The installation, extensions and applications you develop are managed via a cluster Git repository which is the desired state of your Kubernetes cluster.  A Kubernetes operator runs inside the cluster and polls for changes in the Git repository, applying verified and approved updates.  The cluster Git repository uses [Helmfile](https://github.com/roboll/helmfile/) to describe the helm charts that should be used to install software.  Jenkins X generates the Kubernetes resources defined in the Helmfiles, commits back to Git so the exact state can always be seen via Git.\n\nUsing GitOps means familiar processes can be followed when making any change to the cluster, using reviews, automation, traceability and rollbacks to give better control over consuming changes.\n\nJenkins X also uses GitOps as the way to [upgrade](/v3/admin/setup/upgrades), including new releases of images, helm charts and packages.\n\n### Secret Management\n \nUsing GitOps as above does present a challenge of where to store secrets for your cluster as keeping them in Git is insecure.  There is a way to [encrypt secrets and store them in Git](https://github.com/bitnami-labs/sealed-secrets) but there is a usability issue which makes the approach non trivial to use.  Jenkins X prefers to work with real secret provider solutions like [Vault](https://www.vaultproject.io/) or where possible cloud hosted solutions like [Google](https://cloud.google.com/secret-manager), Azure or Amazon Secrets managers.\n \nJenkins X GitOps works with [External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to provide an integrated experience so your secrets source of truth is a secrets manager and the values are replicated into the cluster when needed.\n \n### Pipelines\n \nBy default Jenkins X ships with Tekton for a clean declarative cloud native way to describe [pipelines](/v3/develop/pipelines/).  Combined with Lighthouse Jenkins X makes it easy to inherit versioned shared pipeline steps via Git and a simple syntax providing flexibility and easy maintenance.\n \nJenkins X can also work well with Jenkins for users that have traditional workloads.  This is not installed by default but with Jenkins X it is easy to install any helm chart and so designed to work great with our inspirational project Jenkins.\n \n### ChatOps\n \nWith the ever growing number of microservices needing automation, Jenkins X provides the ability to interact with pipelines via comments on pull requests.  [Lighthouse](https://github.com/jenkins-x/lighthouse) has evolved from [Prow](https://github.com/kubernetes/test-infra/tree/master/prow#) which is used heavily in the Kubernetes ecosystem to provide a consistent developer workflow for triggering tests, approvals, hold and other common commands developers use in their everyday activities.\n\n### Developer experience\n\nAlong with ChatOps mentioned above Jenkins X aims to help developers have a consistent way of working with their microservices, using a CLI or GUI developers can leverage proven approaches recomended by the [Accelerate book](https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339).\n\nWhether creating or importing new projects that automates the setup of CI and CD, packaging applications so they can deploy and run on Kubernetes or simply release as libraries for downstream applications to use.  Jenkins X helps teams have consistency in the way they are built, developed and improved.\n\nThe `jx` CLI helps developers interact with Jenkins X using their terminal.\n\n[For GUI's](/v3/develop/ui), Jenkins X has a plugin for [Octant](https://octant.dev/).  Octant runs outside of the cluster and uses the authentication and permissions users have to interact with Kubernetes resources.\n \nThere is also a read only in cluster pipeline dashboard that links via pull requests so users can view logs of builds.\n",
            "content/en/v3/admin/_index.md": "---\ntitle: Admin Guide\nlinktitle: Admin Guide\ntype: docs\ndescription: Installing, configuring and upgrading your Jenkins X installation\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 200\naliases:\n  - /v3/admin/platform/\n---\n\n{{< admincards >}}\n",
            "content/en/v3/admin/guides/_index.md": "---\ntitle: Guides\nlinktitle: Guides\ntype: docs\ndescription: Guides on configuring, upgrading and managing Jenkins X\nweight: 400\naliases:\n  - /v3/guides/\n---\n\nMake sure you have got the [jx 3.x binary](/v3/guides/jx3/) before proceeding.\n",
            "content/en/v3/admin/guides/cluster-recovery/_index.md": "---\ntitle: Cluster Recovery\nlinktitle: Cluster Recovery\ntype: docs\ndescription: Cluster Recovery\nweight: 94\n---\n \n",
            "content/en/v3/admin/guides/cluster-recovery/cluster-demo.md": "\n---\ntitle: Cluster Recovery Demo\nlinktitle: Cluster Recovery Demo\ntype: docs\ndescription: Cluster Recovery Demo\nweight: 94\n---\n \nThis section describes cluster recovery situations for when things go bad.  It can also be used to reguary recreate clusters, this is something the Jenkins X project does itself as we prefer to treat our clusters as cattle and not pets, giving confidence that we can restore services at any time.\n \nDisclaimer: there may well be better approaches so if you know of better ways please contribute and help improve the experience.  There are some manual steps below that we know to work but expect we can improve.\n\n# Demo\n              \nThe following demo walks you through cluster recovery\n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/2QgX3cn0GqU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nsee [other demos here](https://www.youtube.com/playlist?list=PLr_PmC4W69dKM3fo8OK729fdmX_MTqdHd)\n\n\n# Cluster applications and services\n \nJenkins X embraces GitOps, details of any application or configuration are stored declaratively in Git.  Jenkins X recommends using external storage if you require persistence to be preserved.  Cloud Storage buckets are great at achieving this.  With that said Jenkins X has one service that writes data to a persistent volume and is not backed up in cloud storage.  The current use of Chartmuseuam to store helm charts for applications means if we need to recreate a cluster we will need to retrigger release pipelines for any application running in the staging or production cluster.\n \nThe Jenkins X project itself does not use Chartmuseum, instead it uses Work Load Identity and [helm gcs plugin](https://github.com/hayorov/helm-gcs) to write directly to a GCP bucket.  You could consider using this approach but as well Jenkins X will look to resolve this by adding OOTB support for buckets or other external repositories for charts.\n \nFor now you will need to modify your cluster git repository and remove the helmfile repository that points to the internal chartmuseum service.\n \nFor example: https://github.com/cb-kubecd/jx3-demo-walk-cluster/blob/ce3fa07834e93e44b2d19882b82a7de51f627ba2/helmfiles/jx-staging/helmfile.yaml#L7-L15\n```\nfilepath: \"\"\nenvironments:\n default:\n   values:\n   - jx-values.yaml\nnamespace: jx-staging\nrepositories:\n- name: dev\n url: http://jenkins-x-chartmuseum.jx.svc.cluster.local:8080\nreleases:\n- chart: dev/jx3-golang1\n version: 0.0.4\n name: jx3-golang1\n values:\n - jx-values.yaml\ntemplates: {}\nrenderedvalues: {}\n```\n \nOnce you recover any infrastructure below you will then need to trigger release pipelines again using\n```\njx start pipeline\n```\n \n# Infrastructure\n \nCloud Infrastructure is managed by Terraform.  We recommend storing the Terraform state file in a [secure backend](https://www.terraform.io/docs/backends/index.html) or use a service like [Terraform Cloud](https://app.terraform.io/) as this means you can recover your Cloud Infrastructure in situations where it is deleted.\n \n## GCP specific\nFor Google Container Engine there is a manual task you need to perform because the Terraform module does not manage deleting Cloud DNS Manage Zones that contain record sets.  This is something we hope to address in the future but if you are using DNS you will need to manually delete your Managed Zone, the easiest way is via the GCP console. \n \nSelect your managed zone https://console.cloud.google.com/net-services/dns/zones\n![Select Zone](/images/v3/gcp_select_zone.png)\n \nSelect all record set checkbox and click the DELETE RECORD SETS button\n![Delete Record Sets](/images/v3/gcp_delete_recordsets.png)\n \nNow select the DELETE ZONE button at the top\n \n![Delete Zone](/images/v3/gcp_delete_zone.png)\n \n## Recover\nThe Jenkins X terraform modules write some details into a cluster once it is created, this can cause issues when applying the Terraform plan if that cluster is not available.\n \nYou will need to modify the state file so navigate to your local clone of your infrastructure git repository\n \nSet your bot username and personal access token `TF_VAR_`s\n```\nexport TF_VAR_jx_bot_username=\nexport TF_VAR_jx_bot_token=\n```\n \nIf you are using Terraform Cloud you can get you state file by adding this to your `main.tf`\n \n```\n# Enable to work with local and remote states\n# run terraform init after uncommenting below\nterraform {\n  backend \"remote\" {\n    hostname = \"app.terraform.io\"\n    organization = \"foo\"\n    workspaces {\n      name = \"bar\"\n    }\n  }\n}\n```\n \nIf you already have a local state file make a backup of it, e.g:\n```sh\ncp terraform.tfstate terraform.tfstate.backup\n```\n \nnow modify the state file:\n```sh\nterraform state rm module.jx\nterraform refresh\nterraform state pull > terraform.tfstate\nterraform plan\nterraform apply\n```\n \n## What is not recovered\n \nAny Custom Resources not stored in git will not be recovered, for example Jenkins X Pipeline Activities.  There are solutions like [Velero](https://velero.io/) that handles backups which could be used.\n",
            "content/en/v3/admin/guides/cluster-recovery/cluster-rebuild.md": "---\ntitle: Cluster Rebuild Example\nlinktitle: Cluster Rebuild Example\ntype: docs\ndescription: An example how to rebuild a existing environment back to its original state prior to shutdown.\nweight: 300\n---\n \nThis is an example on how to treat your clusters as cattle and not pets by rebuilding a JX3/GKE environment and restoring to it's previous configuration. The steps will include building a JX3 Google/GSM environment from scratch and deploying projects to staging and production. It will utilize DNS (`jx3rocks.com`), TLS, Let's Encrypt certificates. The example includes the recovery of the helm chart repository which is currently implemented with [ChartMuseum](https://github.com/helm/chartmuseum) . This example is inteded for an audience already familiar with Jenkins X operability and focuses on an example of actual commands used to build and maintain a recoverable  environment. Additional information regarding using Google as the provider for this example can be found under [Google Cloud Platform Prequisites](/v3/admin/guides/tls_dns/#prerequisites).\n\nIf you wish to bypass the initial building of the cluster and project deployment steps, go to [Prepare for outtage](/v3/admin/guides/cluster-rebuild/#prepare-for-outtage) for the cluster rebuilding steps.\n### Initialize the Infra and Cluster Repos\nUsing a command-line based approach, the example employs a process modeled after the doc [Setup Jenkins X on Google Cloud with GKE](/v3/admin/platforms/google), and will use Google Secret Manger. It requires installation of [Git](https://git-scm.com/downloads) and [Hub](https://hub.github.com/) command line tools. \n\nThe following are the values used for the creation of the Infra and Cluster repos:\n```\nRepo Source:\t\tjx3-gitops-repositories\nInfra Repo:\t\tjx3-terraform-gke\nCluster Repo:\t\tjx3-gke-gsm\nGit Organization:\t$JX3ORG\nJX3 Root Directory:\t$JX3HOME\n```\nBuilding infra repo: `https://github.com/${JX3ORG}/jx3-terraform-gke` \n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-terraform-gke.git jx3-terraform-gke\ncd  jx3-terraform-gke\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-terraform-gke.git\nhub create -p ${JX3ORG}/jx3-terraform-gke\ngit commit -a -m \"chore: Initial\"\ngit push -u origin master\n```\nBuidling cluster repo: `https://github.com/${JX3ORG}/jx3-gke-gsm`\n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-gke-gsm.git jx3-gke-gsm\ncd jx3-gke-gsm\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-gke-gsm.git\nhub create -p ${JX3ORG}/jx3-gke-gsm\ngit commit -a -m \"chore: Initial\"\ngit push -u origin master\n```\n### Manage URL format\nThis example uses external DNS with subdomain and URLs will have a root of `web.jx3rocks.com`. To avoid including the default string `\"-jx\"`  in the URLs, the example blanks out the `spec:ingress:namespaceSubDomain` value (`\".\"`) in the `jx-requirements.yml` file. To eliminate having non-unique URLs after doing this type of update, an additional `spec:environment:ingress:namespaceSubDomain` line item is added (`\"-stg.\"`) for the staging environment.\n\nFile:`${JX3HOME}/jx3-gke-gsm/jx-requirements.yml` \n```yaml\n  environments:\n  - key: dev\n  - key: staging\n    ingress:\n       namespaceSubDomain: -stg.\n  - key: production\n  ingress:\n    domain: \"\"\n    externalDNS: false\n    namespaceSubDomain: .\n```\n### Push initial changes to cluster repo\nAll the customizations for the cluster repo are now propagated.\n```bash\ncd ${JX3HOME}/jx3-gke-gsm\ngit add .\ngit commit -a -m \u201cchore: Jenkins example init\u201d\ngit push\t\n\n```\n### Build the infrastucture with Terraform\nThe following TF_VAR environment variables are set prior to running Terraform commands:\n```\nTF_VAR_gcp_project=<google project>\nTF_VAR_apex_domain_gcp_project=<google project>\nTF_VAR_jx_bot_username=<git username>\nTF_VAR_jx_bot_token=<git token>\nTF_VAR_tls_email=mymail@jx3rocks.com\n\nTF_VAR_apex_domain=jx3rocks.com\nTF_VAR_subdomain=web\n\nTF_VAR_gsm=true\nTF_VAR_cluster_name=jx3web\nTF_VAR_cluster_location=us-east1-b\nTF_VAR_jx_git_url=https://github.com/${JX3ORG}/jx3-gke-gsm.src.git\nTF_VAR_lets_encrypt_production=false\nTF_VAR_force_destroy=true\n```\nAdditional detail on Terraform settings can be found under [Google Terraform Quickstart Template](https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/master/README.md)\n\nCommands to build intrastructure: \n```bash\ncd ${JX3HOME}/jx3-gke-gsm\nbin/create.sh                # Performs terraform init, plan and apply\n```\n### Enable prod certificate\nThis example employs TLS and accesing Jenkins from a browser requires a valid production certificate. It should be noted that TLS is not supported with automated domains `(i.e. nip.io)`. The process will begin by installing a Let's Encrypt test certicate. After the initial build completes and is successful, it\u2019s best to ensure that the test certificate is ready (READY=True) before enabing the production certificate. You can find more information regarding this subject under [TLS and DNS](/v3/admin/guides/tls_dns/).\n```bash\n## Set credentials\ngcloud container clusters get-credentials jx3web --zone us-east1-b \n## Set jx namespace\njx ns jx\n## Check certificate\nkubectl get cert -n jx\nNAME                     READY   SECRET                   AGE\ntls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   39m\n```\nYou can also use [Octant](http://127.0.0.1:7777/#/overview/namespace/jx/custom-resources) to check certificate status.\n\nEnabling the production certificate will require updates to both infra `(jx-terraform-gke)` and cluster `(jx3-gke-gsm)` repos. The commands to create the prod certificate are:\n```bash\ncd ${JX3HOME}/jx3-gke-gsm\ngit pull         ## Make sure local cluster repo is up to date\ncd ${JX3HOME}/jx3-terraform-gke\nexport TF_VAR_lets_encrypt_production=true\nterraform apply -auto-approve \ncd ${JX3HOME}/jx3-gke-gsm\ngit commit --allow-empty -m \"Dummy commit\"\ngit push\njx admin log     ## Make sure it completes before proceeding\ngit pull         ## Once successful refresh local cluster repo\n```\nThe `${JX3HOME}/jx3-gke-gsm/jx-requirements.yml` file's TLS production setting should now be `true`.\n```yaml\n  ingress:\n    domain: web.jx3rocks.com\n    externalDNS: true\n    kind: ingress\n    namespaceSubDomain: .\n    tls:\n      email: mymail@jx3rocks.com\n      enabled: true\n      production: true\n```\nOnce again, the example checks the certificates status till the production certifacte is ready before proceeding.\n```bash\nkubectl get cert -n jx\nNAME                     READY   SECRET                   AGE\ntls-web-jx3rocks-com-p   True    tls-web-jx3rocks-com-p   39m\ntls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   86m\n```\nYou can also use [Octant](http://127.0.0.1:7777/#/overview/namespace/jx/custom-resources) to check the production certificate.\n![Octant Display](/images/v3/octant_display.png)\n### Deploy project to Stage and Production\nAfter production certificates become ready, the following commands will deploy a simple JSnode app to staging and production\n```bash\n# Using quickstart deploy app to staging\njx project quickstart --git-token ${TF_VAR_jx_bot_token} --git-username ${TF_VAR_jx_bot_user} --filter node-http --org ${JX3ORG} --batch-mode  --name node-http01\n\n# For documentation simplicity, use the following command to promote to production\njx promote -v 0.0.1 -e production --app node-http01 --app-git-url https://github.com/${JX3ORG}/node-http01.git \n\n# Confirm deployments\njx get applications\nAPPLICATION STAGING PODS URL                                     PRODUCTION PODS URL\nnode-http01 0.0.1   1/1  http://node-http01-stg.two.${JX3ORG}.com 0.0.1     1/1  https://node-http01.two.${JX3ORG}.com\n```\n### Prepare for Outtage\nTo prepare for shutting down your cluster, a backup of the helm repo is essential. The helm repo is located in the chartmuseum pod's local storage and the following will copy the helm chart files to a separate backup location (i.e. $HOME/storage).\n```bash\nmkdir -p $HOME/storage\ncd ${HOME}/storage\nkubectl cp jx/`kubectl get pods -n jx --selector=app=chartmuseum -o jsonpath=\"{.items[0].metadata.name}\"`:/storage .\n```\n### Helm Repo Backup\nYou should now see a copy of the chart and index file in the backup location. You can ignore the 'lost+found' directory.\n```bash\ncd ${HOME}/storage\nls\nindex-cache.yaml  lost+found             node-http01-0.0.1.tgz  \n```\n### Destroy Infrastructure\nCommands to shutdown infrastructure. Make sure the same Terraform variables are set found under [Building the infrastructure with Terraform](/v3/admin/guides/cluster-rebuild/#build-the-infrastucture-with-terraform) \n```bash\ncd ${JX3HOME}/jx3-terraform-gke\nterraform destroy -auto-approve\n```\n### Cluster Down\nUpon completion of the commands above, the Kubernetes resources will be completely freed up. You want to ensure your infra (jx3-terraform-gke), cluster (jx3-gke-gsm), and project repos, as well as your Terraform variables and helm repo backup, remain unchanged and available for when ready to rebuild..\n### Prepare Cluster Repo for Rebuild\nPrior to bringing the infrastructure (jx3-terraform-gke) back online, prepare the cluster repo (jx3-gke-gsm) by removing the reference of the `jx-staging` and `jx-production` environments and the long term storage.\n```bash\ncd ${JX3HOME}/jx3-gke-gsm\ngit pull     ## Make sure you get any updates from repo\n# Remove long term storage refrences\nsed -i '/storage:/,/vault:/{/storage:/!{/vault:/!d}}' jx-requirements.yml \nsed -i '/storage:/d' jx-requirements.yml\n# Remove staging and prod links\nsed -i '/jx-staging/d' helmfile.yaml\nsed -i '/jx-production/d' helmfile.yaml\njx gitops helmfile resolve\ngit commit -a -m \"chore: Remove staging and prod links\"\ngit push\n```\n### Rebuild Infrastructure\nCommands to rebuild  infrastructure. Once again, make sure you have the same Terraform variables set found under [Building the infrastructure with Terraform](/v3/admin/guides/cluster-rebuild/#build-the-infrastucture-with-terraform) \n```bash\ncd ${JX3HOME}/jx3-terraform-gke\nterraform apply -auto-approve\n```\n### Rebuild Helm Repo\nAfter Terraform creates the infrastruce, the cluster repo resources will be used to launch a new Kubernetes cluster. Once the boot process completes and is sucessful you can safely perform the following recovery commands:\n```bash\n# Restore backup files to new helm repo\n# Make sure chartmuseum pod is running\nkubectl get pods -n jx --selector=app=chartmuseum \n# When chartmuseum pod is running it is then safe to proceed to the next steps.\ncd $HOME/storage\nfor i in *; do kubectl cp $i jx/`kubectl get pods -n jx --selector=app=chartmuseum -o jsonpath=\"{.items[0].metadata.name}\"`:/storage/$i; done\n```\nNOTE: You must wait until the chartmuseum is up and fully functioning. The chartmuseum pod can be running, but the best approach to determine if you can proceed is to access (successfully) the chartmuseum URL (i.e. https://chartmuseum.web.jx3rocks.com).\n### Rebuild Cluster Repo\nRestore the jx-staging and jx-production links\n```bash\ncd ${JX3HOME}/jx3-gke-gsm\ngit pull\t## Make sure to get latest updates to repo\nsed -i '/helmfiles:/ a - path: helmfiles/jx-production/helmfile.yaml' helmfile.yaml\nsed -i '/helmfiles:/ a - path: helmfiles/jx-staging/helmfile.yaml' helmfile.yaml\ngit commit -a -m \"chore: Restore staging and prod links\"\ngit push\n```\n### Post Recovery Troubleshooting\nSometimes you will need to do some post recovery steps to bring your environment online. Below is a real life example of steps taken after cluster returned back online and needed some adjustments.\n\nReviewing the applications notice that 'node-http04' in staging does not show pods and is not accessible.\n```bash\njx get applications\nAPPLICATION STAGING PODS URL                                     PRODUCTION PODS URL\nnode-http02 0.1.0   1/1  http://node-http02-stg.tri.jx3rocks.com 0.1.0      1/1  https://node-http02.tri.jx3rocks.com\nnode-http03 0.0.1   1/1  http://node-http03-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http03.tri.jx3rocks.com\nnode-http04 0.0.1        http://node-http04-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http04.tri.jx3rocks.com\nnode-http05 0.0.1   1/1  http://node-http05-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http05.tri.jx3rocks.com\n```\nCheck to see if the host entry resolves\n```bash\nping http://node-http04-stg.tri.jx3rocks.com\nping: http://node-http04-stg.tri.jx3rocks.com: Name or service not known\n```\nCheck to see if DNS record set exists\n```bash\ngcloud dns record-sets list --zone=${ZONEIDSUB} --project ${PROJECTID} --filter=\"TYPE=A OR TYPE=TXT\" --format 'table[no-heading](NAME,TYPE,TTL,DATA)' | awk '{print \" --name=\" $1 \" --type=\" $2 \" --ttl=\" $3 \" \" $4 }' | grep -- node-http04-stg\n --name=node-http04-stg.tri.jx3rocks.com. --type=A --ttl=300 35.231.47.50\n --name=node-http04-stg.tri.jx3rocks.com. --type=TXT --ttl=300 \"heritage=external-dns,external-dns/owner=default,external-dns/resource=ingress/jx-staging/node-http04\"\n```\nCheck pod status\n```bash\nkubectl get pods -n jx-staging\nNAME                                       READY   STATUS             RESTARTS   AGE\njx-verify-gc-jobs-8gb9h                    0/1     Completed          0          32m\nnode-http02-node-http02-749d864b58-m5mvk   1/1     Running            0          32m\nnode-http03-node-http03-59f5f89f4-mq86h    1/1     Running            0          32m\nnode-http04-node-http04-56f5f757c4-75rhb   0/1     ImagePullBackOff   0          32m\nnode-http04-node-http04-b74787f78-jcd2c    0/1     ImagePullBackOff   0          32m\nnode-http05-node-http05-5d6ccf954-g9lrj    1/1     Running            0          32m\nnode-http05-node-http05-7bc47d4f74-6rs9f   0/1     ImagePullBackOff   0          32m\n\nkubectl logs -f node-http04-node-http04-56f5f757c4-75rhb -n jx-staging\nError from server (BadRequest): container \"node-http04\" in pod \"node-http04-node-http04-56f5f757c4-75rhb\" is waiting to start: trying and failing to pull image\n```\nTry restarting the 3 pods with the ImagePullBackOff (not running) status.\n```bash\ndelete pods --field-selector=status.phase!=Running -n jx-staging\n```\nFinal check running applications \n```bash\njx get applications\nAPPLICATION STAGING PODS URL                                     PRODUCTION PODS URL\nnode-http02 0.1.0   1/1  http://node-http02-stg.tri.jx3rocks.com 0.1.0      1/1  https://node-http02.tri.jx3rocks.com\nnode-http03 0.0.1   1/1  http://node-http03-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http03.tri.jx3rocks.com\nnode-http04 0.0.1   1/1  http://node-http04-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http04.tri.jx3rocks.com\nnode-http05 0.0.1   1/1  http://node-http05-stg.tri.jx3rocks.com 0.0.1      1/1  https://node-http05.tri.jx3rocks.com\n```\n### Cluster Rebuilt\nFollowing the completion of the previous commands the cluster has now been returned to it's previous state and should be fully functioning.  If you wish to repeat the rebuild process start from the [Prepare for outtage](/v3/admin/guides/cluster-rebuild/#prepare-for-outtage) step.\n",
            "content/en/v3/admin/guides/jenkins/_index.md": "---\ntitle: Jenkins\nlinktitle: Jenkins\ntype: docs\ndescription: Improved Jenkins and Jenkins X interoperability\nweight: 200\naliases:\n  - /v3/guides/jenkins\n---\n\n\n[Jenkins X version 3 ](/v3/guides/jx3/) includes support for the interoperability of [Jenkins](https://jenkins.io), [Jenkins X](/v3/about/) and [Tekton](https://github.com/tektoncd/pipeline)\n\n",
            "content/en/v3/admin/guides/jenkins/example.md": "---\ntitle: Jenkins Server Example\nlinktitle: Jenkins Server Example\ntype: docs\ndescription: An example how to build Jenkins server with additional plugins and installers.\nweight: 200\naliases:\n  - /v3/guides/infra/jenkins/example\n---\n\nThis is an example on building a JX3 Google/GSM environment from scratch which includes a Jenkins server and the import of a pipeline. It will utilize DNS (`jx3rocks.com`), TLS, Let's Encrypt certificates,  and additional Jenkins plugins and installer resources. It is inteded for an audience already familiar with Jenkins X operability and focuses on an example of actual commands required to build and operate the  environment. Additional information regarding using Google as the provider for this example can be found under [Google Cloud Platform Prequisites](/v3/admin/guides/tls_dns/#prerequisites).\n> \ud83d\udca1 This doc has been designed to build the Jenkins server under the Google cloud platform. [The Jenkins server configuration steps](/v3/admin/guides/jenkins/example/#initialize-jenkins-server-configuration) have also been tested under <b>Azure</b> and <b>Amazon</b> cloud environments.\n>\n\n### Initialize the Infra and Cluster Repos\nUsing a command-line based approach, the example employs a process modeled after the doc [Setup Jenkins X on Google Cloud with GKE](/v3/admin/platforms/google), and will use Google Secret Manger. It requires installation of [Git](https://git-scm.com/downloads) and [Hub](https://hub.github.com/) command line tools. \n\nThe following are the values used for the creation of the Infra and Cluster repos:\n```\nRepo Source:\t\tjx3-gitops-repositories\nInfra Repo:\t\tjx3-terraform-gke\nCluster Repo:\t\tjx3-gke-gsm\nGit Organization:\tjx3rocksorg\nJX3 Root Directory:\t$JX3HOME                ## i.e. /home/user\n```\nBuilding infra repo: `https://github.com/jx3rocksorg/jx3-terraform-gke` \n```bash\ncd $JX3HOME\ngit clone https://github.com/jx3-gitops-repositories/jx3-terraform-gke.git jx3-terraform-gke\ncd  jx3-terraform-gke\ngit remote set-url origin https://github.com/jx3rocksorg/jx3-terraform-gke.git\nhub create -p jx3rocksorg/jx3-terraform-gke\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\nBuidling cluster repo: `https://github.com/jx3rocksorg/jx3-gke-gsm`\n```bash\ncd $JX3HOME\ngit clone https://github.com/jx3-gitops-repositories/jx3-gke-gsm.git jx3-gke-gsm\ncd jx3-gke-gsm\ngit remote set-url origin https://github.com/jx3rocksorg/jx3-gke-gsm.git\nhub create -p jx3rocksorg/jx3-gke-gsm\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\n### Manage URL format\nThis example uses external DNS with subdomain and URLs will have a root of `web.jx3rocks.com`. To avoid including the default string `\"-jx\"`  in the URLs, the example blanks out the `spec:ingress:namespaceSubDomain` value (`\".\"`) in the `jx-requirements.yml` file. To eliminate having non-unique URLs after doing this type of update, an additional `spec:environment:ingress:namespaceSubDomain` line item is added (`\"-stg.\"`) for the staging environment.\n\nFile:`$JX3HOME/jx3-gke-gsm/jx-requirements.yml` \n```yaml\n  environments:\n  - key: dev\n  - key: staging\n    ingress:\n       namespaceSubDomain: -stg.\n  - key: production\n  ingress:\n    domain: \"\"\n    externalDNS: false\n    namespaceSubDomain: .\n```\n### Define Jenkins plugins and installers.\nThe default Jenkins server installation is a minimum configuration and generally requires additional installers and plugin components for the your specific Jenkins project to operate. The Jenkins components (i.e. plugins, installerss, etc.) are defined in 3 locations; Chart, System, and User configurations which get loaded in that order. During the build process settings get inherited and can be modified but depending on the end config how to make modifications may vary. This example takes into account the default configuration based upon the Chart and System settings. It will only require small additions to the configuration which is done at the User level. To make these config changes will require the modification of the User  `values.yaml` file. \n> \ud83d\udca1 Currently there is an issue where the Jenkins URL does not resolve to an IP address. To address this issue, it is imperative to have the `ingressClassName: nginx` included in the values.yaml file.\n>\n  \nFile: `/tmp/values.yaml` - Config Scripts\n```\ncontroller:\n  ingress:             ## Required versionStream DNS/Ingress break fix\n    ingressClassName: nginx\n  JCasC:               ## Example of building an installer\n    configScripts:\n      mystuff: |\n        tool:\n          nodejs:\n            installations:\n            - name: \"NodeJS\"\n              properties:\n              - installSource:\n                  installers:\n                  - nodeJSInstaller:\n                      id: \"15.7.0\"\n                      npmPackagesRefreshHours: 72\n  additionalPlugins:   ## Additional plugins for example\n    - pipeline-stage-view:2.24\n    - nodejs:1.5.1\n\n```\n### Initialize Jenkins server configuration\n`jx gitops` commands are used to create the Jenkins server configuration. More information can be found under [Adding Jenkins Server into Jenkins X](/v3/admin/guides/jenkins/getting-started/#adding-jenkins-servers-into-jenkins-x). The example uses the following command sequence:\n```bash\ncd $JX3HOME/jx3-gke-gsm                             ## cluster repo root\njx gitops jenkins add --name jx-jenkins             ## add Jenkins\njx gitops helmfile resolve --namespace jx-jenkins   ## resolve charts references (optional but helps later on in editing)\ncp /tmp/values.yaml helmfiles/jx-jenkins            ## Update tool config\n```\n\n### Push initial changes to cluster repo\nAll the customizations for the cluster repo are now propagated.\n```bash\ncd $JX3HOME/jx3-gke-gsm\ngit add .\ngit commit -a -m \u201cchore: Jenkins example init\u201d\ngit push\t\n\n```\n### Build the infrastucture with Terraform\nThe following TF_VAR environment variables are set prior to running Terraform commands:\n```\nTF_VAR_gcp_project=<google project>\nTF_VAR_apex_domain_gcp_project=<google project>\nTF_VAR_jx_bot_username=<git username>\nTF_VAR_jx_bot_token=<git token>\nTF_VAR_tls_email=mymail@jx3rocks.com\n\nTF_VAR_apex_domain=jx3rocks.com\nTF_VAR_subdomain=web\n\nTF_VAR_gsm=true\nTF_VAR_cluster_name=jx3web\nTF_VAR_cluster_location=us-east1-b\nTF_VAR_jx_git_url=https://github.com/jx3rocksorg/jx3-gke-gsm.src.git\nTF_VAR_lets_encrypt_production=false\nTF_VAR_force_destroy=true\n```\nAdditional detail on Terraform settings can be found under [Google Terraform Quickstart Template](https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/main/README.md)\n\nCommands to build intrastructure: \n```bash\ncd $JX3HOME/jx3-terraform-gke\nbin/create.sh                # Performs terraform init, plan and apply\n```\n### Enable prod certificate\nThis example employs TLS and accesing Jenkins from a browser requires a valid production certificate. It should be noted that TLS is not supported with automated domains `(i.e. nip.io)`. The process will begin by installing a Let's Encrypt test certicate. After the initial build completes and is successful, it\u2019s best to ensure that the test certificate is ready (READY=True) before enabing the production certificate. You can find more information regarding this subject under [TLS and DNS](/v3/admin/guides/tls_dns/).\n```bash\n## Set credentials\ngcloud container clusters get-credentials jx3web --zone us-east1-b \n## Set jx namespace\njx ns jx\n## Check certificate\nkubectl get cert -n jx\nNAME                     READY   SECRET                   AGE\ntls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   39m\n```\nYou can also use [Octant](http://127.0.0.1:7777/#/overview/namespace/jx/custom-resources) to check certificate status.\n\nEnabling the production certificate will require updates to both infra `(jx-terraform-gke)` and cluster `(jx3-gke-gsm)` repos. The commands to create the prod certificate are:\n```bash\ncd $JX3HOME/jx3-gke-gsm\ngit pull         ## Make sure local cluster repo is up to date\ncd $JX3HOME/jx3-terraform-gke\nexport TF_VAR_lets_encrypt_production=true\nterraform apply -auto-approve \ncd $JX3HOME/jx3-gke-gsm\ngit commit --allow-empty -m \"Dummy commit\"\ngit push\njx admin log     ## Make sure it completes before proceeding\ngit pull         ## Once successful refresh local cluster repo\n```\nThe `$JX3HOME/jx3-gke-gsm/jx-requirements.yml` file's TLS production setting should now be `true`.\n```yaml\n  ingress:\n    domain: web.jx3rocks.com\n    externalDNS: true\n    kind: ingress\n    namespaceSubDomain: .\n    tls:\n      email: mymail@jx3rocks.com\n      enabled: true\n      production: true\n```\nOnce again, the example checks the certificates status till the production certifacte is ready before proceeding.\n```bash\nkubectl get cert -n jx\nNAME                     READY   SECRET                   AGE\ntls-web-jx3rocks-com-p   True    tls-web-jx3rocks-com-p   39m\ntls-web-jx3rocks-com-s   True    tls-web-jx3rocks-com-s   86m\n```\nYou can also use [Octant](http://127.0.0.1:7777/#/overview/namespace/jx/custom-resources) to check the production certificate.\n![Octant Display](/images/v3/octant_display.png)\n### Sign on to Jenkins\nAfter production certificates become ready, access to the Jenkins site: https://jenkins.web.jx3rocks.com is now available. The site has been configure with an `admin` user id and to obtain the `admin` user password the following commands are used:\n```bash\nkubectl get secret -n jx-jenkins jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode; echo\n```\n### Deploy Jenkins Pipeline\nTo deploy a Jenkins Pipeline requires a `Jenkinsfile` file and can be created through either a `jx project import` or `jx project quickstart` command. You can find more detail in [Importing project or creating quickstarts](/v3/admin/guides/jenkins/getting-started/#importing-projects-or-creating-quickstarts). This example creates a file `Jenkinsfile` in a new project directory (`jx-example-node`) and executes the `jx project import` command.\n\nFile: `~/jx-example-node/Jenkinsfile`\n```\npipeline {\n    agent none\nstages {\n        stage ('First') {\n            agent any\n            steps {\n                echo \"First dummy stage\"\n            }\n        }\n        stage ('Input') {\n\n            steps {\n                script {\n                    myStage = input message: 'What service type do you want to run now?', parameters: [choice(choices: 'Create\\nUpdate', description: '', name: 'Stage')]\n                }\n                echo myStage\n            }\n        }\nstage('Stage1') {\n            when {\n                expression { myStage == 'Create' }\n            }\n            steps {\n                echo \"Running Service: Create\"\n            }\n        }\nstage('Stage2') {\n            when {\n                expression { myStage == 'Update' }\n            }\n            steps {\n                echo \"Running Service:Update\"\n            }\n        }\n}\n```\nImport the project to deploy the pipeline\n```bash\njx project import --git-token <token>  \\\n                  --git-username <git user> \\\n                  --org jx3rocksorg \\\n                  --jenkins jx-jenkins \\\n                  --dir ~/jx-example-node \\\n                  --name jx-example-node \\\n                  --batch-mode\n```\n### Restarting Jenkins pod after pipeline deployment. \nWhen the above pipeline is deployed it may be necessary to restart the Jenkins pod berfore you see it appear in the Jenkins dashboard.\n```\nkubectl delete pod jenkins-0 -n jx-jenkins            ## Restarts Jenkins pods\n```\n\n### Adding Github Webhook (optional)\nThe current default configuration of JX3 for the import of Jenkins projects does not include the creation of a GitHub webhook for automated pipeline execution. You can use an GitHub API call to set up a webhook to provide a mechanism to kick off a pipeline when there's an update to the project's repo. Below is an example of the API call for this Jenkins configuration and import project example.\n```\ncurl -X POST \\\n  https://api.github.com/repos/jx3rocksorg/jx-example-node/hooks \\\n  -H 'authorization: token <API_TOKEN>' \\\n  -H 'cache-control: no-cache' \\\n  -d '{ \n  \"config\": { \n    \"url\": \"https://jenkins.web.jx3rocks.com/github-webhook/\"\n  }, \n  \"events\": [ \n    \"issues\", \n    \"issue_comment\", \n    \"pull_request\", \n    \"pull_request_review\", \n    \"pull_request_review_comment\", \n    \"commit_comment\", \n    \"push\", \n    \"release\", \n    \"create\", \n    \"delete\" \n  ] \n}'\n``` \nFollowing this setup subsequent changes to the Jenkins project repo's `main`, `master`, and `PR-*` branches should now automatically kick off a pipeline. \n\nYou could also set up a GitHub webhook for the Jenkins project using the GitHub UI. More details can be found at https://docs.github.com/en/developers/webhooks-and-events/creating-webhooks. \n### Removing the Jenkins server and repo\nThe Jenkins server definition and repos can be found in the<b>`$JX3HOME/.jx/gitops/source-config.yaml`</b>file. This example's file is the following:\n```\napiVersion: gitops.jenkins-x.io/v1alpha1\nkind: SourceConfig\nmetadata:\n  creationTimestamp: null\nspec:\n  jenkinsServers:\n  - groups:\n    - owner: jx3rocksorg\n      provider: https://github.com\n      providerKind: github\n      repositories:\n      - name: jx-example-node\n    server: jx-jenkins\n  slack:\n    channel: '#jenkins-x-pipelines'\n    kind: failureOrNextSuccess\n    pipeline: release\n```\nCommands to remove Jenkins resources and repo:\n```bash\nrm $JX3HOME/jx3-gke-gsm/.jx/gitops/source-config.yaml\nrm -rf $JX3HOME/jx3-gke-gsm/helmfiles/jx-jenkins\nsed -i '/jx-jenkins/d' $JX3HOME/jx3-gke-gsm/helmfile.yaml\nhub delete -y jx3rocksorg/jx-example-node\ngit commit -a -m \"chore: remove jenkins\"\ngit push\n```\n### Troubleshooting\nSometimes Jenkins requires attention due to invalid plugin versions and/or syntax. The following commands are helpful in debugging:\n```bash\nkubectl logs -f jenkins-0 -n jx-jenkins -c init       ## View init container\nkubectl logs -f jenkins-0 -n jx-jenkins -c jenkins    ## View jenkins container\nkubectl delete pod jenkins-0 -n jx-jenkins            ## Restarts Jenkins pods\n```\n",
            "content/en/v3/admin/guides/jenkins/getting-started.md": "---\ntitle: Getting Started \nlinktitle: Getting Started\ntype: docs\ndescription: Getting started with Jenkins and Jenkins X interop\nweight: 20\naliases:\n  - /v3/guides/jenkins/getting-started\n---\n\n\nMake sure you have got the [jx 3.x binary](/v3/guides/jx3/) and you have installed [version 3](/v3/admin/platform/) before proceeding.\n\n\n## Adding Jenkins Servers into Jenkins X\n\nYou can use Jenkins X to install one or more Jenkins servers by running the following command in a git clone of your dev cluster git repository:\n\n```bash \njx gitops jenkins add --name myjenkins\n```\n\nThat will add a new `helmfile/myjenkins/helmfile.yaml` file for the jenkins charts along with `helmfile/myjenkins/values.yaml` file that can be used to configure the [jenkins helm chart configuration values](https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/VALUES_SUMMARY.md).\n\nNow git commit that file:\n\n```bash \ngit commit -a -m \"fix: added new jenkins service\"\n```\n\n### Importing projects or creating quickstarts\n\nIf you want to import repositories into your jenkins server or create quickstarts using `Jenkinsfile` files then follow the usual [user guide approach of creating projects](/v3/develop/create-project/).\n\nYour new jenkins server will be added to the `.jx/gitops/source-config.yaml` file and so will be available to developers as a Jenkins server that can be used when importing projects.\n\n### Configure Jenkins \n\nTo configure your Jenkins server edit the `helmfile/myjenkins/values.yaml` according to the [configuration guide](https://github.com/jenkinsci/helm-charts/blob/main/charts/jenkins/VALUES_SUMMARY.md).\n\nEach Jenkins server has its own namespace so that its possible to use fine grained role based access for each server using Kubernetes RBAC.\n\nIn addition by default each Jenkins server gets to share the pipeline git user name and token so that it can access private git repositories in the same way as tekton pipelines.\n\n\n### Job DSL\n\nWhen you import projects or create quickstarts with the above approach, your projects get added to the jenkins server you choose in  `.jx/gitops/source-config.yaml`. \n\nThen during the [boot job](/v3/about/how-it-works/#boot-job) Jenkins X will create a [Jenkins Job DSL script](https://plugins.jenkins.io/job-dsl/) for each project in your `.jx/gitops/source-config.yaml` file for each Jenkins server.\n\nThe Job DSL scripts are generated in the file `helmfiles/myjenkins/job-values.yaml` which is then passed into the [Jenkins helm chart](https://github.com/jenkinsci/helm-charts) via the `values:` item in the `helmfiles/myjenkins/helmfile.yaml`\n\nBy default the boot job uses [these templates for the Job DSL](https://github.com/jenkins-x/jx3-versions/tree/master/jenkins/templates) for folders (e.g. organisations) and for repositories.\n\nYou can configure which templates you wish to use in the `.jx/gitops/source-config.yaml` file; either globally or on a per organsation or repository basis. Please refer to the [SourceConfig](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig) reference guide. In particularly see how you can specify `jenkinsFolderTemplate` or `jenkinsJobTemplate` values at the global, organisation or repository level inside the [jenkinsServer](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.JenkinsServer) entry.\n\n\n### Accessing the Jenkins server \n\nYou can switch to the jenkins namespace via the following and see the host name to open the console:\n\n```bash \njx ns myjenkins\n\nkubectl get ing\n```\n\nJenkins X will have generated a username of **admin** and a random password which is stored in your secret store (either Vault or your cloud secret manager).\n\nTo find the admin password so that you can login to Jenkins try:\n\n```bash \nkubectl get secret jenkins -o jsonpath=\"{.data.jenkins-admin-password}\" | base64 --decode\n```\n\nYou can find the URL to open Jenkins via: \n\n```bash \necho http://`kubectl get ingress jenkins -o jsonpath=\"{.spec.rules[0].host}\"`\n```\n           \n",
            "content/en/v3/admin/guides/jenkins/gitops.md": "---\ntitle: GitOps Recommendations\nlinktitle: GitOps\ntype: docs\ndescription: Recommendations on using GitOps to for your Jenkins servers\nweight: 100\n---\n\nOne of the awesome things about Jenkins is you can use it to do anything in any way you like. e.g. you can add/configure any Jenkins server via the UI which then modifies the state on disk. This can make things harder to manage at scale; tracking who changes what and to diagnose issues and perform backup and restore etc.\n\nWe have been using the GitOps approach to managing things in production for the last few years on the Jenkins X project and it has lots of benefits:\n\n* every change is audited so you can see exactly what was changed and by who in git\n* you can easily revert changes if they go bad\n* all state being in git means its super easy to recreate your infrastructure in another region or using different machine types without complex backup/restore processes being in place\n\nSo we recommend trying to follow the GitOps approaches for your Jenkins servers too. e.g.\n\n* try store in git all of the Jenkins servers with their [configuration](/v3/admin/guides/jenkins/getting-started/#configure-jenkins)\n* try use the [Job DSL in git](/v3/admin/guides/jenkins/getting-started/#job-dsl) to import projects into your jenkins servers then its very easy to move projects to different servers via a simple Pull Request on the `.jx/gitops/source-config.yaml` file \n* try use [Jenkins Configuration As Code](https://www.jenkins.io/projects/jcasc/) as much as you can as its simpler and easier to work with via GitOps\n* try use use [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) to manage all of your secrets in a secret store like vault or your cloud providers secret manager via [Jenkins X secret support](/v3/admin/setup/secrets/)\n  * you can then consume the secrets managed via [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) using the [kubernetes credentials provider plugin](https://plugins.jenkins.io/kubernetes-credentials-provider/)\n  * we use this mechanism to reuse the Jenkins X pipeline bot user and token we use for [tekton](https://github.com/tektoncd/pipeline) in each Jenkins server via properly labelled Secrets created via  [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets). e.g. [here's how we share the git token](https://github.com/jenkins-x-charts/jenkins-resources/blob/main/charts/jenkins-resources/templates/tekton-git-secret.yaml#L15-L18) by using a kubernetes Secret with the labels for the [kubernetes credentials provider plugin](https://plugins.jenkins.io/kubernetes-credentials-provider/) which is automatically populated from the vault / cloud provider secret store",
            "content/en/v3/admin/guides/k8s-upgrades/_index.md": "---\ntitle: Kubernetes upgrades\nlinktitle: Kubernetes upgrade\ntype: docs\ndescription: How to upgrade the version of Kubernetes in your cluster.\nweight: 92\n---\n\nUpgrading your Kubernetes cluster is one of the tasks you must take on as an operator of Jenkins X. Kubernetes comes out with [new releases](https://kubernetes.io/releases/) regularly, and will only maintain releases for the three latest versions. Meaning if something breaks, or there is a security issue on an older version, Kubernetes will not fix it, but ask you to upgrade. All the major cloud providers only support a given set of latest versions.\n\n{{< k8s-versions >}}\n\n## Upgrade procedure\n\n- It is highly recommended to test upgrades on a separate cluster, where you have all the same setup as you use in production.\n- Run [Pluto](https://github.com/FairwindsOps/pluto) to find any deprecated CRDs present in your cluster. You can run Pluto both on the cluster using `pluto detect-helm`, and on the files on your cluster repo using `pluto detect-files`\n- Cross-check the list of deprecations you find, with the list from [Kubernetes](https://kubernetes.io/docs/reference/using-api/deprecation-guide/) and see what is required for the Kubernetes version you want to upgrade to.\n- Fix what needs to be fixed, and deploy the changes.\n- You may now start the upgrade of Kubernetes.\n  - The process has two steps, first, you need to upgrade the control plane, and next upgrade the nodes.\n    Follow the upgrade steps according to your cloud provider. - [Amazon](https://docs.aws.amazon.com/eks/latest/userguide/update-cluster.html) - [Azure](https://docs.microsoft.com/en-us/azure/aks/upgrade-cluster?tabs=azure-cli) - [Google](https://cloud.google.com/kubernetes-engine/docs/how-to/upgrading-a-cluster)\n- Pour yourself a cup of your favorite drink while you sit back and wait for the magic to happen.\n",
            "content/en/v3/admin/guides/lighthouse-webui/_index.md": "---\ntitle: Lighthouse WebUI\nlinktitle: Lighthouse WebUI\ntype: docs\ndescription: How to install the Lighthouse WebUI in Jenkins X 3\nweight: 120\naliases:\n  - /v3/guides/lighthouse-webui\n---\n\nThis guide will help you install and configure the [lighthouse-webui-plugin](https://github.com/jenkins-x-plugins/lighthouse-webui-plugin) in your Jenkins X cluster. You can see the [Lighthouse Web UI documentation](/v3/develop/ui/lighthouse/) for more details on why you might need to install this optional component.\n\n## Installation\n\nPlease follow the usual [getting started guide for boot and helm 3](/v3/admin/platform/) first.\n\nThen, open the `helmfiles/jx/helmfile.yaml` file located in your development environment git repository, and add the following content under the `releases` section:\n\n```yaml \n- chart: jxgh/lighthouse-webui-plugin\n  name: lighthouse-webui-plugin\n```\n\nYou should have something like:\n\n```yaml\nnamespace: jx\nrepositories:\n- ...\nreleases:\n- chart: jxgh/lighthouse-webui-plugin\n  name: lighthouse-webui-plugin\n- chart: ...\n```\n\nDon't worry if your new chart doesn't have a `version` field, or a list of `values` files: these fields will be automatically added later.\n\nCommit and push these changes, and after a few minutes you should see a new `lighthouse-webui-plugin` pod running in the `jx` namespace:\n\n```bash \n$ kubectl get pod -n jx\nNAME                                           READY   STATUS    RESTARTS   AGE\nlighthouse-webui-plugin-696b8c85f9-99hnn       1/1     Running   0          31m\n```\n\n## Usage\n\nSee the [Lighthouse Web UI documentation](/v3/develop/ui/lighthouse/) for how to access it and use it.\n\n## Configuration\n\nThe configuration is defined in a [\"values file\" stored in the Jenkins X Version Stream](https://github.com/jenkins-x/jx3-versions/blob/master/charts/jxgh/lighthouse-webui-plugin/values.yaml.gotmpl).\n\nIf you want to change anything from the default configuration, you can either:\n- submit a Pull Request if you believe this change is beneficial for everybody\n- or create a new values file in your development environment git repositor: `values/lighthouse-webui-plugin/values.yaml`\n\nIf you want to change the default basic auth to OAuth for example, you can read the [OAuth guide](/v3/admin/setup/ingress/oauth/).\n",
            "content/en/v3/admin/guides/migrate/_index.md": "---\ntitle: Migrate\nlinktitle: Migrate\ntype: docs\ndescription: Migrate to v3 from older Jenkins X installations\nweight: 95\naliases:\n  - /v3/guides/migrate\n---\n\n",
            "content/en/v3/admin/guides/migrate/v2.md": "---\ntitle: From 2.x\nlinktitle: From 2.x\ntype: docs\ndescription: Migrate to the 3.0 Beta from older Jenkins X installations\nweight: 100\n---\n\nIf you wish to migrate from older versions of Jenkins X to v3 we recommend [spinning up a new cluster for v3](/v3/admin/platform/) and then incrementally moving projects from the old cluster to the new cluster.\n\nThis might sound heavy handed but the issue with working with multiple versions of a number of charts like `lighthouse` and `tekton` is that they use cluster scoped resources (CRDs and `clusterrole` resources for example) which can compete with each other. e.g. installing a new version of a chart may well break an old installation.\n\nSo its safer to [spin up a new cluster and install v3 there](/v3/admin/platform/).\n\nOnce you have a new cluster you can just [import projects](/v3/develop/create-project/#import-an-existing-project) into the new cluster via [jx project import](/v3/develop/create-project/#import-an-existing-project)\n\n\nYou can then test the projects work fine in the new v3 cluster. If they do you can remove them from the old cluster via `jx delete application`.\n        \n## Converting pipelines\n\nYou can follow the [guide on migrating pipelines individually](/v3/develop/pipelines/upgrading/#converting-older-pipelines) via  [jx pipeline convert](/v3/develop/reference/jx/pipeline/convert) command to convert pipelines in a repository:\n\n```bash\njx pipeline convert \n```        \n\n## Batch importing\n\nTo batch import lots of projects from the old cluster:\n\n* git clone the new cluster's git repository (with the `helmfile.yaml` file inside) and `cd` into the directory\n* verify you are in the correct git clone by running this command\n\n```bash \nls -al helmfile.yaml\n```\n\n* you should see the `helmfile.yaml` file from the v3 installation\n\n* now connect to your old Jenkins X cluster. Using jx v2 you can use `jx ctx` to switch contexts or refer to your cloud providers documentation on how to switch `kubectl` to point to different clusters\n\n* verify you can see the old source repositories via:\n\n```bash \nkubectl get sourcerepository\n```\n\n* now run the [jx gitops repository export](/v3/develop/reference/jx/gitops/repository/export) command\n\n* the local file `.jx/gitops/source-config.yaml` should have been modified with the exported repositories\n* review the changes to this file - remove any projects you don't want to import\n* now git commit this file:\n\n```bash\ngit add .jx\ngit commit -a -m \"fix: import repositories\"\ngit push \n```\n\n* connect to your new cluster\n* you can watch the setup pipeline run via `jx admin log`\n* once complete you should see the imported projects:\n     \n```bash \nkubectl get sourcerepository\n```\n\n",
            "content/en/v3/admin/guides/migrate/v3-alpha.md": "---\ntitle: From 3.0 Alpha\nlinktitle: From 3.0 Alpha\ntype: docs\ndescription: Migrate to the 3.0 Beta from 3.0 Alpha\nweight: 50\n---\n\n\nThe [3.0 beta is almost ready](/blog/2020/12/04/jx-v3-update/), so we've rolled out the new `jx-requirements.yml` file format which uses API versioning and removes lots of old deprecated content.\n  \nYour cluster git repository will be upgraded automatically when you [upgrade your cluster](/v3/admin/guides/upgrade/#cluster) via the `jx gitops upgrade` command inside a git clone of your cluster git repository.\n  \n**NOTE** once you upgrade your cluster you will also need to make sure all the quickstarts and imported projects are using the latest pipelines from the catalog to ensure the container images are at least at 3.0 beta level. \n\n\n## Upgrading pipelines in your repositories\n\nYou can create Pull Requests on all the repositories you've imported or created via quickstarts via:\n\n```bash \njx updatebot pipeline\n```\n\nThis will use the default [kpt](https://googlecontainertools.github.io/kpt/) strategy of `resource-merge` which will try merge any local changes with those changes in the [pipeline catalog](/v3/develop/pipelines/)\n\nYou can use the `--strategy` to change this default if you wish. See `jx updatebot pipeline --help` for more detail.\n\n## Converting pipelines\n\nYou can follow the [guide on migrating pipelines individually](/v3/develop/pipelines/upgrading/#converting-older-pipelines) via  [jx pipeline convert](/v3/develop/reference/jx/pipeline/convert) command to convert pipelines in a repository:\n\n```bash\njx pipeline convert \n```        \n\n### If you lose some pipeline changes\n\nTo be totally sure you don't miss any local changes to pipelines you can use the  `--strategy alpha-git-patch` argument.\n            \nThough you can get [merge conflicts](/v3/admin/guides/upgrade/#merge-conflicts) which you then need to resolve in your IDE so its probably easier if you do those changes by hand in each repository via `jx gitops upgrade`\n\nThe other option is to allow the above `resource-merge` to create a PR and merge; then if you have lost some changes use your IDE to see the differences and bring things back you need.\n             \n\n### If you hit issues on your alpha cluster \n\nIf you are not yet ready to migrate to the beta and hit some issues these tips may help.\n\nIf you have pipelines on your alpha that start to fail with issues around requirements parsing (missing fields or encoding of storage or whatever) then edit your pipeline files to replace any `latest` images for `jx-cli` with `jx-cli:3.0.766` instead.\n\nYou may find new quickstarts / imports created on your cluster start to fail too. \n\nTo avoid that modify your pipeline catalog to use the `alpha` tag rather than `master`. e.g. if you edit your [extensions/pipeline-catalog.yaml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/extensions/pipeline-catalog.yaml#L7) file just make sure it has the `alpha` reference like this:\n\n\n```yaml\napiVersion: project.jenkins-x.io/v1alpha1\nkind: PipelineCatalog\nspec:\n  repositories:\n  - label: JX3 Pipeline Catalog\n    gitUrl: https://github.com/jenkins-x/jx3-pipeline-catalog\n    gitRef: alpha\n```\n",
            "content/en/v3/admin/guides/multi-cluster/_index.md": "---\ntitle: Multi-Cluster\nlinktitle: Multi-Cluster\ntype: docs\ndescription: How to use multiple clusters with helm 3 and helmfile\nweight: 100\naliases:\n  - /v3/guides/multi-cluster\n---\n",
            "content/en/v3/admin/guides/multi-cluster/multi-cluster-example.md": "\n---\ntitle: Multi-Cluster Example\nlinktitle: Multi-Cluster Example\ntype: docs\ndescription: An example how to build a multi-cluster environment using GKE/GSM/DNS\nweight: 101\n---\n \nThis is an example on how to build a multi-cluster environment having two separate cluster repos (i.e. 'dev' and 'prod'). The steps will include building a GKE/GSM/DSN environment from scratch for both environments, and deploying projects to staging and the remote production. It will use DNS (`jx3rocks.com`), TLS, Let's Encrypt certificates. This example is intended for an audience already familiar with Jenkins X operability and focuses on an example of actual commands used to build a multi-cluster environment. Additional information regarding using Google as the provider for this example can be found under [Google Cloud Platform Prequisites](/v3/admin/guides/tls_dns/#prerequisites).\n\n> \u26a0\ufe0f Note to _OSX_ users \n> You may need to substitute `sed -i` commands with `sed -i.bak`, taking note to delete the generated .bak file.\n> Some `sed -i` commands that are additive might not work but can easily be completed with a text editor.\n\n### Generate the Infra and Cluster Repos for Dev and Prod\nUsing a command-line based approach, the example employs a process modeled after the doc [Setup Jenkins X on Google Cloud with GKE](/v3/admin/platforms/google), and will use Google Secret Manger. It requires the installation of [Git](https://git-scm.com/downloads) and [Hub](https://hub.github.com/) command line tools. \n\nThe following are the values used for the creation of the Infra and Cluster repos for both the Dev and Prod environments:\n```\nRepo Source:\t\tjx3-gitops-repositories\nProd Infra Repo:\tjx3-terraform-gke.prd\nProd Cluster Repo:\tjx3-gke-gsm.prd\nDev Infra Repo:\t\tjx3-terraform-gke.dev\nDev Cluster Repo:\tjx3-gke-gsm.dev\nGit Organization:\t$JX3ORG\nJX3 Root Directory:\t$JX3HOME\n```\nBuilding `PROD INFRA` repo: `https://github.com/${JX3ORG}/jx3-terraform-gke.prd` \n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-terraform-gke.git jx3-terraform-gke.prd\ncd  jx3-terraform-gke.prd\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-terraform-gke.prd.git\nhub create -p ${JX3ORG}/jx3-terraform-gke.prd\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\nBuilding `PROD CLUSTER` repo: `https://github.com/${JX3ORG}/jx3-gke-gsm.prd`\n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-gke-gsm.git jx3-gke-gsm.prd\ncd jx3-gke-gsm.prd\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git\nhub create -p ${JX3ORG}/jx3-gke-gsm.prd\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\nBuilding `DEV INFRA` repo: `https://github.com/${JX3ORG}/jx3-terraform-gke.dev` \n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-terraform-gke.git jx3-terraform-gke.dev\ncd  jx3-terraform-gke.dev\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-terraform-gke.dev.git\nhub create -p ${JX3ORG}/jx3-terraform-gke.dev\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\nBuidling `DEV CLUSTER` repo: `https://github.com/${JX3ORG}/jx3-gke-gsm.prd`\n```bash\ncd ${JX3HOME}\ngit clone https://github.com/jx3-gitops-repositories/jx3-gke-gsm.git jx3-gke-gsm.prd\ncd jx3-gke-gsm.prd\ngit remote set-url origin https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git\nhub create -p ${JX3ORG}/jx3-gke-gsm.prd\ngit commit -a -m \"chore: Initial\"\ngit push -u origin main\n```\n### Initialize the Prod cluster repo\nPrepare the remote prod cluster repo by using the out of the box (OOTB) config (i.e.  dev, jx-staging, and jx-production environemnts). Also remove the default '-jx' URL value and insert jx-production '-prd' URL value (optional).  Prior to building the prod infra repo, prepare the production cluster repo for use by removing unecessary components. The components to modify/remove in the designated remote prod environment are:\n* Remove default '-jx.' URL format (optional)\n* Remove Non-used JX charts \n* Remove Tekton pipelines\n* Add jxgh/local-external-secrets chart (optional)\n* Insert imagePullSecret in jx-global-variables.yaml (optional)\n* Disable webhooks\n\n> \u26a0\ufe0f For [cluster autoupdate](/v3/admin/setup/upgrades/cluster/#automatic-upgrades) support both the Lighthouse and jxboot-helmfile-resources charts must be removed.\n\n```bash\ncd ${JX3HOME}/jx3-gke-gsm.prd\n# File removals\nrm -rf helmfiles/tekton-pipelines\n# Modifications\nsed -i 's/-jx././g' jx-requirements.yml \nsed -i '/tekton-pipelines/d' helmfile.yaml\n\n# JX Chart removals\nsed -i '/- chart: jxgh\\/jx-pipelines-visualizer/,/  - jx-values.yaml/d' helmfiles/jx/helmfile.yaml\nsed -i '/- chart: jxgh\\/jx-preview/,/  - jx-values.yaml/d' helmfiles/jx/helmfile.yaml\nsed -i '/- chart: jxgh\\/lighthouse/,/  - jx-values.yaml/d' helmfiles/jx/helmfile.yaml\nsed -i '/- chart: jxgh\\/jxboot-helmfile-resources/,/  - jx-values.yaml/d' helmfiles/jx/helmfile.yaml\nsed -i '/- chart: jxgh\\/jx-build-controller/,/  - jx-values.yaml/d' helmfiles/jx/helmfile.yaml\n\n# JX Chart additions (jxgh/local-external-secrets chart)\nsed -i '/templates:/ i - chart: jxgh/local-external-secrets' helmfiles/jx/helmfile.yaml\nsed -i '/templates:/ i   version: 0.0.14' helmfiles/jx/helmfile.yaml\nsed -i '/templates:/ i   name: local-external-secrets' helmfiles/jx/helmfile.yaml\nsed -i '/templates:/ i   values:' helmfiles/jx/helmfile.yaml\nsed -i '/templates:/ i   - jx-values.yaml' helmfiles/jx/helmfile.yaml\n\n# jx-global-values changes \nsed -i '/imagePullSecrets:/d' jx-global-values.yaml\nsed -i '/jx:/ a\\ \\ \\ - tekton-container-registry-auth' jx-global-values.yaml\nsed -i '/jx:/ a\\ \\ imagePullSecrets:' jx-global-values.yaml\n\n# Makefile changes\nsed -i '/include/ i # lets disable the dev cluster settings' Makefile\nsed -i '/include/ i COPY_SOURCE = no-copy-source' Makefile\nsed -i '/include/ i GENERATE_SCHEDULER = no-gitops-scheduler' Makefile\nsed -i '/include/ i REPOSITORY_RESOLVE = no-repository-resolve' Makefile\nsed -i '/include/ i GITOPS_WEBHOOK_UPDATE = no-gitops-webhook-update' Makefile\n\njx gitops helmfile resolve\n\ngit commit -a -m \"chore: prod cluster repo init\"\ngit push\n\n### Remote Prod Chart List\nfor i in `find helmfiles -name helmfile.yaml`; do echo; echo $i; grep -- ^-\\ chart $i ; done\n```\n### Remote Prod Chart List\n```\nhelmfiles/kuberhealthy/helmfile.yaml\n- chart: jxgh/kh-tls-check\n\nhelmfiles/jx-staging/helmfile.yaml\n- chart: jxgh/jx-verify\n\nhelmfiles/secret-infra/helmfile.yaml\n- chart: external-secrets/kubernetes-external-secrets\n- chart: jxgh/pusher-wave\n\nhelmfiles/jx/helmfile.yaml\n- chart: bitnami/external-dns\n- chart: jxgh/acme\n- chart: jxgh/jenkins-x-crds\n- chart: jenkins-x/nexus\n- chart: stable/chartmuseum\n- chart: jxgh/jx-kh-check\n- chart: jxgh/local-external-secrets\n\nhelmfiles/jx-production/helmfile.yaml\n- chart: jxgh/jx-verify\n\nhelmfiles/cert-manager/helmfile.yaml\n- chart: jetstack/cert-manager\n\nhelmfiles/nginx/helmfile.yaml\n- chart: ingress-nginx/ingress-nginx\n\nhelmfiles/tekton-pipelines/helmfile.yaml\n- chart: cdf/tekton-pipeline\n```\n### Build the prod infra with Terraform\nThe following TF_VAR environment variables are set prior to running Terraform commands:\n```\nTF_VAR_gcp_project=<prod google project>\nTF_VAR_apex_domain_gcp_project=<dns google project>\nTF_VAR_jx_bot_username=<git username>\nTF_VAR_jx_bot_token=<git token>\nTF_VAR_tls_email=mymail@jx3rocks.com\n\nTF_VAR_apex_domain=jx3rocks.com\nTF_VAR_subdomain=prd\n\nTF_VAR_gsm=true\nTF_VAR_cluster_name=jx3prd\nTF_VAR_cluster_location=us-east4-c\nTF_VAR_jx_git_url=https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git\nTF_VAR_lets_encrypt_production=true\nTF_VAR_force_destroy=true\n```\nAdditional details on Terraform settings can be found under [Google Terraform Quickstart Template](https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/master/README.md)\n\nCommands to build infrastructure: \n```bash\ncd ${JX3HOME}/jx3-terraform-gke.prd\nbin/create.sh                # Performs terraform init, plan and apply\n```\nValidate the prod certificate is active and health checks pass:\n```bash\ngcloud container clusters get-credentials jx3prd --zone us-east4-c --project <prod gcp project>\nexport PROD_CONTEXT=`kubectl config current-context`\njx ns jx\n# Wait until the following status are all \"green\"\njx health status --all-namespaces -w\n\nNAME                          NAMESPACE                     STATUS    ERROR MESSAGE\ncertmanager-tls               kuberhealthy                  OK                   \ndaemonset                     kuberhealthy                  OK                   \ndeployment                    kuberhealthy                  OK                   \ndns-status-internal           kuberhealthy                  OK                   \njx-bot-token                  jx                            OK                   \njx-install                    jx-git-operator               OK                   \njx-pod-status                 kuberhealthy                  OK                   \njx-secrets                    kuberhealthy                  OK                   \njx-webhook                    jx                            OK                   \njx-webhook-events             jx                            OK                   \nnetwork-connection-check      kuberhealthy                  OK   \n```\n### Initialize the Dev cluster repo\nPrepare the dev cluster repo by using the out of the box (OOTB) config (i.e.  dev, jx-staging, and jx-production environemnts). Also remove the default '-jx' URL value and insert jx-production '-prd' URL value (optional). Later on prior to importing the external steps will be used to remove the jx-prodcution environment (optional).\n```bash\ncd ${JX3HOME}/jx3-gke-gsm.dev\nsed -i 's/-jx././g' jx-requirements.yml \nsed -i '/- key: production/ a\\ \\ \\ \\ \\  namespaceSubDomain: -prd.' jx-requirements.yml\nsed -i '/- key: production/ a\\ \\ \\ \\ ingress:' jx-requirements.yml\njx gitops helmfile resolve\ngit commit -a -m \"chore: dev cluster repo init\"\ngit push\n\n### Dev Chart List (Initial)\nfor i in `find helmfiles -name helmfile.yaml`; do echo; echo $i; grep -- ^-\\ chart $i ; done\n```\n### Dev Chart List (Initial)\n```\nhelmfiles/kuberhealthy/helmfile.yaml\n- chart: jxgh/kh-tls-check\n\nhelmfiles/jx-staging/helmfile.yaml\n- chart: jxgh/jx-verify\n\nhelmfiles/secret-infra/helmfile.yaml\n- chart: external-secrets/kubernetes-external-secrets\n- chart: jxgh/pusher-wave\n\nhelmfiles/jx/helmfile.yaml\n- chart: bitnami/external-dns\n- chart: jxgh/acme\n- chart: jxgh/jxboot-helmfile-resources\n- chart: jxgh/jenkins-x-crds\n- chart: jxgh/jx-pipelines-visualizer\n- chart: jxgh/jx-preview\n- chart: jenkins-x/lighthouse\n- chart: jenkins-x/nexus\n- chart: stable/chartmuseum\n- chart: jxgh/jx-build-controller\n- chart: jxgh/jx-kh-check\n\nhelmfiles/jx-production/helmfile.yaml\n- chart: jxgh/jx-verify\n\nhelmfiles/cert-manager/helmfile.yaml\n- chart: jetstack/cert-manager\n\nhelmfiles/nginx/helmfile.yaml\n- chart: ingress-nginx/ingress-nginx\n\nhelmfiles/tekton-pipelines/helmfile.yaml\n- chart: cdf/tekton-pipeline\n```\n### Build the dev infra with Terraform\nThe following TF_VAR environment variables are set prior to running Terraform commands:\n```\nTF_VAR_gcp_project=<dev google project>\nTF_VAR_apex_domain_gcp_project=<dns google project>\nTF_VAR_jx_bot_username=<git username>\nTF_VAR_jx_bot_token=<git token>\nTF_VAR_tls_email=mymail@jx3rocks.com\n\nTF_VAR_apex_domain=jx3rocks.com\nTF_VAR_subdomain=dev\n\nTF_VAR_gsm=true\nTF_VAR_cluster_name=jx3dev\nTF_VAR_cluster_location=us-east1-b\nTF_VAR_jx_git_url=https://github.com/${JX3ORG}/jx3-gke-gsm.dev.git\nTF_VAR_lets_encrypt_production=true\nTF_VAR_force_destroy=true\n```\nAdditional details on Terraform settings can be found under [Google Terraform Quickstart Template](https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/master/README.md)\n\nCommands to build intrastructure: \n```bash\ncd ${JX3HOME}/jx3-terraform-gke.dev\nbin/create.sh                # Performs terraform init, plan and apply\n```\nTo validate the prod certificate is active and health checks pass:\n```bash\ngcloud container clusters get-credentials jx3dev --zone us-east1-b --project <dev gcp project>\nexport DEV_CONTEXT=`kubectl config current-context`\njx ns jx\n# Wait until the following status are all \"green\"\njx health status --all-namespaces -w\n\nNAME                          NAMESPACE                     STATUS                        ERROR MESSAGE\ncertmanager-tls               kuberhealthy                  OK                   \ndaemonset                     kuberhealthy                  OK                   \ndeployment                    kuberhealthy                  OK                   \ndns-status-internal           kuberhealthy                  OK                   \njx-bot-token                  jx                            OK                   \njx-install                    jx-git-operator               OK                   \njx-pod-status                 kuberhealthy                  OK                   \njx-secrets                    kuberhealthy                  OK                   \njx-webhook                    jx                            OK                   \njx-webhook-events             jx                            OK                   \nnetwork-connection-check      kuberhealthy                  OK   \n```\n### Import Remote Prod Repo\nAdd the remote prod repo as your production target by importing. PLEASE NOTE: Prior to importing the remote repo make sure all updates to the dev repo have completed.\n```bash\n# Make sure you're in the dev cluster\nkubectl config use-context $DEV_CONTEXT\njx ns jx\n# Make sure you're not in the cluster repo directory\ncd $JX3HOME\njx project import --url https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git \n```\nThe '`jx project import`' command will begin to display the following:\n```\nwe are now going to create a Pull Request on the development cluster git repository to setup CI/CD via GitOps\n\ncreated file /tmp/jx-git-973407466/.jx/gitops/source-config.yaml\nCreated Pull Request: https://github.com/jx3rocks/jx3-gke-gsm.src/pull/1\n\nwe now need to wait for the Pull Request to merge so that CI/CD can be setup via GitOps\n\nWaiting up to 20m0s for the pull request https://github.com/jx3rocks/jx3-gke-gsm.src/pull/1 to merge with poll period 20s....\n\n```\nMerge the outstanding pull request for \n```bash\n${JX3ORG}/jx3-gke-gsm.src chore: import repository https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git  env/dev\n```\nBelow is an example of the URL for the PR:\n```bash\nhttps://github.com/${JX3ORG}/jx3-gke-gsm.src/pull/1\n```\nOnce the pull request is merged, it proceeds to wait for a trigger to be added to the lighthouse config:\n```\nPull Request https://github.com/${JX3ORG}/jx3-gke-gsm.src/pull/1 was merged at sha a07df43fcad60df439dad087cf4502f00e002190 after waiting 12m7.719699579s\n\nwaiting up to 20m0s for a trigger to be added to the lighthouse configuration in ConfigMap config in namespace jx for repository: jx3rocks/jx3-gke-gsm-prd\nyou can watch the boot job to update the configuration via: jx admin log\nfor more information on how this works see: https://jenkins-x.io/docs/v3/about/how-it-works/#importing--creating-quickstarts\n```\nEventually the process appears to time out waiting for the adding of the trigger.\n```\nWARNING: It looks like the boot job failed to setup this project.\nYou can view the log via: jx admin log\nerror: failed to wait for repository to be setup in lighthouse: failed to find trigger in the lighthouse configuration in ConfigMap config in namespace jx for repository: jx3rocks/jx3-gke-gsm-prd within 20m0s\nerror: failed to wait for the pipeline to be setup jx3rocks/jx3-gke-gsm-prd: failed to run 'jx pipeline wait --owner jx3rocks --repo jx3-gke-gsm-prd' command in directory '', output: ''\n```\n### Adjust Prod Repo Promotion Type (optional)\nThe newly imported prod repo has a promotion type of 'Auto'. To change this 'Manual' to provide greater deployment control make adjustments in the jx-requirements.yml file:\n```bash\n## current environment settings\nkubectl get env\nNAME              NAMESPACE            KIND          PROMOTION   ORDER   GIT URL                                           GIT BRANCH\ndev               jx                   Development   Never               https://github.com/${JX3ORG}/jx3-gke-gsm.src.git   master\njx3-gke-gsm-prd   jx-jx3-gke-gsm-prd   Permanent     Auto        500     https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git   master\nproduction        jx-production        Permanent     Manual      500                                                       \nstaging           jx-staging           Permanent     Auto        100      \n\ncd ${JX3HOME}/jx3-gke-gsm.dev\ngit pull\nsed -i 's/promotionStrategy: Auto/promotionStrategy: Manual/g' jx-requirements.yml \ngit commit -a -m \"chore: remote repo manual promotion\"\ngit push\n\n## new environment settings \nkubectl get env\nNAME              NAMESPACE            KIND          PROMOTION   ORDER   GIT URL                                           GIT BRANCH\ndev               jx                   Development   Never               https://github.com/${JX3ORG}/jx3-gke-gsm.src.git   master\njx3-gke-gsm-prd   jx-jx3-gke-gsm-prd   Permanent     Manual        500     https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git   master\nproduction        jx-production        Permanent     Manual      500                                                       \nstaging           jx-staging           Permanent     Auto        100      \n\n```\n### Remove jx-production environment (optional)\nTo have a single designated production environment remove the dev repo's jx-production environment.\n```bash\ncd ${JX3HOME}/jx3-gke-gsm.dev\nsed -i '/- key: production/d' jx-requirements.yml \nsed -i '/jx-production/d' helmfile.yaml\nrm -rf helmfiles/jx-production\njx gitops helmfile resolve\ngit commit -a -m \"chore: remove jx-production\"\ngit push\n``` \n### Environments\nBoth the dev and remote prod repos are now ready for deployments.\n```bash\n# Development\nkubectl config use-context $DEV_CONTEXT\nkubectl get env\nNAME              NAMESPACE            KIND          PROMOTION   ORDER   GIT URL                                           GIT BRANCH\ndev               jx                   Development   Never               https://github.com/${JX3ORG}/jx3-gke-gsm.src.git   master\njx3-gke-gsm-prd   jx-jx3-gke-gsm-prd   Permanent     Manual      500     https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git   master\nstaging           jx-staging           Permanent     Auto        100 \n\n# Production\nkubectl config use-context $PROD_CONTEXT\nkubectl get env\nNAME   NAMESPACE   KIND          PROMOTION   ORDER   GIT URL                                           GIT BRANCH\ndev    jx          Development   Never               https://github.com/${JX3ORG}/jx3-gke-gsm.prd.git   master\n```\n### Set Dev Container Registry to Public\nIn order to deploy applications to the remote prod environment it is required that the dev container registry is publically available. The image below highlights how you can make the change using the Google console.\n\n![Container Setting](/images/v3/setContainer.png)\n\nOr you can use the following command:\n```bash\ngsutil iam ch allUsers:objectViewer gs://artifacts.${PROJECT}.appspot.com\n```\n### Deploy Quickstart Project\nTo ensure everything is working as intended, the following commands will create and deploy a simple NodeJS app to staging and the remote production.\n```bash\nkubectl config use-context $DEV_CONTEXT\njx ns jx\ncd ${JX3HOME}\n# Using quickstart deploy app to staging\njx project quickstart --git-token ${TF_VAR_jx_bot_token} --git-username ${TF_VAR_jx_bot_user} --filter node-http --org ${JX3ORG} --batch-mode  --name node-http01\n```\n### Merge Pull Requests\nFor deployment to remote prod you must merge the auto generated pull request.\n```bash\nhttps://github.com/${JX3ORG}/jx3-gke-gsm.prd/pulls\n```\n### Project Deployments\n```bash\n# Confirm deployment for Development\nkubectl config use-context $DEV_CONTEXT\njx ns jx\njx get applications\nAPPLICATION STAGING PODS URL\nnode-http01 0.0.1   1/1  https://node-http01.dev.jx3rocks.com\n\n# Confirm deployment for reomote prod\njx get applications -e jx3-gke-gsm-prd\nAPPLICATION\nnode-http01\n\nkubectl config use-context $PROD_CONTEXT\njx ns jx\nkubectl get ing -n jx-jx3-gke-gsm-prd\nNAME          CLASS    HOSTS                           ADDRESS         PORTS     AGE\nnode-http01   <none>   node-http01.prd.jx3rocks.com   34.86.236.247   80, 443   6m9s\n\n\n# URLS\nDev:  https://node-http01.dev.jx3rocks.com\nProd: https://node-http01.prd.jx3rocks.com\n```\n",
            "content/en/v3/admin/guides/multi-cluster/multi-cluster.md": "---\ntitle: Multi-Cluster\nlinktitle: Multi-Cluster\ntype: docs\ndescription: How to use multiple clusters with helm 3 and helmfile\nweight: 100\naliases:\n  - /v3/guides/multi-cluster\n---\n\n\nWe recommend using separate clusters for your `Preprod` and `Production` environments. This lets you completely isolate your environments which improves security.\n\n## Setting up multi cluster\n\nFor remote environments (e.g. `Preprod` and `Production`) you typically won't need lots of the development tools such as:\n  * Lighthouse\n  * Tekton\n  * Webhooks\n  * Nexus / Bucketrepo\n\nAnd install only services to run and expose your applications, e.g.:\n\n  * Nginx-ingress\n  * Cert-manager\n  * [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) for [populating Secrets from your secret store](/v3/admin/setup/secrets/) (vault or cloud provider secret manager)\n  * [push-wave](https://github.com/jenkins-x-charts/pusher-wave#wave) for automatically performing rolling upgrades when secrets are rotated in your secret store\n         \n \n### Create a repository\n\nCreate a git repository for your remote cluster using [a cut down repository](https://github.com/jx3-gitops-repositories/jx3-kubernetes-production/generate) you might want to start with:\n\n <a href=\"https://github.com/jx3-gitops-repositories/jx3-kubernetes-production/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create Git Repository</a> \n \n  * if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\nFollow the [administration documentation](/v3/admin/platform/) to setup a new Cluster (or skip this step if already in place) but using the git URL you created above for the cluster git repository  \n\n### Import the remote cluster into your Development cluster\n\nThen when you have a git repository URL for your `Preprod` or `Production` cluster, [import the git repository](/v3/develop/create-project/#import-an-existing-project) like you would any other git repository into your Development cluster using the [jx project import](/v3/develop/reference/jx/project/import) command (command should be run in the `jx` namespace):\n\n**NOTE** make sure you are connected to the development cluster:\n\n```bash\n# echo make sure we are connected to the development cluster\njx ns jx\njx ctx -b\n\n# lets clone the remote cluster repository and import it...\ngit clone https://github.com/myowner/my-prod-repo.git\ncd  my-prod-repo\njx project import\n```\n    \nThis will create a Pull Request on your development cluster git repository to link to the `Preprod` or `Production` git repository on promotions of apps.\n \n**NOTE**: Jenkins X will [push additional configuration files](/v3/about/how-it-works/#importing--creating-quickstarts) to the created Pull Request, so it is recommended to wait until the Pull Request is auto-merged and avoid manual intervention.\n\n### Changes to `jx-requirements.yml`\n\nThe above [jx project import](/v3/develop/reference/jx/project/import) should modify your `jx-requirements.yml` file in your development cluster to reference the remote production/pre-production cluster.\n\nSo your `jx-requirements.yml` should have started something like:\n\n```yaml \nenvironments:\n- key: dev\n  repository: my-dev-environment\n- key: staging                                                   \n```                                                              \n\nAfter importing the remote environment via [jx project import](/v3/develop/reference/jx/project/import) and merging the pull request, it should look like: \n\n```yaml \nenvironments:\n- key: dev\n  repository: my-dev-environment\n- key: staging\n- key: my-prod-repo\n  owner: myowner\n  repository: my-prod-repo\n  remoteCluster: true\n``` \n\n\nOnce everything is correctly setup, it will be possible to deploy applications to the newly created remote environment/s. \n\n\n\n\n## How it works\n\nThe multi cluster setup of Jenkins X is designed around the following goals:\n\n* you have full control over production and pre-production clusters, choosing exactly what software is installed there\n  * there are no development tools installed: no tekton, lighthouse, container registries and no images are built in production\n* immutable infrastructure configured via GitOps with maximum traceability and feedback\n  * easy to review changes on production via git and not requiring access to production\n  \n  \n### Development Cluster\n\nThe development cluster:\n\n* runs all pipelines on your applications to handle pull requests and performs releases\n  * releases of applications create pull requests on remote cluster repositories\n* handles all webhooks for pull requests on remove environments and runs pipelines to validate changes to remote environments\n  * reports back to GitHub the status of pull request pipelines \n  * visualises the pipelines in the [usual Jenkins X UIs](/v3/develop/ui/)\n  * supports auto-merge via ChatOps when approved\n\n### Remote Cluster\n\n* runs the [git operator](/v3/admin/setup/operator/) which polls the main branch in the remote cluster for changes\n* when a change is found a `Job` is run to perform the `kubectl apply` or `helmfile sync` or whatever \n\n\n## Remote Cluster Recommendations\n\nWe do recommend using the Jenkins X GitOps pipeline approach in [production and preproduction for these reasons](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template) then all changes to git result in the [kubernetes resources being checked into git](/v3/about/how-it-works/#boot-job) so they can be easily reviewed without reviewers needing access to production.\n\nYou may want to reuse existing built in charts such as:\n\n* [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) for [populating Secrets from your secret store](/v3/admin/setup/secrets/) (vault or cloud provider secret manager)\n* [push-wave](https://github.com/jenkins-x-charts/pusher-wave#wave) for automatically performing rolling upgrades when secrets are rotated in your secret store\n\n\n### using `helmfile sync`\n\nIf you want to just use something like `helmfile sync` to deploy charts in production you could use the following `Makefile` in your production/pre-production repository:\n\n```make \napply:\n    helmfile sync\n    \npr:\n    helmfile lint\n```\n\nthough you will lose [these benefits](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template). You will also need to:\n\n* add your own [pusher-wave integration](https://github.com/jenkins-x-charts/pusher-wave#quick-start) for each chart you want to perform a rolling upgrade if the underlying secrets are rotated.\n* manually populate all secrets in each remote environments via the underlying secret store as you will not be using the [jx-secret](https://github.com/jenkins-x/jx-secret) mechanism built into the default Jenkins X GitOps pipelines for doing this. \n",
            "content/en/v3/admin/guides/observability/_index.md": "---\ntitle: Observability\nlinktitle: Observability\ntype: docs\ndescription: Observability for Jenkins X\nweight: 120\naliases:\n  - /v3/guides/observability\n---\n",
            "content/en/v3/admin/guides/observability/cd-indicators.md": "---\ntitle: Continuous Delivery Indicators\nlinktitle: Continuous Delivery Indicators\ntype: docs\ndescription: How to install and use the Continuous Delivery Indicators addon for Jenkins X\nweight: 130\n---\n\nThis guide will help you install, configure and use the [Continuous Delivery Indicators](https://github.com/jenkins-x/cd-indicators) addon in your Jenkins X cluster.\n\nThis addon will automatically:\n- collect metrics from cluster events and git events: pull requests, pipelines, releases, deployments, ...\n- store them in a [PostgreSQL](https://www.postgresql.org/) database\n- expose [Grafana](http://grafana.com/) dashboards to visualize Continuous Delivery Indicators\n\nThis is an example of a pre-defined dashboard to visualize Continuous Delivery Indicators for a single repository (application):\n\n![Continuous Delivery Indicators for a single repository](/images/v3/observability_cd_indicators_repository.png)\n\n## Installation\n\nNote that this addon requires a running Grafana instance in your cluster, so you should install it first, using the [platform observability guide](/v3/admin/guides/observability/platform-observability/).\n\nPlease follow the usual [getting started guide for boot and helm 3](/v3/admin/platform/) first.\n\nInstalling this addon is a 1 step operation: you need to edit the `helmfiles/jx/helmfile.yaml` file in your development environment git repository, so that it references the `jxgh/cd-indicators` chart, such as:\n\n```yaml\nreleases:\n- chart: jxgh/cd-indicators\n  name: cd-indicators\n- chart: ...\n...\n```\n\nCommit and push these changes, and after a few minutes you should see 2 new pods running in the `jx` namespace:\n\n```bash \n$ kubectl get pod -n jx\nNAME                             READY   STATUS    RESTARTS   AGE\ncd-indicators-57f85df9fb-fltjp   1/1     Running   0          13m\ncd-indicators-postgresql-0       1/1     Running   0          13m\n...\n```\n\n## Usage\n\nThis addon will also expose:\n- a [Grafana datasource](https://grafana.com/docs/grafana/latest/datasources/) for the embedded PostgreSQL database - named `Indicators` - in a Kubernetes Secret\n- multiple [Grafana dashboards](https://grafana.com/docs/grafana/latest/dashboards/) - with the `cd-indicators` tag - in Kubernetes ConfigMaps\n\nThe Grafana instance will automatically find these new resources and use them. So if you go to your Grafana URL, you should now see a new datasource and new dashboards. Of course, it might take a few hours/days/weeks to get enough data to get nice-looking dashboards.\n\nYou can either:\n- enrich the existing dashboards, and submit Pull Requests on the [cd-indicators github repository](https://github.com/jenkins-x/cd-indicators) so that everybody can benefit from your improvements\n- or create your own dashboards. We recommend that you store them in a git repository, and publish them as ConfigMaps in your cluster - see the [cd-indicators github repository](https://github.com/jenkins-x/cd-indicators) for an example.\n\nAnd because we're re-using the same Grafana instance which already has the Prometheus (metrics) and Loki (logs) datasources, you can build dashboards combining data from all sources, to get a complete overview of your application and its lifecycle: development, build, release, deployment, runtime.\n\n## Configuration\n\nThe configuration is defined in a [\"values file\" stored in the Jenkins X Version Stream](https://github.com/jenkins-x/jx3-versions/blob/master/charts/jxgh/cd-indicators/values.yaml).\n\nIf you want to change anything from the default configuration, you can either:\n- submit a Pull Request if you believe this change is beneficial for everybody\n- or create a new values file in your development environment git repositor: `values/cd-indicators/values.yaml`\n\nYou should at least configure the `gitOwners`, to ensure you will only collect metrics for your own repositories, and not for Jenkins X's own applications - see [the default values](https://github.com/jenkins-x/cd-indicators/blob/main/charts/cd-indicators/values.yaml). In your `values/cd-indicators/values.yaml` file you can write:\n\n```yaml\nconfig:\n  gitOwners:\n  - my_github_organization\n```\n",
            "content/en/v3/admin/guides/observability/platform-observability.md": "---\ntitle: Platform Observability\nlinktitle: Platform Observability\ntype: docs\ndescription: How to setup platform observability for Jenkins X\nweight: 125\n---\n\nThis guide will help you install, configure and use an observability stack in your Jenkins X cluster.\n\nWe selected the [Grafana](http://grafana.com/) stack because:\n- it's [open-source](https://grafana.com/oss/)\n- it has support for [logs](https://grafana.com/oss/loki/), [metrics](https://grafana.com/oss/prometheus/), and [distributed traces](https://grafana.com/oss/tempo/)\n- it has a low memory footprint, and a great Kubernetes integration\n\n## Installation\n\nPlease follow the usual [getting started guide for boot and helm 3](/v3/admin/platform/) first.\n\nThe first step is to edit your main `helmfile.yaml` file located in the root directory of your development environment git repository, so that it references the `helmfiles/jx-observability/helmfile.yaml` file, such as:\n\n```yaml\nhelmfiles:\n- path: helmfiles/jx/helmfile.yaml\n- path: helmfiles/jx-observability/helmfile.yaml\n- path: helmfiles/tekton-pipelines/helmfile.yaml\n...\n```\n\nThe second step is to create the `helmfiles/jx-observability/helmfile.yaml` file, with the following content:\n\n```yaml \nnamespace: jx-observability\nrepositories:\n- name: jxgh\n  url: https://jenkins-x-charts.github.io/repo\n- name: grafana\n  url: https://grafana.github.io/helm-charts\n- name: prometheus-community\n  url: https://prometheus-community.github.io/helm-charts\nreleases:\n- chart: jxgh/grafana-dashboard\n  name: grafana-dashboard\n- chart: grafana/loki\n  name: loki\n- chart: grafana/promtail\n  name: promtail\n- chart: grafana/tempo\n  name: tempo\n- chart: grafana/grafana\n  name: grafana\n- chart: prometheus-community/prometheus\n  name: prometheus\n```\n\nCommit and push these changes, and after a few minutes you should see grafana, loki, promtail, tempo, and prometheus pods running in the `jx-observability` namespace:\n\n```bash \n$ kubectl get pod -n jx-observability\nNAME                                             READY   STATUS    RESTARTS   AGE\ngrafana-5858dbfcc4-ldhtc                         2/2     Running   0          8m25s\nloki-0                                           1/1     Running   0          10m\nprometheus-alertmanager-8697d479dd-9nqt7         2/2     Running   0          10m\nprometheus-kube-state-metrics-685b975bb7-cds8s   1/1     Running   0          10m\nprometheus-node-exporter-djdr6                   1/1     Running   0          10m\nprometheus-server-65ff7b48dd-kqj2d               2/2     Running   0          10m\npromtail-f26j8                                   1/1     Running   0          10m\ntempo-0                                          1/1     Running   0          10m\n```\n\n### Who's who\n\n- [Promtail](https://grafana.com/docs/loki/latest/clients/promtail/) collects the logs from all running containers\n  - it is deployed as a daemonset on every node of the cluster so that it can read the Kubernetes log files\n- [Loki](https://grafana.com/docs/loki/latest/) ingests the logs - pushed by promtail - and exposes a query API\n- [Tempo](https://grafana.com/docs/tempo/latest/) ingests the traces - pushed by the applications or an agent such as the [OpenTelemetry Collector](https://opentelemetry.io/docs/collector/) - and exposes a query API\n- [Prometheus](https://prometheus.io/) (server) collects and ingests the metrics from the running pods\n  - [Prometheus Alertmanager](https://prometheus.io/docs/alerting/latest/alertmanager/) handles alerts - generated by Prometheus server, Loki or Grafana\n  - [Prometheus Node Exporter](https://prometheus.io/docs/guides/node-exporter/) collects hardware- and kernel-related metrics\n    - it is deployed as a daemonset on every node of the cluster\n  - [Kube State Metrics](https://github.com/kubernetes/kube-state-metrics) collects metrics from the Kubernetes API\n- [Grafana](https://grafana.com/docs/grafana/latest/) is the UI that brings everything together\n- [Grafana Dashboard](https://github.com/jenkins-x-charts/grafana-dashboard) is a Helm Chart that contains Grafana Dashboards for Jenkins X, stored in Kubernetes ConfigMaps\n\n## Usage\n\nGrafana is exposed through an ingress - you can retrieve its URL with the following command:\n\n```bash \n$ kubectl get ing -n jx-observability\n```\n\nThe default credentials are stored in the `grafana` Kubernetes Secret:\n- the default user is `admin`\n- the default password has been auto-generated at installation time, you can retrieve it with the following command:\n\n```bash \n$ kubectl -n jx-observability get secret grafana --template='{{index .data \"admin-password\"}}' | base64 --decode\n```\n\nOnce you are logged in, you can play with the pre-defined dashboards, or with the [Grafana Explorer](https://grafana.com/docs/grafana/latest/explore/).\n\nThis is an example of a pre-defined dashboard, for [cert-manager](https://cert-manager.io/), where we display on the same dashboard metrics collected by Prometheus (including the certificates expiration dates) and logs collected by Loki/Promtail:\n\n![cert-manager grafana dashboard for Jenkins X](/images/v3/observability_platform_cert-manager.png)\n\n## Configuration\n\nThe configuration is defined in \"values files\" stored in the Jenkins X Version Stream:\n- [Grafana configuration](https://github.com/jenkins-x/jx3-versions/tree/master/charts/grafana/grafana)\n- [Loki configuration](https://github.com/jenkins-x/jx3-versions/tree/master/charts/grafana/loki)\n- [Promtail configuration](https://github.com/jenkins-x/jx3-versions/tree/master/charts/grafana/promtail)\n- [Tempo configuration](https://github.com/jenkins-x/jx3-versions/tree/master/charts/grafana/tempo)\n- [Prometheus configuration](https://github.com/jenkins-x/jx3-versions/tree/master/charts/prometheus-community/prometheus)\n\nIf you want to change anything from the default configuration, you can either:\n- submit a Pull Request if you believe this change is beneficial for everybody\n- or create a new values file in your development environment git repository, in the `values` directory\n  - for example, `values/grafana/values.yaml` for Grafana, or `values/prometheus/values.yaml` for Prometheus\n\n## Next steps\n\nOnce the Grafana stack is installed and configured, you can:\n- visualize pipelines traces from the [Jenkins X Pipelines Visualizer](/v3/develop/ui/dashboard/)\n- install the [Continuous Delivery Indicators](/v3/admin/guides/observability/cd-indicators/) addon\n- expose Prometheus metrics from your own applications\n- export traces from your own applications, using [OpenTelemetry](https://opentelemetry.io/)\n- create Grafana dashboards for your applications\n- contribute to the [Jenkins X Grafana Dashboards](https://github.com/jenkins-x-charts/grafana-dashboard)\n",
            "content/en/v3/admin/guides/preview-environments/_index.md": "---\ntitle: Preview Environments\nlinktitle: Preview Environments\ntype: docs\ndescription: How to scale Preview Environments in Jenkins X 3\nweight: 120\naliases:\n  - /v3/guides/preview-environments\n---\n\n[Preview environments](/v3/develop/environments/preview/) are temporary environments created automatically by Jenkins X for each Pull Request.\n\nThis is very nice, but if you start adding applications to your Jenkins X cluster, and each application repository has a few opened Pull Requests - each with a preview environment including a few dependencies - then you'll quickly get tens of preview environments and a lot more running pods. But these pods are usually only used to run the integration tests in the Pull Request pipelines, or when someone manually visits the preview environment URL. Most of the time, these pods are just idle, waiting and using resources. What if you could easily scale them down when they are idle?\n\nThis guide will help you install [Osiris](https://github.com/dailymotion-oss/osiris) in your Jenkins X cluster. Osiris is a Kubernetes component that will inject itself as a proxy in front of your applications, and scale them down when it notices that they are idle for more than a pre-configured period. And if someone wants to access your application, Osiris will receive the request, scale up the application, and forward the request to the application.\n\nCombined with a cluster autoscaler, Osiris will help you scale down/up your cluster nodes automatically based on your workload.\n\n## Installation\n\nPlease follow the usual [getting started guide for boot and helm 3](/v3/admin/platform/) first.\n\nThe first step is to edit your main `helmfile.yaml` file located in the root directory of your development environment git repository, so that it references the `helmfiles/osiris-system/helmfile.yaml` file, such as:\n\n```yaml\nhelmfiles:\n- path: helmfiles/jx/helmfile.yaml\n- path: helmfiles/osiris-system/helmfile.yaml\n- path: helmfiles/tekton-pipelines/helmfile.yaml\n...\n```\n\nThe second step is to create the `helmfiles/osiris-system/helmfile.yaml` file, with the following content:\n\n```yaml \nnamespace: osiris-system\nreleases:\n- chart: osiris/osiris\n  name: osiris\n```\n\nCommit and push these changes, and after a few minutes you should see a few osiris pods running in the `osiris-system` namespace:\n\n```bash \n$ kubectl get pod -n osiris-system\nNAME                                           READY   STATUS    RESTARTS   AGE\nosiris-activator-696b8c85f9-99hnn              1/1     Running   0          31m\nosiris-endpoints-controller-67f4877645-k4pxv   1/1     Running   0          31m\nosiris-endpoints-hijacker-686586df7c-72cmx     1/1     Running   0          31m\nosiris-proxy-injector-847f6f46c6-bjjtp         1/1     Running   0          31m\nosiris-zeroscaler-5d757dcb98-kl7ts             1/1     Running   0          31m\n```\n\n## Usage\n\nOsiris requires specific annotations to be added to your application's Deployment and Service, otherwise, it won't do anything. You can read the [Osiris documentation](https://github.com/dailymotion-oss/osiris) to see which annotations you need to add to your resources.\n\n## Configuration\n\nThe configuration is defined in a [\"values file\" stored in the Jenkins X Version Stream](https://github.com/jenkins-x/jx3-versions/tree/master/charts/osiris/osiris/values.yaml.gotmpl).\n\nIf you want to change anything from the default configuration, you can either:\n- submit a Pull Request if you believe this change is beneficial for everybody\n- or create a new values file in your development environment git repositor: `values/osiris/values.yaml`\n",
            "content/en/v3/admin/guides/progressive-delivery/_index.md": "---\ntitle: Progressive Delivery\nlinktitle: Progressive Delivery\ntype: docs\ndescription: How to use progressive delivery with helm 3 and helmfile\nweight: 120\naliases:\n  - /v3/guides/progressive-delivery\n---\n\n\nProgressive delivery allows you to gradually rollout new versions of your application to an environment using _canaries_ and gradually giving traffic to the new version until you are happy to fully rollover to the new version.\n\nOur recommendation for using progressive delivery with Jenkins X is to use: \n\n* [flagger](https://flagger.app/) as the progressive delivery controller \n* [istio](https://istio.io/) as the service mesh to provide advanced load balancing capabilities across internal or external networking\n\n## Configuring Progressive Delivery\n\nPlease follow the usual [getting started guide for boot and helm 3](/v3/admin/platform/)\n\n### Add the istio and flagger apps\n\nPlease make sure your `helmfile.yaml` has the necessary apps for using [flagger](https://flagger.app/) and [istio](https://istio.io/). Your `helmfile.yaml` in your development environment git repository should look something like this:\n\n```yaml \nreleases:\n- chart: jx-labs/istio\n- chart: flagger/flagger\n- chart: flagger/grafana\n- chart: jx-labs/flagger-metrics\n- chart: stable/kuberhealthy\n...\n```\n\nSo that you remove `stable/nginx-ingress` from your `helmfile.yaml` file and ensure the above apps are added at the top of the file.\n\nAlso for now I'm afraid you will have to remove the `jenkins-x/jxui` chart as its currently not working yet with istio ingress - but we can hopefully get that working soon.\n\n### Enable istio based ingress\n\nTo avoid having 2 `LoadBalancer` services for both `istio` and `nginx` (which costs more money) its easier to switch to pure istio for both internal and external load balancing. This also results in a smaller footprint. \n\nTo do that ensure that `kind: istio` is added to the `jx-requirements.yml` file in the top level `ingress:` section like this:\n\n\n```yaml \ningress:\n  domain: \"\"\n  kind: istio\n...\n```\n\nNow your development git repository should be setup and be ready. Now:\n\n* make sure you have setup [any secrets you need to boot](/v3/guides/secrets/)\n\nWhen it is all complete you should see istio, flagger, grafana pods running in the `istio-system` namespace something like this:\n\n```bash \n$ kubectl get pod -n istio-system\nNAME                                    READY   STATUS    RESTARTS   AGE\nflagger-66dc49cd-g6ptp                  1/1     Running   0          32h\ngrafana-7d7d7476f6-ff6bm                1/1     Running   0          32h\nistio-ingressgateway-598796f4d9-sq8b7   1/1     Running   0          32h\nistiod-7d9c7bdd6-vjp9j                  1/1     Running   0          32h\nkuberhealthy-f54f7f7df-b5gbf            1/1     Running   2          32h\nkuberhealthy-f54f7f7df-j6qwt            1/1     Running   0          32h\nprometheus-b47d8c58c-n974m              2/2     Running   0          32h\n```                                                                     \n\nFrom 1.5 onwards istio is pretty small; just 2 pods. Note that those `kuberhealthy` pods are optional and just help with reporting.\n\n\n### Enable istio in staging/production\n\nIf you wish to use a Canary with [flagger](https://flagger.app/) and [istio](https://istio.io/) in your staging or production namespace you need to make sure you have labelled the namespace correctly to enable istio injection.\n\nTo enable istio in staging:\n\n```bash \nkubectl label namespace jx-staging istio-injection=enabled\n```\n\nTo enable istio in production:\n\n```bash \nkubectl label namespace jx-production istio-injection=enabled\n```\n\n### Defaulting to use Canary\n\nRun the following command to default to using canary deployments and horizontal pod autoscaling whenever you [create a new quickstart](/docs/getting-started/first-project/create-quickstart/) or [import a project](/docs/resources/guides/using-jx/creating/import/)\n\n```bash \njx edit deploy --team --canary --hpa\n```\n\nThis will enable all new quickstarts and imported projects to use canary rollouts and use horizontal pod autoscaling in all environments.\n\nYou can switch the defaults back again at any time or configure any app to change its defaults by running `jx edit deploy` inside a git clone of an application.\n\n\n### Enabling/Disabling Canary/HPA in an Environment\n\nIf you want to enable/disable canary or horizontal pod autoscaling for a specific app in an environment then you can [follow the app customisation approach](/v3/develop/apps/#customising-charts).\n\nAssuming your app is called `myapp` then in the git repository for the environment (e.g. `Staging`) you can add/edit a file called `apps/mychart/values.yaml` to look like this:\n\n```yaml \ncanary:\n  enabled: true\n\nhpa:\n  enabled: true\n``` \n\nyou can enable/disable those 2 flags for canary releases and horizontal pod autoscaler at any point in any environment.\n\n\n## Using Progressive Delivery\n\nOnce you have followed the above steps create a [quickstart application](/docs/getting-started/first-project/create-quickstart/) in the usual way.\n\nAs you merge changes to the master branch of your application Jenkins X will create a new release and [promote it to the staging environment](/docs/resources/faq/using/#how-does-promotion-actually-work). \n\nHowever if Canary deployment is enabled your new version will gradually be rolled out progressively: \n\n* the defaults are that 20% of the traffic will go to the new version\n* flagger will keep monitoring the metrics used in the Canary resource to determine if the canary is good\n* after the configured time period is over the traffic will be increased to 40% then 60%\n* eventually if things look good the new version will fully rollout to 100% traffic\n* if anything goes bad during the rollout time period the old version is restored\n \nThere is an excellent [video showing this in action](https://youtu.be/7eePqtxW7NM).\n\n",
            "content/en/v3/admin/guides/spot-instances/_index.md": "---\ntitle: Spot Instances For Builds\nlinktitle: Spot Instances For Builds\ntype: docs\ndescription: How to use spot instances to handle all Tekton builds\nweight: 120\naliases:\n  - /v3/guides/spot-instances-for-builds\n---\n\nUsing spot instances for builds is a great way to detach your builds (increasing stablility on your deployed applications) and save money.\n\nJenkins X supports a [Tekton](https://Tekton.dev/) helm chart that lets configuring spot instances for builds really easy. \n\nLet's discuss:\n* Why spot instances are a good fit for builds \n* How to setup spot instances with your terraform module\n* Making Tekton run all jobs with those taints/affinity by default\n\n\n## Why spot instances are a good fit for builds\n\nSpot instances are the free resources your cloud provider are not using, this means you can use them for a reduced price at the cost of disruption to the service.\n\nSpot instances are ideal for:\n* Dev/Test environments\n* CI/CD workloads\n* High performance computing\n* Batch processing jobs\n\nIt's a great way for us to save money on builds while ensuring you can give them enough resources to run quickly. It's also a scalable to zero and doesn't matter if you have to wait for a machine to be allocated.\n\n## How to setup spot instances with your terraform module\n\nWork has been completed on [AWS](https://github.com/jenkins-x/terraform-aws-eks-jx/pull/76) and [Azure](https://github.com/jenkins-x-terraform/terraform-jx-Azure/pull/23), if someone would like to implement this on GCP (or another cloud provider), please join us in #jenkins-x-dev in slack.\n\n### Azure\n\nOn Azure, there are a few parameters to configure to enable spot instances:\n\n```\n# This sets whether to use spot or standard nodes for the builds, so we'll leave this as true\nuse_spot=true\n\n# Sets the max price that you want to pay for your certain machine, if this is -1 that makes it so you'll pay the current max price for spot\nspot_max_price = -1\n\n# Sets the type of vm you would like, if this isn't specified, the build node pool won't be created\nbuild_node_size=\"Standard_D4s_v3\"\n\n# The minimum count of nodes, for spot, you have to use 0\nmin_build_node_count = 0\n\n# The maximum amount of nodes you'd like to have\nmax_build_node_count = 5\n```\n\nThen run your:\n\n`terraform plan`\n\n`terraform apply`\n\n## Making Tekton run all jobs with those taints/affinity by default\n\nAs all the builds are handled by Tekton, we can use their strategy for applying defaults to pipelineActivities, which is done through a configmap in the tekton-pipelines namespace.\n\nWe'll want to add the toleration to the pod template, so that they're able to be allocated to the new spot nodes that we've created.\nIf we want to ensure the builds are done on the nodes that we've created, without an option to be allocated to the other machines, we'll also want to add an affinity.\n\n**I'm going to be showing this with the Azure examples, Azure by default adds a specific spot taint, so we'll need to add that too.**\n\n\n### Applying the helmfile changes to the gitops repository\nThe Tekton helm chart has a value override for config-defaults, we can apply this in the gitops repository helmfile by modifying:\n`helmfiles/Tekton-pipelines/helmfile.yaml`\n\n**Modify this entry:**\n```\n- chart: cdf/Tekton-pipeline\n  version: 0.27.2\n  name: Tekton-pipeline\n  values:\n  - ../../versionStream/charts/cdf/Tekton-pipeline/values.yaml.gotmpl\n  - jx-values.yaml\n```\n\n**To be:**\n```\n- chart: cdf/Tekton-pipeline\n  version: 0.27.2\n  name: Tekton-pipeline\n  values:\n  - ../../versionStream/charts/cdf/Tekton-pipeline/values.yaml.gotmpl\n  - jx-values.yaml\n  - Tekton-pipeline.yaml\n```\n\n**We now need to create the Tekton-pipeline.yaml file within the same directory as the helmfile we've just created:**\n```\nconfigDefaults:\n  default-pod-template: |\n    tolerations:\n    - key: \"sku\"\n      operator: \"Equal\"\n      value: \"build\"\n      effect: \"NoSchedule\"\n    - key: \"kubernetes.Azure.com/scalesetpriority\"\n      operator: \"Equal\"\n      value: \"spot\"\n      effect: \"NoSchedule\"\n    affinity:\n      nodeAffinity:\n        requiredDuringSchedulingIgnoredDuringExecution:\n          nodeSelectorTerms:\n          - matchExpressions:\n            - key: \"agentpool\"\n              operator: \"In\"\n              values: \n              - \"buildnode\"\n```\n\nHere we can see that we're adding 2 tolerations to make the pipeline activites allowed to be assigned to these nodes.\n```\nsku: build\nkubernetes.Azure.com/scalesetpriority: spot\n```\n\nWe're also adding the affinity to specfically select the nodes with the label:\n```\nagentpool: buildnode\n```\n\nThen if we apply this to the gitops repository, spot instances will start running your builds and saving you money!",
            "content/en/v3/admin/platforms/_index.md": "---\ntitle: Platforms\nlinktitle: Platforms\ntype: docs\ndescription: Installation instructions for different platforms\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 200\naliases:\n  - /v3/admin/platform/\n---\n\n{{< admincards >}}\n",
            "content/en/v3/admin/platforms/azure/_index.md": "---\ntitle: Azure\nlinktitle: Azure\ntype: docs\ndescription: Setup Jenkins X on Azure\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 30\naliases:\n  - /v3/admin/platform/azure\n---\n\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\n---\n\n### Azure + Terraform\n\nThis is our current recommended quickstart for Azure:\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-terraform-azure/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create Git Repository</a>\n\n  - if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n- `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-terraform-azure/blob/master/README.md\" \n    target=\"github\" class=\"btn bg-primary text-light\" \n    title=\"use your new git repository to create your cloud infrastructure and install Jenkins X\">\n  Create your infrastructure\n  </a>\n\n- <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n",
            "content/en/v3/admin/platforms/azure/svc_principal.md": "---\ntitle: Configure Azure Service Principal\nlinktitle: AKS Service Principal\ntype: docs\nweight: 100\naliases:\n---\n\nAzure has a notion of a **Service Principal** which is a service acount. This doc will demonstrate how to set up an Azure service principal that can be used by Terraform to execute [Jenkins X Azure Module](https://github.com/jenkins-x/terraform-azurerm-jx#jenkins-x-azure-module)\n\n> \ud83d\udca1 This doc has been designed to assist in performing the demonstration through copying and pasting each block of code into a shell terminal.\n>\n> To execute the commands listed in your local bash shell will require the [Azure CLI](https://docs.microsoft.com/en-us/cli/azure/) and the [JQ command-line JSON processor](https://stedolan.github.io/jq/).\n>\n> To execute the commands listed in [Bash in Azure Cloud Shell](https://docs.microsoft.com/en-us/azure/cloud-shell/overview) does not require any additional software installed.\n\n### Service principal privileges\nIn order to build your Azure environment with Terraform using a service principal, the following are the minimal requirements:\n* Subscription built-in roles;`Contributor`and`User Access Administator`.\n* Microsoft Entra ID App registration admin role;`Cloud Application Administrator`.\n* Microsoft Graph API permission;`Application.ReadWrite.All`.\n\nFurther details can be found under [Jenkins X Azure Module Prequisites](https://github.com/jenkins-x/terraform-azurerm-jx#prerequisites)\n### Create service principal with subscription roles\nThe first step is to create a new service principal (APP_NAME) and to assign it the subscription built-in roles `Contributor` and `User Access Administrator`.\n> \ud83d\udca1 If you are using a local terminal, prior to executing the following commands, in the local terminal log into Azure (`az login`) with an ID that has the necessary privileges (i.e. Owner). \n> Always perform all commands in the same local terminal session to preserve dependent variables that are created.\n>\n> If you are using Bash in Azure cloud shell, there is no need to login (`az account show`). Once again take caution not to lose the bash session in the portal web page.\n```bash\nread -p \"Service Principal (i.e. mySvcPr) : \" APP_NAME\n```\nAfter setting the APP_NAME variable (i.e. mySvcPr) copy and paste the following to create the service principal.\n```bash\nSUBSCRIPTION_ID=$(az account show --query id --output tsv)\nSVCP=$(az ad sp create-for-rbac --role Contributor --name $APP_NAME --scopes /subscriptions/$SUBSCRIPTION_ID --output json --only-show-errors)\nAPP_ID=$(echo $SVCP | jq -r .appId)\nOBJ_ID=$(az ad sp list --filter \"appId eq '$APP_ID'\" --output json | jq '.[0].id' -r)\nPASS_ID=$(echo $SVCP | jq -r .password)\nTENANT_ID=$(echo $SVCP | jq -r .tenant)\naz role assignment create --role \"User Access Administrator\" --assignee-object-id $OBJ_ID --assignee-principal-type \"ServicePrincipal\" --scope /subscriptions/$SUBSCRIPTION_ID --only-show-errors\n```\nUse the following command to check the service principal subscription role settings.\n``` bash \naz role assignment list --assignee $APP_ID --query [].roleDefinitionName --output json --only-show-errors\n```\nYou should see the following:\n```\n[\n  \"User Access Administrator\",\n  \"Contributor\"\n]\n```\n### Assign new service principal with owner (optional)\nThe second step will be to assign the new service principal an owner. This step is optional but is recommended for ease in maintenance. At this pointtThe new service principal will already have a `Cloud Application Administrator` role assigned.\n```bash\n# Assign the current login as owner of the new service principal\naz ad app owner add --id $APP_ID --owner-object-id $(az ad signed-in-user show --query id --output tsv)\n```\n### Assign service principal graph API permission\nThe final step will be to assign the new service principal the Microsoft Graph API permissions.\n```bash\n# Microsoft Graph API Id (03)\nAPI_ID=\"00000003-0000-0000-c000-000000000000\"\n# Extract application_readwrite_add ID\nAPPLICATION_READWRITE_ALL_ID=$(az ad sp show --id $API_ID --query \"appRoles[?value=='Application.ReadWrite.All'].id\" --output tsv)\n# Add API permission to SP\naz ad app permission add \\\n  --id $APP_ID \\\n  --api $API_ID \\\n  --api-permissions \\\n      $APPLICATION_READWRITE_ALL_ID=Role\n# Grant API permission to SP\naz ad app permission grant \\\n  --id $APP_ID \\\n  --api $API_ID \\\n  --scope /subscriptions/$SUBSCRIPTION_ID\n# Granting consent for API permission\nAPP_OBJECT_ID=$(az ad sp show --id $APP_ID --query \"id\" --output tsv)\nAPI_OBJECT_ID=$(az ad sp show --id $API_ID --query \"id\" --output tsv)\naz rest \\\n  --method POST \\\n  --uri \"https://graph.microsoft.com/v1.0/servicePrincipals/$APP_OBJECT_ID/appRoleAssignments\" \\\n  --headers '{\"Content-Type\": \"application/json\"}' \\\n  --body \"{\\\"principalId\\\": \\\"$APP_OBJECT_ID\\\", \\\"resourceId\\\": \\\"$API_OBJECT_ID\\\", \\\"appRoleId\\\": \\\"$APPLICATION_READWRITE_ALL_ID\\\"}\" \\\n  --only-show-errors\n```\nUse the following command to check the service principal API settings.\n``` bash\naz ad app permission list --id $APP_ID --only-show-errors --output table\n```\nYou should see something like the following:\n```\nResourceAppId\n------------------------------------\n00000003-0000-0000-c000-000000000000\n```\n\n### Prepare to run Terraform\nOnce the service prinicpal is created and assigned the appropriate roles and permissions, it can now be used by Terraform to execute the Jenkins X Azure module. In order for Terraform to use the service principal credentials you need to [specify service principal credentials in environment variables](https://docs.microsoft.com/en-us/azure/developer/terraform/get-started-cloud-shell-bash)\n```\nexport ARM_CLIENT_ID=${APP_ID}\nexport ARM_CLIENT_SECRET=${PASS_ID}\nexport ARM_TENANT_ID=${TENANT_ID}\nexport ARM_SUBSCRIPTION_ID=${SUBSCRIPTION_ID}\n```\nThe following Azure CLI commands will display the role assignment list, app permissions list , and a portal URL for the service principal. It will also export the necessary ARM_ variables required for Terraform credentials.\n``` bash \necho $APP_NAME\necho $SVCP\naz role assignment list --assignee $APP_ID --query [].roleDefinitionName --output json --only-show-errors\naz ad app permission list --id $APP_ID --only-show-errors\necho \"Check Service Principal at:\"\necho \" https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/$APP_ID\"\neval export ARM_CLIENT_ID=$APP_ID\neval export ARM_CLIENT_SECRET=$PASS_ID\neval export ARM_TENANT_ID=$TENANT_ID\neval export ARM_SUBSCRIPTION_ID=$SUBSCRIPTION_ID\nenv | grep ARM_\n```\nAt this point you should now be ready to perform the Terraform steps to build the environment using the service principal credentials. You should keep the Terraform environment variables (ARM_) values in a safe place until the service principal resource is deleted. You can find more details on managing the service principal by viewing [Create an Azure service principal with the Azure CLI](https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli#reset-credentials).\n### Clean up\nClean up is straightforward. Once you delete the service principal all roles and permissions are also deleted as well.  The following Azure CLI commands will remove the roles and service principal.\n``` bash\naz ad sp delete --id $APP_ID --only-show-errors\n```\nIn the above command you also can use `$ARM_CLIENT_ID` which is the same value as `$APP_ID` to delete the resource.\n```\n",
            "content/en/v3/admin/platforms/eks/_index.md": "---\ntitle: Amazon\nlinktitle: Amazon\ntype: docs\ndescription: Setup Jenkins X on EKS on AWS\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 20\naliases:\n  - /v3/admin/platform/eks\n---\n\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\n- Ensure you are logged into GitHub else you will get a 404 error when clicking the links below\n- The quickstart guides are for users who want to get up and running quickly with Jenkins X.\n  Refer to the [eks-jx terraform module readme](https://github.com/jenkins-x/terraform-aws-eks-jx/blob/master/README.md) for all the inputs that can be customized.\n- Always use the latest module version for the eks-jx module.\n  The list of versions can be found [here.](https://github.com/jenkins-x/terraform-aws-eks-jx/releases)\n- Do not specify the last digit of the kubernetes version, so if you want to provision an EKS cluster with kubernetes `1.30.1`, just specify `1.30`.\n\n---\n\n### EKS + Terraform + Vault/ASM + Github\n\nThis is our current recommended quickstart for EKS:\n\nNote: remember to create the Git repositories below in your Git Organization rather than your personal Git account else this will lead to issues with ChatOps and automated registering of webhooks.\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-terraform-eks/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create Git Repository for <b>Infrastructure</b></a> based on the [jx3-gitops-repositories/jx3-terraform-eks](https://github.com/jx3-gitops-repositories/jx3-terraform-eks)\n\n  - if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n- Choose the cluster git repository based on the secrets backend\n\n  - <a href=\"https://github.com/jx3-gitops-repositories/jx3-eks-vault/generate\"  target=\"github-cluster\" class=\"btn bg-primary text-light\">Create Git Repository for Jenkins X <b>Cluster</b></a> based on the [jx3-gitops-repositories/jx3-eks-vault](https://github.com/jx3-gitops-repositories/jx3-eks-vault)\n\n  - <a href=\"https://github.com/jx3-gitops-repositories/jx3-eks-asm/generate\"  target=\"github-cluster\" class=\"btn bg-primary text-light\">Create Git Repository for Jenkins X <b>Cluster</b></a> based on the [jx3-gitops-repositories/jx3-eks-asm](https://github.com/jx3-gitops-repositories/jx3-eks-asm)\n\n- Install <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli#install-terraform\">terraform CLI</a>\n\n- Install <a href=\"https://jenkins-x.io/v3/admin/setup/jx3/\">jx CLI </a>\n\n- For AWS SSO ensure you have installed AWSCLI version 2 - [see here](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html). You must then configure it to use Named Profiles - [see here](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure-profiles.html)\n\n- You should use a dedicated git user account for the Bot user. Jenkins X will use this user to interact with git. After you are logged in with the Bot user account you may use the following link <a href=\"https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,admin:repo_hook,write:packages,read:packages,write:discussion,workflow\" target=\"github-token\" class=\"btn bg-primary text-light\">Create Git Token for the Bot user </a>\n\n- Override the input defaults in the Infrastructure repository. (E.g, edit variables.tf, set TF*VAR* environment variables, or pass the values on the terraform command line.)\n\n  - `cluster_version`: Kubernetes version for the EKS cluster. (should be 1.20 at the moment)\n  - `region`: AWS region code for the AWS region to create the cluster in.\n  - `jx_git_url`: URL of the Cluster repository.\n  - `jx_bot_username`: The username of the git bot user\n\n  If you want to use AWS secrets manager instead of vault you should also set the input `use_asm` to true.\n\n- commit and push any changes to your Infrastructure git repository:\n\n```bash\n      git commit -a -m \"fix: configure cluster repository and project\"\n      git push\n```\n\n- Define an environment variable to pass the bot token into Terraform:\n\n```bash\n      export TF_VAR_jx_bot_token=my-bot-token\n```\n\n- Now, initialise, plan and apply Terraform:\n\n```bash\n      terraform init\n      terraform plan\n      terraform apply\n```\n- Connect to the cluster using the command shown in the field `connect` of the output of `terraform apply`. To show \n  it again run `terraform output`.\n\n- Tail the Jenkins X installation logs\n\n```bash\n  jx admin log\n```\n\n- Once finished you can now move into the Jenkins X Developer namespace\n\n```bash\n  jx ns jx\n```\n\n- and create or import your applications\n\n- <a href=\"https://jenkins-x.io/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n\nFor more details on how to install Jenkins X on AWS EKS see [Github repository for Jenkins X Terraform module for EKS](https://github.com/jx3-gitops-repositories/jx3-terraform-eks#prerequisites)\n",
            "content/en/v3/admin/platforms/google/_index.md": "---\ntitle: Google\nlinktitle: Google\ntype: docs\ndescription: Setup Jenkins X on Google Cloud with GKE\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 40\naliases:\n  - /v3/admin/platforms/gke\n  - /v3/admin/platform/gke\n---\n\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\n---\n\n### GKE + Terraform\n\nThis is our current recommended quickstart for Google Cloud Platform:\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-terraform-gke/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create Git Repository</a>\n\n  - if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n- Ensure **Owner** is the Git Organisation that will hold the repositories used for Jenkins X.\n\n- `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/master/README.md\"\n    target=\"github\" class=\"btn bg-primary text-light\" \n    title=\"use your new git repository to create your cloud infrastructure and install Jenkins X\">\n  Create your infrastructure\n  </a>\n\n- <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n\nThe following demo walks through how to get started with Jenkins X 3 on GKE + Terraform\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/RYgKvRpjkoY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
            "content/en/v3/admin/platforms/google/cloud_dns.md": "---\ntitle: Configure Google Cloud DNS to manage my domain\nlinktitle: Cloud DNS\ntype: docs\nweight: 100\naliases:\n  - /v3/guides/infra/google_cloud_dns/\n---\n\nThis guide will describe how to purchase a domain and configure GCP to manage it with [Cloud DNS](https://cloud.google.com/dns)\n\n\nSetup below is a cut down version of the original docs located [here](https://github.com/kubernetes-sigs/external-dns/blob/master/docs/tutorials/gke.md#gke-node-scopes)\n\nGo to [Google Domains](https://domains.google.com/registrar) and purchase a domain.\n\nCreate a DNS zone which will contain the managed DNS records.\n\n```bash\ngcloud dns managed-zones create \"foo-io\" \\\n    --dns-name \"foo.io.\" \\\n    --description \"Automatically managed zone by kubernetes.io/external-dns\" \\\n    --project foo\n```\n\nMake a note of the nameservers that were assigned to your new zone.\n```bash\ngcloud dns record-sets list \\\n    --zone \"foo-io\" \\\n    --name \"foo.io.\" \\\n    --type NS \\\n    --project foo\n```\n\nIn this case it's ns-cloud-{e1-e4}.googledomains.com. but your's could slightly differ, e.g. {a1-a4}, {b1-b4} etc.\n\nUpdate google domains DNS settings and update the nameservers with the list of nameservers from the above step making sure to remove the last dot.\ne.g. in google domains enter the nameservers without the \".\" suffix\n`ns-cloud-e1.googledomains.com`\nnot\n`ns-cloud-e1.googledomains.com.`\n\n![Edit Nameservers GCP](/images/v3/google_domains.png)",
            "content/en/v3/admin/platforms/google/svc_acct.md": "---\ntitle: Configure Google Service Account\nlinktitle: GCP Service Account\ntype: docs\nweight: 100\naliases:\n---\n\nThis doc will demonstrate how to set up a Google service account that can be used by Terraform to execute [Jenkins X GKE Module](https://github.com/jenkins-x/terraform-google-jx#jenkins-x-gke-module)\n\n> \ud83d\udca1 This doc has been designed to assist in performing the demonstration through copying and pasting each block of code into a shell terminal.<br>\n>\n> To execute the commands listed in your local bash shell will require the [Google gcloud tool and Cloud SDK](https://cloud.google.com/sdk/gcloud/#the_and) and the [JQ command-line JSON processor](https://stedolan.github.io/jq/).<br>\n>\n> To execute the commands listed in [Google Cloud Shell](https://cloud.google.com/shell/) does not require any additiobnal software installed.\n\n### Service account privileges\nIn order to build your GKE environment with Terraform using a service account, the following are the service accounts minimal role requirements:\n* roles/artifactregistry.admin\n* roles/container.admin\n* roles/editor\n* roles/iam.serviceAccountAdmin\n* roles/iam.serviceAccountKeyAdmin\n* roles/resourcemanager.projectIamAdmin\n* roles/storage.admin\n> \ud83d\udca1  Existing service accounts (MY_GCP_SA) under your project (MYPROJECT) requiring `roles/artifactory.admin` use command:\n> `gcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/artifactregistry.admin`\n\nIf the service account needs to access a separate project to manage an apex domain then an additional role setting is required for the separate project.\n* roles/dns.admin\n\n### Create service account and assign roles\nThe first step is to create a new service account (APP_NAME) and to assign the roles.\n> \ud83d\udca1  If you are using a local terminal, prior to executing the following commands, in the local terminal log into GCP (`gcloud auth login`) with an ID that has the necessary privileges (i.e. Owner) and set the appropriate project (`gcloud config set project PROJECT_ID`). .\n> Always perform all commands in the same local terminal session to preserve dependent variables that are created.\n>\n> If you are using Google cloud shell, you should be logged into the GCP console with the necessary project selected (`MYPROJECT`) and the terminal window opened. Inside the terminal, run the `gcloud config list` to check the envrionment availability. \n\nFirst set an IAM name (required, minimum 6 characters  and MUST be all lowercase):\n```bash\nread -p \"IAM name (i.e. tftest ) : \" IAMNAME\n```\nWith an IAM Name defined, create the service account and assign the roles:\n``` bash\nMYPROJECT=`gcloud config get-value project`\nMY_GCP_SA=${IAMNAME}@${MYPROJECT}.iam.gserviceaccount.com\ngcloud iam service-accounts create ${IAMNAME} --description \"My SA\" --display-name \"${IAMNAME}\" --project ${MYPROJECT}\ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/artifactregistry.admin\ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/container.admin \ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/storage.admin \ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/editor \ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/resourcemanager.projectIamAdmin \ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/iam.serviceAccountAdmin \ngcloud projects add-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/iam.serviceAccountKeyAdmin \n```\nIf the environment uses external DNS and has the Apex domain records under a different project, assign to the service account `($MY_GCP_SA)` the necessary role to manage DNS under the Apex project `($APEXPROJECT)`. \n> \ud83d\udca1  If you are not using a separate Apex project, proceed to [CLI display commands](http://localhost:1313/v3/admin/platforms/google/svc_acct/#cli-display-commands).\n```bash\nread -p \"Apex Project (if none leave blank) : \" APEXPROJECT\n```\n``` bash\n[[ ! -z \"$APEXPROJECT\" ]] && gcloud projects add-iam-policy-binding ${APEXPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/dns.admin || echo \"No project\"\n```\n### CLI display commands\nTo display the roles assigned to the service account use the following commands;\n``` bash\ngcloud projects get-iam-policy ${MYPROJECT} --flatten=\"bindings[].members\" --format='table(bindings.role)' --filter=\"bindings.members:${MY_GCP_SA}\"\n[[ ! -z \"$APEXPROJECT\" ]] && gcloud projects get-iam-policy ${APEXPROJECT} --flatten=\"bindings[].members\"  --format='table(bindings.role)' --filter=\"bindings.members:${MY_GCP_SA}\"\n```\n \n### Create and assign service account key\nCreate the service account key into a json file and assign Google application credentials variable (GOOGLE_APPLICATION_CREDENTIALS) so that it can be used by Terraform.\n```bash\ngcloud iam service-accounts keys create ~/${IAMNAME}_key.${MYPROJECT}.json --iam-account ${MY_GCP_SA} --project ${MYPROJECT}\neval export GOOGLE_APPLICATION_CREDENTIALS=~/${IAMNAME}_key.${MYPROJECT}.json\nenv | grep GOOGLE_APPLICATION_CREDENTIALS\n```\n> \ud83d\udca1 If you want the CLI to use the service account credentials, which may be suitable for debugging, use the following `gloud auth` command, otherwise proceed to [Clean Up](http://localhost:1313/v3/admin/platforms/google/svc_acct/#clean-up) step.\n``` bash\ngcloud auth activate-service-account ${MY_GCP_SA} --key-file ~/${IAMNAME}_key.${MYPROJECT}.json --project ${MYPROJECT}\n```\n### Clean up\nThe following Google CLI commands will remove the roles and service account.\n``` bash\ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/artifactregistry.admin\ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/container.admin \ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/storage.admin \ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/editor \ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/resourcemanager.projectIamAdmin \ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/iam.serviceAccountAdmin \ngcloud projects remove-iam-policy-binding ${MYPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/iam.serviceAccountKeyAdmin \n[[ ! -z \"$APEXPROJECT\" ]] && gcloud projects remove-iam-policy-binding ${APEXPROJECT} --member serviceAccount:${MY_GCP_SA} --role roles/dns.admin \ngcloud iam service-accounts delete ${MY_GCP_SA} --project ${MYPROJECT}\n```\n",
            "content/en/v3/admin/platforms/k3s/_index.md": "---\ntitle: K3s\nlinktitle: K3s\ntype: docs\ndescription: Setup Jenkins X on a K3s cluster running locally\ndate: 2021-11-22\npublishdate: 2021-11-22\nlastmod: 2021-11-22\nweight: 50\naliases:\n  - /v3/admin/platform/k3s\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\nThis guide will walk you though how to setup Jenkins X on your laptop using [k3s](https://k3s.io/)\n\nIf you are on Mac OS, you can follow this [guide](https://docs.kalm.dev/install/install-local-k3s/) to set up k3s.\nYou do not need to install kalm for the rest of the tutorial.\n\n### Prerequisites\n\n#### K3s\n\nMake sure you have created a cluster using k3s.\n\nIf you dont have an existing k3s cluster, you can install one by running:\n\n```bash\ncurl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=v1.24 sh -s - --write-kubeconfig-mode 644\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/k3s-config\n# Set it also in the bashrc or zshrc file, or you can flatten both of these configs into a single file\nexport KUBECONFIG=~/.kube/config:~/.kube/k3s-config\n\n```\n\nTo verify that k3s has been installed successfully, and configured run:\n\n```bash\nkubectl get nodes\n```\n\n- You will need to open multiple terminals later, so setting these env variables in the bashrc or zshrc might help you\n\n```bash\nnano ~/.bashrc\n#go to the end of the file and paste the export command\nexport KUBECONFIG=~/.kube/config:~/.kube/k3s-config\n```\n\n**Optional**\n\n- If the above method didn't work, copy the configurations to the ~/.kube/config instead (if you don't have any other clusters, that should be fine)\n\n```bash\nsudo rm ~/.kube/k3s-config  #to make k3s uses ~/.kube/config\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\n```\n\n- If still got `permission denied`\n\n```bash\nsudo chmod 777 ~/.kube/config #warning: this maybe vulnerable to multiple users\n```\n\nThis value of the node will be used later during installation and configuring of Jenkins X.\n\nCheck [k3s install guide](https://rancher.com/docs/k3s/latest/en/installation/) for more installation options.\n\n#### Vault\n\nInstall vault cli.\nRefer to the [vault docs](https://www.vaultproject.io/docs/install) on how to install vault for your platform.\n\n##### Internal vault (Preferred)\n\n###### Helm\n\nFollow the [helm documentation](https://helm.sh/docs/intro/install/) to install the helm binary.\nOnce helm is installed, proceed to the next steps.\n\nTo install vault inside the newly created k3s cluster, you need to install the vault operator and vault instance chart.\n\n```bash\nhelm repo add jxgh https://jenkins-x-charts.github.io/repo\nhelm repo update\nhelm upgrade --install --wait vault-operator oci://ghcr.io/bank-vaults/helm-charts/vault-operator --version 1.22.3 -n jx-vault \nhelm install vault-instance jx3/vault-instance --version 1.0.28 -n jx-vault \n```\n\nWait for the vault pods to be in running status, before proceeding to the next steps.\n\n```bash\nkubectl get pods -n jx-vault\n```\n\nOutput should be similar to\n\n```bash\nNAME                                READY   STATUS    RESTARTS   AGE\nvault-operator-d7c697f95-55dfj      1/1     Running   0          4m22s\nvault-0                             3/3     Running   0          4m10s\nvault-configurer-689758f67d-8npcf   1/1     Running   0          3m38s\n```\n\n##### External vault\n\n###### Docker\n\nYou need to install [docker](https://docs.docker.com/engine/install/) and [manage it as a non root user](https://docs.docker.com/engine/install/linux-postinstall/)\n\nMake sure you have vault running in a docker container with kubernetes auth enabled.\n\n```bash\ndocker run --name jx-k3s-vault -d --cap-add=IPC_LOCK -e 'VAULT_DEV_ROOT_TOKEN_ID=myroot' -e 'VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200' --net host vault:latest\n```\n\nTo verify if vault started properly use `docker logs jx-k3s-vault`.\n\nNext enable kubernetes auth in vault.\n\n```bash\nexport VAULT_ADDR='http://0.0.0.0:8200'\n# you may want to set this at the end of the ~/.bashrc file or ~/.zshrc either to be accesible for all terminals you open like the way we did above\nvault auth enable kubernetes\n```\n\nNote: If you get the error `Error enabling kubernetes auth: Post \"https://127.0.0.1:8200/v1/sys/auth/kubernetes\": http: server gave HTTP response to HTTPS client`, try the command `vault login myroot`.\n\n#### Github\n\n- Create a git bot user (different from your own personal user) e.g. https://github.com/join and generate a a personal access token, this will be used by Jenkins X to interact with git repositories. e.g. https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,write:repo_hook,delete_repo,admin:repo_hook,write:packages\n- This bot user needs to have write permission to write to any git repository used by Jenkins X. This can be done by adding the bot user to the git organisation level or individual repositories as a collaborator Add the new bot user to your Git Organisation, for now give it Owner permissions, we will reduce this to member permissions soon.\n\n#### Jenkins-X\n\n- Make sure you have installed [jx 3.x binary](https://jenkins-x.io/v3/admin/setup/jx3/) and put it on your `$PATH` as the `jx admin operator` will be used\n\n### Jenkins X v3 installation\n\n- Generate a cluster git repository from the [jx3-k3s-vault](https://github.com/jx3-gitops-repositories/jx3-k3s-vault) template, by clicking [here](https://github.com/jx3-gitops-repositories/jx3-k3s-vault/generate)\n- Clone the generated repository and cd into the repository folder\n- Set up ingress and webhook\n\n  - Get the external IP of the traefik service (loadbalancer)\n\n  ```bash\n  kubectl get svc -A | grep LoadBalancer\n  kube-system   traefik          LoadBalancer   <cluster-ip>    <external-ip>    80:31123/TCP,443:31783/TCP   40m\n  ```\n\n  - Edit the jx-requirements.yaml file by editing the ingress domain:\n\n  ```bash\n  jx gitops requirements edit --domain <external-ip>.nip.io\n  ```\n\n- set up Ngrok\n\n  - Refer to [these docs](/v3/develop/faq/ngrok/) to set up ngrok\n\n  - Once this tunnel is open, paste the ngrok url (without http) which is forwarding the traffic to port 8080 in the hook field in the helmfiles/jx/jxboot-helmfile-resources-values.yaml file in the cluster git repository.\n  - commit and push the changes.\n\n  ```bash\n  git add .\n  git commit -m \"chore: initial commit\"\n  git push origin main\n  ```\n\n- Make these changes only when using external vault\n\n  - Add the value of the vault url in the `jx-requirements.yaml` file.\n\n  ```bash\n  vault:\n    url: http://<replace with k3s node name>:8200\n  ```\n\n  The jx-requirements file should look like this for external vault:\n\n  ```bash\n  secretStorage: vault\n  vault:\n    url: http://<replace with k3s node name>:8200\n  ```\n\n  - Commit and push your changes:\n\n  ```bash\n  git add .\n  git commit -m \"fix: set vault url\"\n  git push origin main\n  ```\n\n- Set the GIT_USERNAME (bot username) and GIT_TOKEN (bot personal access token) env variable and run:\n\n  - Internal vault\n\n  ```bash\n  jx admin operator --username $GIT_USERNAME --token $GIT_TOKEN --url <url of the cluster git repo>\n  ```\n\n  - External vault\n\n  ```bash\n  jx admin operator --username $GIT_USERNAME --token $GIT_TOKEN --url <url of the cluster git repo> --set \"jxBootJobEnvVarSecrets.EXTERNAL_VAULT=\\\"true\\\"\" --set \"jxBootJobEnvVarSecrets.VAULT_ADDR=http://<replace with k3s node name>:8200\"\n  ```\n\n  > Note (Only for external vault): The first job will fail as it cannot authenticate against vault.\n  > The errors will be of the form `error: failed to populate secrets: failed to create a secret manager for ExternalSecret`.\n  > Once the secret-infra namespace has been created, we can configure vault.\n  > If you get an error connecting to the cluster, try running `kubectl config view --raw >~/.kube/config` as well as checking the permissions/owner of `~/.kube/config`\n\n### Vault configuration (Only for external vault)\n\nInstall [jq](https://stedolan.github.io/jq/download/) before running these commands.\n\nRemember to run the following commands in a terminal where you have set the value of `VAULT_ADDR`\n\n- Create a vault config\n\n```bash\nexport VAULT_ADDR='http://0.0.0.0:8200'\nexport VAULT_HELM_SECRET_NAME=$(kubectl -n secret-infra get secrets --output=json | jq -r '.items[].metadata | select(.name|startswith(\"kubernetes-external-secrets-token-\")).name')\nexport TOKEN_REVIEW_JWT=$(kubectl -n secret-infra get secret $VAULT_HELM_SECRET_NAME --output='go-template={{ .data.token }}' | base64 --decode)\nexport KUBE_CA_CERT=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.certificate-authority-data}' | base64 --decode)\nexport KUBE_HOST=$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')\n\n# you may want to set this at the end of the ~/.bashrc file or ~/.zshrc either to be accesible for all terminals you open like the way we did above\n\nvault write auth/kubernetes/config \\\n        token_reviewer_jwt=\"$TOKEN_REVIEW_JWT\" \\\n        kubernetes_host=\"$KUBE_HOST\" \\\n        kubernetes_ca_cert=\"$KUBE_CA_CERT\" \\\n        disable_iss_validation=true\n```\n\n- Create a vault role:\n\n```bash\nvault write /auth/kubernetes/role/jx-vault bound_service_account_names='*' bound_service_account_namespaces=secret-infra token_policies=jx-policy token_no_default_policy=true disable_iss_validation=true\n```\n\n- Create a policy attached to vault role:\n\n```bash\nvault policy write jx-policy - <<EOF\npath \"secret/*\" {\n  capabilities = [\"sudo\", \"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\nEOF\n```\n\nOnce vault is configured, pull the changes commited to the cluster git repository by the bootjob, and push a dummy job\n\n```bash\ngit pull\n# Make a dummy change (change Readme file for example)\ngit add .\ngit commit -m \"chore: dummy commit 1\"\ngit push origin main\n```\n\ntail the logs of `jx-git-operator` pod in the `jx-git-operator` namespace.\n\n```bash\nnot creating a Job in namespace jx-git-operator for repo jx-boot sha XXXXXX yet as there is an active job jx-boot-XXXXXXX\n```\n\nKill that job.\n\n```bash\nkubectl delete job jx-boot-97dbb72f-4e4e-4b0e-8eb2-8908997b19f7 -n jx-git-operator\n```\n\nOnce it's killed a new boot job will be triggered.\nThis job will create the secrets in vault which will be used by external secrets to create kubernetes secrets.\n\n- To verify the job succeeded, run `jx admin log`\n- To verfiy the secrets were created, run `kubectl get es -A` and `jx secret verify`\n- If this didn't work try and repeat the steps but commit your dummy changes through github repository directly other than the `git push origin main` command\n\n### Port forwarding for webhooks\n\nIn another terminal run the following command to enable webhooks via ngrok\n\n```bash\njx ns jx\nkubectl port-forward svc/hook 8080:80\n```\n\n- Once the bootjob has succeeded, you should see:\n\n```bash\nHTTP Requests\n-------------\n\nPOST /hook                     200 OK\n```\n\n### Next steps\n\n- <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n",
            "content/en/v3/admin/platforms/minikube/_index.md": "---\ntitle: Minikube\nlinktitle: Minikube\ntype: docs\ndescription: Setup Jenkins X on your laptop\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 100\naliases:\n  - /v3/admin/platform/minikube\n---\n\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\nThis guide will walk you though how to setup Jenkins X on your laptop using [minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/)\n\n## Prerequisites\n\n- [Download and install the jx 3.x binary](/v3/guides/jx3/)\n\n- [Install minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/)\n\n- [Install virtualbox](https://www.virtualbox.org/wiki/Downloads)\n\nNOTE:- User of windows 10 home (Hyper-V not supported). To install Minikube consider Docker as driver(docker should be pre-installed)\ninstead of virtualBox driver. Use command \"minikube start --driver=docker\".\n\n- If you have previously used `minikube` please delete the current cluster:\n\n```bash\nminikube delete\n```\n\n- You need to create a `minikube` cluster via the following command:\n\n```bash\nminikube start --cpus 4 --memory 6048 --disk-size=100g --addons=ingress --kubernetes-version=1.24\n```\n\n## Setup\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-minikube/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create the cluster Git Repository</a> based on the [jx3-gitops-repositories/jx3-minikube template](https://github.com/jx3-gitops-repositories/jx3-minikube/generate)\n\n  - if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n- `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n- configure the `ingress.domain` to point to your `$(minikube ip).nip.io`:\n\n```bash\nexport DOMAIN=\"$(minikube ip).nip.io\"\njx gitops requirements edit --domain $DOMAIN\n```\n\n- the `ingress.domain` in `jx-requirements.yml` should now be configured to the value of `$DOMAIN`\n\n- to enable webhooks you need to [install and setup ngrok](https://ngrok.com/)\n\n- setup a webhook tunnel to your laptop:\n\n```bash\nngrok http 8080\n```\n\n- copy your personal ngrok domain name of the form `abcdef1234.ngrok.io` into the `charts/jenkins-x/jxboot-helmfile-resources/values.yaml` file in the `ingress.customHosts.hosts` file so that your file looks like this...\n\n```yaml\ningress:\n  customHosts:\n    hook: \"abcdef1234.ngrok.io\"\n```\n\n- git add, commit and push your changes:\n\n```bash\ngit add *\ngit commit -a -m \"fix: configurations for local minikube\"\ngit push origin main\n```\n\n- <a href=\"/v3/guides/operator/\" class=\"btn bg-primary text-light\">Install the Git Operator</a>\n\n- switch to the `jx` namespace\n\n```bash\njx ns jx\n```\n\n- once Jenkins X is installed run the following command to enable webhooks via `ngrok`\n\n```bash\nkubectl port-forward svc/hook 8080:80\n```\n\n- <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n\n\n## Restarting \nIf you quit minikube, reboot and come back to start working on it again, you will have to complete the whole procedure under #setup to get back to speed.\nThe minikube ip is normally the same on each invocation, but you should verify that as well.\n",
            "content/en/v3/admin/platforms/on-premises/_index.md": "---\ntitle: On-Premises\nlinktitle: On-Premises\ntype: docs\ndescription: Setup Jenkins X on vanilla Kubernetes\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 150\naliases:\n  - /v3/admin/platform/on-premise\n  - /v3/admin/platforms/on-premise\n---\n\n---\n\n{{< k8s-versions >}}\n\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\n---\n\n## On-Premises Kubernetes\n\nIf you are using kubernetes we highly recommend you use one of the [managed cloud providers](/v3/#administration) as this comes with lots of additional features like:\n\n- container registries and bucket storage\n- IAM and workload identity (e.g. so kubernetes Service Accounts can be assigned roles to be able to read/write to certain buckets or container registries)\n\nHowever sometimes you need to run kubernetes on your premises. Longer term we hope the cloud providers can run their managed kubernetes and associated infrastructure on your premises too so you get to reuse the same storage + IAM anywhere. But until then, this guide is intended to get you started installing Jenkins X on a vanilla kubernetes cluster on-premises.\n\n### Prerequisites\n\nThe following are the prerequisites of your on-premises kubernetes cluster:\n\n- [Download and install the jx 3.x binary](/v3/guides/jx3/)\n\n#### Kubernetes cluster\n\nWe obviously need a working kubernetes cluster. There are many approaches to [setting up on-premises clusters](https://kubernetes.io/docs/setup/production-environment/tools/) obviously the easiest approach is to use the [cloud](/v3/#administration).\n\n#### kubectl access\n\nYou need to be able to connect to your kubernetes cluster via [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) so that you can run commands like:\n\n```bash\nkubectl get ns\nkubectl get node\n```\n\nTo view the namespaces and nodes respectively.\n\n#### Ingress\n\nTo use Jenkins X we need ingress to work. This means being able to create a kubernetes `Ingress` resource with a domain name which can be resolved outside of kubernetes to network into kubernetes services.\n\nJenkins X installs `nginx` which has a `LoadBalancer` kubernetes `Service` to implement ingress. But the underlying kubernetes platform needs to implement the load balancing network and infrastructure. This comes out of the box on all public clouds.\n\nWith an on-premises kubernetes cluster you need to install something like [MetalLB](https://metallb.universe.tf/)\n\nIf you are on bare metal you could try [these instructions](https://007ba7.us/howto/metallb/)\n\n#### Storage\n\nWe need your kubernetes cluster to have a default [storage class](https://kubernetes.io/docs/concepts/storage/storage-classes/) so that `PersistentVolumeClaim` resources in helm charts get resolved to `PersistentVolume` resources so that persistent disks can be used.\n\nYou may find [these instructions useful](https://007ba7.us/howto/nfs-storage/)\n\n### Getting Started\n\nThis is our current recommended quickstart for on-premises kubernetes:\n\n- <a href=\"https://github.com/jx3-gitops-repositories/jx3-kubernetes/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create the cluster Git Repository</a> based on the [jx3-gitops-repositories/jx3-kubernetes](https://github.com/jx3-gitops-repositories/jx3-kubernetes/generate) template\n\n  - if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n- `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n- find out what your ingress domain is for your cluster then modify the `jx-requirements.yml` file and modify the `ingress.domain` section...\n\n```yaml\ncluster:\n---\ningress:\n  domain: mydomain.com\n```\n\n- verify your cluster does not already have an [nginx](https://www.nginx.com/) installation. If it does then please remove the `nginx` line from your `helmfile.yaml` file and remove the `helmfiles/nginx` files. If you are using a custom nginx installation then you will need to figure out your domain by hand and won't be able to let Jenkins X detect the load balancer IP from its included nginx installation.\n\n- git add, commit and push your changes:\n\n```bash\ngit add *\ngit commit -a -m \"fix: added domain\"\ngit push origin main\n```\n\n- ensure you are connected to your cluster so you can run the following [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) commands\n\n```bash\nkubectl get ns\nkubectl get node\n```\n\n- <a href=\"/v3/guides/operator/\" \n    target=\"github\" class=\"btn bg-primary text-light\" \n    title=\"install the git operator to setup Jenkins X in your cluster\">\n  Install the git operator\n  </a> from inside a git clone of the git repository you created above.\n\n- switch to the `jx` namespace\n\n```bash\njx ns jx\n```\n\n- <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n",
            "content/en/v3/admin/platforms/on-premises/vault.md": "---\ntitle: Vault\nlinktitle: Vault\ntype: docs\ndescription: How to use an on-premises kubernetes cluster with vault\nweight: 100\naliases:\n  - /v3/admin/platforms/on-premise/vault/\n---\n\n**NOTE** that in the following instructions it is left to the user to manage, backup and restore the vault installation once it has been installed. \n\nFor production workloads [we recommend you use a cloud provider secret store](/v3/devops/patterns/prefer_cloud_over_kube/) or [Vault as a service](https://www.hashicorp.com/resources/running-vault-as-a-service-on-hashicorp-cloud-platform). Managing on-premises vault instances is undifferentiated heavy lifting that should be outsourced to a cloud provider if you can. \n\n### Prerequisites\n\nThe prerequisites are the [same as regular on-premises kubernetes](/v3/admin/platforms/on-premises/#prerequisites) around having a kubernetes cluster with ingress and storage\n\nThe difference is for vault:\n\n*  <a href=\"https://github.com/jx3-gitops-repositories/jx3-kubernetes-vault/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create the cluster Git Repository</a> based on the [jx3-gitops-repositories/jx3-kubernetes-vault](https://github.com/jx3-gitops-repositories/jx3-kubernetes-vault/generate) template\n\n    * if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n\n* make sure you have a recent [helmfile](https://github.com/roboll/helmfile) binary installed on your `$PATH`\n  \n* setup the Vault instance in your cluster. From inside a git clone of the git repository you have just created above run the following:\n\n```bash \ncd infra\nhelmfile sync\nsleep 20\njx secret vault port-forward&\njx secret vault wait\n```\n\n* if that succeeds you should have a vault instance running in the `jx-vault` namespace\n\n* find out what your ingress domain is for your cluster then modify the `jx-requirements.yml` file and modify the `ingress.domain` section...\n\n```yaml\ncluster:\n...\ningress:\n  domain: mydomain.com\n...\n```\n\n* verify your cluster does not already have an [nginx](https://www.nginx.com/) installation. If it does then please remove the `nginx` line from your `helmfile.yaml` file and remove the `helmfiles/nginx` files. If you are using a custom nginx installation then you will need to figure out your domain by hand and won't be able to let Jenkins X detect the load balancer IP from its included nginx installation.\n\n* git add, commit and push your changes:\n\n```bash\ngit add *\ngit commit -a -m \"fix: added domain\"\ngit push origin master\n```\n\n* ensure you are connected to your cluster so you can run the following [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) commands \n\n```bash \nkubectl get ns\nkubectl get node      \n```        \n\n*  <a href=\"/v3/guides/operator/\" \n    target=\"github\" class=\"btn bg-primary text-light\" \n    title=\"install the git operator to setup Jenkins X in your cluster\">\n    Install the git operator\n  </a> from inside a git clone of the git repository you created above.\n\n* switch to the `jx` namespace\n\n```bash    \njx ns jx\n```        \n\n*  <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a> \n\n                                                                   \n",
            "content/en/v3/admin/platforms/on-premises/webhooks.md": "---\ntitle: Enable WebHooks\nlinktitle: Enable WebHooks\ntype: docs\ndescription: How to enable webhooks if you are on-premises\nweight: 100\naliases:\n  - /v3/admin/platforms/on-premise/webhooks/\n---\n\nIf your cluster is not accessible on the internet and you can't open a firewall to allow services like GitHub to access your ingress then you will need to enable webhooks as follows:\n \n\n* [install and setup ngrok](https://ngrok.com/)\n\n* setup a webhook tunnel to your laptop find your hook host name:\n\n```bash\nkubectl get ing -n jx\n```\n\n* copy the hook host name into...\n \n```bash\nngrok http http://yourHookHost\n```\n                         \n* copy the following YAML to a file: **helmfiles/jx/jxboot-helmfile-resources-values.yaml**\n\n```yaml\ningress:\n  customHosts:\n    hook: \"abcdef1234.ngrok.io\"\n```\n\n  \n* modify the `hook:` line in your **helmfiles/jx/jxboot-helmfile-resources-values.yaml** file to use your personal ngrok domain name of the form `abcdef1234.ngrok.io`\n\n* add the **jxboot-helmfile-resources-values.yaml** file name to the `values:` entry in the `helmfiles/jx/helmfile.yaml` file for the `jxgh/jxboot-helmfile-resources` chart like this: (see the last line)\n\n```yaml \nreleases:\n- chart: jxgh/jxboot-helmfile-resources\n  name: jxboot-helmfile-resources\n  values:\n  - ../../versionStream/charts/jx3/jxboot-helmfile-resources/values.yaml.gotmpl\n  - jx-values.yaml\n  - jxboot-helmfile-resources-values.yaml\n...  \n```\n\n* now git commit the changed files....\n\n```bash \ngit add helmfiles \ngit commit -a -m \"fix: add ngrok webhook\"\ngit push\n\n\necho \"now lets watch the boot job complete\"\njx admin log -w\n```",
            "content/en/v3/admin/platforms/openshift/_index.md": "---\ntitle: OpenShift\nlinktitle:  OpenShift\ntype: docs\ndescription: Setup Jenkins X on an existing OpenShift cluster\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 200\naliases:\n  - /v3/admin/platform/openshift\n  - /docs/v3/getting-started/openshift\n  - /docs/v3/getting-started/openshift//\n---\n\nIf you don't have a cluster or want to try Openshift on your laptop then please try <a href=\"/v3/guides/infra/openshift-crc/\" target=\"github\" class=\"btn bg-primary text-light\">Install Jenkins X with OpenShift CodeReady Containers</a> \n \n\n---\n**NOTE**\n\nEnsure you are logged into GitHub else you will get a 404 error when clicking the links below\n\n---\n\n## Prerequisites\n\n* OpenShift cluster is installed and working correctly. You have also installed the `oc` binary on your `$PATH`\n\n\n```bash\noc login -u kubeadmin -p ...\n```\n\n* to allow Tekton to be installed on OpenShift you also need to run the [following commands](https://github.com/tektoncd/pipeline/blob/master/docs/install.md#installing-tekton-pipelines-on-openshift):\n\n\n```bash\noc new-project tekton-pipelines\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-controller\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-webhook\n```\n\n## Setup\n\n*  <a href=\"https://github.com/jx3-gitops-repositories/jx3-openshift/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create the cluster Git Repository</a> based on the [jx3-gitops-repositories/jx3-openshift](https://github.com/jx3-gitops-repositories/jx3-openshift/generate) template\n\n    * if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n* `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n* find out what your ingress domain is for your cluster then modify the `jx-requirements.yml` file and modify the `ingress.domain` section...\n\n```yaml\ncluster:\n...\ningress:\n  domain: mydomain.com\n...\n```\n\n* git add, commit and push your changes:\n\n```bash\ngit add *\ngit commit -a -m \"fix: added domain\"\ngit push origin main\n```\n\n* <a href=\"/v3/guides/operator/\" class=\"btn bg-primary text-light\">Install the Git Operator</a> \n\n* switch to the `jx` namespace\n\n```bash    \njx ns jx\n```        \n\n*  <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n\n\n## Enable WebHooks\n\nIf your cluster is not accessible on the internet and you can't open a firewall to allow services like GitHub to access your ingress then you will need to enable webhooks as follows:\n \n\n* [install and setup ngrok](https://ngrok.com/)\n\n* setup a webhook tunnel to your laptop find your hook host name:\n\n```bash\nkubectl get ing\n```\n\n* copy the hook host name into...\n \n```bash\nngrok http http://yourHookHost\n```\n\n* copy your personal ngrok domain name of the form `abcdef1234.ngrok.io` into the `charts/jenkins-x/jxboot-helmfile-resources/values.yaml` file in the `ingress.customHosts.hosts` file so that your file looks like this...\n\n```yaml\ningress:\n  customHosts:\n    hook: \"abcdef1234.ngrok.io\"\n...\n```\n\n",
            "content/en/v3/admin/platforms/openshift/openshift-crc.md": "---\ntitle: OpenShift CodeReady Containers\nlinktitle: OpenShift CRC\ntype: docs\ndescription: Use Jenkins X and OpenShift 4.x on your laptop\nweight: 70\naliases:\n  - /v3/admin/guides/infra/openshift-crc\n  - /v3/guides/infra/openshift-crc\n---\n\n\nThis guide will walk you though how to setup Jenkins X on your laptop using [OpenShift 4.x with CodeReady Containers](https://cloud.redhat.com/openshift/install/crc/installer-provisioned)\n\n## Prerequisites\n\n* [download OpenShift 4.x with CodeReady Containers](https://cloud.redhat.com/openshift/install/crc/installer-provisioned)\n\n\n* once you have the `crc` binary setup the amount of memory and disk:\n\n\n```bash\ncrc config set cpus 6\ncrc config set memory 11264\n\ncrc start\n```      \n\n* once your cluster boots up you can setup your environment...\n\n```bash\neval $(crc oc-env)\n```\n\nYou can copy/paste the `oc login -u kubeadmin` login command....\n\n```bash\noc login -u kubeadmin -p XXXX https://api.crc.testing:6443\n```\n\n* to allow Tekton to be installed on OpenShift you also need to run the [following commands](https://github.com/tektoncd/pipeline/blob/master/docs/install.md#installing-tekton-pipelines-on-openshift):\n\n\n```bash\noc new-project tekton-pipelines\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-controller\noc adm policy add-scc-to-user anyuid -z tekton-pipelines-webhook\n```\n\n## Setup\n\n*  <a href=\"https://github.com/jx3-gitops-repositories/jx3-openshift-crc/generate\" target=\"github\" class=\"btn bg-primary text-light\">Create the cluster Git Repository</a> based on the [jx3-gitops-repositories/jx3-openshift-crc](https://github.com/jx3-gitops-repositories/jx3-openshift-crc)                                                                                                                                       template\n    * if the above button does not work then please [Login to GitHub](https://github.com/login) first and then retry the button\n\n* `git clone` the new repository via **HTTPS** and `cd` into the git clone directory\n\n* to enable webhooks you need to [install and setup ngrok](https://ngrok.com/)\n\n* setup a webhook tunnel to your laptop:\n\n```bash\nngrok http http://hook-jx.apps-crc.testing\n```\n\n* copy your personal ngrok domain name of the form `abcdef1234.ngrok.io` into the `charts/jenkins-x/jxboot-helmfile-resources/values.yaml` file in the `ingress.customHosts.hosts` file so that your file looks like this...\n\n```yaml\ningress:\n  customHosts:\n    hook: \"abcdef1234.ngrok.io\"\n...\n```\n\n* git add, commit and push your changes:\n\n```bash\ngit add *\ngit commit -a -m \"fix: configure webhooks\"\ngit push origin master\n```\n\n* <a href=\"/v3/guides/operator/\" class=\"btn bg-primary text-light\">Install the Git Operator</a> \n\n* switch to the `jx` namespace\n\n```bash    \njx ns jx\n```        \n\n*  <a href=\"/v3/develop/create-project/\" class=\"btn bg-primary text-light\">Create or import projects</a>\n",
            "content/en/v3/admin/setup/_index.md": "---\ntitle: Getting started\nlinktitle: Getting started\ntype: docs\ndescription: Guides on getting your Jenkins X cluster installed\nweight: 300\naliases:\n  - /v3/guides/\n---\n\nMake sure you have got the [jx 3.x binary](/v3/guides/jx3/) before proceeding.\n",
            "content/en/v3/admin/setup/config/_index.md": "---\ntitle: Configuration\nlinktitle: Configuration\ntype: docs\ndescription: Changing your configuration\nweight: 80\naliases:\n  - /v3/guides/config\n  - /v3/admin/guides/config\n---\n\n            \nThere are a number of ways to change the configuration:\n\n* edit the [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) file in the dev cluster git repository to change most configuration.\n* [add new charts via helmfile](/v3/develop/apps/#adding-charts)\n* [add kubernetes resources](/v3/develop/apps/#adding-resources)\n* [customize charts](/v3/develop/apps/#customising-charts)\n\nHere are some more specific configuration guides:\n\n",
            "content/en/v3/admin/setup/config/git.md": "---\ntitle: Git\nlinktitle: Git\ntype: docs\ndescription: Changing your git provider\nweight: 80\n---\n\n\nJenkins X supports a number of different Git providers. You can specify the Git provider you wish to use and the organisation to use for the Git providers for each environment in your [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements)\n\n### GitHub\n\nThis is the default Git provider if you don't specify one.\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\n```\n\n### GitHub Enterprise\n\nThe configuration is similar to the above but you need to specify the URL of the `gitServer` (if it differs from https://github.com) and `gitKind: github`\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: ghe\n  gitServer: https://github.myserver.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\n```\n\n### Bitbucket Server\n\nFor this specify the URL of the `gitServer` and `gitKind: bitbucketserver`.\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketserver\n  gitName: bs\n  gitServer: https://bitbucket.myserver.com\nenvironments:\n- key: dev\n- key: staging\n- key: production\n```\n\n### Bitbucket Cloud\n\nFor this specify`gitKind: bitbucketcloud`. \n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketcloud\n  gitName: bc\nenvironments:\n- key: dev\n- key: staging\n- key: production\n```\n\n### GitLab\n\nFor this specify the URL of the `gitServer` and `gitKind: gitlab`.\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: gitlab\n  gitName: gl\n  gitServer: https://gitlab.com\nenvironments:\n- key: dev\n- key: staging\n- key: production\n```\n",
            "content/en/v3/admin/setup/config/repository.md": "---\ntitle: Repository\nlinktitle: Repository\ntype: docs\ndescription: Changing your artifact or chart repository\nweight: 200\n---\n\nJenkins X lets you configure different artifact repositories. We use artifact repositories to:\n\n* store artifacts from some kinds of build (e.g. Java builds tend to deploy jars, `pom.xml` files and tarballs)\n* act as a Maven proxy to cache maven dependencies when using java/maven builds\n* implement a chart repository for releasing helm charts\n\n### Nexus\n\nBy default if you don't make any explicit configuration then Jenkins X uses:\n\n* [Nexus](https://www.sonatype.com/nexus-repository-oss) as an artifact repository to store artifacts (e.g. Java jars, `pom.xml` files, tarballs or npm modules etc)\n* [ChartMuseum](https://chartmuseum.com/) as a repository of charts\n\nYou can explicitly configure nexus via the following `jx-requirements.yml` file:\n\n```yaml\nrepository: nexus\n```\n\n### Bucketrepo\n\nThe [bucketrepo](https://github.com/jenkins-x/bucketrepo) chart is a small footprint microservice that is an alternative to both [Nexus](https://www.sonatype.com/nexus-repository-oss) and [Chartmusem](https://chartmuseum.com/) which can:\n\n* act as a Maven proxy to cache maven dependencies when using java/maven builds\n* act as an artifact repository (e.g. to deploy maven artifacts)\n* implement a chart repository for releasing helm charts\n\nTo replace `nexus` by `bucketrepo` use the following `jx-requirements.yml` file:\n\n```yaml\nrepository: bucketrepo\n```\nThen replace the nexus chart in `helmfiles/jx/helmfile.yaml` by:\n```yaml\n- chart: jenkins-x/bucketrepo\n  name: bucketrepo\n```\n\nIf you also want to replace `chartmuseum` by bucketrepo, change `jx-requirements.yml` with:\n```yaml\napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  cluster:\n    chartRepository: http://bucketrepo.jx.svc.cluster.local/bucketrepo/charts\n```\nAnother alternative for the helm chart repository is to use Github gh-pages, as explained [here](/v3/develop/faq/config/registries/#how-do-i-switch-to-github-pages-for-charts). Note that in that case and if you don't have any maven artifact, you don't need bucketrepo.\n\nBy default the local file system in the bucket repo is used to store artifacts.\n\nTo enable cloud storage for artifacts in `bucketrepo` you need to enable the `storage.repository` configuration in `jx-requirements.yml`, in which case a cloud bucket is used instead. See the [storage section for more details](/v3/admin/setup/config/storage).\n\n### None\n\nIf you want to disable the artifact repository (nexus) but still use ChartMuseum for charts you can use the following:\n\n```yaml\nrepository: none\n```\n\nNote that without using an artifact repository you will not be able to deploy Maven artifacts; though [ChartMuseum](https://chartmuseum.com/) will still be used as a repository of charts\n\n\n## Maven Repository\n\nIf you are using Nexus or Bucketrepo things should just work out of the box. \n          \nFor other solutions try the following:\n\n### GitHub\n\nIf you want to use github packages to publish maven artifacts use the following in your `jx-requirements.yml`\n\n```yaml\nrepository: github\nrepositories:\n  maven:\n    releaseUrl: https://maven.pkg.github.com/myowner/myrepo/\n\n    # optional if different to the above\n    snapshotUrl: https://maven.pkg.github.com/myowner/mysnapshots/\n```\n\nNote: The pipeline user token will be used to push maven packages. It needs the \"write:packages\" permission, which is already set on the link to create the pipeline token so it should work.\n\n### Custom\n\nIf you want to use a custom maven repository then populate it as follows:\n\n```yaml\nrepository: mycustomrepo\nrepositories:\n  maven:\n    releaseUrl: https://myrepo.acme.com/releases/\n\n    # optional if different to the above\n    snapshotUrl: https://myrepo.acme.com/releases/snapshots/\n```\n\nThen the `myrepo` `Secret` will be used with properties `username` and `password` to generate the equivalent `<server>` section in your maven settings XML file:\n\n\n```xml \n<server>\n  <id>mycustomrepo</id>\n  <username>$secret.mycustomrepo.username</username>\n  <password>$secret.mycustomrepo.password</password>\n</server>\n```\n",
            "content/en/v3/admin/setup/config/storage.md": "---\ntitle: Storage\nlinktitle: Storage\ntype: docs\ndescription: Changing your storage configuration\nweight: 200\n---\n\n\nBy storage we mean cloud storage (e.g. bucket storage for logs). Any [chart you add via helmfile](/v3/develop/apps/#adding-charts) which uses `Persistent Volumes` instead of cloud storage will be [up to you to backup and manage](/v3/devops/cloud-native/#try-avoid-persistent-volumes).\n        \nIf you are using a [cloud platform](/v3/admin/platforms/) and terraform then your storage will be configured OOTB.\n\nIf you are [on-premises](/v3/admin/platforms/) and have installed something like [minio](https://min.io/) on your cluster then you can configure the `storage` section of your [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) file to map to minio bucket URLs\n",
            "content/en/v3/admin/setup/health/_index.md": "---\ntitle: Health\nlinktitle: Health\ntype: docs\ndescription: Check the health of a Jenkins X installation\nweight: 92\naliases:\n  - /v3/guides/health\n  - /v3/admin/guides/health\n---\n\nJenkins X v3.x now has a CLI plugin that works with [Kuberhealthy](https://github.com/Comcast/kuberhealthy) to check the health of a working Jenkins X.\n\nThe `jx health` plugin is self contained in the git repository https://github.com/jenkins-x-plugins/jx-health.  This provides a way to query teh result of health checks that run periodically in each Kubernetes namespace.\n\nThe plugin is also useful in a more locked down cluster for developers with reduced RBAC permissions.  A user only needs permissions to read the Kuberhealth state custom resources https://github.com/jenkins-x-plugins/jx-health#rbac-requirements.\n\nKuberhealthy provides an easy way to extend using custom health checks to report errors.  To see how to write your own check see the docs [here](https://github.com/Comcast/kuberhealthy/blob/master/docs/EXTERNAL_CHECK_CREATION.md).  Jenkins X already comes with a set of custom health checks that can be installed that report errors, for example with webhooks, missing secrets, a bad install or invalid bot token.  For more details take a look here https://github.com/jenkins-x-plugins/jx-kh-check/tree/master/cmd.\n\nWe'd like to encourrage contributions to add extra checks as Jenkins X v3 matures.  If you have a check that you would like to add please reach out in the community channels or create an issue or pull request.\n\n# Try it out\n\nWhen using Terraform (the recommended approach) Kuberhealthy and health checks are installed by default.\n\nYou can use the new health CLI plugin to get health statuses that run periodically checking different things, our favorite is the watch for checks across all namespaces.\n\n```\njx health status --all-namespaces --watch\n```\n\nYou can also view the health status via the [UI Console](/v3/develop/ui/octant/) via:\n\n```bash \njx ui\n```\n\nThen navigating to the [Heath view](http://127.0.0.1:7777/#/ojx/health)\n\n",
            "content/en/v3/admin/setup/ingress/_index.md": "---\ntitle: Ingress\nlinktitle: Ingress\ntype: docs\ndescription: Changing your ingress\nweight: 30\n---\n\nJenkins X requires ingress so that webhooks from your git provider can trigger pipelines and so that you can use tools like the [Dashboard](/v3/develop/ui/dashboard/)\n                                    \nThe ingress domain is defined in `ingress.domain` in the [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) file in your development git repository\n",
            "content/en/v3/admin/setup/ingress/default.md": "---\ntitle: Default domain\nlinktitle: Default domain\ntype: docs\ndescription: Default generated domain\nweight: 100\n---\n\nIf you use the default configuration your `ingress.domain` will be empty. When you first install Jenkins X it will discover the `LoadBalancer` `Service` from `nginx` in the `nginx` namespace and resolve that to an external IP address. Then it will use that IP address as a domain with `.nip.io` as the suffix.\n\nSo you will see your [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) file looking something like:\n\n```yaml\ningress:\n  domain: 1.2.3.4.nip.io\n  externalDNS: false\n  tls:\n    email: \"\"\n    enabled: false\n    production: false\n```\n\nwhere `1.2.3.4` is your external IP address of your nginx `LoadBalancer` service.\n\nIncidentally when you use a public cloud and create a [kubernetes service of type LoadBalancer](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/) it is automatically associated with a public IP.\n\nNote that if you are [on-premises](/v3/admin/platforms/on-premises/) then the `LoadBalancer` service probably won't automatically get resolved to an external IP. So you will probably need to setup a load balancer like [MetalLB](https://metallb.universe.tf/)\n\n\n",
            "content/en/v3/admin/setup/ingress/oauth/_index.md": "---\ntitle: OAuth\nlinktitle: OAuth\ntype: docs\ndescription: How to protect Pipeline Visualizer with OAuth\nweight: 200\n---\n \nBy default Jenkins X installs a publically accessible GUI for viewing pipelines.  This is automatically linked to via the \"details\" on pull requests.\n \n![Pull Request](/images/v3/gui-link1.png)\n \nThe initial installation will protect this GUI with basic auth however if you want to share access then you might prefer to configure OAuth using Google or GitHub for example instead. \n \nThis guide will use [oauth2-proxy](https://github.com/oauth2-proxy/oauth2-proxy) to protect the Pipeline Visualizer UI with OAuth.  There are more advanced configuration settings and provider examples in the documentation [here](https://github.com/oauth2-proxy/oauth2-proxy/blob/7def4bf/docs/docs/configuration/auth.md)\n \n__NOTE__ There is a limitation of using oauth2-proxy with this configuration at the moment where only one service can be protected via one running oauth2-proxy deployment.  This is because the redirect URL that is configured in the OAuth providers can only map to a single oauth2-proxy callback URL.  If you would like a more generic SSO solution then you could look at integrating with [Dex](https://github.com/dexidp/dex#dex---a-federated-openid-connect-provider) or [Keycloak](https://www.keycloak.org/).\n \n# Prerequisites\n\n__IMPORTANT__ \n\n1. TLS and DNS is required, please follow [this](/v3/admin/setup/ingress/tls_dns) guide if they not already setup\n \n2. Choose your OAuth provider and get the client ID and client secret using this (https://github.com/oauth2-proxy/oauth2-proxy/blob/7def4bf/docs/docs/configuration/auth.md)\n \nAs an example here are two screenshots for using Google and GitHub\n \n### GitHub example\n \n![GitHub](/images/v3/oauth_gh.png)\n \n### Google example\n\n![Google](/images/v3/oauth_google.png)\n \n# Setup\n \nWe will be editing helmfiles so clone your cluster git repository and move into the root directory.\n \nAdd the oauth2 proxy helm chart, this will redirect requests to to the configured OAuth provider:\n```bash\njx gitops helmfile add --chart k8s-at-home/oauth2-proxy\njx gitops helmfile resolve\n```\nyou should see the new chart added to the end of the file `./helmfiles/jx/helmfile.yaml`\n \n```bash\ngit add ./helmfiles/jx/helmfile.yaml\ngit commit -m 'chore: add oauth2 proxy'\n```\n \nBy default Jenkins X is configured to use GitHub as the OAuth provider, to change this edit the file `./helmfiles/jx/helmfile.yaml` and add __extraArgs__ config like the google example here:\n```yaml\n- chart: k8s-at-home/oauth2-proxy\n version: 5.0.3\n name: oauth2-proxy\n values:\n - ../../versionStream/charts/k8s-at-home/oauth2-proxy/values.yaml\n - jx-values.yaml\n - extraArgs:\n     provider: google\n```\n \nFor a full list of supported providers see [here](https://github.com/oauth2-proxy/oauth2-proxy/blob/7def4bf/docs/docs/configuration/auth.md)\n \nBy default this configuration works with the Pipeline Visualizer however you can override the default Jenkins X oauth2-proxy helm config to be any ingress if you prefer instead. \ni.e. this is the default so you could override the helm value from `dashboard` to be `nexus` if you wanted OAuth on Nexus instead.  No need to do anything if it is the Pipeline Visualizer you want OAuth for.\n```yaml\ningress:\n hosts:\n - dashboard{{ .Values.jxRequirements.ingress.namespaceSubDomain }}{{ .Values.jxRequirements.ingress.domain }}\n ```\n \nNext we need to tell the Kubernetes Ingress that it needs to use our new OAuth provider.\n \nCreate a file `./helmfiles/jx/pv-values.yaml` with the following contents, this also unsets the basic auth config which was enabled during the initial installation:\n \n```yaml\ningress:\n annotations:\n   nginx.ingress.kubernetes.io/auth-secret: \"\"\n   nginx.ingress.kubernetes.io/auth-type: \"\"\n   nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri\n   nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth\n```\n \nNow reference the new `pv-values.yaml` file for the pipeline visualizer chart in `./helmfiles/jx/helmfile.yaml`\n \ni.e.\n \n```yaml\n- chart: jx3/jx-pipelines-visualizer\n name: jx-pipelines-visualizer\n values:\n - ../../versionStream/charts/jx3/jx-pipelines-visualizer/values.yaml.gotmpl\n - jx-values.yaml\n - pv-values.yaml\n```\n \nNow add, commit and push the changes\n```bash\ngit add --all\ngit commit -m 'chore: enable OAuth for pipeline visualizer'\ngit push\n```\nThis will trigger the boot pipeline which you can follow with\n```\njx admin logs\n```\nBy default, you need to provide three secrets for oauth2-proxy: `client id`, `client secret` and `secret-cookie`. For `secret-cookie`, you can generate and copy a random one. Once the logs start applying the generated Kubernetes resources you can CTRL+C to stop following the logs, generate a random `secret-cookie` and populate the secrets in you secret store such as Vault, or Google Secrets Manager for example:\n```bash\n# this generates a random secret-cookie, then you select and copy the output\npython -c 'import os,base64; print(base64.b64encode(os.urandom(16)).decode(\"ascii\"))'\n# populate secrets\njx secret edit -i\n```\nfilter for `oauth2-proxy` and select `client id`, `client secret` and `secret-cookie` options using the space bar\n\n![jx secret edit -i](/images/v3/oauth_secret_edit.png)\n\nNow enter the client id and secret you got from the Prerequisites step above,as well as the generated random `secret-cookie`.\n \nOnce entered you can wait to see the oauth2-proxy pod become Available using\n```\nkubectl get deploy/oauth2-proxy -w\n```\nWhen `Ready` you can access the pipeline visualizer using the hostname from\n```\nkubectl get ing jx-pipelines-visualizer\n```\n",
            "content/en/v3/admin/setup/ingress/tls_dns/_index.md": "---\ntitle: TLS and DNS\nlinktitle: TLS and DNS\ntype: docs\ndescription: Automated TLS and DNS\nweight: 150\naliases:\n  - /v3/guides/infra/tls_dns\n  - /v3/admin/guides/tls_dns\n---\n\nThis section will describe how to enable automated TLS and DNS for your Jenkins X installation.\n\n\n",
            "content/en/v3/admin/setup/ingress/tls_dns/azure.md": "---\ntitle: Azure\nlinktitle: Azure \ntype: docs\ndescription: Setting up TLS and DNS on Azure\nweight: 90\n---\n\n## DNS zone creation\n\nCreate a common resource group dedicated to all your DNS zones:\n```\n$ az group create --name rg-dns --location westeurope\n{\n  \"id\": \"/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns\",\n  \"location\": \"westeurope\",\n  \"managedBy\": null,\n  \"name\": \"rg-dns\",\n  \"properties\": {\n    \"provisioningState\": \"Succeeded\"\n  },\n  \"tags\": null,\n  \"type\": \"Microsoft.Resources/resourceGroups\"\n}\n```\n\nCreate an Azure DNS zone with the name of your domain:\n```\n$ az network dns zone create -g rg-dns -n foo.io\n{\n  \"etag\": \"00000002-0000-0000-e2d9-80ef0df0d601\",\n  \"id\": \"/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io\",\n  \"location\": \"global\",\n  \"maxNumberOfRecordSets\": 10000,\n  \"name\": \"foo.io\",\n  \"nameServers\": [\n    \"ns1-05.azure-dns.com.\",\n    \"ns2-05.azure-dns.net.\",\n    \"ns3-05.azure-dns.org.\",\n    \"ns4-05.azure-dns.info.\"\n  ],\n  \"numberOfRecordSets\": 2,\n  \"registrationVirtualNetworks\": null,\n  \"resolutionVirtualNetworks\": null,\n  \"resourceGroup\": \"rg-dns\",\n  \"tags\": {},\n  \"type\": \"Microsoft.Network/dnszones\",\n  \"zoneType\": \"Public\"\n}\n```\n\n## Domain DNS servers configuration\n\nIn your registrar admin panel, find the DNS servers section of the domain you want to use and replace the default ones by those from the first step:\n\n![dns servers section](/images/v3/registrar_dns_servers.png)\n\n![dns servers update](/images/v3/registrar_dns_servers_update.png)\n\nTest the DNS delegation by adding a A record in the Azure DNS zone you've previously created:\n```\n$ az network dns record-set a add-record -g rg-dns -z foo.io -n potato -a 1.2.3.4\n{\n  \"arecords\": [\n    {\n      \"ipv4Address\": \"1.2.3.4\"\n    }\n  ],\n  \"etag\": \"a80b3397-dd76-4ad8-a789-0fd1dbd02d99\",\n  \"fqdn\": \"potato.foo.io.\",\n  \"id\": \"/subscriptions/49721339-fe83-4562-afec-783c3f00c06f/resourceGroups/rg-dns/providers/Microsoft.Network/dnszones/foo.io/A/potato\",\n  \"metadata\": null,\n  \"name\": \"potato\",\n  \"provisioningState\": \"Succeeded\",\n  \"resourceGroup\": \"rg-dns\",\n  \"targetResource\": {\n    \"id\": null\n  },\n  \"ttl\": 3600,\n  \"type\": \"Microsoft.Network/dnszones/A\"\n}\n```\n\nThen check it:\n```\n$ nslookup potato.foo.io\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nName:\tpotato.foo.io\nAddress: 1.2.3.4\n```\n\nYou can finally remove this test A record:\n`$ az network dns record-set a remove-record --resource-group rg-dns --zone-name foo.io --record-set-name \"potato\" --ipv4-address 1.2.3.4`\n\n## Cluster creation\n\nGenerate a new infrastructure repository and a new a new cluster repository, then put this at the end of your **infrastructure** repository `values.auto.tfvars`:\n```\nsubdomain = \"jx\"\napex_domain = \"foo.io\"\napex_domain_integration_enabled = \"true\"\napex_resource_group_name = \"rg-dns\"\n\n```\n\nCommit these changes:\n```\n$ git add values.auto.tfvars\n$ git commit -m \"chore: DNS configuration\"\n```\n\nAnd create the cluster:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n## Cluster configuration\n\nOnce the cluster creation and the boot job is completed, configure TLS in `jx-requirements.yaml` in your **cluster** repository (don't forget to retrieve the boot changes before with `git pull`):\n```\n  ingress:\n    domain: jx.foo.io\n    externalDNS: true\n    kind: ingress\n    namespaceSubDomain: -jx.\n    tls:\n      email: \"contact@foo.io\"\n      enabled: true\n      production: false\n```\n\nCommit and push these changes:\n```\n$ git add values.auto.tfvars\n$ git commit -m \"chore: domain and TLS configuration\"\n$ git push\n```\n\nAfter the boot job, verify with:\n`jx verify tls hook-jx.jx.foo.io  --production=false --timeout 20m`\n\nWhen you're happy with your changes, you can set `production` to `true` to get a real certificate, then after the boot job, verify it with:\n`jx verify tls hook-jx.jx.foo.io  --production=true --timeout 20m`\n\n",
            "content/en/v3/admin/setup/ingress/tls_dns/background.md": "---\ntitle: Background\nlinktitle: Background \ntype: docs\ndescription: Background onTLS and DNS\nweight: 30\n---\n          \n\nTo achieve this we will use a couple of open source projects to help enable automated DNS for your applications.\n\nFor this guide we are going to assume you own a domain called `foo.io` which is managed by Google Cloud DNS, if it is not see [configure cloud dns to manage a domain](/v3/guides/infra/google_cloud_dns). A similar procedure is described for an external registrar, see the Azure section.\n\n\nA common requirement for domains is to have production services accessed using a parent / [apex domain](https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-custom-domains-and-github-pages#using-an-apex-domain-for-your-github-pages-site)\nfor example:\n\nhttps://foo.com\n\nMany organisations have extra requirements for development and test multi cluster environments to access services at\n\nhttps://dev.foo.com\nand\nhttps://staging.foo.com\n\nThese use subdomains.\n\nIn this guide below there is a prerequisite that you must already have a domain which is managed by your cloud provider, this is so that you can choose whichever of the scenarios above you need.  It also means the dns management of the apex domain happens outside of a single cluster installation and can be shared by multiple installations using a subdomain.\n\nJenkins X services will have URLs like `https://hook-jx.dev.foo.io`.  The jx-requirements.yml `namespaceSubDomain:` of `-jx` which is in the cluster git repository refers to the Kubernetes namespace the service is running in, this avoids clashes of the same application running in different namespaces in the same cluster.\n\nTo start with we are focussed on GCP and Azure but will expand to other cloud providers.\n\n",
            "content/en/v3/admin/setup/ingress/tls_dns/cluster.md": "---\ntitle: Cluster\nlinktitle: Cluster \ntype: docs\ndescription: Configuring the cluster \nweight: 250\n---\n\nNext we will configure the cluster requirements:\n\n- Install [external-dns](https://github.com/kubernetes-sigs/external-dns#externaldns) - Kubernetes controller which watches for new Kubernetes Ingress resources and creates A records in Google Cloud DNS which will propagate globally across the internet\n- Install [cert-manager](https://cert-manager.io/docs/) - Kubernetes controller which watches for requests to ask [Let's Encrypt](https://letsencrypt.org/) to issue a new wildcard TLS certificate for your domain and will manage this including renewals\n\nCert-manager will use the cluster issuer to request a TLS certificate.  A Kubernetes secret will be automatically created and contain the TLS cert.  The nginx controllers in the `nginx` namespace will use this secret in the `jx` namespace for the default SSL certificate which will automatically enable TLS for all applications in your cluster.\n\nThe domain from setting up your infrastructure in step one should appear in the `jx-requirements.yml` of you cluster git repo.  Next configure your TLS options, update your `jx-requirements.yml` with below.\n\n__NOTE__ this is the top level `ingress:` section and __NOT__ in the `environments:` section:\n\n```bash\ningress:\n  domain: dev.foo.io\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: \"joe@gmail.com\"\n    enabled: true\n    production: false\n```\n\nWhen first installing set `tls.production=false` so you use the Lets Encrypt staging service which allows for more API calls before rate limiting requests.  They will issue a self-signed certificate so once happy everything is working change this to `tls.production=true`.\n\n__NOTE__ Helmfile is not able to skip insecure TLS when adding helm repositories, therefore staging certificates will not work with chartmuseum that is running in the cluster.  Therefore once you have verified cert-manager can issue certificates from staging, switch to the production service.\n\nJenkins X uses a version stream to rollout tested versions of images, charts and default configuration.  The `jx-boot` job will apply these versions to your helmfile but you can also run the step yourself to see the defaults.\n\n```bash\njx gitops helmfile resolve\n```\n\n```bash\ngit add helmfile.yaml\ngit commit -m 'feat: enable DNS and TLS'\ngit push\n```\n\nNow tail the admin logs and wait for the job to complete\n```bash\njx admin logs\n```\n",
            "content/en/v3/admin/setup/ingress/tls_dns/demo.md": "---\ntitle: Demo\nlinktitle: Demo \ntype: docs\ndescription: Demo setting up TLS and DNS\nweight: 20\n---\n\n## Demo\n              \nThe following demo walks you through how to setup TLS and DNS:\n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/OqsSqZqF0gY\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n",
            "content/en/v3/admin/setup/ingress/tls_dns/faq.md": "---\ntitle: FAQ\nlinktitle: FAQ \ntype: docs\ndescription: Frequently asked questions\nweight: 300\n---\n\n## What if I have a chartmuseum with charts running using nip.io?\n\nIt is best to comment out your Jenkins X chartmuseum repository and charts from your helmfile until your new domain and ingress is working.  Then uncomment and make sure you update the chartmuseum URL to your new one.\n\n## What if I use a subdomain with an apex domain in a different GCP project?\n\nWhen using a subdomain Terraform will create a managed zone in GCP, add the recordsets to your parent / apex domain.\n\nIf the GCP managed zone for your apex domain is in a different GCP project than the project that your current installation the you will need to set in your infrastructure repository the terraform variable:\n\n```\nparent_domain_gcp_project: [your GCP project that is managing your apex domain]\n```\n\nIf you do not have permission to update the recordset of the apex domain then you will need to manually update it after getting the nameservers created for your subdomain managed zone and disable the automatic way using:\n\n```\napex_domain_integration_enabled: false\n```\n\n## How can I remove the namespace subdomain (e.g. -jx.) from my URLs?\n\nIn your cluster git repository find the `namespaceSubdomain` property in your jx-requirements.yml file and change its value to `namespaceSubdomain: \".\"`\n\nBe aware that the same application deployed in multiple namespaces will end up with the same URL if you change `namespaceSubdomain` to be the same for all environments.\n\n## How can I check if cert-manager has issued a certificate?\n\nYou can check the status of the certificate by running\n\n```\nkubectl get cert -n jx\n```\n```\nkubectl describe cert -n jx\n```\nif `Ready` continues to be `false` after 10-15 mins you can check on the request using\n```\nkubectl get certificaterequest -n jx\n```\n```\nkubectl describe certificaterequest -n jx\n```\n\n## How can I install the charts if not using terraform to autamatically enable them?\n\nIf you are not using the Jenkins X Terraform above then you can manually update your cluster git repository and add the charts needed.\n",
            "content/en/v3/admin/setup/ingress/tls_dns/google.md": "---\ntitle: Google\nlinktitle: Google \ntype: docs\ndescription: Setting up TLS and DNS on Google Cloud Platform\nweight: 100\n---\n\n## Prerequisites\n\n- cluster created using Jenkins X [GCP Terraform getting started](/v3/admin/platform/gke/)\n- own a domain and have GCP manage it, [configure cloud dns to manage a domain](/v3/guides/infra/google_cloud_dns)\n- latest Jenkins X CLI, Infrastructure and Cluster git repository updates [upgrade](/v3/guides/upgrade)\n\n### Cloud Infrastructure\nFirst we will configure the cloud infrastructure requirements:\n\n- a GCP Service Account with the `dns.admin` role, see [here](https://cloud.google.com/iam/docs/understanding-roles#dns-roles) for more information\n- a managed cloud dns zone, see [here](https://cloud.google.com/dns/docs/zones) for more information\n\nTo satisfy these requirements go to your infrastructure repository (contains Terraform main.tf) and add to your `values.auto.tfvars` the following:\n\n```yaml\napex_domain = \"foo.io\"\n```\n\nMost people prefer to use a subdomain for a specific installation rather than purchasing one domain per cluster.  For example in a multi cluster setup you will probably want all using the same parent domain but two clusters using a different subdomain like development.foo.io, staging.foo.io leaving production using just the parent domain foo.io.\n\nTo use a subdomain for this cluster add the following configuration:\n\n```yaml\nsubdomain     = \"dev\"\n```\n\nWe will now add details that will be passed to Jenkins X as requirements when booting the cluster.\n\nAdd these to `values.auto.tfvars`\n```yaml\nlets_encrypt_production = true\ntls_email               = your_email_address@googlegroups.com\n```\n\n\nNow apply these changes:\n\n```bash\ngit add values.auto.tfvars\ngit commit -m 'feat: enable DNS cloud resources'\ngit push\n```\nYou may want to set two environment variables here so that Terraform does not prompt for values\n```\nexport TF_VAR_jx_bot_username=\nexport TF_VAR_jx_bot_token=\n```\nnow run\n```bash\nterraform plan\nterraform apply\n```\n\nIf using a subdomain you will now see your managed zone in GCP [here](https://console.cloud.google.com/net-services/dns/zones)\n\n__Once terraform has finished for now there is a manual trigger of the Jenkins X cluster repository required.  This will not be needed in the future but for now please make a dummy commit on your cluster git repository and follow the boot job as in applies the updates to your cluster.__\n\nTo follow the jx boot installation using the instructions given in the terraform output, connect to the cluster and run:\n\n```bash\njx admin logs\n```\n\nThere is a timing issue with cert-manager and the admission controller so the first boot job may fail but second will run automatically and succeed.\n\n\nIt can take a short while for DNS to propagate so you may need to wait for 5 - 10 minutes.  https://dnschecker.org/ is a useful way to check the status of DNS propagating.\n\nTo verify using the CLI run:\n```bash\nkubectl get ingress -n jx\n```\nand use the hook URL\n```bash\njx verify tls hook-jx.dev.foo.io  --production=false --timeout 20m\n```\n\nYou should be able to verify the TLS certificate from Lets Encrypt in your browser (beware of browser caching if you don't see any changes)\n\n![Working TLS](/images/v3/working_tls.png)\n\nOnce this is working you can switch any of the configuration using your cluster git repository and change the jx-requirements.yaml, e.g. toggling the cert-manager production service or editing the email address used:\n\n```yaml\ningress:\n  domain: dev.foo.io\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: \"joe@gmail.com\"\n    enabled: true\n    production: true\n```\n\nGit commit and push the change back to your remote git repository and follow the installation:\n\n```bash\njx admin logs\n```\nYou will now be issued a valid TLS certificate\n\n```bash\njx verify tls hook-jx.dev.foo.io  --production=true --timeout 20m\n```\n",
            "content/en/v3/admin/setup/ingress/tls_dns/tls.md": "---\ntitle: Multiple domains\nlinktitle: Multiple domains\ntype: docs\ndescription: Setting up environment-specific domains with TLS \nweight: 270\n---\n\n**Example: Use different domains for production and staging environments**\n\nAdd `acme` chart to _helmfiles/jx-production/helmfile.yaml_\n\n```yaml\n- chart: jx3/acme\n  version: 0.0.19\n  condition: jxRequirementsIngressTLS.enabled\n  name: acme-jx\n  namespace: jx-production\n  values:\n  - jx-values.yaml\n  - acme-values.yaml\n```\n\nCreate a file _helmfiles/jx-production/acme-values.yaml_\n\n```yaml\nissuer:\n  enabled: true\n  cluster: false\n```\n\nDo the same for other environments, e.g. staging. Make sure the correct namespace is set.\n\nAdd ingress and tls configuration to the environments in _jx-requirements.yaml_\n\n```yaml\n  environments:\n    - ingress:\n        domain: staging.foo.io\n        externalDNS: true\n        tls:\n          email: admin@foo.com\n          enabled: true\n          production: true\n          secretName: tls-staging-foo-io-p\n      key: staging\n    - ingress:\n        domain: foo.io\n        externalDNS: true\n        tls:\n          email: admin@foo.com\n          enabled: true\n          production: true\n          secretName: tls-foo-io-p\n      key: production\n```\n\nMake sure to use the correct `secretName`, as it's being generated ([production](https://github.com/jenkins-x/acme/blob/00eab12ab28eb726544885cd471f10b99d420198/charts/acme/templates/cert-manager-prod-certificate.yaml#L10) or [staging](https://github.com/jenkins-x/acme/blob/00eab12ab28eb726544885cd471f10b99d420198/charts/acme/templates/cert-manager-staging-certificate.yaml#L10)) by the `acme` chart.\n\nSince you don't need `namespaceSubDomain` any more, set it to `.` in the root ingress config.\n\nCommit and push the changes\n\n```bash\ngit commit -m 'chore: update ingress config'\ngit push\n```\n\nAfter the pipeline has successfully run, you should have\n\n- a `ClusterIssuer` for the dev domain\n- a `Issuer` for production in the namespace `jx-production`\n- a `Issuer` for staging in the namespace `jx-staging`\n\nApplications should pick up the secret name from `jx-values.yaml` and use the correct certificate.\n",
            "content/en/v3/admin/setup/jx3/_index.md": "---\ntitle: Install the CLI\nlinktitle: Install the CLI\ntype: docs\ndescription: How to install the jx 3.x CLI\nweight: 1\naliases:\n  - /v3/guides/jx3\n  - /v3/admin/guides/jx3\n---\n\nYou can download 3.x of `jx` from here: https://github.com/jenkins-x/jx/releases or use `HomeBrew` (macOS).\n\n### Linux\n\n```shell\ncurl -L https://github.com/jenkins-x/jx/releases/download/v{{< version >}}/jx-linux-amd64.tar.gz | tar xzv\nchmod +x jx \nsudo mv jx /usr/local/bin\n```\n\n### macOS\n* HomeBrew method:\n```shell\nbrew install --no-quarantine --cask jenkins-x/jx/jx\n```\n* Curl method:\n```shell\ncurl -L  https://github.com/jenkins-x/jx/releases/download/v{{< version >}}/jx-darwin-amd64.tar.gz | tar xzv\nchmod +x jx \nsudo mv jx /usr/local/bin\n```\n\n### Windows\n\n* click on the [download link](https://github.com/jenkins-x/jx/releases/download/v{{< version >}}/jx-windows-amd64.zip) to download a binary\n* copy the `jx` binary to a directory on your `$PATH`\n   \n      \n## Verify your install\n\nOnce you have installed the `jx` binary so it is on your `$PATH` you should be able to run \n\n```shell \njx version \n```\n\nor \n\n```shell \njx --help \n```\n\nFor more detail see the [Command Line Reference Guide](/v3/develop/reference/jx/) \n",
            "content/en/v3/admin/setup/operator/_index.md": "---\ntitle: Install the Operator\nlinktitle: Install the Operator\ntype: docs\ndescription: Install the Git Operator to install/upgrade Jenkins X\nweight: 20\naliases:\n  - /v3/guides/operator\n  - /v3/admin/guides/operator\n---\n\nJenkins X 3.x uses a [git operator](https://github.com/jenkins-x/jx-git-operator) to manage installing + upgrading of Jenkins X and any other components in any environment. If you are interested you can read [how it works](/v3/about/how-it-works/).\n\n\n## Using Terraform\n\n*NOTE* if you are using one of the public clouds to install Jenkins X then Terraform will install the [git operator](https://github.com/jenkins-x/jx-git-operator) for you so that there is no need for you to do so manually.\n\nSo the following approaches automatically install the operator for you:\n\n* [Amazon](/v3/admin/platform/eks/)\n* [Azure](/v3/admin/platform/azure/)\n* [Google Cloud](/v3/admin/platform/gke/)\n\n## Git user and token\n\nTo install the [git operator](https://github.com/jenkins-x/jx-git-operator) you will need a pipeline user and token for the git repository.\n\nThis user and token needs read and write access to the git repository containing the installation configuration. Ideally the token will also have permissions to be able to create a webhook on the repository (to trigger CI/CD pipelines whenever someone creates a Pull Request on the git repository).\n\nYou can always setup webhooks by hand yourself whenever a git repository is [created or imported](/v3/develop/create-project/) or the domain name of your [lighthouse](https://github.com/jenkins-x/lighthouse) hook endpoint changes via the [jx verify webhooks](https://github.com/jenkins-x/jx-verify/blob/master/docs/cmd/jx-verify_webhooks.md) command. Though its easier to get Jenkins X to automate this for you as part of the CI/CD pipelines; it just requires the git user and token to have sufficient permissions to list, create and modify webhooks.\n\nNote also that the same pipeline user and token is reused by default for all pipelines on [all repositories created or imported](/v3/develop/create-project/) which will need read, write and webhook permissions on all of those repositories too. Though if you really want you can change this later on by [editing the pipeline token](/v3/guides/secrets/#edit-secrets).\n\n## Create a git token\n\nTo create a git token for passing into the operator use this button:\n\n<a href=\"https://github.com/settings/tokens/new?scopes=repo,read:user,read:org,user:email,admin:repo_hook,write:packages,read:packages,write:discussion,workflow\" target=\"github\" class=\"btn bg-primary text-light\">Create new GitHub Token</a> \n\n## Installing the operator\n\nRun [jx admin operator](https://github.com/jenkins-x/jx-admin/blob/master/docs/cmd/jx-admin_operator.md) command inside the git clone of the [git repository](/v3/admin/platform/) you created previously:\n\n```bash\njx admin operator --username <mygituser> --token <mygittoken>\n```\n\nIf you don't specify the `username` or `token` parameters you will be prompted for them.\n\nIf you are not inside the git clone of the [git repository](/v3/admin/platform/) you will need to specify the `--url` parameter for the git URL:\n\n```bash \njx admin operator --url=https://github.com/myorg/env-mycluster-dev.git --username <mygituser> --token <mygittoken>\n```\n\nThis command will use helm to install the [git operator](https://github.com/jenkins-x/jx-git-operator) which will trigger a Job to install Jenkins X (and re-trigger a Job whenever you commit to your git repository).\n\nThe terminal will display the logs as the boot `Job` runs. \n\nJenkins X will now install itself.\n\n## HTTP proxy settings\n\nIf you are behind a HTTP proxy and need to configure environment variables for HTTP proxy support then you can do this as follows.\n\nFor each environment variable you want to pass in use the `--set jxBootJobEnvVarSecrets.NAME=value` argument.\n\ne.g. something like this:\n\n\n```bash \nexport HPROXY=http://my.proxy.com\nexport NPROXY=localhost\\\\,127.0.0.1\\\\,.local\\\\,0\\\\,1\\\\,2\\\\,3\\\\,4\\\\,5\\\\,6\\\\,7\\\\,8\\\\,9\n\njx admin operator --url=https://github.com/myorg/env-mycluster-dev.git \\\n  --username <mygituser> --token <mygittoken> \\\n  --set jxBootJobEnvVarSecrets.HTTP_PROXY=$HPROXY \\\n  --set jxBootJobEnvVarSecrets.HTTPS_PROXY=$HPROXY \\\n  --set jxBootJobEnvVarSecrets.http_proxy=$HPROXY \\\n  --set jxBootJobEnvVarSecrets.https_proxy=$HPROXY \\\n  --set jxBootJobEnvVarSecrets.NO_PROXY=$NPROXY \\\n  --set jxBootJobEnvVarSecrets.no_proxy=$NPROXY\n```\n      \nThis should result in a secret called `jx-boot-job-env-vars` being created in the `jx-git-operator` namespace. This secret should get replicated to the `jx` namespace during the [boot job]().\n\n\n## Viewing the logs \n\nAt any time you can tail the boot job logs via the [jx admin log](https://github.com/jenkins-x/jx-admin/blob/master/docs/cmd/jx-admin_log.md) command:\n\n```bash \njx admin log\n```\n\nIf you know you have just done a git commit and are waiting for the boot job to start you can run:\n\n```bash \njx admin log --wait\n```\n\nWhich will wait for a running Job to display.\n\n## Insecure git repositories \n\nIf you are using an on-premises git repository you may need to configure git in the git operator and boot job to support insecure git repositories via a `git config` command or two.\n\nWhen installing the git operator you can pass in any git configuration commands via the `--setup` argument. You can supply multiple of these arguments if you need them.\n\ne.g.\n\n\n```bash\nexport GIT_USERNAME=someone\nexport GIT_TOKEN=mytoken      \n\ngit clone https://github.com/myorg/env-mycluster-dev.git\ncd env-mycluster-dev.git\n\njx admin operator --setup \"git config --global http.sslVerify false\"\n```\n\n<nav>\n  <ul class=\"pagination\">\n    <li class=\"page-item\"><a class=\"page-link\" href=\"../config\">Previous</a></li>\n    <li class=\"page-item\"><a class=\"page-link\" href=\"../secrets\">Next</a></li>\n  </ul>\n</nav>\n",
            "content/en/v3/admin/setup/secrets/_index.md": "---\ntitle: Secrets\nlinktitle: Secrets\ntype: docs\ndescription: Setting up the secrets for your installation\nweight: 60\naliases:\n  - /v3/guides/secrets\n  - /v3/admin/guides/secrets\n---\n\nJenkins X 3.x uses [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) to manage populating secrets from your underlying secret store such as:\n\n* Alibaba Cloud KMS Secret Manager\n* Amazon Secret Manager\n* Azure Key Vault\n* Hashicorp Vault\n* GCP Secret Manager\n\nThis lets you check in all of your other kubernetes resources and custom resource definitions into git for simple and powerful GitOps.\n\nYou can then rotate secrets easily independent of git.\n\nThis is the exact same graph as [here](https://github.com/external-secrets/kubernetes-external-secrets#system-architecture), with AWS Secrets Manager replaced by vault.\n{{<mermaid>}}\ngraph TB\n    subgraph A[Kubernetes Cluster]\n        sqB[External Secrets Controller]\n        subgraph C[secrets-infra ns]\n            sqCV[Vault]\n        end\n        subgraph D[Kube api server]\n        end\n        D -- Get ExternalSecrets --> sqB\n        sqB --> D\n        sqB -- Fetch secrets properties --> sqCV\n        sqCV --> sqB\n        subgraph E[app ns]\n            sqEP[pods]\n            sqES[secrets]\n        end\n        sqB -- Upsert Secrets --> sqES\n    end\n{{</mermaid>}}\n    \n\n## Demo\n      \nThe following demo walks through how to manage External Secrets via GitOps: \n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/_gjGfwlxEY4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n      \n\n## Verify \n\nTo view which secrets have been populated use:\n\n```bash\njx secret verify\n```   \n\nThis will list all of the `ExternalSecret` resources and visualise which ones are populated correctly.\n\nYou can also use [UI](/v3/develop/ui/octant/) via `jx ui` and navigate to the [Secrets View](http://127.0.0.1:7777/#/ojx/secrets)\n\n## Vault\n\nIf you are using Vault as your back end for [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) then before you try any of the following commands to populate secrets you need to make sure your termminal can access Vault.\n\nTo do this you can run the [jx secret vault portforward](https://github.com/jenkins-x/jx-secret/blob/master/docs/cmd/jx-secret_vault_portforward.md) command in a terminal:\n \n```bash\njx secret vault portforward\n```                  \n \nYou should then be able to run the following `jx secret edit` command. You can also run the `jx secret vault shell` command, which gives you a shell with an environment where you can can issue `vault` commands.\n\n## Edit Secrets\n\nTo edit the Secrets use the [jx secret edit](https://jenkins-x.io/v3/develop/reference/jx/secret/edit/) command:\n\n```bash\njx secret edit\n```                  \n\nThis will prompt you to enter all the missing Secrets by default.\n       \nIf you just want to enter a specific secret you can use `--filter` or `-f` to filter for a specific secret name.\n\ne.g.\n\n```bash\njx secret edit -f nexus\n```                  \n\n### Interactive mode\n\nIf you want to pick which secrets you wish to edit you can use interactive mode via:\n\n```bash\njx secret edit -i\n```                  \n\nYou will then be prompted for the Secret name to edit. When you pick a Secret name you are then prompted to pick the names of the properties in the secret you wish to edit.\n\n\n## Create a new Secret\n\nIf you wish to add a new custom Secret to your cluster so that you can reference it inside a Pipeline then follow these steps:\n\n* Add an `ExternalSecret` (or `Secret` with empty values) resource via the  [add a kubernetes resources guide](/v3/develop/apps/#adding-resources).\n* Submit your change as a Pull Request then merge the change.\n* This should now trigger a [boot Job](/v3/about/how-it-works/#boot-job) to apply the changes in your repository\n* You should now be able to see the `ExternalSecret` in the namespace you wanted via:\n\n```bash \nkubectl get es --namespace jx\n```\n\n* You can view which External Secrets are [populated via the External Secrets service](/v3/admin/setup/secrets/) via:\n  \n```bash \njx secret verify\n```\n                \n* The `Secret` gets created by the [the External Secrets service](/v3/admin/setup/secrets/) when the underlying secret store (e.g. vault / cloud provider secret manager) is populated or updated. You can populate the secrets in a number of ways...\n\n  * using the underlying secret store directly. e.g. using the [vault CLI directly](/v3/admin/setup/secrets/vault/#using-the-vault-cli-directly) or [vault web UI](/v3/admin/setup/secrets/vault/#using-the-vault-web-ui) or use your cloud providers secret manager's CLI or web UI\n  * using `jx secret edit -f mysecret-name`\n  * using a generator or template. You can define a `secret-schema.yaml` in `versionStream/charts/chartRepoName/chartName/secret-schema.yaml` file which describes how to generate the secret (e.g. using a random password generator or a template) such as [this example to generate a dynamic password for MySQL](https://github.com/jenkins-x/jx3-versions/blob/master/charts/presslabs/mysql-operator/secret-schema.yaml) \n    \n\n## Replicating Secrets among namespaces\n\nIts quite common to need to replicate the same Secrets across namespaces. For example [Image Pull Secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) to pull images from container registries which may need to be used in dev, staging and production.\n\nThe Jenkins X boot job does this automatically for any secret labelled with `secret.jenkins-x.io/replica-source=true` using the [jx secret replicate](https://github.com/jenkins-x/jx-secret/blob/master/docs/cmd/jx-secret_replicate.md) command:\n\n```bash \njx secret replicate --selector secret.jenkins-x.io/replica-source=true\n```\n\nThis will replicate the secret to all permanent enivronments in the same cluster (e.g. a local Staging or Production environment).\n\nIf you want to replicate another secret just add the label `secret.jenkins-x.io/replica-source=true` or you can add a new [jx secret replicate](https://github.com/jenkins-x/jx-secret/blob/master/docs/cmd/jx-secret_replicate.md) to the [boot makefile](/v3/about/how-it-works/#boot-job)\n       \n\n### Migrating Secrets from Vault\n\nIf you have secrets already in a Vault then use the vault CLI tool to export the secrets to disk, reformat it in the above YAML layout and then import the secrets as above.\n",
            "content/en/v3/admin/setup/secrets/vault.md": "---\ntitle: Vault\nlinktitle: Vault\ntype: docs\ndescription: Using Vault for your Secret storage\nweight: 30\naliases:\n  - /v3/guides/secrets/vault\n---\n\n## Installing Vault\n\n### Internal vault (vault created as part of Jenkins X installation)\n\nIf you are using Terraform with one of the [Cloud Providers](/v3/admin/) then your Vault will be installed automatically via Terraform.\n\nOtherwise please see the [On-Premises Vault Install Guide](/v3/admin/platforms/on-premises/vault/)\n\nwhichever apporoach take you should have:\n\n- [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) is installed to populate Secrets from vault\n- the [vault operator](https://bank-vaults.dev/docs/operator/) is installed for operating vault\n- a vault instance is created in the `jx-vault` namespace\n\nYou can wait for the `vault-0` pod in namespace `jx-vault` to be ready via [jx secret vault wait](https://github.com/jenkins-x/jx-secret/blob/master/docs/cmd/jx-secret_vault_wait.md) command:\n\n```bash\njx secret vault wait\n```\n\n### External vault\n\n{{< alert >}}\nExternal vault is only supported for jx versions greater than `3.2.203`\n{{< /alert >}}\n\nConfigure external vault to support [kubernetes auth method](https://www.vaultproject.io/docs/auth/kubernetes#configuration).\nThis step needs to be done before any Jenkins X related changes are made.\n\n```bash\n# Set VAULT_ADDR\nexport VAULT_ADDR='<vault url>'\nvault auth enable kubernetes\n```\n\nWe only support kubernetes auth method at `kubernetes/` for now.\n\nAdd `vault_url` and `boot_secrets` to the main.tf file (replace `https://external-vault.com` with the actual vault url):\n\n```bash\n...\nmodule \"eks-jx\" {\n  source               = \"jenkins-x/eks-jx/aws\"\n  ...\n  vault_url            = \"https://external-vault.com:8200\"\n  boot_secrets = [\n    {\n      name  = \"jxBootJobEnvVarSecrets.EXTERNAL_VAULT\"\n      value = \"true\"\n      type  = \"string\"\n    },\n    {\n      name  = \"jxBootJobEnvVarSecrets.VAULT_ADDR\"\n      value = \"https://enter-your-vault-url:8200\"\n      type  = \"string\"\n    }\n  ]\n}\n....\n```\n\nThis should create a secret `jx-boot-job-env-vars` in the `jx-git-operator` namespace, verify that this secret has `EXTERNAL_VAULT` set to true, and `VAULT_ADDR` set correctly.\n\nThis will prevent the terraform module from creating any vault resources in the kubernetes cluster and the cloud (AWS/GCP/Azure) account.\n\nNow your vault can be used with Jenkins X.\n\n#### Local `jx-secret` with External vault\n\n`jx-secret` uses the `JWT` token type to authenticate with vault. The `JWT` token is only valid when used from inside the Kubernetes cluster and because of this we have to proxy the connection through a host inside the cluster.\n\nLaunch a pod in the jx cluster to act as the proxy host:\n\n```bash\nkubectl -n jx run vault-proxy --image=hpello/tcp-proxy --port=8200 -- vault.example.com 8200\n```\n\nForward local port 8200 to the vault-proxy pod:\n\n```bash\nkubectl port-forward pods/vault-proxy 8200:8200&\njobid=`echo $!`\n```\n\nSetup your local environment:\n\n```bash\nunset VAULT_TOKEN\nexport VAULT_ADDR=https://localhost:8200/\nexport VAULT_SKIP_VERIFY=True\nexport JX_VAULT_MOUNT_POINT=kubernetes\nexport JX_VAULT_ROLE=jx-vault\nexport EXTERNAL_VAULT=true\n```\n\nRun `jx-secret` as you normally would:\n\n```bash\njx secret edit -i\n```\n\nCleanup:\n\n```bash\nkill $foo #stop the port-forward\nkubectl -n jx delete pod vault-proxy #delete the pod\n```\n\n### Configuration\n\nTo indicate that Vault is being used as the storage engine for your Secrets you need to [configure vault](/v3/guides/config/#vault) via `secretStorage: vault` in your `jx-requirements.yml`. Note that this is usually done automatically for Cloud providers and Terraform:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: vault\nwebhook: lighthouse\n```\n\n## Using Vault\n\nTo be able to import, export or edit secrets from your laptop you need to make sure you are running the [jx secret vault portforward](https://github.com/jenkins-x/jx-secret/blob/master/docs/cmd/jx-secret_vault_portforward.md) command to port forward the 8200 port on your laptop to the vault service:\n\n```bash\njx secret vault portforward\n```\n\nThis will allow the [jx 3.x binary](/v3/guides/jx3/) to access the Vault REST API.\n\nYou can now follow the instructions to [edit secrets](/v3/guides/secrets/#edit-secrets) or [import secrets](/v3/guides/secrets/#import-secrets).\n\n## Using the vault web UI\n\nOnce you are running the `jx secret vault portforward` command described above you can access the vault web UI at [https://localhost:8200](https://localhost:8200)\n\n## Using the vault CLI directly\n\nSomeday we might have a nice [jx secret vault shell](https://github.com/jenkins-x/jx-secret/issues/5) command to automate all of this but until then...\n\nDownload the [vault CLI binary](https://www.vaultproject.io/downloads/) and add it to your `$PATH`.\n\nYou can now setup a shell to access vault as follows:\n\n```bash\nexport VAULT_TOKEN=$(kubectl get secrets vault-unseal-keys  -n jx-vault -o jsonpath={.data.vault-root} | base64 --decode)\n\n# Tell the CLI that the Vault Cert is signed by a custom CA\nkubectl get secret vault-tls -n jx-vault -o jsonpath=\"{.data.ca\\.crt}\" | base64 --decode > $PWD/vault-ca.crt\nexport VAULT_CACERT=$PWD/vault-ca.crt\n\n# Tell the CLI where Vault is listening (the certificate has 127.0.0.1 as well as alternate names)\nexport VAULT_ADDR=https://127.0.0.1:8200\n\n# Now we can use the vault CLI to list/read/write secrets...\n\n#\u00a0List all the current secrets\nvault kv list secret\n\n# Lets store a secret\nvault kv put secret/mything foo=bar whatnot=cheese\n```\n",
            "content/en/v3/admin/setup/upgrades/_index.md": "---\ntitle: Upgrades\nlinktitle: Upgrades\ntype: docs\ndescription: Upgrades when using Jenkins X 3.x\nweight: 90\naliases:\n  - /v3/guides/upgrade\n  - /v3/admin/setup/upgrades\n---\n\nThere are a few areas to consider when upgrading Jenkins X.\n- infrastructure typically managed by tools like Terraform\n- the jx CLI used to interact with Jenkins X\n- cluster managed by GitOps and the Jenkins X version streams",
            "content/en/v3/admin/setup/upgrades/cli.md": "---\ntitle: CLI\nlinktitle: CLI\ntype: docs\ndescription: Upgrading the jx cli\nweight: 10\naliases:\n  - /v3/guides/upgrades/cli\n---\n\n## CLI\n\nTo upgrade the jx CLI run:\n```bash\njx upgrade cli\n```\n\nTo upgrade jx subcommand plugins run:\n```bash\njx upgrade plugins\n```\n\n{{< alert >}}\nIf you encounter this error:\n```\nERROR: failed to load plugin <plugin-name>: can't find latest version of plugin: {\"message\":\"Not Found\",\"documentation_url\":\"https://docs.github.com/rest/reference/repos#get-the-latest-release\"}\n```\nThen most probably it's an old plugin which is not maintained, and can be removed from `~/.jx3/plugins/bin` folder.\n{{< /alert >}}\n\nThe `jx` CLI version used to upgrade to is derived from the Jenkins X [version stream](/about/concepts/version-stream/).  \n\nIf you have not installed Jenkins X or are not connected to a Kubernetes cluster with Jenkins X running then the `jx` CLI version defaults to the latest version stream git repository [here](https://github.com/jenkins-x/jxr-versions/blob/master/packages/jx.yml)\n\nIf you are running the `jx upgrade cli` command from within a cloned cluster git repository (one that has the helmfile.yaml and jx-requirements.yml files at the root folder) then the [version stream](/about/concepts/version-stream/) URL used to find the correct jx CLI version use comes from the local file `versionStream/Kptfile`.  The reason for this is when switching [version stream](/about/concepts/version-stream/) you need to match the jx CLI version stored in that desired vesrion stream, as they may be different to you previous [version stream](/about/concepts/version-stream/).\n\nIf you want to find the `jx` CLI version that matches the [version stream](/about/concepts/version-stream/) used by your cluster git repository then pass this addional flag:\n\n```bash\njx upgrade cli --from-environment\n```\n",
            "content/en/v3/admin/setup/upgrades/cluster.md": "---\ntitle: Cluster\nlinktitle: Cluster\ntype: docs\ndescription: Upgrade the Jenkins X cluster managed by GitOps\nweight: 20\naliases:\n  - /v3/guides/upgrades/cluster\n---\n\n## Cluster \n\n\n### Automatic upgrades\n\nTo enable automatic upgrades of your cluster you need to modify your `jx-requirements.yml` file in your development git cluster repository:\n\n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  autoUpdate:\n    enabled: true\n    schedule: \"0 0 * * *\"\n    autoMerge: true\n```\n      \nOnce you commit and push that change and your [boot job has completed](/v3/about/how-it-works/#boot-job) you should have a `CronJob` running at the above schedule (every night at midnight) creating a Pull Request to upgrade your cluster's versions of charts and images.\n\n\nIf you set `autoMerge: true` then the upgrade Pull Requests will get auto merged if the CI/CD pipelines all succeed; otherwise you need to manually approve the Pull Requests when you are happy for the upgrade to be applied.\n\nFor more help on the Cron scheduler syntax check out [crontab.guru](https://crontab.guru/)\n \n\n### Manual upgrades\n\nThe following demo walks through how to manually upgrade your cluster: \n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/9ZaqdwD3cTs\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n### prerequisite\n- make sure you have upgraded your [jx CLI](/v3/guides/upgrades/cli) to make sure you are using the correct version for the next steps.\n\n---\n\nYou can upgrade your Jenkins X installation at any time by running the [jx gitops upgrade](/v3/develop/reference/jx/gitops/upgrade) command inside a git checkout of your cluster GitOps repository:\n\nFirst make sure you have the latest git contents as the [boot job will push changes](/v3/about/how-it-works/#boot-job):\n\n```bash\ngit pull\n```\n\nMake sure you have no pending git commits....\n\n```bash\ngit status\n```\n\nNow if your git clone is clean run the following:\n\n```bash\njx gitops upgrade\n```\n\nThis will: \n\n* upgrade your local [version stream](/about/concepts/version-stream/) to the latest which has passed the latest tests\n* make any changes in the version stream to the [boot job and its configuration](/v3/about/how-it-works/#boot-job)\n\nAfter running this command you will usually have some changes in git you can review. If you are happy with the changes commit them and create a Pull Request so that they can get applied on your cluster.\n\n```bash\ngit add *\ngit commit -a -m \"fix: upgrade versions\"\ngit push\n```\n\nThe jx-git-operator will trigger a boot job in the `jx-git-operator` namespace, to track the progress of the upgrade you can run:\n\n```bash\njx admin logs\n```\n\n### Merge conflicts \n\nIt is possible that you will have merge conflicts.  You can follow the inline git helper messages to resolve conflicts - or use your IDE to help figure out the merge issues. Usually if there are conflicts its safest to use the upstream version; particularly from the `versionStream` dir.\n\nUnder the hood Kpt is used to fetch changes from the upstream defined in each Kptfile.  \nBy default the `versionStream` directory has a Kpt strategy of `force-delete-replace` which removes all your changes in that folder. In order to merge your changes with the ones coming from upstream, add a file: `.jx/gitops/kpt-strategy.yaml` with the following content:\n```yaml\nconfig:\n  - relativePath: versionStream\n    strategy: resource-merge\n```\n\nOnce ready, make a pull request onto your cluster repository, review changes and merge.  The [Jenkins X git operator](https://github.com/jenkins-x/jx-git-operator) will automatically apply the upgrades into your cluster.\n\n\n### Replacing your local versionStream\n\nIf you are having merge conflicts trying to upgrade your installation you could just replace the `versionStream`  directory with the latest version stream folder. **NOTE** this will overwrite any local changes you have made inside the `verisonStream` folder. Though everything is versioned in git so you can always review the changes.\n\nInside your cluster git repository run this command:\n\n```bash\nkpt pkg update --strategy force-delete-replace versionStream\n```\n\nThat will update your `versionStream` directory to be in line with the latest version stream. You can always then review the changes before committing them.\n\n### Configure merge strategy\n\nYou can configure the `kpt` strategy used to apply changes from the version stream into your `versionStream` folder via a custom configuration file.\n\nCreate a file called `.jx/gitops/kpt-strategy.yaml` in your dev cluster git repository that looks like this:\n\n```yaml \nconfig:\n- relativePath: versionStream\n  strategy: alpha-git-patch\n```\n\nthis will configure that the `alpha-git-patch` strategy will be used whenever you try `jx gitops upgrade` which should preserve any local changes; though you may have to resolve some git conflicts in your IDE (as described above).\n\nTo avoid any possible git merge issues its a good idea to try keep local source changes out of the `versionStream` folder if you can.\n\n### Locking versions\n\nTo prevent manual changes from being overwritten during an upgrade,\nadd the `version.jenkins-x.io: lock` label to a chart in your _helmfile.yaml_:\n\n```yaml\n- chart: ingress-nginx/ingress-nginx\n  version: 3.12.0\n  name: nginx-ingress\n  values:\n    - ../../versionStream/charts/ingress-nginx/ingress-nginx/values.yaml.gotmpl\n    - jx-values.yaml\n  labels:\n    version.jenkins-x.io: lock\n```\n",
            "content/en/v3/admin/setup/upgrades/infrastructure.md": "---\ntitle: Infrastructure\nlinktitle: Infrastructure\ntype: docs\ndescription: Upgrade the Jenkins X Cloud infrastructure\nweight: 30\naliases:\n  - /v3/guides/upgrades/infrastructure\n---\n\n## Infrastructure\n\nIf you have used one of the Jenkins X Terraform Git repositories to create and manage your cloud resources then you have two options.\n\n### Terraform manual apply\n\nIf you are running the Terraform apply commands yourself then from your infrastructure Git repository run:\n```\nexport TF_VAR_jx_bot_username=[your bot username]\nexport TF_VAR_jx_bot_token=[your bot token]\nterraform get -update\nterraform plan\nterraform apply\n```\n\n### Terraform Cloud\nIf you are using [Terraform Cloud](https://www.terraform.io/) then from your infrastructure Git repository run:\n\n```\nterraform get -update\ngit commit -a -m 'chore: upgrade cloud infra'\ngit push\n```\nTerraform Cloud should trigger automatically and apply the updates, view the log in Terraform Cloud.\n",
            "content/en/v3/admin/setup/upgrades/lts.md": "---\ntitle: LTS\nlinktitle: LTS\ntype: docs\ndescription: Long Term Support (LTS) version stream\nweight: 40\naliases:\n - /v3/guides/upgrades/lts\ntoc_hide: true\nhide_summary: true\n---\n \n<div class=\"alert alert-warning\" role=\"alert\">\n  <h1>WARNING: The LTS is not updated, so we don't recommend using it</h1>\n</div>\n\nJenkins X uses [version streams](/about/concepts/version-stream/) as a quality gate when promoting plugins, charts, cli packages, container images etc.  This results in a release of Jenkins X.\n \nThe default version stream for Jenkins X 3.x is https://github.com/jenkins-x/jx3-versions.  The Jenkins X own infrastructure runs a number of end to end BDD tests for different base install options which covers the core of Jenkins X.  Provided these tests pass on from a Pull Request it will be merged and users can upgrade their [CLI](/v3/guides/upgrades/cli) and [Cluster](/v3/guides/upgrades/cluster) bringing in the versions that make that release. \n \nAs Jenkins X uses Continuous Delivery all the way through the stack it means there can be a lot of releases, even many on a daily basis.  While we are advocates of Continuous Delivery it can be hard for users to consume the number of releases so often.  For teams that are in need of more mature features when they are released it can also bring some risk upgrading from the latest daily release of an open source project.\n \nThe Long Term Support (LTS) version stream (https://github.com/jenkins-x/jx3-lts-versions/) is designed to help with these two scenarios.  It is a replica of the latest default version stream described above but will release on a slower cadence.  This means users can switch their installations to track the LTS version stream and bring in changes when it suits them.  They will see a collection of changes which will have improved documentation and maturity given the feedback from users tracking the latest version stream.  Jenkins X own infrastructure uses the latest version stream and automatically upgrades on every release, this is another way we can build confidence in the quality of an LTS release.\n \n## LTS\n \nTo switch your installation clone your cluster git repository\n \n```bash\njx gitops versionstream --lts\n```\nThis will modify and commit a change to your local `./versionStream/Kptfile`, it will now point at the LTS version stream.\n \nNext we need to make sure your local `jx` CLI is aligned with the version in the LTS version stream.\n \nFrom within the same directory as above run:\n```bash\njx upgrade cli\n```\n \nNext we will get the LTS version stream and align the `helmfile.yaml` with the correct versions.\n```bash\njx gitops upgrade\n```\n \nNow review changes, commit and push to your cluster remote git repository.\n \n## Latest\n \nTo switch back to the latest version stream repeat the steps above with the `--latest` flag instead.\ne.g.\n```bash\njx gitops versionstream --latest\njx upgrade cli\njx gitops upgrade\n```\n \n## Custom\n \nThe monthly cadence of the LTS version stream may still be too frequent if you desire.  For this you can fork the LTS version stream, point your installation at the fork and manage syncing your fork with the LTS at whatever cadence suits you best.\n \nTo use a custom fork repeat the steps above with the `--custom` flag and git details instead.\ne.g.\n```bash\njx gitops versionstream --custom --url https://github.com/foo/bar --ref master --directory versionStream\njx upgrade cli\njx gitops upgrade\n```\n \nIf it helps [this](https://github.com/jenkins-x/jx3-versions/blob/a82a00258e293d7457d6da15d7037363cfd3841d/.lighthouse/jenkins-x/release/promote-vs.sh#L53-L58) is where we automatically create a pull request on the LTS version stream when we release the latest version stream.  You can do the same when updating your custom fork.\n \ne.g.\n```\ngit clone https://github.com/foo/bar.git\ncd \"jx3-lts-versions\"\ngit checkout -b foo\njx gitops upgrade --commit-message \"chore: version stream upgrade $VERSION\"\ngit push origin foo\njx create pullrequest -t \"chore: version stream upgrade $VERSION\"\n```",
            "content/en/v3/admin/setup/upgrades/migrations.md": "---\ntitle: Version Stream Manual Migrations\nlinktitle: Version Stream Manual Migrations\ntype: docs\ndescription: Upgrading the jx cli\nweight: 590\naliases:\n- /v3/guides/upgrades/changelog\n---\n\n## Version Stream Manual Migrations\n\nThe sections below document manual migration steps required that occur from time to time where an automated upgrade is\nnot possible or practical\n\n### v0.0.969\n\nNB: These steps are only relevant if you are using Hashicorp Vault as secret storage within `jx`. Ignore for all other secret stores\n\nv0.0.969 introduced a change to remove Hashicorp Vault from `jx` control and become an explicit cluster dependency\ninstalled either via Terraform (for cloud environments) or Helm (for on-premises). The reasoning behind this is to reduce\ncyclic complexity within `jx` where the platform requires secrets and the `jx` platform is also responsible for provisioning\nwhere to store these secrets.\n\n#### Migration steps\n\n1. First delete all your external-secrets and secrets within your cluster to temporarily stop External Secrets trying to synchronise\n   these by running the following\n   \n```shell\nkubectl get es -n jx --no-headers=true | awk '/./{print $1}' | tee >(xargs kubectl delete -n jx es) >(xargs kubectl delete -n jx secret)\n```\n\n2. If using Terraform then upgrade your infrastructure using the latest jx terraform module for your provider\nFrom your Terraform repo,\n```shell\nrm -rf .terraform\nterraform init\nterraform apply\n```\n\n3. Alternatively if not using Terraform, simply install the following charts in the `jx-vault` namespace,\n\n```shell\nhelm repo add jx3 https://jenkins-x-charts.github.io/repo\nhelm repo update\nhelm upgrade --install --wait vault-operator oci://ghcr.io/bank-vaults/helm-charts/vault-operator --version 1.22.3 -n jx-vault \nhelm install vault-instance jx3/vault-instance --version 1.0.28 -n jx-vault \n```\n\n4. If you wish to migrate secrets from your existing (soon to be decommissioned) Vault then now is the time to do that by\nconnecting to the new Vault instance in `jx-vault` and putting secrets you want to maintain there\n\n5. Run the `jx gitops upgrade` process and commit the files to git and push to trigger the boot job. (Don't worry if\nyou've already done this step previously - in which case just re-trigger a boot job with a dummy commit).\n   This boot job will populate any missing secrets in Vault within the `jx secret populate` step\n   \n6. After the boot job completes confirm the presence of synchronised External Secrets by running\n```shell\nkubectl get es -n jx\n```\n\n7. Once you're happy with your new Vault installation you can tidy up the older vault in `secret-infra` by removing\nthe vault-instance and vault-operator from your helmfile located in `helmfiles/secret-infra/helmfile.yaml` and\n   running a boot job\n",
            "content/en/v3/admin/troubleshooting/_index.md": "---\ntitle: Troubleshooting\nlinktitle: Troubleshooting\ntype: docs\ndescription: How to fix common issues you may hit\nweight: 600\n---\n\nGuides to help you fix common issues:\n",
            "content/en/v3/admin/troubleshooting/bot-token.md": "---\ntitle: Bot Token\nlinktitle: Bot Token\ntype: docs\ndescription: How to diagnose and fix issues with a bot token\nweight: 200\n---\n\n# Commons problems with Bot Tokens\n\nMake sure the bot user has access to the organisation and / or git repositories that it needs.\n\n_tip_ you can accept an organisation and repo GitHub invitation using\n\n```\njx admin invitation\n```\n\nMake sure the bot token has the correct permissions to perform the action you require\n",
            "content/en/v3/admin/troubleshooting/install.md": "---\ntitle: Install\nlinktitle: Install\ntype: docs\ndescription: How to diagnose and fix issues with an install\nweight: 100\n---\n\n## Check you are using a cluster Git URL\n\nIf using Terraform make sure the `values.auto.tfvars` file contains a `jx_git_url = ` value that points to a **cluster** git repo that contains a helmfile.yaml and a folder ./helmfiles. A common mistake is users set the `jx_git_url` to the infrastructure repo instead.\n\nAfter a successful bootjob, these are few things to look for:\n\n- Secrets have been generated in the secret backend.\n- A webhook has been created in the cluster git repo.\n\n## Issues with secret generation\n\n- In some cases, the webhook generation will fail with a message :\n\n```bash\njx gitops webhook update --warn-on-fail\nError: failed to find hmac token from secret:\n```\n\nThis is normally because the secret generation failed during the boot job.\n\n- Look at the outputs from `jx secret verify` and `kubectl get es -A`\n- If you see errors (`404 missing`), it most likely means that the secret generation step in the boot log did not work.\n- One way to re-generate secrets is by making a direct push to the base branch of the cluster git repo.\n- A direct push to the master (not by creating a pull request) branch will run `regen-phase-1`, `regen-phase-2` and `regen-phase-3`.\n  Check the admin logs to verify these steps were executed without failing.\n  `regen-phase-3` is where the secret generation happens.\n  This step runs `jx secret populate`\n- Errors can happen with different secret backends\n  - External vault:\n    - Ensure you have followed the instruction [here](https://github.com/jenkins-x/terraform-aws-eks-jx#secrets-management).\n    - After terraform apply, a secret `jx-boot-job-env-vars` in the `jx-git-operator` namespace should be created with two variables defined - EXTERNAL_VAULT (set to `true`) and VAULT_ADDR (set to your external vault ip with port).\n  - Wrong cluster git repo\n    - If you are using backends other than vault, use the right cluster git repository for that secret backend.\n      For example, use `jx3-eks-asm` template repository to generate the cluster git repository if you want to store secrets in AWS secrets manager.\n    - Check [this github organization](https://github.com/jx3-gitops-repositories) for all the different public template repositories you can use with Jenkins X.\n\n## Issues with webhook\n\nTo find if webhooks were created by Jenkins X, navigate to the settings page of your repository, and click on webhooks.\nCheck the [webhook troubleshooting guide](/v3/admin/troubleshooting/webhooks/) if they exist, and do not work.\n\nThe recent delivery tab should have good debugging information on why webhooks failed to deliver payload.\n",
            "content/en/v3/admin/troubleshooting/quickstart-import.md": "---\ntitle: Quickstart/Import\nlinktitle: Quickstart-Import\ntype: docs\ndescription: How to diagnose and fix issues with quickstart and/or import\nweight: 500\n---\n\nAfter a successful installation of Jenkins X, the first thing to do is to either create a quickstart or import an existing repository into Jenkins X.\nThey are both very similar, so the steps mentioned here can be applied for both.\n\nImport/Quickstart involves the following steps:\n\n- Cloning of the dev/cluster git repository\n- Selecting and copying catalog folder into imported repository\n- Pull Request in the cluster git repository\n- Webhook creation in the imported repository\n- Addition of the repository name to the `config` configmap\n- Source repository creation in the `jx` namespace\n\n### Issues with cloning dev repository\n\nIf you encounter an issue of this form:\n\n```\nerror: failed to clone dev env git repository: failed to clone dev environment git repository\n```\n\nit means that jx cli cannot find the correct git credentials.\nRun it with log level debug (`JX_LOG_LEVEL=debug`), and it might shed some light into the issues.\njx looks at a few places for the credentials:\n\n- `--git-token` and `--git-username`\n- ~/.git-credentials\n- [~/git/credentials](https://jenkins-x.io/v3/develop/faq/using/#how-do-i-stop-jx-asking-for-git-credentials)\n\nPassing the args for every import is cumbersome and error prone, hence it's better to create the git credentials file.\n\nThe git credential file expects the username and token in the form:\n\n```\nhttps://<username>:<token>@<scm-provider>.<tld>\n```\n\nVerify that this token can be used to clone the dev repository.\n\n### Issues with selecting and cloning catalog folder\n\nDuring the import process, jx will ask which catalog folder to use, it will try to guess based on the language files it finds in the imported folder.\nOnce you have selected a catalog, jx will copy the catalog pack from the packs folder of [jx3-pipeline-catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs)\n\nFor example for go, you should expect the following files/folders:\n\n- .lighthouse folder\n- charts folder\n- preview folder\n- Dockerfile\n\nCheck [this](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs/go) for the latest files or folders which are copied.\n\nApart from these files, it also creates OWNERS and OWNERS_ALIASES files which are used by lighthouse to determine which users can approve Pull Requests.\n\nVerify that these folders/files are created.\n\nThere is a permission issue with some jx versions, check this [github issue](https://github.com/jenkins-x/jx/issues/8028) on how to mitigate the problem.\n\n### Issue with pull request creation\n\njx project import command will open a pull request in the cluster git repository.\nThis PR will first have one commit which should modify the file `.jx/gitops/source-config.yaml`, which should be of the form:\n\n```\napiVersion: gitops.jenkins-x.io/v1alpha1\nkind: SourceConfig\nmetadata:\n  creationTimestamp: null\nspec:\n  groups:\n  - owner: <owner>\n    provider: https://github.com\n    providerKind: github\n    repositories:\n    - name: <repo-name>\n    scheduler: in-repo\n  slack:\n    channel: '#jenkins-x-pipelines'\n    kind: failureOrNextSuccess\n    pipeline: release\n```\n\nIn case `scheduler: in-repo` is missing in the changed file, it's most probably because `.lighthouse/jenkins-x/trigger` file was not created.\nEither import was run with `--no-pack` or the catalog folder was not copied properly.\n\nFew minutes after the PR is opened with one commit, a second commit is created with more changes.\nThe files that are changed include:\n\n- config-root/namespaces/jx/lighthouse-config/config-cm.yaml\n- config-root/namespaces/jx/lighthouse-config/plugins-cm.yaml\n- config-root/namespaces/jx/lighthouse/lighthouse-foghorn-deploy.yaml\n- config-root/namespaces/jx/lighthouse/lighthouse-keeper-deploy.yaml\n- config-root/namespaces/jx/lighthouse/lighthouse-poller-deploy.yaml\n- config-root/namespaces/jx/lighthouse/lighthouse-tekton-controller-deploy.yaml\n- config-root/namespaces/jx/lighthouse/lighthouse-webhooks-deploy.yaml\n- config-root/namespaces/jx/source-repositories/owner-repo.yaml\n\nIf the second commit is not created, it means the verify job failed (use the `dashboard` or `octant ui`).\nCheck the logs of the job which should give you some hints.\n\nIf you check the `.lighthouse/jenkins-x/pullrequest.yaml` file, you will see that the PR runs the command make-pr, which actually runs `jx gitops apply --pull-request` which invokes the `pr-regen` target in the `versionStream/src/Makefile.mk` of the cluster git repository.\n\nThe command will wait upto 20 minutes for the pull request to be merged, do not merge it on your own, as it may mean the verify job did not complete successfully.\nPossible causes for the pull request to be not auto merged could be that the bot user does not have the right permissions to merge PRs for the cluster git repository.\nif you have seen that both the commits have completed successfully, and the jx import command has timed out waiting for it to auto merge, it is safe to merge it manually.\n\nif the pull request got automerged (or merged by hand because it timed out waiting), then the release pipeline will be run.\n\n### Issues with Final set up (webhook creation and trigger)\n\nRelease pipeline executes the `.lighthouse/jenkins-x/release.yaml` file.\nOnce the job has succeeded (you can watch the progress in the UI or just run `jx admin log`), you should see\n\n- a webhook in the imported repository\n- an entry for the imported repository in the `config` configmap in the `jx` namespace\n\nTo check if the webhook has been created, navigate to `settings -> webhook`.\nTo check if the imported repository was added to the `config` configmap, run\n\n```\nkubectl get configmap config -n jx -oyaml\n```\n\nYou should see something like this:\n\n```\nin_repo_config:\n      enabled:\n        owner/repo: true\n        owner/cluster-git-repo: true\n```\n\nFinally, you should be able to see the source repository resource created for the imported repository:\n\n```\nkubectl get sr -n jx\nNAME                   URL                                         DESCRIPTION\ndev                    https://github.com/owner/cluster-git.git   the git repository for the Dev environment\nowner-repo             https://github.com/owner/repo\n```\n\nIf either the\n\n- webhook is missing, which shows error of this form:\n\n```\nIt looks like the boot job failed to setup the webhooks. It could be related to the git token permissions.\nfailed to find sourceRepository  in namespace jx for repository owner-repository\n```\n\n- repo is missing in the `config` config map, check the logs of the release pipeline, which shows errors of this form:\n\n```\nerror: failed to wait for repository to be setup in lighthouse: failed to find trigger in the lighthouse configuration in ConfigMap config in namespace jx for repository: owner/repo within 20m0s\n```\n\ncheck the logs from the release pipeline to see what is the issue.\n\nIf everything works, then your repository has been successfully imported into Jenkins X!\n",
            "content/en/v3/admin/troubleshooting/secrets.md": "---\ntitle: Secrets\nlinktitle: Secrets\ntype: docs\ndescription: How to diagnose and fix issues with secrets\nweight: 300\n---\n\n# Commons problems with Secrets\n\nThings to check:\n\n- the general health\n\n```\njx health status -A\n```\n\n- the boot job\n\n```\njx admin logs\n```\n\nand make sure in the logs `jx secret populate` command is successful.\n\n- check the external secrets deployment and logs\n\n```\nkubectl get pods -n secret-infra\nkubectl logs deploy/kubernetes-external-secrets -n secret-infra\n```\n\n- check the status of the external secret using `kubectl`\n\n```\nkubectl get es -n [the namespace the secret / external secret is in]\n```\n",
            "content/en/v3/admin/troubleshooting/webhooks.md": "---\ntitle: Webhooks\nlinktitle: Webhooks\ntype: docs\ndescription: How to diagnose and fix webhooks\nweight: 400\n---\n\nWebhooks are used to trigger [lighthouse](https://github.com/jenkins-x/lighthouse) when you:\n\n- merge commits to your main branch\n- open a Pull Request\n- push code to a Pull Request branch\n- comment on a Pull Request to trigger ChatOps\n\nIf webhooks are not working in your cluster then you won't get ChatOps or pipelines triggered.\n\n### Requirements\n\nFor webhooks to work you must have a working `Ingress` for the `hook` endpoint from [lighthouse](https://github.com/jenkins-x/lighthouse)\n\nThe ingress defaults to using the domain name specified in `ingress.domain` in your `jx-requirements.yml` file.\n\n### Diagnosing issues\n\nYou can check on the health of your system and webhooks via the [Health guide](/v3/admin/setup/health/)\n\nFirst make sure you have a valid ingress for hook...\n\n```bash\n# switch to the jx namespace\njx ns jx\n\nkubectl get ing\n```\n\nyou should see an ingress with a valid domain name for `hook`. Then try curl that URL on the command line...\n\n```bash\ncurl -v http://hook-jx.1.2.3.4.nip.io/hook\n```\n\nand check your laptop can access the endpoint. Do you have a running `lighthouse-webhook-*` pod?\n\n```bash\nkubectl get pod -l app=lighthouse-webhooks\n```\n\nYou could look at your pods in `jx ui` to see their state, events, logs etc.\n\nIf everything looks to be working inside your cluster then open the git repository of your dev cluster...\n\n```bash\nkubectl get environments\n```\n\nThen click the `GIT URL` link for your repository.\n\nNow look at the **Webbooks** page to see if your git provider could send webhooks to your hook endpoint. On GitHub thats **Settings** -> **Webhooks**\n\nIt could be your git provider can't see public ingress endpoint? If thats the case you may need to look at setting up a tunnel via something like [ngrok to enable on-premises webhooks](/v3/admin/platforms/on-premises/#enable-webhooks)\n\n### AWS specific issues\n\nIf you are using AWS you can check out the [AWS docs on using ELB](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-elb-load-balancer.html)\n",
            "content/en/v3/admin/uninstall/_index.md": "---\ntitle: Uninstall Jenkins X\nlinktitle: Uninstall JX\ntype: docs\ndescription: How to uninstall Jenkins X\nweight: 500\n---\n",
            "content/en/v3/admin/uninstall/delete-jx-cluster.md": "---\ntitle: Delete jx and the cluster\nlinktitle: Delete jx and the cluster\ntype: docs\ndescription: How to delete the cluster where jx is installed\nweight: 200\n---\n\nUse this if you created the kubernetes cluster using the AWS/GCP/Azure terraform module.\nThis will also work, if you installed Jenkins X on an existing AWS EKS cluster.\n\n{{< alert >}} Always examine the plan of the terraform destroy command before approving it, once destroyed there is no going back. {{< /alert >}}\n\n- In case of **AWS**, manually delete the network load balancer (NLB) created by the nginx helm chart from your aws account.\n- If you are using spot io or similar services, then you need to remove those nodes from the cluster.\n\n- You can now safely run:\n\n```bash\nterraform destroy\n```\n\n- If you installed jx on minikube/kind/k3s (local installations), refer to the docs of those platforms on how to uninstall the cluster.\n- If you imported repositories into Jenkins X using `jx project import` or `jx project quickstart`, then you\n  also need to delete the webhooks manually from the repositories.\n",
            "content/en/v3/admin/uninstall/delete-jx.md": "---\ntitle: Delete only jx\nlinktitle: Delete only jx\ntype: docs\ndescription: How to delete jx components from your cluster\nweight: 100\n---\n\nUse this if you want to only delete Jenkins X from your cluster.\n\n```bash\nkubectl delete -R -f config-root/namespaces\nkubectl delete -R -f config-root/cluster\n```\n\nIf you imported repositories into Jenkins X using `jx project import` or `jx project quickstart`, then you\nalso need to delete the webhooks manually from the repositories.\n\nIf you installed jx on minikube/kind/k3s (local installations), refer to the docs of those platforms on how to uninstall the cluster.\n",
            "content/en/v3/develop/_index.md": "---\ntitle: User Guide\nlinktitle: User Guide\ntype: docs\ndescription: Guides on using Jenkins X to develop and deliver software continuously\nweight: 100\naliases:\n  - /v3/develop/\n---\n\n{{< developcards >}}\n",
            "content/en/v3/develop/apps/_index.md": "---\ntitle: Apps\nlinktitle: Apps\ntype: docs\ndescription: Adding or configuration apps and charts \nweight: 100\naliases:\n  - /v3/guides/apps/\n  - /v3/develop/apps\n---\n\n\nJenkins X 3.x supports the `helmfile.yaml` file format from the [helmfile project](https://github.com/helmfile/helmfile) that can be used to define the [Helm](https://helm.sh/) [charts](https://helm.sh/docs/topics/charts/) you wish to install and their namespace.\n\n\n## Adding Charts\n            \nJenkins X uses [helmfile](https://helmfile.readthedocs.io/en/latest/#configuration) to configure which versions of which helm charts are to be deployed in which namespace along with its configuration. \n\n\n### Using the CLI\n\nThe easiest way to add apps/charts to your cluster is via a CLI command [jx gitops helmfile add](/v3/develop/reference/jx/gitops/helmfile/add/) to add charts into the right`helmfile.yaml` for the namespace:\n\nMake sure you are in a git clone of your cluster git repository then run:\n\n```bash\n# from inside a git clone of your cluster git repository\njx gitops helmfile add --chart somerepo/mychart --repository https://acme.com/myrepo --namespace foo --version 1.2.3\n```\n\n### Using the source code directly\n\nInstead of using the above command line you can just modify the source code in git via your IDE.\n\nIf you need more help on how to edit the helmfiles files check out the [helmfile configuration guide](https://helmfile.readthedocs.io/en/latest/#configuration)  \n\nThere is a root `helmfile.yaml` file and then a tree of helmfiles for each namespace:\n\n```bash \nhelmfile.yaml\nhelmfiles/\n  nginx/\n    helmfile.yaml\n  jx/\n    helmfile.yaml\n```\n\nTo add a new helm chart find the namespace you wish to add it to and add the chart to that file.\n\ne.g. to add to the `jx` namespace modify the `helmfiles/jx/helmfile.yaml` file.\n\nThen add any charts you like in the `releases:` section as follows:\n\n```yaml\n# file: helmfiles/jx/helmfile.yaml \n...\nreleases:\n- chart: flagger/flagger\n...\n``` \n\nThe `namespace` and `version` properties of the charts get resolved during deployment via the [version stream](https://jenkins-x.io/about/concepts/version-stream/) or you can specify them explicitly.\n\n\nThe prefix of the chart name is the chart repository name. There are a few chart repository names already defined in the `helmfile.yaml` in the `repositories:` section. You can add any number of chart repositories to the `helmfile.yaml` that you need.\n\nWe are trying to increase consistency and use canonical names in `helmfile.yaml` files for chart repositories. You can see the default [chart repository names and URLs in this file](https://github.com/jenkins-x/jxr-versions/blob/master/charts/repositories.yml). Feel free to use any name and URL you like.\n\n\n\n## Adding resources\n\nIf you want to create one or more kubernetes resources that are not already packaged as a helm chart you can easily add these into your cluster git repository using the _local chart_ layout.\n\n* create a directory called `charts/myname/templates`\n* add whatever kubernetes resources you need into `charts/myname/templates/myresource.yaml`. \n  * Use as many files as you wish, just makes sure you use the `.yaml` extension\n * create a `charts/myname/Chart.yaml` file and populate the default helm metadata like [this example Chart.yaml](https://github.com/cdfoundation/tekton-helm-chart/blob/master/charts/tekton-pipeline/Chart.yaml)\n* now reference the `charts/myname` directory in your `helmfile.yaml` file in the `releases:` section via...\n\n```yaml \nreleases:\n- chart: ./charts/myname\n```  \n\nCreate a Pull Request. You should see the effective kubernetes resources show up as a commit on your Pull Request\n \n## Customising charts\n\nYou can add a custom `values.yaml` file to any chart and reference it in the `values:` section of the `helmfile.yaml` file.\n\ne.g. to customise a chart such as `nginx-ingress` first find the `helmfile.yaml` file that is installing this chart. \n\nWe tend to use a separate `helmfile.yaml` file for each namespace so for `nginx` we have   `helmfiles/nginx/helmfile.yaml`\n\nSo create a file `helmfiles/nginx/values.yaml`  and then modify the `helmfiles/nginx/helmfile.yaml` to reference it (see the last line):\n\n```yaml \nreleases:\n...\n- chart: stable/nginx-ingress\n  version: 1.39.1\n  name: nginx-ingress\n  namespace: nginx\n  values:\n  - versionStream/charts/stable/nginx-ingress/values.yaml.gotmpl\n  - values.yaml\n```\n  \nYou can also use a file called `values.yaml.gotmpl` if you wish to use go templating of the values file. For example this lets you reference properties from the `jx-requirements.yml` file via expressions like `{{ .Values.jxRequirements.ingress.domain }}`.\n\nTo see an example of this in action check out the [charts/jenkins-x/tekton/values.yaml.gotmpl](https://github.com/jenkins-x/jx3-versions/blob/master/charts/cdf/tekton-pipeline/values.yaml.gotmpl) file in the [version stream](https://jenkins-x.io/about/concepts/version-stream/).\n\nNote that many apps are already configured to make use of the `jx-requirements.yml` settings via the [version stream](https://jenkins-x.io/about/concepts/version-stream/) - but you are free to add your own custom configuration. \n   \n### Using requirements in charts\n\nThe `jx-requirements.yml` file gets converted to a namespace specific set of values, `jx-values.yaml` in each namespace so it can be easily consumed in the namespace specific helmfile in `helmfiles/$namespace/helmefile.yaml`.\n\nIf your chart wishes to reuse some of the configuration from the requirements, you can add a reference to the `jx-values.yaml` file in your chart in the `helmfiles/$namespace/helmefile.yaml` for your namespace:\n       \n```yaml\n- chart: jenkins-x/bucketrepo\n  version: 0.1.47\n  name: bucketrepo\n  values:\n  # reuse the standard jx values for ingress domain and so forth:\n  - jx-values.yaml\n```\n\nThere is also a file called `jx-global-values.yaml` which can include various global values like `jx.imagePullSecrets`. You can add your own global values into that file if you wish; it will be replicated into the `helmfiles/*/jx-values.yaml` files so they can be easily consumed in a chart.\n\n### Version Stream folder\n\nYou may have noticed there is a folder called `versionStream` inside your clusters git repository. The [version stream](/about/concepts/version-stream/) is used to provide shared configuration such as:\n\n* the verified versions of charts, images and git repositories which have been tested to work together\n* the default namespace and configuration of charts.\n\nThis means we can share canonical files and metadata across clusters and git repositories.\n\n\n### Keeping the version stream in sync\n\nWhen you [upgrade your cluster](/v3/guides/upgrade/#cluster) the local `versionStream` folder will be upgraded to the latest upstream version stream contents.\n\nWe mentioned [above how you can cusomize charts](#customising-charts). Please try keep as many of your customizations as you can outside of the `versionStream` folder as you can so that there's no risk of your configurations getting overridden or causing merge conflicts with upstream [version stream](/about/concepts/version-stream/) changes.\n\nAny changes in the local `helmfile.yaml` or `charts` folder are excluded by the [upgrade mechanism](/v3/guides/upgrade/#cluster) and so are totally safe.\n",
            "content/en/v3/develop/create-project/_index.md": "---\ntitle: \"Creating projects\"\ndate: 2017-01-05\nweight: 30\ntype: docs\ndescription: >\n  Now that you've setup the platform, let's create your first project.\naliases:\n  - /v3/develop/create-project/\n---\n\nTo create or import projects you will need to get the [jx 3.x binary](/v3/guides/jx3/) and put it on your `$PATH`\n\n## Create a new project from a quickstart\n\nTo create a new project from a quickstart template use the [jx project quickstart](/v3/develop/reference/jx/project/quickstart) command:\n\n```bash\njx project quickstart\n```\n\nNote that the old Jenkins X 2.x alias `jx quickstart` is still supported but will be deprecated eventually.\n\nThe quickstart files are all found in [the quickstart github organization](https://github.com/jenkins-x-quickstarts).\n\nSee the [quickstart documentation](/v3/about/how-it-works/#importing--creating-quickstarts) for more information.\n\n## Import an existing project\n\nTo import an existing project use the [jx project import](/v3/develop/reference/jx/project/import) command:\n\n```bash\njx project import\n```\n\nThe tasks which are copied over during the import process can be found [here](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks).\n\nIf you are using nested gitlab repositories (`org/group/repository`), add `--nested-repo` flag to `jx project import`.\n\n**NOTE** that we recommend [trying out a quickstart first](#create-a-new-project-from-a-quickstart) before importing a project so that:\n\n- you can verify your cluster is setup correctly so that you can create new charts + images, promote them to staging and create Preview Environments on Pull Requests etc.\n- as you start to import projects which may have their own custom `Dockerfile` or custom charts you can compare your custom chart versus the charts included in the Jenkins X catalog to see how it works. e.g.\n  - the way the default pipelines update the image tag on each release to use a versioned image in the helm chart or the\n  - how the ingress domain URL is injected into the `Ingress` resource in the helm chart from the environment (preview / staging / production etc) so that the same chart can be deployed into any environment and things just work (with and without TLS)\n\nFor troubleshooting what could be wrong with quickstart/import, refer to this [page](/v3/admin/troubleshooting/quickstart-import/)\n\n### Default file layout\n\nIf you are importing your own repository which has a `Dockerfile` and/or a helm chart the default pipelines look for these files at:\n\n- `Dockerfile` in the root directory of your repository\n- `charts/$repoName/Chart.yaml` for the helm chart\n\nYou are free to use other conventions if you prefer; though you'll need to modify the pipelines to look in different locations for these files.\n\n### Importing projects with Jenkinfiles\n\nNote that Jenkins X 3.x includes [new support for handling of importing Jenkinsfiles](jenkinsfile) if you are trying to combine Jenkins and Tekton together in Jenkins X.\n\nThis means we can create quickstarts and import projects using the same UX whether you wish to use the automated CI/CD pipelines from Jenkins X using Tekton or wish to reuse your own existing `Jenkinsfile` files (or even a combination of both on the same repository!)\n\n## Top level wizard\n\nIf you just run the [jx project](/v3/develop/reference/jx/project) you get a top level wizard that asks you which kind of approach you wish to take (e.g. quickstart versus import etc)\n\n## Improvements since v3\n\nWe've made a number of improvements over the 2.x version of [jx import](https://jenkins-x.io/commands/jx_import/) command:\n\n- when importing to Jenkins X we ask which pipeline catalog you wish to use which you can now [configure easily](/v3/about/extending/#pipeline-catalog)\n- the wizard will prompt you for the pack name (language) once the detection has occurred. Usually the pack name detection is good enough. e.g. detecting `maven` but you may wish to change the version of the pack (e.g. `maven-java11`)\n- when importing a project which has a `Jenkinfiles` you are given the choice to:\n  - ignore the `Jenkinsfile` and let Jenkins X automate the CI/CD via Tekton\n  - use a Jenkins server you have configured via Jenkins X to implement the CI\n  - add a new Jenkins server for the CI managed via GitOps in Jenkins X\n  - use the Jenkinfile Runner via Tekton\n\n### Changes since 2.x:\n\nFor those of you who know [Jenkins X](https://jenkins-x.io/) and have used [jx import](https://jenkins-x.io/commands/jx_import/) before the new project wizard is a little different:\n\n- the commands are a little different:\n\n  - `jx create import` is now `jx project import`\n  - `jx create quickstart` is now `jx project quickstart`\n  - `jx create project` is now `jx project`\n  - `jx create spring` is now `jx project spring`\n",
            "content/en/v3/develop/create-project/jenkinsfile.md": "---\ntitle: Jenkinsfile support\nlinktitle: Jenkinsfile support\ntype: docs\ndescription: Working with Jenkinsfiles, Jenkins and Tekton\nweight: 30\naliases: \n    - /v3/develop/jenkinsfile\n---\n\n\nWhen importing a project [jx project import](/v3/develop/reference/jx/project/import) looks for a `Jenkinsfile` in the source code. \n\nIf there is no `Jenkinsfile` then the wizard assumes you wish to proceed with automated CI/CD pipelines based on [tekton](https://github.com/tektoncd/pipeline) and imports it in the usual Jenkins X way. You also get to confirm the kind of pipeline catalog  and language you wish to use for the automated CI/CD - so its easy to import any workload whether its a library, a binary, a container image, a helm chart or a fully blown microservice for automated kubernetes based CI/CD.\n\nIf a `Jenkinsfile` is present then the wizard asks you how you want to proceed:\n\n* use the automated CI/CD pipelines based on [tekton](https://github.com/tektoncd/pipeline). \n  * this option will ignore the `Jenkinsfile` for now - you can always use it later\n* use a [Jenkins server](/v3/admin/guides/jenkins/) to execute the `Jenkinsfile` pipeline \n* use [Jenkinsfile Runner](https://github.com/jenkinsci/jenkinsfile-runner) to run the pipelines\n\n### Using Jenkins Server\n\nIf you choose the [Jenkins server](/v3/admin/guides/jenkins/) option and you have not yet configured a Jenkins server in your cluster, the wizard will prompt you for the new Jenkins server name and will automatically [create you a Jenkins server via GitOps](/v3/admin/guides/jenkins/getting-started/#adding-jenkins-servers-into-jenkins-x)\n\nOtherwise you choose which Jenkins server to use for your project. You could have multiple jenkins servers with different configurations and plugins.\n\nWhen using a Jenkins Server you get to use the full power of the Jenkins server and `Jenkinsfile`. Jenkins X uses the [upstream Jenkins helm chart](https://github.com/jenkinsci/helm-charts) which you can [configure fully via GitOps](/v3/admin/guides/jenkins/getting-started/#configure-jenkins)\n\n\n### Using Jenkinsfile Runner\n\nWhen using [Jenkinsfile Runner](https://github.com/jenkinsci/jenkinsfile-runner) we still reuse [tekton](https://github.com/tektoncd/pipeline) to run the pipelines and [lighthouse](https://github.com/jenkins-x/lighthouse) to handle webhooks and to trigger pipelines. The [Jenkinsfile Runner](https://github.com/jenkinsci/jenkinsfile-runner) container runs as a step in a [Tekton pipeline](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/packs/jenkinsfilerunner/.lighthouse/jenkins-x)\n",
            "content/en/v3/develop/developing/_index.md": "---\ntitle: Developing\nlinktitle: Developing\ntype: docs\ndescription: How to work on code with git and CI/CD\nweight: 90\n---\n    \nSomeone on your team has [setup Jenkins X on a kubernetes cluster](/v3/admin/). So how do you use it? \n\nMostly you just use your IDE and git to change code in your usual way.\n\nThough we do prefer you submit code changes via [Pull Requests](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests) to then trigger CI and [Preview Environment](/v3/develop/environments/preview/) for each Pull Request. \n\n## Demo\n                                               \nTo see how to create a [Preview Environment](/v3/develop/environments/preview/) on a Pull Request see this demo:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/x-GtKmmhDSI\" title=\"Demo of creating Preview Environments on Pull Requestss with Jenkins X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    \n   \n### Creating a project \n\nTo see how to [create a new project](/v3/develop/create-project/) and get started developing with Jenkins X check out this demo:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4wqwulEzseM?t=279s\" title=\"Demo of developing with Jenkins X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n## Pull Requests\n\nThe pull request (PR) is the foundation of Jenkins X CI/CD pipeline execution. \n\nNote that some git providers call these `merge requests` instead of `pull requests`.\n\nUsing Pull Requests allows developers, reviewers and Jenkins X to:\n\n* Verify changes are valid: unit tests still pass, code is linted and so forth\n* Review PR code changes and their effects\n* Approve or deny PRs or suggest changes\n* Approve PRs and trigger automatic merge and promotion\n* Manual promotion of PRs to production environments and software releases\n\n### Preview Environments\n\nThe other advantage of working with Pull Requests is the automated CI/CD in Jenkins X creates a [Preview Environment](/v3/develop/environments/preview/) for each Pull Request\n\n\n### Work in progress (WIP)\n\nPull requests can be marked as work in progress, blocking auto-merging, either via making the PR a draft on GitHub, or by adding `WIP:`, `wip:`, `[wip]:`, or similar at the beginning of the PR title. \nThe PR will be moved out of work-in-progress when no longer in draft or when the `WIP` prefix in the PR title has been removed.\n\n### How Lighthouse merges a PR\n\nThere are some unique actions and behaviors when using [lighthouse](/v3/about/overview/#lighthouse) to implement ChatOps:\n\n* The PR must have its required test contexts pass (by default, just `pr-build`).\n* PRs must be set `/lgtm` and approved, or have the `updatebot` label on it.\n* The PR must not have any merge conflicts.\n* If multiple PRs are all in the merge pool at the same time, the lowest numbered PR will be merged first, then the next one will be rebuilt and then merged, etc.\n       \n\n### After Pull Requests merge\n\nOnce your pull request merges a new release is created for your application, creating new artifacts, images, helm charts etc\n\nThen automatic [Promotion Pull Requests](/v3/develop/environments/promotion/) are triggered.\n\nBy default your new version is promoted to the `Staging` environment. Though you need to manually approve the Pull Request to promote to `Production`.\n\nYou can [Configure promotion to behave differently if you need it](/v3/develop/environments/config/)\n\n\n### Using ChatOps\n\n_ChatOps_ lets you interact with the Pull Request via special comments on the Pull Request via your git providers website.\n\nSee the [ChatOps Command Reference](/v3/develop/reference/chatops/)\n\n\n",
            "content/en/v3/develop/environments/_index.md": "---\ntitle: Environments\nlinktitle: Environments\ntype: docs\ndescription: Environments and Promotion\nweight: 400\n---\n\nJenkins X supports multiple environments for hosting your applications such as `Development`, `Staging` and `Production`.\n\nYou can also use environments for different kinds of testing: system, integration, load, soak or regression tests.\n\nThe default configuration is a single cluster setup with `Staging` and `Production` environments which map to local namespaces `jx-staging` and `jx-production` inside the same cluster.\n\nHowever for real enterprise setups we recommend using the [Multi Cluster Setup](/v3/admin/guides/multi-cluster/) where your `Production` and maybe `Staging` environments are setup in separate clusters; ideally with separate cloud provider accounts so that they can be completely isolated from each other.\n",
            "content/en/v3/develop/environments/config.md": "---\ntitle: Configuration\nlinktitle: Configuration\ntype: docs\ndescription: Configuration of Environments and Promotion\nweight: 200\n---\n\nIn your development cluster git repository the [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) file is used to define which are the default environments are used for promotion on your repositories.\n       \n\nThe [default configuration](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/jx-requirements.yml#L18) for environments looks something like this:\n\n```yaml\napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  environments:\n  - key: dev\n  - key: staging\n  - key: production\n```\n\nwhich defaults to meaning that `Staging` and `Production` are namespaces (`jx-staging` and `jx-production`) in the local cluster. `Staging` will use `Auto` promotion and `Production` will use `Manual` (more on that later).\n\n        \n## Multi cluster\n\nWhen you setup a [Remote Cluster](/v3/admin/guides/multi-cluster/) for `Staging` or `Production`  you can remove the above entries for those environments.\n\nThen when you import the remote cluster repository into the development environment (to setup the CI/CD on pull requests and enable promotion) the generated Pull Request will modify your `jx-requirements.yml` to add remote entries for the remote cluster.\n\nE.g. after importing the remote `production` environment via [jx project import](/v3/develop/reference/jx/project/import) and the pull request merging it should look like: \n\n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  environments:\n    - key: dev\n      repository: my-dev-environment\n    - key: staging\n    - key: production\n      owner: myowner\n      repository: my-prod-repo\n      remoteCluster: true\n``` \n\n## Custom environments per repository\n\nIf you wish to use different sets of environments for different microservices you can augment the environments that are \nused for promotion by adding a `.jx/settings.yaml` with [this format](https://github.\ncom/jenkins-x/jx-api/blob/master/docs/config.md#settings) which is merged with settings for the development \ncluster repository's [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.\nmd#requirements) file. If you want to override the environments instead of augment you can set \n`ignoreDevEnvironments: true`. By default the namespace name is the environment name prefixed with `jx-`.\n\nE.g. add something like this to your `.jx/settings.yaml` in a repository to override which environment repositories \nare promoted to:\n           \n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Settings\nspec:\n  # lets replace the promote environments\n  ignoreDevEnvironments: true\n  promoteEnvironments:\n  - key: my-staging\n    owner: myowner\n    repository: some-repo-name\n    promotionStrategy: Auto\n  - key: my-prod\n    owner: myowner\n    repository: some-other-repo-name\n    promotionStrategy: Manual\n```\n\nIf you instead want to disable promotion to an environment, say staging, you can do it with a `.jx/settings.yaml` \nlooking like this:\n\n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Settings\nspec:\n  promoteEnvironments:\n  - key: staging\n    promotionStrategy: Never\n```\n\n## Custom environments per group of repositories\n\nIf you have different teams sharing the same Jenkins X installation you may wish to organise the repositories into _groups_ (e.g. a group of repositories per team).\n \nThe simplest way to do this is to use a separate git organisation (owner) per team and then you already get separate configurations per group/owner in the `.jx/gitops/source-config.yaml` file in your development cluster git repository.\n                                                    \nThe added benefit of using separate git organisations is that already the [dashboard](/v3/develop/ui/dashboard/) supports filtering all pipelines by owner; so each team will get effectively their own separate UI for viewing pipelines. You can easily bookmark the dashboards view for a single owner / repository.\n\nE.g. here's `.jx/gitops/source-config.yaml in the development cluster git repository:\n\n```yaml \napiVersion: gitops.jenkins-x.io/v1alpha1\nkind: SourceConfig\nmetadata:\n  creationTimestamp: null\nspec:\n  groups:\n  - owner: team1\n    provider: https://github.com\n    providerKind: github\n    repositories:\n    - name: cheese-frontend\n    - name: cheese-backend\n    scheduler: in-repo\n    settings:\n      destination:\n        chartRepository: https://github.com/team1/charts.git\n        chartKind: pages\n      # lets replace the promote environments\n      ignoreDevEnvironments: true\n      promoteEnvironments:\n      - key: my-staging\n        owner: team1\n        repository: some-repo-name\n      - key: my-prod\n        owner: team1\n        repository: some-other-repo-name    \n  - owner: team2\n    provider: https://github.com\n    providerKind: github\n    repositories:\n    - name: another\n    - name: somerepo\n    scheduler: in-repo\n    settings:\n      destination:\n        chartRepository: https://github.com/team2/charts.git\n        chartKind: pages\n      # lets replace the promote environments\n      ignoreDevEnvironments: true\n      promoteEnvironments:\n      - key: my-staging\n        owner: team2\n        repository: some-repo-name\n      - key: my-prod\n        owner: team2\n        repository: some-other-repo-name    \n```\n\nIf using different git organisations isn't practical you can at least get some of the benefits by just creating multiple groups in the `.jx/gitops/source-config.yaml` and associating different `settings:` to each group.\n\nNote that any settings in a local repository `.jx/settings.yaml` file will be used; putting shared settings in the development git repository is used if there is no `.jx/settings.yaml` file.\n\n          \n\n",
            "content/en/v3/develop/environments/git.md": "---\ntitle: Git\nlinktitle: Git\ntype: docs\ndescription: Environments and Git\nweight: 100\n---\n\nEach kubernetes cluster has a git repository so that all the kubernetes resources in all namespaces can be managed by GitOps. Each cluster may also have a separate infrastructure git repository (e.g. for Terraform) to define the cloud resources (buckets, IAM roles, kubernetes cluster, node pools, VPNs, firewalls etc).\n\nSo if you use a [Multi Cluster Setup](/v3/admin/guides/multi-cluster/) you have git repository per cluster to define the kubernetes resources in all the namespaces in that cluster. \n\ne.g. having `Dev`, `Staging` and `Production` with separate clusters you'll have 3 git repositories containing `helmfile.yaml` files. If you use a single cluster you'll have 1 git repository.\n",
            "content/en/v3/develop/environments/preview.md": "---\ntitle: Previews\nlinktitle: Previews\ntype: docs\ndescription: Preview Environments\nweight: 450\naliases:\n  - /docs/reference/preview/\n---\n\n\nJenkins X lets you spin up Preview Environments for your Pull Requests so you can get fast feedback before changes are merged to the main branch. This gives you faster feedback for your changes before they are merged and released and allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master.\n\nWhen the Preview Environment is up and running Jenkins X will comment on your Pull Request with a link so in one click your team members can try out the preview!\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\n## Demo\n\nTo see how to create a Preview Environment on a Pull Request see this demo:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/x-GtKmmhDSI\" title=\"Demo of creating Preview Environments on Pull Requestss with Jenkins X\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n### Generating a preview environment\n\nIn a typical Jenkins X development scenario, users make changes to an  application that has been [imported or created via a quickstart](/v3/develop/create-project/).\n\nWhen the developer makes the change to their branch, with the ultimate\ngoal of merging those branch changes into the `main` branch for\ndeployment to production, they save their changes from within their\nintegrated development environment (IDE) and commit it to the source\nrepository, such as GitHub. The process to generate a preview\nenvironment is typically like committing code in a traditional\ndevelopment environment:\n\n1. A developer makes a branch to their local cloned source repository to create a new feature:\n\n```sh\ngit checkout -b acme-feature1\n```\n\n2.  The developer makes changes to the source code in their branch and adds the affected files to the commit queue:\n\n```sh\ngit add index.html server.js\n```\n\n\n3. The developer commits the files adding a comment about what has changed:\n\n```sh\n    git commit -m \"nifty new image added to the index file\"\n```\n\n4. The developer runs `git push` to send the code back to the remote  repository and create a pull request:\n\n```sh\n    git push origin acme-feature1\n```\n5. The program displays a link to a pull request. The developer can highlight the URL, right-click and choose *Open URL* to see the GitHub page in their browser.\n\n6. Jenkins X creates a preview environment in the PR for the application changes and displays a link to evaluate the new feature:\n<div class=\"row\">\n  <div class=\"col col-lg-9\">\n    <img src=\"/images/pr-comment.png\"/>\n  </div>\n</div>\nThe preview environment is created whenever a pull request to the main branch is created in the\nrepository, allowing any relevant user to validate or evaluate features,\nbugfixes, or security hotfix. Then, as additional commits are added to the PR branch\nthe preview environment is automatically updated.\n\n### Reviewing the preview environment\n\nThe development bot created during the installation process sends a notification email to the developer as well as the designated repository approver that a PR is ready for review. During the approval process, the approver can click on the preview application with the code changes for testing and validation.\n\nWhen the approver confirms the code and functionality changes, they can\napprove with a simple comment on the Pull Request that merges the code changes back to\nthe main branch and initiate a release candidate build with the new feature:\n\n```sh\n    /approve\n```\n\nThe code is merged to the `main` branch, and the release is created and will appear in the `Releases` tab of the git repository along with any associated images or helm charts. Usually this then triggers [Promotion](/v3/develop/environments/promotion/) to other environments.\n\n\n## How it works\n    \nthe [jx preview create](/v3/develop/reference/jx/preview/create) command creates a new [Preview](https://github.com/jenkins-x/jx-preview/blob/master/docs/crds/github-com-jenkins-x-jx-preview-pkg-apis-preview-v1alpha1.md#Preview) custom resource for each Pull Request on each repository so that we can track the resources and cleanly remove them when you run [jx preview destroy](/v3/develop/reference/jx/preview/destroy) pr [jx preview gc](/v3/develop/reference/jx/preview/gc)\n\nFor reference see the [Preview.Spec](https://github.com/jenkins-x/jx-preview/blob/master/docs/crds/github-com-jenkins-x-jx-preview-pkg-apis-preview-v1alpha1.md#PreviewSpec) documentation\n\nOnce the  [Preview](https://github.com/jenkins-x/jx-preview/blob/master/docs/crds/github-com-jenkins-x-jx-preview-pkg-apis-preview-v1alpha1.md#Preview) resource is created with its associated preview namespace the  [jx preview create](/v3/develop/reference/jx/preview/create)  command will execute `helmfile sync` of the **preview/helmfile.yaml** file to deploy all of the associated helm charts to the preview namespace. \n\nWhen the `helmfile sync` is complete a comment is added to the Pull Request that the preview has been created. If a URL can be detected in the preview namespace it is added to the Pull Request as a comment so that your team can try it out and give fast feedback. \n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\nWhen the Pull Request is merged or closed the [jx preview gc](/v3/develop/reference/jx/preview/gc) command kicks in periodically to remove any old preview environments.\n\n\n## When previews fail\n\nA preview can fail to create for a multitude of reasons; bad helm charts, missing secrets/volumes, invalid configuration in `jx-requirements.yml`, bad image names, no capacity on the server to name but a few. Unfortunately `helmfile sync` does not give much information other than it succeeded of failed which can be confusing. \n\nTo improve feedback on why some previews can fail we have added additional output in the [jx preview create](/v3/develop/reference/jx/preview/create) command to tail the kubernetes events in the preview namespace. This basically runs `kubectl exec get event -n $PREVIEW_NAMESPACE -w` and adds the output to the pipeline output (prefixed with `$PREVIEW_NAMESPACE:`      \n\nThis means the reason for why a preview fails should appear as a kubernetes event in the pipeline log.\n\ne.g. if you make a mistake configuraing the helm chart on your preview you should see the error in the pipeline log. To fix the error just modify the code and git commit and push the fix and you should see the new results in the pipeline log.\n\n  \n## Configure the preview URL\n\nDepending on your helm chart or dependent charts you may wish to customise the kubernetes `Service` or `Ingress` name used to find the URL to use in the Preview Pull Request command and in the [UI integrations](/v3/develop/ui/) to visualise the current Previews.\n\nYou can specify the `Service` or `Ingress` name via the **JX_PREVIEW_SERVICE** environment variable name.\n\ne.g. add the following line to your **.jx/variables.sh** file, creating the file if it doesn't exist:\n\n```bash \nexport JX_PREVIEW_SERVICE=\"my-custom-service-or-ingress\"\n```\n\nIf you need to add a path to the current preview service URL host name you can set **JX_PREVIEW_PATH** \n\ne.g. add the following line to your **.jx/variables.sh** file, creating the file if it doesn't exist:\n\n```bash \nexport JX_PREVIEW_PATH=\"/customers/acme\"\n```\n\nThen that path will be appended to the preview URL's host name.\n\n## Adding more charts\n\nIt's common when creating, for example, a web front end to need a backend or database to work from to verify that the microservice works.\n\nFor each application the preview environment is defined by [helmfile](https://github.com/roboll/helmfile) at **preview/helmfile.yaml**.\n\nYou can modify the **preview/helmfile.yaml** file to add any helm chart dependencies you require.\n\nYou can find possible charts to install by searching helm. e.g. to find a `postgresql` chart try:\n\n```bash\nhelm search repo postgres\n```\n\nOnce you know the chart and the repository its in you can add it to your `repositories` and `releases` section of the  `preview/helmfile.yaml` file (the `postgresql` section in dependencies array):\n\n```yaml\nrepositories:\n- name: stable\n  url: https://charts.helm.sh/stable\n...  \n\nreleases:\n- chart: stable/postgresql\n  name: mydb\n  version: 2.6.2\n\n...\n```\n      \n\n## Adding more resources\n\nIf you need to add some kubernetes resources you can add those using the local chart source code model as described in [how to add new kubernetes resources](/v3/develop/apps/#adding-resources)\n\n\n## Additional preview steps\n\nIt's common to want to test out previews using system tests or integration tests. Or you may wish to run some kind of [cypress](https://www.cypress.io/) or [selenium tests](https://www.selenium.dev/)\n\nYou can do this by [adding additional steps](/v3/develop/pipelines/editing/) in the **.lighthouse/jenkins-x/pullrequest.yaml** file.\n\nTo interact with the preview environment you will need to know its namespace and URL. So the additional step should source the `.jx/variables.sh` file to setup the environment variables (which are defined below).\n\ne.g. here is an additional step to curl the preview URL after the `jx preview create` step:\n\n```yaml\n... \n- name: test-preview\n  image: golang:1.15\n  script: |\n    #!/usr/bin/env sh\n    source .jx/variables.sh\n    curl -v $PREVIEW_URL\n```\n           \n### Environment variables\n\nThe following variables are added to the `.jx/variables.sh` file by the [jx preview create](/v3/develop/reference/jx/preview/create) command:\n   \n* `PREVIEW_URL` the URL of the preview environment if it can be discovered\n* `PREVIEW_NAME` the name of the `Preview` custom resource which has the full metadata\n* `PREVIEW_NAMESPACE` the namespace of the preview environment which you can use via `myservice.$PREVIEW_NAMESPACE.svc.cluster.local` to access services in your preview\n\n## Scaling Preview Environments\n\nA classic issue with preview environments is the number of pods that will grow with the number of applications, pull requests and dependencies. One solution is to use [Osiris](https://github.com/dailymotion-oss/osiris) to automatically scale down the preview environments which are idle. You can read the [admin guide on scaling preview environments](/v3/guides/preview-environments) to install Osiris in your cluster.\n\n## Further reading\n\nTo get more detail on using preview environments check out [this blog post](https://medium.com/@MichalFoksa/jenkins-x-preview-environment-3bf2424a05e4)\n",
            "content/en/v3/develop/environments/promotion/_index.md": "---\ntitle: Promotion\nlinktitle: Promotion\ntype: docs\ndescription: How Apps are Promoted across Environments\nweight: 250\n---\n\nWhen changes are merged to the main branch in the Jenkins X pipeline catalog a new versioned release is created (with a new image and helm chart). This new version is then promoted by creating Pull Requests on GitOps repositories.\n\n## How it works\n\nThe release pipelines use the [jx promote --all](https://github.\ncom/jenkins-x/jx-promote/blob/master/docs/cmd/jx-promote.md#jx-promote) command which creates Pull Requests on all \nEnvironments configured in your `jx-requirements.yml` file and possibly `.jx/gitops/source-config.yaml` or \n`.jx/settings.yaml` (see the [Configuration](/v3/develop/environments/config/)).\n\n* every environment which is defined as `promotionStrategy` **Auto** or **Manual** is included in a Pull Request to promote the new version to that environment\n\n  * **Auto** means the Pull Request will automatically merge if its successful (the Pull Request pipeline succeeds)\n\n  * **Manual** means the Pull Request is a draft and won't automatically merge. i.e. the Pull Request needs to be manually approved (comment `/approve`) and taken off hold (comment `/hold cancel`). \n\n* all local Environments of the promotion kind **Auto** are promoted using a single Pull Request so that all the promotions automatically merge if the pull request pipeline validates successfully.\n\n* you can define multiple local or remote Environments for different system / integration testing environments.\n\n\n## Disable Promotion\n\nIf you want to disable promotion Pull Requests on an environment just remove the entry or configure the \n`promotionStrategy` to be **Never**.\n\n## Reuse pull requests\n\nBy default a new pull request is created for each promotion. You can instead make existing open pull requests for \npromoting an application be reused. \n\nEnabling reuse of pull requests for `jx promote` is done in `jx-requirements.yaml` by setting `reusePullRequest` to \n`true` for an environment. It can also be done in the same way when configuring environments others ways. See \nhttps://jenkins-x.io/v3/develop/environments/config/ for more details about configuring environments.\n\nThere are two main reasons why you would want to enable this:\n\nTo reduce conflicts: if a pull request is created before a previous pull request for upgrading the same application is \nmerged there will be a conflict when the earlier pull request is merged. Since enabling reuse means that `jx \npromote` won't open more pull requests for an application this can't happen. \n\nThe other reason is if you make use of the functionality to propagate application changelogs to cluster \nrepositories. This is described in the blog post\n[Improve your changelogs](/blog/2023/05/24/propagate-changelogs/#reuse-pull-requests).\n\n## Synchronizing environments or namespaces\n\nBy default each release of each microservice creates a Pull Request to upgrade that specific microservice to a new version in each of your environments - e.g. `Staging` and `Production`.\n\nWhen human approval is required in, say, `Production` you can end up with the `drift` between the 2 environments and want an easy way to bring them in sync.\n\n\nThe default with Jenkins X is for each new version of each microservice to be promoted immediately to `Staging`. You may want to test the combination of microservices together for a while beforethen choosing to promote changes to production and may want to do this in one atomic Pull Request and commit/merge.\n\nIf you wish to work in this way you can create a single Pull Request promoting all of the changes of apps between 2 environments or namespaces.\n\nYou can use the [jx updatebot sync](/v3/develop/reference/jx/updatebot/sync/) command to synchronise 2 environments or namespaces to reduce drift by creating a single Pull Request to add any missing applications or upgrade them.\n\n```bash \n# synchronizes the apps in 2 of your environments (local or remote)\njx updatebot sync --source-env staging --target-env production\n```\n\nThis works whether the environments are separate namespaces within the same kubernetes cluster or you are using [Multiple Cluster](/v3/admin/guides/multi-cluster/)\n\nNote that if you are using [Multiple Clusters](/v3/admin/guides/multi-cluster/) make sure your terminal is connected to the development cluster before running [jx updatebot sync](/v3/develop/reference/jx/updatebot/sync/)\n",
            "content/en/v3/develop/faq/_index.md": "---\ntitle: FAQ\nlinktitle: FAQ\ntype: docs\ndescription: Questions on using Jenkins X 3.x and helm 3\nweight: 500\naliases:\n  - /faq/\n  - /v3/guides/faq/\n  - /v3/develop/faq/\n---\n\n\n",
            "content/en/v3/develop/faq/chatops.md": "---\ntitle: ChatOps\nlinktitle: ChatOps\ntype: docs\ndescription: Using ChatOps with Jenkins X\nweight: 220\naliases:\n  - /resources/guides/using-jx/faq/chatops/\n---\n\n## What is ChatOps?\n\nWe use the phrase _ChatOps_ to mean operating code changes, pipelines and GitOps promotion via chat. More specifically this usually is done via commenting on Pull Requests on your git providers website; though in the future this could be via Slack or web consoles too.\n\n## What are the benefits of ChatOps?\n\nChatOps helps developers collaborate on Pull Requests and speeds up merging of Pull Requests. We want to be able to merge changes as quickly as possible into master so that we continuously integrate code which minimises the downsides of long term feature branching and merge hell.\n\nChatOps  (and [lighthouse in particular](#what-does-lighthouse-do) also helps automate and speeds up tasks:\n\n* developers don't have to keep hitting reload on a Pull Request page waiting for all the tests to pass so that they can click `Merge`. Just add a `/lgtm` comment or approve the code review and the Pull Request will automatically get merged once its tests go green. This also avoids developers accidentally hitting `Merge` before all the test pass!\n* all Pull Request are automatically rebased and tested against master before merging - further ensuring we don't accidentally break master\n* batch merging of Pull Requests is supported to speed up merging Pull Requests.\n\nFor more details see [what does lighthouse do](#what-does-lighthouse-do).\n\n## Which kinds of webhook support ChatOps?\n\n[Lighthouse](/v3/about/overview/#lighthouse) support these [ChatOps commands](/v3/develop/reference/chatops/)\n\n## How do I re-trigger a PR pipeline?\n\nIf a pipeline fails due to some compile error or failing test - fix the code and push your changes and the Pull Request pipeline will rerun.\n\nIf you think the pipeline failed due to some temporary infrastructure reason then you can use ChatOps to re-trigger the pipeline via commenting on the Pull Request:\n\n* `/retest` reruns only failed pipelines\n* `/test all` reruns all failed pipelines.\n* `/test foo` reruns the pipeline called `foo` only\n\nNote that you need to be in the `OWNERS` file as an [approver for this to work](#why-did-a-pullrequest-have-no-pipeline-triggered). \n\nSee the [ChatOps commands](/v3/develop/reference/chatops/)\n                    \n\n## How do I add multiple parallel pipelines to a project?\n\nIt can be useful to have multiple pipelines to perform different kinds of long running tests on Pull Requests. e.g. running the same test suite using different databases, microservice configurations or underlying infrastructure.\n\nIn Jenkins X you can create a custom `Scheduler` resource in your [jx boot](/docs/getting-started/setup/boot/) configuration (in `env/templates/myscheduler.yaml`) which you can add multiple named contexts in the `presubmits` section. Then for each context name make sure you have a file called `jenkins-x-${context}.yml` in your project. \n\nThen Jenkins X will invoke each context on demand via `/test mycontext` or automatically if you enable `alwaysRun: true`.\n\nYou can see how we define lots of [parallel testing contexts in the version stream here](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/f377a72498282de9ee49b807b4d5ba74321a4fab/env/templates/jx-versions-scheduler.yaml#L18) which all run in parallel and report their status on each pull request on the [version stream](/about/concepts/version-stream/)\n\nSee also [How do I map SourceRepository to a custom Scheduler?](/docs/resources/faq/setup/#how-do-i-map-sourcerepository-to-a-custom-scheduler)\n\n## What does lighthouse do?\n\nLighthouse handles webhooks and implements these [ChatOps commands](/v3/develop/reference/chatops/)\n\nTo see what each of the parts of lighthouse do please refer to the [lighthouse components overview](/v3/about/overview/#lighthouse)\n\n\n## How can I make ChatOps HA?\n\nTo make ChatOps highly available scale up the [lighthouse webhook deployment](/v3/about/overview/#lighthouse)  which listen for http requests to, say, 3 replicas.\n\n## How to handle a flaky/broken pipeline\n\nIf you have a pending Pull Request which is blocked on a flaky test or an incorrectly failing lint or code review; you can use ChatOps to override its status via the ChatOps command: `/override nameOfPipeline`\n\n## Why did a PullRequest have no pipeline triggered?\n\n[Lighthouse](/v3/about/overview/#lighthouse) use an `OWNERS` file stored in each git repository to define which developers are allowed to review and approve changes. You can even limit those roles to different folders.\n\nIf a non-reviewer submits a Pull Request it won't trigger CI pipelines by default until a reviewer adds an `/ok-to-test` comment on the Pull Request.\n\nIf you have public git repositories this also avoids the security issue of a non-approver submitting a Pull Request to change the pipeline to email them your security credentials in the CI pipeline ;)\n\n## How do I configure multiple approvers\n\nYou may want to use multiple people to approve pull requests. e.g. to approve promotion Pull Requests on your Production cluster git repository\n\nIf so you could let github perform the approval and auto-merge for you.\n\nYou can then use the `review_approved_required` property in the `Scheduler` to disable keeper from trying to automatically merge pull requests.\n\nThe version stream comes with a scheduler configured for this called [environment-review-required.yaml](https://github.com/jenkins-x/jx3-versions/blob/master/schedulers/environment-review-required.yaml) so just modify your `.jx/gitops/source-config.yaml` file to specify `scheduler: environment-review-required` for the repository in question like this:\n\n```yaml \napiVersion: gitops.jenkins-x.io/v1alpha1\nkind: SourceConfig\nmetadata:\n  creationTimestamp: null\nspec:\n  groups:\n  - owner: myorg\n    provider: https://github.com\n    providerKind: github\n    repositories:\n    - name: some-env-repo\n      scheduler: environment-review-required\n    scheduler: in-repo\n```",
            "content/en/v3/develop/faq/config/_index.md": "---\ntitle: Configuration\nlinktitle: Configuration\ntype: docs\ndescription: Questions on configuring Jenkins X\nweight: 300\n---\n\n",
            "content/en/v3/develop/faq/config/charts.md": "---\ntitle: Charts and resources\nlinktitle: Charts and resources\ntype: docs\ndescription: Questions on configuring applications, charts and kubernetes resources\nweight: 150\n---\n\n## How do I add a chart?\n\nTo add a new chart add to the `helmfiles/mynamespace/helmfile.yaml` file follow the [add chart guide](/v3/develop/apps/#adding-charts).\n\n## How do I customise an App in an Environment?\n\nWe use [helmfile](https://github.com/roboll/helmfile) to configure helm charts whether its in the `dev`, `staging` or `production` environment and whether you are using [multiple clusters](/v3/guides/multi-cluster/).\n\nSee [how to customise a chart](/v3/develop/apps/#customising-charts)\n\nFor a given namespace called `ns` there is a folder in the cluster git repository at:\n\n```bash\nhelmfiles/ns/\n```\n\nwhich contains the `helmfile.yaml` file to configure all the charts for that namespace.\n\nTo override the environment configuration for the namespace `ns` you can create your own `values.yaml` file in this folder (or `values.yaml.gotmpl` if you want to use go templating inside it).\n\nIf the configuration only applies to a single chart you could prefix the file with the chart name.\n\nSo create `helmfiles/ns/mychart-values.yaml` and put whatever environment specific configuration changes you need for your helm chart.\n\nTo set a custom environment variable try a `helmfiles/ns/mychart-values.yaml` file of something like:\n\n```yaml\nenv:\n  MY_ENV: someValue\n```\n\nThen you need to reference this YAML file in the `releases:` section in the `helmfiles/ns/helmfile.yaml`.\n\ne.g. your `helmfiles/ns/helmfile.yaml` should look something like this - see the new `mychart-values.yaml` entry in the `releases.values` section for `mychart`:\n\n```yaml\nfilepath: \"\"\nenvironments:\n  default:\n    values:\n      - jx-values.yaml\nnamespace: jx-staging\nrepositories:\n  - name: dev\n    url: http://chartmuseum-$mydomain/\nreleases:\n  - chart: dev/mychart\n    version: 0.0.12\n    name: mychart\n    values:\n      - jx-values.yaml\n      - mychart-values.yaml\ntemplates: {}\nrenderedvalues: {}\n```\n\n## How do I use a chart from a secure repository\n\nSome chart repositories need a username and password to access them.\n\nSo to access those chart repositories you can the username and password into the `helmfile.yaml`\n\nHowever the username/passwords are probably secret. So you can [create a kubernetes Secret](https://kubernetes.io/docs/tasks/configmap-secret/managing-secret-using-kubectl/) called `jx-boot-job-env-vars` which is automatically used in the [boot Job](/v3/about/how-it-works/#boot-job)\n\ne.g.\n\n```bash\n# lets make sure we are in the jx-git-operator namespace\njx ns jx-git-operator\n\nkubectl create secret generic jx-boot-job-env-vars \\\n  --from-literal=MYREPO_USERNAME=someuser \\\n  --from-literal=MYREPO_PASSWORD='S!B\\*d$zDsb='\n```\n\nAny environment variables defined in the `jx-boot-job-env-vars` Secret can then be used in your `helmfile.yaml` as follows:\n\n```yaml\nrepositories:\n  - name: myrepo\n    url: https://something.com\n    username: '{{ requiredEnv \"MYREPO_USERNAME\" }}'\n    password: '{{ requiredEnv \"MYREPO_PASSWORD\" }}'\nreleases:\n  - chart: myrepo/mychart\n    name: mychart\n    version: 1.2.3\n```\n\n## How do I add a kubernetes resource?\n\nTo add a new kubernetes resource [follow the add resources guide](/v3/develop/apps/#adding-resources).\n\nThe default `helmfile.yaml` files take references to helm charts.\n\nIf you want to deploy one or more kubernetes resources [wrap them in a local chart in your dev cluster git repository](/v3/develop/apps/#adding-resources)\n\n## How do I deploy an app with no chart?\n\nSome microservices on kubernetes do not yet come packaged as a helm chart.\n\ne.g. if the only instructions on the website of the microservice is something like\n\n```bash\n# install this appication via:\nkubectl apply -f https://acme.com/foo.yaml\n```\n\nIf you want you can just install it like the above `kubectl apply` command.\n\nThough you then lose the benefits of GitOps in that all changes to your cluster are auditted and versioned in git and it's easy to rollback changes.\n\nSo another approach is to follow the [create a local chart](/v3/develop/apps/#adding-resources) instructions:\n\n```bash\nmkdir charts/myname/templates\ncurl -L https://acme.com/foo.yaml > charts/myname/templates/resources.yaml\necho \"apiVersion: v1\ndescription: A Helm chart for myname\nname: myname\nversion: 0.0.1\" > charts/myname/Chart.yaml\n```\n\nThen add the following `chart:` line to your `helmfiles/$namespace/helmfile.yaml` in the `releases:` section for the namespace you want to deploy it in...\n\n```yaml\nreleases:\n  - chart: ../../charts/myname\n    name: myname\n```\n\nIf this is a brand new namespace which didn't have a `helmfiles/$namespace/helmfile.yaml` then make sure you also add an entry in the root `helmfile.yaml` file of:\n\n```yaml\nhelmfiles:\n  - path: helmfiles/$namespace/helmfile.yaml\n```\n\nNote that `$namespace` in the above files should be expanded to the actual namespace you are deploying it to; e.g. `jx` or `jx-staging` or whatever.\n\nThe above may seem like a bit of work compared to `kubectl apply` but it does mean at any time you can upgrade the app by re-running the command:\n\n```bash\ncurl -L https://acme.com/foo.yaml > charts/myname/templates/resources.yaml\n```\n\nYou can also easily uninstall the application or modify the YAML in git at any time.\n\n## How do I add a database?\n\nIf you are building a new microservice that needs a database there's a few ways to do it.\n\nIf your microservice has its own database that is not used by any other microservices you can create a _nested chart_ add it to the `Chart.yaml` `dependencies` section as [described here](https://helm.sh/docs/helm/helm_dependency/). Though that can be confusing as you now need to configure the dependent chart by wrapping its configuration in a YAML key (e.g. the release name you picked or maybe the chart name) which can be confusing - particularly if someone wants to [configure your database differently in a separate environment](/v3/develop/faq/config/charts/#how-do-i-customise-an-app-in-an-environment)\n\nSo we recommend you avoid nested charts and just add your dependent charts to your `preview/helmfile.yaml` for [Preview Environments](/v3/develop/environments/preview/) and [add it to the staging and production environments](/v3/develop/apps/#adding-charts) so they can all be [configured in the same way](/v3/develop/faq/config/charts/#how-do-i-customise-an-app-in-an-environment) via [helmfile configuration](https://github.com/roboll/helmfile#configuration) usually via adding a [custom values.yaml file and adding it into the releases section](/v3/develop/apps/#customising-charts)\n\n## How do I annotate a namespace?\n\nFor permanent environments like `Dev`, `Staging` or `Production` you can add the annotated `Namespace` [resource into a chart](/v3/develop/apps/#adding-resources)\n\nFor [Preview Environments](/v3/develop/environments/preview/) you can add the `kubectl annotate ns foo` step into a helmfile hook in the `preview/helmfile.yaml`\n",
            "content/en/v3/develop/faq/config/general.md": "---\ntitle: General\nlinktitle: General\ntype: docs\ndescription: General questions on configuration\nweight: 100\n---\n\n## What is the directory layout?\n\nTo understand the directory layout see [this document](https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md) and the [file reference](/v3/develop/reference/files/)\n       \n\n## How do I add an Environment\n\nWith v3 everything is done via GitOps - so if in doubt the answer is to modify git. \n\nYou can create new environments by adding to the `environments:` section of [jx-requirements.yml](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/jx-requirements.yml#L18)\n \n## How do I change promotion for my app?\n\nUsually when you [import a repository or create a quickstart](/v3/develop/create-project/) they inherit the default environments for [promotion](/v3/develop/environments/promotion/). It is common to share the same environments across all of your microservices.\n\nIf you want to change that on a per repository/microservice basis you can [configure custom environments for a repository](/v3/develop/environments/config/#custom-environments-per-repository)\n\n## How do I specify DOCKER_REGISTRY_ORG?\n\nIf you need to you can override in a specific repository (via a `.jx/settings.yaml` in your repository) but usually its common to all repos and is inherited from your `jx-requirements.yml` in your development environment repository\n\nSee the [file reference](/v3/develop/reference/files/)\n       \n## How do I configure Kaniko flags?\n\nIf you want to globally define a kaniko flag for all pipelines you can add the flags to your `jx-requirements.yml` file:\n\ne.g. add something like this:\n\n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  autoUpdate:\n    autoMerge: true\n    enabled: true\n    schedule: 0 0 * * *\n  cluster:\n    kanikoFlags: \"--snapshotMode=redo\"     \n```\n\n## If I add a file to `config-root` it gets deleted, why?\n\nThe `config-root` directory is regenerated on every boot job - basically every time you promote an application or merge a change into the main branch of your git dev cluster git repository.  For background see the [dev git repository layout docs](https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md))\n\nTo add a new chart add to the `helmfiles/mynamespace/helmfile.yaml` file follow the [add chart guide](/v3/develop/apps/#adding-charts).\n\nTo add a new kubernetes resource [follow the add resources guide](/v3/develop/apps/#adding-resources).\n\n## How do I add a user to my Jenkins X installation?\n          \nThere are a number of different levels of access you may wish to grant:\n\n### git\n\nWhen developers are [developing software that has its CI/CD automated by Jenkins X](/v3/develop/developing/) then usually letting the developer access git is enough.\n\n### dashboard\n\nThough being able to see the logs of pipelines is useful so you probably want to either share the basic auth user/password for the [Dashboard](/v3/develop/ui/dashboard/) or to configure full Auth0/OAuth single sign on access to the [Dashboard](/v3/develop/ui/dashboard/). Then developers will be able to browse the [Dashboard](/v3/develop/ui/dashboard/) or click on Pull Request and Release links on your git website. \n\n### kubernetes \n\nIf you want to give full access to Jenkins X so that developers can access kubernetes resources via `kubectl`, can use the [jx cli](/v3/develop/reference/jx/) or can use the [Octant console](/v3/develop/ui/octant/) then you need to grant Cloud IAM roles to the developer using your cloud infrastructure.\n\nIf the developer does not have access to the kubernetes cluster we need to setup their `~/.kube/config` file so that they can access it.\n\nIf you are using Google's GKE then you can browse the [GKE Console](https://console.cloud.google.com) to view all the clusters and click on the `Connect` button next to your development cluster and then that lets you copy/paste the command to connect to the cluster.\n\nFor other types of clusters please review the Kubernetes documentation for how to grant access to your cluster via your cloud providers CLI / web console.\n\n\n#### testing kubernetes access\n\nOnce your user has access to the kubernetes cluster:\n\n* [install the jx binary](/v3/admin/setup/jx3/)\n\nIf Jenkins X was installed in the namespace `jx` then the following should [switch your context](/docs/resources/guides/using-jx/developing/kube-context/) to the `jx` namespace:\n\n```bash \njx ns jx\n```\n\nTo view the environments try:\n\n```bash \nkubectl get environments\n```\n      \nTo view the SourceRepositories:\n\n```bash \nkubectl get sr\n```\n\nTo use the [jx cli](/v3/develop/ui/cli/) try:\n\n```bash \njx pipeline grid\n```\n\n(and hit Ctrl-c or `q` to quit)\n",
            "content/en/v3/develop/faq/config/ingress.md": "---\ntitle: Ingress\nlinktitle: Ingress \ntype: docs\ndescription: Questions on ingress and load balancing\nweight: 390\n---\n\n## How do I configure the ingress domain in Dev, Staging or Production?\n\nWith the new helm 3 based boot every environment uses boot - so there is a single way to configure anything whether its in the `dev`, `staging` or `production` environment and whether or not you are using [multiple clusters](/v3/guides/multi-cluster/).\n\nYou can override the domain name for use in all apps within an environment by modifying the `jx-requirements.yml` in the git repository for the `dev`, `staging` or `production` environment.\n\n```yaml \ningress:\n  domain: mydomain.com \n```\n\nAlso by default there is a namespace specific separator added. So if your service is `cheese` the full domain name would be something like `cheese.jx-staging.mydomain.com`.\n\nIf you wish to avoid the namespace specific separator if each environment already has its own unique `domain` value then you can specify:\n\n```yaml \ningress:\n  domain: mydomain.com  \n  namespaceSubDomain: \".\"\n```\n\nIf you wish to change any of these values for a single app only then you can use the [app customisation mechanism](/v3/develop/apps/#customising-charts).\n\ne.g. for an app called `mychart` you can create a file called `apps/mychart/values.yaml` in the git repository for your environment and add the following YAML:\n\n```yaml \njxRequirements:\n  ingress:\n    domain: mydomain.com  \n    namespaceSubDomain: \".\"\n```\n\n\n\n## How do I configure the ingress TLS certificate in Dev, Staging or Production?\n\nYou can specify the TLS certificate to use for the `dev`, `staging` or `production` environment by modifying the `jx-requirements.yml` file in the environments git repository:\n\n\n```yaml \ningress: \n  tls:\n    enabled:\n    secretName: my-tls-secret-name\n```\n\nThis will then be applied to all the Jenkins X ingress resources for things like `lighthouse` or `nexus` - plus any apps you deploy to `dev`, `staging` or `production`.\n\nIf you want to override the TLS secret name for a specific app in a specific environment then rather like the [above question](#how-do-i-configure-the-ingress-domain-in-dev-staging-or-production) you can use the [app customisation mechanism](/v3/develop/apps/#customising-charts).\n \ne.g. for an app called `mychart` you can create a file called `apps/mychart/values.yaml` in the git repository for your environment and add the following YAML:\n                                                                                                                                        \n```yaml \njxRequirements:\n  ingress:\n    tls:\n      enabled:\n      secretName: my-tls-secret-name\n```\n\n\n## How To Add Custom Annotations to Ingress Controller?\n\nThere may be times when you need to add your custom annotations to ingress resources.\n\nThe simplest way to do this is to modify the `jx-requirements.yml` in your development git repository to add any ingress annotations you wish:\n\n\n```yaml\napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  ingress:\n    annotations:\n      myannotation: somevalue\n    domain: my.domain.com\n```\n\nOnce you have commit and push this change it will [trigger another boot job](/v3/about/how-it-works/#boot-job)\n\nYou can watch the boot job run via:\n\n```bash \njx admin log -w\n```\n\nOnce its complete you should see the new annotations on any Ingress created by Jenkins X.\n\nIf you wish to add custom annotations to only a specific ingress then you can [customise the chart](/v3/develop/apps/#customising-charts) in the usual [helmfile](https://github.com/roboll/helmfile) way via a `values.yaml` file you reference in your `helmfile.yaml` file\n\n\n## How do I diagnose webhooks?\n\nSee [How to diagnose webhooks](/v3/admin/troubleshooting/webhooks/)\n\n## How do I use webhooks without a public IP?\n\nIf you are running on your laptop or in a private cluster you won't be able to use webhooks on your git provider to trigger pipelines.\n\nA workaround is to use [use something like ngrok to enable webhooks](/v3/admin/platforms/on-premises/webhooks/)\n\n## How do I configure to use v1beta1 Ingress?\n\nWe recently upgraded to default to `Ingress` `networking.k8s.io/v1` which is included from version 1.19 as the older `networking.k8s.io/v1beta1` is deprecated and to be removed in v 1.22. \n\nIf you are on 1.18 we recommend you upgrade to 1.19 if you can.\n\nIf not here's how to configure Jenkins X to use the deprecated `networking.k8s.io/v1beta1` version:\n\n* create this file at `helmfiles/jx/jxboot-helmfile-values.yaml`:\n\n```yaml \ningress:\n  apiVersion: networking.k8s.io/v1beta1\n```\n\n* then add it at the last item in `helmfiles/jx/helmfile.yaml` for the release of the chart `jx3/jxboot-helmfile-resources`. So your file should look something like\n\n```yaml\nreleases:\n... \n- chart: jx3/jxboot-helmfile-resources\n  version: 1.0.63\n  name: jxboot-helmfile-resources\n  values:\n  - ../../versionStream/charts/jx3/jxboot-helmfile-resources/values.yaml.gotmpl\n  - jx-values.yaml\n  - jxboot-helmfile-values.yaml\n```\n\n* create this file at `helmfiles/jx/jx-pipelines-visualizer-values.yaml`:\n\n```yaml \ningress:\n  apiVersion: networking.k8s.io/v1beta1\n```\n\n* then add it at the last item in `helmfiles/jx/helmfile.yaml` for the release of the chart `jx3/jx-pipelines-visualizer`. So your file should look something like\n\n```yaml\nreleases:\n... \n- chart: jx3/jx-pipelines-visualizer\n  version: 1.7.1\n  name: jx-pipelines-visualizer\n  values:\n  - ../../versionStream/charts/jx3/jx-pipelines-visualizer/values.yaml.gotmpl\n  - jx-values.yaml\n  - jx-pipelines-visualizer-values.yaml\n```\n\nThen when you git commit these changes and your build job completes (e.g. watch it via `jx admin log -w`) your ingress resources should now be using `networking.k8s.io/v1beta1`",
            "content/en/v3/develop/faq/config/registries.md": "---\ntitle: Registries\nlinktitle: Registries\ntype: docs\ndescription: Questions on registries and repositories\nweight: 154\n---\n\n## How do I use a custom container registry?\n\nWhat container registry is used by default depends on the which cloud provider you use. There are some things to consider when [migrating from container registry to artifact registry in Google GCP](https://github.com/jenkins-x/terraform-google-jx#migration-from-container-to-artifact-registry).\n\nTo allow a pipeline to be able to push to a container registry you can add this secret...\n\n```bash\nkubectl create secret generic container-registry-auth  \\\n  --from-literal=url=myserver.com \\\n  --from-literal=username=myuser \\\n  --from-literal=password=mypwd\n```\n\nThis will then take effect the next time a commit merges on your cluster git repository e.g. next time you [upgrade your cluster](/v3/guides/upgrade/#cluster).\n\nThe various container registry secrets get merged into a `Secret` called `tekton-container-registry-auth` in the `jx` namespace which is associated with the default pipeline `ServiceAccount` `tekton-bot`.\n\n\nIf you want all pipelines to use this container registry then modify the `cluster.registry` field in your `jx-requirements.yml` file:\n\n```yaml\ncluster:\n  registry: myserver.com \n...\n```\n\nOtherwise you can enable this new container registry on a specific application/repository by adding this `.jx/variables.sh` file into the git repository if it doesn't exist...\n \n```bash\nexport DOCKER_REGISTRY=\"myserver.com\"\n```\n      \n## How do I switch to github pages for charts?\n\nUsing a local chart museum or bucket repo chart for installing charts can be troublesome if you just have 1 cluster and you are using it for dev, staging and production. \n\ne.g. if you delete your cluster and try reboot everything, there's initially no chart museum or bucket repo so that the staging / production helmfiles won't be able to find the charts and your boot job will fail.\n    \nUsing [multiple clusters](/v3/admin/guides/multi-cluster/) at least lets you destroy and recreate each cluster independently.\n\nA workaround while you bring back your cluster is to comment out the staging and production `helmfile.yaml` files in the `helmfile.yaml` file in the root directory.\n\nWe recommend [using cloud services and storage where possible](/v3/devops/cloud-native/#prefer-cloud-over-kubernetes). \n\nLonger term we expect folks to move towards using OCI and your container registry to host your helm charts so that its always highly available in all clusters/locations. Though there is still integration work required with [helm](https://helm.sh/) and [helmfile](https://github.com/roboll/helmfile) to make that completely seamless right now (particularly with secrets and cloud IAM roles).\n\nSo one option is to use github pages as your chart repository - so that your charts are always accessible for the staging/production namespaces/clusters even if you recreate your cluster from scractch.\n\nTo switch to use github pages for your container registry, modify your [jx-requirements.yml](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) to:\n          \n```yaml\napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  cluster:\n    chartRepository: https://github.com/myorg/mycharts.git\n    chartKind: pages  \n    ...\n```\n\n\n## How do I switch to bucketrepo?\n\nTo switch from `nexus` to `bucketrepo` in V3 there are a few changes you need to make. \n\nIncidetally the [jx3-kubernetes](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/) repository is already setup for`bucketrepo`.\n\nPlease make the following changes...\n\n* remove your old `nexus` chart from `helmfiles/jx/helmfile.yaml`\n* add this to your `jx-requirements.yml` file so its like [this one](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/jx-requirements.yml#L8)\n\n```yaml \napiVersion: core.jenkins-x.io/v4beta1\nkind: Requirements\nspec:\n  ...\n  cluster:\n    chartRepository: http://bucketrepo.jx.svc.cluster.local/bucketrepo/charts\n...\n  repository: bucketrepo\n    \n```\n* add the `bucketrepo` chart to your `helmfiles/jx/helmfile.yaml` file [like this](https://github.com/jx3-gitops-repositories/jx3-kubernetes/blob/master/helmfiles/jx/helmfile.yaml#L42):\n\n```yaml \n...\nreleases:\n- chart: jenkins-x/bucketrepo\n  name: bucketrepo\n...\n```\n\nthen git commit and you should have your cluster switched to bucketrepo\n\n\n\n",
            "content/en/v3/develop/faq/config/repos.md": "---\ntitle: Repositories\nlinktitle: Repositories\ntype: docs\ndescription: Questions on configuring repositories differently\nweight: 157\n---\n\n## How do I customise a Scheduler?\n\nThe [.jx/gitops/source-config.yaml](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig) file in your dev cluster git repository lets you configure the name of the `scheduler` to use for all repositories, for a group of repositories or for an individual repository.\n\nThe `schedular` name is then resolved to be either a file `versionStream/schedulers/$name.yaml`  or `schedulers/$name.yaml`. \n\nSo if you want to create your own `Scheduler` you could copy the default in-repo based scheduler `versionStream/schedulers/in-repo.yaml` to `schedulers/myname.yaml` and then modify it to suit - then associate `myname` with whatever repositories you wish to use this scheduler for. \n\nHere is the [default in-repo scheduler](https://github.com/jenkins-x/jx3-versions/blob/master/schedulers/in-repo.yaml) used to define the labels and merge strategy etc.\n\nOnce you\u2019ve made your changes to any `Scheduler` and merged changes into your dev cluster repository a [boot job should trigger](/v3/about/how-it-works/#boot-job).\n\nYou can watch the boot job run via `jx admin log -w`. Once that is complete you should be able to see the effect of the changes in the `config` and `plugins` `ConfigMap` resources in the `jx` namespace which are then used by [lighthouse](/v3/about/overview/#lighthouse)\n\n```bash \nkubectl get cm config -n jx -oyaml\nkubectl get cm plugins -n jx -oyaml\n```\n\n## How do I configure Slack notifications?\n\n\nYou can modify the [.jx/gitops/source-config.yaml](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig) file in your dev cluster git repository to use custom \n\nSee the [slack configuration guide](/v3/develop/ui/slack/#configuring-slack-notifications)\n",
            "content/en/v3/develop/faq/config/secrets.md": "---\ntitle: Secrets\nlinktitle: Secrets\ntype: docs\ndescription: Questions on secrets and external secrets\nweight: 200\n---\n\n## How do I add a new Secret?\n\nSee [how to add a new Secret](/v3/admin/setup/secrets/#create-a-new-secret)\n\n## How do I edit a secret?\n\nSecrets are [stored in external secret storage](/v3/admin/setup/secrets/) like Vault or your cloud providers secret store.\n\nSo you can edit them in the underlying secret store directly (e.g. with your cloud providers CLI or the vault CLI).\n\nOr you can use [jx secret edit](/v3/admin/setup/secrets/#edit-secrets) command to do this for you.\n\nThe [interactive mode](/v3/admin/setup/secrets/#interactive-mode) is a nice way to find the secret and property you want to edit, then edit...\n\n```bash\njx secret edit -i\n```\n\nIf you are using vault (deployed by jx) to store your secrets, remember to run:\n\n```\njx secret vault portforward\n```\n\nin a separate terminal before running the secret edit command.\nLook at external vault [documentation](/v3/admin/setup/secrets/vault/#local-jx-secret-with-external-vault) to see how to port forward before editing secrets.\n\n## How do I edit the bot token?\n\nThe git operator secret is normally updated whenever you re-install the git operator via Terraform or [install the operator via the CLI](/v3/admin/setup/operator/).\n\nYou can delete the git operator via:\n\n```bash\nhelm delete jx-git-operator -n jx-git-operator\n```\n\nThere are a number of other places you need to change the bot token.\n\nFirst check out [how to edit secrets](/v3/develop/faq/config/secrets/#how-do-i-edit-a-secret) for background.\n\nSecrets are [stored in external secret storage](/v3/admin/setup/secrets/) like Vault or your cloud providers secret store.\n\nSo you can edit them in the underlying secret store directly (e.g. with your cloud providers CLI or the vault CLI).\n\nWhen you first boot up Jenkins X it will auto-populate the secrets in the external secret store with the bot user and password you pass in when you run.\n\nThe bot user and password is replicated into a number of different secrets. This is so that you can use separate accounts and tokens if you wish; or even change scopes per use.\n\nThough it does mean you've a few different places to change the bot token if you choose to change it.\n\nThe [interactive mode](/v3/admin/setup/secrets/#interactive-mode) is probably the simplest way to change a secret:\n\n```bash\njx secret edit -i\n```\n\nThen to change a bot token you will need to change these secrets:\n\n| Secret Name              | Property              |\n| ------------------------ | --------------------- |\n| `lighthouse-oauth-token` | `oauth`               |\n| `tekton-git`             | `username` `password` |\n\nOnce you have made your changes you can verify the changes have taken place.\n\ne.g. if you have [ksd](https://github.com/mfuentesg/ksd) installed on your `$PATH`:\n\n```bash\nkubectl get secret -oyaml lighthouse-oauth-token | ksd\n```\n\n## How do I configure secrets differently in Staging versus Production?\n\nThe simplest solution is to use [multiple clusters](/v3/admin/guides/multi-cluster/) then you can have a separate secrets manager (cloud secret store or vault instance) per cluster.\n\nOtherwise here are a few options:\n\n- add an `ExternalSecret` into your helm charts instead of a kubernetes `Secret` and configure it based on the namespace (or other settings in your chart) to choose different secret store locations to populate the `Secret`.\n\n  - e.g. if you are sharing a Vault between staging and production then you can use different paths in vault; or if you are using a cloud secret store you can use different projects / accounts / secret locations etc.\n  - to help migrate from Secret -> ExternalSecret you could start off with the generated ExternalSecret yaml file in the `config-root/namespaces/$namespace/$chart/$name-secret.yaml` file and copy it into your apps `charts/$appName/templates` directory then parameterise it in the usual helm way with `{{ .Values.something }}` expressions where you need to configure things differently per namespace/environment.\n\n- for Vault you can specify an annotation on your `Secret` to use a custom prefix in the vault paths for different namespaces or environments:\n\ne.g. in your `Secret` in `charts/$appName/templates/something-secret.yaml` you can use something like this:\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: something\n  annotations:\n    secret.jenkins-x.io/prefix: \"{{ .Values.secretPrefix }}\"\ntype: Opaque\ndata:\n```\n\nThen add to your `charts/$appName/values.yaml` file something like:\n\n```yaml\n# default secret prefix location in vault\nsecretPrefix: staging\n```\n\nThen in the production environment you can create a values.yaml file like this:\n\n```yaml\nsecretPrefix: production\n```\n\nand passing this values.yaml file into the `helmfiles/jx-production/helmfile.yaml` file for your charts `release:` entry [to customize the chart](/v3/develop/apps/#customising-charts)\n\nThis will then use different paths in vault for staging: `secret/data/staging/$appName/something/$key` to production: `secret/data/production/$appName/something/$key`\n\n## How do I change the secret poll period in kubernetes external secrets?\n\nYour cloud provider could charge per read of a secret and so a frequent poll of your secrets could cost $$$. You may want to tone down the poll period.\n\nYou can do this via the `POLLER_INTERVAL_MILLISECONDS` setting in the [kubernetes external secrets configuration](https://github.com/external-secrets/kubernetes-external-secrets/tree/master/charts/kubernetes-external-secrets#configuration)\n\nFor more details [see how to configure charts](https://jenkins-x.io/v3/develop/apps/#customising-charts)\n\n## How do I switch to GSM from Vault?\n\nWe recommend you use [cloud secret managers over vault](/v3/devops/cloud-native/#prefer-cloud-over-kubernetes) as its easier to manage; let your cloud provider do the undifferentiated heavy lifting for you.\n\nIf you spin up a cluster on vault and want to switch over to, say, GSM here's how:\n\n- set the `gsm` variable to true in terraform as [described in the getting started guide](https://github.com/jx3-gitops-repositories/jx3-terraform-gke/blob/master/README.md#getting-started) using your terraform/infrastructure git repository:\n\n```bash\necho \"gsm = true\" >> values.auto.tfvars\n\ngit add *\ngit commit -a -m \"fix: enable gsm\"\n\nterraform plan\nterraform apply\n```\n\n- in your dev cluster git repository (which has a `helmfile.yaml` inside) modify the `jx-requirement.yml` switch the `secretStorage` line to:\n\n```yaml\nsecretStorage: gsm\n```\n\n- download [kpt](https://github.com/GoogleContainerTools/kpt/releases) and add it to your $PATH\n\n- run the following to replace your vault secret mapping files with gsm versions:\n\n```bash\nrm -rf .jx/secret/mapping\n\nkpt pkg get https://github.com/jenkins-x/jx3-gitops-template.git/.jx/secret/gsm/mapping .jx/secret/mapping\nls -al .jx/secret/mapping\n\n# echo we should see secret-mappings.yaml\ngit add .jx/secret\ngit commit -a -m \"fix: migrate to gsm secret mapping\"\n\n# now lets push and watch the git operator\ngit push\njx admin log -w\n```\n",
            "content/en/v3/develop/faq/config/vault.md": "---\ntitle: Vault\nlinktitle: Vault\ntype: docs\ndescription: Questions on vault\nweight: 210\n---\n\n## After an upgrade the boot job is waiting for vault in jx-vault\n \nIn the alpha we used to install vault via the `helmfile/secret-infra/helmfile.yaml` file and install vault into the `secret-infra` namespace.\n\nA production installation of vault requires cloud resources such as a key ring, crypto key and bucket.\n\nSo to make it easier to manage vault properly with cloud resources and to simplify the operation of Jenkins X (so that the secret store can be used on an empty cluster before we boot anything in the boot process) we have moved the installation of vault into terraform. (e.g for [GKE](https://github.com/jenkins-x/terraform-google-jx/blob/master/modules/jx-boot/vault.tf))\n\nSo ideally you would re-apply your terraform using the latest terraform modules so that you get the new vault setup in the `jx-vault` namespace.\n\nA workaround if you wish to keep using your vault in your `secret-infra` namespace is to modify the first few lines starting with `VAULT` of the file: `versionStream/Makefile.mk` as follows:\n\n```makefile \nVAULT_ADDR ?= https://vault.secret-infra:8200\nVAULT_NAMESPACE ?= secret-infra\nVAULT_ROLE ?= secret-infra\n```",
            "content/en/v3/develop/faq/general.md": "---\ntitle: General\nlinktitle: General\ntype: docs\ndescription: General questions about Jenkins X\nweight: 100\n---\n\n## Where do I raise issues?\n\nOne of the challenges with Jenkins X 3.x is the [source code is spread across a number of organisations and repositories](/v3/about/overview/source/) since its highly decoupled into many [plugins and microservices](/v3/about/overview/) so it can be confusing \n\nIf you know the specific plugin causing an issue, say [jx-preview](https://github.com/jenkins-x/jx-preview) then just raise the issue there in the issue tracker.\n\nOtherwise use the [issue tracker for Jenkins X 3.x](https://github.com/jenkins-x/issues) and we can triage as required.\n\n\n\n\n## Why does Jenkins X use `helmfile template`?\n\nIf you look into the **versionStream/src/Makefile.mk** file in your cluster git repository to see how the boot process works you may notice its defined a simple makefile and uses the `helmfile template` command to convert the [helmfile](https://github.com/roboll/helmfile) `helmfile.yaml` files referencing helm charts into YAML.\n\nSo why don't we use `helmfile sync` instead to apply the kubernetes resources from the charts directly into kubernetes?\n\nThe current approach has a [number of benefits](/v3/about/benefits/):\n\n* we want to version all kubernetes resources (apart from `Secrets`) in git so that you can use git tooling to view the history of every kubernetes resource over time. \n\n\n  * by checking in all the kubernetes resources (apart from `Secrets`) its very easy to trace (and `git blame`) any change in any kubernetes resource in any chart and namespace to diagnose issues.\n  * the upgrade of any tool such as [helm](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [kustomize](https://kustomize.io/), [kpt](https://googlecontainertools.github.io/kpt/), [kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/) or [jx](/v3/guides/jx3/) could result in different YAML being generated changing the behaivour of your applications in Production.\n\n\n* this approach makes it super easy to review all Pull Requests on all promotions and configuration changes and review what is actually going to change in kubernetes inside the git commit diff.\n\n  * e.g. promoting from `1.2.3` to `1.3.0` of application `cheese` may look innocent enough, but did you notice those new `ClusterRole` and `PersistentVolume` resources that it now brings in?\n  \n* we can default to using [canonical secret management mechanism](/v3/guides/secrets/) based on [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) (see [how it works](/v3/about/how-it-works/#generate-step)) to ensure that:\n \n  * no Secret value accidentally gets checked into git by mistake\n  * all secrets can be managed, versioned, stored and rotated using vault or your cloud providers native secret storage mechanism\n  * the combination of git and your secret store means your cluster becomes ephemeral and can be recreated if required (which often can happen if using tools like Terraform to manage infrastructure and you change significant infrastructure configuration values like node pools, version, location and so forth) \n\n* its easier for developers to understand what is going on as you can browse all the kubernetes resources in each namespace using the canonical layout in the `config-root` folder. e.g. all charts are versioned in git as follows:\n                    \n```bash \nconfig-root/\n namespaces/\n   jx/\n     lighthouse/\n       lighthouse-webhooks-deploy.yaml    \n```\n\n   * you can see the above kubernetes resource, a `Deployment` with name `lighthouse-webhooks` in the namespace `jx` which comes from the `lighthouse` chart. \n\n* its easy to enrich the generated YAML with a combination of any additional tools [kustomize](https://kustomize.io/), [kpt](https://googlecontainertools.github.io/kpt/) or [jx](/v3/guides/jx3/). e.g.\n\n  * its trivial to run [kustomize](https://kustomize.io/) or [kpt](https://googlecontainertools.github.io/kpt/) to modify any resource in any chart before it's applied to Production and to review the generated values first \n\n  * its easy to use [jx gitops hash](/v3/develop/reference/jx/gitops/hash) to add some hash annotations to cause rolling upgrade to `Deployments` when git changes (when the `Deployment` YAML does not)\n\n  * use [jx gitops annotate](/v3/develop/reference/jx/gitops/annotate) to add add support for tools like [pusher wave](https://github.com/pusher/wave) so that rotating secrets in your underlying secret store can cause rolling upgrades in your `Deployments`\n\nHowever since the steps to deploy a kubernetes cluster in Jenkins X is defined in a simple makefile stored in your cluster git repository its easy for developers to modify their cluster git repository to add any combination of tools to the makefile to use any permutation of  [helm 3](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [kustomize](https://kustomize.io/), [kpt](https://googlecontainertools.github.io/kpt/)  and [kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/)\n\nSo if you really wanted to opt out of the canonical GitOps, resource and secret management model above you can add a `helm upgrade` or `helmfile sync` command to your makefile. The entire boot job is defined in git in **versionStream/git-operator/job.yaml** so you are free to go in whatever direction you prefer. \n\n\n\n## Does Jenkins X support helmfile hooks?\n\nHelmfile hooks allow programs to be executed during the lifecycle of the application of your helmfiles.\n\nSince we default to using [helmfile template](/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template) helmfile hooks are not supported for cluster git repositories (though you can use them in preview environments).\n\nHowever you can support it with the following example:\n\n## How do I add a post install hook in a cluster?\n                                                \nIf you want to perform some tasks after a promotion or configuration change in your cluster you can modify the `Makefile` in your git repository.\n\ne.g. use something like this:\n\n\n```makefile \nPOST_APPLY_HOOK = post-apply-hook\n\npost-apply-hook:\n\techo \"TODO run some tests now or trigger a Job or something...\"\n\ninclude versionStream/src/Makefile.mk\n```\n\nTo trigger the tests you could:\n\n* download binaries and run them locally via a shell script \n* create a kubernetes `Job` and verify that the job succeeds via [jx verify job](https://jenkins-x.io/v3/develop/reference/jx/verify/job/) which also tails the log\n* trigger a pipeline via [jx pipeline start](https://jenkins-x.io/v3/develop/reference/jx/pipeline/start/ )\n\n\n## How do I uninstall Jenkins X?\n\nWe don't yet have a nice uninstall command. \n\nThough if you git clone your development git repository and cd into it you can run:\n\n```bash \nkubectl delete -R -f config-root/namespaces\nkubectl delete -R -f config-root/cluster\n```\n\n\n",
            "content/en/v3/develop/faq/issues.md": "---\ntitle: Troubleshooting\nlinktitle: Troubleshooting\ntype: docs\ndescription: Questions on common issues folks hit using the cloud, kubernetes and Jenkins X\nweight: 400\n---\n\n## Why did my quickstart / import not work?\n\nIf you are not able to create quickstarts or import projects its most probably webhooks not being setup correctly.\n\nWhen the `jx project import` or `jx project quickstart` runs it creates a Pull Request on your dev cluster repository. This should [trigger a webhook](/v3/about/how-it-works/#importing--creating-quickstarts) on your git provider which should then trigger a Pipeline (via [lighthouse webhooks](/v3/about/overview/#lighthouse)). The pipeline should then  [create a second commit on the pull request](/v3/about/how-it-works/#importing--creating-quickstarts) to configure your repository which then should get labelled and auto-merge.\n\nIf this does not happen its usually your webhooks are not working. You can check on the health of your system and webhooks via the [Health guide](/v3/admin/setup/health/)\n\nCheck out the [webhooks troubleshooting guide](/v3/admin/troubleshooting/webhooks/) \n\nIf you manually merge the Pull Request by hand then you'll miss out the [create a second commit on the pull request](/v3/about/how-it-works/#importing--creating-quickstarts) which means your project won't properly import. To work around that you can do a dummy commit on your dev cluster repository which will trigger a regeneration.\n\nIf the `jx project import` or `jx project quickstart` times out before the pipeline triggers the [second commit on the pull request](/v3/about/how-it-works/#importing--creating-quickstarts) and it auto merges and triggers a boot job to setup webhooks for the new repository - you will have pipeline catalog files locally on your laptop which are not pushed to git. e.g. the `.lighthouse/*` files and maybe other files like `charts/*` and `Dockerfile`. You can always try add those files to git locally and push once you have got your webhooks working.\n\nAlso make sure that the boot Job that is triggered by the pull request merging has the necessary scopes on the git personal access token to be able to registry the webhooks on the new repository. You will see if the webhook registration has been successful in the boot log:\n\n```bash \njx admin log \n```\n\n\n## Why does my pipeline not start?\n\nIt could be your [YAML configuration](/v3/develop/reference/pipelines/) is invalid.\n\nTry [linting your YAML configuration](/v3/develop/pipelines/editing/#linting) to verify things are setup correctly.\n\nAlso make sure you are in the git repository collaborators group and are in the `OWNERS` file in the main branch.\n\n\n## Why is my pipeline pending?\n\nIf your pipeline shows pending in the [CLI](/v3/develop/ui/cli/), [Console](/v3/develop/ui/octant/) or [Dashboard](/v3/develop/ui/dashboard/) there could be various causes such as invalid images, pipeline configuration, missing secrets or insufficient cluster capacity to name but a few.\n\nTo diagnose why a pipeline pod can't run the simplest thing is to use the [Console](/v3/develop/ui/octant/)\n\n```bash \njx ui\n```\n\n* on the **Pipelines** page pick the pipeline that is having trouble (see the links you can click on the **Build** column)\n* on the **Pipeline** page there is then a **Pod** link in the navigation bar which takes you to the **Pod** view in [octant](https://octant.dev/) that lets you view the detail of the pod. From there you should be able to see any events/issues with the pod such as bad images, missing secrets or whatever.\n          \ne.g. see the **Pod** link to the left of the  **Steps** / **Logs** links in the nav bar\n\n<iframe width=\"646\" height=\"327\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n## Upgrading CLI fails \n\nI run `jx upgrade cli` and get a failure:\n\n\n```bash\n$ jx upgrade cli   \nusing latest upstream versionstream URL https://github.com/jenkins-x/jxr-versions.git from Kptfile to resolve jx-cli version\nerror: failed to find jx cli version: invalid version requested: : Version string empty `\n```\n\nThe issue is you are using an old alpha of the `jx` binary which no longer auto upgrades with the GA [jx releases](https://github.com/jenkins-x/jx/releases)\n\nTo fix please [download a new `jx` binary](/v3/admin/setup/jx3/).\n\n## Releasing a chart fails with 500\n\nIf your release pipeline fails with a HTTP 500 error pushing a helm chart to chartmuseum it could be that the chart name and version has already been released before and chartmuseum won't let you re-publish the same version of the helm chart.\n\nIf you retrigger a release on your repository (e.g. merging a git commit to the main branch), you should see a new version being created and released?\n\nIf not try create a new git tag on your repository for the next version e.g. if 0.1.2 was the last release, create a git tag of `v0.1.3` then then next release will be `0.1.4`). Then trigger a new release via a commit to the main branch.\n\nSometimes it might happen that some files will remain from a previous commit or a failed merge. Check that there is no `VERSION` file in your root directory that is exporting its value to jx operator. Also verify that there is no `export VERSION` in your `.jx/variables.yaml` file either.\n\n## My cluster is out of resources\n\nIf your cluster is out of resources and cannot deploy pods:\n\n* try modify your terraform / cluster to add more nodes, increase the auto scaling or add bigger nodes to the node pool. You can also add an additional node pool with bigger nodes\n\n* as a short term fix try scaling down some deployments - though note the next boot job will scale things back up again:\n\n```bash \nkubectl get deploy\n\n# pick one to scale down\nkubectl scale deploy someDeploymentName --replicas=0\n```\n\n* remove preview environments via:\n\n```bash \njx delete preview \n```\n\n* remove deployments you don't need by removing entries from the `releases:` section in `helmfiles/$namespace/helmfile.yaml`\n  * e.g. e.g. to remove an application from the `jx-staging` namespace remove releases from  `helmfiles/jx-staging/helmfile.yaml`\n\n## Diagnose pipeline failure via the CLI\n\nTo do this via the command line try\n\n```bash\njx get build pod\n```\n\nif you know the repository name:\n\n\n```bash\njx get build pod -r myrepo\n```\n\nThen you should be able to see the pod name for the pipeline in question. You can then use `kubectl` to destribe the issue:\n\n```bash\nkubectl describe pod the-actual-pod-name-for-your-pipeline```\n```\n\n## Why does Jenkins X fail to download plugins?\n\nWhen I run a `jx` command I get an error like...\n\n``` Get https://github.com/jenkins-x/jx-..../releases/download/v..../jx-.....tar.gz: dial tcp: i/o timeout```\n\nThis sounds like a network problem; the code in `jx` is trying to download from `github.com` and your laptop is having trouble resolving the `github.com` domain.\n\n* do you have a firewall / VPN / HTTP proxy blocking things?\n* is your `/etc/resolv.conf` causing issues? e.g. if you have multiple entries for your company VPN?\n\n## Failed calling webhook validate.nginx.ingress.kubernetes.io\n\nThis is often caused if you remove the `nginx` namespace after you installed nginx.\n\nThis is because admission webhooks are cluster scoped; not namespace scoped - so removing the nginx namespace does not remove these webhook resources - which then breaks any attempt to create `Ingress` resources until you remove them.\n\nYou can view the current tekton based hooks via:\n\n```bash \nkubectl get validatingwebhookconfigurations | grep nginx\n ```\n\nYou can remove the nginx one via:\n\n```bash \nkubectl delete validatingwebhookconfigurations ingress-nginx-admission\n```\n\nThen try do a dummy git commit in your git repository which will [trigger another boot job](/v3/about/how-it-works/#boot-job)\n\nYou can watch the boot job run via:\n\n```bash \njx admin log -w\n```\n\n\n## Tekton failed calling webhook \"config.webhook.pipeline.tekton.dev\"\n\nWhen you first install tekton your cluster can get in a bit of a mess if the kubernetes admission/mutation webhooks are registered but tekton didn't startup.\n\nAnother time folks hit this is if they delete the `tekton-pipelines` namespace thinking that gets rid of tekton and then they find they can't re-install tekton.\n\nThis is because admission/mutation webhooks are cluster scoped; not namespace scoped - so removing the tekton namespace does not remove these webhook resources - which then breaks any attempt to install tekton until you remove them.\n\nYou can view the current tekton based hooks via:\n\n```bash \nkubectl get mutatingwebhookconfigurations | grep tekton\nkubectl get validatingwebhookconfigurations | grep tekton\n ```\n\nThen find the tekton based ones and remove them. e.g. via:\n\n```bash \nkubectl delete mutatingwebhookconfigurations webhook.pipeline.tekton.dev\nkubectl delete validatingwebhookconfigurations config.webhook.pipeline.tekton.dev\nkubectl delete validatingwebhookconfigurations validation.webhook.pipeline.tekton.dev\n```\n\nThen try do a dummy git commit in your git repository which will [trigger another boot job](/v3/about/how-it-works/#boot-job)\n\nYou can watch the boot job run via:\n\n```bash \njx admin log -w\n```\n\n\n## Tekton webhook certs have expired?\n\nDelete the tekton `webhook-certs` tls secret. Then delete the `tekton-pipelines-webhook` pod and the cert should be recreated again.\n",
            "content/en/v3/develop/faq/ngrok.md": "---\ntitle: Ngrok\nlinktitle: Ngrok\ntype: docs\ndescription: Questions about setting up ngrok for local set ups\nweight: 600\n---\n\nFollow these steps to set up ngrok for local Jenkins X installs.\n\n- Download and install [ngrok](https://ngrok.com/).\n- Log into ngrok account and get the ngrok auth token (Authenticated sessions can run for unlimited time, unauthenticated sessions expire in 1.5 hours):\n\n- Create a ngrok config file at `~/.config/ngrok/ngrok.yml` with the following content (replace `<ngrok-auth-token>` with the auth token from the ngrok account):\n\n```yaml\nauthtoken: <ngrok-auth-token>\ntunnels:\n  hook:\n    proto: http\n    addr: 8080\n    schemes:\n      - http\n  ui:\n    proto: http\n    addr: 9090\n    schemes:\n      - http\nversion: \"2\"\nregion: us\n```\n\n- Verify that the config is correct using:\n\n```bash\nngrok config check\n```\n\n- Run this in a new terminal window/tab:\n\n```bash\nngrok start --all\n```\n\n- Once the command succeeds, you should see something like this:\n\n```text\nngrok                                                                                                                                                                                       (Ctrl+C to quit)\n\nHello World! https://ngrok.com/next-generation\n\nSession Status                online\nAccount                       user123 (Plan: Free)\nUpdate                        update available (version 3.0.6, Ctrl-U to update)\nVersion                       3.0.5\nRegion                        United States (us)\nLatency                       25ms\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    http://XXXX.ngrok.io -> http://localhost:8080\nForwarding                    http://YYYY.ngrok.io -> http://localhost:9090\n\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              0       0       0.00    0.00    0.00    0.00\n```",
            "content/en/v3/develop/faq/pipeline.md": "---\ntitle: Pipelines\nlinktitle: Pipelines\ntype: docs\ndescription: Questions about using Tekton pipelines with Jenkins X\nweight: 200\n---\n\n## How do I diagnose a step in a pipeline?\n\nIf you are wondering what image, command, environment variables are being used in a step in the pipeline the simplest thing is to [open the octant console](/v3/develop/ui/octant/) via:\n\n```bash \njx ui\n```\n\nThen if you navigate to the pipeline you are interested in and select the envelope icon next to a step name that will take you to the Step details page. e.g. if you click on the icon pointed to by the big red arrow:\n\n<figure>\n<img src=\"/images/developing/octant-step-click.png\" />\n<figcaption>\n<h5>Click on the step icon to see details of a step which then takes you to the step details page</h5>\n</figcaption>\n</figure>\n\n\n<figure>\n<img src=\"/images/developing/octant-step.png\" />\n<figcaption>\n<h5>Step details page lets you see the command, image, environment variables and volumes</h5>\n</figcaption>\n</figure>\n\nIf a command fails it can be useful to enable [debugging of pipeline steps](/v3/develop/pipelines/debugging/) so that you can open a terminal inside a failed pipeline pod and try determine why things failed and to try out alternative commands to get things working.\n\nIf that doesn't help another option is to [edit the pipeline step](/v3/develop/pipelines/#editing-pipelines) via the `.lighthouse/jenkins-x/release.yaml` or  `.lighthouse/jenkins-x/pullrequest.yaml` file to add the command: `sleep infinity` in the `script:` value before the command that is not working.\n\nYou can then `kubectl exec` into the pod at that step and look around and try running commands inside the pod/container.\n\ne.g. using the pod name from the above page and the container name you can do something like:\n\n```bash \nkubectl exec -it -c name-of-step-container name-of-pod sh\n```\n    \n## How do I access a Secret from my pipeline?\n\nOnce you have a kubernetes Secret (see [how to create them](/v3/admin/setup/secrets/#create-a-new-secret)) you can access then in a pipeline either:\n\n* as an [environment variable in a step](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables)\n* via [a volume mount](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-files-from-a-pod)\n\n\n## How do I configure pipelines to use GPUs?\n \n You can install the [nvidia k8s device plugin](https://github.com/NVIDIA/k8s-device-plugin) as a daemonset to expose which nodes have GPUs and their status.\n \n You can then view the nodes via:\n \n ```bash \n kubectl get nodes \"-o=custom-columns=NAME:.metadata.name,GPU:.status.allocatable.nvidia\\.com/gpu\"  \n ```\n         \n You can then use the `resources` on your tekton steps as follows:\n \n ```yaml \n - image: gcr.io/kaniko-project/executor:v1.3.0-debug\n   name: build-my-image\n   resources:\n     limits:\n       # This job requires an instance with 1 GPU, 4 CPUs and 16GB memory - g4dn.2xlarge\n       nvidia.com/gpu: 1\n   script: |\n     #!/busybox/sh\n ```\n             \n\n## How can I use a monorepo?\n\nIf you have an existing monorepo you want to import into Jenkins X you can; just be aware that you'll have to [create and maintain your own pipelines](/v3/develop/pipelines/editing/) for your monorepo. \n\nWe currently have no special tekton steps to analyse git changes and conditionally run different sets of tekton steps based on what has changed.\n\nSo you may need to write your own steps to handle this nicely based on whatever kind of monorepo you have. Or you may want to look at using a tool like [Bazel](https://bazel.build/) or some similar tool to implement your monorepo build and just invoke that from the Tekton pipeline. \n\nYou could start with the automated CI/CD pipelines that most match your technology choices and edit them to suit.\n\nThere are a few tools around that could help:\n              \n* [bazel](https://bazel.build/)\n* [lerna](https://github.com/lerna/lerna)\n* [meta](https://github.com/mateodelnorte/meta) see the [blog post introducing meta](https://patrickleet.medium.com/mono-repo-or-multi-repo-why-choose-one-when-you-can-have-both-e9c77bd0c668)\n                                                                                       \n## How do I configure a different branch for releases?\n\nIf you look at the `postsubmits` section  of the [trigger config](/v3/develop/reference/pipelines/#lighthouse) in your `.lighthouse/jenkins-x/triggers.yaml` file you will see the post submits (which is prow/lighthouse terminology for release pipelines).\n\nBy default the `branches:` is setup with regular expressions for either `main` or `master` branches:\n\n\n```yaml \n  ...\n  postsubmits:\n  - name: release\n    context: \"release\"\n    source: \"release.yaml\"\n    branches:\n    - ^main$\n    - ^master$\n```\n\nModify the `branches` to use a different regular expression to denote the branch(s) you wish to use to trigger a new release.\n",
            "content/en/v3/develop/faq/previews.md": "---\ntitle: Previews\nlinktitle: Previews\ntype: docs\ndescription: Questions about using Preview Environments\nweight: 210\n---\n\n## When do Preview Environments get removed?\n\nWe have a background garbage collection job which removes Preview Environments after the Pull Request is closed/merged. You can run it any time you like via the [jx preview gc](/v3/develop/reference/jx/preview/gc/) command\n\n```sh\njx preview gc\n```\n\nYou can also view the current previews via  [jx preview get](/v3/develop/reference/jx/preview/get/):\n\n```sh\njx preview get\n```\n\n\nand delete a preview by choosing one to delete via [jx preview destroy](/v3/develop/reference/jx/preview/destroy/):\n\n```sh\njx preview destroy\n```\n\n## How do I access the preview namespace or URL?\n             \nAfter the [jx preview create](/v3/develop/reference/jx/preview/create) step in a pull request pipeline you can access a number of [preview environment variables](/v3/develop/environments/preview/#environment-variables).\n\nFor details see [how to add additional preview steps](/v3/develop/environments/preview/#additional-preview-steps)\n\n\n## How do I add other services into a Preview?\n\nsee [how to add resources to your previews](/v3/develop/environments/preview/#adding-more-resources)\n                           \n\n## How do I configure Secrets in a Preview?\n\nPreviews are installed via `helmfile sync` unlike the [usual approach for promoted environments](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template) like `Dev`, `Staging` and `Production` as the changes have not yet been released.\n\nThis means the usual [conversion from Secret resources to ExternalSecrets](/v3/about/how-it-works/#secrets) is not enabled for previews.\n\nSo to add `Secret` resources into your preview namespace try one of the following:\n\n* if you can use dynamically generated `Secret` values then just use the usual helm approach to creating `Secret` resources\n* if you need configured Secrets to access external services then you can copy them from the `jx` namespace. We copy labelled secrets [by default in the preview helmfile.yaml](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/javascript/preview/helmfile.yaml#L23-L31)\n    * you just need to add the label: `secret.jenkins-x.io/replica-source=true` to your `Secret` in the `jx` namespace\n    * see [how to add a new Secret](/v3/admin/setup/secrets/#create-a-new-secret)  \n* you can add an `ExternalSecret resource` to your preview `helmfile.yaml`as a [nested chart like this](https://jenkins-x.io/v3/develop/apps/#adding-resources) which will then use [kubernetes external secrets](https://github.com/external-secrets/kubernetes-external-secrets) to populate the `Secret` resources from the external secret store.\n* add a `Job`, init-container or helmfile hook in `preview/helmfile.yaml` to generate the `Secret` dynamically using whatever custom logic you prefer \n\n\n## How do I inject the Preview URL into other services?\n\nThe preview namespace and URL are [available as environment variables](/v3/develop/environments/preview/#environment-variables) after the preview has been created.\n\nHowever if you want to pass in the preview URL to [other charts included in your preview](/v3/develop/environments/preview/#adding-more-resources) via the `preview/helmfile.yaml` file you can:\n\n* use the service URL rather than ingress which is much simpler and does not depend on the namespace or domain. e.g. just use `http://my-app-name`\n* add a `values.yaml.gotmpl` file for the chart to [configure its values](/v3/develop/apps/#customising-charts) you wish to inject the URL into and pass in whatever yaml is required to configure the preview URL using the following expression. The example below uses `someValue` as the key to specify the URL but use whatever yaml keys your chart expects: \n\n```yaml \nsomeValue:  \"{{ requiredEnv \"APP_NAME\" }}-pr{{ requiredEnv \"PULL_NUMBER\" }}.{{ .Values.jxRequirements.ingress.domain }}\"\n```\n",
            "content/en/v3/develop/faq/using.md": "---\ntitle: Using\nlinktitle: Using\ntype: docs\ndescription: Questions on using Jenkins X\nweight: 150\n---\n\n## How do I list the apps that have been deployed?\n\nThere is a handy HTML report in your cluster dev git repository at **docs/README.md** which lists all the charts deployed in every namespace with their version.\n\nYou can see the helm charts that are installed along with their version, namespaces and any configuration values by looking at the `releases` section of your `helmfile.yaml` and `helmfile/*/helmfile.yaml` files in your cluster git repository.\n\nYou can browse all the kubernetes resources in each namespace using the canonical layout in the `config-root` folder. e.g. all charts are versioned in git as follows:\n\n```bash\nconfig-root/\n  namespaces/\n   jx/\n     lighthouse/\n       lighthouse-webhooks-deploy.yaml\n```\n\nYou can see the above kubernetes resource, a `Deployment` with name `lighthouse-webhooks` in the namespace `jx` which comes from the `lighthouse` chart.\n\nThere could be some additional charts installed via Terraform for the [git operator](/v3/guides/operator/) and [health subsystem](/v3/guides/health/) which can be viewed via:\n\n```bash\nhelm list --all-namespaces\n```\n\n## How do I delete an application?\n\nThere is a [jx application delete](/v3/develop/reference/jx/application/delete/) command to remove a repository from the source configuration and for removing any deployed instances of the application.\n\ne.g.\n\n```bash\njx application delete --repo myapp\n```\n\nOr you can remove an application or helm chart from an environment by removing the entry in the `releases:` list in the `helmfiles/$namespace/helmfile.yaml` file in your dev git repository and peforming a git commit and pushing the change (usually via a Pull Request).\n\nOnce the pull request is merged, the [boot job will trigger](/v3/about/how-it-works/#boot-job) which will remove the application from kubernetes.\n\n### Stopping new releases\n\nIf the application you are removing was released via Jenkins X then the next time there is a change committed to your applications git repsitory a new release will be triggered which will be promoted again.\n\nSo to stop new releases you need to remove the application from the `.jx/gitops/source-config.yaml` repository.\n\nYou should also ensure that the `SourceRepository` has been deleted. Unfortunately when using `kubectl apply` this doesn't usually get removed (though it does with `kapp`) so you may want to do:\n\n```bash\n# view all the SourceRepository resources:\nkubectl get sr\n\n# find the one that you want to remove then:\nkubectl delete sr $theNameToDelete\n```\n\nThis will stop Jenkins X creating webhooks and firing pipelines when you make changes.\n\nYou may also want to remove the webhook from the repository to be safe.\n\n## How do I stop jx asking for git credentials\n\nCommands like [jx project](/v3/develop/reference/jx/project/) used to create/import repositories or [jx application](/v3/develop/reference/jx/application/) used to list applications need to be able to access git repositories using tokens.\n\nRunning these commands prompt the user to enter the git-username and git-token to clone the repository into a temporary folder (ssh authentication is not supported at the moment).\nFollow the steps below to stop the prompting (substitute the `<git-username>` and `<git-token>` with your personal username and access token)\n\n```bash\nexport GIT_USERNAME=<git-username>\nexport GIT_TOKEN=<git-token>\n\nmkdir -p ~/git\nexport XDG_CONFIG_HOME=$HOME\necho \"https://$GIT_USERNAME:$GIT_TOKEN@github.com\" >> ~/git/credentials\n# Required if not setting XDG_CONFIG to $HOME\n# echo \"https://$GIT_USERNAME:$GIT_TOKEN@github.com\" >> ~/.git-credentials\n\ngit config --global credential.helper store\n```\n\n**NOTE**: If you set `XDG_CONFIG_HOME` to `$HOME` environment variable, then you dont have to copy the credentials to `~/.git-credentials`\n\nTo read more about the git credential store follow this [document](https://git-scm.com/docs/git-credential-store)\n\n## How do I use dev pods?\n\nSee the [inner loop documentation](/v3/develop/pipelines/inner-loop/)\n\n## How do I use Testcontainers?\n\nIf you want to use a container, such as a database, inside your pipeline so that you can run tests against your database inside your pipeline then use a [sidecar container in Tekton](https://tekton.dev/vault/pipelines-v0.16.3/tasks/#specifying-sidecars).\n\nHere is [another example of a sidecar in a pipeline](https://tekton.dev/vault/pipelines-v0.16.3/tasks/#using-a-sidecar-in-a-task)\n\nIf you want to use a separate container inside a preview environment then add [charts or resources](/v3/develop/apps/#adding-charts) to the `preview/helmfile.yaml`\n",
            "content/en/v3/develop/pipelines/_index.md": "---\ntitle: Pipelines\nlinktitle: Pipelines\ntype: docs\ndescription: Working with Tekton Pipelines in Jenkins X\nweight: 200\naliases:\n  - /v3/guides/pipeline-catalog/\n  - /v3/develop/pipeline-catalog\n---\n\nAs part of the [Tekton Catalog enhancement proposal](https://github.com/jenkins-x/enhancements/issues/37) we've improved support for Tekton in Jenkins X so that you can\n\n  * easily [edit any pipeline in any git repository](editing) by just modifying the [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) files in your `.lighthouse/jenkins-x` folder\n  * [add new pipelines to any git repository](editing/#add-new-taskspipelines-by-hand) to reuse any [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task) files you find from places like the [tekton catalog](https://github.com/tektoncd/catalog) in your repositories\n\n",
            "content/en/v3/develop/pipelines/catalog.md": "---\ntitle: Catalog\nlinktitle: Catalogs\ntype: docs\ndescription: Integration with pipeline catalogs\nweight: 400\n---\n\nAs we create more and more software we tend to get an explosion in the number of git repositories and microservices. Each repository needs automated CI and CD; but how do we manage the hundreds of pipelines we need - while also making it easy to share pipelines across repositories and allowing each repository to customize when required?\n\nJenkins X solves this as follows:\n\n* the pipelines, tasks and steps are defined via [Tekton YAML](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task) letting you use any tekton tooling such as [IDE completion and validation](/v3/develop/pipelines/#ide-support)\n* we support an `image: uses:sourceURI` notation that lets you inherit steps from a git repository without having to copy/paste the source code aross repositories.\n\nFor example if you create a new [quickstart](/v3/develop/create-project/) pipeline may look like this (slightly condensed)...\n\n```yaml \ntasks:\n- name: from-build-pack\n  taskSpec:\n    stepTemplate:\n      image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n    steps:\n    - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n    - name: next-version\n    - name: jx-variables\n    - name: build-npm-install\n    - name: build-npm-test\n    - name: build-container-build\n    - name: promote-changelog\n    - name: promote-helm-release\n    - name: promote-jx-promote\n```\n\nYou may wonder what those `uses:` strings mean.\n\n### Referencing a Task or Step\n\nRather than copy pasting [task and step YAML](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task) between repositories we can refer to a `Task` or a `Step` in a Task as follows:\n\n* refer to all the steps in a task by using\n\n```yaml\ntaskSpec:\n  steps:\n  - image: uses:sourceURI\n```\n\n* refer to a single _named_ step from a task\n\n```yaml\n  taskSpec:\n    stepTemplate:\n      image: uses:sourceURI\n    steps:\n    - name: mystep\n```\n\n### SourceURI notation\n\nThe source URI notation is enabled by a special `image` prefix of **uses:** on step or if an image on a step is blank and the `stepTemplate:` has an `image` prefix of **uses:**\n\nWe borrowed this idea from [ko](https://github.com/google/ko) and [mink](https://github.com/mattmoor/mink); the idea of using a custom prefix on image URIs.\n\nYou can refer to the [detailed documentation](https://github.com/jenkins-x/lighthouse/blob/master/docs/pipelines.md) on how the step inheritence and overriding works.\n\nFor a [github.com](https://github.com) source URI we use the syntax:\n\n```yaml\n- image: uses:owner/repository/pathToFile@version\n```\n\nThis references the https://github.com repository for `owner/repository` and **@version** can be a git tag, branch or SHA.\n\nIf you are not using [github.com](https://github.com) to host your git repositories you can access a pipeline task or step from your custom git serve use the **uses:lighthouse:** prefix before `owner`:\n\n```yaml\n- image: uses:lighthouse:owner/repository/pathToFile@version\n```\n\nWe [recommend you version everything with GitOps](/v3/devops/gitops/#recommendations) so you know exactly what versions are being used from git. \n\nHowever you can use **@HEAD** to reference the latest version.\n\nTo use a locked down version based on the _version stream_ of your cluster, you can use **@versionStream** which means use the git SHA for the repository which is configured in the version stream.\n\nThe nice thing about **@versionStream** is that the pipeline catalog you inherit tasks and steps from is locked down to an exact SHA in the version stream; but it avoids you having to go through every one of your git repositories whenever you upgrade a pipeline catalog.\n\n\n#### file and URL syntax\n\nIf you want to reuse a Task or Step thats not easily accessible from the above git source URI syntax you can always use a http:// or https:// URL instead:\n\n```yaml\n- image: uses:https://myserver.com/cheese.yaml\n```\n\nIf there's no @version on a uses string its interpreted as a local file:\n\n```yaml\n- image: uses:some-file.yaml\n```\n\n## How it looks\n\nSo here is an [example release pipeline](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/javascript/.lighthouse/jenkins-x/release.yaml) generated via the [Jenkins X Pipeline catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks) if you create a [JavaScript quickstart](/v3/develop/pipelines/catalog)\n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      taskSpec:\n        stepTemplate:\n          env:\n          - name: NPM_CONFIG_USERCONFIG\n            value: /tekton/home/npm/.npmrc\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: 400m\n              memory: 512Mi\n          volumeMounts:\n          - mountPath: /tekton/home/npm\n            name: npmrc\n          workingDir: /workspace/source\n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n        - name: next-version\n        - name: jx-variables\n        - name: build-npm-install\n        - name: build-npm-test\n        - name: check-registry\n        - name: build-container-build\n        - name: promote-changelog\n        - name: promote-helm-release\n        - name: promote-jx-promote\n        volumes:\n        - name: npmrc\n          secret:\n            optional: true\n            secretName: npmrc\n  serviceAccountName: tekton-bot\n  timeout: 240h0m0s\n```\n\nYou can see it mounts an npm secret for using npm package management and specifies CPU and memory requirements. It then is using the **uses:** notation to inherit a bunch of steps from the [jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/javascript/release.yaml) as well as sharing the [jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/tasks/git-clone/git-clone.yaml) task\n\nAlso notice we don't have to copy and paste the exact details of the images, commands, arguments, environment variables and volume mounts required for each step; we can just reference them via Git. Also each pipeline in each repository can reference different versions if required.\n\n### Adding your own steps\n\nYou can easily add your own steps in between the `uses:` steps in your pipeline by adding a regular step which has a custom image.\n\ne.g. see `my-prefix-step` which has an explicit `image:` value so isn't inherited from the `stepTemplate.image`\n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      taskSpec:\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n        steps:\n        - name: jx-variables\n        \n        # lets add a custom step in between shared steps...\n        - image: node:12-slim\n          name: my-prefix-step\n          script: |\n            #!/bin/sh\n            npm something        \n        - name: jx-variables \n          ...\n```\n\n### Customizing an inherited step\n\nYou can edit the step in your [IDE](/v3/develop/pipelines/#ide-support) and add any custom properties such as `command`, `args`, `env`, `script` or `volumeMount` - those values then override the inherited step.\n\ne.g. you can then change any command line, add an environment variable or add a new volume mount without copy pasting the whole step. e.g. we change the `script` value of the `jx-variables` step below:\n     \n\n```yaml \napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nspec:\n  pipelineSpec:\n    tasks:\n    - taskSpec:\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/javascript/release.yaml@versionStream\n        steps:\n        - name: jx-variables\n          script: |\n            #!/usr/bin/env sh\n            echo my replacement command script goes here\n```\n\nAny extra properties in the steps are used to override the underlying uses step.\n\n\n## Command line tools\n\nTo help understand the inheriance and overriding of steps we have a few command line tools to help:\n\n### Viewing the effective pipeline\n\nTo see the actual Tekton pipeline that would be executed from your local source directory you can run the [jx pipeline effective](/v3/develop/reference/jx/pipeline/effective) command:\n\n```bash\njx pipeline effective\n```\n\nIf you want to open the effective pipeline in your editor, such as [VS Code](https://code.visualstudio.com/) you can do:\n\n```bash\njx pipeline effective -e code\n```\n                   \nIf you use [Intellij](https://www.jetbrains.com/idea/) or any of [JetBrains other IDEs](https://www.jetbrains.com/products/#type=ide) you can do the following if you have [enabled](https://www.youtube.com/watch?v=SVANj3gAWt8) the `idea` [command line tool](https://www.youtube.com/watch?v=SVANj3gAWt8):\n\n```bash\njx pipeline effective -e idea\n```\n\nIf you want to always view an effective pipeline in your editor then define the `JX_EDITOR` environment variable...\n\n```bash\nexport JX_EDITOR=\"code\"\n\n# now we will always open effective pipelines inside VS Code\njx pipeline effective\n```\n\n### Overriding a pipeline step locally\n\nIf you want to edit a step that is inherited from a pipeline catalog just run the [jx pipeline override](/v3/develop/reference/jx/pipeline/override) command from a clone of your repository.\n\n```bash\njx pipeline override\n```\n\nThis will then prompt you to pick which pipeline and step that's inherited via the `image: uses:sourceURI` notation. When chosen the step will be inlined into your local file so you can [edit any of the properties](#customizing-an-inherited-step).\n\nYou can use the git compare to see the changes and remove any properties you don't wish to override.\n        \n\n### Overriding specific properties of a step locally\n\nRather than completely replacing the entire step with whatever is in the catalog; you can just specify the properties you wish to override.\n\ne.g. usually you may just want to override the `script` blog to modify, say, a command line argument passed into a command.\n\nTo do this just specify the **-P** with the name of the property.\n\ne.g.\n\n```bash\njx pipeline override -P script\n```\n\nYou will then just have a locally modified `script` property in the Tekton YAML for the step you overrode. You can then locally modify to suit - or remove to go back to the inherited catalog properties.\n\n\n## Tekton Catalog\n                        \nThe [Tekton Catalog](https://github.com/tektoncd/catalog) git repository defines a ton of Tekton pipelines you can reuse in your pipelines\n\n## Referencing Tasks or Steps from a Catalog\n\nYou can `image: uses:sourceURI` notation inside any pipeline file in your `.lighthouse/jenkins-x/mypipeline.yaml` file like this:\n\n```yaml \nsteps:\n  - image: uses:tektoncd/catalog/task/git-clone/0.2/git-clone.yaml@HEAD\n```\n\nThis will then include the steps from the [git-clone.yaml](https://github.com/tektoncd/catalog/blob/master/task/git-clone/0.2/git-clone.yaml) file \n\nIt's not just the [Tekton Catalog](https://github.com/tektoncd/catalog) - you can use this same approach to reuse Tasks or steps from any git repository of your choosing; such as the [Jenkins X Pipeline catalog](https://github.com/jenkins-x/jx3-pipeline-catalog/tree/master/tasks)\n\n\n## Custom Pipeline Catalog\n\nSee [this section](https://jenkins-x.io/v3/about/extending/#pipeline-catalog) to configure your custom pipeline catalog.\n",
            "content/en/v3/develop/pipelines/debugging.md": "---\ntitle: Debugging\nlinktitle: Debugging\ntype: docs\ndescription: Debugging pipelines in Jenkins X\nweight: 410\n---\n\n{{< alert color=\"warning\" >}}\n`TaskRun` breakpoint functionality is no longer supported since Tekton 0.29.0 upgrades in `3.2.298`. For more info see [Kubernetes 1.22 - Breaking change!](/blog/2022/04/22/kubernetes-1.22-tekton/).\n{{< /alert >}}\n\nHere is a demo which shows how to debug pipelines:\n\n<iframe width=\"850\" height=\"500\" src=\"https://www.youtube.com/embed/QqTaclB6-oI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n### Prerequisites \n\nMake sure [your cluster is upgraded to the latest version stream](/v3/admin/setup/upgrades/cluster/). \n\nIf you intend to use the `jx` in the below examples make sure you [upgrade the CLI too](/v3/admin/setup/upgrades/cli/)\n\n\n### Enable a breakpoint\n\nTo enable a breakpoint you can: \n\n* use the [Lens UI](/v3/develop/ui/lens/) as shown in the above video by:\n  * right click on a `Pipeline` action menu \n  * select `Breakpoint -> Add`\n* you can use the [jx pipeline debug](https://jenkins-x.io/v3/develop/reference/jx/pipeline/debug/) command then select the pipeline to add/remove a breakpoint.\n                                      \n### Viewing breakpoints\n\nYou can view breakpoints in the [Lens UI](/v3/develop/ui/lens/) in the `Breakpoints` tab or via:\n\n```bash \nkubectl get lighthousebreakpoints\n\n# you can use the short name:\nkubectl get lhbp\n```\n\n\n### Using a breakpoint\n\nOnce you have set a breakpoint defined for a particular Pipeline you need to trigger the pipeline. e.g. perform a git commit on the git branch to trigger a new pipeline to execute.\n\nThe pipeline will execute as normal; you'll be able to view it execute via:\n\n* [Lens UI](/v3/develop/ui/lens/)\n* run [jx pipeline grid](https://jenkins-x.io/v3/develop/reference/jx/pipeline/grid/) to watch pipelines run and select the one you wish to view the log \n* run [jx pipeline log](https://jenkins-x.io/v3/develop/reference/jx/pipeline/log/) to watch the log of a specific pipeline\n\n### Opening a shell\n\nOnce your breakpoint is reached the pipeline pod will pause, waiting to continue.\n\nAt this point you can then open a shell inside the container.\n\nThe easiest way to do this is via the [Lens UI](/v3/develop/ui/lens/), click on the Pipeline action menu then `Shell` -> `latest step` and a shell will open.\n\nOtherwise you can use:\n \n```bash \nkubectl exec -it -c $name-of-container $name-of-pod (sh | bash | ash)\n```\n\n### Continuing after the breakpoint\n          \nIf you wish to continue the execution of a pipeline there are [multiple scripts you can run inside the shell](https://github.com/tektoncd/pipeline/blob/main/docs/debug.md#debug-scripts) you can run inside the shell in the pipeline to tell the pipeline to continue:\n\n| Script | Description |\n| --- | --- |\n| `/tekton/debug/scripts/debug-continue` | Mark the step as completed with success by writing to `/tekton/tools` so that the pipeline continues executing |\n| `/tekton/debug/scripts/debug-fail-continue` | Mark the step as completed with failure by writing to `/tekton/tools` which can lead to the pipeline terminating |\n\n### Removing breakpoints\n\nThere are a few ways to delete breakpoints. \n     \nYou can run [jx pipeline debug](https://jenkins-x.io/v3/develop/reference/jx/pipeline/debug/) and toggle off any existing breakpoints.\n\nYou can use the `Breakpoints` tab in [Lens UI](/v3/develop/ui/lens/) then click the breakpoints action menu then `Remove`\n\nOr find the one you want via: \n\n```bash \nkubectl get lhbp\nkubectl delete lhbp whatever-the-name-is\n```\n",
            "content/en/v3/develop/pipelines/demo.md": "---\ntitle: Demo\nlinktitle: Demo\ntype: docs\ndescription: Demo of triggering and customising pipelines\nweight: 150\n---\n\n\n## Demo\n\nThe following demo walks through how to trigger tekton pipelines and create custom pipelines: \n\n<iframe width=\"700\" height=\"315\" src=\"https://www.youtube.com/embed/cJcwV4jgE0Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n\n",
            "content/en/v3/develop/pipelines/editing.md": "---\ntitle: Editing\nlinktitle: Editing\ntype: docs\ndescription: Editing pipelines in Jenkins X\nweight: 200\n---\n\n## Source layout\n\nIf you [upgrade your cluster to the latest version stream](/v3/guides/upgrade/#cluster) then you will find if you [create a new quickstart](/v3/develop/create-project/#create-a-new-project-from-a-quickstart) that:\n\n* `.lighthouse/jenkins-x` directory contains the default CI/CD pipelines for Jenkins X with these files:\n  * `triggers.yaml` to define the [lighthouse](https://github.com/jenkins-x/lighthouse) [TriggerConfig](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config) which defines the [ChatOps](/docs/resources/faq/using/chatops/#what-is-chatops) and triggering configuration via a [spec field](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec) which defines [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) and [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) (i.e. Pull Request and Release triggers).\n  * `pullrequest.yaml` defines the Pull Request pipeline using a Tekton [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun)\n  * `release.yaml` defines the Release pipeline using a Tekton Tekton [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun)\n  \n* `jenkins-x.yml` files are no longer used by default in new quickstarts instead we use the above. Note if you have projects using `jenkins-x.yml` files they are still supported if you [import them into v3](/v3/develop/create-project/#import-an-existing-project) or you can [use this tool to migrate them to tekton pipelines](https://github.com/jenkins-x-plugins/jx-v2-tekton-converter/blob/main/README.md)\n\n\n## Editing pipelines\n\nYou can now easily modify any of the [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) resources in any git repository - just look in each folder inside `.lighthouse` for the YAML files to edit.\n\ne.g. for the default Jenkins X CI/CD pipelines edit either:\n\n* `.lighthouse/jenkins-x`\n  * `pullrequest.yaml` to edit the Pull Request [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun)\n  * `release.yaml` to edit the Release [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) \n\nYou can test out changes to the Pull Request pipeline by submitting changes in a Pull Request. Changes to a release only take place after merging the change to the main branch.\n\n### Overriding steps\n\nThe default pipelines use the default [Jenkins X Catalog](/v3/develop/pipelines/catalog/) and so the details of the steps such as the container image and commands used are often inherited.\n\nYou can override steps locally by:\n\n* [Overriding a pipeilne step locally](/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally) so that you inline the step details into your local YAML file and then edit accordingly.\n* [Override a specific step property locally such as the script property](/v3/develop/pipelines/catalog/#overriding-specific-properties-of-a-step-locally) which lets you just inline, say, the `script` commands to modify the commands run\n\n### Tools\n\n* [viewing the effective pipeline](/v3/develop/pipelines/catalog/#viewing-the-effective-pipeline)\n* [overriding a pipeline step locally](/v3/develop/pipelines/catalog/#overriding-a-pipeline-step-locally)\n\n### Linting\n\nYou can run the [jx pipeline lint](/v3/develop/reference/jx/pipeline/lint) command from a clone of your repository.\n\n```bash\njx pipeline lint\n``` \n\nwhich will verify that have not made any typos.\n\nYou can also [view the effective pipeline](/v3/develop/pipelines/catalog/#viewing-the-effective-pipeline)\n\n\n## IDE support\n  \nIf you use [IntelliJ IDEA](https://www.jetbrains.com/idea/) or [Goland](https://www.jetbrains.com/go/) you might find the [RedHat's intellij-tekton plugin](https://plugins.jetbrains.com/plugin/14096-tekton-pipelines-by-red-hat) useful for editing pipelines with schema validation and completion.\n\nIf you use [VS Code](https://code.visualstudio.com/) you may want to try [Red Hat's Tekton Pipelines Extension tekton](https://github.com/redhat-developer/vscode-tekton#tekton-pipelines-extension--) \n\n\n## Add new tasks/pipelines by hand\n\nYou can add new pipelines by hand into a new folder inside `.lighthouse` at any time. \n\nTo setup a _trigger_ so that [lighthouse](https://github.com/jenkins-x/lighthouse) will start your pipeline on a [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) (i.e. for Pull Requests) or for [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) (i.e. releases on main branches) you need to also add a `triggers.yaml` file which uses the lighthouse [trigger config file file format](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config) with [this spec field](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#ConfigSpec).\n\nYou could look at the default `.lighthouse/jenkins-x` directory to see how all this works. The `triggers.yaml` file then refers to the tekton [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task), [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) or [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) files via the `source:` attribute in a [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) or [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) entry.\n  \n## Changing the triggers\n\nYou can modify the `.lighthouse/*/triggers.yaml` file to modify the  [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) and/or [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) entries to do things like:\n\n* customise the `rerun_command` or `trigger` ChatOps comments for `presubmits`\n* configure the `branches` patterns for `postsubmit` triggers\n* add new entries for new pipelines; or pipelines with different `pipeline_run_params` entries to parameterise existing `PipelineRun` files differently\n\n\n## Diagnosing problems\n\nIf you edit pipelines or lighthouse trigger files and things don't work there's a couple of places the errors may show up.\n\nWe will hopefully add much better linting/error messages on Pull Requests soon to give you better and faster feedback.\n\nUntil then you could look in:\n\n* the `lighthouse-webhooks-*` pod(s) which take the webhooks from your git provider and convert them into `lighthousejob` resources\n* the `lighthouse-tekton-controller-*` pod(s) which watch for `lighthousejob` resources and create the Tekton [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) resources\n* the `tekton-controller-*`  pod(s) watches for Tekton [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) resources and conver them into Kubernetes `Pod` resources\n\nAny errors will usually be recorded in the `status` field of the resource that has issues (`lighthousejob` or `pipelinerun`).\n\n",
            "content/en/v3/develop/pipelines/inner-loop/_index.md": "---\ntitle: Inner loop\nlinktitle: Inner loop\ntype: docs\ndescription: Incrementally rebuilding applications as you change source\nweight: 510\n---\n\nIn v2 of Jenkins X we had a feature called `Dev Pods`  where we spun up a pod using the container image from the Jenkins X pipeline so that you could perform interative development inside the cluster.\n\nWe don't yet have an exact equivalent in Jenkins X v3 as we've moved from large monolithic container images with all the tools inside to small focussed images for each tekton pipeline step. e.g. using the upstream images for maven, golang, npm to perform those builds directly.\n\n\nYou may also find [this article on kubernetes inner loop](https://thenewstack.io/kubernetes-infrastructure-know-the-inner-dev-loop/) useful\n\nIf you want something like `Dev Pods`  in v3 there are a few open source tools that offer something similar:\n",
            "content/en/v3/develop/pipelines/inner-loop/ksync.md": "---\ntitle: ksync\nlinktitle: ksync\ntype: docs\ndescription: Using ksync with Jenkins X\nweight: 200\n---\n          \nYou can use [ksync](https://ksync.github.io/ksync/) to synchronise your local source code with a running pod which you can then use to perform incremental builds inside kubernetes.\n\n```bash \nkubectl run -ti --image maven maven-build-pod bash\nksync create -n jx --pod maven-build-pod $(pwd) /\nksync watch\n\n# then in your build pod run `mvn clean install` or `mvn spring-boot:run` or whatever\n```\n",
            "content/en/v3/develop/pipelines/inner-loop/localizer.md": "---\ntitle: localizer\nlinktitle: localizer\ntype: docs\ndescription: Using localizer with Jenkins X\nweight: 400\n---\n\n[localizer](https://github.com/jaredallard/localizer) is a lightweight go lang based rewrite of [telepresencse](https://www.telepresence.io/). See [the blog for more detail](https://blog.jaredallard.me/localizer-an-adventure-in-creating-a-reverse-tunnel-and-tunnel-manager-for-kubernetes/) \n\nIt basically lets you run local processes on your laptop right inside your IDE which are then connected into the kubernetes cluster via networking magic.\n\n### Using localizer \n\n*  [install localizer](https://github.com/jaredallard/localizer#install-localizer)\n\n* run localizer:\n\n```bash \nsudo localizer\n```\n\n* run/debug your application locally.\n\n\n* then to expose your service into a namespace as a service name run something like this::\n\n\n```bash \nlocalizer expose $namespace/$svc --map 80:8080\n```\n\nwhen you have finished debugging, return things to normal via:\n\n```bash \nlocalizer expose $namespace/$svc --stop\n```\n\n\n### Example\n\n[Here is an example](https://github.com/jenkins-x/lighthouse#debugging-webhooks) of how we use [localizer](https://github.com/jaredallard/localizer) to debug webhooks coming into lighthouse. \n\nBasically we have webhooks setup on git repositories that when they are modified or Pull Requests are created the git provider triggers the [lighthouse](https://github.com/jenkins-x/lighthouse) webhook endpoint.\n\n[localizer](https://github.com/jaredallard/localizer) maps the kubernetes service endpoint which is triggered by the webhook to invoke the process on your laptop.\n",
            "content/en/v3/develop/pipelines/inner-loop/okteto.md": "---\ntitle: okteto\nlinktitle: okteto\ntype: docs\ndescription: Using okteto with Jenkins X\nweight: 100\n---\n\nIf you [install okteto](https://okteto.com/docs/getting-started/installation/index.html) it has a command you can use to spin up a development container inside a deployment so you can iteratively rebuild an application.\n\nThen if your application is deployed to your staging environment you can `cd` into a git clone of your application and run...\n\n```bash \n# switch to the staging namespace\njx ns jx-staging\n\nokteto up\n```\n\nYou will now have a [development container setup](https://okteto.com/docs/getting-started#step-4-activate-your-development-container) you can perform incremental builds\n",
            "content/en/v3/develop/pipelines/inner-loop/skaffold.md": "---\ntitle: skaffold\nlinktitle: skaffold\ntype: docs\ndescription: Using skaffold with Jenkins X\nweight: 300\n---\n          \nSee the [skaffold site](https://skaffold.dev/) on how to use `skaffold`  to perform localy builds of a project.\n\nEssentially you do the following:\n\n* [install skaffold](https://skaffold.dev/docs/install/)\n* `cd` into a git clone of your application\n* run\n\n```bash \nskaffold init\n```\n\n* then to run your application\n\n```bash \nskaffold run --tail\n```",
            "content/en/v3/develop/pipelines/upgrading.md": "---\ntitle: Upgrading\nlinktitle: Upgrading\ntype: docs\ndescription: Upgrading and converting pipelines\nweight: 500\n---\n\n\n## Converting older pipelines\n\nIf you have older pipelines in your git repository created with an older version of Jenkins X you can convert them to the new concise `image: uses:sourceURI` syntax via the [jx pipeline convert](/v3/develop/reference/jx/pipeline/convert) command:\n\n```bash\njx pipeline convert \n```        \n\nThe pipelines should be modified and if you have a `Kptfile` it will be removed.\n\nIf you have any old `jenkins-x.yml` files, those will be converted across to the new `.lighthouse` tekton notation too.\n        \n\n## Recreating pipelines\n\nIf you created/imported your repository a long time ago (particularly before the GA version of 3.x) you may have old steps and images inside your `.lighthouse/jenkins-x/*.yaml` files.\n\nSo it's a good idea to recreate them from the latest catalog which are then simpler and [easier to keep up to date with the version stream](/blog/2021/02/25/gitops-pipelines/#sharing-tasks-and-steps-across-repositories) and [easier to custommize locally](/blog/2021/02/25/gitops-pipelines/#customizing-an-inherited-step)\n\nYou can do that via the following from inside a git clone of your repository:\n\n\n```bash\nrm -rf .lighthouse charts preview\njx project import\n```              \n\nThis should recreate the directories:\n\n* `.lighthouse`\n* `charts`\n* `preview`\n\nfrom the latest pipeline catalog; there should be no need to create a Pull Request on your dev cluster git repository as all the webhooks should be setup already. \n\nYou can use the git history to compare changes in case you had made any custom pipeline changes.\n\nIf you are worried about losing changes you can add `--dry-run` to [jx project import](/v3/develop/reference/jx/project/import/) which will give you a chance to review the changes before committing. Though you can always use git to revert thing too ;)\n\n\n## Upgrading pipelines and helm charts via kpt\n\nYou can upgrade any git repository in the same way you upgrade your [clusters git repository](/v3/guides/upgrade/#cluster) by running the [jx gitops upgrade](/v3/develop/reference/jx/gitops/upgrade) command inside a git checkout of your repository:\n\n```bash\ncd my-quickstart-thingy\njx gitops upgrade\n```              \n\nThis will then upgrade any helm charts or pipeline catalogs you are using in your git repository with the latest versions.\n\nAfter running this command you will usually have some changes in `git` you can review. If you are happy with the changes commit them and create a Pull Request so that they can get applied on your cluster.\n\n```bash\ngit add *\ngit commit -a -m \"fix: upgrade pipeline catalog\"\ngit push\n```               \n\nIt is possible that you can have merge conflicts.  \n\nYou can follow the inline git helper messages to resolve conflicts - or use your IDE to help figure out the merge issues more easily. \n\n### Converting all repositories\n\nYou can now perform a batch of Pull Requests if you need to upgrade your pipelines on your repositories if the upstream pipeline catalogs have upgraded.\n\nSee: [generate pull requests to upgrade pipelines](/v3/admin/guides/migrate/v3-alpha/#upgrading-pipelines-in-your-repositories)\n\nHere is an example of [an automated Pull Request](https://github.com/jenkins-x/jx-gitops/pull/551) that was used to migrate one of our pipelines on [jx-gitops](https://github.com/jenkins-x/jx-gitops) - as you can see the resulting file is much simpler and easier to maintain.",
            "content/en/v3/develop/reference/_index.md": "---\ntitle: Reference\nlinktitle: Reference\ntype: docs\ndescription: Developer reference guides for Jenkins X\nweight: 490\n---\n\n",
            "content/en/v3/develop/reference/chatops.md": "---\ntitle: ChatOps\nlinktitle: ChatOps\ntype: docs\ndescription: ChatOps commands\nweight: 450\n---\n\nYou can type the following _ChatOps_ commands on Pull Requests as comments:\n\n## ChatOps Commands\n\n| ChatOps Command | Description |\n|       :---      |    :---     |\n| `/lgtm` | This PR looks good to me - this command can be from anyone with access to the repo who is in the `OWNERS` file |\n| `/approve` | This PR can be merged - must be someone in the repo `OWNERS` file |\n| `/test this` | Run the default test pipeline context for this PR |\n| `/test (context)` | Run a specific test pipeline context by name |\n| `/retest` | Rerun any failed test pipeline contexts for this PR |\n| `/override (context)` | Override a failed pipeline context |\n| `/hold` | Set this PR to not automerge even if it has been set `lgtm` and approved |\n| `/hold cancel` | remove the `hold` label from the PR, allowing automerge |\n| `/assign (user)` | assign the PR to the given (`user`) |\n| `/unassign (user)` | remove the `user` as assignee |\n| `/cc (user)` | add the given `user` as a reviewer for the PR |\n| `/uncc (user)` | remove the `user` as a reviewer |\n| `/ok-to-test` | If a `user` without write access to the repo opens a PR, the PR will not be built automatically. It receives the `needs-ok-to-test` label, until a user with rights enters `/ok-to-test`, at which point it gets be built |\n",
            "content/en/v3/develop/reference/files.md": "---\ntitle: Files\nlinktitle: Files\ntype: docs\ndescription: File names and formats when using GitOps\nweight: 200\n---\n\nJenkins X uses [GitOps](/v3/devops/gitops/) and so has a number of different source files with declarative schemas. \n\nYou may also find the [git layout document](https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md) useful. \n                     \n## Files in any repository\n\n| File | Schema | Description |\n| --- | ---| --- |\n| `.jx/settings.yaml` | [Settings](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#settings) | Optional file to override any settings from the development cluster git repository; such as the chart repository, container registry or environments to promote to. Usually the [Requirements](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) in the dev cluster git repository are used. |\n| `.jx/updatebot.yaml` | [Updatebot](https://github.com/jenkins-x-plugins/jx-updatebot/blob/master/docs/config.md#updatebot.jenkins-x.io/v1alpha1.UpdateConfig) | Describes the settings when using the [jx updatebot](https://github.com/jenkins-x-plugins/jx-updatebot) plugin to promote versions of a repository to different git repositories using different strategies |\n| `.lighthouse/*/triggers.yaml` | [TriggerConfig](/v3/develop/reference/pipelines/#lighthouse) | Defines the pipeline triggers in [lighthouse](https://github.com/jenkins-x/lighthouse) which start tekton pipelines in response to git or ChatOps activity |\n| `.lighthouse/*/*.yaml`  | [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun) | Tekton pipelines to define pull request pipelines (or `presubmits`) and release pipelines (`postsubmits`). For more detail check out the [pipeline reference](/v3/develop/pipelines/reference) |\n| `charts` | [helm chart](https://helm.sh/) | Defines the kubernetes resources to be installed in a kubernetes cluster |\n| `Dockerfile` | [Dockerfile](https://docs.docker.com/engine/reference/builder/) | Defines how to create a container image for repositories that create images |\n| `OWNERS` | [OWNERS](https://github.com/jenkins-x/lighthouse/tree/master/pkg/plugins/approve/approvers#overview) | this [lighthouse](https://github.com/jenkins-x/lighthouse) configuration file defines who can review and approve files |\n| `OWNERS_ALIASES` | [OWNERS_ALIASES](https://github.com/jenkins-x/lighthouse/tree/master/pkg/plugins/approve/approvers#overview) | this [lighthouse](https://github.com/jenkins-x/lighthouse) configuration file defines aliases for who can review and approve files |\n| `preview/helmfile.yaml` | [helmfile](https://github.com/roboll/helmfile#configuration) | The [helmfile](https://github.com/roboll/helmfile) defines the helm charts, version and value mappings to be installed in a preview environment |\n\n\n## Files in a dev cluster repository\n\nThe following files are only used in a development cluster git repository\n\n\n| File | Schema | Description |\n| --- | ---| --- |\n| `.jx/gitops/source-config.yaml` | [SourceConfig](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig)| Defines the git owners (organisations/users) and repositories which are imported into Jenkins X and so have webhooks and [lighthouse](https://github.com/jenkins-x/lighthouse) [triggers](/v3/develop/reference/pipelines/#lighthouse) defined. Also supports [slack](/v3/develop/ui/slack/) and [jenkins](/v3/develop/create-project/jenkinsfile/) configuration  |\n| `.jx/gitops/kpt-strategy.yaml` | [KptStrategies](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.KptStrategies) | Lets you define what kind of [kpt](https://googlecontainertools.github.io/kpt/) upgrade strategy you wish to you for different folders. See [upgrade cluster](/v3/admin/setup/upgrades/cluster/) |\n| `.jx/secret/mapping/secret-mappings.yaml` | [SecretMapping](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SecretMapping) | Defines the generic mapping of `Secrets` to `ExternalSecrets`. For more detail see [how we use ExternalSecrets](/v3/admin/setup/secrets/) |\n| `config-root` | Kubernetes | Defines the kubernetes resources and custom resource definitions generated from the [helmfile](https://github.com/roboll/helmfile#configuration) | The [helmfile](https://github.com/roboll/helmfile) files.\n| `docs/README.md` | | A markdown report of all the helm charts and versions installed in each namespace in your cluster. Its generated from the `**/helmfile.yaml` files during the [boot Job](/v3/about/how-it-works/#boot-job) via the [jx gitops helmfile report](https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_helmfile_report.md) command |\n| `extensions/pipeline-catalog.yaml` | [PipelineCatalog](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.PipelineCatalog) | Defines the pipeline catalog or catalogs to use to define the shared pipelines for your repositories |\n| `extensions/quickstarts.yaml` | [Quickstarts](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.Quickstarts) | Defines the quickstarts used by your team when [creating a quickstart project](/v3/develop/create-project/) |\n| `jx-requirements.yml` | [Requirements](https://github.com/jenkins-x/jx-api/blob/master/docs/config.md#requirements) | The kubernetes cluster and infrastructure requirements such as kubernetes provider kind, chart repository, container registry and environments |\n| `helmfiles/ns/helmfile.yaml` | [helmfile](https://github.com/roboll/helmfile#configuration) | The [helmfile](https://github.com/roboll/helmfile) defines the helm charts, version and value mappings to be installed in a namespace in a cluster. We use a folder inside `helmfiles` for each namespace so its easy to keep namespaces separate in git |\n| `schedulers/*.yaml` | [Scheduler](https://github.com/jenkins-x-plugins/jx-gitops/blob/main/docs/scheduler-config.md#scheduler) | The scheduler used to configure ChatOps and merging |\n| `versionStream` | | The shared version stream which contains chart, image and git versions and default configuration files |\n\n          \n## JSON Schemas\n\nSee the [JSON Schemas](https://github.com/jenkins-x/jenkins-x-schemas/tree/main/docs)",
            "content/en/v3/develop/reference/jx-help.md": "---\ntitle: jx help\nlinktitle: jx help\ntype: docs\ndescription: Getting help on the CLI\nweight: 500\n---\n\nYou can browse the [Command Line Reference](/v3/develop/reference/jx/) online or you can use the `jx` CLI directly to get help:\n\n```bash \njx --help\n```\n          \nTo get help about a particular [plugin](/v3/develop/reference/jx/), such as `gitops` you can type:\n\n\n```bash \njx gitops --help\n```\n",
            "content/en/v3/develop/reference/jx/_index.md": "---\ntitle: jx\nlinktitle: jx\ntype: docs\ndescription: Command Line Interface reference\nweight: 490\n---\n\nCheck the [getting the jx binary](/v3/admin/setup/jx3/) and how to [get help on jx commands](/v3/develop/reference/jx-help/)",
            "content/en/v3/develop/reference/jx/admin/_index.md": "---\ntitle: jx admin\nlinktitle: admin\ntype: docs\ndescription: \"commands for creating and upgrading Jenkins X environments using GitOps\"\naliases:\n  - jx-admin\n---\n\n### Usage\n\n```\njx admin\n```\n\n### Synopsis\n\ncommands for creating and upgrading Jenkins X environments using GitOps\n\n### Options\n\n```\n  -h, --help   help for jx-admin\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/create/_index.md": "---\ntitle: jx admin create\nlinktitle: create\ntype: docs\ndescription: \"Creates a new git repository for a new Jenkins X installation\"\naliases:\n  - jx-admin_create\n---\n\n### Usage\n\n```\njx admin create\n```\n\n### Synopsis\n\nCreates a new git repository for a new Jenkins X installation\n\n### Examples\n\n  ```bash\n  # create a new git repository which we can then boot up\n  jx-admin create\n\n  ```\n### Options\n\n```\n      --add jx-apps.yml              The apps/charts to add to the jx-apps.yml file to add the apps\n      --approver stringArray         the git user names of the approvers for the environments\n      --autoupdate-schedule string   the cron schedule for auto upgrading your cluster\n      --autoupgrade                  enables or disables auto upgrades\n  -b, --batch-mode                   Enables batch mode which avoids prompting for user input\n      --bucket-backups string        the bucket URL to store backups\n      --bucket-logs string           the bucket URL to store logs\n      --bucket-repo string           the bucket URL to store repository artifacts\n      --bucket-reports string        the bucket URL to store reports. If not specified default to te logs bucket\n      --canary                       enables Canary deployment of apps by default\n      --chart string                 the chart name to use to install the git operator (default \"jxgh/jx-git-operator\")\n      --chart-version string         override the helm chart version used for the git operator\n  -c, --cluster string               configures the cluster name\n      --dev-git-kind string          The kind of git server for the development environment\n      --dev-git-url string           The git URL of the development environment if you are creating a remote staging/production cluster. If specified this will create a Pull Request on the development cluster\n      --dir string                   The directory used to create the development environment git repository inside. If not specified a temporary directory will be used\n  -d, --domain string                configures the domain name\n      --dry-run                      if enabled just display the helm command that will run but don't actually do anything\n  -e, --env string                   The name of the remote environment to create\n      --env-git-owner string         the git owner (organisation or user) used to own the git repositories for the environments\n      --env-git-public               enables or disables whether the environment repositories should be public\n      --env-remote                   if enables then all other environments than dev (staging & production by default) will be configured to be in remote clusters\n      --extdns-sa string             configures the External DNS service account name\n      --git-kind string              the kind of git repository to use. Possible values: bitbucketcloud, bitbucketserver, gitea, github, gitlab\n      --git-name string              the name of the git repository\n      --git-public                   enables or disables whether the project repositories should be public\n      --git-server string            the git server host such as https://github.com or https://gitlab.com\n      --git-token string             the git token used to operate on the git repository\n  -h, --help                         help for create\n      --hpa                          enables HPA deployment of apps by default\n      --initial-git-url string       The git URL to clone to fetch the initial set of files for a helm 3 / helmfile based git configuration if this command is not run inside a git clone or against a GitOps based cluster\n      --kaniko-sa string             configures the Kaniko service account name\n      --name string                  the helm release name t ouse (default \"jxgo\")\n      --no-operator                  If enabled then don't try to install the git operator after creating the git repository\n      --operator-namespace string    The name of the remote environment to create (default \"jx-git-operator\")\n      --out string                   the name of the file to save with the created git URL inside\n      --project string               configures the Google Project ID\n  -p, --provider string              configures the kubernetes provider.  Supported providers: aks, alibaba, aws, eks, gke, icp, iks, jx-infra, kubernetes, oke, openshift, pks\n      --region string                configures the cloud region\n      --registry string              configures the host name of the container registry\n      --remove jx-apps.yml           The apps/charts to remove from the jx-apps.yml file to remove the apps\n      --repo string                  the name of the development git repository to create\n      --repository string            the artifact repository. Possible values are: none, bucketrepo, nexus, artifactory\n  -r, --requirements string          The 'jx-requirements.yml' file to use in the created development git repository. This file may be created via terraform\n      --secret string                configures the secret storage kind. Possible values: local, vault\n      --skip-namespace-creation      if enabled skip namespace creation\n      --tls                          enable TLS for Ingress\n      --tls-email string             the TLS email address to enable TLS on the domain\n      --tls-production               the LetsEncrypt production service, defaults to true, set to false to use the Staging service (default true)\n      --tls-secret string            [optional] the custom Kubernetes Secret name for the TLS certificate\n      --vault-bucket string          specify the vault bucket\n      --vault-disable-url-discover   override the default lookup of the Vault URL, could be incluster service or external ingress\n      --vault-key string             specify the vault key\n      --vault-keyring string         specify the vault key ring\n      --vault-name string            specify the vault name\n      --vault-recreate-bucket        enables or disables whether to rereate the secret bucket on boot\n      --vault-sa string              specify the vault Service Account name\n  -z, --zone string                  configures the cloud zone\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/invitation/_index.md": "---\ntitle: jx admin invitation\nlinktitle: invitation\ntype: docs\ndescription: \"Accept bot user invitations ***Aliases**: invitations*\"\naliases:\n  - jx-admin_invitation\n---\n\n### Usage\n\n```\njx admin invitation\n```\n\n### Synopsis\n\nList and accept git repository invitations for the pipeline bot user\n\n### Examples\n\n  ```bash\n  # List and accept git repository invitations for the pipeline bot user\n  jx-admin invitations\n\n  ```\n### Options\n\n```\n  -h, --help   help for invitation\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/log/_index.md": "---\ntitle: jx admin log\nlinktitle: log\ntype: docs\ndescription: \"views the boot Job logs in the cluster ***Aliases**: logs*\"\naliases:\n  - jx-admin_log\n---\n\n### Usage\n\n```\njx admin log\n```\n\n### Synopsis\n\nViews the boot Job logs in the cluster\n\n### Examples\n\n  * views the current boot logs\n  \n  ```bash\n  jx-admin log\n  ```\n\n### Options\n\n```\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --commit-sha string              the git commit SHA of the git repository to query the boot Job for\n  -c, --container string               the name of the container in the boot Job to log (default \"job\")\n  -d, --duration duration              how long to wait for a Job to be active and a Pod to be ready (default 30m0s)\n  -g, --git-operator-selector string   the selector of the git operator pod (default \"app=jx-git-operator\")\n  -h, --help                           help for log\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string               the namespace where the boot jobs run. If not specified it will look in: jx-git-operator and jx\n      --poll duration                  duration between polls for an active Job or Pod (default 1s)\n  -s, --selector string                the selector of the boot Job pods (default \"app=jx-boot\")\n      --sha-mode                       if --commit-sha is not specified then default the git commit SHA from $ and fail if it could not be found\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -w, --wait                           wait for the next active Job to start\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/operator/_index.md": "---\ntitle: jx admin operator\nlinktitle: operator\ntype: docs\ndescription: \"installs the git operator in a cluster ***Aliases**: boot*\"\naliases:\n  - jx-admin_operator\n---\n\n### Usage\n\n```\njx admin operator\n```\n\n### Synopsis\n\nInstalls the git operator in a cluster\n\n### Examples\n\n  * installs the git operator from inside a git clone and prompt for the user/token if required\n  \n  ```bash\n  jx-admin operator\n  ```\n  \n  * installs the git operator from inside a git clone specifying the user/token\n  \n  ```bash\n  jx-admin operator --username mygituser --token mygittoken\n  ```\n  \n  * installs the git operator with the given git clone URL\n  \n  ```bash\n  jx-admin operator --url https://github.com/myorg/environment-mycluster-dev.git --username myuser --token myuser\n  ```\n  \n  * display what helm command will install the git operator\n  \n  ```bash\n  jx-admin operator --dry-run\n  ```\n\n### Options\n\n```\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --chart string                the chart name to use to install the git operator (default \"jxgh/jx-git-operator\")\n      --chart-version string        override the helm chart version used for the git operator\n  -d, --dir string                  the directory to discover the git URL if no url option is specified (default \".\")\n      --dry-run                     if enabled just display the helm command that will run but don't actually do anything\n  -h, --help                        help for operator\n      --max-log-duration duration   how long to wait for a boot Job pod to be ready to view its log (default 30m0s)\n      --name string                 the helm release name t ouse (default \"jxgo\")\n  -n, --namespace string            the namespace to install the git operator (default \"jx-git-operator\")\n      --no-log                      to disable viewing the logs of the boot Job pods\n      --no-switch-namespace         to disable switching to the installation namespace after installing the operator\n      --set stringArray             one or more helm set arguments to pass through the git operator chart. Equivalent to running 'helm install --set some.name=value'\n      --setup stringArray           a git configuration command to configure git inside the git operator pod to deal with things like insecure docker registries etc. e.g. supply 'git config --global http.sslverify false' to disable TLS verification\n      --skip-namespace-creation     if enabled skip namespace creation\n      --token string                specify the git token the operator will use to clone the environment git repository if there is no password in the git URL. If not specified defaults to $GIT_TOKEN\n  -u, --url string                  the git URL for the environment to boot using the operator. This is optional - the git operator Secret can be created later\n      --username string             specify the git user name the operator will use to clone the environment git repository if there is no username in the git URL. If not specified defaults to $GIT_USERNAME\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/plugins/_index.md": "---\ntitle: jx admin plugins\nlinktitle: plugins\ntype: docs\ndescription: \"Commands for working with Plugins ***Aliases**: plugin*\"\naliases:\n  - jx-admin_plugins\n---\n\n### Usage\n\n```\njx admin plugins\n```\n\n### Synopsis\n\nCommands for working with Plugins\n\n### Options\n\n```\n  -h, --help   help for plugins\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/plugins/upgrade/_index.md": "---\ntitle: jx admin plugins upgrade\nlinktitle: upgrade\ntype: docs\ndescription: \"Upgrades the binary plugins of the secret command (e.g. the Vault binary)\"\naliases:\n  - jx-admin_plugins_upgrade\n---\n\n### Usage\n\n```\njx admin plugins upgrade\n```\n\n### Synopsis\n\nUpgrades the binary plugins of the secret command (e.g. the helm binary)\n\n### Examples\n\n  ```bash\n  # upgrades the plugin binaries\n  jx upgrade\n\n  ```\n### Options\n\n```\n      --bin string   if set creates a symlink in the bin dir to the plugin binary\n  -h, --help         help for upgrade\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/stop/_index.md": "---\ntitle: jx admin stop\nlinktitle: stop\ntype: docs\ndescription: \"stops the currently running boot Job ***Aliases**: suspend*\"\naliases:\n  - jx-admin_stop\n---\n\n### Usage\n\n```\njx admin stop\n```\n\n### Synopsis\n\nStops the currently running boot Job. \n\nIt works by setting spec.suspend=true in the job.\n\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -h, --help               help for stop\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string   the namespace where the boot jobs run. If not specified it will look in: jx-git-operator and jx\n  -s, --selector string    the selector of the boot Job pods (default \"app=jx-boot\")\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/trigger/_index.md": "---\ntitle: jx admin trigger\nlinktitle: trigger\ntype: docs\ndescription: \"triggers the latest boot Job to run again ***Aliases**: rerun*\"\naliases:\n  - jx-admin_trigger\n---\n\n### Usage\n\n```\njx admin trigger\n```\n\n### Synopsis\n\nTriggers the latest boot Job to run again\n\n### Examples\n\n  * trigger the boot job again\n  \n  ```bash\n  jx-admin trigger\n  ```\n\n### Options\n\n```\n  -b, --batch-mode          Runs in batch mode without prompting for user input\n      --commit-sha string   the git commit SHA to filter jobs by\n  -h, --help                help for trigger\n      --log-level string    Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string    the namespace where the boot jobs run. If not specified it will look in: jx-git-operator and jx\n  -s, --selector string     the selector of the boot Job pods (default \"app=jx-boot\")\n      --verbose             Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/admin/version/_index.md": "---\ntitle: jx admin version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-admin_version\n---\n\n### Usage\n\n```\njx admin version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-admin](https://github.com/jenkins-x-plugins/jx-admin)\n",
            "content/en/v3/develop/reference/jx/application/_index.md": "---\ntitle: jx application\nlinktitle: application\ntype: docs\ndescription: \"Command for viewing deployed Applications across Environments\"\naliases:\n  - jx-application\n---\n\n### Usage\n\n```\njx application\n```\n\n### Synopsis\n\nCommand for viewing deployed Applications across Environments\n\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -h, --help               help for jx-application\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-application](https://github.com/jenkins-x-plugins/jx-application)\n",
            "content/en/v3/develop/reference/jx/application/delete/_index.md": "---\ntitle: jx application delete\nlinktitle: delete\ntype: docs\ndescription: \"Deletes the application deployments and removes the lighthouse configuration\"\naliases:\n  - jx-application_delete\n---\n\n### Usage\n\n```\njx application delete\n```\n\n### Synopsis\n\nDeletes the application deployments and removes the lighthouse configuration \n\nThis command actually create a Pull Request on the development cluster git repository so you can review the changes to be made.\n\n### Examples\n\n  ```bash\n  # deletes the application with the given name from the development cluster\n  jx application delete --name myapp\n  \n  # deletes the deployed application for the remote production cluster only\n  jx application delete --name myapp --env production\n  \n  # deletes the application with the given name with the git owner\n  jx application delete --name myapp --owner myorg\n  \n  # deletes the deployed applications but doesn't remove the '.jx/gitops/source-config.yaml' entry - so new releases come back\n  jx application delete --name myapp --owner myorg --no-source\n\n  ```\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green (default true)\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n  -e, --env string                  The Environment name used to find the repository git URL if none is specified (default \"dev\")\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for delete\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --no-source                   Do not remove the repository from the '.jx/gitops/source-config/yaml' file - so that a new release will come back\n  -o, --owner string                The name of the git organisation or user which owns the app\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title\n      --remove-ns string            The namespace to remove the app from. If blank remove from all deployed namespaces\n  -r, --repo string                 The name of the repository to remove\n  -u, --url string                  The git URL of the cluster git repository to modify\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-application](https://github.com/jenkins-x-plugins/jx-application)\n",
            "content/en/v3/develop/reference/jx/application/get/_index.md": "---\ntitle: jx application get\nlinktitle: get\ntype: docs\ndescription: \"Display one or more Applications and their versions ***Aliases**: applications,apps*\"\naliases:\n  - jx-application_get\n---\n\n### Usage\n\n```\njx application get application\n```\n\n### Synopsis\n\nDisplay applications across environments.\n\n### Examples\n\n  ```bash\n  # List applications, their URL and pod counts for all environments\n  jx get applications\n  # List applications only in the Staging environment\n  jx get applications -e staging\n  # List applications only in the Production environment\n  jx get applications -e production\n  # List applications only in a specific namespace\n  jx get applications -n jx-staging\n  # List applications hiding the URLs\n  jx get applications -u\n  # List applications just showing the versions (hiding urls and pod counts)\n  jx get applications -u -p\n\n  ```\n### Options\n\n```\n  -e, --env string         Filter applications in the given environment\n  -h, --help               help for get\n  -n, --namespace string   Filter applications in the given namespace\n  -p, --pod                Hide the pod counts\n  -u, --url                Hide the URLs\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-application](https://github.com/jenkins-x-plugins/jx-application)\n",
            "content/en/v3/develop/reference/jx/application/version/_index.md": "---\ntitle: jx application version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-application_version\n---\n\n### Usage\n\n```\njx application version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-application](https://github.com/jenkins-x-plugins/jx-application)\n",
            "content/en/v3/develop/reference/jx/changelog/_index.md": "---\ntitle: jx changelog\nlinktitle: changelog\ntype: docs\ndescription: \"Command for working with Changelogs\"\naliases:\n  - jx-changelog\n---\n\n### Usage\n\n```\njx changelog\n```\n\n### Synopsis\n\nCommand for working with Changelogs\n\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -h, --help               help for jx-changelog\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-changelog](https://github.com/jenkins-x-plugins/jx-changelog)\n",
            "content/en/v3/develop/reference/jx/changelog/create/_index.md": "---\ntitle: jx changelog create\nlinktitle: create\ntype: docs\ndescription: \"Creates a changelog for a git tag ***Aliases**: changelog,changes,publish*\"\naliases:\n  - jx-changelog_create\n---\n\n### Usage\n\n```\njx changelog create\n```\n\n### Synopsis\n\nCreates a Changelog for the latest tag \n\nThis command will generate a Changelog as markdown for the git commit range given. If you are using GitHub it will also update the GitHub Release with the changelog. You can disable that by passing'--update-release=false' \n\nIf you have just created a git tag this command will try default to the changes between the last tag and the previous one. You can always specify the exact Git references (tag/sha) directly via '--previous-rev' and '--rev' \n\nThe changelog is generated by parsing the git commits. It will also detect any text like 'fixes #123' to link to issue fixes. You can also use Conventional Commits notation: https://conventionalcommits.org/ to get a nicer formatted changelog. e.g. using commits like 'fix:(my feature) this my fix' or 'feat:(cheese) something' \n\nThis command also generates a Release Custom Resource Definition you can include in your helm chart to give metadata about the changelog of the application along with metadata about the release (git tag, url, commits, issues fixed etc). Including this metadata in a helm charts means we can do things like automatically comment on issues when they hit Staging or Production; or give detailed descriptions of what things have changed when using GitOps to update versions in an environment by referencing the fixed issues in the Pull Request. \n\nYou can opt out of the release YAML generation via the '--generate-yaml=false' option \n\nTo update the release notes on your git provider needs a git API token which is usually provided via the Tekton git authentication mechanism. \n\nApart from using your git provider as the issue tracker there is also support for Jira. You then specify issues in commit messages with the issue key that looks like ABC-123. You can configure this in in similar ways as environments, see https://jenkins-x.io/v3/develop/environments/config/. An example configuration: \n\n  issueProvider:\n    jira:\n      serverUrl: https://example.atlassian.net\n      userName: user@example.com\n\nJira API token is taken from the environment variable JIRA_API_TOKEN. Can be populated using the jx-boot-job-env-vars secret.\n\nBy default jx commands look for a file '~/.jx/gitAuth.yaml' to find the API tokens for Git servers. You can use 'jx create git token' to create a Git token.\n\nAlternatively if you are running this command inside a CI server you can use environment variables to specify the username and API token.\ne.g. define environment variables GIT_USERNAME and GIT_API_TOKEN\n\n\n### Examples\n\n  ```bash\n  # generate a changelog on the current source\n  jx-changelog create\n  \n  # specify the version to use\n  jx-changelog create --version 1.2.3\n  \n  # specify the version and a header template\n  jx-changelog create --header-file docs/dev/changelog-header.md --version 1.2.3\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                   Runs in batch mode without prompting for user input\n      --build string                 The Build number which is used to update the PipelineActivity. If not specified its defaulted from the '$BUILD_NUMBER' environment variable\n      --changelog-separator string   the separator to use when splitting commit message from changelog in the pull request body. Default to ----- or if set the CHANGELOG_SEPARATOR environment variable\n      --conditional-release          Wrap the Release YAML in the helm Capabilities.APIVersions.Has if statement (default true)\n  -c, --crd                          Generate the CRD in the chart\n      --crd-yaml-file string         the name of the file to generate the Release CustomResourceDefinition YAML (default \"release-crd.yaml\")\n      --dir string                   the directory to search for the .git to discover the git source URL (default \".\")\n      --draft                        The git provider release is marked as draft\n  -e, --exclude-regexp string        Regexp for excluding commits. Can be set with environment variable CHANGELOG_EXCLUDE_REGEXP. (default \"^release \")\n      --fail-if-no-commits           Do we want to fail the build if we don't find any commits to generate the changelog\n      --footer string                The changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n      --footer-file string           The file name of the changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n  -y, --generate-yaml                Generate the Release YAML in the local helm chart\n      --git-kind string              the kind of git server to connect to\n      --git-server string            the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string             the git token used to operate on the git repository\n      --header string                The changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n      --header-file string           The file name of the changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: https://golang.org/pkg/text/template/\n  -h, --help                         help for create\n      --include-changelog            Should changelogs from pull requests be included. (default true)\n      --include-merge-commits        Include merge commits when generating the changelog\n      --log-level string             Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --no-dev-release               Disables the generation of Release CRDs in the development namespace to track releases being performed\n      --output-markdown string       Put the changelog output in this file\n  -o, --overwrite                    overwrites the Release CRD YAML file if it exists\n      --prerelease                   The git provider release is marked as a pre-release\n      --previous-date string         the previous date to find a revision in format 'MonthName dayNumber year'\n  -p, --previous-rev string          the previous tag revision\n      --release-yaml-file string     the name of the file to generate the Release YAML (default \"release.yaml\")\n      --rev string                   the current tag revision\n      --status-path string           The path to the deployment status file used to calculate dependency updates. (default \"docs/releases.yaml\")\n      --tag-prefix string            prefix to filter on when searching for version tags\n  -t, --templates-dir string         the directory containing the helm chart templates to generate the resources\n      --update-release               Should we update the release on the Git repository with the changelog. (default true)\n      --verbose                      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -v, --version string               The version to release\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-changelog](https://github.com/jenkins-x-plugins/jx-changelog)\n",
            "content/en/v3/develop/reference/jx/changelog/version/_index.md": "---\ntitle: jx changelog version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-changelog_version\n---\n\n### Usage\n\n```\njx changelog version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-changelog](https://github.com/jenkins-x-plugins/jx-changelog)\n",
            "content/en/v3/develop/reference/jx/charter/_index.md": "---\ntitle: jx charter\nlinktitle: charter\ntype: docs\ndescription: \"commands for generating Helm Chart CRDs for better reporting and insight\"\naliases:\n  - jx-charter\n---\n\n### Usage\n\n```\njx charter\n```\n\n### Synopsis\n\ncommands for generating Helm Chart CRDs for better reporting and insight\n\n### Options\n\n```\n  -h, --help   help for jx-charter\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-charter](https://github.com/jenkins-x-plugins/jx-charter)\n",
            "content/en/v3/develop/reference/jx/charter/run/_index.md": "---\ntitle: jx charter run\nlinktitle: run\ntype: docs\ndescription: \"Runs the charter controller which watches helm Secrets and creates helm Chart CRDs\"\naliases:\n  - jx-charter_run\n---\n\n### Usage\n\n```\njx charter run\n```\n\n### Synopsis\n\nRuns the charter controller which watches helm Secrets and creates helm Chart CRDs\n\n### Examples\n\n  ```bash\n  # watch for helm Secret resources and create/update the associated Chart CRDs\n  jx-charter run\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                 Runs in batch mode without prompting for user input\n  -h, --help                       help for run\n      --log-level string           Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string           The kubernetes namespace to watch for helm Secrets\n      --port string                port the health endpoint should listen on (default \"8080\")\n      --resync-interval duration   resync interval between full re-list operations (default 1m0s)\n      --verbose                    Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-charter](https://github.com/jenkins-x-plugins/jx-charter)\n",
            "content/en/v3/develop/reference/jx/charter/update/_index.md": "---\ntitle: jx charter update\nlinktitle: update\ntype: docs\ndescription: \"Creates or Updates helm Chart CRDs from the helm Secrets\"\naliases:\n  - jx-charter_update\n---\n\n### Usage\n\n```\njx charter update\n```\n\n### Synopsis\n\nCreates or Updates helm Chart CRDs from the helm Secrets\n\n### Examples\n\n  ```bash\n  # creates or updates any missing helm Chart resources from the helm Secrets\n  jx-charter update\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -h, --help               help for update\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string   The kubernetes namespace to look for helm Secrets\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-charter](https://github.com/jenkins-x-plugins/jx-charter)\n",
            "content/en/v3/develop/reference/jx/charter/version/_index.md": "---\ntitle: jx charter version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-charter_version\n---\n\n### Usage\n\n```\njx charter version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-charter](https://github.com/jenkins-x-plugins/jx-charter)\n",
            "content/en/v3/develop/reference/jx/gitops/_index.md": "---\ntitle: jx gitops\nlinktitle: gitops\ntype: docs\ndescription: \"commands for working with GitOps based git repositories\"\naliases:\n  - jx-gitops\n---\n\n### Usage\n\n```\njx gitops\n```\n\n### Synopsis\n\ncommands for working with GitOps based git repositories\n\n### Options\n\n```\n  -h, --help   help for jx-gitops\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/annotate/_index.md": "---\ntitle: jx gitops annotate\nlinktitle: annotate\ntype: docs\ndescription: \"Annotates all kubernetes resources in the given directory tree\"\naliases:\n  - jx-gitops_annotate\n---\n\n### Usage\n\n```\njx gitops annotate\n```\n\n### Synopsis\n\nAnnotates all kubernetes resources in the given directory tree\n\n### Examples\n\n  ```bash\n  # updates recursively annotates all resources in the current directory\n  jx-gitops annotate myannotation=cheese another=thing\n  # updates recursively all resources\n  jx-gitops annotate --dir myresource-dir foo=bar\n  # remove annotations\n  jx-gitops annotate myannotate- another-\n\n  ```\n### Options\n\n```\n      --dir string                the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help                      help for annotate\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --overwrite                 Set to false to not overwrite any existing value (default true)\n  -p, --pod-spec                  annotate the PodSpec in spec.template.metadata.annotations (or spec.jobTemplate.spec.template.metadata.annotations for CronJobs) rather than the top level annotations\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/apply/_index.md": "---\ntitle: jx gitops apply\nlinktitle: apply\ntype: docs\ndescription: \"Performs a GitOps regeneration and apply on a cluster git repository\"\naliases:\n  - jx-gitops_apply\n---\n\n### Usage\n\n```\njx gitops apply\n```\n\n### Synopsis\n\nPerforms a gitops regeneration and apply on a cluster git repository \n\nIf the last commit was a merge from a pull request the regeneration is skipped, unless the cluster is new. \n\nAlso the process detects if an ingress has changed (or similar changes) and retriggers another regeneration which typically is only required when installing for the first time or if no explicit domain name is being used and the LoadBalancer service has been removed.\n\n### Examples\n\n  ```bash\n  # performs a regeneration and apply\n  jx-gitops apply\n\n  ```\n### Options\n\n```\n  -d, --dir string     the directory to the git and make commands (default \".\")\n  -h, --help           help for apply\n      --pull-request   specifies to apply the pull request contents into the PR branch\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/condition/_index.md": "---\ntitle: jx gitops condition\nlinktitle: condition\ntype: docs\ndescription: \"Runs a command if the condition is true\"\naliases:\n  - jx-gitops_condition\n---\n\n### Usage\n\n```\njx gitops condition [flags] command arguments...\n```\n\n### Synopsis\n\nRuns a command if the condition is true\n\n### Examples\n\n  ```bash\n  # runs a command if the last commit messsage has a given prefix\n  jx-gitops condition --last-commit-msg-prefix 'Merge pull request' -- make all commit push\n  \n  you can use ! in front of a filter to be the equivalent of not matching the condition. e.g.\n  \n  # runs a command if the last commit message does not have a given prefix\n  jx-gitops condition --last-commit-msg-prefix '!Merge pull request' -- make all commit push\n\n  ```\n### Options\n\n```\n  -d, --dir string                        the directory to run the git push command from\n  -h, --help                              help for condition\n      --last-commit-msg-contains string   matches if last-commit-msg contains the given text\n      --last-commit-msg-prefix string     matches if last-commit-msg has the given prefix\n      --last-commit-msg-suffix string     matches if last-commit-msg has the given suffix\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/copy/_index.md": "---\ntitle: jx gitops copy\nlinktitle: copy\ntype: docs\ndescription: \"Copies resources (by default confimaps) with the given selector or name from a source namespace to a destination namespace\"\naliases:\n  - jx-gitops_copy\n---\n\n### Usage\n\n```\njx gitops copy\n```\n\n### Synopsis\n\nCopies kubernetes resources (by default confimaps) from a namespace to the current namespace\n\n### Examples\n\n  ```bash\n  # copies the config map with named beer to a namespace\n  jx-gitops copy --name beer --to=foo\n  \n  # copies config maps with a selector to a namespace\n  jx-gitops copy -l mylabel=something --to=foo\n  \n  # copies resources matching a selector and kind\n  jx-gitops copy --kind ingresses -l mylabel=something --to=foo\n\n  ```\n### Options\n\n```\n      --create-namespace   create the to Namespace if it does not already exist\n  -g, --group string       the API group such as 'apps' for Deployemnts\n  -h, --help               help for copy\n  -k, --kind string        the kind name (default \"configmaps\")\n      --name string        the name of the resource to copy instead of a selector\n  -n, --ns string          the namespace to find the resources to copy. Defaults to the current namespace\n  -l, --selector string    the label selector to find the resources to copy\n  -t, --to string          the namespace to copy the secrets to\n      --version string     the API version of the resources to copy (default \"v1\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/gc/_index.md": "---\ntitle: jx gitops gc\nlinktitle: gc\ntype: docs\ndescription: \"Commands for garbage collecting resources\"\naliases:\n  - jx-gitops_gc\n---\n\n### Usage\n\n```\njx gitops gc\n```\n\n### Synopsis\n\nCommands for garbage collecting resources\n\n### Options\n\n```\n  -h, --help   help for gc\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/gc/activities/_index.md": "---\ntitle: jx gitops gc activities\nlinktitle: activities\ntype: docs\ndescription: \"garbage collection for PipelineActivity resources ***Aliases**: pa,act,pr*\"\naliases:\n  - jx-gitops_gc_activities\n---\n\n### Usage\n\n```\njx gitops gc activities\n```\n\n### Synopsis\n\nGarbage collect the Jenkins X PipelineActivity resources\n\n### Examples\n\n  ```bash\n  # garbage collect PipelineActivity resources\n  jx gitops gc activities\n  \n  # dry run mode\n  jx gitops gc pa --dry-run\n\n  ```\n### Options\n\n```\n  -d, --dry-run                     Dry run mode. If enabled just list the resources that would be removed\n  -h, --help                        help for activities\n      --pipelinerun-age duration    Maximum age to keep completed PipelineRuns for all pipelines (default 12h0m0s)\n      --pr-history-limit int        Minimum number of PipelineActivities to keep around per repository Pull Request (default 2)\n      --prowjob-age duration        Maximum age to keep completed ProwJobs for all pipelines (default 168h0m0s)\n  -p, --pull-request-age duration   Maximum age to keep PipelineActivities for Pull Requests (default 48h0m0s)\n  -r, --release-age duration        Maximum age to keep PipelineActivities for Releases (default 720h0m0s)\n  -l, --release-history-limit int   Maximum number of PipelineActivities to keep around per repository release (default 5)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/gc/jobs/_index.md": "---\ntitle: jx gitops gc jobs\nlinktitle: jobs\ntype: docs\ndescription: \"garbage collection for jobs ***Aliases**: job*\"\naliases:\n  - jx-gitops_gc_jobs\n---\n\n### Usage\n\n```\njx gitops gc jobs\n```\n\n### Synopsis\n\nGarbage collect old Jobs that have completed or failed\n\n### Examples\n\n  ```bash\n  # garbage collect old jobs of the default age keeping 1\n  jx gitops gc jobs\n  \n  # garbage collect jobs older than 10 minutes and keeping 10\n  jx gitops gc jobs -a 10m -k 10\n  \n  # garbage collect jobs older than 10 (don't keep any job)\n  jx gitops gc jobs -a 10m -k 0\n  \n  # dry run mode\n  jx gitops gc jobs --dry-run\n\n  ```\n### Options\n\n```\n  -a, --age duration       The minimum age of jobs to garbage collect. Any newer jobs will be kept (default 1h0m0s)\n  -d, --dry-run            Dry run mode. If enabled just list the jobs that would be removed\n  -h, --help               help for jobs\n  -k, --keep int           The minimum jobs to keep. Jobs to keep even if they are older than the age parameter (default 1)\n  -n, --namespace string   The namespace to look for the jobs. Defaults to the current namespace\n  -s, --selector string    The selector to use to filter the jobs\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/gc/pods/_index.md": "---\ntitle: jx gitops gc pods\nlinktitle: pods\ntype: docs\ndescription: \"garbage collection for pods ***Aliases**: pod*\"\naliases:\n  - jx-gitops_gc_pods\n---\n\n### Usage\n\n```\njx gitops gc pods\n```\n\n### Synopsis\n\nGarbage collect old Pods that have completed or failed\n\n### Examples\n\n  ```bash\n  # garbage collect old pods of the default age\n  jx gitops gc pods\n  \n  # garbage collect pods older than 10 minutes\n  jx gitops gc pods -a 10m\n\n  ```\n### Options\n\n```\n  -a, --age duration       The minimum age of pods to garbage collect. Any newer pods will be kept (default 1h0m0s)\n  -h, --help               help for pods\n  -n, --namespace string   The namespace to look for the pods. Defaults to the current namespace\n  -s, --selector string    The selector to use to filter the pods\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/git/_index.md": "---\ntitle: jx gitops git\nlinktitle: git\ntype: docs\ndescription: \"Commands for working with Git\"\naliases:\n  - jx-gitops_git\n---\n\n### Usage\n\n```\njx gitops git\n```\n\n### Synopsis\n\nCommands for working with Git\n\n### Options\n\n```\n  -h, --help   help for git\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/git/clone/_index.md": "---\ntitle: jx gitops git clone\nlinktitle: clone\ntype: docs\ndescription: \"Clones the cluster git repository using the URL, git user and token from the Secret\"\naliases:\n  - jx-gitops_git_clone\n---\n\n### Usage\n\n```\njx gitops git clone\n```\n\n### Synopsis\n\nClones the cluster git repository from the URL provided to the jx-git-operator watching the said repository, and authenticating as git user with token provided by jx-boot secret, also provided by jx-git-operator installation. \n\nEffectively this command runs jx gitops git setup before proceeding to simply clone the repository into either the folder passed in via --clone-dir or into the ./source directory.\n\n### Examples\n\n  ```bash\n  jx-gitops git clone\n\n  ```\n### Options\n\n```\n      --clone-dir string            the directory to clone the repository to. Default value used is ./source relative to the directory in which the command is running\n      --credentials-file string     The destination of the git credentials file to generate. If not specified uses $XDG_CONFIG_HOME/git/credentials or $HOME/git/credentials\n  -d, --dir string                  the directory to run the git setup command from\n  -e, --email string                the git user email to use if one is not setup. Default value is jenkins-x@googlegroups.com, if none other is provided\n      --fake-in-cluster             for testing: lets you fake running this command inside a kubernetes cluster so that it can create the file: $XDG_CONFIG_HOME/git/credentials or $HOME/git/credentials\n      --git-provider string         the git provider URL. If not specified its detected from the git operator jx-boot Secret or defaults to https://github.com\n  -h, --help                        help for clone\n  -n, --name string                 the git user name to use if one is not setup\n      --namespace string            the namespace used to find the git operator secret for the git repository if running in cluster. Defaults to the current namespace\n      --operator-namespace string   the namespace used by the git operator to find the secret for the git repository if running in cluster (default \"jx-git-operator\")\n      --password string             the git password/token to use. if not specified it is detected from the git operator Secret\n      --secret string               the name of the Secret to find the git URL, username and password for creating a git credential if running inside the cluster (default \"jx-boot\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/git/get/_index.md": "---\ntitle: jx gitops git get\nlinktitle: get\ntype: docs\ndescription: \"Gets a file from a git repository or environment git repository\"\naliases:\n  - jx-gitops_git_get\n---\n\n### Usage\n\n```\njx gitops git get\n```\n\n### Synopsis\n\nGets a file from the specified git repository or the git repository described in specified JX Environment resource. \n\nCopies a file specified by --file flag from a Git repository into local file system. The repository from which the file is read is either the one specified via command line flags or the one defined as the target repository of the Jenkins X Environment object, whose name too can be passed in via CLI flags. \n\nIn case that repository is read out from the environment, then if we are running in Kubernetes cluster the Environment object is searched for either in the namespace defined by the current kubeconfig context (if command is executed locally) or is searched for in the namespace of the Pod on which the command is being executed. \n\nIn case that command is not executed in Kubernetes and the repository has not been set via command line flags, then the repository from which file is read needs to be configured in environment variable: JX ENVIRONMENT GIT _URL. \n\nThe file is either copied to the path specified by the command line flag --to or is written under the same path from which it was read into the current working directory.\n\n### Examples\n\n  ```bash\n  jx-gitops git get --file jx-values.yaml --dev dev\n\n  ```\n### Options\n\n```\n      --branch string       specifies the branch if not inside a git clone\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n  -e, --env string          the name of the Environment to find the git repository URL\n  -f, --file string         the file in the git repository\n      --from string         the git repository of the form owner/name to find the file\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n  -h, --help                help for get\n      --ref string          the git reference (branch, tag or SHA) to query the file (default \"master\")\n  -r, --repo string         the full git repository name of the form 'owner/name'\n      --source-url string   the git source URL of the repository\n      --to string           the destination of the file. If not specified defaults to the path\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/git/merge/_index.md": "---\ntitle: jx gitops git merge\nlinktitle: merge\ntype: docs\ndescription: \"Merge a number of SHAs into the HEAD of the main branch\"\naliases:\n  - jx-gitops_git_merge\n---\n\n### Usage\n\n```\njx gitops git merge\n```\n\n### Synopsis\n\nMerge a number of SHAs into the HEAD of the main branch. \n\nThis command merges a list of commits into a specified branch. If the branch does not exist among local branches, then it is first created. \n\nIf both --pull-refs and --sha flags are specified then only those commits specified by --sha are merged into the base branch. \n\nIf --include-comment or --exclude-comment flags are specified, then --pull-number flag needs to be set as well. If only one of --include-comment or --exclude-comment, then only that one is used to filter commits while other is ignored. If both are specified, then only those commits which satisfy --include-comment and do not satisfy the --exclude-comment regex are added. Only those commits which are reachable by from pull request and are not reachable by base branch are included to be merged into the base branch.\n\n### Examples\n\n  ```bash\n  jx-gitops git merge\n\n  ```\n### Options\n\n```\n      --base-branch string       The branch to merge to. If not specified then either $PULL_BASE_REF is used or the first entry in $PULL_REFS is used \n      --base-sha string          The SHA to use on the base branch. Iff not specified then $PULL_BASE_SHA is used or the first entry in $PULL_REFS is used\n      --dir string               The directory in which the git repo is checked out (default \".\")\n  -e, --email string             the git user email to use if one is not setup\n      --exclude-comment string   the regular expression to filter commit comment to exclude in the merge\n      --fake-in-cluster          for testing: lets you fake running this command inside a kubernetes cluster so that it can create the file: $XDG_CONFIG_HOME/git/credentials or $HOME/git/credentials\n  -h, --help                     help for merge\n      --include-comment string   the regular expression to filter commit comment to include in the merge\n      --merge-arg stringArray    the extra arguments to pass to the 'git merge $sha' command to perform the merge\n  -n, --name string              the git user name to use if one is not setup\n      --pull-number string       The Pull Request number to use when filtering commits to merge\n      --pull-refs string         The PullRefs to parse\n  -r, --rebase                   use git rebase instead of merge\n      --remote string            The name of the remote (default \"origin\")\n      --sha stringArray          The SHA(s) to merge, if not specified then the value of the env var $PULL_REFS is parsed\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/git/setup/_index.md": "---\ntitle: jx gitops git setup\nlinktitle: setup\ntype: docs\ndescription: \"Sets up git to ensure the git user name and email is setup\"\naliases:\n  - jx-gitops_git_setup\n---\n\n### Usage\n\n```\njx gitops git setup\n```\n\n### Synopsis\n\nSets up git to ensure the git user name and email is setup. This is typically used in a pipeline to ensure git can do commits. \n\nThe jx gitops git setup command ensures that we can authenticate with configured Git server by configuring the local credentials file in the home directory. This command tries to ensure the following things: \n\n  * The user can be authenticated with Git provider (for example Github)  \n  * An email is associated with each automated commit message  \n\nThese credentials are written to ${HOME}/git/credentials file, where the ${HOME} directory is determined as: \n\n  * value stored in XGD CONFIG HOME environment variable or  \n  * value stored in HOME environment variable or  \n  * value stored in USERPROFILE environment variable or  \n  * as current directory ./  \n\nThe credentials are determined by reading out the jx-requirements.yaml from the cluster repository and jx-boot Secret resource provisioned together with jx-git-operator in your Kubernetes namespace. \n\nThe Git username and email are preferentially determined from PipelineUser field from jx-requirements.yaml, but if they are not available there then default email address jenkins-x@googlegroups.com is used . If the username could not be determined from jx-requirements.yaml, then it is determined from: \n\n  * GIT _USERNAME environment variable or  \n  * GITHUB _ACTOR environment variable  \n  * In case that we are running in Kubernetes cluster from \"username\" field of the \"jx-boot\" Secret provisioned with \"jx-git-operator\"  \n\nThe password for Github user (or a token for the robot account, depending on which you configued) is determined in similar fashion. Namely the token is first determined from environment variable GITHUB TOKEN, but if that fails, then further determination is dependent on execution environment of the command. Namely if it is running within Github actions, then the GITHUB TOKEN environment variable is our last stop. Otherwise if the command is executed within Kubernetes cluster, then the secret is determined by reading the password field of the \"jx-boot\" Secret provisioned with the \"jx-git-operator\".\n\n### Examples\n\n  ```bash\n  jx-gitops git setup\n\n  ```\n### Options\n\n```\n      --credentials-file string     The destination of the git credentials file to generate. If not specified uses $XDG_CONFIG_HOME/git/credentials or $HOME/git/credentials\n  -d, --dir string                  the directory to run the git setup command from\n  -e, --email string                the git user email to use if one is not setup. Default value is jenkins-x@googlegroups.com, if none other is provided\n      --fake-in-cluster             for testing: lets you fake running this command inside a kubernetes cluster so that it can create the file: $XDG_CONFIG_HOME/git/credentials or $HOME/git/credentials\n      --git-provider string         the git provider URL. If not specified its detected from the git operator jx-boot Secret or defaults to https://github.com\n  -h, --help                        help for setup\n  -n, --name string                 the git user name to use if one is not setup\n      --namespace string            the namespace used to find the git operator secret for the git repository if running in cluster. Defaults to the current namespace\n      --operator-namespace string   the namespace used by the git operator to find the secret for the git repository if running in cluster (default \"jx-git-operator\")\n      --password string             the git password/token to use. if not specified it is detected from the git operator Secret\n      --secret string               the name of the Secret to find the git URL, username and password for creating a git credential if running inside the cluster (default \"jx-boot\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/hash/_index.md": "---\ntitle: jx gitops hash\nlinktitle: hash\ntype: docs\ndescription: \"Annotates the given files with a hash of the given source files for ConfigMaps/Secrets\"\naliases:\n  - jx-gitops_hash\n---\n\n### Usage\n\n```\njx gitops hash\n```\n\n### Synopsis\n\nAnnotates the given files with a hash of the given source files for ConfigMaps/Secrets\n\n### Examples\n\n  ```bash\n  # annotates the Deployments in a dir from some source ConfigMaps\n  jx-gitops hash -s foo/configmap.yaml -s another/configmap.yaml -d someDir\n\n  ```\n### Options\n\n```\n  -a, --annotation string         the annotation for the hash to add to the files (default \"jenkins-x.io/hash\")\n  -d, --dir string                the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help                      help for hash\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on to annotate. For kind expressions see: https://github.com/jenkins-x-plugins/jx-gitops/tree/master/docs/kind_filters.md (default [Deployment])\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x-plugins/jx-gitops/tree/master/docs/kind_filters.md\n  -p, --pod-spec                  annotate the PodSpec in spec.templates.metadata.annotations rather than the top level annotations\n  -s, --source stringArray        the source files to hash\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/_index.md": "---\ntitle: jx gitops helm\nlinktitle: helm\ntype: docs\ndescription: \"Commands for working with helm charts\"\naliases:\n  - jx-gitops_helm\n---\n\n### Usage\n\n```\njx gitops helm\n```\n\n### Synopsis\n\nCommands for working with helm charts\n\n### Options\n\n```\n  -h, --help   help for helm\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/build/_index.md": "---\ntitle: jx gitops helm build\nlinktitle: build\ntype: docs\ndescription: \"Builds and lints any helm charts\"\naliases:\n  - jx-gitops_helm_build\n---\n\n### Usage\n\n```\njx gitops helm build\n```\n\n### Synopsis\n\nBuilds and lints any helm charts\n\n### Examples\n\n  ```bash\n  # generates the resources from a helm chart\n  jx-gitops step helm template\n\n  ```\n### Options\n\n```\n  -n, --binary string            specifies the helm binary location to use. If not specified defaults to 'helm' on the $PATH\n  -c, --charts-dir string        the directory to look for helm charts to release (default \"charts\")\n  -h, --help                     help for build\n      --oci                      using OCI charts\n      --registry-config string   the path to the registry config for OCI login (default \"/tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson\")\n      --repo-password string     the password to access the chart repository. If not specified defaults to the environment variable $JX_REPOSITORY_PASSWORD\n      --repo-username string     the username to access the chart repository. If not specified defaults to the environment variable $JX_REPOSITORY_USERNAME\n      --use-helm-plugin          uses the jx binary plugin for helm rather than whatever helm is on the $PATH\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/escape/_index.md": "---\ntitle: jx gitops helm escape\nlinktitle: escape\ntype: docs\ndescription: \"Escapes any {{ or }} characters in the YAML files so they can be included in a helm chart\"\naliases:\n  - jx-gitops_helm_escape\n---\n\n### Usage\n\n```\njx gitops helm escape\n```\n\n### Synopsis\n\nEscapes any {{ or }} characters in the YAML files so they can be included in a helm chart\n\n### Examples\n\n  ```bash\n  # escapes any yaml files so they can be included in a helm chart\n  jx-gitops helm escape --dir myyaml\n\n  ```\n### Options\n\n```\n  -d, --dir string   the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help         help for escape\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/mirror/_index.md": "---\ntitle: jx gitops helm mirror\nlinktitle: mirror\ntype: docs\ndescription: \"Mirror a helm repository\"\naliases:\n  - jx-gitops_helm_mirror\n---\n\n### Usage\n\n```\njx gitops helm mirror\n```\n\n### Synopsis\n\nMirrors a set of remote Helm repositories specified locally in charts/repositories.yml to a remote git repository\n\n### Examples\n\n  ```bash\n  # Mirror all Helm repositories defined in charts/repositories.yml to a default github pages branch\n  jx-gitops mirror --url=https://github.com/example/charts.git --no-push=false\n  \n  # Run the mirror command, ignoring unused repositories\n  %!s(MISSING) mirror --url=https://github.com/example/charts.git --no-push=false --exclude=bitnami\n\n  ```\n### Options\n\n```\n  -b, --branch string         the git branch to clone the repository (default \"gh-pages\")\n  -d, --dir string            the directory which contains the charts/repositories.yml file (default \".\")\n  -x, --exclude stringArray   the helm repositories to exclude from mirroring (default [jenkins-x,jx3])\n      --git-kind string       the kind of git server to connect to\n      --git-server string     the git server URL to create the scm client\n      --git-token string      the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string   the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                  help for mirror\n  -m, --message string        the commit message (default \"chore: upgrade mirrored charts\")\n      --no-push               disables pushing changes back to the git repository (default true)\n  -u, --url string            the git URL of the repository to mirror the charts into\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/release/_index.md": "---\ntitle: jx gitops helm release\nlinktitle: release\ntype: docs\ndescription: \"Performs a release of all the charts in the charts folder\"\naliases:\n  - jx-gitops_helm_release\n---\n\n### Usage\n\n```\njx gitops helm release\n```\n\n### Synopsis\n\nGenerate the kubernetes resources from a helm chart\n\n### Examples\n\n  ```bash\n  # generates the resources from a helm chart\n  jx-gitops step helm template\n\n  ```\n### Options\n\n```\n      --artifactory                use artifactory mode for publishing the chart which involves using an artifactory header and -T for pushing the chart\n  -c, --charts-dir string          the directory to look for helm charts to release (default \"charts\")\n      --dir string                 the root directory to look for .jx/requirements.yaml (default \".\")\n      --ghpage-url string          the github pages URL used if creating the first README.md in the github pages branch so we can link to how to add a chart repository\n  -h, --help                       help for release\n  -I, --ignore stringArray         the names of helm charts to not release (default [preview])\n      --namespace string           the namespace to look for the dev Environment. Defaults to the current namespace\n      --no-oci-login               disables using the 'helm registry login' command when using OCI\n      --no-release                 disables publishing the release. Useful for a Pull Request pipeline\n      --oci                        treat the repository as an OCI container registry. If not specified its defaulted from the cluster.chartOCI flag on the 'jx-requirements.yml' file\n      --pages                      use github pages to release charts\n      --registry-config string     the path to the registry config for OCI login (default \"/tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson\")\n  -n, --repo-name string           the name of the helm chart to release to. If not specified uses JX_CHART_REPOSITORY environment variable (default \"release-repo\")\n      --repo-nested string         the nested repository inside the repository. If not specified defaults to empty (not nested repo)\n      --repo-password string       the password to access the chart repository. If not specified defaults to the environment variable $JX_REPOSITORY_PASSWORD\n  -u, --repo-url string            the URL to release to\n      --repo-username string       the username to access the chart repository. If not specified defaults to the environment variable $JX_REPOSITORY_USERNAME\n      --repository-branch string   the branch used if using GitHub Pages for the helm chart (default \"gh-pages\")\n      --use-helm-plugin            uses the jx binary plugin for helm rather than whatever helm is on the $PATH\n      --version string             specify the version to release\n      --version-file string        the file to load the version from if not specified directly or via a $VERSION environment variable (default \"VERSION\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/stream/_index.md": "---\ntitle: jx gitops helm stream\nlinktitle: stream\ntype: docs\ndescription: \"Generate the kubernetes resources for all helm charts in a version stream\"\naliases:\n  - jx-gitops_helm_stream\n---\n\n### Usage\n\n```\njx gitops helm stream\n```\n\n### Synopsis\n\nGenerate the kubernetes resources for all helm charts in a version stream\n\n### Examples\n\n  ```bash\n  jx-gitops step helm stream\n\n  ```\n### Options\n\n```\n      --commit-message string   the git commit message used\n  -d, --dir string              the directory to look for the version stream git clone\n      --domain string           the default domain name in the generated ingress (default \"cluster.local\")\n      --git-commit              if set then the template command will git commit any changed files\n  -h, --help                    help for stream\n      --include-crds            if CRDs should be included in the output (default true)\n      --no-external-secrets     if set then disable converting Secret resources to ExternalSecrets\n      --no-split                if set then disable splitting of multiple resources into separate files\n      --optional                check if there is a charts dir and if not do nothing if it does not exist\n  -o, --output-dir string       the output directory to generate the templates to (default \".\")\n  -c, --ref string              the git ref (branch, tag, revision) to git clone (default \"master\")\n  -n, --url string              the git clone URL of the version stream\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helm/template/_index.md": "---\ntitle: jx gitops helm template\nlinktitle: template\ntype: docs\ndescription: \"Generate the kubernetes resources from a helm chart\"\naliases:\n  - jx-gitops_helm_template\n---\n\n### Usage\n\n```\njx gitops helm template\n```\n\n### Synopsis\n\nGenerate the kubernetes resources from a helm chart\n\n### Examples\n\n  ```bash\n  # generates the resources from a helm chart\n  jx-gitops step helm template\n\n  ```\n### Options\n\n```\n  -c, --chart string            the chart name to template. Defaults to 'charts/$name'\n      --commit-message string   the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n      --domain string           the default domain name in the generated ingress (default \"cluster.local\")\n      --git-commit              if set then the template command will git commit any changed files\n  -h, --help                    help for template\n      --include-crds            if CRDs should be included in the output (default true)\n  -n, --name string             the name of the helm release to template. Defaults to $APP_NAME if not specified\n      --namespace string        specifies the namespace to use to generate the templates in\n      --no-external-secrets     if set then disable converting Secret resources to ExternalSecrets\n      --no-split                if set then disable splitting of multiple resources into separate files\n      --optional                check if there is a charts dir and if not do nothing if it does not exist\n  -o, --output-dir string       the output directory to generate the templates to. Defaults to charts/$name/resources\n  -r, --repository string       the helm chart repository to locate the chart\n  -f, --values stringArray      the helm values.yaml file used to template values in the generated template\n  -v, --version string          the version of the helm chart to use. If not specified then the latest one is used\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/_index.md": "---\ntitle: jx gitops helmfile\nlinktitle: helmfile\ntype: docs\ndescription: \"Commands for working with helmfile ***Aliases**: helmfiles*\"\naliases:\n  - jx-gitops_helmfile\n---\n\n### Usage\n\n```\njx gitops helmfile\n```\n\n### Synopsis\n\nCommands for working with helmfile\n\n### Options\n\n```\n  -h, --help   help for helmfile\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/add/_index.md": "---\ntitle: jx gitops helmfile add\nlinktitle: add\ntype: docs\ndescription: \"Adds a chart to the local 'helmfile.yaml' file\"\naliases:\n  - jx-gitops_helmfile_add\n---\n\n### Usage\n\n```\njx gitops helmfile add\n```\n\n### Synopsis\n\nAdds a chart to the local 'helmfile.yaml' file\n\n### Examples\n\n  ```bash\n  # adds a chart using the currently known repositories in the version stream or helmfile.yaml\n  jx-gitops helmfile add --chart somerepo/mychart\n  \n  # adds a chart using a new repository URL with a custom version and namespace\n  jx-gitops helmfile add --chart somerepo/mychart --repository https://acme.com/myrepo --namespace foo --version 1.2.3\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n  -c, --chart string                the name of the helm chart to add\n      --commit-message string       the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n  -d, --dir string                  the directory that contains the jx-requirements.yml (default \".\")\n      --git-commit                  if set then the template command will git commit the modified helmfile.yaml files\n      --helmfile string             the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the dir\n  -h, --help                        help for add\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --name string                 the name of the helm release\n  -n, --namespace string            the namespace to install the chart (default \"jx\")\n  -r, --repository string           the helm chart repository URL of the chart\n      --values stringArray          the values files to add to the chart\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -v, --version string              the version of the helm chart. If not specified the versionStream will be checked otherwise the latest version is used\n      --version-stream-dir string   the directory for the version stream. Defaults to 'versionStream' in the current --dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/delete/_index.md": "---\ntitle: jx gitops helmfile delete\nlinktitle: delete\ntype: docs\ndescription: \"Deletes a chart from the helmfiles in one or all namespaces ***Aliases**: remove,rm,del*\"\naliases:\n  - jx-gitops_helmfile_delete\n---\n\n### Usage\n\n```\njx gitops helmfile delete\n```\n\n### Synopsis\n\nDeletes a chart from the helmfiles in one or all namespaces\n\n### Examples\n\n  ```bash\n  # deletes the chart from all namespaces\n  jx gitops helmfile delete --chart my-chart\n  \n  # deletes the chart from a specific namespace\n  jx gitops helmfile delete --chart my-chart --namespace jx-staging\n  \n  # deletes the chart with the repo prefix from a specific namespace\n  jx gitops helmfile delete --chart myrepo/my-chart --namespace jx-staging\n\n  ```\n### Options\n\n```\n  -b, --batch-mode              Runs in batch mode without prompting for user input\n  -c, --chart string            the name of the helm chart to remove\n      --commit-message string   the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n  -d, --dir string              the directory that contains the helmfile.yaml and helmfiles directory (default \".\")\n      --git-commit              if set then the template command will git commit the modified helmfile.yaml files\n      --helmfile string         the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the dir\n  -h, --help                    help for delete\n      --log-level string        Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string        the namespace to remove the chart from. If blank then remove from all namespaces\n      --verbose                 Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/move/_index.md": "---\ntitle: jx gitops helmfile move\nlinktitle: move\ntype: docs\ndescription: \"Moves the generated template files from 'helmfile template' into the right gitops directory ***Aliases**: mv*\"\naliases:\n  - jx-gitops_helmfile_move\n---\n\n### Usage\n\n```\njx gitops helmfile move\n```\n\n### Synopsis\n\nMoves the generated template files from 'helmfile template' into the right gitops directory. \n\nThe output of 'helmfile template' ignores the namespace specified in the 'helmfile.yaml' and there is a dummy top level directory. \n\nSo by default this command applies the namespace to all the generated resources \n\nThen it moves the namespaced resources into the config-root/namespaces/$ns/$releaseName directory and any CRDs or cluster level resources into 'config-root/cluster/$releaseName'. \n\nIf supplied with --dir-includes-release-name then by default we will annotate the resources with the annotations \"app.kubernetes.io/instance\" to preserve the helm release name. \n\nThe annotation \"meta.helm.sh/release-namespace\" will be added by default and contain the namespace specified in the release.\n\n### Examples\n\n  ```bash\n  # moves the generated files in 'tmp' to the config root dir\n  jx-gitops helmfile move --dir config-root --from tmp\n\n  ```\n### Options\n\n```\n      --annotate-release-name        if using --dir-includes-release-name layout then lets add the 'meta.helm.sh/release-name' annotation to record the helm release name (default true)\n      --annotate-release-namespace   add the 'meta.helm.sh/release-namespace' annotation to record the helm release namespace (default true)\n      --dir string                   the directory containing the generated resources\n      --dir-includes-release-name    the directory containing the generated resources has a path segment that is the release name\n  -h, --help                         help for move\n      --invert-selector              inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray             adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray      adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n  -o, --output-dir string            the output directory (default \"config-root\")\n      --override-namespace           applies the namespace specified in helmfile to all the generated resources (default true)\n      --selector stringToString      adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string       sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/report/_index.md": "---\ntitle: jx gitops helmfile report\nlinktitle: report\ntype: docs\ndescription: \"Generates a markdown report of the helmfile based deployments in each namespace\"\naliases:\n  - jx-gitops_helmfile_report\n---\n\n### Usage\n\n```\njx gitops helmfile report\n```\n\n### Synopsis\n\nGenerates a markdown report of the helmfile based deployments in each namespace\n\n### Examples\n\n  ```bash\n  # generates a report of the deployments\n  jx-gitops helmfile report\n\n  ```\n### Options\n\n```\n  -b, --batch-mode              Runs in batch mode without prompting for user input\n      --commit-message string   the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n      --config-root string      the folder name containing the kubernetes resources (default \"config-root\")\n  -d, --dir string              the directory that contains the helmfile.yaml (default \".\")\n      --git-commit              if set then the template command will git commit the modified helmfile.yaml files\n      --helm-binary string      specifies the helm binary location to use. If not specified defaults to using the downloaded helm plugin\n      --helmfile string         the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the dir\n  -h, --help                    help for report\n      --log-level string        Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --namespace string        the default namespace if none is specified in the helmfile.yaml (default \"jx\")\n  -o, --out-dir string          the output directory (default \"docs\")\n      --verbose                 Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/resolve/_index.md": "---\ntitle: jx gitops helmfile resolve\nlinktitle: resolve\ntype: docs\ndescription: \"Resolves any missing versions or values files in the helmfile.yaml file from the version stream\"\naliases:\n  - jx-gitops_helmfile_resolve\n---\n\n### Usage\n\n```\njx gitops helmfile resolve\n```\n\n### Synopsis\n\nResolves the helmfile.yaml from the version stream to specify versions and helm values\n\n### Examples\n\n  ```bash\n  # resolves the versions and values in the helmfile.yaml\n  jx-gitops helmfile resolve\n\n  ```\n### Options\n\n```\n      --add-environment-pipelines   skips the custom upgrade step for adding .lighthouse folder\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --commit-message string       the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n      --git-commit                  if set then the template command will git commit the modified helmfile.yaml files\n      --helm-binary string          specifies the helm binary location to use. If not specified defaults to using the downloaded helm plugin\n      --helmfile string             the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the dir\n  -h, --help                        help for resolve\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --namespace string            the default namespace if none is specified in the helmfile.yaml (default \"jx\")\n      --update                      updates versions from the version stream if they have changed\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --version-stream-dir string   the directory for the version stream. Defaults to 'versionStream' in the current --dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/status/_index.md": "---\ntitle: jx gitops helmfile status\nlinktitle: status\ntype: docs\ndescription: \"Updates the git deployment status after a release\"\naliases:\n  - jx-gitops_helmfile_status\n---\n\n### Usage\n\n```\njx gitops helmfile status\n```\n\n### Synopsis\n\nUpdates the git deployment status after a release. \n\nBy default the version of the release prefixed with v will be used as the git reference. This can be overridden by the annotation gitReference in the Chart.yaml file of the helm chart.\n\n### Examples\n\n  ```bash\n  # update the status in git after a release\n  jx-gitops helmfile status\n\n  ```\n### Options\n\n```\n  -a, --auto-inactive          if enabled then the the status of previous deployments will be set to inactive (default true)\n      --deploy-offset string   releases deployed after this time offset will have their deployments updated. Set to empty to update all. Format is a golang duration string (default \"-2h\")\n  -d, --dir string             the directory that contains the content (default \".\")\n  -f, --fail                   if enabled then fail the boot pipeline if we cannot report the deployment status\n  -h, --help                   help for status\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/structure/_index.md": "---\ntitle: jx gitops helmfile structure\nlinktitle: structure\ntype: docs\ndescription: \"Runs 'helmfile structure' on the helmfile in specified directory which will split in to multiple helmfiles based around namespace\"\naliases:\n  - jx-gitops_helmfile_structure\n---\n\n### Usage\n\n```\njx gitops helmfile structure\n```\n\n### Synopsis\n\nRuns 'helmfile structure' on the helmfile in specified directory which will split in to multiple helmfiles based around namespace\n\n### Examples\n\n  ```bash\n  # splits the helmfile.yaml into separate files for each namespace\n  jx-gitops helmfile structure --dir /path/to/gitops/repo\n\n  ```\n### Options\n\n```\n  -d, --dir string   the directory to run the commands inside (default \".\")\n  -h, --help         help for structure\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/helmfile/validate/_index.md": "---\ntitle: jx gitops helmfile validate\nlinktitle: validate\ntype: docs\ndescription: \"Validates helmfile.yaml against a jx canonical tree of helmfiles\"\naliases:\n  - jx-gitops_helmfile_validate\n---\n\n### Usage\n\n```\njx gitops helmfile validate\n```\n\n### Synopsis\n\nParses a helmfile and any nested helmfiles and validates they conform to a canonical directory structure for jx based around namespace\n\n### Examples\n\n  ```bash\n  # Validates helmfile.yaml within the current directory\n  jx-gitops helmfile validate\n\n  ```\n### Options\n\n```\n  -d, --dir string        the directory that contains helmfile.yml (default \".\")\n      --helmfile string   the helmfile to template. Defaults to 'helmfile.yaml' in the directory\n  -h, --help              help for validate\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/image/_index.md": "---\ntitle: jx gitops image\nlinktitle: image\ntype: docs\ndescription: \"Updates images in the kubernetes resources from the version stream\"\naliases:\n  - jx-gitops_image\n---\n\n### Usage\n\n```\njx gitops image\n```\n\n### Synopsis\n\nUpdates images in the kubernetes resources from the version stream\n\n### Examples\n\n  ```bash\n  # modify the images in the content-root folder using the current version stream\n  jx-gitops image\n  # modify the images in the ./src dir using the current dir to find the version stream\n  jx-gitops image --source-dir ./src --dir .\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n  -d, --dir string                  the directory that contains the jx-requirements.yml (default \".\")\n  -h, --help                        help for image\n      --invert-selector             inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray            adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray     adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --selector stringToString     adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string      sets which path in the Kubernetes resources to select on instead of metadata.labels.\n  -s, --source-dir string           the directory to recursively look for the *.yaml files to modify (default \"content-root\")\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --version-stream-dir string   the directory for the version stream. Defaults to 'versionStream' in the current --dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/ingress/_index.md": "---\ntitle: jx gitops ingress\nlinktitle: ingress\ntype: docs\ndescription: \"Updates Ingress resources with the current ingress domain\"\naliases:\n  - jx-gitops_ingress\n---\n\n### Usage\n\n```\njx gitops ingress\n```\n\n### Synopsis\n\nUpdates Ingress resources with the current ingress domain\n\n### Examples\n\n  ```bash\n  # updates any newly created Ingress resources to the new domain\n  jx-gitops ingress\n\n  ```\n### Options\n\n```\n  -d, --dir string            the directory to look for a 'jx-apps.yml' file (default \".\")\n  -n, --domain string         the domain to replace with whats in jx-requirements.yml (default \"cluster.local\")\n      --fail-on-parse-error   if enabled we fail if we cannot parse a yaml file as a kubernetes resource\n  -h, --help                  help for ingress\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/jenkins/_index.md": "---\ntitle: jx gitops jenkins\nlinktitle: jenkins\ntype: docs\ndescription: \"Commands for working with Jenkins GitOps configuration\"\naliases:\n  - jx-gitops_jenkins\n---\n\n### Usage\n\n```\njx gitops jenkins\n```\n\n### Synopsis\n\nCommands for working with Jenkins GitOps configuration\n\n### Options\n\n```\n  -h, --help   help for jenkins\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/jenkins/add/_index.md": "---\ntitle: jx gitops jenkins add\nlinktitle: add\ntype: docs\ndescription: \"Adds a new Jenkins server to the git repository ***Aliases**: create,new*\"\naliases:\n  - jx-gitops_jenkins_add\n---\n\n### Usage\n\n```\njx gitops jenkins add\n```\n\n### Synopsis\n\nAdds a new Jenkins server to the git repository\n\n### Examples\n\n  ```bash\n  # adds a new jenkins server to the git repository\n  jx-gitops jenkins add --name myjenkins\n\n  ```\n### Options\n\n```\n  -c, --chart string        the jenkins helm chart to use (default \"jenkinsci/jenkins\")\n  -h, --help                help for add\n  -n, --name string         the name of the jenkins server to add\n  -r, --repository string   the helm chart repository URL of the chart (default \"https://charts.jenkins.io\")\n  -v, --version string      the version of the helm chart. If not specified the versionStream will be checked otherwise the latest version is used\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/jenkins/jobs/_index.md": "---\ntitle: jx gitops jenkins jobs\nlinktitle: jobs\ntype: docs\ndescription: \"Generates the Jenkins Jobs helm files ***Aliases**: job*\"\naliases:\n  - jx-gitops_jenkins_jobs\n---\n\n### Usage\n\n```\njx gitops jenkins jobs\n```\n\n### Synopsis\n\nGenerates the Jenkins Jobs helm files\n\n### Examples\n\n  ```bash\n  # generate the jenkins job files\n  jx-gitops jenkins jobs\n\n  ```\n### Options\n\n```\n  -c, --config string             the configuration file to load for the repository configurations. If not specified we look in ./.jx/gitops/source-config.yaml\n      --default-template string   the default job template file if none is configured for a repository\n  -d, --dir string                the current working directory (default \".\")\n  -h, --help                      help for jobs\n      --no-create-helmfile        disables the creation of the helmfiles/jenkinsName/helmfile.yaml file if a jenkins server does not yet exist\n  -o, --out string                the output directory for the generated config files. If not specified defaults to the jenkins dir in the current directory\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/kpt/_index.md": "---\ntitle: jx gitops kpt\nlinktitle: kpt\ntype: docs\ndescription: \"Commands for working with kpt packages\"\naliases:\n  - jx-gitops_kpt\n---\n\n### Usage\n\n```\njx gitops kpt\n```\n\n### Synopsis\n\nCommands for working with kpt packages\n\n### Options\n\n```\n  -h, --help   help for kpt\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/kpt/recreate/_index.md": "---\ntitle: jx gitops kpt recreate\nlinktitle: recreate\ntype: docs\ndescription: \"Recreates the kpt packages in the given directory\"\naliases:\n  - jx-gitops_kpt_recreate\n---\n\n### Usage\n\n```\njx gitops kpt recreate\n```\n\n### Synopsis\n\nUpdates the kpt packages in the given directory\n\n### Examples\n\n  ```bash\n  # updates the kpt of all the yaml resources in the given directory\n  jx-gitops kpt --dir .\n\n  ```\n### Options\n\n```\n  -d, --dir string       the directory to recursively look for the *.yaml or *.yml files (default \".\")\n      --dry-run          just output the commands to be executed\n  -h, --help             help for recreate\n  -i, --ignore-errors    if enabled we continue processing on kpt errors\n  -o, --out-dir string   the output directory to generate the output\n      --version string   if specified overrides the versions used in the kpt packages (e.g. to 'master')\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/kpt/update/_index.md": "---\ntitle: jx gitops kpt update\nlinktitle: update\ntype: docs\ndescription: \"Updates any kpt packages installed in a sub directory\"\naliases:\n  - jx-gitops_kpt_update\n---\n\n### Usage\n\n```\njx gitops kpt update\n```\n\n### Synopsis\n\nUpdates any kpt packages installed in a sub directory \n\nIf you know a specific directory which needs updating you can always use 'kpt' directly via: \n\n          kpt pkg update mySubDir\n\n### Examples\n\n  ```bash\n  # recurses the current dir looking for directories with Kptfile inside\n  # and upgrades the kpt package found there to the latest version\n  jx-gitops kpt --dir .\n\n  ```\n### Options\n\n```\n  -b, --batch-mode              Runs in batch mode without prompting for user input\n      --bin string              the 'kpt' binary name to use. If not specified this command will download the jx binary plugin into ~/.jx3/plugins/bin and use that\n  -c, --container-tool string   the underlying container tool for kpt to use (default \"docker\")\n      --dir string              the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help                    help for update\n      --ignore-yaml-error       ignore kpt errors of the form: yaml: did not find expected node content\n      --log-level string        Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --owner string            filter on the Kptfile repository owner (user/organisation) for which packages to update\n  -r, --repo string             filter on the Kptfile repository name  for which packages to update\n  -s, --strategy string         the 'kpt' strategy to use. To see available strategies type 'kpt pkg update --help'. Typical values are: resource-merge, fast-forward, force-delete-replace (default \"resource-merge\")\n  -u, --url string              filter on the Kptfile repository URL for which packages to update\n      --verbose                 Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -v, --version string          the git version of the kpt package to upgrade to\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/kustomize/_index.md": "---\ntitle: jx gitops kustomize\nlinktitle: kustomize\ntype: docs\ndescription: \"Generates a kustomize layout by comparing a source and target directories\"\naliases:\n  - jx-gitops_kustomize\n---\n\n### Usage\n\n```\njx gitops kustomize\n```\n\n### Synopsis\n\nGenerates a kustomize layout by comparing a source and target directories.\n  \nIf you are using kpt to consume templates and you make lots of modifications and hit merge/upgrade issues this command lets you reverse engineer kustomize overlays from the changes you have made the to resources.\n\n### Examples\n\n  ```bash\n  # reverse engineer kustomize overlays by comparing the source to the current target\n  jx-gitops kustomize --source src/base --target config-root --output src/overlays/default\n\n  ```\n### Options\n\n```\n  -h, --help            help for kustomize\n  -o, --output string   the output directory to store the overlays\n  -s, --source string   the directory to recursively look for the source *.yaml or *.yml files (default \".\")\n  -t, --target string   the directory to recursively look for the target *.yaml or *.yml files\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/label/_index.md": "---\ntitle: jx gitops label\nlinktitle: label\ntype: docs\ndescription: \"Labels all kubernetes resources in the given directory tree\"\naliases:\n  - jx-gitops_label\n---\n\n### Usage\n\n```\njx gitops label\n```\n\n### Synopsis\n\nLabels all kubernetes resources in the given directory tree\n\n### Examples\n\n  ```bash\n  # updates recursively labels all resources in the current directory\n  jx-gitops label mylabel=cheese another=thing\n  # updates recursively all resources\n  jx-gitops label --dir myresource-dir foo=bar\n  # remove labels\n  jx-gitops label mylabel- another-\n\n  ```\n### Options\n\n```\n      --dir string                the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help                      help for label\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --overwrite                 Set to false to not overwrite any existing value (default true)\n  -p, --pod-spec                  label the PodSpec in spec.template.metadata.labels (or spec.jobTemplate.spec.template.metadata.labels for CronJobs) rather than the top level labels\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/lint/_index.md": "---\ntitle: jx gitops lint\nlinktitle: lint\ntype: docs\ndescription: \"Lints the gitops files in the file system\"\naliases:\n  - jx-gitops_lint\n---\n\n### Usage\n\n```\njx gitops lint\n```\n\n### Synopsis\n\nLints the gitops files in the file system\n\n### Examples\n\n  ```bash\n  # lint files\n  jx-gitops lint --dir .\n\n  ```\n### Options\n\n```\n  -d, --dir string   the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help         help for lint\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/namespace/_index.md": "---\ntitle: jx gitops namespace\nlinktitle: namespace\ntype: docs\ndescription: \"Updates all kubernetes resources in the given directory to the given namespace ***Aliases**: ns*\"\naliases:\n  - jx-gitops_namespace\n---\n\n### Usage\n\n```\njx gitops namespace\n```\n\n### Synopsis\n\nUpdates all kubernetes resources in the given directory to the given namespace\n\n### Examples\n\n  ```bash\n  # updates the namespace of all the yaml resources in the given directory\n  jx-gitops namespace -n cheese --dir .\n  \n  \n  # sets the namespace property to the name of the child directory inside of 'config-root/namespaces'\n  # e.g. so that the files 'config-root/namespaces/cheese/*.yaml' get set to namespace 'cheese'\n  # and 'config-root/namespaces/wine/*.yaml' are set to 'wine'\n  jx-gitops namespace --dir-mode --dir config-root/namespaces\n\n  ```\n### Options\n\n```\n      --cluster-dir string        the directory to recursively look for the *.yaml or *.yml files\n      --dir string                the directory to recursively look for the namespaced *.yaml or *.yml files to set the namespace on (default \".\")\n      --dir-mode                  assumes the first child directory is the name of the namespace to use\n  -h, --help                      help for namespace\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n  -n, --namespace string          the namespace to modify the resources to\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/patch/_index.md": "---\ntitle: jx gitops patch\nlinktitle: patch\ntype: docs\ndescription: \"Patches the given resources\"\naliases:\n  - jx-gitops_patch\n---\n\n### Usage\n\n```\njx gitops patch\n```\n\n### Synopsis\n\nAnnotates all kubernetes resources in the given directory tree\n\n### Examples\n\n  ```bash\n  # updates recursively annotates all resources in the current directory\n  jx-gitops annotate myannotate=cheese another=thing\n  # updates recursively all resources\n  jx-gitops annotate --dir myresource-dir foo=bar\n\n  ```\n### Options\n\n```\n  -d, --data string       the patch data to apply as json or yaml\n  -g, --group string      the API group such as 'apps' for Deployemnts (default \"apps\")\n  -h, --help              help for patch\n  -k, --kind string       the kind name (default \"deployments\")\n      --name string       the name of the resource to copy instead of a selector\n  -n, --ns string         the namespace to find the resources to copy. Defaults to the current namespace\n  -l, --selector string   the label selector to find the resources to copy\n      --type string       the patch type such as 'yaml' or 'json'\n      --version string    the API version of the resources to copy (default \"v1\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/plugin/_index.md": "---\ntitle: jx gitops plugin\nlinktitle: plugin\ntype: docs\ndescription: \"Commands for working with plugins\"\naliases:\n  - jx-gitops_plugin\n---\n\n### Usage\n\n```\njx gitops plugin\n```\n\n### Synopsis\n\nCommands for working with plugins\n\n### Options\n\n```\n  -h, --help   help for plugin\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/plugin/get/_index.md": "---\ntitle: jx gitops plugin get\nlinktitle: get\ntype: docs\ndescription: \"Display the binary plugins ***Aliases**: list,ls*\"\naliases:\n  - jx-gitops_plugin_get\n---\n\n### Usage\n\n```\njx gitops plugin get\n```\n\n### Synopsis\n\nDisplay the binary plugins\n\n### Examples\n\n  ```bash\n  # list all binary plugins\n  jx plugin get\n\n  ```\n### Options\n\n```\n  -h, --help   help for get\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/plugin/upgrade/_index.md": "---\ntitle: jx gitops plugin upgrade\nlinktitle: upgrade\ntype: docs\ndescription: \"Upgrades the binary plugins for this plugin\"\naliases:\n  - jx-gitops_plugin_upgrade\n---\n\n### Usage\n\n```\njx gitops plugin upgrade\n```\n\n### Synopsis\n\nUpgrades the binary plugins for this plugin\n\n### Examples\n\n  ```bash\n  # upgrades your plugin binaries for gitops\n  jx-gitops plugin upgrade\n\n  ```\n### Options\n\n```\n  -h, --help          help for upgrade\n      --path string   creates a symlink to the binary plugins in this bin path dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/postprocess/_index.md": "---\ntitle: jx gitops postprocess\nlinktitle: postprocess\ntype: docs\ndescription: \"Post processes kubernetes resources to enrich resources like ServiceAccounts with cloud specific sensitive data to enable IAM rles\"\naliases:\n  - jx-gitops_postprocess\n---\n\n### Usage\n\n```\njx gitops postprocess\n```\n\n### Synopsis\n\nPost processes kubernetes resources to enrich resources like ServiceAccounts with cloud specific sensitive data to enable IAM rles\n\n### Examples\n\n  ```bash\n  # after applying the resources lets post process them\n  jx-gitops postprocess\n  \n  # you can register some post processing commands, such as to annotate a ServiceAccount via:\n  kubectl create secret generic jx-post-process -n default  --from-literal=commands=\"kubectl annotate sa tekton-bot hello=world\"\n\n  ```\n### Options\n\n```\n  -h, --help               help for postprocess\n  -n, --namespace string   the namespace to look for the post processing Secret (default \"default\")\n  -s, --secret string      the name of the Secret with the post process scripts to apply (default \"jx-post-process\")\n      --shell string       the location of the shell binary to execute (default \"sh\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/_index.md": "---\ntitle: jx gitops pr\nlinktitle: pr\ntype: docs\ndescription: \"Commands for working with Pull Requests ***Aliases**: pullrequest,pullrequests*\"\naliases:\n  - jx-gitops_pr\n---\n\n### Usage\n\n```\njx gitops pr\n```\n\n### Synopsis\n\nCommands for working with Pull Requests\n\n### Options\n\n```\n  -h, --help   help for pr\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/comment/_index.md": "---\ntitle: jx gitops pr comment\nlinktitle: comment\ntype: docs\ndescription: \"Add comment to the pull request\"\naliases:\n  - jx-gitops_pr_comment\n---\n\n### Usage\n\n```\njx gitops pr comment\n```\n\n### Synopsis\n\nAdds a comment to the current pull request\n\n### Examples\n\n  ```bash\n  # add comment\n  jx-gitops pr comment -c \"message from Jenkins X pipeline\"\n\n  ```\n### Options\n\n```\n      --branch string       specifies the branch if not inside a git clone\n  -c, --comment string      comment to add\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n  -f, --file string         add content of file as comment\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n  -h, --help                help for comment\n      --pr int              the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n  -r, --repo string         the full git repository name of the form 'owner/name'\n      --source-url string   the git source URL of the repository\n  -s, --strategy string     comment strategy to choose (create, create-if-not-exists, delete-and-create) (default \"create\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/get/_index.md": "---\ntitle: jx gitops pr get\nlinktitle: get\ntype: docs\ndescription: \"Gets a pull request and displays fields from it\"\naliases:\n  - jx-gitops_pr_get\n---\n\n### Usage\n\n```\njx gitops pr get\n```\n\n### Synopsis\n\nGets a pull request and displays fields from it\n\n### Examples\n\n  ```bash\n  # display the head source URL\n  jx-gitops pr get --head-url\n\n  ```\n### Options\n\n```\n      --branch string       specifies the branch if not inside a git clone\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n      --head-url            show the head clone URL of the PR\n  -h, --help                help for get\n      --pr int              the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n  -r, --repo string         the full git repository name of the form 'owner/name'\n      --source-url string   the git source URL of the repository\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/label/_index.md": "---\ntitle: jx gitops pr label\nlinktitle: label\ntype: docs\ndescription: \"Add label to the pull request\"\naliases:\n  - jx-gitops_pr_label\n---\n\n### Usage\n\n```\njx gitops pr label\n```\n\n### Synopsis\n\nAdds a label to the current pull request\n\n### Examples\n\n  ```bash\n  # add label\n  jx-gitops pr label -n mylabel\n  \n  # add label if there exists a matching label with the regex\n  jx-gitops pr label -n mylabel --matches \"env/.*\"\n\n  ```\n### Options\n\n```\n  -b, --batch-mode          Runs in batch mode without prompting for user input\n      --branch string       specifies the branch if not inside a git clone\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n  -h, --help                help for label\n      --ignore-no-pr        if an error is returned finding the Pull Request (maybe due to missing environment variables to find the PULL_NUMBER) just push to the current branch instead\n      --log-level string    Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -m, --matches string      only label the Pull Request if there is already a label which matches the regular expression\n  -n, --name string         name of the label to add\n      --pr int              the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n  -r, --repo string         the full git repository name of the form 'owner/name'\n      --source-url string   the git source URL of the repository\n      --verbose             Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/push/_index.md": "---\ntitle: jx gitops pr push\nlinktitle: push\ntype: docs\ndescription: \"Pushes the current git directory to the branch used to create the Pull Request\"\naliases:\n  - jx-gitops_pr_push\n---\n\n### Usage\n\n```\njx gitops pr push\n```\n\n### Synopsis\n\nPushes the current git directory to the branch used to create the Pull Request\n\n### Examples\n\n  ```bash\n  # pushes the current directories git contents to the branch used to create the current PR via $BRANCH_NAME\n  jx-gitops pr push\n\n  ```\n### Options\n\n```\n      --branch string       specifies the branch if not inside a git clone\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n      --email string        the git user email to use if one is not setup\n  -f, --force               force pushes to the branch\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n  -h, --help                help for push\n      --ignore-no-pr        if an error is returned finding the Pull Request (maybe due to missing environment variables to find the PULL_NUMBER) just push to the current branch instead\n      --name string         the git user name to use if one is not setup\n      --pr int              the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n  -r, --repo string         the full git repository name of the form 'owner/name'\n      --source-url string   the git source URL of the repository\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/pr/variables/_index.md": "---\ntitle: jx gitops pr variables\nlinktitle: variables\ntype: docs\ndescription: \"Adds Pull Request environment variables to the .jx/variables.sh file ***Aliases**: var,variable*\"\naliases:\n  - jx-gitops_pr_variables\n---\n\n### Usage\n\n```\njx gitops pr variables\n```\n\n### Synopsis\n\nAdds Pull Request environment variables to the .jx/variables.sh file\n\n### Examples\n\n  ```bash\n  # add variables from the Pull Request and labels to the .jx/variables.sh file\n  jx gitops pr variables\n  \n  # add variables from the Pull Request, labels and comments of the form '/jx-var FOO=bar' to the .jx/variables.sh file\n  jx gitops pr variables --comments\n\n  ```\n### Options\n\n```\n      --branch string           specifies the branch if not inside a git clone\n      --comment-prefix string   the comment prefix to specify environment variables (default \"/jx-var\")\n      --comments                if enabled query all the comments on the Pull Request and find any variables using special comments starting with the comment prefix\n      --dir string              the directory to search for the .git to discover the git source URL (default \".\")\n      --env-prefix string       the prefix added to any variable name defined via a comment. e.g. a comment of '/jx-var CHEESE=edam' would generate 'export PR_COMMENT_CHEESE=edam' (default \"PR_COMMENT_\")\n  -f, --file string             the default variables file to lazily create or enrich (default \".jx/variables.sh\")\n      --git-kind string         the kind of git server to connect to\n      --git-server string       the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string        the git token used to operate on the git repository\n  -h, --help                    help for variables\n      --pr int                  the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n  -r, --repo string             the full git repository name of the form 'owner/name'\n      --source-url string       the git source URL of the repository\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/rename/_index.md": "---\ntitle: jx gitops rename\nlinktitle: rename\ntype: docs\ndescription: \"Renames yaml files to use canonical file names based on the resource name and kind\"\naliases:\n  - jx-gitops_rename\n---\n\n### Usage\n\n```\njx gitops rename\n```\n\n### Synopsis\n\nRenames yaml files to use canonical file names based on the resource name and kind\n\n### Examples\n\n  ```bash\n  # renames files to use a canonical file name\n  jx-gitops rename --dir .\n\n  ```\n### Options\n\n```\n  -d, --dir string   the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help         help for rename\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/_index.md": "---\ntitle: jx gitops repository\nlinktitle: repository\ntype: docs\ndescription: \"Commands for working with source repositories ***Aliases**: repo,repos,repositories*\"\naliases:\n  - jx-gitops_repository\n---\n\n### Usage\n\n```\njx gitops repository\n```\n\n### Synopsis\n\nCommands for working with source repositories\n\n### Options\n\n```\n  -h, --help   help for repository\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/add/_index.md": "---\ntitle: jx gitops repository add\nlinktitle: add\ntype: docs\ndescription: \"Add one or more git URLs to the source configuration\"\naliases:\n  - jx-gitops_repository_add\n---\n\n### Usage\n\n```\njx gitops repository add\n```\n\n### Synopsis\n\nAdd one or more repositories to the SourceConfig\n\n### Examples\n\n  ```bash\n  # creates any missing SourceConfig resources\n  jx-gitops repository add https://github.com/myorg/myrepo.git\n\n  ```\n### Options\n\n```\n  -c, --config string             the configuration file to load for the repository configurations. If not specified we look in .jx/gitops/source-repositories.yaml\n  -d, --dir string                the directory look for the 'jx-requirements.yml` file (default \".\")\n  -e, --explicit                  Explicit mode: always populate all the fields even if they can be deduced. e.g. the git URLs for each repository are not absolutely necessary and are omitted by default are populated if this flag is enabled\n  -h, --help                      help for add\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -j, --jenkins string            the name of the Jenkins server to add the repository to\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --namespace string          the namespace to discover SourceRepository resources to default the GitKind. If not specified then use the current namespace\n  -s, --scheduler string          the name of the Scheduler to use for the repository\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/create/_index.md": "---\ntitle: jx gitops repository create\nlinktitle: create\ntype: docs\ndescription: \"Creates any missing SourceRepository resources\"\naliases:\n  - jx-gitops_repository_create\n---\n\n### Usage\n\n```\njx gitops repository create\n```\n\n### Synopsis\n\nCreates any missing SourceRepository resources\n\n### Options\n\n```\n  -c, --config string             the configuration file to load for the repository configurations. If not specified we look in ./.jx/gitops/source-config.yaml\n  -d, --dir string                the directory look for the 'jx-requirements.yml` file (default \".\")\n  -h, --help                      help for create\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n  -s, --source-dir string         the directory to look for and generate the SourceConfig files\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/delete/_index.md": "---\ntitle: jx gitops repository delete\nlinktitle: delete\ntype: docs\ndescription: \"Deletes a repository from the source configuration ***Aliases**: remove,rm,del*\"\naliases:\n  - jx-gitops_repository_delete\n---\n\n### Usage\n\n```\njx gitops repository delete\n```\n\n### Synopsis\n\nAdd one or more repositories to the SourceConfig\n\n### Examples\n\n  ```bash\n  # deletes a repository by name from the '.jx/gitops/source-config.yaml' file\n  jx gitops repository delete --name myrepo\n  \n  # deletes a repository by name and owner from the '.jx/gitops/source-config.yaml' file\n  jx gitops repository delete --name myrepo --owner myowner\n\n  ```\n### Options\n\n```\n  -c, --config string   the configuration file to load for the repository configurations. If not specified we look in .jx/gitops/source-repositories.yaml\n  -d, --dir string      the directory look for the 'jx-requirements.yml` file (default \".\")\n  -h, --help            help for delete\n  -n, --name string     the name of the repository to remove\n  -o, --owner string    the owner of the repository to remove\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/export/_index.md": "---\ntitle: jx gitops repository export\nlinktitle: export\ntype: docs\ndescription: \"Exports the 'source-config.yaml' file from the kubernetes resources in the current cluster\"\naliases:\n  - jx-gitops_repository_export\n---\n\n### Usage\n\n```\njx gitops repository export\n```\n\n### Synopsis\n\n\"Exports the 'source-config.yaml' file from the kubernetes resources in the current cluster\n\n### Examples\n\n  ```bash\n  # creates/populates the .jx/gitops/source-config.yaml file with any SourceRepository resources in the current cluster\n  jx-gitops repository export\n\n  ```\n### Options\n\n```\n  -c, --config string             the configuration file to load for the repository configurations. If not specified we look in ./.jx/gitops/source-repositories.yaml\n  -d, --dir string                the directory look for the 'jx-requirements.yml` file (default \".\")\n  -e, --explicit                  Explicit mode: always populate all the fields even if they can be deduced. e.g. the git URLs for each repository are not absolutely necessary and are omitted by default are populated if this flag is enabled\n  -h, --help                      help for export\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n  -n, --namespace string          the namespace to look for SourceRepository, SourceRepositoryGroup and Scheduler resources\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/repository/resolve/_index.md": "---\ntitle: jx gitops repository resolve\nlinktitle: resolve\ntype: docs\ndescription: \"Resolves the git repository URL for the cluster/environment\"\naliases:\n  - jx-gitops_repository_resolve\n---\n\n### Usage\n\n```\njx gitops repository resolve\n```\n\n### Synopsis\n\nResolves the git repository URL for the cluster/environment\n\n### Examples\n\n  ```bash\n  # updates git repository URL for the resources in the current directory\n  jx-gitops repository resolve https://github.com/myorg/myrepo.git\n  # updates git repository URL for the resources in some directory\n  jx-gitops repository resolve --dir something https://github.com/myorg/myrepo.git\n\n  ```\n### Options\n\n```\n  -d, --dir string                the directory look for the 'jx-requirements.yml` file (default \".\")\n  -h, --help                      help for resolve\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n  -s, --source-dir string         the directory to recursively look for the *.yaml or *.yml source Environment/SourceRepository files (default \".\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/requirement/_index.md": "---\ntitle: jx gitops requirement\nlinktitle: requirement\ntype: docs\ndescription: \"Commands for working with jx-requirements.yml ***Aliases**: req,requirements*\"\naliases:\n  - jx-gitops_requirement\n---\n\n### Usage\n\n```\njx gitops requirement\n```\n\n### Synopsis\n\nCommands for working with jx-requirements.yml\n\n### Options\n\n```\n  -h, --help   help for requirement\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/requirement/edit/_index.md": "---\ntitle: jx gitops requirement edit\nlinktitle: edit\ntype: docs\ndescription: \"Edits the local 'jx-requirements.yml file\"\naliases:\n  - jx-gitops_requirement_edit\n---\n\n### Usage\n\n```\njx gitops requirement edit\n```\n\n### Synopsis\n\nEdits the local 'jx-requirements.yml file\n\n### Examples\n\n  ```bash\n  # edits the local 'jx-requirements.yml' file\n  jx-gitops requirements edit --domain foo.com --tls --provider eks\n\n  ```\n### Options\n\n```\n      --autoupdate-schedule string   the cron schedule for auto upgrading your cluster\n      --autoupgrade                  enables or disables auto upgrades\n      --bucket-backups string        the bucket URL to store backups\n      --bucket-logs string           the bucket URL to store logs\n      --bucket-repo string           the bucket URL to store repository artifacts\n      --bucket-reports string        the bucket URL to store reports. If not specified default to te logs bucket\n  -c, --cluster string               configures the cluster name\n      --dir string                   the directory to search for the 'jx-requirements.yml' file (default \".\")\n  -d, --domain string                configures the domain name\n      --env-git-owner string         the git owner (organisation or user) used to own the git repositories for the environments\n      --env-git-public               enables or disables whether the environment repositories should be public\n      --extdns-sa string             configures the External DNS service account name\n      --git-kind string              the kind of git repository to use. Possible values: bitbucketcloud, bitbucketserver, gitea, github, gitlab\n      --git-name string              the name of the git repository\n      --git-server string            the git server host such as https://github.com or https://gitlab.com\n  -h, --help                         help for edit\n      --kaniko-sa string             configures the Kaniko service account name\n      --project string               configures the Google Project ID\n  -p, --provider string              configures the kubernetes provider\n  -r, --region string                configures the cloud region\n      --registry string              configures the host name of the container registry\n  -s, --secret string                configures the kind of secret storage. Values: local, vault\n      --tls-email string             the TLS email address to enable TLS on the domain\n      --vault-bucket string          specify the vault bucket\n      --vault-disable-url-discover   override the default lookup of the Vault URL, could be incluster service or external ingress\n      --vault-key string             specify the vault key\n      --vault-keyring string         specify the vault key ring\n      --vault-name string            specify the vault name\n      --vault-recreate-bucket        enables or disables whether to rereate the secret bucket on boot\n      --vault-sa string              specify the vault Service Account name\n  -w, --webhook string               configures the kind of webhook. Values lighthouse\n  -z, --zone string                  configures the cloud zone\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/requirement/merge/_index.md": "---\ntitle: jx gitops requirement merge\nlinktitle: merge\ntype: docs\ndescription: \"Merges values from the given file to the local jx-requirements.yml file\"\naliases:\n  - jx-gitops_requirement_merge\n---\n\n### Usage\n\n```\njx gitops requirement merge\n```\n\n### Synopsis\n\nMerges values from the given file to the local jx-requirements.yml file\n  \nThis lets you take requirements from, say, the output of a terraform plan and merge with any other changes inside your GitOps repository\n\n### Examples\n\n  ```bash\n  # merge requirements from a file\n  jx-gitops requirements merge -f /tmp/jx-requirements.yml\n  \n  # merge requirements from a ConfigMap called 'terraform-jx-requirements' in the default namespace\n  jx-gitops requirements merge\n\n  ```\n### Options\n\n```\n  -c, --configmap string   the name of the ConfigMap to find the requirements to merge if not specifying a requirements file via --file (default \"terraform-jx-requirements\")\n  -d, --dir string         the source directory to merge changes into (default \".\")\n  -f, --file string        the requirements file to merge into the source directory\n  -h, --help               help for merge\n      --namespace string   the namespace used to find the ConfigMap if using the ConfigMap mode (default \"default\")\n      --retries int        Specify the number of times the command should be reattempted on failure (default 3)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/requirement/publish/_index.md": "---\ntitle: jx gitops requirement publish\nlinktitle: publish\ntype: docs\ndescription: \"Publishes the current jx-requirements.yml to the dev Environment so it can be easily used in pipelines\"\naliases:\n  - jx-gitops_requirement_publish\n---\n\n### Usage\n\n```\njx gitops requirement publish\n```\n\n### Synopsis\n\nPublishes the current jx-requirements.yml to the dev Environment so it can be easily used in pipelines\n\n### Examples\n\n  ```bash\n  jx-gitops requirements publish\n\n  ```\n### Options\n\n```\n  -d, --dir string         the directory to run the git push command from (default \".\")\n      --env-file string    the file name for the dev Environment. If not specified it defaults config-root/namespaces/jx/jxboot-helmfile-resources/dev-environment.yaml to within the directory\n  -h, --help               help for publish\n      --namespace string   the namespace used to find dev-environment.yaml (default \"jx\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/requirement/resolve/_index.md": "---\ntitle: jx gitops requirement resolve\nlinktitle: resolve\ntype: docs\ndescription: \"Resolves any missing values in the jx-requirements.yml which can be detected\"\naliases:\n  - jx-gitops_requirement_resolve\n---\n\n### Usage\n\n```\njx gitops requirement resolve\n```\n\n### Synopsis\n\nResolves any missing values in the jx-requirements.yml which can be detected.\n  \nFor example if the provider is GKE then this step will automatically default the project, cluster name and location values if they are not in the 'jx-requirements.yml' file.\n\n### Examples\n\n  ```bash\n  jx-gitops requirements resolve\n\n  ```\n### Options\n\n```\n  -d, --dir string         the directory to run the git push command from (default \".\")\n  -h, --help               help for resolve\n      --namespace string   the namespace used to find the git operator secret for the git repository if running in cluster. Defaults to the current namespace\n  -n, --no-commit          disables performing a git commit if there are changes\n      --retries int        Specify the number of times the command should be reattempted on failure (default 3)\n      --secret string      the name of the Secret to find the git URL, username and password for creating a git credential if running inside the cluster (default \"jx-boot\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/sa/_index.md": "---\ntitle: jx gitops sa\nlinktitle: sa\ntype: docs\ndescription: \"Commands for working with kubernetes ServiceAccount resources ***Aliases**: serviceaccount,serviceaccounts*\"\naliases:\n  - jx-gitops_sa\n---\n\n### Usage\n\n```\njx gitops sa\n```\n\n### Synopsis\n\nCommands for working with kubernetes ServiceAccount resources\n\n### Options\n\n```\n  -h, --help   help for sa\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/sa/secret/_index.md": "---\ntitle: jx gitops sa secret\nlinktitle: secret\ntype: docs\ndescription: \"Adds one or more secrets to the given ServiceAccount files\"\naliases:\n  - jx-gitops_sa_secret\n---\n\n### Usage\n\n```\njx gitops sa secret\n```\n\n### Synopsis\n\nAdds one or more secrets to the given ServiceAccount files\n\n### Examples\n\n  ```bash\n  # ensures that the given service account resource has the secret associated\n  jx-gitops sa secret -f config-root/namespaces/jx/mychart/my-sa.yaml --secret my-secret-name\n\n  ```\n### Options\n\n```\n  -f, --file string               the ServiceAccount file to modify\n  -h, --help                      help for secret\n      --invert-selector           inverts the effect of selector to exclude resources matched by selector\n  -k, --kind stringArray          adds Kubernetes resource kinds to filter on. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n      --kind-ignore stringArray   adds Kubernetes resource kinds to exclude. For kind expressions see: https://github.com/jenkins-x/jx-helpers/tree/master/docs/kind_filters.md\n  -s, --secret stringArray        the Secret names to add to the ServiceAccount\n      --selector stringToString   adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string    sets which path in the Kubernetes resources to select on instead of metadata.labels.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/scheduler/_index.md": "---\ntitle: jx gitops scheduler\nlinktitle: scheduler\ntype: docs\ndescription: \"Generates the Lighthouse configuration from the SourceRepository and Scheduler resources ***Aliases**: schedulers,lighthouse*\"\naliases:\n  - jx-gitops_scheduler\n---\n\n### Usage\n\n```\njx gitops scheduler\n```\n\n### Synopsis\n\nGenerates the Lighthouse configuration from the SourceRepository and Scheduler resources\n\n### Examples\n\n  ```bash\n  # regenerate the lighthouse configuration from the Environment, Scheduler, SourceRepository resources\n  jx-gitops scheduler --dir config-root/namespaces/jx -out src/base/namespaces/jx/lighthouse-config\n\n  ```\n### Options\n\n```\n  -d, --dir string                  the current working directory (default \".\")\n  -h, --help                        help for scheduler\n      --in-repo-config              enables in repo configuration in lighthouse\n  -n, --namespace string            the namespace for the SourceRepository and Scheduler resources (default \"jx\")\n  -o, --out string                  the output directory for the generated config files. If not specified defaults to config-root/namespaces/$ns/lighthouse-config\n      --repo-dir string             the directory to look for SourceRepository resources. If not specified defaults config-root/namespaces/$ns\n      --scheduler-dir stringArray   the directory to look for Scheduler resources. If not specified defaults 'schedulers' and 'versionStream/schedulers'\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/split/_index.md": "---\ntitle: jx gitops split\nlinktitle: split\ntype: docs\ndescription: \"Splits any YAML files which define multiple resources into separate files\"\naliases:\n  - jx-gitops_split\n---\n\n### Usage\n\n```\njx gitops split\n```\n\n### Synopsis\n\nSplits any YAML files which define multiple resources into separate files\n\n### Examples\n\n  ```bash\n  # splits any files containing multiple resources\n  jx-gitops split --dir .\n\n  ```\n### Options\n\n```\n  -d, --dir string   the directory to recursively look for the *.yaml or *.yml files (default \".\")\n  -h, --help         help for split\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/upgrade/_index.md": "---\ntitle: jx gitops upgrade\nlinktitle: upgrade\ntype: docs\ndescription: \"Upgrades the GitOps git repository with the latest configuration and versions the Version Stream ***Aliases**: update*\"\naliases:\n  - jx-gitops_upgrade\n---\n\n### Usage\n\n```\njx gitops upgrade\n```\n\n### Synopsis\n\nUpgrades the GitOps git repository with the latest configuration and versions the Version Stream\n\n### Options\n\n```\n      --add-environment-pipelines   skips the custom upgrade step for adding .lighthouse folder\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --bin string                  the 'kpt' binary name to use. If not specified this command will download the jx binary plugin into ~/.jx3/plugins/bin and use that\n      --commit-message string       the git commit message used (default \"chore: generated kubernetes resources from helm chart\")\n  -c, --container-tool string       the underlying container tool for kpt to use (default \"docker\")\n      --dir string                  the directory to recursively look for the *.yaml or *.yml files (default \".\")\n      --git-commit                  if set then the template command will git commit the modified helmfile.yaml files\n      --helmfile string             the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the dir\n  -h, --help                        help for upgrade\n      --ignore-yaml-error           ignore kpt errors of the form: yaml: did not find expected node content\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --namespace string            the default namespace if none is specified in the helmfile.yaml (default \"jx\")\n  -o, --owner string                filter on the Kptfile repository owner (user/organisation) for which packages to update\n  -r, --repo string                 filter on the Kptfile repository name  for which packages to update\n  -s, --strategy string             the 'kpt' strategy to use. To see available strategies type 'kpt pkg update --help'. Typical values are: resource-merge, fast-forward, force-delete-replace (default \"resource-merge\")\n  -u, --url string                  filter on the Kptfile repository URL for which packages to update\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -v, --version string              the git version of the kpt package to upgrade to\n      --version-stream-dir string   the directory for the version stream. Defaults to 'versionStream' in the current --dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/variables/_index.md": "---\ntitle: jx gitops variables\nlinktitle: variables\ntype: docs\ndescription: \"Lazily creates a .jx/variables.sh script with common pipeline environment variables\"\naliases:\n  - jx-gitops_variables\n---\n\n### Usage\n\n```\njx gitops variables\n```\n\n### Synopsis\n\nLazily creates a .jx/variables.sh script with common pipeline environment variables\n\n### Examples\n\n  ```bash\n  # lazily create the .jx/variables.sh file\n  jx-gitops variables\n\n  ```\n### Options\n\n```\n      --app string              Name of the app or repository\n      --build-number string     the build number to use. If not specified defaults to $BUILD_NUMBER\n      --commit                  commit variables.sh (default true)\n      --configmap string        the ConfigMap used to load environment variables (default \"jenkins-x-docker-registry\")\n      --dir string              the directory to search for the .git to discover the git source URL (default \".\")\n  -f, --file string             the default variables file to lazily create or enrich (default \".jx/variables.sh\")\n      --git-kind string         the kind of git server to connect to\n      --git-server string       the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string        the git token used to operate on the git repository\n      --git-user-email string   the user email to git commit\n      --git-user-name string    the user name to git commit\n  -h, --help                    help for variables\n      --namespace string        the namespace to look for the dev Environment. Defaults to the current namespace\n  -n, --repo-name string        the name of the helm chart to release to. If not specified uses JX_CHART_REPOSITORY environment variable (default \"release-repo\")\n  -u, --repo-url string         the URL to release to\n      --version-file string     the file to load the version from if not specified directly or via a $VERSION environment variable. Defaults to VERSION in the current dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/version/_index.md": "---\ntitle: jx gitops version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-gitops_version\n---\n\n### Usage\n\n```\njx gitops version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/versionstream/_index.md": "---\ntitle: jx gitops versionstream\nlinktitle: versionstream\ntype: docs\ndescription: \"Administer the cluster version stream settings\"\naliases:\n  - jx-gitops_versionstream\n---\n\n### Usage\n\n```\njx gitops versionstream\n```\n\n### Synopsis\n\nAdminister the cluster version stream settings\n\n### Examples\n\n  ```bash\n  # switch to LTS (stable) version stream\n  jx-gitops versionstream --lts\n  \n  # switch to latest version stream\n  jx-gitops versionstream --latest\n  \n  # switch to a custom version stream\n  jx-gitops versionstream --custom --url https://github.com/foo/bar.git --ref main\n\n  ```\n### Options\n\n```\n      --custom             Switch the cluster version stream to a custom version stream, requires url and ref flags set\n      --directory string   The directory used in the versionstream, defaults to root (default \"/\")\n  -h, --help               help for versionstream\n      --latest             Switch the cluster version stream to the latest (latest releases) git repo, https://github.com/jenkins-x/jxr-versions\n      --lts                Switch the cluster version stream to the LTS (long term support on monthly release cadence) git repo, https://github.com/jenkins-x/jx3-lts-versions\n      --ref string         The kind of git server for the development environment\n      --url string         The git URL to clone to fetch the initial set of files for a helm 3 / helmfile based git configuration if this command is not run inside a git clone or against a GitOps based cluster\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/webhook/_index.md": "---\ntitle: jx gitops webhook\nlinktitle: webhook\ntype: docs\ndescription: \"Commands for working with WebHooks on your source repositories ***Aliases**: webhooks,hook,hooks*\"\naliases:\n  - jx-gitops_webhook\n---\n\n### Usage\n\n```\njx gitops webhook\n```\n\n### Synopsis\n\nCommands for working with WebHooks on your source repositories\n\n### Options\n\n```\n  -h, --help   help for webhook\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/webhook/delete/_index.md": "---\ntitle: jx gitops webhook delete\nlinktitle: delete\ntype: docs\ndescription: \"deletes the webhooks for all the source repositories optionally filtering by owner and/or repository\"\naliases:\n  - jx-gitops_webhook_delete\n---\n\n### Usage\n\n```\njx gitops webhook delete\n```\n\n### Synopsis\n\nDeletes the webhooks for all the source repositories optionally filtering by owner and/or repository\n\n### Examples\n\n  ```bash\n  # delete all the webhooks for all SourceRepository and Environment resource:\n  jx-gitops delete --filter https://foo.bar\n  \n  # only delete the webhooks for a given owner\n  jx-gitops delete --owner=mycorp --filter https://foo.bar\n  \n  # delete all webhooks within an organisation\n  jx-gitops delete --owner=mycorp --all-webhooks\n\n  ```\n### Options\n\n```\n      --all-webhooks          WARNING: will delete all webhooks from your source repositories. Do not use lightly.\n  -b, --batch-mode            Runs in batch mode without prompting for user input\n      --dry-run               If enabled doesn't actually delete any webhooks, just tells you what it will delete\n      --filter string         The filter to match the endpoints to delete\n      --git-kind string       the kind of git server to connect to\n      --git-server string     the git server URL to create the scm client\n      --git-token string      the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string   the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                  help for delete\n      --log-level string      Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --owner string          The name of the git organisation or user to filter on\n  -r, --repo string           The name of the repository to filter on\n      --retries int           Specify the number of times the command should be reattempted on failure (default 3)\n      --verbose               Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --warn-on-fail          If enabled lets just log a warning that we could not update the webhook\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/webhook/update/_index.md": "---\ntitle: jx gitops webhook update\nlinktitle: update\ntype: docs\ndescription: \"Updates the webhooks for all the source repositories optionally filtering by owner and/or repository\"\naliases:\n  - jx-gitops_webhook_update\n---\n\n### Usage\n\n```\njx gitops webhook update\n```\n\n### Synopsis\n\nUpdates the webhooks for all the source repositories optionally filtering by owner and/or repository\n\n### Examples\n\n  ```bash\n  # update all the webhooks for all SourceRepository and Environment resource:\n  jx-gitops update\n  \n  # only update the webhooks for a given owner\n  jx-gitops update --org=mycorp\n  \n  # use a custom hook webhook endpoint (e.g. if you are on premise using node ports or something)\n  jx-gitops update --endpoint http://mything.com\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                 Runs in batch mode without prompting for user input\n      --endpoint string            Don't use the endpoint from the cluster, use the provided endpoint\n      --exact-hook-url-match       Whether to exactly match the hook based on the URL (default true)\n      --fast                       If annotation webhook.jenkins-x.io is true on SourceConfig don't check with git provider\n      --git-kind string            the kind of git server to connect to\n      --git-server string          the git server URL to create the scm client\n      --git-token string           the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string        the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                       help for update\n      --hmac string                Don't use the HMAC token from the cluster, use the provided token\n      --log-level string           Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --owner string               The name of the git organisation or user to filter on\n      --previous-hook-url string   Whether to match based on an another URL\n  -r, --repo string                The name of the repository to filter on\n      --retries int                Specify the number of times the command should be reattempted on failure (default 3)\n      --verbose                    Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --warn-on-fail               If enabled lets just log a warning that we could not update the webhook\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/gitops/yset/_index.md": "---\ntitle: jx gitops yset\nlinktitle: yset\ntype: docs\ndescription: \"Modifies a value in a YAML file at a given path expression while preserving comments\"\naliases:\n  - jx-gitops_yset\n---\n\n### Usage\n\n```\njx gitops yset\n```\n\n### Synopsis\n\nModifies one or more yaml files using a path expression while preserving comments\n\n### Examples\n\n  ```bash\n  # sets the foo.bar=abc in the files *.yaml\n  jx-gitops yset --path foo.bar --value abc *.yaml\n  \n  # sets the foo.bar=abc in the file foo.yaml\n  jx-gitops yset --path foo.bar --value abc --file foo.yaml\n  \n  # sets the foo.bar=abc in the file foo.yaml and bar.yaml\n  jx-gitops --path foo.bar --value abc --file bar.yaml --file foo.yaml\n\n  ```\n### Options\n\n```\n  -f, --file stringArray   the file(s) to process\n  -h, --help               help for yset\n  -p, --path string        the path expression to modify (separated by dots)\n  -v, --value string       the value to modify\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-gitops](https://github.com/jenkins-x-plugins/jx-gitops)\n",
            "content/en/v3/develop/reference/jx/health/_index.md": "---\ntitle: jx health\nlinktitle: health\ntype: docs\ndescription: \"Health commands\"\naliases:\n  - jx-health\n---\n\n### Usage\n\n```\njx health\n```\n\n### Synopsis\n\nHealth commands\n\n### Options\n\n```\n  -h, --help   help for jx-health\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-health](https://github.com/jenkins-x-plugins/jx-health)\n",
            "content/en/v3/develop/reference/jx/health/get/_index.md": "---\ntitle: jx health get\nlinktitle: get\ntype: docs\ndescription: \"used for getting resources\"\naliases:\n  - jx-health_get\n---\n\n### Usage\n\n```\njx health get\n```\n\n### Synopsis\n\nused for getting resources\n\n### Options\n\n```\n  -h, --help   help for get\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-health](https://github.com/jenkins-x-plugins/jx-health)\n",
            "content/en/v3/develop/reference/jx/health/get/status/_index.md": "---\ntitle: jx health get status\nlinktitle: status\ntype: docs\ndescription: \"Gets health statuses ***Aliases**: statuses*\"\naliases:\n  - jx-health_get_status\n---\n\n### Usage\n\n```\njx health get status\n```\n\n### Synopsis\n\nPrints health statuses in a table\n\n### Examples\n\n  ```bash\n  # prints all health statuses for the current namespace in a table\n  jx-health get status\n  \n  # prints all health statuses for a specific namespace\n  jx-health get status --namespace\n  \n  # prints all health statuses for all accessible namespace\n  jx-health get status --all-namespaces\n  \n  # watch health statuses\n  jx-health get status --watch\n\n  ```\n### Options\n\n```\n  -A, --all-namespaces     if present, list the requested object(s) across all namespaces.\n                           Namespace in current context is ignored even if specified with --namespace.\n  -h, --help               help for status\n      --info               provide information links for checks\n  -n, --namespace string   namespace to get status checks, defaults to current namespace\n  -w, --watch              after listing/getting the requested object, watch for changes\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-health](https://github.com/jenkins-x-plugins/jx-health)\n",
            "content/en/v3/develop/reference/jx/health/version/_index.md": "---\ntitle: jx health version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-health_version\n---\n\n### Usage\n\n```\njx health version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-health](https://github.com/jenkins-x-plugins/jx-health)\n",
            "content/en/v3/develop/reference/jx/kube-test/_index.md": "---\ntitle: jx kube-test\nlinktitle: kube-test\ntype: docs\ndescription: \"commands for working with GitOps based git repositories\"\naliases:\n  - jx-kube-test\n---\n\n### Usage\n\n```\njx kube test\n```\n\n### Synopsis\n\ncommands for working with GitOps based git repositories\n\n### Options\n\n```\n  -h, --help   help for jx-kube-test\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-kube-test](https://github.com/jenkins-x-plugins/jx-kube-test)\n",
            "content/en/v3/develop/reference/jx/kube-test/run/_index.md": "---\ntitle: jx kube-test run\nlinktitle: run\ntype: docs\ndescription: \"Runs all of the kubernetes tests\"\naliases:\n  - jx-kube-test_run\n---\n\n### Usage\n\n```\njx kube test run\n```\n\n### Synopsis\n\nRuns all of the kubernetes tests\n\n### Examples\n\n  ```bash\n  # runs the kubernetes tests\n  jx kube test run\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                   Runs in batch mode without prompting for user input\n      --chart-dir string             the directory to look for helm charts if no .jx/kube-test/settings.yaml file is found\n      --conftest-args stringArray    specifies any optional conftest command line arguments to pass\n      --conftest-binary string       specifies the conftest binary location to use. If not specified we download the plugin\n      --conftest-version string      specifies the conftest version to use. If not specified we download the plugin (default \"0.24.0\")\n  -d, --dir string                   the directory to look for helm, helmfile or kustomize files (default \".\")\n      --helm-args stringArray        specifies any optional helm command line arguments to pass\n      --helm-binary string           specifies the helm binary location to use. If not specified we download the plugin\n      --helm-version string          specifies the helm version to use. If not specified we download the plugin (default \"3.5.4\")\n  -h, --help                         help for run\n      --kubescore-args stringArray   specifies any optional kubescore command line arguments to pass\n      --kubescore-binary string      specifies the kubescore binary location to use. If not specified we download the plugin\n      --kubescore-version string     specifies the kubescore version to use. If not specified we download the plugin (default \"1.11.0\")\n      --kubeval-args stringArray     specifies any optional kubeval command line arguments to pass\n      --kubeval-binary string        specifies the kubeval binary location to use. If not specified we download the plugin\n      --kubeval-version string       specifies the kubeval version to use. If not specified we download the plugin (default \"0.16.5\")\n      --log-level string             Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --output string                the file to generate\n      --polaris-args stringArray     specifies any optional polaris command line arguments to pass\n      --polaris-binary string        specifies the polaris binary location to use. If not specified we download the plugin\n      --polaris-version string       specifies the polaris version to use. If not specified we download the plugin (default \"3.2.1\")\n  -r, --recurse                      should we recurse through the chart dir to find charts if no .jx/kube-test/settings.yaml file is found\n  -s, --settings string              the settings file to use. If not specified will look in .jx/kube-test/settings.yaml in the directory\n      --source-dir string            the directory to look for kubernetes resources to validate\n      --verbose                      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -w, --work-dir string              the work directory used to generate the output. If not specified a new temporary dir is created\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-kube-test](https://github.com/jenkins-x-plugins/jx-kube-test)\n",
            "content/en/v3/develop/reference/jx/kube-test/version/_index.md": "---\ntitle: jx kube-test version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-kube-test_version\n---\n\n### Usage\n\n```\njx kube test version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-kube-test](https://github.com/jenkins-x-plugins/jx-kube-test)\n",
            "content/en/v3/develop/reference/jx/pipeline/_index.md": "---\ntitle: jx pipeline\nlinktitle: pipeline\ntype: docs\ndescription: \"commands for working with Jenkins X Pipelines\"\naliases:\n  - jx-pipeline\n---\n\n### Usage\n\n```\njx pipeline\n```\n\n### Synopsis\n\ncommands for working with Jenkins X Pipelines\n\n### Options\n\n```\n  -h, --help   help for jx-pipeline\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/activities/_index.md": "---\ntitle: jx pipeline activities\nlinktitle: activities\ntype: docs\ndescription: \"Display one or more Activities on projects ***Aliases**: activity,act*\"\naliases:\n  - jx-pipeline_activities\n---\n\n### Usage\n\n```\njx pipeline activities\n```\n\n### Synopsis\n\nDisplay the current activities for one or more projects.\n\n### Examples\n\n  ```bash\n  # List the current activities for all applications in the current team\n  jx pipeline activities\n  \n  # List the current activities for application 'foo'\n  jx pipeline act -f foo\n  \n  # Watch the activities for application 'foo'\n  jx pipeline act -f foo -w\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n      --build string       The build number to filter on\n  -f, --filter string      Text to filter the pipeline names\n  -h, --help               help for activities\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -s, --sort               Sort activities by timestamp\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -w, --watch              Whether to watch the activities for changes\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/convert/_index.md": "---\ntitle: jx pipeline convert\nlinktitle: convert\ntype: docs\ndescription: \"commands for converting pipelines\"\naliases:\n  - jx-pipeline_convert\n---\n\n### Usage\n\n```\njx pipeline convert\n```\n\n### Synopsis\n\nConvert one or more pipelines.\n\n### Examples\n\n  ```bash\n  # Convert a pipeline to use \"image:uses:\"\n  jx pipeline convert uses\n  # Convert a pipeline to use native Tekton\n  jx pipeline convert remotetasks\n\n  ```\n### Options\n\n```\n  -h, --help   help for convert\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/convert/remotetasks/_index.md": "---\ntitle: jx pipeline convert remotetasks\nlinktitle: remotetasks\ntype: docs\ndescription: \"Converts the pipelines to use native Tekton syntax\"\naliases:\n  - jx-pipeline_convert_remotetasks\n---\n\n### Usage\n\n```\njx pipeline convert remotetasks\n```\n\n### Synopsis\n\nConverts the pipelines from the 'image: uses:sourceURI' mechanism to native Tekton. \n\nExisting PipelineRuns are converted into either a new PipelineRun, that uses the Tekton git resolver to pull tasks from the sourceURI, or to explicit Tasks based on whether existing PipelineRun has a parent in it's in it's stepTemplate. \n\nExisting Tasks have the default lighthouse params/envVars (PULL NUMBER, REPO NAME etc) appended to them. \n\nAs existing steps are being migrated to tasks a workspace volume needs to be mounted to the tasks. By default the size of the workspace is calculated based on the size of the repository + a 300Mi buffer. This can be overridden by setting --calculate-workspace-volume=false & --workspace-volume= <size>(if no value is given it defaults to 1Gi)\n\n### Examples\n\n  ```bash\n  # Convert a repository created using uses: syntax to use the new native Tekton syntax\n  jx pipeline convert remotetasks\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                   Runs in batch mode without prompting for user input\n  -c, --calculate-workspace-volume   Calculate the workspace volume size based on the size of the repository + a 300Mi buffer. This will override the value set in --workspace-volume (default true)\n  -d, --dir string                   The directory to look for the pipeline files. Defaults to the current directory (default \".\")\n  -h, --help                         help for remotetasks\n      --log-level string             Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -s, --sha string                   Overrides the SHA taken from \"image:uses:\" with the given value\n      --verbose                      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -v, --workspace-volume string      The size of the workspace volume that backs the pipelines.\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/convert/uses/_index.md": "---\ntitle: jx pipeline convert uses\nlinktitle: uses\ntype: docs\ndescription: \"Converts the pipelines to use the 'image: uses:sourceURI' include mechanism\"\naliases:\n  - jx-pipeline_convert_uses\n---\n\n### Usage\n\n```\njx pipeline convert uses\n```\n\n### Synopsis\n\nConverts the pipelines to use the 'image: uses:sourceURI' include mechanism\n  \nSo that pipelines are smaller, simpler and easier to upgrade pipelines with the version stream\n\n### Examples\n\n  ```bash\n  # Convert a repository created using the alpha/beta of v3\n  # to use the nice new uses: syntax\n  jx pipeline convert\n  \n  # Convert a pipeline catalog to the uses syntax and layout\n  jx pipeline convert --catalog\n\n  ```\n### Options\n\n```\n  -b, --batch-mode             Runs in batch mode without prompting for user input\n  -c, --catalog                If converting a catalog we look in the packs folder to recursively find all '.lighthouse' folders\n      --catalog-owner string   The github owner for the default catalog (default \"jenkins-x\")\n      --catalog-repo string    The github repository name for the default catalog (default \"jx3-pipeline-catalog\")\n  -d, --dir string             The directory to look for the .lighthouse and/or .git folders (default \".\")\n      --git-kind string        the kind of git server to connect to\n      --git-server string      the git server URL to create the scm client\n      --git-token string       the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string    the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                   help for uses\n      --log-level string       Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -s, --sha string             The default catalog SHA to use when resolving catalog pipelines to reuse\n      --tasks-dir string       The directory name to store the original tasks before we convert to uses: notation (default \"tasks\")\n      --use-kpt-ref            Keep the kpt ref value in the uses git URI (default true)\n      --use-sha string         The catalog SHA to use in the converted pipelines. If not specified defaults to @versionStream\n      --verbose                Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/debug/_index.md": "---\ntitle: jx pipeline debug\nlinktitle: debug\ntype: docs\ndescription: \"Add or remove pipeline breakpoints for debugging pipeline steps ***Aliases**: bp,breakpoint*\"\naliases:\n  - jx-pipeline_debug\n---\n\n### Usage\n\n```\njx pipeline debug\n```\n\n### Synopsis\n\nAdd or remove pipeline breakpoints for debugging pipeline steps.\n\n### Examples\n\n  ```bash\n  # add or remove a breakpoint\n  jx pipeline breakpoint\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                Runs in batch mode without prompting for user input\n  -p, --breakpoints stringArray   The breakpoint names to use when creating a new breakpoint (default [onFailure])\n  -h, --help                      help for debug\n      --log-level string          Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string          The kubernetes namespace to use. If not specified the default namespace is used\n      --verbose                   Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/effective/_index.md": "---\ntitle: jx pipeline effective\nlinktitle: effective\ntype: docs\ndescription: \"Displays the effective tekton pipeline ***Aliases**: dump*\"\naliases:\n  - jx-pipeline_effective\n---\n\n### Usage\n\n```\njx pipeline effective\n```\n\n### Synopsis\n\nDisplays the effective tekton pipeline\n\n### Examples\n\n  ```bash\n  # View the effective pipeline\n  jx pipeline effective\n  \n  # View the effective pipeline in VS Code\n  jx pipeline effective -e code\n  \n  # View the effective pipeline in IDEA\n  jx pipeline effective -e idea\n  \n  # Enable open in VS Code\n  export JX_EDITOR=\"code\"\n  jx pipeline effective\n\n  ```\n### Options\n\n```\n      --add-defaults           Adds default parameters to the effective pipeline\n  -b, --batch-mode             Runs in batch mode without prompting for user input\n      --catalog-owner string   The github owner for the default catalog (default \"jenkins-x\")\n      --catalog-repo string    The github repository name for the default catalog (default \"jx3-pipeline-catalog\")\n  -d, --dir string             The directory to look for the .lighthouse and/or .git folders (default \".\")\n  -e, --editor string          The editor to open the effective pipeline inside. e.g. use 'idea' or 'code'\n  -f, --file string            The pipeline file to render\n      --git-kind string        the kind of git server to connect to\n      --git-server string      the git server URL to create the scm client\n      --git-token string       the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string    the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                   help for effective\n      --line string            The line number to open the editor at\n      --log-level string       Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --out string             The output file to write the effective pipeline to. If not specified output to the terminal\n  -p, --pipeline string        The pipeline kind and name. e.g. 'presubmit/pr' or 'postsubmit/release'. If not specified you will be prompted to choose one\n  -r, --recursive              Recurisvely find all '.lighthouse' folders such as if linting a Pipeline Catalog\n  -t, --trigger string         The path to the trigger file. If not specified you will be prompted to choose one\n      --verbose                Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/env/_index.md": "---\ntitle: jx pipeline env\nlinktitle: env\ntype: docs\ndescription: \"Displays the environment variables for a step in a chosen pipeline pod ***Aliases**: environment*\"\naliases:\n  - jx-pipeline_env\n---\n\n### Usage\n\n```\njx pipeline env [flags]\n```\n\n### Synopsis\n\nDisplay the Pipeline step environment variables for a step in a chosen pipeline pod\n\n### Examples\n\n  ```bash\n  # Pick the pipeline pod and step to view the environment variables\n  jx pipeline env\n  \n  # Pick the pipeline pod for a repository and step to view the environment variables\n  jx pipeline env --repo cheese\n  \n  # Pick the pipeline pod for a repository, a given Pull Request and a step to view the environment variables\n  jx pipeline env --repo cheese --branch PR-1234\n  \n  # Generate IDEA based environment variable output you can copy/paste into the Run/Debug UI\n  jx pipeline env -t idea\n\n  ```\n### Options\n\n```\n  -b, --batch-mode            Runs in batch mode without prompting for user input\n      --branch string         Filters the branch\n      --build string          The build number to view\n      --context string        Filters the context of the build\n  -e, --env string            The name of the environment to view pipelines for the git repository\n  -x, --exclude stringArray   The environment variable names to exclude.\n  -f, --filter string         Filters all the available jobs by those that contain the given text\n  -t, --format string         The output format. Valid values are 'shell' or 'idea' (default \"shell\")\n  -g, --giturl string         The git URL to filter on. If you specify a link to a github repository or PR we can filter the query of build pods accordingly\n  -h, --help                  help for env\n      --log-level string      Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string      The namespace to look for the build pods. Defaults to the current namespace\n  -o, --owner string          Filters the owner (person/organisation) of the repository\n  -p, --pending               Only include pipeline pods which are currently pending to choose from if no build name is supplied\n      --pod string            The pod name to view\n  -r, --repo string           Filters the build repository\n      --verbose               Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/fmt/_index.md": "---\ntitle: jx pipeline fmt\nlinktitle: fmt\ntype: docs\ndescription: \"Formats the local pipeline files\"\naliases:\n  - jx-pipeline_fmt\n---\n\n### Usage\n\n```\njx pipeline fmt\n```\n\n### Synopsis\n\nFormats the local pipeline files \n\n  * removes any unnecessary parameters  \n  * converts any shell commands to use 'script:' notation\n\n### Examples\n\n  ```bash\n  # Formats the local pipeline files\n  jx pipeline fmt\n\n  ```\n### Options\n\n```\n  -d, --dir string   The directory to look for the tekton YAML files (default \".lighthouse\")\n  -h, --help         help for fmt\n      --sha string   The git commit SHA of the pipeline catalog repository https://github.com/jenkins-x/jx3-pipeline-catalog. If not specified we clone git and find it\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/get/_index.md": "---\ntitle: jx pipeline get\nlinktitle: get\ntype: docs\ndescription: \"Display one or more pipelines ***Aliases**: list,ls*\"\naliases:\n  - jx-pipeline_get\n---\n\n### Usage\n\n```\njx pipeline get\n```\n\n### Synopsis\n\nDisplay one or more pipelines.\n\n### Examples\n\n  ```bash\n  # list all pipelines\n  jx pipeline get\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n      --configmap string   The name of the Lighthouse ConfigMap to find the trigger configurations (default \"config\")\n  -f, --format string      The output format such as 'yaml' or 'json'\n  -h, --help               help for get\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string   The kubernetes namespace to use. If not specified the default namespace is used\n      --postsubmit         Views the available lighthouse postsubmit triggers rather than just the current PipelineRuns\n      --presubmit          Views the available lighthouse presubmit triggers rather than just the current PipelineRuns\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/grid/_index.md": "---\ntitle: jx pipeline grid\nlinktitle: grid\ntype: docs\ndescription: \"Watches pipeline activity in a table ***Aliases**: table,tbl*\"\naliases:\n  - jx-pipeline_grid\n---\n\n### Usage\n\n```\njx pipeline grid\n```\n\n### Synopsis\n\nWatches pipeline activity in a table \n\nYou can use the up/down cursor keys to select a pipeline then hit enter on the selected pipeline to view its log. When the pipeline is completed you can then go back to the pipeline grid and view other pipelines.\n\n### Examples\n\n  ```bash\n  # Watches the current pipeline activities in a grid\n  jx pipeline grid\n  \n  # Watches the current pipeline activities which have a name containing 'foo'\n  jx pipeline grid -f foo\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n      --fail-with-pod      Return an error if the pod fails\n  -f, --filter string      Text to filter the pipeline names\n  -h, --help               help for grid\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/import/_index.md": "---\ntitle: jx pipeline import\nlinktitle: import\ntype: docs\ndescription: \"Imports tekton pipelines from a catalog ***Aliases**: build,run*\"\naliases:\n  - jx-pipeline_import\n---\n\n### Usage\n\n```\njx pipeline import\n```\n\n### Synopsis\n\nImports tekton pipelines from a catalog.\n\n### Examples\n\n  ```bash\n  # import tekton tasks from the tekton catalog: be prompted for what tasks/version to import an whether to enable triggers\n  jx pipeline import\n  \n  # import tasks filtering the list of folders for those matching 'build' and disabling the automatic lighthouse trigger\n  jx pipeline import -f build --no-trigger\n\n  ```\n### Options\n\n```\n      --bin string                   the 'kpt' binary name to use. If not specified this command will download the jx binary plugin into ~/.jx3/plugins/bin and use that\n      --catalog-dir string           The directory containing the tekton catalog. Usually only used for testing\n  -d, --dir string                   The directory which will have the .lighthouse/$folder/*.yaml files created (default \".\")\n  -f, --filter string                Filter the list of task folders for all that contain this text\n  -h, --help                         help for import\n      --no-trigger                   No lighthouse trigger to be added\n      --release-branch stringArray   the release branch regular expressions to trigger the release pipeline. If not specified defaults to: 'master', 'main'\n  -t, --task string                  The name of the folder in the 'tasks' directory in the catalog to import resources from. If not specified you will be prompted to choose one\n      --to-dir string                The directory inside .lighthouse to import the resources. Defaults to the task folder\n  -u, --url string                   The tekton catalog git URL which is cloned if no --catalog-dir is specified (default \"https://github.com/tektoncd/catalog.git\")\n  -v, --version string               The version of the task folder to use\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/lint/_index.md": "---\ntitle: jx pipeline lint\nlinktitle: lint\ntype: docs\ndescription: \"Lints the lighthouse trigger and tekton pipelines\"\naliases:\n  - jx-pipeline_lint\n---\n\n### Usage\n\n```\njx pipeline lint\n```\n\n### Synopsis\n\nLints the lighthouse trigger and tekton pipelines\n\n### Examples\n\n  ```bash\n  # Lints the lighthouse files and local pipeline files\n  jx pipeline lint\n\n  ```\n### Options\n\n```\n  -a, --all                    Rather than looking for .lighthouse and triggers.yaml files it looks for all YAML files which are tekton kinds\n      --catalog-owner string   The github owner for the default catalog (default \"jenkins-x\")\n      --catalog-repo string    The github repository name for the default catalog (default \"jx3-pipeline-catalog\")\n  -d, --dir string             The directory to look for the .lighthouse and/or .git folders (default \".\")\n      --format string          If specify 'tap' lets use the TAP output otherwise use simple text output\n      --git-kind string        the kind of git server to connect to\n      --git-server string      the git server URL to create the scm client\n      --git-token string       the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string    the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                   help for lint\n  -o, --out string             The TAP format file to output with the results. If not specified the tap file is output to the terminal\n  -r, --recursive              Recurisvely find all '.lighthouse' folders such as if linting a Pipeline Catalog\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/log/_index.md": "---\ntitle: jx pipeline log\nlinktitle: log\ntype: docs\ndescription: \"Display a build log ***Aliases**: logs*\"\naliases:\n  - jx-pipeline_log\n---\n\n### Usage\n\n```\njx pipeline log [flags]\n```\n\n### Synopsis\n\nDisplay a build log\n\n### Examples\n\n  ```bash\n  # Display a build log - with the user choosing which repo + build to view\n  jx pipeline log\n  \n  # Pick a build to view the log based on the repo cheese\n  jx pipeline log --repo cheese\n  \n  # Pick a pending Tekton build to view the log based\n  jx pipeline log -p\n  \n  # Pick a pending Tekton build to view the log based on the repo cheese\n  jx pipeline log --repo cheese -p\n  \n  # Pick a Tekton build for the 1234 Pull Request on the repo cheese\n  jx pipeline log --repo cheese --branch PR-1234\n  \n  # View the build logs for a specific tekton build pod\n  jx pipeline log --pod my-pod-name\n\n  ```\n### Options\n\n```\n  -b, --batch-mode               Runs in batch mode without prompting for user input\n      --branch string            Filters the branch\n      --build string             The build number to view\n      --context string           Filters the context of the build\n  -c, --current                  Display logs using current folder as repo name, and parent folder as owner\n      --dir string               the directory to search for the .git to discover the git source URL (default \".\")\n  -e, --env string               The name of the environment to view pipelines for the git repository\n      --fail-with-pod            Return an error if the pod fails\n  -f, --filter string            Filters all the available jobs by those that contain the given text\n  -g, --giturl string            The git URL to filter on. If you specify a link to a github repository or PR we can filter the query of build pods accordingly\n  -h, --help                     help for log\n      --log-level string         Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -o, --owner string             Filters the owner (person/organisation) of the repository\n  -p, --pending                  Only include pipeline pods which are currently pending to choose from if no build name is supplied\n      --pod string               The pod name to view\n  -r, --repo string              Filters the build repository\n  -t, --tail                     Tails the build log to the current terminal (default true)\n      --verbose                  Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -w, --wait                     Waits for the build to start before failing\n  -d, --wait-duration duration   Timeout period waiting for the given pipeline to be created (default 20m0s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/override/_index.md": "---\ntitle: jx pipeline override\nlinktitle: override\ntype: docs\ndescription: \"Lets you pick a step to override locally in a pipeline ***Aliases**: edit,inline*\"\naliases:\n  - jx-pipeline_override\n---\n\n### Usage\n\n```\njx pipeline override\n```\n\n### Synopsis\n\nLets you pick a step to override locally in a pipeline\n\n### Examples\n\n  ```bash\n  # Override locally a step in a pipeline\n  jx pipeline override\n  \n  # Override the 'script' property from the property in the catalog\n  # so that you can locally modfiy the script without locally maintaining all of the other properties such as image, env, resources etc\n  jx pipeline override -P script\n\n  ```\n### Options\n\n```\n  -b, --batch-mode               Runs in batch mode without prompting for user input\n      --catalog-owner string     The github owner for the default catalog (default \"jenkins-x\")\n      --catalog-repo string      The github repository name for the default catalog (default \"jx3-pipeline-catalog\")\n  -d, --dir string               The directory to look for the .lighthouse and/or .git folders (default \".\")\n  -f, --file string              The pipeline file to render\n      --git-kind string          the kind of git server to connect to\n      --git-server string        the git server URL to create the scm client\n      --git-token string         the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string      the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                     help for override\n      --log-level string         Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -p, --pipeline string          The pipeline kind and name. e.g. 'presubmit/pr' or 'postsubmit/release'. If not specified you will be prompted to choose one\n  -P, --properties stringArray   The property names to override in the step. e.g. 'script' will just override the script tag\n  -a, --sha string               The default catalog SHA to use when resolving catalog pipelines to reuse (default \"HEAD\")\n  -s, --step string              The name of the step to override\n  -t, --trigger string           The path to the trigger file. If not specified you will be prompted to choose one\n      --verbose                  Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/pods/_index.md": "---\ntitle: jx pipeline pods\nlinktitle: pods\ntype: docs\ndescription: \"Displays the build pods and their details ***Aliases**: pod*\"\naliases:\n  - jx-pipeline_pods\n---\n\n### Usage\n\n```\njx pipeline pods [flags]\n```\n\n### Synopsis\n\nDisplay the Tekton build pods\n\n### Examples\n\n  ```bash\n  # List all the Tekton build pods\n  jx pipeline pods\n  \n  # List all the pending Tekton build pods\n  jx pipeline pods -p\n  \n  # List all the Tekton build pods for a given repository\n  jx pipeline pods --repo cheese\n  \n  # List all the pending Tekton build pods for a given repository\n  jx pipeline pods --repo cheese -p\n  \n  # List all the Tekton build pods for a given Pull Request\n  jx pipeline pods --repo cheese --branch PR-1234\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n      --branch string      Filters the branch\n      --build string       The build number to view\n      --context string     Filters the context of the build\n  -e, --env string         The name of the environment to view pipelines for the git repository\n  -f, --filter string      Filters all the available jobs by those that contain the given text\n  -g, --giturl string      The git URL to filter on. If you specify a link to a github repository or PR we can filter the query of build pods accordingly\n  -h, --help               help for pods\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string   The namespace to look for the build pods. Defaults to the current namespace\n  -o, --owner string       Filters the owner (person/organisation) of the repository\n  -p, --pending            Only include pipeline pods which are currently pending to choose from if no build name is supplied\n      --pod string         The pod name to view\n  -r, --repo string        Filters the build repository\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/previews/_index.md": "---\ntitle: jx pipeline previews\nlinktitle: previews\ntype: docs\ndescription: \"Display one or more Preview Environments ***Aliases**: preview*\"\naliases:\n  - jx-pipeline_previews\n---\n\n### Usage\n\n```\njx pipeline previews\n```\n\n### Synopsis\n\nDisplay one or more preview environments.\n  \nSee Also: \n\n  * jx get env : https://jenkins-x.io/commands/jx_get_env\n\n### Examples\n\n  ```bash\n  # List all preview environments\n  jx get previews\n  \n  # View the current preview environment URL\n  # inside a CI pipeline\n  jx get preview --current\n\n  ```\n### Options\n\n```\n  -c, --current         Output the URL of the current Preview application the current pipeline just deployed\n  -h, --help            help for previews\n  -o, --output string   The output format such as 'yaml'\n```\n\n### Options inherited from parent commands\n\n```\n  -b, --batch-mode   Runs in batch mode without prompting for user input\n      --verbose      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/set/_index.md": "---\ntitle: jx pipeline set\nlinktitle: set\ntype: docs\ndescription: \"Sets a property on the given Pipeline / PipelineRun / Task files\"\naliases:\n  - jx-pipeline_set\n---\n\n### Usage\n\n```\njx pipeline set\n```\n\n### Synopsis\n\nSets a property on the given Pipeline / PipelineRun / Task files.\n\n### Examples\n\n  ```bash\n  # Modifies one or more Pipeline / PipelineRun / Tasks in the given folder\n  jx pipeline set --dir tasks --template-env FOO=bar\n\n  ```\n### Options\n\n```\n  -d, --dir string                 Directory to look for YAML files (default \".\")\n  -f, --filter string              Text filter to filter the YAML files to modify\n  -h, --help                       help for set\n  -t, --template-env stringArray   List of environment variables to set of the form 'NAME=value' on the step template\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/start/_index.md": "---\ntitle: jx pipeline start\nlinktitle: start\ntype: docs\ndescription: \"Starts one or more pipelines ***Aliases**: build,run*\"\naliases:\n  - jx-pipeline_start\n---\n\n### Usage\n\n```\njx pipeline start\n```\n\n### Synopsis\n\nStarts the pipeline build.\n\n### Examples\n\n  ```bash\n  # Start a pipeline\n  jx pipeline start foo\n  \n  # Select the pipeline to start\n  jx pipeline start\n  \n  # Select the pipeline to start and tail the log\n  jx pipeline start -t\n  \n  # Start the given local pipeline file\n  jx pipeline start -F .lighthouse/jenkins-x/mypipeline.yaml\n\n  ```\n### Options\n\n```\n      --branch string            The branch to start. If not specified then the default branch of the repository is used\n      --configmap string         The name of the Lighthouse ConfigMap to find the trigger configurations (default \"config\")\n  -c, --context string           An optional context name to find the specific kind of postsubmit/presubmit if there are more than one triggers\n      --duration duration        Maximum duration to wait for one or more matching triggers to be setup in Lighthouse. Useful for when a new repository is being imported via GitOps (default 20m0s)\n  -e, --env stringToString       List of custom environment variables to be applied to the generated PipelineRun that are created (can be use multiple times) (default [])\n  -F, --file string              The pipeline file to start\n  -f, --filter string            Filters all the available jobs by those that contain the given text\n      --git-token string         the git token used to access the git repository for in-repo configurations in lighthouse\n      --git-username string      the git username used to access the git repository for in-repo configurations in lighthouse\n  -h, --help                     help for start\n      --kind string              The kind of pipeline such as presubmit or post submit. If not specified defaults to postsubmit (i.e. release)\n  -l, --label stringArray        List of custom labels to be applied to the generated PipelineRun (can be use multiple times)\n      --param stringArray        List of name=value PipelineRun parameters passed into the ligthhousejob which add or override any parameter values in the lighthouse postsubmit configuration\n      --poll-period duration     Poll period when waiting for one or more matching triggers to be setup in Lighthouse. Useful for when a new repository is being imported via GitOps (default 2s)\n      --service-account string   The Kubernetes ServiceAccount to use to run the meta pipeline (default \"tekton-bot\")\n  -t, --tail                     Tails the build log to the current terminal\n      --wait                     Waits until the trigger has been setup in Lighthouse for when a new repository is being imported via GitOps\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/stop/_index.md": "---\ntitle: jx pipeline stop\nlinktitle: stop\ntype: docs\ndescription: \"Stops one or more pipelines ***Aliases**: kill*\"\naliases:\n  - jx-pipeline_stop\n---\n\n### Usage\n\n```\njx pipeline stop\n```\n\n### Synopsis\n\nStops the pipeline build.\n\n### Examples\n\n  ```bash\n  # Select the pipeline to stop\n  jx pipeline stop\n  \n  # Stop a pipeline with a filter and a build number\n  jx pipeline stop -f myapp -n 2\n  \n  # Stop a pipeline for a specific org/repo/branch\n  jx pipeline stop myorg/myrepo/main\n  \n  # Stop a pipeline for a specific context and branch\n  jx pipeline stop --context pr --branch PR-456\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -r, --branch string      The branch to filter by\n  -n, --build string       The build number to stop\n  -c, --context string     The context to filter by\n  -f, --filter string      Filters all the available pipeline names\n  -h, --help               help for stop\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/version/_index.md": "---\ntitle: jx pipeline version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-pipeline_version\n---\n\n### Usage\n\n```\njx pipeline version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/pipeline/wait/_index.md": "---\ntitle: jx pipeline wait\nlinktitle: wait\ntype: docs\ndescription: \"Waits for a pipeline to be imported and activated by the boot Job ***Aliases**: build,run*\"\naliases:\n  - jx-pipeline_wait\n---\n\n### Usage\n\n```\njx pipeline wait\n```\n\n### Synopsis\n\nWaits for a pipeline to be imported and activated by the boot Job\n\n### Examples\n\n  ```bash\n  # Waits for the pipeline to be setup for the given repository\n  jx pipeline wait --owner myorg --repo myrepo\n\n  ```\n### Options\n\n```\n  -b, --batch-mode             Runs in batch mode without prompting for user input\n      --configmap string       The name of the Lighthouse ConfigMap to find the trigger configurations (default \"config\")\n      --duration duration      Maximum duration to wait for one or more matching triggers to be setup in Lighthouse. Useful for when a new repository is being imported via GitOps (default 20m0s)\n  -h, --help                   help for wait\n      --log-level string       Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string       The namespace to look for the lighthouse configuration. Defaults to the current namespace\n  -o, --owner string           The owner name to wait for\n      --poll-period duration   Poll period when waiting for one or more matching triggers to be setup in Lighthouse. Useful for when a new repository is being imported via GitOps (default 2s)\n  -r, --repo string            The repository name o wait for\n      --verbose                Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-pipeline](https://github.com/jenkins-x-plugins/jx-pipeline)\n",
            "content/en/v3/develop/reference/jx/preview/_index.md": "---\ntitle: jx preview\nlinktitle: preview\ntype: docs\ndescription: \"Preview commands\"\naliases:\n  - jx-preview\n---\n\n### Usage\n\n```\njx preview\n```\n\n### Synopsis\n\nPreview commands\n\n### Options\n\n```\n  -h, --help   help for jx-preview\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/create/_index.md": "---\ntitle: jx preview create\nlinktitle: create\ntype: docs\ndescription: \"Creates a preview\"\naliases:\n  - jx-preview_create\n---\n\n### Usage\n\n```\njx preview create\n```\n\n### Synopsis\n\nCreates a preview\n\n### Examples\n\n  ```bash\n  # creates a new preview environment\n  jx-preview create\n\n  ```\n### Options\n\n```\n      --app string                     Name of the app or repository\n      --debug                          Enables debug logging in helmfile\n      --dir string                     the directory to search for the .git to discover the git source URL (default \".\")\n  -f, --file string                    Preview helmfile.yaml path to use. If not specified it is discovered in preview/helmfile.yaml and created from a template if needed\n      --git-kind string                the kind of git server to connect to\n      --git-server string              the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string               the git token used to operate on the git repository\n      --git-user string                The user name to git clone the environment repository\n  -h, --help                           help for create\n      --no-comment                     Disables commenting on the Pull Request after preview is created\n      --no-watch                       Disables watching the preview namespace as we deploy the preview\n      --path string                    An optional path added to the Preview ingress URL. If not specified uses $JX_PREVIEW_PATH\n      --pr int                         the Pull Request number. If not specified we detect it via $PULL_NUMBER or $BRANCH_NAME environment variables\n      --preview-url-timeout duration   Time to wait for the preview URL to be available (default 1m0.000000005s)\n      --service string                 Specify the service/ingress name to use for the preview URL. If not specified uses $JX_PREVIEW_SERVICE\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/destroy/_index.md": "---\ntitle: jx preview destroy\nlinktitle: destroy\ntype: docs\ndescription: \"Destroys a preview environment ***Aliases**: delete,remove*\"\naliases:\n  - jx-preview_destroy\n---\n\n### Usage\n\n```\njx preview destroy\n```\n\n### Synopsis\n\nDestroys a preview environment\n\n### Examples\n\n  ```bash\n  # destroys a preview environment\n  jx-preview destroy jx-myorg-myapp-pr-4\n\n  ```\n### Options\n\n```\n      --all             Select all the previews that match filter by default\n      --dir string      The directory where to run the delete preview command - a git clone will be done on a temporary jx-git-xxx directory if this parameter is empty\n      --fail-on-helm    If enabled do not try to remove the namespace or Preview resource if we fail to destroy helmfile resources\n      --filter string   The filter to use to find previews to delete\n  -h, --help            help for destroy\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/gc/_index.md": "---\ntitle: jx preview gc\nlinktitle: gc\ntype: docs\ndescription: \"Garbage collect Preview environments for closed or merged Pull Requests\"\naliases:\n  - jx-preview_gc\n---\n\n### Usage\n\n```\njx preview gc\n```\n\n### Synopsis\n\nGarbage collect Jenkins X preview environments. \n\nIf a pull request is merged or closed the associated preview environment will be deleted.\n\n### Examples\n\n  ```bash\n  # garbage collect previews\n  jx-preview gc\n\n  ```\n### Options\n\n```\n      --gc-drafts   Also garbage collect drafts\n  -h, --help        help for gc\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/get/_index.md": "---\ntitle: jx preview get\nlinktitle: get\ntype: docs\ndescription: \"Display one or more Previews ***Aliases**: list*\"\naliases:\n  - jx-preview_get\n---\n\n### Usage\n\n```\njx preview get\n```\n\n### Synopsis\n\nDisplay one or more preview environments.\n\n### Examples\n\n  ```bash\n  # List all preview environments\n  jx-preview get\n  \n  # View the current preview environment URL\n  # inside a CI pipeline\n  jx-preview get --current\n\n  ```\n### Options\n\n```\n  -c, --current   Output the URL of the current Preview application the current pipeline just deployed\n  -h, --help      help for get\n  -w, --wait      Waits for a preview deployment with commit hash that matches latest commit\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/template/_index.md": "---\ntitle: jx preview template\nlinktitle: template\ntype: docs\ndescription: \"Displays the output of 'helmfile template' for the preview ***Aliases**: tmp*\"\naliases:\n  - jx-preview_template\n---\n\n### Usage\n\n```\njx preview template\n```\n\n### Synopsis\n\nDisplay one or more preview environments.\n\n### Examples\n\n  ```bash\n  # Display the preview template yaml on the console\n  jx preview template\n\n  ```\n### Options\n\n```\n      --app string               Name of the app or repository\n  -f, --file string              Preview helmfile.yaml path to use. If not specified it is discovered in preview/helmfile.yaml and created from a template if needed\n      --helmfile-binary string   specifies the helmfile binary location to use. If not specified defaults to using the downloaded helmfile plugin\n  -h, --help                     help for template\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/preview/version/_index.md": "---\ntitle: jx preview version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-preview_version\n---\n\n### Usage\n\n```\njx preview version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-preview](https://github.com/jenkins-x-plugins/jx-preview)\n",
            "content/en/v3/develop/reference/jx/project/_index.md": "---\ntitle: jx project\nlinktitle: project\ntype: docs\ndescription: \"Create a new project by importing code, creating a quickstart or custom wizard for spring\"\naliases:\n  - jx-project\n---\n\n### Usage\n\n```\njx project\n```\n\n### Synopsis\n\nCreate a new project by importing code, creating a quickstart or custom wizard for spring.\n\n### Examples\n\n  ```bash\n  # Create a project using the wizard\n  jx-project\n\n  ```\n### Options\n\n```\n  -h, --help   help for jx-project\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/enable/_index.md": "---\ntitle: jx project enable\nlinktitle: enable\ntype: docs\ndescription: \"Enables lighthouse pipelines in the current directory ***Aliases**: dump*\"\naliases:\n  - jx-project_enable\n---\n\n### Usage\n\n```\njx project enable\n```\n\n### Synopsis\n\nEnables lighthouse pipelines in the current directory\n\n### Examples\n\n  ```bash\n  # Enables lighthouse pipelines in the current dir\n  jx project enable\n\n  ```\n### Options\n\n```\n  -b, --batch-mode            Runs in batch mode without prompting for user input\n      --charts                Should we regen the charts\n      --dir string            Specify the directory to import (default \".\")\n      --git-kind string       the kind of git server to connect to\n      --git-server string     the git server URL to create the scm client\n      --git-token string      the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string   the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                  help for enable\n      --log-level string      Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --pack string           The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages\n      --verbose               Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/import/_index.md": "---\ntitle: jx project import\nlinktitle: import\ntype: docs\ndescription: \"Imports a local project or Git repository into Jenkins\"\naliases:\n  - jx-project_import\n---\n\n### Usage\n\n```\njx project import\n```\n\n### Synopsis\n\nImports a local folder or Git repository into Jenkins X. \n\nIf you specify no other options or arguments then the current directory is imported. Or you can use '--dir' to specify a directory to import. \n\nYou can specify the git URL as an argument. \n\nFor more documentation see: https://jenkins-x.io/docs/using-jx/creating/import/\n\n### Examples\n\n  ```bash\n  # Import the current folder\n  jx-project import\n  \n  # Import a different folder\n  jx-project import /foo/bar\n  \n  # Import a Git repository from a URL\n  jx-project import --url https://github.com/jenkins-x/spring-boot-web-example.git\n  \n  # Select a number of repositories from a GitHub organisation\n  jx-project import --github --org myname\n  \n  # Import all repositories from a GitHub organisation selecting ones to not import\n  jx-project import --github --org myname --all\n  \n  # Import all repositories from a GitHub organisation which contain the text foo\n  jx-project import --github --org myname --all --filter foo\n\n  ```\n### Options\n\n```\n      --all                            If selecting projects to import from a Git provider this defaults to selecting them all\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --boot-secret-name string        The name of the boot secret (default \"jx-boot\")\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --dir string                     Specify the directory to import (default \".\")\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --env-name string                The name of the environment to create (only used for env projects)\n      --env-strategy string            The promotion strategy of the environment to create (only used for env projects) (default \"Never\")\n      --git-kind string                the kind of git server to connect to\n      --git-provider-url string        Deprecated: please use --git-server\n      --git-server string              the git server URL to create the scm client\n      --git-token string               the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string            the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --github                         If you wish to pick the repositories from GitHub to import\n  -h, --help                           help for import\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n      --jenkins string                 The name of the Jenkins server to import the project into\n      --jenkinsfilerunner string       if you want to import into Jenkins X with Jenkinsfilerunner this argument lets you specify the container image to use\n      --jx                             if you want to default to importing this project into Jenkins X instead of a Jenkins server if you have a mixed Jenkins X and Jenkins cluster\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --nested-repo                    Specify if using nested repositories (in gitlab)\n      --no-collaborator                disables checking if the bot user is a collaborator. Only used if you have an issue with your git provider and this functionality in go-scm\n      --no-dev-pr                      disables generating a Pull Request on the cluster git repository\n      --no-pack                        Disable trying to default a Dockerfile and Helm Chart from the pipeline catalog pack\n      --no-start                       disables starting a release pipeline when importing/creating a new project\n      --operator-namespace string      The namespace where the git operator is installed (default \"jx-git-operator\")\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n      --pack string                    The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages\n      --pipeline-catalog-dir string    The pipeline catalog directory you want to use instead of the buildPackGitURL in the dev Environment Team settings. Generally only used for testing pipelines\n      --pr-poll-period duration        the time between polls of the Pull Request on the cluster environment git repository (default 20s)\n      --pr-poll-timeout duration       the maximum amount of time we wait for the Pull Request on the cluster environment git repository (default 20m0s)\n      --scheduler string               Change schedulerName, More info about Scheduler: https://jenkins-x.io/v3/develop/faq/config/repos/#how-do-i-customise-a-scheduler (default \"in-repo\")\n      --service-account string         The Kubernetes ServiceAccount to use to run the initial pipeline (default \"tekton-bot\")\n  -u, --url string                     The git clone URL to clone into the current directory and then import\n      --use-default-git                use default git account\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --wait-for-pr                    waits for the Pull Request generated on the cluster environment git repository to merge (default true)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/mlquickstart/_index.md": "---\ntitle: jx project mlquickstart\nlinktitle: mlquickstart\ntype: docs\ndescription: \"Create a new machine learning app from a set of quickstarts and import the generated code into Git and Jenkins for CI/CD ***Aliases**: arch*\"\naliases:\n  - jx-project_mlquickstart\n---\n\n### Usage\n\n```\njx project mlquickstart\n```\n\n### Synopsis\n\nCreate a new machine learning project from a sample/starter (found in https://github.com/machine-learning-quickstarts)\n  \n      This will create two new projects for you from the selected template. One for training and one for deploying a model as a service.\n      It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n      For more documentation see: [https://jenkins-x.io/developing/create-mlquickstart/](https://jenkins-x.io/developing/create-mlquickstart/)\n  \nSee Also: \n\n  * jx project : https://jenkins-x.io/commands/jx_project\n\n### Examples\n\n  ```bash\n  Create a new machine learning project from a sample/starter (found in https://github.com/machine-learning-quickstarts)\n  \n  This will create a new machine learning project for you from the selected template.\n  It will exclude any work-in-progress repos (containing the \"WIP-\" pattern)\n  \n  jx project mlquickstart\n  \n  jx project mlquickstart -f pytorch\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --boot-secret-name string        The name of the boot secret (default \"jx-boot\")\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --dir string                     Specify the directory to import (default \".\")\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --env-name string                The name of the environment to create (only used for env projects)\n      --env-strategy string            The promotion strategy of the environment to create (only used for env projects) (default \"Never\")\n  -f, --filter string                  The text filter\n      --framework string               The framework to filter on\n      --git-host string                The Git server host if not using GitHub when pushing created project\n      --git-kind string                the kind of git server to connect to\n      --git-provider-url string        Deprecated: please use --git-server\n      --git-server string              the git server URL to create the scm client\n      --git-token string               the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string            the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                           help for mlquickstart\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n      --jenkins string                 The name of the Jenkins server to import the project into\n      --jenkinsfilerunner string       if you want to import into Jenkins X with Jenkinsfilerunner this argument lets you specify the container image to use\n      --jx                             if you want to default to importing this project into Jenkins X instead of a Jenkins server if you have a mixed Jenkins X and Jenkins cluster\n  -l, --language string                The language to filter on\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --nested-repo                    Specify if using nested repositories (in gitlab)\n      --no-collaborator                disables checking if the bot user is a collaborator. Only used if you have an issue with your git provider and this functionality in go-scm\n      --no-dev-pr                      disables generating a Pull Request on the cluster git repository\n      --no-import                      Disable import after the creation\n      --no-pack                        Disable trying to default a Dockerfile and Helm Chart from the pipeline catalog pack\n      --no-start                       disables starting a release pipeline when importing/creating a new project\n      --operator-namespace string      The namespace where the git operator is installed (default \"jx-git-operator\")\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n  -g, --organisations stringArray      The GitHub organisations to query for quickstarts\n  -o, --output-dir string              Directory to output the project to. Defaults to the current directory\n      --owner string                   The owner to filter on\n      --pack string                    The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages\n      --pipeline-catalog-dir string    The pipeline catalog directory you want to use instead of the buildPackGitURL in the dev Environment Team settings. Generally only used for testing pipelines\n      --pr-poll-period duration        the time between polls of the Pull Request on the cluster environment git repository (default 20s)\n      --pr-poll-timeout duration       the maximum amount of time we wait for the Pull Request on the cluster environment git repository (default 20m0s)\n  -p, --project-name string            The project name (for use with -b batch mode)\n      --quickstart-auth string         The auth mechanism used to authenticate with the git token to download the quickstarts. If not specified defaults to Basic but could be Bearer for bearer token auth\n      --scheduler string               Change schedulerName, More info about Scheduler: https://jenkins-x.io/v3/develop/faq/config/repos/#how-do-i-customise-a-scheduler (default \"in-repo\")\n      --service-account string         The Kubernetes ServiceAccount to use to run the initial pipeline (default \"tekton-bot\")\n  -t, --tag stringArray                The tags on the quickstarts to filter\n      --use-default-git                use default git account\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --wait-for-pr                    waits for the Pull Request generated on the cluster environment git repository to merge (default true)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/pullrequest/_index.md": "---\ntitle: jx project pullrequest\nlinktitle: pullrequest\ntype: docs\ndescription: \"Create a Pull Request on the git project for the current directory ***Aliases**: pr,pull request*\"\naliases:\n  - jx-project_pullrequest\n---\n\n### Usage\n\n```\njx project pullrequest\n```\n\n### Synopsis\n\nCreates a Pull Request in a the git project of the current directory. \n\nIf --push is specified the contents of the directory will be committed, pushed and used to create the pull request\n\n### Examples\n\n  ```bash\n  # Create a Pull Request in the current project\n  jx project pullrequest -t \"my PR title\"\n  \n  \n  # Create a Pull Request with a title and a body\n  jx project pullrequest -t \"my PR title\" --body \"\n  some more\n  text\n  goes\n  here\n  \"\"\n  \"\n\n  ```\n### Options\n\n```\n      --base string         The base branch to create the pull request into, instead of the default branch\n  -b, --batch-mode          Enables batch mode which avoids prompting for user input\n      --body string         The body of the pullrequest\n      --dir string          the directory to search for the .git to discover the git source URL (default \".\")\n      --fork                If true, and the username configured to push the repo is different from the org name a PR is being created against, assume that this is a fork\n      --git-kind string     the kind of git server to connect to\n      --git-server string   the git server URL to create the git provider client. If not specified its defaulted from the current source URL\n      --git-token string    the git token used to operate on the git repository\n  -h, --help                help for pullrequest\n  -l, --label stringArray   The labels to add to the pullrequest\n      --push                If true the contents of the source directory will be committed, pushed, and used to create the pull request\n  -t, --title string        The title of the pullrequest to create\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/quickstart/_index.md": "---\ntitle: jx project quickstart\nlinktitle: quickstart\ntype: docs\ndescription: \"Create a new app from a Quickstart and import the generated code into Git and Jenkins for CI/CD ***Aliases**: arch*\"\naliases:\n  - jx-project_quickstart\n---\n\n### Usage\n\n```\njx project quickstart\n```\n\n### Synopsis\n\nCreate a new project from a sample/starter (found in https://github.com/jenkins-x-quickstarts) \n\nThis will create a new project for you from the selected template. It will exclude any work-in-progress repos (containing the \"WIP-\" pattern) \n\nFor more documentation see: https://jenkins-x.io/developing/create-quickstart/\n\n### Examples\n\n  ```bash\n  # create a new quickstart\n  jx-project quickstart\n  \n  # creates a quickstart filtering on http based ones\n  jx-project quickstart -f http\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --boot-secret-name string        The name of the boot secret (default \"jx-boot\")\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --dir string                     Specify the directory to import (default \".\")\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --env-name string                The name of the environment to create (only used for env projects)\n      --env-strategy string            The promotion strategy of the environment to create (only used for env projects) (default \"Never\")\n  -f, --filter string                  The text filter\n      --framework string               The framework to filter on\n      --git-host string                The Git server host if not using GitHub when pushing created project\n      --git-kind string                the kind of git server to connect to\n      --git-provider-url string        Deprecated: please use --git-server\n      --git-server string              the git server URL to create the scm client\n      --git-token string               the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string            the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                           help for quickstart\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n      --jenkins string                 The name of the Jenkins server to import the project into\n      --jenkinsfilerunner string       if you want to import into Jenkins X with Jenkinsfilerunner this argument lets you specify the container image to use\n      --jx                             if you want to default to importing this project into Jenkins X instead of a Jenkins server if you have a mixed Jenkins X and Jenkins cluster\n  -l, --language string                The language to filter on\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --machine-learning               Allow machine-learning quickstarts in results\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --nested-repo                    Specify if using nested repositories (in gitlab)\n      --no-collaborator                disables checking if the bot user is a collaborator. Only used if you have an issue with your git provider and this functionality in go-scm\n      --no-dev-pr                      disables generating a Pull Request on the cluster git repository\n      --no-import                      Disable import after the creation\n      --no-pack                        Disable trying to default a Dockerfile and Helm Chart from the pipeline catalog pack\n      --no-start                       disables starting a release pipeline when importing/creating a new project\n      --operator-namespace string      The namespace where the git operator is installed (default \"jx-git-operator\")\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n  -g, --organisations stringArray      The GitHub organisations to query for quickstarts\n  -o, --output-dir string              Directory to output the project to. Defaults to the current directory\n      --owner string                   The owner to filter on\n      --pack string                    The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages\n      --pipeline-catalog-dir string    The pipeline catalog directory you want to use instead of the buildPackGitURL in the dev Environment Team settings. Generally only used for testing pipelines\n      --pr-poll-period duration        the time between polls of the Pull Request on the cluster environment git repository (default 20s)\n      --pr-poll-timeout duration       the maximum amount of time we wait for the Pull Request on the cluster environment git repository (default 20m0s)\n  -p, --project-name string            The project name (for use with -b batch mode)\n      --quickstart-auth string         The auth mechanism used to authenticate with the git token to download the quickstarts. If not specified defaults to Basic but could be Bearer for bearer token auth\n      --scheduler string               Change schedulerName, More info about Scheduler: https://jenkins-x.io/v3/develop/faq/config/repos/#how-do-i-customise-a-scheduler (default \"in-repo\")\n      --service-account string         The Kubernetes ServiceAccount to use to run the initial pipeline (default \"tekton-bot\")\n  -t, --tag stringArray                The tags on the quickstarts to filter\n      --use-default-git                use default git account\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --wait-for-pr                    waits for the Pull Request generated on the cluster environment git repository to merge (default true)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/project/spring/_index.md": "---\ntitle: jx project spring\nlinktitle: spring\ntype: docs\ndescription: \"Create a new Spring Boot application and import the generated code into Git and Jenkins for CI/CD\"\naliases:\n  - jx-project_spring\n---\n\n### Usage\n\n```\njx project spring\n```\n\n### Synopsis\n\nCreates a new Spring Boot application and then optionally setups CI/CD pipelines and GitOps promotion.\n  \n      You can see a demo of this command here: [https://jenkins-x.io/demos/create_spring/](https://jenkins-x.io/demos/create_spring/)\n  \n      For more documentation see: [https://jenkins-x.io/developing/create-spring/](https://jenkins-x.io/developing/create-spring/)\n  \nSee Also: \n\n  * jx create project : https://jenkins-x.io/commands/jx_create_project\n\n### Examples\n\n  ```bash\n  # Create a Spring Boot application where you use the terminal to pick the values\n  jx-project spring\n  \n  # Creates a Spring Boot application passing in the required dependencies\n  jx-project spring -d web -d actuator\n  \n  # To pick the advanced options (such as what package type maven-project/gradle-project) etc then use\n  jx-project spring -x\n  \n  #\u00a0To create a gradle project use:\n  jx-project spring --type gradle-project\n\n  ```\n### Options\n\n```\n  -x, --advanced                       Advanced mode can show more detailed forms for some resource kinds like springboot\n  -a, --artifact string                Artifact ID to generate\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --boot-secret-name string        The name of the boot secret (default \"jx-boot\")\n  -t, --boot-version string            Spring Boot version\n      --canary                         should we use canary rollouts (progressive delivery) by default for this application. e.g. using a Canary deployment via flagger. Requires the installation of flagger and istio/gloo in your cluster\n  -d, --dep stringArray                Spring Boot dependencies\n      --deploy-kind string             The kind of deployment to use for the project. Should be one of knative, default\n      --dir string                     Specify the directory to import (default \".\")\n      --docker-registry-org string     The name of the docker registry organisation to use. If not specified then the Git provider organisation will be used\n      --dry-run                        Performs local changes to the repo but skips the import into Jenkins X\n      --env-name string                The name of the environment to create (only used for env projects)\n      --env-strategy string            The promotion strategy of the environment to create (only used for env projects) (default \"Never\")\n      --git-kind string                the kind of git server to connect to\n      --git-provider-url string        Deprecated: please use --git-server\n      --git-server string              the git server URL to create the scm client\n      --git-token string               the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string            the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -g, --group string                   Group ID to generate\n  -h, --help                           help for spring\n      --hpa                            should we enable the Horizontal Pod Autoscaler for this application.\n      --import-commit-message string   Specifies the initial commit message used when importing the project\n  -j, --java-version string            Java version\n      --jenkins string                 The name of the Jenkins server to import the project into\n      --jenkinsfilerunner string       if you want to import into Jenkins X with Jenkinsfilerunner this argument lets you specify the container image to use\n      --jx                             if you want to default to importing this project into Jenkins X instead of a Jenkins server if you have a mixed Jenkins X and Jenkins cluster\n  -k, --kind stringArray               Default dependency kinds to choose from (default [Core,Web,Template Engines,SQL,I/O,Ops,Spring Cloud GCP,Azure,Cloud Contract,Cloud AWS,Cloud Messaging,Cloud Tracing])\n  -l, --language string                Language to generate\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --name string                    Specify the Git repository name to import the project into (if it is not already in one)\n      --nested-repo                    Specify if using nested repositories (in gitlab)\n      --no-collaborator                disables checking if the bot user is a collaborator. Only used if you have an issue with your git provider and this functionality in go-scm\n      --no-dev-pr                      disables generating a Pull Request on the cluster git repository\n      --no-import                      Disable import after the creation\n      --no-pack                        Disable trying to default a Dockerfile and Helm Chart from the pipeline catalog pack\n      --no-start                       disables starting a release pipeline when importing/creating a new project\n      --operator-namespace string      The namespace where the git operator is installed (default \"jx-git-operator\")\n      --org string                     Specify the Git provider organisation to import the project into (if it is not already in one)\n  -o, --output-dir string              Directory to output the project to. Defaults to the current directory\n      --pack string                    The name of the pipeline catalog pack to use. If none is specified it will be chosen based on matching the source code languages\n  -p, --packaging string               Packaging\n      --pipeline-catalog-dir string    The pipeline catalog directory you want to use instead of the buildPackGitURL in the dev Environment Team settings. Generally only used for testing pipelines\n      --pr-poll-period duration        the time between polls of the Pull Request on the cluster environment git repository (default 20s)\n      --pr-poll-timeout duration       the maximum amount of time we wait for the Pull Request on the cluster environment git repository (default 20m0s)\n      --scheduler string               Change schedulerName, More info about Scheduler: https://jenkins-x.io/v3/develop/faq/config/repos/#how-do-i-customise-a-scheduler (default \"in-repo\")\n      --service-account string         The Kubernetes ServiceAccount to use to run the initial pipeline (default \"tekton-bot\")\n      --type string                    Project Type (such as maven-project or gradle-project)\n      --use-default-git                use default git account\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --wait-for-pr                    waits for the Pull Request generated on the cluster environment git repository to merge (default true)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-project](https://github.com/jenkins-x-plugins/jx-project)\n",
            "content/en/v3/develop/reference/jx/promote/_index.md": "---\ntitle: jx promote\nlinktitle: promote\ntype: docs\ndescription: \"Promotes a version of an application to an Environment\"\naliases:\n  - promote\n---\n\n### Usage\n\n```\npromote [application]\n```\n\n### Synopsis\n\nPromotes a version of an application to zero to many permanent environments. \n\nFor more documentation see: https://jenkins-x.io/docs/getting-started/promotion/\n\n### Examples\n\n  ```bash\n  # Promote a version of the current application to staging\n  # discovering the application name from the source code\n  jx promote --version 1.2.3 --env staging\n  \n  # Promote a version of the myapp application to production\n  jx promote --app myapp --version 1.2.3 --env production\n  \n  # To search for all the available charts for a given name use -f.\n  # e.g. to find a redis chart to install\n  jx promote -f redis\n  \n  # To promote a postgres chart using an alias\n  jx promote -f postgres --alias mydb\n  \n  # To create or update a Preview Environment please see the 'jx preview' command if you are inside a git clone of a repo\n  jx preview\n\n  ```\n### Options\n\n```\n  -c, --add-changelog string            a file to take a changelog from to add to the pullr equest body. Typically a file generated by jx changelog.\n      --alias string                    The optional alias used in the 'requirements.yaml' file\n      --all                             Promote to all automatic and manual environments in order using a draft PR for manual promotion environments. Implies batch mode.\n      --all-auto                        Promote to all automatic environments in order\n  -a, --app string                      The Application to promote\n      --app-git-url string              The Git URL of the application being promoted. Only required if using file or kpt rules\n      --auto-merge                      If enabled add the 'updatebot' label to tell lighthouse to eagerly merge. Usually the Pull Request pipeline will add this label during the Pull Request pipeline after any extra generation/commits have been done and the PR is valid\n  -b, --batch-mode                      Enables batch mode which avoids prompting for user input\n      --build string                    The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n      --changelog-separator string      the separator to use between commit message and changelog in the pull request body. Default to ----- or if set the CHANGELOG_SEPARATOR environment variable\n  -e, --env stringArray                 The environment(s) to promote to\n  -f, --filter string                   The search filter to find charts to promote\n      --git-token string                Git token used to clone the development environment. If not specified its loaded from the git credentials file\n      --git-user string                 Git username used to clone the development environment. If not specified its loaded from the git credentials file\n  -r, --helm-repo-name string           The name of the helm repository that contains the app (default \"releases\")\n  -u, --helm-repo-url string            The Helm Repository URL to use for the App\n  -h, --help                            help for promote\n      --ignore-local-file               Ignores the local file system when deducing the Git repository\n      --interactive                     Enables interactive mode\n  -n, --namespace string                The Namespace to promote to\n      --no-helm-update                  Allows the 'helm repo update' command if you are sure your local helm cache is up to date with the version you wish to promote\n      --no-merge                        Disables automatic merge of promote Pull Requests\n      --no-poll                         Disables polling for Pull Request or Pipeline status\n      --no-pr-group                     Disables grouping Auto promotions to different Environments in the same git repository within a single Pull Request which causes them to use separate Pull Requests\n      --no-wait                         Disables waiting for completing promotion after the Pull request is merged\n      --pipeline string                 The Pipeline string in the form 'folderName/repoName/branch' which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD_NUMBER' environment variable\n      --pull-request-poll-time string   Poll time when waiting for a Pull Request to merge (default \"20s\")\n      --release string                  The name of the helm release\n  -t, --timeout string                  The timeout to wait for the promotion to succeed in the underlying Environment. The command fails if the timeout is exceeded or the promotion does not complete (default \"1h\")\n  -v, --version string                  The Version to promote. If no version is specified it defaults to $VERSION which is usually populated in a pipeline. If no value can be found you will be prompted to pick the version\n      --version-file string             the file to load the version from if not specified directly or via a $VERSION environment variable. Defaults to VERSION in the current dir\n```\n\n###### Auto generated by spf13/cobra on 21-Nov-2022\n\n\n### Source\n\n[jenkins-x-plugins/jx-promote](https://github.com/jenkins-x-plugins/jx-promote)\n",
            "content/en/v3/develop/reference/jx/registry/_index.md": "---\ntitle: jx registry\nlinktitle: registry\ntype: docs\ndescription: \"commands for working with container registries\"\naliases:\n  - jx-registry\n---\n\n### Usage\n\n```\njx registry\n```\n\n### Synopsis\n\ncommands for working with container registries\n\n### Options\n\n```\n  -h, --help   help for jx-registry\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-registry](https://github.com/jenkins-x-plugins/jx-registry)\n",
            "content/en/v3/develop/reference/jx/registry/create/_index.md": "---\ntitle: jx registry create\nlinktitle: create\ntype: docs\ndescription: \"Lazy create a container registry for ECR\"\naliases:\n  - jx-registry_create\n---\n\n### Usage\n\n```\njx registry create\n```\n\n### Synopsis\n\nLazy create a container registry for ECR as well as putting a lifecycle policy in place. The default policy will make images with a tag prefix of 0.0.0- expire after 14 days. This prefix is the default for pull request builds. If a policy exist and the default policy isn't overridden (see --ecr-lifecycle-policy) no policy will be put.\n\n### Examples\n\n  ```bash\n  # lets ensure we have an ECR registry setup\n  jx-registry create\n\n  ```\n### Options\n\n```\n  -a, --app string                     The app name to use. Defaults to $APP_NAME\n      --aws-profile string             The AWS profile to use. Defaults to $AWS_PROFILE\n      --aws-region string              The AWS region. Defaults to $AWS_REGION or its read from the 'jx-requirements.yml' for the development environment\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --cache-suffix string            If specified (or enabled via $CACHE_SUFFIX) we will make sure an ECR is created for the cache image too\n      --create-ecr-lifecycle-policy    Should ECR Lifecycle Policy be created. Can be specified in $CREATE_ECR_LIFECYCLE_POLICY. (default true)\n      --create-ecr-repository-policy   Should ECR Repository Policy be created. Can be specified in $CREATE_ECR_REPOSITORY_POLICY.\n      --ecr-lifecycle-policy string    ECR lifecycle policies to apply to the repository. Can be specified in $ECR_LIFECYCLE_POLICY.\n      --ecr-registry-suffix string     The registry suffix to check if we are using ECR (default \".amazonaws.com\")\n      --ecr-repository-policy string   ECR repository policies to apply to the repository. Can be specified in $ECR_REPOSITORY_POLICY.\n  -h, --help                           help for create\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string               The namespace. Defaults to the current namespace\n  -o, --organisation string            The registry organisation to use. Defaults to $DOCKER_REGISTRY_ORG\n  -r, --registry string                The registry to use. Defaults to $DOCKER_REGISTRY\n      --registry-id string             The registry ID to use. If not specified finds the first path of the registry. $REGISTRY_ID\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-registry](https://github.com/jenkins-x-plugins/jx-registry)\n",
            "content/en/v3/develop/reference/jx/registry/version/_index.md": "---\ntitle: jx registry version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-registry_version\n---\n\n### Usage\n\n```\njx registry version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-registry](https://github.com/jenkins-x-plugins/jx-registry)\n",
            "content/en/v3/develop/reference/jx/scm/_index.md": "---\ntitle: jx scm\nlinktitle: scm\ntype: docs\ndescription: \"GitOps utility commands\"\naliases:\n  - jx-scm\n---\n\n### Usage\n\n```\njx scm\n```\n\n### Synopsis\n\nGitOps utility commands\n\n### Options\n\n```\n  -h, --help   help for jx-scm\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/pull-request/_index.md": "---\ntitle: jx scm pull-request\nlinktitle: pull-request\ntype: docs\ndescription: \"Commands for working with pull-requests ***Aliases**: pr*\"\naliases:\n  - jx-scm_pull-request\n---\n\n### Usage\n\n```\njx scm pull-request\n```\n\n### Synopsis\n\nCommands for working with pull-requests\n\n### Options\n\n```\n  -h, --help   help for pull-request\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/pull-request/close/_index.md": "---\ntitle: jx scm pull-request close\nlinktitle: close\ntype: docs\ndescription: \"closes a pull request\"\naliases:\n  - jx-scm_pull-request_close\n---\n\n### Usage\n\n```\njx scm pull-request close\n```\n\n### Synopsis\n\nUpdate a release\n\n### Examples\n\n  ```bash\n  # closes pull requests foo/bar number 123\n  jx-scm pull-request close --owner foo --name bar --pr 123\n  \n  # closes all open pull requests on foo/bar before pull request number 200\n  jx-scm pull-request close --owner foo --name bar --before 200\n  \n  # close an open pull request on foo/bar from branch baz onto base branch main\n  %!s(MISSING) pull-request close --owner foo --name bar --head baz --base main\n\n  ```\n### Options\n\n```\n      --base string       the name of the branch the changes would be pulled into (default \"main\")\n      --before int        a pull request number to used to close ALL open pull requests before it\n      --head string       the name of the branch where changes are implemented\n  -h, --help              help for close\n  -k, --kind string       the kind of git server to use\n  -r, --name string       the name of the repository that contains pull requests to close\n  -o, --owner string      the owner of the repository that contains pull requests to close. Either an organisation or username. For Azure, include the project: 'organization/project'\n      --pr int            the pull request to close\n  -s, --server string     the git server URL to use\n      --size int          the number of open pull requests to return if using --before, defaults to 200 (default 200)\n  -t, --token string      the token to use on the git server\n  -u, --username string   the user name to use on the git server\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/pull-request/create/_index.md": "---\ntitle: jx scm pull-request create\nlinktitle: create\ntype: docs\ndescription: \"Creates a pull request\"\naliases:\n  - jx-scm_pull-request_create\n---\n\n### Usage\n\n```\njx scm pull-request create\n```\n\n### Synopsis\n\nCreates a pull request in the given repository, requesting the head branch be merged into the base branch\n\n### Examples\n\n  ```bash\n  # creates a pull request for a branch\n  jx-scm pull-request create \\\n  --owner foo \\\n  --name bar \\\n  --title \"chore: a good reason to merge\" \\\n  --body \"Useful details for reviewers\" \\\n  --head some-feature-branch \\\n  --base main\n  \n  # if pull request from head branch to base exists, updates the pr. otherwise creates the pr\n  jx-scm pull-request create \\\n  --owner foo \\\n  --name bar \\\n  --title \"chore: a good reason to merge\" \\\n  --body \"Some new reasons to merge\" \\\n  --head some-feature-branch \\\n  --base main \\\n  --allow-update\n\n  ```\n### Options\n\n```\n      --allow-update      if an open pull request from head branch to base branch exists, setting flag to true will update the pull request\n      --base string       the name of the branch you want the changes pulled into (default \"main\")\n      --body string       the contents of the pull request\n      --head string       the name of the branch where your changes are implemented\n  -h, --help              help for create\n  -k, --kind string       the kind of git server to use\n  -r, --name string       the name of the repository\n  -o, --owner string      the owner of the repository. Either an organisation or username. For Azure, include the project: 'organization/project'\n  -s, --server string     the git server URL to use\n      --title string      the title of the new pull request\n  -t, --token string      the token to use on the git server\n  -u, --username string   the user name to use on the git server\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/release/_index.md": "---\ntitle: jx scm release\nlinktitle: release\ntype: docs\ndescription: \"Commands for working with releases ***Aliases**: release*\"\naliases:\n  - jx-scm_release\n---\n\n### Usage\n\n```\njx scm release\n```\n\n### Synopsis\n\nCommands for working with releases\n\n### Options\n\n```\n  -h, --help   help for release\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/release/update/_index.md": "---\ntitle: jx scm release update\nlinktitle: update\ntype: docs\ndescription: \"Updates a release\"\naliases:\n  - jx-scm_release_update\n---\n\n### Usage\n\n```\njx scm release update\n```\n\n### Synopsis\n\nUpdate a release\n\n### Examples\n\n  ```bash\n  # updates a release to change the title\n  jx-scm release update --owner foo --repository bar --tag v1.2.3 --title something\n  \n  # updates a release to make it not a pre-release\n  jx-scm release update --owner foo --repository bar --tag v1.2.3 --pre-release false\n\n  ```\n### Options\n\n```\n      --description string   the updated release description\n  -h, --help                 help for update\n  -k, --kind string          the kind of git server to use\n  -r, --name string          the name of the repository to update\n  -o, --owner string         the owner of the repository to update. Either an organisation or username.  For Azure, include the project: 'organization/project'\n      --prerelease           the updated prerelease status, true to identify the release as a prerelease, false to identify the release as a full release. (default true)\n  -s, --server string        the git server URL to use\n      --tag string           the tag of the release to update\n      --title string         the updated release title\n  -t, --token string         the token to use on the git server\n  -u, --username string      the user name to use on the git server\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/repository/_index.md": "---\ntitle: jx scm repository\nlinktitle: repository\ntype: docs\ndescription: \"Commands for working with source repositories ***Aliases**: repo,repos,repositories*\"\naliases:\n  - jx-scm_repository\n---\n\n### Usage\n\n```\njx scm repository\n```\n\n### Synopsis\n\nCommands for working with source repositories\n\n### Options\n\n```\n  -h, --help   help for repository\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/repository/clone/_index.md": "---\ntitle: jx scm repository clone\nlinktitle: clone\ntype: docs\ndescription: \"Clones a git repository\"\naliases:\n  - jx-scm_repository_clone\n---\n\n### Usage\n\n```\njx scm repository clone\n```\n\n### Synopsis\n\nClones a git repository\n\n### Examples\n\n  ```bash\n  # creates a new git repository in the given server\n  jx-scm repository clone https://myserver.com/myowner/myrepo\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -h, --help               help for clone\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/repository/create/_index.md": "---\ntitle: jx scm repository create\nlinktitle: create\ntype: docs\ndescription: \"Creates a new git provider in a git server\"\naliases:\n  - jx-scm_repository_create\n---\n\n### Usage\n\n```\njx scm repository create\n```\n\n### Synopsis\n\nCreates a new git provider in a git server\n\n### Examples\n\n  ```bash\n  # creates a new git repository in the given server\n  jx-scm repository create --git-kind gitlab --git-server https://myserver.com --owner myuser --name myrepo\n  \n  # creates a new git repository using a URL\n  jx-scm repository create --git-kind gitlab https://mygitserver/myowner/myrepo\n\n  ```\n### Options\n\n```\n  -b, --batch-mode           Runs in batch mode without prompting for user input\n      --confirm              confirms creating the repository\n  -d, --description string   the repository description\n  -h, --help                 help for create\n      --home-page string     the repository home page\n  -k, --kind string          the kind of git server to use\n      --log-level string     Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --name string          the name of the repository to create\n  -o, --owner string         the owner of the repository to create. Either an organisation or username.  For Azure, include the project: 'organization/project'\n      --private              if the repository should be private\n      --push-host string     the git host to use when pushing to the git repository. Only really useful in BDD tests if using something like 'kubectl portforward' to access a git repository where you want to push from outside the cluster with a different host name to the host name used inside the cluster\n  -s, --server string        the git server URL to use\n      --template string      the git template repository to create the repository from\n  -t, --token string         the token to use on the git server\n  -u, --username string      the user name to use on the git server\n      --verbose              Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/repository/remove/_index.md": "---\ntitle: jx scm repository remove\nlinktitle: remove\ntype: docs\ndescription: \"Removes one or more repositories ***Aliases**: delete,rm*\"\naliases:\n  - jx-scm_repository_remove\n---\n\n### Usage\n\n```\njx scm repository remove\n```\n\n### Synopsis\n\nRemoves one or more repositories\n\n### Examples\n\n  ```bash\n  # removes all the repositories in the owner with the given filter\n  jx-scm repository remove --owner myuser -f mything\n  \n  # removes all the repositories in the owner created before the given time\n  jx-scm repository remove --owner myuser --created-before '02 Jan 06 15:04 MST'\n  \n  # removes all the repositories in the owner created 30 days ago\n  jx-scm repository remove --owner myuser --created-days-ago 30  --confirm\n\n  ```\n### Options\n\n```\n      --confirm                 confirms the removal without prompting the user\n      --created-before string   the time expression for removing repositories created before this time\n      --created-days-ago int    remove repositories created more than this number of days ago\n      --dry-run                 disables actually deleting the repository so you can test the filtering\n  -x, --exclude stringArray     the text filter to exclude\n      --fail-on-error           stops removing repositories if a remove failsg\n  -f, --filter stringArray      the text filter to match the name\n      --git-kind string         the kind of git server to connect to\n      --git-server string       the git server URL to create the scm client\n      --git-token string        the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string     the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                    help for remove\n  -n, --name string             the name of the repository to create\n  -o, --owner string            the owner of the repository to create. Either an organisation or username.  For Azure, include the project: 'organization/project'\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/scm/version/_index.md": "---\ntitle: jx scm version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-scm_version\n---\n\n### Usage\n\n```\njx scm version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-scm](https://github.com/jenkins-x-plugins/jx-scm)\n",
            "content/en/v3/develop/reference/jx/secret/_index.md": "---\ntitle: jx secret\nlinktitle: secret\ntype: docs\ndescription: \"commands for working with Secrets, ExternalSecrets and external secret stores\"\naliases:\n  - jx-secret\n---\n\n### Usage\n\n```\njx secret\n```\n\n### Synopsis\n\ncommands for working with Secrets, ExternalSecrets and external secret stores\n\n### Options\n\n```\n  -h, --help   help for jx-secret\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/convert/_index.md": "---\ntitle: jx secret convert\nlinktitle: convert\ntype: docs\ndescription: \"Converts Secret resources in the path to ExternalSecret resources so they can be checked into git ***Aliases**: secretmappings,sm,secretmapping*\"\naliases:\n  - jx-secret_convert\n---\n\n### Usage\n\n```\njx secret convert\n```\n\n### Synopsis\n\nConverts all Secret resources in the path to ExternalSecret resources so they can be checked into git\n\n### Examples\n\n  ```bash\n  # converts all the Secret resources into ExternalSecret resources so they can be checked into git\n  jx-secret convert --source-dir=config-root\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --default-namespace string    the default namespace if no namespace is specified in a Secret resource (default \"jx\")\n  -d, --dir string                  the directory to look for the secret mapping files and version stream (default \".\")\n      --helm-secrets-dir string     the directory where the helm secrets live with a folder per namespace and a file with a '.yaml' extension for each secret name. Defaults to $JX_HELM_SECRET_FOLDER\n  -h, --help                        help for convert\n      --invert-selector             inverts the effect of selector to exclude resources matched by selector\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --selector stringToString     adds Kubernetes label selector to filter on, e.g. --selector app=pusher-wave,heritage=Helm (default [])\n      --selector-target string      sets which path in the Kubernetes resources to select on instead of metadata.labels.\n      --source-dir string           the source directory to recursively look for the *.yaml or *.yml files to convert. If not specified defaults to 'config-root' in the dir\n  -m, --vault-mount-point string    the vault authentication mount point (default \"kubernetes\")\n  -r, --vault-role string           the vault role that will be used to fetch the secrets. This role will need to be bound to kubernetes-external-secret's ServiceAccount; see Vault's documentation: https://www.vaultproject.io/docs/auth/kubernetes.html (default \"jx-vault\")\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --version-stream-dir string   the directory containing the version stream. If not specified defaults to the 'versionStream' folder in the dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/convert/edit/_index.md": "---\ntitle: jx secret convert edit\nlinktitle: edit\ntype: docs\ndescription: \"Edits the local 'secret-mappings.yaml' file\"\naliases:\n  - jx-secret_convert_edit\n---\n\n### Usage\n\n```\njx secret convert edit\n```\n\n### Synopsis\n\nEdits the local 'secret-mappings.yaml' file\n\n### Examples\n\n  ```bash\n  # edits the local 'secret-mappings.yaml' file\n  jx-secret secretsmapping edit --gcp-project-id foo --cluster-name\n\n  ```\n### Options\n\n```\n      --dir string   base directory containing '.jx/secret/mapping/secret-mappings.yaml' file\n  -h, --help         help for edit\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/copy/_index.md": "---\ntitle: jx secret copy\nlinktitle: copy\ntype: docs\ndescription: \"Copies secrets with the given selector or name to a destination namespace\"\naliases:\n  - jx-secret_copy\n---\n\n### Usage\n\n```\njx secret copy\n```\n\n### Synopsis\n\nCopies secrets with the given selector or name to a destination namespace\n\n### Examples\n\n  ```bash\n  # copy secrets by label from the current namespace\n  jx secret copy --selector mylabel=cheese --to my-preview-ns\n  \n  # copy secrets by name from the current namespace\n  jx secret copy --name my-awesome-secret --to my-preview-ns%!(EXTRA string=jx-secret)\n\n  ```\n### Options\n\n```\n      --create-namespace    create the to Namespace if it does not already exist\n  -h, --help                help for copy\n      --ignore-missing-to   ignore this command if the target namespace does not exist\n      --name string         the name of the Secret to copy\n  -n, --ns string           the namespace to filter the Secret resources\n  -l, --selector string     the label selector to find the secrets to copy\n  -t, --to string           the namespace to copy the secrets to\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/edit/_index.md": "---\ntitle: jx secret edit\nlinktitle: edit\ntype: docs\ndescription: \"Edits secret values in the underlying secret stores for ExternalSecrets\"\naliases:\n  - jx-secret_edit\n---\n\n### Usage\n\n```\njx secret edit\n```\n\n### Synopsis\n\nEdits secret values in the underlying secret stores for ExternalSecrets\n\n### Examples\n\n  ```bash\n  # edit any missing mandatory secrets\n  jx-secret edit\n  \n  # edit any secrets with a given filter\n  jx-secret edit --filter nexus\n\n  ```\n### Options\n\n```\n      --all                     for interactive mode do you want to select all of the properties to edit by default. Otherwise none are selected and you choose to select the properties to change\n  -d, --dir string              the directory to look for the .jx/secret/mapping/secret-mappings.yaml file (default \".\")\n      --external-vault string   specify whether we are using external vault or not\n  -f, --filter string           filter on the Secret / ExternalSecret names to enter\n  -h, --help                    help for edit\n  -i, --interactive             interactive mode asks the user for the Secret name and the properties to edit\n  -m, --multiple                for interactive mode do you want to select multiple secrets to edit. If not defaults to just picking a single secret\n  -n, --ns string               the namespace to filter the ExternalSecret resources\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/plugins/_index.md": "---\ntitle: jx secret plugins\nlinktitle: plugins\ntype: docs\ndescription: \"Commands for working with Plugins ***Aliases**: plugin*\"\naliases:\n  - jx-secret_plugins\n---\n\n### Usage\n\n```\njx secret plugins\n```\n\n### Synopsis\n\nCommands for working with Plugins\n\n### Options\n\n```\n  -h, --help   help for plugins\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/plugins/upgrade/_index.md": "---\ntitle: jx secret plugins upgrade\nlinktitle: upgrade\ntype: docs\ndescription: \"Upgrades the binary plugins of the secret command (e.g. the Vault binary)\"\naliases:\n  - jx-secret_plugins_upgrade\n---\n\n### Usage\n\n```\njx secret plugins upgrade\n```\n\n### Synopsis\n\nUpgrades the binary plugins of the secret command (e.g. the vault binary)\n\n### Examples\n\n  ```bash\n  # upgrades the plugin binaries\n  jx upgrade\n\n  ```\n### Options\n\n```\n  -h, --help   help for upgrade\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/populate/_index.md": "---\ntitle: jx secret populate\nlinktitle: populate\ntype: docs\ndescription: \"Populates any missing secret values which can be automatically generated, generated using a template or that have default values\"\naliases:\n  - jx-secret_populate\n---\n\n### Usage\n\n```\njx secret populate\n```\n\n### Synopsis\n\nPopulates any missing secret values which can be automatically generated or that have default values\"\n\n### Examples\n\n  ```bash\n  jx-secret populate\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                     Runs in batch mode without prompting for user input\n      --boot-secret-namespace string   the namespace to that contains the boot secret used to populate git secrets from\n  -d, --dir string                     the directory to look for the .jx/secret/mapping/secret-mappings.yaml file (default \".\")\n  -f, --filter string                  the filter to filter on ExternalSecret names\n      --helm-secrets-dir string        the directory where the helm secrets live with a folder per namespace and a file with a '.yaml' extension for each secret name. Defaults to $JX_HELM_SECRET_FOLDER\n  -h, --help                           help for populate\n      --log-level string               Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --no-wait                        disables waiting for the secret store (e.g. vault) to be available\n  -n, --ns string                      the namespace to filter the ExternalSecret resources\n      --retries int                    Specify the number of times the command should be reattempted on failure (default 3)\n      --secret-namespace string        the namespace in which secret infrastructure resides such as Hashicorp Vault (default \"jx-vault\")\n  -s, --source string                  the source location for the ExternalSecrets, valid values include filesystem or kubernetes (default \"kubernetes\")\n      --verbose                        Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n  -w, --wait duration                  the maximum time period to wait for the vault pod to be ready if using the vault backendType (default 2h0m0s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/replicate/_index.md": "---\ntitle: jx secret replicate\nlinktitle: replicate\ntype: docs\ndescription: \"Replicates the given ExternalSecret resources into other Environments or Namespaces\"\naliases:\n  - jx-secret_replicate\n---\n\n### Usage\n\n```\njx secret replicate\n```\n\n### Synopsis\n\nReplicates the given ExternalSecret resources into other Environments or Namespaces\n\n### Examples\n\n  ```bash\n  # replicates the labeled ExternalSecret resources to the local permanent Environment namespaces (e.g. Staging and Production)\n  jx-secret replicate --label secret.jenkins-x.io/replica-source=true\n  \n  # replicates the ExternalSecret resources to the local Environments\n  jx-secret replicate --name=mysecretname --to jx-staging,jx-production\n\n  ```\n### Options\n\n```\n  -b, --batch-mode          Runs in batch mode without prompting for user input\n  -f, --file string         the ExternalSecret to replicate (default \"t\")\n      --from string         one or more Namespaces to replicate the ExternalSecret from\n  -h, --help                help for replicate\n      --log-level string    Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --name stringArray    specifies the names of the ExternalSecrets to replicate if not using a selector\n  -o, --output-dir string   the output directory which defaults to 'config-root' in the directory\n  -s, --selector string     defines the label selector to find the ExternalSecret resources to replicate\n  -t, --to stringArray      one or more Namespaces to replicate the ExternalSecret to\n      --verbose             Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/vault/_index.md": "---\ntitle: jx secret vault\nlinktitle: vault\ntype: docs\ndescription: \"Commands for working with Vault\"\naliases:\n  - jx-secret_vault\n---\n\n### Usage\n\n```\njx secret vault\n```\n\n### Synopsis\n\nCommands for working with Vault\n\n### Options\n\n```\n  -h, --help   help for vault\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/vault/portforward/_index.md": "---\ntitle: jx secret vault portforward\nlinktitle: portforward\ntype: docs\ndescription: \"Runs a port forward process so you can access the vault in a kubernetes cluster ***Aliases**: portfwd,port-forward*\"\naliases:\n  - jx-secret_vault_portforward\n---\n\n### Usage\n\n```\njx secret vault portforward\n```\n\n### Synopsis\n\nRuns a port forward process so you can access the vault in a kubernetes cluster\n\n### Examples\n\n  ```bash\n  jx-secret vault portforward\n\n  ```\n### Options\n\n```\n  -d, --duration duration   the maximum time period to wait for vault to be ready (default 5m0s)\n  -h, --help                help for portforward\n  -n, --ns string           the namespace where vault is running (default \"jx-vault\")\n  -p, --pod string          the name of the vault pod which needs to be running before the port forward can take place (default \"vault-0\")\n      --poll duration       the polling period to check if the secrets are valid (default 2s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/vault/shell/_index.md": "---\ntitle: jx secret vault shell\nlinktitle: shell\ntype: docs\ndescription: \"Runs a shell so you can access the vault in a kubernetes cluster ***Aliases**: sh*\"\naliases:\n  - jx-secret_vault_shell\n---\n\n### Usage\n\n```\njx secret vault shell\n```\n\n### Synopsis\n\nRuns a shell so you can access the vault in a kubernetes cluster\n\n### Examples\n\n  ```bash\n  jx-secret vault shell\n  \n  jx-secret vault shell bash\n  \n  jx-secret vault shell -- bash -i\n\n  ```\n### Options\n\n```\n  -d, --duration duration   the maximum time period to wait for vault to be ready (default 5m0s)\n  -h, --help                help for shell\n  -n, --ns string           the namespace where vault is running (default \"jx-vault\")\n  -p, --pod string          the name of the vault pod which needs to be running before the port forward can take place (default \"vault-0\")\n      --poll duration       the polling period to check if the secrets are valid (default 2s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/vault/wait/_index.md": "---\ntitle: jx secret vault wait\nlinktitle: wait\ntype: docs\ndescription: \"Waits for vault to be ready for use\"\naliases:\n  - jx-secret_vault_wait\n---\n\n### Usage\n\n```\njx secret vault wait\n```\n\n### Synopsis\n\nWaits for vault to be ready for use\n\n### Examples\n\n  ```bash\n  jx-secret vault wait\n\n  ```\n### Options\n\n```\n  -d, --duration duration   the maximum time period to wait for vault to be ready (default 5m0s)\n  -h, --help                help for wait\n  -n, --ns string           the namespace where vault is running (default \"jx-vault\")\n  -p, --pod string          the name of the vault pod which needs to be running before the port forward can take place (default \"vault-0\")\n      --poll duration       the polling period to check if the secrets are valid (default 2s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/verify/_index.md": "---\ntitle: jx secret verify\nlinktitle: verify\ntype: docs\ndescription: \"Verifies that the ExternalSecret resources have the required properties populated in the underlying secret storage ***Aliases**: get*\"\naliases:\n  - jx-secret_verify\n---\n\n### Usage\n\n```\njx secret verify\n```\n\n### Synopsis\n\nVerifies that the ExternalSecret resources have the required properties populated in the underlying secret storage\n\n### Examples\n\n  ```bash\n  jx-secret verify\n\n  ```\n### Options\n\n```\n  -b, --batch-mode         Runs in batch mode without prompting for user input\n  -f, --filter string      the filter to filter on ExternalSecret names\n  -h, --help               help for verify\n      --log-level string   Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string   the namespace to filter the ExternalSecret resources\n  -s, --source string      the source location for the ExternalSecrets, valid values include filesystem or kubernetes (default \"kubernetes\")\n      --verbose            Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/version/_index.md": "---\ntitle: jx secret version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-secret_version\n---\n\n### Usage\n\n```\njx secret version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/secret/wait/_index.md": "---\ntitle: jx secret wait\nlinktitle: wait\ntype: docs\ndescription: \"Waits for the mandatory Secrets to be populated from their External Secrets\"\naliases:\n  - jx-secret_wait\n---\n\n### Usage\n\n```\njx secret wait\n```\n\n### Synopsis\n\nWaits for the mandatory Secrets to be populated from their External Secrets\n\n### Examples\n\n  ```bash\n  jx-secret wait\n\n  ```\n### Options\n\n```\n  -h, --help               help for wait\n  -n, --ns string          the namespace to filter the ExternalSecret resources\n  -p, --poll duration      the polling period to check if the secrets are valid (default 2s)\n  -t, --timeout duration   the maximum amount of time to wait for the secrets to be valid (default 30m0s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-secret](https://github.com/jenkins-x-plugins/jx-secret)\n",
            "content/en/v3/develop/reference/jx/tap/_index.md": "---\ntitle: jx tap\nlinktitle: tap\ntype: docs\ndescription: \"commands for processing TAP (Test Anything Protocol) files\"\naliases:\n  - jx-tap\n---\n\n### Usage\n\n```\njx tap\n```\n\n### Synopsis\n\ncommands for processing TAP (Test Anything Protocol) files\n\n### Options\n\n```\n  -h, --help   help for jx-tap\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tap](https://github.com/jenkins-x-plugins/jx-tap)\n",
            "content/en/v3/develop/reference/jx/tap/run/_index.md": "---\ntitle: jx tap run\nlinktitle: run\ntype: docs\ndescription: \"Processes the .tap files generated by a pipeline\"\naliases:\n  - jx-tap_run\n---\n\n### Usage\n\n```\njx tap run\n```\n\n### Synopsis\n\nProcesses the .tap files generated by a pipeline\n\n### Examples\n\n  ```bash\n  # processes the generated tap files\n  jx tap run%!(EXTRA string=jx-tap)\n\n  ```\n### Options\n\n```\n  -b, --batch-mode                   Runs in batch mode without prompting for user input\n  -d, --dir string                   The directory to scan for *.tap files (default \".\")\n  -h, --help                         help for run\n      --html                         generates HTML rather than commenting on the Pull Request\n      --log-level string             Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string             The namespace. Defaults to the current namespace\n      --verbose                      Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --write-log-timeout duration   The timeout for writing pipeline logs to the bucket (default 30m0s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tap](https://github.com/jenkins-x-plugins/jx-tap)\n",
            "content/en/v3/develop/reference/jx/tap/version/_index.md": "---\ntitle: jx tap version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-tap_version\n---\n\n### Usage\n\n```\njx tap version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tap](https://github.com/jenkins-x-plugins/jx-tap)\n",
            "content/en/v3/develop/reference/jx/tekton-to-actions/_index.md": "---\ntitle: jx tekton-to-actions\nlinktitle: tekton-to-actions\ntype: docs\ndescription: \"commands for converting tekton pipelines to github actions\"\naliases:\n  - jx-tekton-to-actions\n---\n\n### Usage\n\n```\njx tekton to actions\n```\n\n### Synopsis\n\ncommands for converting tekton pipelines to github actions\n\n### Options\n\n```\n  -h, --help   help for jx-tekton-to-actions\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tekton-to-actions](https://github.com/jenkins-x-plugins/jx-tekton-to-actions)\n",
            "content/en/v3/develop/reference/jx/tekton-to-actions/convert/_index.md": "---\ntitle: jx tekton-to-actions convert\nlinktitle: convert\ntype: docs\ndescription: \"Converts tekton pipelines to github actions ***Aliases**: kill*\"\naliases:\n  - jx-tekton-to-actions_convert\n---\n\n### Usage\n\n```\njx tekton to actions convert\n```\n\n### Synopsis\n\nConverts tekton pipelines to github actions\n\n### Examples\n\n  ```bash\n  # Converts the tekton pipelines to actions\n  jx tekton-to-actions convert\n\n  ```\n### Options\n\n```\n  -d, --dir string                  The directory to look for the .lighthouse folder (default \".\")\n  -h, --help                        help for convert\n      --main-branches stringArray   The main branches for releases (default [main,master])\n  -o, --output-dir string           The directory to write output files\n  -p, --path string                 The relative path to dir to look for lighthouse files\n  -r, --recursive                   Recursively find all '.lighthouse' folders such as if linting a Pipeline Catalog\n      --remove-steps stringArray    The steps to remove (default [git-clone,setup-builder-home,git-merge])\n      --runs-on string              The machine this runs on (default \"ubuntu-latest\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tekton-to-actions](https://github.com/jenkins-x-plugins/jx-tekton-to-actions)\n",
            "content/en/v3/develop/reference/jx/tekton-to-actions/version/_index.md": "---\ntitle: jx tekton-to-actions version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-tekton-to-actions_version\n---\n\n### Usage\n\n```\njx tekton to actions version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-tekton-to-actions](https://github.com/jenkins-x-plugins/jx-tekton-to-actions)\n",
            "content/en/v3/develop/reference/jx/test/_index.md": "---\ntitle: jx test\nlinktitle: test\ntype: docs\ndescription: \"Test commands\"\naliases:\n  - jx-test\n---\n\n### Usage\n\n```\njx test\n```\n\n### Synopsis\n\nTest commands\n\n### Options\n\n```\n  -h, --help   help for jx-test\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-test](https://github.com/jenkins-x-plugins/jx-test)\n",
            "content/en/v3/develop/reference/jx/test/create/_index.md": "---\ntitle: jx test create\nlinktitle: create\ntype: docs\ndescription: \"Create a new TestRun resource to record the test case resources\"\naliases:\n  - jx-test_create\n---\n\n### Usage\n\n```\njx test create\n```\n\n### Synopsis\n\nGarbage collects test resources\n\n### Examples\n\n  ```bash\n  jx-test create --test-url https://github.com/myorg/mytest.git\n\n  ```\n### Options\n\n```\n      --app string           the name of the app. Defaults to $APP_NAME\n      --branch string        the branch used in the pipeline. Defaults to $BRANCH_NAME\n      --build string         the build number. Defaults to $BUILD_NUMBER\n      --context string       the pipeline context. Defaults to $JOB_NAME\n  -e, --env stringArray      specifies env vars of the form name=value\n      --env-pattern string   the regular expression for environment variables to automatically include (default \"TF_.*\")\n  -f, --file string          the template file to create\n  -h, --help                 help for create\n      --log                  logs the generated resource before applying it (default true)\n      --name-prefix string   the resource name prefix (default \"tf-\")\n      --no-delete            disables deleting of the test resource after the job has completed successfully\n      --no-watch-job         disables watching of the job created by the resource\n      --owner string         the owner of the repository. Defaults to $REPO_OWNER\n      --pr int               the Pull Request number. Defaults to $PULL_NUMBER\n      --pull-sha string      the Pull Request git SHA. Defaults to $PULL_PULL_SHA\n      --repo string          the name of the repository. Defaults to $REPO_NAME\n      --type string          the pipeline type. e.g. presubmit or postsubmit. Defaults to $JOB_TYPE\n      --verify-result        verifies the output of the boot job to ensure it succeeded\n      --version string       the version number. Defaults to $VERSION (default \"2.0.1300-dev\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-test](https://github.com/jenkins-x-plugins/jx-test)\n",
            "content/en/v3/develop/reference/jx/test/gc/_index.md": "---\ntitle: jx test gc\nlinktitle: gc\ntype: docs\ndescription: \"Garbage collects test resources\"\naliases:\n  - jx-test_gc\n---\n\n### Usage\n\n```\njx test gc\n```\n\n### Synopsis\n\nGarbage collects test resources\n\n### Examples\n\n  ```bash\n  jx-test gc\n\n  ```\n### Options\n\n```\n  -d, --duration duration   The maximum age of a Terraform resource before it is garbage collected (default 2h0m0s)\n  -h, --help                help for gc\n  -n, --ns string           the namespace to query the Terraform resources\n  -l, --selector string     the selector to find the Terraform resources to remove (default \"kind=jx-test\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-test](https://github.com/jenkins-x-plugins/jx-test)\n",
            "content/en/v3/develop/reference/jx/test/version/_index.md": "---\ntitle: jx test version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-test_version\n---\n\n### Usage\n\n```\njx test version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-test](https://github.com/jenkins-x-plugins/jx-test)\n",
            "content/en/v3/develop/reference/jx/updatebot/_index.md": "---\ntitle: jx updatebot\nlinktitle: updatebot\ntype: docs\ndescription: \"commands for creating Pull Requests on repositories when versions change\"\naliases:\n  - jx-updatebot\n---\n\n### Usage\n\n```\njx updatebot\n```\n\n### Synopsis\n\ncommands for creating Pull Requests on repositories when versions change\n\n### Options\n\n```\n  -h, --help   help for jx-updatebot\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/argo/_index.md": "---\ntitle: jx updatebot argo\nlinktitle: argo\ntype: docs\ndescription: \"Commands for working with ArgoCD git repositories ***Aliases**: argocd*\"\naliases:\n  - jx-updatebot_argo\n---\n\n### Usage\n\n```\njx updatebot argo\n```\n\n### Synopsis\n\nCommands for working with ArgoCD git repositories\n\n### Options\n\n```\n  -h, --help   help for argo\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/argo/promote/_index.md": "---\ntitle: jx updatebot argo promote\nlinktitle: promote\ntype: docs\ndescription: \"Promotes a new Application or ApplicationSet version in an ArgoCD git repository\"\naliases:\n  - jx-updatebot_argo_promote\n---\n\n### Usage\n\n```\njx updatebot argo promote\n```\n\n### Synopsis\n\nPromotes a new Application or ApplicationSet version in an ArgoCD git repository \n\nThis command will use the source git repository URL and version to find the ArgoCD Application or ApplicationSet resource in the target git URL and create a Pull Request if the version is different. This lets you push promotion pull requests into ArgoCD repositories as part of your CI release pipeline. \n\nYou can get the examples in the directory pkg/cmd/argo/promote/test _data/simple\n\n### Examples\n\n  ```bash\n  # lets use the $VERSION env var or a VERSION file in the current dir\n  jx updatebot argo promote --target-git-url https://github.com/myorg/my-argo-repo.git\n  \n  # lets promote a specific version in the current git clone to a remote repo\n  jx updatebot argo promote --version v1.2.3 --target-git-url https://github.com/myorg/my-argo-repo.git\n  \n  # lets promote a specific version of the given spec.source.repoURL (--source-git-url)\n  jx updatebot argo promote --version v1.2.3 --source-git-url https://github.com/myorg/my-chart-repo.git --target-git-url https://github.com/myorg/my-argo-repo.git\n\n  ```\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n  -d, --dir string                  the directory look for the VERSION file (default \".\")\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for promote\n      --labels strings              a list of labels to apply to the PR (default [promote])\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title (default \"chore: upgrade the cluster git repository from the version stream\")\n      --source-git-url string       the source repo git URL to upgrade the version\n      --target-git-url string       the target git URL to create a Pull Request on\n      --version string              the version number to promote. If not specified uses $VERSION or the version file\n      --version-file string         the file to load the version from if not specified directly or via a $VERSION environment variable. Defaults to VERSION in the current dir\n      --version-prefix string       the prefix added to the version number that will be used in the Argo CD Application or ApplicationSet YAML if --version option is not specified and the version is defaulted from $VERSION or the VERSION file (default \"v\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/argo/sync/_index.md": "---\ntitle: jx updatebot argo sync\nlinktitle: sync\ntype: docs\ndescription: \"Synchronizes some or all applications in an ArgoCD git repository to reduce version drift\"\naliases:\n  - jx-updatebot_argo_sync\n---\n\n### Usage\n\n```\njx updatebot argo sync\n```\n\n### Synopsis\n\nSynchronizes some or all applications in an ArgoCD git repository to reduce version drift \n\nCreates a Pull Request on the target GitOps repository.\n\n### Examples\n\n  ```bash\n  # create a Pull Request if any of the versions in the current directory are newer than the target repo\n  jx updatebot argo sync --target-git-url https://github.com/myorg/my-production-repo\n  \n  # create a Pull Request if any of the versions are out of sync\n  jx updatebot argo sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo\n  \n  # create a Pull Request if any of the versions are out of sync including only the given repo URL strings\n  jx updatebot argo sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo --repourl-includes wine  --repourl-includes beer\n  \n  # create a Pull Request if any of the versions are out of sync excluding the given repo URL strings\n  jx updatebot argo sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo --repourl-excludes water\n\n  ```\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green (default true)\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n      --git-credentials             ensures the git credentials are setup so we can push to git\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-user-email string       the user email to git commit\n      --git-user-name string        the user name to git commit\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for sync\n      --labels strings              a list of labels to apply to the PR\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --path-exclude strings        text strings in the path of the helm chart to be excluded when synchronising\n      --path-include strings        text strings in the path of the helm chart to be included when synchronising\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title\n      --repourl-exclude strings     text strings in the repository URL to be excluded when synchronising\n      --repourl-include strings     text strings in the repository URL to be included when synchronising\n      --source-dir string           the directory to use for the git clone for the source\n      --source-git-url string       git URL to clone for the source\n      --target-dir string           the directory to use for the git clone for the target\n      --target-git-url string       git URL to clone for the target\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/environment/_index.md": "---\ntitle: jx updatebot environment\nlinktitle: environment\ntype: docs\ndescription: \"Creates a Pull Request to upgrade the environment git repository from the version stream ***Aliases**: env*\"\naliases:\n  - jx-updatebot_environment\n---\n\n### Usage\n\n```\njx updatebot environment\n```\n\n### Synopsis\n\nCreates a Pull Request to upgrade the environment git repository from the version stream\n\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n  -e, --env string                  the name of the environment to upgrade. If no environment is named then all git repositories for all environments are upgraded\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-setup                   should we setup git first so that we can create Pull Requests\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for environment\n      --labels strings              a list of labels to apply to the PR (default [jx-boot-upgrade])\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title (default \"chore: upgrade the cluster git repository from the version stream\")\n  -s, --strategy string             the 'kpt' strategy to use. To see available strategies type 'kpt pkg update --help'. Typical values are: resource-merge, fast-forward, alpha-git-patch, force-delete-replace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/flux/_index.md": "---\ntitle: jx updatebot flux\nlinktitle: flux\ntype: docs\ndescription: \"Commands for working with FluxCD git repositories ***Aliases**: fluxcd*\"\naliases:\n  - jx-updatebot_flux\n---\n\n### Usage\n\n```\njx updatebot flux\n```\n\n### Synopsis\n\nCommands for working with FluxCD git repositories\n\n### Options\n\n```\n  -h, --help   help for flux\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/flux/promote/_index.md": "---\ntitle: jx updatebot flux promote\nlinktitle: promote\ntype: docs\ndescription: \"Promotes a new HelmRelease version in a FluxCD git repository\"\naliases:\n  - jx-updatebot_flux_promote\n---\n\n### Usage\n\n```\njx updatebot flux promote\n```\n\n### Synopsis\n\nPromotes a new HelmRelease version in a FluxCD git repository \n\nThis command will use the given chart name and version along with an optional sourceRefName of the helm or git repository or bucket to find the HelmRelease resource in the target git repository and create a Pull Request if the version is different. This lets you push promotion pull requests into FluxCD repositories as part of your CI release pipeline. \n\nIf you don't supply a version the $VERSION or VERSION file will be used. If you don't supply a chart the current folder name is used.\n\n### Examples\n\n  ```bash\n  # lets promote a specific version of a chart with a source ref (repository) name to a git repo\n  jx updatebot flux promote --version v1.2.3 --chart mychart --source-ref-name myrepo --target-git-url https://github.com/myorg/my-flux-repo.git\n  \n  # lets use the $VERSION env var or a VERSION file in the current dir and detect the chart name from the current folder\n  jx updatebot flux promote --target-git-url https://github.com/myorg/my-flux-repo.git\n\n  ```\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green\n  -c, --chart string                the name of the chart to promote. If not specified defaults to the current directory name\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n  -d, --dir string                  the directory look for the VERSION file (default \".\")\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for promote\n      --labels strings              a list of labels to apply to the PR (default [promote])\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title (default \"chore: upgrade the cluster git repository from the version stream\")\n      --source-ref-name string      the source ref name of the HelmRepository, GitRepository or Bucket containing the helm chart\n      --target-git-url string       the target git URL to create a Pull Request on\n      --version string              the version number to promote. If not specified uses $VERSION or the version file\n      --version-file string         the file to load the version from if not specified directly or via a $VERSION environment variable. Defaults to VERSION in the current dir\n      --version-prefix string       the prefix added to the version number that will be used in the Flux CD Application YAML if --version option is not specified and the version is defaulted from $VERSION or the VERSION file (default \"v\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/flux/sync/_index.md": "---\ntitle: jx updatebot flux sync\nlinktitle: sync\ntype: docs\ndescription: \"Synchronizes some or all HelmRelease versions in an FluxCD git repository to reduce version drift\"\naliases:\n  - jx-updatebot_flux_sync\n---\n\n### Usage\n\n```\njx updatebot flux sync\n```\n\n### Synopsis\n\nSynchronizes some or all HelmRelease versions in an FluxCD git repository to reduce version drift \n\nCreates a Pull Request on the target GitOps repository.\n\n### Examples\n\n  ```bash\n  # create a Pull Request if any of the versions in the current directory are newer than the target repo\n  jx updatebot flux sync --target-git-url https://github.com/myorg/my-production-repo\n  \n  # create a Pull Request if any of the versions are out of sync\n  jx updatebot flux sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo\n  \n  # create a Pull Request if any of the versions are out of sync including only the given repo URL strings\n  jx updatebot flux sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo --repourl-includes wine  --repourl-includes beer\n  \n  # create a Pull Request if any of the versions are out of sync excluding the given repo URL strings\n  jx updatebot flux sync --source-git-url https://github.com/myorg/my-staging-repo --target-git-url https://github.com/myorg/my-production-repo --repourl-excludes water\n\n  ```\n### Options\n\n```\n      --auto-merge                        should we automatically merge if the PR pipeline is green (default true)\n  -b, --batch-mode                        Runs in batch mode without prompting for user input\n      --chart-exclude strings             text strings in the chart name to be excluded when synchronising\n      --chart-include strings             text strings in the chart name to be included when synchronising\n      --commit-message string             the commit message\n      --commit-title string               the commit title\n      --git-credentials                   ensures the git credentials are setup so we can push to git\n      --git-kind string                   the kind of git server to connect to\n      --git-server string                 the git server URL to create the scm client\n      --git-token string                  the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-user-email string             the user email to git commit\n      --git-user-name string              the user name to git commit\n      --git-username string               the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                              help for sync\n      --labels strings                    a list of labels to apply to the PR\n      --log-level string                  Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --pull-request-body string          the PR body\n      --pull-request-title string         the PR title\n      --source-dir string                 the directory to use for the git clone for the source\n      --source-git-url string             git URL to clone for the source\n      --source-ref-name-exclude strings   text strings in the the sourceRef name of the chart repository or bucket to be excluded when synchronising\n      --source-ref-name-include strings   text strings in the the sourceRef name of the chart repository or bucket to be included when synchronising\n      --target-dir string                 the directory to use for the git clone for the target\n      --target-git-url string             git URL to clone for the target\n      --verbose                           Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/pipeline/_index.md": "---\ntitle: jx updatebot pipeline\nlinktitle: pipeline\ntype: docs\ndescription: \"Upgrades the pipelines in the source repositories to the latest version stream and pipeline catalog ***Aliases**: pipelines*\"\naliases:\n  - jx-updatebot_pipeline\n---\n\n### Usage\n\n```\njx updatebot pipeline\n```\n\n### Synopsis\n\nUpgrades the pipelines in the source repositories to the latest version stream and pipeline catalog\n\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green (default true)\n      --bin string                  the 'kpt' binary name to use. If not specified this command will download the jx binary plugin into ~/.jx3/plugins/bin and use that\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n  -c, --config string               the configuration file to load for the repository configurations. If not specified we look in .jx/gitops/source-repositories.yaml\n  -d, --dir string                  the directory look for the 'jx-requirements.yml` file (default \".\")\n  -f, --filter string               the text filter to filter out repositories to upgrade\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for pipeline\n      --no-convert                  disables converting from Kptfile based pipelines to the uses:sourceURI notation for reusing pipelines across repositories\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title\n  -s, --strategy string             the 'kpt' strategy to use. To see available strategies type 'kpt pkg update --help'. Typical values are: resource-merge, fast-forward, alpha-git-patch, force-delete-replace (default \"resource-merge\")\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/pr/_index.md": "---\ntitle: jx updatebot pr\nlinktitle: pr\ntype: docs\ndescription: \"Create a Pull Request on each downstream repository\"\naliases:\n  - jx-updatebot_pr\n---\n\n### Usage\n\n```\njx updatebot pr\n```\n\n### Synopsis\n\nCreate a Pull Request on each downstream repository\n\n### Examples\n\n  ```bash\n  jx-updatebot pr --test-url https://github.com/myorg/mytest.git\n\n  ```\n### Options\n\n```\n      --add-changelog string         a file to take a changelog from to add to the pullr equest body. Typically a file generated by jx changelog.\n  -a, --app string                   the Application to promote. Used for informational purposes\n      --auto-merge                   should we automatically merge if the PR pipeline is green (default true)\n  -b, --base-branch-name string      the base branch name to use for new pull requests\n      --changelog-separator string   the separator to use between commit message and changelog in the pull request body. Default to ----- or if set the CHANGELOG_SEPARATOR environment variable\n      --commit-message string        the commit message\n      --commit-title string          the commit title\n  -c, --config-file string           the updatebot config file. If none specified defaults to .jx/updatebot.yaml\n  -d, --dir string                   the directory look for the VERSION file (default \".\")\n      --git-credentials              ensures the git credentials are setup so we can push to git\n      --git-kind string              the kind of git server to connect to\n      --git-server string            the git server URL to create the scm client\n      --git-token string             the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-user-email string        the user email to git commit\n      --git-user-name string         the user name to git commit\n      --git-username string          the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                         help for pr\n      --labels strings               a list of labels to apply to the PR\n      --no-version                   disables validation on requiring a '--version' option or environment variable to be required\n      --pull-request-body string     the PR body\n      --pull-request-title string    the PR title\n      --version string               the version number to promote. If not specified uses $VERSION or the version file\n      --version-file string          the file to load the version from if not specified directly or via a $VERSION environment variable. Defaults to VERSION in the current dir\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/sync/_index.md": "---\ntitle: jx updatebot sync\nlinktitle: sync\ntype: docs\ndescription: \"Synchronizes some or all applications in an environment/namespace to another environment/namespace to reduce version drift\"\naliases:\n  - jx-updatebot_sync\n---\n\n### Usage\n\n```\njx updatebot sync\n```\n\n### Synopsis\n\nSynchronizes some or all applications in an environment/namespace to another environment/namespace to reduce version drift \n\nSupports synchronizing environments or namespaces within the same cluster or namespaces between remote clusters (possibly using different namespaces). \n\nCreate a Pull Request on the target GitOps repository to apply the changes so that you can review the changes before they happen. You can use different labels to enable/disable auto-merging.\n\n### Examples\n\n  ```bash\n  # choose the environments to synchronize\n  jx updatebot sync\n  \n  # synchronizes the apps in 2 of your environments (local or remote)\n  jx updatebot sync --source-env staging --target-env production\n  \n  # synchronizes the apps in 2 namespaces in the dev cluster\n  jx updatebot sync --source-ns jx-staging --target-ns jx-production\n  \n  \n  # synchronizes the edam and beer charts in 2 of your environments (local or remote)\n  jx updatebot sync --source-env staging --target-env production --charts edam --charts beer\n\n  ```\n### Options\n\n```\n      --auto-merge                  should we automatically merge if the PR pipeline is green (default true)\n  -b, --batch-mode                  Runs in batch mode without prompting for user input\n      --charts strings              names of charts to filter resources to sync. Can be local chart name (without prefix) or the full name with prefix\n      --commit-message string       the commit message\n      --commit-title string         the commit title\n      --git-credentials             ensures the git credentials are setup so we can push to git\n      --git-kind string             the kind of git server to connect to\n      --git-server string           the git server URL to create the scm client\n      --git-token string            the git token used to operate on the git repository. If not specified it's loaded from the git credentials file\n      --git-user-email string       the user email to git commit\n      --git-user-name string        the user name to git commit\n      --git-username string         the git username used to operate on the git repository. If not specified it's loaded from the git credentials file\n  -h, --help                        help for sync\n      --labels strings              a list of labels to apply to the PR\n      --log-level string            Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --namespaces strings          a list of namespaces to filter resources to sync\n      --no-version                  disables validation on requiring a '--version' option or environment variable to be required\n      --pull-request-body string    the PR body\n      --pull-request-title string   the PR title\n      --source-dir string           the directory to use for the git clone for the source\n      --source-env string           the environment name for the source\n      --source-git-url string       git URL to clone for the source\n      --source-helmfile string      the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the git clone dir\n      --source-ns string            the namespace for the source\n      --target-dir string           the directory to use for the git clone for the target\n      --target-env string           the environment name for the target\n      --target-git-url string       git URL to clone for the target\n      --target-helmfile string      the helmfile to resolve. If not specified defaults to 'helmfile.yaml' in the git clone dir\n      --target-ns string            the namespace for the target\n      --update-only                 only update versions in the target environment/namespace - do not add any new charts that are missing\n      --verbose                     Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/updatebot/version/_index.md": "---\ntitle: jx updatebot version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-updatebot_version\n---\n\n### Usage\n\n```\njx updatebot version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-updatebot](https://github.com/jenkins-x-plugins/jx-updatebot)\n",
            "content/en/v3/develop/reference/jx/verify/_index.md": "---\ntitle: jx verify\nlinktitle: verify\ntype: docs\ndescription: \"commands for verifying Jenkins X environments\"\naliases:\n  - jx-verify\n---\n\n### Usage\n\n```\njx verify\n```\n\n### Synopsis\n\ncommands for verifying Jenkins X environments\n\n### Options\n\n```\n  -h, --help   help for jx-verify\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/context/_index.md": "---\ntitle: jx verify context\nlinktitle: context\ntype: docs\ndescription: \"Verifies the current kubernetes context matches a given name ***Aliases**: ctx*\"\naliases:\n  - jx-verify_context\n---\n\n### Usage\n\n```\njx verify context\n```\n\n### Synopsis\n\nVerifies the current kubernetes context matches a given name\n\n### Examples\n\n  ```bash\n  # populate the pods don't have missing images\n  jx verify context -c \"gke_$PROJECT_ID-bdd_$REGION_$CLUSTER_NAME\"%!(EXTRA string=jx-verify)\n\n  ```\n### Options\n\n```\n  -c, --context string   The kubernetes context to match against\n  -h, --help             help for context\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/ingress/_index.md": "---\ntitle: jx verify ingress\nlinktitle: ingress\ntype: docs\ndescription: \"Verifies the ingress configuration defaulting the ingress domain if necessary\"\naliases:\n  - jx-verify_ingress\n---\n\n### Usage\n\n```\njx verify ingress\n```\n\n### Synopsis\n\nVerifies the ingress configuration defaulting the ingress domain if necessary\n\n### Examples\n\n  ```bash\n  # populate the ingress domain if not using a configured 'ingress.domain' setting\n  jx verify ingress\n\n  ```\n### Options\n\n```\n  -d, --dir string                 the directory to look for the values.yaml file (default \".\")\n  -h, --help                       help for ingress\n      --ingress-namespace string   The namespace for the Ingress controller. If not specified it defaults to $JX_INGRESS_NAMESPACE. Otherwise it defaults to: nginx\n      --ingress-service string     The name of the Ingress controller Service. If not specified it defaults to $JX_INGRESS_SERVICE. Otherwise it defaults to: ingress-nginx-controller\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/install/_index.md": "---\ntitle: jx verify install\nlinktitle: install\ntype: docs\ndescription: \"Verifies the installation is ready\"\naliases:\n  - jx-verify_install\n---\n\n### Usage\n\n```\njx verify install\n```\n\n### Synopsis\n\nVerifies the installation is ready\n\n### Examples\n\n  ```bash\n  # populate the ingress domain if not using a configured 'ingress.domain' setting\n  jx verify install%!(EXTRA string=jx-verify)\n\n  ```\n### Options\n\n```\n  -b, --batch-mode               Runs in batch mode without prompting for user input\n  -h, --help                     help for install\n      --include-build            Include build pods\n      --log-level string         Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n  -n, --namespace string         if not specified uses the default namespace\n  -w, --pod-wait-time duration   The default wait time to wait for the pods to be ready (default 2m0s)\n  -p, --poll duration            The period between polls (default 10s)\n  -l, --selector string          Custom selector (label query) for pods\n      --verbose                  Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/job/_index.md": "---\ntitle: jx verify job\nlinktitle: job\ntype: docs\ndescription: \"Verifies that the job(s) with the given label succeeds and tails the log as it executes ***Aliases**: logs*\"\naliases:\n  - jx-verify_job\n---\n\n### Usage\n\n```\njx verify job\n```\n\n### Synopsis\n\nVerifies that the job(s) with the given label succeeds and tails the log as it executes\n\n### Examples\n\n  ```bash\n  # verify the BDD job succeeds\n  jx verify job -l app=jx-bdd\n  \n  # verify the BDD job succeeds using name\n  jx verify job --name jx-bdd\n\n  ```\n### Options\n\n```\n  -b, --batch-mode              Runs in batch mode without prompting for user input\n  -c, --container string        the name of the container in the job to log\n  -d, --duration duration       how long to wait for a Job to be active and a Pod to be ready (default 1h0m0s)\n  -f, --field-selector string   the field selector to use to query jobs\n  -h, --help                    help for job\n      --log-fail                rather than failing the command lets just log that the job failed. e.g. this lets us run tests inside a Terraform Pod without the terraform operator thinking the terraform failed.\n      --log-level string        Sets the logging level. If not specified defaults to $JX_LOG_LEVEL\n      --name string             the name of the job to use\n  -n, --namespace string        the namespace where the jobs run. If not specified it will look in: jx-git-operator and jx\n      --poll duration           duration between polls for an active Job or Pod (default 1s)\n  -l, --selector string         the selector of the job pods\n      --verbose                 Enables verbose output. The environment variable JX_LOG_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace\n      --verify-result           if the pod succeeds lets look for the last line starting with POD RESULT:  to determine the test result\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/pods/_index.md": "---\ntitle: jx verify pods\nlinktitle: pods\ntype: docs\ndescription: \"Verifies that all pods start OK in the current namespace; killing any Pods which have ErrImagePull ***Aliases**: pod*\"\naliases:\n  - jx-verify_pods\n---\n\n### Usage\n\n```\njx verify pods\n```\n\n### Synopsis\n\nVerifies that all pods start OK in the current namespace; killing any Pods which have ErrImagePul\n\n### Examples\n\n  ```bash\n  # populate the pods don't have missing images\n  jx verify pods%!(EXTRA string=jx-verify)\n\n  ```\n### Options\n\n```\n  -c, --count int          The minimum Ready pod count required matching the selector before terminating (default 2)\n  -h, --help               help for pods\n  -n, --namespace string   The namespace to look for events\n  -s, --selector string    The selector to query for all pods being running\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/tls/_index.md": "---\ntitle: jx verify tls\nlinktitle: tls\ntype: docs\ndescription: \"Verifies TLS for a Cluster ***Aliases**: cert*\"\naliases:\n  - jx-verify_tls\n---\n\n### Usage\n\n```\njx verify tls [url]\n```\n\n### Synopsis\n\nVerifies a TLS certificate, useful to ensure a HTTPS endpoint is using a certificate issued by a specific issuer like LetsEncrypt\n\n### Examples\n\n  ```bash\n  # verifies a TLS certificate issuer and subject\n  jx-verify step verify tls hook.foo.bar.com --insecure --issuer 'CN=(STAGING) Artificial Apricot R3' --subject 'CN=*.foo.bar.com'\n\n  ```\n### Options\n\n```\n  -h, --help               help for tls\n      --issuer string      override the default issuer to match the TLS certificate to\n      --production         override the detection of whether to verify TLS is using Production or Staging LetsEncrypt service (default true)\n  -t, --timeout duration   timeout (default 10m0s)\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/jx/verify/version/_index.md": "---\ntitle: jx verify version\nlinktitle: version\ntype: docs\ndescription: \"Displays the version of this command\"\naliases:\n  - jx-verify_version\n---\n\n### Usage\n\n```\njx verify version\n```\n\n### Synopsis\n\nDisplays the version of this command\n\n### Options\n\n```\n  -h, --help   help for version\n```\n\n\n\n### Source\n\n[jenkins-x-plugins/jx-verify](https://github.com/jenkins-x-plugins/jx-verify)\n",
            "content/en/v3/develop/reference/pipelines.md": "---\ntitle: Pipelines\nlinktitle: Pipelines\ntype: docs\ndescription: Reference for all things Pipelines\nweight: 100\naliases:\n- /v3/develop/pipelines/reference\n---\n\nThe following are the links to the various configuration file formats:\n\n[Tekton](https://tekton.dev/) resources:\n\n* [Task](https://tekton.dev/docs/pipelines/tasks/#configuring-a-task)\n* [TaskRun](https://tekton.dev/docs/pipelines/taskruns/#configuring-a-taskrun)\n* [Pipeline](https://tekton.dev/docs/pipelines/pipelines/#configuring-a-pipeline) \n* [PipelineRun](https://tekton.dev/docs/pipelines/pipelineruns/#configuring-a-pipelinerun)\n\nA `Task` is made up of `Steps` which each support all of the properties you can modify on a [kubernetes Container](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/)\n\n### Lighthouse \n\n[Lighthouse](https://github.com/jenkins-x/lighthouse) [TriggerConfig](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-triggerconfig.md#Config):\n\n* [presubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Presubmit) for triggering pipelines on Pull Request\n* [postsubmits](https://github.com/jenkins-x/lighthouse/blob/master/docs/trigger/github-com-jenkins-x-lighthouse-pkg-config-job.md#Postsubmit) for triggering pipelines on a push to a branch (e.g. releasing)\n \nAlso check out the [lighthouse pipeline configuration docs](https://github.com/jenkins-x/lighthouse/blob/master/docs/pipelines.md)\n\n",
            "content/en/v3/develop/reference/variables.md": "---\ntitle: Variables\nlinktitle: Variables\ntype: docs\ndescription: Environment variables available inside Pipelines\nweight: 300\n---\n\n### Environment Variables\n\nThe following tekton parameters and environment variables are available inside the pipeline catalog. They are populated by [lighthouse](https://github.com/jenkins-x/lighthouse)\n\n| Variable | Description |\n| --- | --- |\n| BUILD_ID | a unique long number for this build |\n| JOB_NAME | the name of the build which matches the name in the `presubmit` or `postsubmit` in your [lighthouse](https://github.com/jenkins-x/lighthouse) `triggers.yaml` |\n| JOB_SPEC|  is of the form `type:presumit` or `type:postsubmit` so you know what kind of job you are inside |\n| PULL_BASE_REF | the base branch name. e.g. `master` or `main` |\n| PULL_BASE_SHA | the base git SHA being built |\n| REPO_NAME | the name of the git repository |\n| REPO_OWNER | the owner of the git repository (a user or organisation) |\n| REPO_URL | the git URL to clone the repository being built |\n\nPull Requests `presubmit` also have the following values:\n\n| Variable | Description |\n| --- | --- |\n| PULL_NUMBER | the number of the pull request |\n| PULL_PULL_REF | the git reference of the pull request; something like `refs/pull/123/head` |\n| PULL_PULL_SHA |  the git SHA of the pull request |\n\n#### Additional environment variables\n\nIf your pipeline runs the [jx gitops variables](https://github.com/jenkins-x/jx-gitops/blob/master/docs/cmd/jx-gitops_variables.md) command it will lazily create the `.jx/variables.sh` script which will default a bunch more environment variables if they are not already populated in your git repository.\n\n**NOTE** that these variables are dynamically created during the execution of the pipeline pod; so to access them you must `source .jx/variables.sh` inside your step.\n\nSo that your step looks something like this...\n\n```yaml\n- image: gcr.io/jenkinsxio/jx:latest\n  name: my-step\n  script: |\n    #!/usr/bin/env bash\n    source .jx/variables.sh\n    echo \"now we can use variables like this: ${VERSION}\"\n```\n\nAvailable variables:\n\n| Variable | Description |\n| --- | --- |\n| APP_NAME | the name of the application which defaults to the `$REPO_NAME` |\n| BRANCH_NAME | is really the pull request name so something like `PR-123` |\n| BUILD_NUMBER | the human readable short build number relative to the repository and branch. So builds start at 1 and go up incrementally |\n| DOMAIN | the domain name for your ingress (from `spec.ingress.domain` in your `jx-requirements.yml` file) |\n| GIT_BRANCH | the real git branch being used (e.g. if on a Pull Request) |\n| DOCKERFILE_PATH |  the location of the `Dockerfile` if it exists |\n| DOCKER_REGISTRY | the host name of the registry being used for image builds |\n| DOCKER_REGISTRY_ORG | the owner in the container registry (user name or organisation) to push images |\n| JENKINS_X_URL | the URL to view the current pipeline in the [dashboard](/v3/develop/ui/dashboard/) |\n| JX_CHART_REPOSITORY | the URL of the helm chart repository to use |\n| NAMESPACE_SUB_DOMAIN | the sub domain prefix added to `$DOMAIN` to create ingresses. e.g. `myservice.${NAMESPACE_SUB_DOMAIN}${DOMAIN}` |\n| PIPELINE_KIND | the kind of pipeline being run `pullrequest` or `release` |\n| PUSH_CONTAINER_REGISTRY | generally the same as `DOCKER_REGISTRY` but sometimes can be different (e.g. if using minikube/docker you could push to a local registry) |  \n| VERSION | the version number used for releases (and used to tag images and git etc) or the preview version for pull requests |\n\n#### Additional Pull Request variables\n\n| Variable | Description |\n| --- | --- |\n| PR_BASE_REF | the git branch which a Pull Request pipeline will |   \n| PR_BASE_SHA | the git sha which the Pull Request has been rebased on from the base branch the PR will merge to | \n| PR_HEAD_REF | the git branch of the source of the Pull Request |  \n| PR_HEAD_SHA | the latest git sha of the Pull Request being processed |\n| PR_LABEL_${LabelName} = 'true' | where `${labelName}` is the upper case name of the Pull Request label with any special character like `-` or `/` replaced by `_` e.g. `PR_LABEL_ENV_STAGING` for the label `env/staging` | \n\n#### Pull Request variables from Comments\n\nIf you enable variables from Pull Request comments by modifying your `.lighthouse/jenkins-x/pullrequest.yaml` pipeline as follows:\n\n```yaml\n        - name: jx-variables\n          resources: {}\n          script: |\n            #!/usr/bin/env sh\n            jx gitops variables\n            jx gitops pr variables --comments\n```\n\nThen for any Pull Request comments lines like these:\n\n```\n/jx-var BEER=stella\n/jx-var CHEESE = edam\n/jx-var WITH_QUOTES = \" some value \"\n\n```\n\nYou will get these variables added:\n\n| Variable | \n| --- |\n| export PR_COMMENT_BEER=\"stella\" |        \n| export PR_COMMENT_CHEESE=\"edam\" | \n| export PR_COMMENT_WITH_QUOTES=\" some value \" |\n\n\n\n\nIf you want to define dynamic environment variables in one step for use in later steps you can append new variables to `.jx/variables.sh` and then add the `source .jx/variables.sh` later in your pipeline\n",
            "content/en/v3/develop/ui/_index.md": "---\ntitle: UI\nlinktitle: UI\ntype: docs\ndescription: User interfaces for Jenkins X\nweight: 10\naliases:\n  - /v3/guides/ui/\n  - /v3/develop/ui/\n  \n---\n\n\n",
            "content/en/v3/develop/ui/cli.md": "---\ntitle: CLI\nlinktitle: CLI\ntype: docs\ndescription: Jenkins X Command Line Interface\nweight: 10\naliases:\n  - /v3/develop/ui/cli\n---\n\nFor those who like command lines you can view and watch most things via the [jx](/v3/guides/jx3/) command line.\n\nYou can download 3.x of jx from here: https://github.com/jenkins-x/jx/releases\n\nBrowse the [command line commands](https://github.com/jenkins-x/jx/blob/main/docs/cmd/jx.md) along with the [plugin commands](https://github.com/jenkins-x/jx#plugins) \n\nMany things in Jenkins X are exposed as [custom resources](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) so that you can also use [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) to interact with the Jenkins X.\n\n* to view environments\n\n```bash\nkubectl get env\n```\n\n* to view preview environments\n\n```bash\nkubectl get preview\n```\n\n* to view build logs try:\n\n``` bash\njx pipeline log\n```\n",
            "content/en/v3/develop/ui/dashboard.md": "---\ntitle: Dashboard\nlinktitle: Dashboard\ntype: docs\ndescription: Read only dashboard view of pipelines and logs\nweight: 20\naliases:\n  - /v3/develop/ui/dashboard\n---\n\nIt's a common requirement to want to view pipelines running, their logs or to be able to click on a Pull Request on your git provider and view the pipeline log for that commit on that Pull Request.\n\nTo implement this we include the [jx-pipelines-visualizer](https://github.com/jenkins-x/jx-pipelines-visualizer) application inside Jenkins X.\n\nThis provides a simple read only web UI for viewing pipelines and pipeline logs and its linked automatically with any Pull Request you create on repositories managed by Jenkins X.\n\n### Accessing the Pipelines Visualizer\n\nIf you [have a recent jx binary](/v3/guides/upgrade/#cli) run:\n\n```bash \njx dash\n``` \n\nand it will open the dashboard using the basic authentication login and password.\n\n![](/images/jx-pipelines-visualizer/v1-home.png)\n\n### Viewing from a Pull Request\n\nIf you create a Pull Request on a git repository you have [created or imported](/v3/develop/create-project/) in Jenkins X you should see a link on the Pull Request. \n\nHere's an example - see the **Details** link on the right of the Pull Request pipeline:\n\n<img src=\"/images/quickstart/pr-link.png\" class=\"img-thumbnail\">\n\nIf you click the **Details** link that should open the [jx-pipelines-visualizer](https://github.com/jenkins-x/jx-pipelines-visualizer) UI for this pipeline build.\n\n![](/images/jx-pipelines-visualizer/v1-pipeline-success.png)\n\n### Logging in to the Pipelines Visualizer\n\nUnless you [customize the chart](/v3/develop/apps/#customising-charts) to change the `Ingress` the default will use _basic authentication_ to access the web UI to avoid your pipeline logs being visible on the internet.\n\nThe default username is `admin`. \n\nTo find the generated random password to access the UI type:\n\n```bash \njx ns jx\nkubectl get secret jx-basic-auth-user-password -o jsonpath=\"{.data.password}\" | base64 --decode\n```\n\nThat should display the randomly generated password.\n\nIf you type the username and password into your browser it should open the dashboard.\n\n### Pipelines Traces\n\nIf you [enable the observability stack](/v3/admin/guides/observability/), then you will get a new link **Trace** in your pipeline view - once the pipeline is finished - that will open the pipeline trace in Grafana so that you can see the timings of each stage and steps in your pipeline:\n\n![](/images/jx-pipelines-visualizer/pipeline-trace.gif)\n\n\n### Lighthouse UI\n\nThere is an additional [optional UI for viewing lighthouse](https://github.com/jenkins-x-plugins/lighthouse-webui-plugin).\n\nTo install it add the following to the `releases:`  section of your `helmfiles/jx/helmfile.yaml`:\n\n```yaml \n- chart: jx3/lighthouse-webui-plugin\n  version: 0.1.2\n  name: lighthouse-webui-plugin\n  values:\n  - ../../versionStream/charts/jx3/lighthouse-webui-plugin/values.yaml.gotmpl\n  - jx-values.yaml\n```",
            "content/en/v3/develop/ui/lens.md": "---\ntitle: Lens\nlinktitle: Lens\ntype: docs\ndescription: desktop Jenkins X Console based on Lens \nweight: 50\n---\n    \n{{< alert color=\"warning\" >}}\nLens v6 or higher is not supported.\n{{< /alert >}}\n\n[Lens](https://k8slens.dev/) is a desktop console for Kubernetes which runs locally on your laptop as a desktop application.\n\n![](/images/lens/lens.png)\n\n## Install Lens\n\n[Download the Lens distribution](https://k8slens.dev/#download) for your computer then run it or follow the [getting started guide](https://docs.k8slens.dev/main/getting-started/)\n\nYou can check out the [catalog documentation](https://docs.k8slens.dev/main/catalog/) for how to connect to a kubernetes cluster.\n\n## Install the Jenkins X extension\n\n[Lens](https://k8slens.dev/) supports [extensions](https://k8slens.dev/#extensions) to support custom UIs for different extensions to Kubernetes such as Jenkins X.\n                \nFollow the Lens documentation on [installing an extension](https://docs.k8slens.dev/main/extensions/usage/#installing-an-extension) using the following URL for the [Jenkins X Lens extension](https://github.com/jenkins-x-plugins/jx-lens)\n\n\n* go to the **File** (or **Lens** on macOS) > **Extensions** in the application menu\n* enter the following URL into the **Install Extension** input field\n  * @jenkins-x-plugins/jx-lens\n* make sure the extension is **Enabled**\n\n\n## Using the Jenkins X extension\n\nOnce you have used the usual Lens way to connect to your cluster you can browse the usual Kubernetes resources like `Nodes`, `Workloads` and `Configuration`.\n\nYou should see the `Jenkins X` tab below the `Custom Resources` section. If you expand that you can then navigate to your `Pipelines` and `Preview` environments as well.",
            "content/en/v3/develop/ui/lighthouse.md": "---\ntitle: Lighthouse Dashboard\nlinktitle: Lighthouse Dashboard\ntype: docs\ndescription: Read-only web UI view of Lighthouse events, jobs and merge status/history\nweight: 25\naliases:\n  - /v3/develop/ui/lighthouse\n---\n\n[Lighthouse](https://github.com/jenkins-x/lighthouse) is the Jenkins X component responsible for all interactions between your Git hosting provider (GitHub, Gitlab, ...) and your Kubernetes cluster. Amongst other things, it:\n- receive and process webhook events\n- trigger pipelines\n- handle automatic merging of Pull Requests\n\nLighthouse comes with an optional Web UI: [lighthouse-webui-plugin](https://github.com/jenkins-x-plugins/lighthouse-webui-plugin) - see [the admin guide](/v3/admin/guides/lighthouse-webui/) to install it.\n\nThis UI gives you a read-only view of:\n- the webhook events received and processed by Lighthouse: git push, PR events, comments, ...\n- the Lighthouse Jobs (pipelines) created, and their states - with a direct link to the [pipeline visualizer](/v3/develop/ui/dashboard/) to see the logs\n- the Lighthouse Merge Status and History: which PRs have been automatically merged by Lighthouse\n\nThis UI will help you understand what Lighthouse is doing, and in case of issue (pipeline not triggered, PR not being automatically merged, ...) it will help you find the root cause.\n\n\n### Accessing the Lighthouse Web UI\n\nUnless you [customize the chart](/v3/develop/apps/#customising-charts) to change the `Ingress` the default hostname will be `lighthouse.<YOUR_DOMAIN>`. You can find the exact hostname by running the following command:\n\n```bash \njx ns jx\nkubectl get ing lighthouse-webui-plugin -o jsonpath=\"{.spec.rules[0].host}\"\n```\n\n### Logging in to the Pipelines Visualizer\n\nUnless you [customize the chart](/v3/develop/apps/#customising-charts) to change the `Ingress` the default will use _basic authentication_ to access the web UI to avoid your cluster internal state being visible on the internet.\n\nThe default username is `admin`. \n\nTo find the generated random password to access the UI type:\n\n```bash \njx ns jx\nkubectl get secret jx-basic-auth-user-password -o jsonpath=\"{.data.password}\" | base64 --decode\n```\n\nThat should display the randomly generated password.\n\nIf you type the username and password into your browser it should open the web UI.\n\n\n### Viewing from a Pull Request\n\nIf you create a Pull Request on a git repository you have [created or imported](/v3/develop/create-project/) in Jenkins X you should see a link on the Pull Request. \n\nHere's an example - see the **Details** link on the right of the `Merge Status` line:\n\n<img src=\"/images/lighthouse-webui-plugin/github-pr-status-link.png\" class=\"img-thumbnail\">\n\nIf you click the **Details** link that should open the [lighthouse-webui-plugin](https://github.com/jenkins-x-plugins/lighthouse-webui-plugin) UI in the \"Merge Status\" page.\n\n\n### Lighthouse Events\n\nBy default, the Lighthouse Web UI will display all the webhook events:\n\n![](/images/lighthouse-webui-plugin/events.png)\n\n\n### Lighthouse Jobs\n\nIf you click on the **Jobs** link (top right), you will see all the pipelines triggered by Lighthouse:\n\n![](/images/lighthouse-webui-plugin/jobs.png)\n\n\n### Lighthouse Merge Status\n\nIf you click on the **Merge Status** link, you will see all the Pull Requests currently in the Lighthouse \"Merge Pools\" - candidates for automatic merge:\n\n![](/images/lighthouse-webui-plugin/merge-status.png)\n\n\n### Lighthouse Merge History\n\nIf you click on the **Merge History** link, you will see all the Pull Requests which have been automatically merged by Lighthouse:\n\n![](/images/lighthouse-webui-plugin/merge-history.png)\n",
            "content/en/v3/develop/ui/octant.md": "---\ntitle: Octant\nlinktitle: Octant\ntype: docs\ndescription: desktop Jenkins X Console based on Octant \nweight: 60\naliases:\n  - /v3/develop/ui/octant\n---\n\nAs a general purpose console for working with Kubernetes, Jenkins X, Tekton and more resources we highly recommend either [Octant](https://octant.dev/) or [Lens](/v3/develop/ui/lens/)\n\nTo run the [Octant](https://octant.dev/) UI please make sure you are in a local terminal (not inside a VM) as it will run a local process and open a web browser to access a local port. \n\nAlso make sure you are connected to the kubernetes cluster you wish to use first. e.g. run something like this to check you are connected first:\n\n```bash \nkubectl get ns\n```\n\nTo run Octant with the Jenkins X plugins if you [have a recent jx binary](/v3/guides/upgrade/#cli) run:\n\n```bash \njx ui\n```\n\nThis will download the [octant](https://octant.dev/) binary and the [octant-jx](https://github.com/jenkins-x/octant-jx) plugin then startup  [Octant](https://octant.dev/) for you\n\n### More Information\n\nPlease check out the [documentation on using Octant and Jenkins X](/docs/reference/components/ui/) to get started.\n\n* [why we love Octant](/blog/2020/08/06/octant-jx/) \n\n* [demo of using octant](/blog/2020/08/06/octant-jx/#demo)\n\n <iframe width=\"1292\" height=\"654\" src=\"https://www.youtube.com/embed/2LCPHi0BnUg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n",
            "content/en/v3/develop/ui/slack.md": "---\ntitle: Slack\nlinktitle: Slack\ntype: docs\ndescription: Slack bot for Jenkins X\nweight: 200\n---\n\nMany of us use chat to keep in touch with the developers and tools we work with. [Slack](https://www.slack.com/) is becoming popular in commercial settings and is already used throughout the Kubernetes open source ecosystem: including the [Jenkins X project slack channels](https://jenkins-x.io/community/#slack)\n\nTo get [slack](https://www.slack.com/) notifications of pipelines you can use the [jx-slack](https://github.com/jenkins-x-plugins/jx-slack) plugin.\n\n## Creating the slack app\n\nBefore you can install the [jx-slack](https://github.com/jenkins-x-plugins/jx-slack) plugin you need to create a Slack app.\n\n- [create a new slack app](https://api.slack.com/apps?new_app=1) and fill in the details of the application name and associate it with the slack workspace you wish to use\n- navigate to the **Features** / **OAuth & Permissions** page on the slack app site\n\n<img src=\"/images/slack/slack-oauth-page.png\" class=\"img-thumbnail\" width=\"239\" height=\"573\">\n\n- add the Scope **chat:write** to your bot so it can post messages to your slack workspace\n- find your **Bot User OAuth Access Token** which should start with **xoxb-** you will need it later...\n- invite the slack app you have created into whatever channels you want it to notify. e.g. inside the channel you can type `@` and start typing the slack app name to send it a message which will get Slack to prompt you to invite the bot user to the room.\n\n## Installing\n\nTo install the [jx-slack](https://github.com/jenkins-x-plugins/jx-slack) plugin add the following to your `helmfiles/jx/helmfile.yaml` file in your dev cluster git repository in the `releases:` section:\n\n```yaml\n- chart: jxgh/jx-slack\n  name: jx-slack\n  values:\n    - jx-values.yaml\n```\n\nOnce you have pushed the change to git and your [boot job has retriggered](/v3/about/how-it-works/#boot-job) (you can view this via `jx admin log`) you should see the `jx-slack` secret show up as being missing:\n\n```bash\njx secret verify\n```\n\nYou can populate your slack bot token via the following. **Note** that if you are using vault [you need to run the port forward first](/v3/admin/setup/secrets/vault/#using-vault):\n\n```bash\njx secret edit -f jx-slack\n```\n\nEnter the **Bot User OAuth Access Token** you found in the [above steps](#creating-the-slack-app) which should start with **xoxb-**\n\nIn a few seconds time you should see the `Secret` show up with the token populated...\n\n```bash\nkubectl get secret jx-slack -oyaml\n```\n\nNow that the secret is populated you should see the `jx-slack` pod show up:\n\n```bash\nkubectl get pod -l app=jx-slack\n```\n\n## Configuring Slack notifications\n\nIn your dev cluster repository the `.jx/gitops/source-config.yaml` file (see the [configuration guide](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SourceConfig)) is used to configure which repositories are imported into Jenkins X. This file is [automatically updated](/v3/about/how-it-works/#importing--creating-quickstarts), via pull requests, when you [create or import projects](/v3/develop/create-project/).\n\nYou can configure the [slack](https://github.com/jenkins-x/jx-gitops/blob/master/docs/config.md#gitops.jenkins-x.io/v1alpha1.SlackNotify) configuration either globally, for a group of repositories or for a single repository.\n\nYou can use overriding: so have good global or group based defaults then override on a per repository basis where required.\n\n### Filters\n\nYou can change the notification filters at any level (global, group or repository) to let you get the right level of notifications you need.\n\nIts common with chat to be too noisy; so you probably only need to be notified on a subset of events.\n\ne.g. a good default is only be notified for releases only (so ignoring Pull Requests) and only for failures or the first success after a failure. This can be done via the `kind` and `pipeline` filters:\n\n```yaml\nslack:\n  channel: \"#jenkins-x-pipelines\"\n  kind: failureOrNextSuccess\n  pipeline: release\n```\n\nkind values and their behaviors are:\n\n- `\"\"`: no notifications\n- never: never notify - no notifications\n- always: always send a notification\n- failure: notify only failures\n- failureOrNextSuccess: notify only failures or first success after failure\n- success: notify only on success\n\npipeline values and their behaviors are:\n\n- `\"\"`: no notifications\n- all: notify on all pipelines\n- release: only notify on release pipelines\n- pullRequest: only notify on pullRequest pipelines\n\nYou can configure the `channel` globally or for different groups or repositories differently too. You can also filter by `branch`, pipeline `context` or `pullRequestLabel`.\n\n## Example\n\nHere's an example of some messages sent to the channel for a repository. In this case its our BDD tests on the version stream.\n\nAs you can see a few tests fail then we get a successful pipeline.\n\nYou'll notice the links on the git owner, repository, and build number all resolve to links to your git provider or the associated pipeline page in the [Pipeline Visualiser](/v3/develop/ui/dashboard/)\n\n<img src=\"/images/slack/slack-bot.png\" class=\"img-thumbnail\" width=\"542\" height=\"224\">\n\n## Other slack bots\n\nWe recommend the [Toast slack bot](https://toast.ninja/) as a way to get DM'd with changes to your Pull Requests and its not too noisy.\n\nThere is also the [github slack integration](https://slack.github.com/) which is quite good - though it can be quite noisy.\n\nIf you have found any other good slack bots please [let us know](/community/#slack) or click on the `Edit this page` link on the right of this page to submit a new link!\n",
            "content/en/v3/devops/_index.md": "---\ntitle: DevOps Guide\nlinktitle: DevOps Guide\ntype: docs\ndescription: Overview of DevOps, GitOps and ChatOps for modern cloud native development\nweight: 300\n---\n                                                                                       \nThese guides contain as much of our learnings as possible from using modern DevOps, GitOps and ChatOps practices to continually develop and use software through Jenkins X. We've tried to keep things as technology neutral as possible. \n",
            "content/en/v3/devops/accelerate.md": "---\ntitle: Accelerate\nlinktitle: Accelerate\ndescription: How to accelerate the delivery of customer value\ntype: docs\nweight: 20\n---\n\nJenkins X is a reimagined CI/CD implementation for the Cloud which is heavily influenced by the State of DevOps reports and more recently the [Accelerate](https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339) book from [Nicole Forsgren](https://twitter.com/nicolefv), [Jez Humble](https://twitter.com/jezhumble) and [Gene Kim](https://twitter.com/RealGeneKim?).  \n\n<img src=\"/images/accelerate.jpg\" class=\"img-thumbnail\" width=\"500\" height=\"750\">\n\nYears of gathering data from real world teams and organizations which has been analyzed by inspiring thought leaders and data scientists from the DevOps world.  The Accelerate book recommends a number of capabilities that Jenkins X is implementing so users gain the scientifically proven benefits, out of the box.  We've started documenting the capabilities that are available today and will continue as more become available.\n\n<img src=\"/images/capabilities.png\" class=\"img-thumbnail\" width=\"400\" height=\"750\">\n\n# Use version control for all artifacts\n\nThe Weaveworks folks coined the term GitOps which we love.  Any change to an environment, whether it be a new application, version upgrade, resource limit change or simple application configuration should be raised as a Pull Request to Git, have checks run against it like a form of CI for environments and approved by a team that has control over what goes into the related environment.  We now enable governance have full traceability for any change to an environment.\n\n_Related Accelerate capability:  Use version control for all production artifacts_\n\n# Automate your deployment process\n\n## Environments\n\nJenkins X will automatically create Git backed environments during installation and makes it easy to add new ones using `jx create environment`.  Additionally when creating new applications via a quickstart (`jx create quickstart`), Java based SpringBoot (`jx create spring`) or importing existing applications (`jx import`), Jenkins X will both automatically add CI / CD pipelines and setup the jobs, git repos and webhooks to enable an automated deployment process.\n\nOut of the box Jenkins X creates Staging and Production (this is customizable) permanent environments as well as temporary environments for preview applications from Pull Requests.\n\n### Previews Environments\n\nWe are trying to move as much testing, security, validation and experimentation for a change before it's merged to master.  With the use of temporary dynamically created Preview Environments any Pull Request can have a preview version built and deployed, including libraries that feed into a downstream deployable application.  This means we can code review, test, collaborate better with all teams that are involved in agreeing that change can go live.\n\nUltimately Jenkins X wants to provide a way that developers, testers, designers and product managers can be as sure as they can that when a change is merged to master it works as expected.  We want to be confident the proposed change does not negatively affect any service or feature as well as deliver the value it is intended to.\n\nWhere Preview Environments get really interesting is when we are able to progress a short term PR through various stages of maturity and confidence where we begin to direct a percentage of real production traffic (either shadow traffic or even beta users).  We can then analyze the value of the proposed change and possible run multiple automated experiments over time using Hypothesis Driven Development.  This helps give us better understanding of how the change will perform when released to all users. Though we need to make sure PRs stay short lived for trunk based development; lets try avoid PRs turning into long term feature branches! \n\n_Related Accelerate capability: Foster and enable team experimentation_\n\nUsing preview environments is a great way to introduce better test automation.  While Jenkins X enables this we don't yet have examples of automated tests being run against a preview environment.  A simple test would be to ensure the application starts ok and Kubernetes liveness check pass for an amount of time. This relates to \n\n_Related Accelerate capability: Implement Test Automation_\n_Related Accelerate capability: Automate your deployment process_\n\n### Permanent Environments\n\nIn software development we're used to working with multiple environments in the lead up to a change being promoted to a live production environment.  Whilst this seems business as usual it can cause significant delays to other changes if for any reason that it is deemed not fit via some process that didn't happen pre merge to master.  Subsequent commits then become blocked and can cause delay of urgent changes being promoted to production.\n\nAs above Jenkins X wants any changes and experiments to be validated before it is merged to master.  We would like changes in a staging environment to be held there for a short amount of time before being promoted, ideally in an automated fashion.\n\nThe default Jenkins X pipelines provide deployment automation via environments.  These are customizable to suite your own CI / CD pipeline requirements.\n\nJenkins X recommends Staging should act as a near as possible reflection on production, ideally with real production data shadowed to it using a service mesh to understand the behavior.  This also helps when developing changes in preview where we can link to non production services in staging.\n\n_Related Accelerate capability: Automate your deployment process_\n\n# Use trunk-based development\n\nThe Accelerate book found that teams which use trunk based development with short lived branches performed better.  This has always worked for the Jenkins X core team members so this was an easy capability for Jenkins X to implement when setting up Git repositories and CI/CD jobs.\n\n# Implement Continuous Integration\n\nJenkins X sees CI as the effort of validating a proposed change via Pull Requests before it is merged to master.  Jenkins X will automatically configure source code repositories, Jenkins and Kubernetes to provide Continuous Integration out of the box.\n\n# Implement Continuous Delivery\n\nJenkins X sees CD as the effort of taking that change after it's been merged to master through to running in a live environment.  Jenkins X automates many parts in a release pipeline:\n\nJenkins X advocates the use of semantic versioning.  We use git tags to calculate the next release version which means we don't need to store the latest release version in the master branch.  Where release systems do store the last or next version in Git repos it means CD becomes hard, as a commit in a release pipeline back to master triggers a new release.  This results in a recursive release trigger.  Using a Git tag helps avoid this situation which Jenkins X completely automates.\n\nJenkins X will automatically create a released version on __every__ merge to master which can then potentially progress through to production.\n\n# Use loosely coupled architecture\n\nBy targeting Kubernetes users of Jenkins X can take advantage of many of the cloud features that help design and develop loosely coupled solutions.  Service discovery, fault tolerance, scalability, health checks, rolling upgrades, container scheduling and orchestration to name just a few examples of where Kubernetes helps.\n\n# Architect for empowered teams\n\nJenkins X aims to help polyglot application developers.  Right now Jenkins X has quickstarts and automated CI/CD setup with language detection for Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift and more to come.  What this also does is provide a consistent Way Of Working so developers can concentrate on developing.\n\nJenkins X also provides many addons, for example Grafana and Prometheus for automated metrics collection and visualization.  In this example centralized metrics help understand how your applications behave when built and deployed on Kubernetes.\n\n[DevPods](/docs/reference/devpods/) are another feature which enables developers to edit source code in their local IDE, behind the scenes it is then synced to the cloud and rapidly built and redeployed.\n\nJenkins X believes providing developers automation that helps them experiment in the cloud, with different technologies and  feedback empowers them to make the best decisions - faster.\n",
            "content/en/v3/devops/cloud-native.md": "---\ntitle: Cloud Native\nlinktitle: Cloud Native\ntype: docs\ndescription: Cloud Native recommendations\nweight: 200\n---\n\nOne of the [Accelerate](/v3/devops/accelerate/) recommendations is around using the cloud well; letting developers use the cloud to solve software problems.\n\nHere are a few of the lessons we have learnt about using the cloud well.\n\n\n## Prefer cloud over kubernetes\n\nYou can deploy a database via a helm chart in your kubernetes cluster. Or you can configure your cloud provider to create a managed database offering.\n\nYou can deploy, say, [vault](https://www.vaultproject.io/) as helm charts inside your kubernetes cluster. Or you can use your cloud providers secret store solution such as:\n\n* Alibaba Cloud KMS Secret Manager\n* Amazon Secret Manager\n* Azure Key Vault\n* GCP Secret Manager\n\nWe recommend that if you have a choice; go with the cloud version. \n\nThe main reason is these kinds of things are undifferentiated heavy lifting. Your cloud provider already can install, upgrade, backup and manage these services for you.\n\nIf you go with helm charts inside kubernetes then you need to make sure you backup to long term storage all the data (e.g. every Persistent Volume) and test out your backup and restore mechanisms.\n\n\n### Prefer cloud databases\n\nAs your cloud provider can handle backups, upgrades and elastic scaling for you.\n\n### Prefer cloud secret stores \n\nOver installing, upgrading, backing up + managing your own Vault\n\n### Prefer cloud container registries\n\nOver installing and managing your own nexus / artifactory / harbor / chart museuem\n\n### Prefer hosted git hosting\n\nOver installing and managing your own gitlab / gitea / bitbucket server\n\n### Try avoid Persistent Volumes\n\nSimilar to the above; if you use cloud storage, cloud buckets, cloud container registries you have less data to backup since the cloud provider typically does this for you.\n\nRemember that `Persistent Volume` resources in kubernetes are not free; you need to backup and manage them.\n                                                                       \n\n## Treat kubernetes clusters as cattle not pets\n\nGet used to the idea you can delete a kubernetes cluster at any time and recreate it quickly.\n\ne.g. to change region or machine type this will usually happen.\n\n\n## Map IAM Roles to kubernetes Service Accounts\n\nOn AWS use [IAM roles for service accounts](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html) (IRSA)\n\nOn GCP use [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) (WLI)\n\nIn both cases this maps cloud IAM roles to kubernetes `ServiceAccount` resources using annotations. \n\nThis means that you don't have to populate your kubernetes cluster with cluster-admin style cloud IAM secrets - which makes your system more secure and reduces the possibility of accidentally exposing a secret.\n\nNote that if you use [Jenkins X to configure your clusters with Terraform and GitOps](/v3/admin/) then you get this out of the box! \n\n## Terraform for cloud infrastructure\n\nWe are all using an increasing amount of cloud infrastructure. You can use your cloud providers CLI or web console to set things up. However it's hard to manage and version.\n\nSo we recommend the [GitOps approach](/v3/devops/gitops/) to all infrastructure; both cloud infrastructure and kubernetes charts, resources and configuration.\n\nSo to manage your infrastructure use a git repository with your [terraform](https://www.terraform.io/) configuration.\n\nThere is a catch 22 of how do you start to provision your first, say, kubernetes cluster using [terraform](https://www.terraform.io/) before you have any cloud infrastructure.\n\nYou could look at using [Terraform Cloud](https://www.terraform.io/cloud) as the place to setup your core cloud infrastructure.\n\n\n## Try use the same GitOps approach everywhere\n\nIf you treat different clusters very differently in how you setup them up, install, upgrade, manage and monitor them you've given yourself more work to do and increase the changes of things going wrong or getting out of step.\n\nSo try using the same [GitOps approach](/v3/admin/guides/jenkins/gitops/) for all clusters in all environments.\n",
            "content/en/v3/devops/gitops.md": "---\ntitle: GitOps\nlinktitle: GitOps\ntype: docs\ndescription: GitOps overview\nweight: 100\n---\n\nThe idea of GitOps is to treat everything as source code, including your infrastructure, and check it into git and version it. \n\nSo rather than connecting to a machine in your cluster, you make changes via Pull Requests in git. This means:\n\n* every change is audited so you can see who changed what, when and why\n* its easy to revert changes to your infrastructure if things go bad\n* teams can easily review changes to work more effectively as a team, share knowledge and get better feedback\n\n## Challenges\n\n### Secrets\n\nOne of the biggest challenges with GitOps is dealing with secrets. \n\nYou really want to check in all of your source code into git. But you really don't want to check in your secrets (user, passwords, tokens, certificates etc) into git - particularly public repositories!\n\nThere are techniques like [helm sealed secrets](https://github.com/bitnami-labs/sealed-secrets) so that you can encrypt secrets for storage in git. \n\nHowever we are not huge fans of the UX of using this approach; its harder to modify or rotate secrets.\n\nWe prefer [using external secrets stores](/v3/admin/setup/secrets/) via the open source  [Kubernetes External Secrets](https://github.com/external-secrets/kubernetes-external-secrets) project\n\nThis means that we [automatically convert Secret resources to ExternalSecrets which can then be stored safely in git](/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template)\n\n\n### Source code \n\nSaying use git is all well and good but what is the source code layout?\n\nWhen writing actual application code in languages like Java, Node or Go there is accepted layouts and file formats. But what of GitOps?\n\nIt does depend a little on the GitOps tool you are using. We recommend trying to use a canonical source code layout that lets you change later if you need to.\n\nHere is our current [recommended source code layout](https://github.com/jenkins-x/jx-gitops/blob/master/docs/git_layout.md)\n\n\n## Recommendations\n\nWe spend more time reading source code than writing it. So try focus on things like:\n\n* use canonical file formats that are easy to understand. \n  * e.g. [helm](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile) and [Tekton YAML syntax](/v3/develop/reference/pipelines/) so that you get [IDE support](/v3/develop/pipelines/editing/#ide-support) and [easy linting](/v3/develop/pipelines/editing/#linting)\n* make good use of reporting. Jenkins X generates easy to read reports to view what applications are deployed in what namespace and with what versions etc:\n  * e.g. see the reports for [kubernetes](https://github.com/jx3-gitops-repositories/jx3-kubernetes/tree/master/docs ), [aws](https://github.com/jx3-gitops-repositories/jx3-eks-vault/tree/master/docs), [azure](https://github.com/jx3-gitops-repositories/jx3-azure-akv) and [gke](https://github.com/jx3-gitops-repositories/jx3-gke-gsm/tree/master/docs)\n* we recommend checking in all kubernetes resources apart from Secrets into git. See [this FAQ entry for background](/v3/develop/faq/#why-does-jenkins-x-use-helmfile-template).\n  * this makes it easier to review Pull Requests to see what will actually change in Kubernetes if a change is approved (e.g. changes to namespaces, deployments, images, volumes etc)\n  * when diagnosing issues you can easily use your IDE to view the history of any kubernetes resource. This avoids having to mentally guess what tools like [helm](https://helm.sh/) or [kustomize](https://kustomize.io/) would actually do over time - you can just compare what they create - the YAML resources in git them mirror exactly what should exist in your kubernetes clusters.\n* always version everything and never use `latest` or `SNAPSHOT` images or artifacts!\n  * if you are worried about upgrading versions of things over time then look at either tools like [dependabot](https://dependabot.com/) or the [updatebot plugin](https://github.com/jenkins-x-plugins/jx-updatebot) which we use extensively throughout Jenkins X to upgrade versions of libraries, images, binaries etc.\n* try run everything in the cloud rather than on your local laptop\n  * as its easier to keep running for everyone in your team; rather than only work on certain machines with magic setups you forget to document or maintain. e.g. the Jenkins X v3 approach runs the [installer inside Kubernetes as a Job](/v3/about/how-it-works/#boot-job)\n",
            "content/en/v3/devops/patterns/_index.md": "---\ntitle: Patterns\nlinktitle: Patterns\ntype: docs\ndescription: DevOps Pattern Catalog\nweight: 400\n---\n                                                                                       \n",
            "content/en/v3/devops/patterns/automate_continuous_delivery.md": "---\ntitle: Automate Continuous Delivery\nlinktitle: Automate Continuous Delivery\ndescription: Automate Continuous Delivery of all of your environments\ntype: docs\nweight: 130\n---\n\nAs described in the [Accelerate book](/v3/devops/accelerate/), high performing teams automate their Continuous Delivery. \n\nThis lets your team focus on delivering business value for your customers rather than writing pipelines by hand.\n      \nIf you use Jenkins X for your environments and to [create projects](/v3/develop/create-project/) you will have completely automated Continuous Delivery using [Pipelines As Code](/v3/devops/patterns/pipeline_as_code/), [Preview Environments](/v3/devops/patterns/preview_environments/) and [Trunk Based Development](/v3/devops/patterns/trunk_based_development/)\n\n\n",
            "content/en/v3/devops/patterns/gitops.md": "---\ntitle: GitOps\nlinktitle: GitOps\ndescription: Define your infrastructure and environments as source code git \ntype: docs\nweight: 100\n---\n\nThe `GitOps` pattern means you use source code and git repositories for both your applications, your infrastructure and environments too.\n\nIn the DevOps space we have been using git to version infrastructure configuration with many tools like [terraform](https://www.terraform.io/) and before that tools like [Ansible](https://www.ansible.com/).\n\nWith [kubernetes](https://kubernetes.io/) you can connect to a cluster and modify it via `kubectl apply` or helm install`.\n\nHowever with the `GitOps` pattern developers don't modify kubernetes directly; instead they propose changes to a git repository via a Pull Request which when it gets approved and merged causes the kubernetes cluster to be modified via some kind of operator such as the [Jenkins X git operator](https://github.com/jenkins-x/jx-git-operator)\n\n### Benefits of GitOps\n\n* all changes made to each environment are stored in git so it is easy to see who changed what, when and why.\n* it is easy to revert changes if things go bad\n* it helps share information between the team and to get feedback and reviews on changes to infrastructure\n\n\n### Implementation approaches\n\nYou could implement the GitOps pattern by just running `helm install mychart` in some kind of script or operator. \n\nWe recommend checking in every kubernetes resource and custom resource definition to git - apart from kubernetes Secrets. For details why see [the reasoning behind this decision](/v3/develop/faq/general/#why-does-jenkins-x-use-helmfile-template). \n\n\nEssentially having a canonical file in git for every non-Secret kubernetes and custom resource really helps when it comes to diagnosing issues with a cluster; since you don't have to keep in your head what tools like [helm](https://helm.sh/), [helmfile](https://github.com/roboll/helmfile), [kustomize](https://kustomize.io/), [kpt](https://googlecontainertools.github.io/kpt/), [kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/) or [jx](/v3/guides/jx3/) do - you can just look at how the resource has changed in git to see why things are going wrong. \n",
            "content/en/v3/devops/patterns/map-sa-to-cloud-iam.md": "---\ntitle: Map Cloud IAM to Kubernetes Service Accounts\nlinktitle: Map Cloud IAM to Kubernetes Service Accounts\ndescription: Simplify your setup on the cloud by mapping kubernetes Service Accounts to cloud IAM roles\ntype: docs\nweight: 320\n---\n      \nCloud providers make it relatively easy to map kubernetes `Service Account` resources to cloud IAM roles and accounts which avoids having to expose secrets to access cloud resources which simplifies things and makes your applications more secure.\n\nOn AWS use [IAM roles for service accounts](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html) (IRSA)\n\nOn GCP use [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity) (WLI)\n\nIn both cases this maps cloud IAM roles to kubernetes `ServiceAccount` resources using annotations. \n\nThis means that you don't have to populate your kubernetes cluster with cluster-admin style cloud IAM secrets - which makes your system more secure and reduces the possibility of accidentally exposing a secret.\n\nNote that if you use [Jenkins X to configure your clusters with Terraform and GitOps](/v3/admin/) then you get this out of the box! \n",
            "content/en/v3/devops/patterns/pipeline_as_code.md": "---\ntitle: Pipelines As Code\nlinktitle: Pipelines As Code\ndescription: Define your pipelines as code with your applications and environments\ntype: docs\nweight: 120\n---\n\nDefine your Continuous Integration and Continuous Delivery Pipelines as code and keep them in git with your application code.\n\nIn Jenkins X you can see the [Source Layout](/v3/develop/pipelines/editing/#source-layout) for more detail using standard [Tekton Pipelines](https://github.com/tektoncd/pipeline) YAML for defining pipelines in a cloud native self-contained way.\n\nOne downside with Pipelines As Code is that you can end up copy/pasting lots of YAML into lots of repositories which can become tricky to both maintain and to keep on recent images and configurations.\n\nFor details of the approach we use on Jenkins X check out [this blog post on GitOps your cloud native pipelines](/blog/2021/02/25/gitops-pipelines/) which lets us share versioned pipelines via git while also making it super easy to override pipeline steps as and when required keeping things super flexible while maximising reuse and making it easy to maintain and upgrade.\n\n\n\n",
            "content/en/v3/devops/patterns/prefer_cloud_over_kube.md": "---\ntitle: Prefer Cloud Over Kubernetes\nlinktitle: Prefer Cloud Over Kubernetes\ndescription: Prefer your cloud provider service over a kubernetes chart\ntype: docs\nweight: 300\n---\n\nYou can deploy a database via a helm chart in your kubernetes cluster. Or you can configure your cloud provider to create a managed database offering.\n\nYou can deploy, say, [vault](https://www.vaultproject.io/) as helm charts inside your kubernetes cluster. Or you can use your cloud providers secret store solution such as:\n\n* Alibaba Cloud KMS Secret Manager\n* Amazon Secret Manager\n* Azure Key Vault\n* GCP Secret Manager\n\nHowever installing a chart in kubernetes is a very different thing to having a fully managed service which considers things like:\n\n* backups and replication of state across regions\n* upgrades and schema migration\n                  \nSo we recommend using the cloud provider implementation for things like databases, secret stores, log storage and and other services as it removes undifferentiated heavy lifting. \n\n[More background here](/v3/devops/cloud-native/#prefer-cloud-over-kubernetes)\n\nNote that we absolutely love [kubernetes](https://kubernetes.io/); this pattern is not in any way a criticism of kubernetes. Its more that adopting this pattern is about outsourcing work work in managing, migrating, backing up and restoring persistent state to your cloud provider.",
            "content/en/v3/devops/patterns/preview_environments.md": "---\ntitle: Preview Environments\nlinktitle: Preview Environments\ndescription: Preview your changes in temporary environments before you merge them\ntype: docs\nweight: 200\n---\n\nIf you are using [Trunk Based Development](/v3/devops/patterns/trunk_based_development/) you want to keep the main branch clean and ready to release at all times so you can quickly get important bug fixes out.\n                                                                                                       \nBut how can you shift left and do more testing on changes before you are ready to merge to the main branch?\n\nThe idea of a `Preview Environment` is to spin up a temporary environment to deploy the code from a Pull Request before the change is merged to get fast feedback from your team on the change and to shift left and get more testing done before you agree to merge the change.\n\nIn Jenkins X we automate a [Preview Environment](/v3/develop/environments/preview/) is created on all Pull Requests which builds the preview image/chart, spins up a temporary namespace and deploys the application then comments on the Pull Request details.\n\n### Using Previews for shift left system testing\n\nYou can also use [additional pipeline steps](/v3/develop/environments/preview/#additional-preview-steps) after the Preview has been deployed to run different kinds of system or integration testing.\n\nYou may also wish to [add additional dependencies](/v3/develop/environments/preview/#adding-more-resources) to your preview environment (defined in `preview/helmfile.yaml` in your repository).\n",
            "content/en/v3/devops/patterns/pull_dependent_versions.md": "---\ntitle: Pull Dependent Versions\nlinktitle: Pull Dependent Versions\ndescription: Pull dependent versions into your git repository\ntype: docs\nweight: 30\n---\n\nWhen you [Version Everything](/v3/devops/patterns/version_everything) you need a way to pull dependent versions into your git repositories.\n\nUsing the **pull** model means that you periodically create Pull Requests on your git repositories to upgrade dependencies.\n\nOne solution is to use a tool tool like [dependabot](https://dependabot.com/).\n\nOr you can run periodic jobs via the [updatebot plugin](https://github.com/jenkins-x-plugins/jx-updatebot) to create pull requests.\n\ne.g. we automatically pull upgrades of chart versions into our Version Stream via [this github action](https://github.com/jenkins-x/jx3-versions/blob/master/.github/workflows/update-charts.yml) \n\nCreating Pull Requests to modify versions means the team looking after the repository can decide when and how to merge the Pull Request; e.g. periodically or in quiet times when there are no serious production issues to resolve.\n\n",
            "content/en/v3/devops/patterns/push_version_changes.md": "---\ntitle: Push Version Changes\nlinktitle: Push Version Changes\ndescription: Push Version Changes into dependent repositories\ntype: docs\nweight: 35\n---\n\nWhen you [Version Everything](/v3/devops/patterns/version_everything) you need a way to pull dependent versions into your git repositories.\n\nUsing the **push** model means that as you create a new versioned release of an artifact (library, binary, image, chart or whatever) you generate the necessary Pull Requests in your downstream repositories to upgrade to use this version.\n\nWe do this in Jenkins X using the [updatebot plugin](https://github.com/jenkins-x-plugins/jx-updatebot) as part of a release pipeline. The [go-plugin release pipelines](https://github.com/jenkins-x/jx3-pipeline-catalog/blob/master/packs/go-plugin/.lighthouse/jenkins-x/release.yaml#L38) pipelines have a `promote-release` which uses the updatebot plugin to promote the new version to other git repositories. Here are some examples:\n\n* the [jenkins-x/lighthouse](https://github.com/jenkins-x/lighthouse)  repository has this [.jx/updatebot.yaml](https://github.com/jenkins-x/lighthouse/blob/master/.jx/updatebot.yaml) to update the version stream on a release\n* the [jx-gitops](https://github.com/jenkins-x/jx-gitops) repository has this  [.jx/updatebot.yaml](https://github.com/jenkins-x/jx-gitops/blob/master/.jx/updatebot.yaml) to update the plugin in the jx cli repository\n\nCreating Pull Requests to modify versions means the team looking after the repository can decide when and how to merge the Pull Request; e.g. periodically or in quiet times when there are no serious production issues to resolve.\n",
            "content/en/v3/devops/patterns/trunk_based_development.md": "---\ntitle: Trunk Based Development\nlinktitle: Trunk Based Development\ndescription: Develop on a single trunk branch with Continuous Integration\ntype: docs\nweight: 120\n---\n           \nThis approach is essentially:\n\n* use a single branch for releases\n* work in small batches  \n* use Continuous Integration to frequently merge changes to the main branch\n  \nIt is described in the [Accelerate book](/v3/devops/accelerate/). \n\nThe idea is to avoid long term feature branches which have a cost in terms of maintenance and being the opposite of Continuous Integration. \n\nFor more background see the [Trunk Based Development site](https://trunkbaseddevelopment.com/) which has lots of examples and approaches.\n\n\n\n",
            "content/en/v3/devops/patterns/version_everything.md": "---\ntitle: Version Everything\nlinktitle: Version Everything\ndescription: Avoid snapshot or latest images\ntype: docs\nweight: 20\n---\n\nAlways version everything explicitly in git and never use `latest` or `SNAPSHOT` images or artifacts!\n \nThe reason is you never know when a `latest` or `SNAPSHOT` image or artifact will upgrade in any container/pod/process/step in any environment. Its basically random. So not versioning things means random failures.\n\nIf you explicitly version things in all repositories things are stable and repeatable. \n\nIf you are worried about upgrading versions of things over time then look at either tools like [dependabot](https://dependabot.com/) or the [updatebot plugin](https://github.com/jenkins-x-plugins/jx-updatebot) which we use extensively throughout Jenkins X to upgrade versions of libraries, images, binaries etc.\n",
            "content/en/v3/learning-resources/_index.md": "---\ntitle: \"Learning Resources\"\ndate: 2022-01-22\nlinkTitle: \"Learning Resources\"\ntype: docs\ndescription: Learning resources for Jenkins X.\nweight: 400\naliases:\n  - /v3/learning-resources\n---\n\nLearning resources to help you get started with Jenkins X.\n\n### Tutorials/Courses\n\n- [Linux Foundation course](https://training.linuxfoundation.org/training/ci-cd-with-jenkins-x-lfs268/) for Jenkins X.\n",
            "content/en/v3/mlops/_index.md": "---\ntitle: \"MLOps Guide\"\ndate: 2020-03-13T14:57:07Z\nlinkTitle: \"MLOps Guide\"\ntype: docs\ndescription: Using Jenkins X to implement MLOps.\nweight: 320\naliases:\n  - /v3/mlops\n---\n\nJenkins X allows you to treat your Machine Learning and Natural Language Processing assets as first class citizens within your CI/CD eco-system, training, versioning and deploying models as part of your normal release process.",
            "content/en/v3/mlops/data.md": "---\ntitle: \"Managing Data\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Managing Data\"\ndescription: Approaches for working with data.\nweight: 20\ntype: docs\naliases:\n  - /v3/mlops/data\n---\n\nIn most scenarios, you will be expecting to remotely access data hosted elsewhere on your network and can manage this in code as part of your training scripts and service implementations. There are however a couple of situations in which Jenkins X can help you to manage certain types of data.\n\n## Handling data in Buckets\nIf you are working with data in the form of arbitrary files, you can transfer these to your training environment via a Storage Bucket in your Cloud project.\n\nThis usually results in your data being located at a URL thas should be in the form: s3://mybucket/tests/myOrg/myData/trainingset.xml where the protocol is set as appropriate to the Cloud provider you are using. You can then reference this in your training script.\n\nYou must ensure that the data has been uploaded to this bucket prior to starting the training build and should bear in mind that this command copies the specified file from the bucket to the working volume of the build container executing the current build step.\n\n## Working with Volumes\nUnder some circumstances, you may wish to create versioned collections of immutable training data that can be shared across multiple models and which are too large to easily copy from buckets in a timely manner.\n\nUnder these circumstances, it is straightforward to create a named, persistent Kubernetes Volume within your Cloud project, mount it in read/write mode and upload your training data files to it, then unmount it ready for use.\n\nWithin your training pipelines, you can then specify that this volume be mounted during the training build, in read-only mode, in more than one project in parallel.\n\nTo do this, you need to modify your local copy of the pipeline in .lighthouse/jenkins-x/release.yaml in your training projects to reference the `volume` and `volumeMount` config necessary to connect the build container instance to your training data volume.\n\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  creationTimestamp: null\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      resources: {}\n      taskSpec:\n        metadata: {}\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/ml-python-gpu-training/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"0\"\n            limits:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"0\"\n          workingDir: /workspace/source\n          volumeMounts:\n            - name: trainingset\n              mountPath: /trainingset\n              readOnly: true \n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n          resources: {}\n        - name: next-version\n          resources: {}\n        - name: jx-variables\n          resources: {}\n        - name: build-flake8\n          resources: {}\n        - image: ghcr.io/jenkins-x/builder-machine-learning-gpu:0.1.1317\n          name: build-training\n          resources:\n            requests:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"1\"\n            limits:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"1\"\n          script: |\n            #!/bin/sh\n            source /root/.bashrc\n            python3 -m pip install -r ./requirements.txt\n            python3 app.py\n        - name: build-export-model\n          resources: {}\n  podTemplate: \n    volumes:\n      - name: trainingset\n        gcePersistentDisk:\n          pdName: mytrainingvolume01\n          fsType: ext4\n          readonly: true\n  serviceAccountName: tekton-bot\n  timeout: 12h0m0s\nstatus: {}\n```\nNote that it is only possible to simultaneously share volumes that are mounted read-only.",
            "content/en/v3/mlops/gpu.md": "---\ntitle: \"Working with GPUs\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Working with GPUs\"\ndescription: Setting up Jenkins X for use with GPU resources.\nweight: 15\ntype: docs\naliases:\n  - /v3/mlops/gpu\n---\n\nTo use CUDA to accelerate your ML training and services, you first need to set up your Kubernetes cluster to add some physical GPU resources to your nodes.\n\nTo do this, typically you will need to request an allocation of GPU resources from your Cloud provider and then configure an additional Node Pool to provision a set of Nodes such that each Node has access to at least one physical GPU card.\n\nSee the documentation for your Cloud platform for details.\nThe instructions for GCP are here: [https://cloud.google.com/kubernetes-engine/docs/how-to/gpus](https://cloud.google.com/kubernetes-engine/docs/how-to/gpus)\n\nAdditionally, each Node will require a CUDA installation and the drivers appropriate to the physical accelerator cards chosen. Note that this introduces fixed dependencies upon the driver version for your specific hardware and the installed CUDA version that spans the entire Node Pool, impacting every service you deploy to this pool.\n\nBe aware that you will be charged for use of the GPU resources from the point at which each Node starts up, NOT just whilst you are running a training! It is recommended to use elastic node scaling on your pool so that you release GPU resources that are not currently being utilised.\n\nOnce your cluster is configured, you can allocate GPU resources to containers as part of your application config.\n\nFor the training project, you will need to ensure that the build container used has access to GPU resources. This can be provisioned by overriding the pipeline default for the build-training step in that project, like this:\n\n```\n\u279c jx pipeline override\n? pick the pipeline:  postsubmit/release\n? pick the step:   [Use arrows to move, enter to select, type to filter]\n  uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n  next-version\n  jx-variables\n  build-flake8\n> build-training\n  build-export-model\n```\n\nThis will modify your local copy of the pipeline in .lighthouse/jenkins-x/release.yaml like this:\n\n```\napiVersion: tekton.dev/v1beta1\nkind: PipelineRun\nmetadata:\n  creationTimestamp: null\n  name: release\nspec:\n  pipelineSpec:\n    tasks:\n    - name: from-build-pack\n      resources: {}\n      taskSpec:\n        metadata: {}\n        stepTemplate:\n          image: uses:jenkins-x/jx3-pipeline-catalog/tasks/ml-python-gpu-training/release.yaml@versionStream\n          name: \"\"\n          resources:\n            requests:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"0\"\n            limits:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"0\"\n          workingDir: /workspace/source\n        steps:\n        - image: uses:jenkins-x/jx3-pipeline-catalog/tasks/git-clone/git-clone.yaml@versionStream\n          name: \"\"\n          resources: {}\n        - name: next-version\n          resources: {}\n        - name: jx-variables\n          resources: {}\n        - name: build-flake8\n          resources: {}\n        - image: ghcr.io/jenkins-x/builder-machine-learning-gpu:0.1.1317\n          name: build-training\n          resources:\n            requests:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"1\"\n            limits:\n              cpu: \"1\"\n              memory: 4Gi\n              nvidia.com/gpu: \"1\"\n          script: |\n            #!/bin/sh\n            source /root/.bashrc\n            python3 -m pip install -r ./requirements.txt\n            python3 app.py\n        - name: build-export-model\n          resources: {}\n  podTemplate: {}\n  serviceAccountName: tekton-bot\n  timeout: 12h0m0s\nstatus: {}\n\n```\n\nThe first set of resources specified in this file are the default values that are applied to any step that doesn't have a dedicated local resource spec. You can normally leave these as they are. Don't specify a GPU here, or every step will be allocated a GPU unnecessarily, which will be expensive.\n\nThe resources for the step called 'build-training' are the ones that specify the allocation for the container executing your training script. Increase these until your training runs consistently.\n\nTo configure the service project, you can adjust the resource section of the `values.yaml` file in the project chart to set `nvidia.com/gpu: 2` to indicate how many GPU cards to allocate to each Pod instance. Note that you cannot exceed the number of GPUs available to a Node and Pods may become unschedulable if there are insufficient free GPU cards in the pool.\n\nOnce you have deployed a GPU-based service, it will reserve the cards allocated to it, so care is needed to avoid running up unnecessarily large bills by leaving non-essential services or preview environments up.\n\nYou will, of course, have to ensure that your training script and service implementation code are set up to use CUDA features.",
            "content/en/v3/mlops/introduction.md": "---\ntitle: \"Introduction\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Introduction\"\ntype: docs\ndescription: An introduction to MLOps with Jenkins X.\nweight: 1\naliases:\n  - /v3/mlops/introduction\n---\n\n## Understanding MLOps\nWhen we talk about MLOps, what we are referring to is best defined as the extension of the DevOps methodology to include Machine Learning and Data Science assets as first class citizens within the best known methods of DevOps. The aim is to demystify Machine Learning and re-integrate the delivery of technology solutions as a seamless process of product development and deployment.\n\nThe Continuous Delivery Foundation hosts a collaborative Roadmap for MLOps and Jenkins X is committed to implementing features aligned to that model.\n\nSoftware systems including Machine Learning components tend to be decision-making systems rather than just data processing systems and thus are required to be held accountable to much higher standards than most conventional software projects. As a result, it is especially important that release processes associated with these solutions meet the highest levels of quality.\n\nMachine Learning project teams are however often a relatively new addition to many organisations and are sometimes lacking in experience when it comes to delivering solutions into production. MLOps is an approach designed to help bridge the gap between where teams find themselves today and where they need to reach in terms of quality and maturity.\n\nOrganisations pursuing the development of ML products need to be able to manage cost and time to market by optimising the process of taking ML features into production, reducing Lead Time and shortening the feedback loop between production and development for ML assets.\n\nWith Jenkins X, we unify the release cycle for ML and conventional software assets, allowing you to manage your whole solution as part of one standard release process. By doing this, you are able to apply conventional automated testing approaches to your ML assets as well as the rest of your codebase, extending security checks, static analysis, dynamic analysis, dependency scanning and integrity checking to your entire application stack.\n\nMLOps is a framework-agnostic methodology and Jenkins X supports the deployment of ML assets based upon a wide range of different ML frameworks and libraries. We currently support training and deployment of models using both CPU and GPU, across a range of Cloud infrastructure, or in-house.\n\nThe use of MLOps should teach best known methods of applying MLOps. It should be recognised that many customers will be experts in the field of Data Science but may have had relatively little exposure to DevOps or other SDLC principles. To minimise this learning curve, the MLOps features of Jenkins X provide defaults aligned to best practice in production environments, reducing the amount of effort necessary to get working solutions into production reliably.\n\n## What about my Jupyter Notebooks?\nIt is common to teach the basics of Machine Learning using convenient scratchpad environments such as Jupyter Notebooks that facilitate casual experimentation and ease of learning. Such courses rarely however progress on to teaching more advanced topics regarding the challenges of managing real-life software assets in mission-critical situations. This leaves a significant knowledge gap across data science teams that must be filled before products can be safely delivered to customers.\n\nJenkins X seeks to minimise the pain of moving teams beyond the 'training-wheels' environment of scratch-built models, scripted ad-hoc on uncontrolled laptops.\n\nBy providing a consistent, logical and familiar approach to managing all your project assets to the highest standards, it becomes simple to train teams to work collaboratively and effectively at pace.\n\nSimple 'quickstarts' allow teams to create working example projects based upon best practice for managing critical IP that can be extended incrementally to deliver desired funtionality in a safe and friendly manner without relying upon everyone involved having in-depth knowledge of all the aspects of a robust software development lifecycle.\n\nWhen using MLOps features within Jenkins X, ML assets are automatically managed under version control and audit trails maintained such that it is always possible to understand which version of which data set, training script, model or service is deployed in any given production environment and to quickly revert or upgrade to specific versions of assets in the event of a problem.\n\nJenkins X makes it easy to wrap model instances in service implementations so that they can be securely and robustly deployed into application solutions in a way that is resilient and scalable.\n\nBuilt-in release governance processes ensure that all ML assets pass through the same rigourous automated testing and QA processes normally applied to conventional software components, ensuring that you never have to worry about someone's uncontrolled Jupyter Notebook making it into a customer-facing environment.\n\n## Breaking down the New Wall\nThe success of DevOps as an approach is in large part due to the way in which it tore down the wall between software development teams designing new products and operational staff trying to own and run them cost-effectively and safely. Teaching developers to have responsibility for operational concerns and helping operational staff to communicate their requirements to development teams has been instrumental in reducing the time to market for new products.\n\nThe introduction of Machine Learning capabilities through dedicated Data Science teams has created a new silo, a new wall to throw things over and a fresh chorus of \"Well, it worked on my laptop!\" in engineering departments worldwide.\n\nMLOps tears down this new wall to blur the line between Data Scientists, Software Developers, Operational teams and Product Owners, making it faster, safer and cheaper to get AI-driven ideas into the marketplace.",
            "content/en/v3/mlops/mlquickstarting.md": "---\ntitle: \"Using Machine Learning Quickstarts\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"Using ML Quickstarts\"\ndescription: How to use Machine Learning quickstarts.\nweight: 5\ntype: docs\naliases:\n  - /v3/mlops/mlquickstarting\n---\n\nThe Jenkins X MLOps Quickstarts Library provides template projects to make it quick and easy to set up everything you need to get started with a building a new ML-based asset.\n\nEach quickstart project comprises two repositories, one which contains your training script and a second which takes the final model you have trained and wraps it as a RESTful service for deployment into your overall solution.\n\n## Getting started\nYou can create an instance of a project using the command:\n\n```\n> jx project mlquickstart\n```\nand follow the instructions to select a template from the list. You will need to specify which git account to use and a name for the project, which will become the prefix for the two git repositories that will be created for you.\n\nOnce the quickstart process completes, you will find two new projects in your current folder, one with the suffix `-training` and the other with the suffix `-service`.\n\nThe training project contains an example training script and some tests for the class of ML solution you selected. All the quickstarts are working examples, so you can see the solution in action and then start to modify it to meet your desired outcome.\n\nThe service project is designed to take your model and make it easy to wrap it in a microservice so you can deploy it into your application. Notice that at this stage, there is no model in this service project because you haven't trained it yet.\n\nIf you check the Git account you used to create the quickstart project, you will see that the two folders have been created as repositories and linked to your Jenkins X cluster.\n\nLooking at your Jenkins X instance, you should be able to see that two builds have started for these projects. The service build will probably complete first, and it will create an instance of a new microservice in your staging environment, but this instance will fail to start and will end up in CrashLoopBackOff at this stage because it is waiting for the model to train.\n\nThe second build is training an example model. When this completes successfully, it will persist the model in ONNX format and will make a Pull Request against your service project to add the model and the training metrics to your service. If you check the repository for the service, you should be able to see the open PR and can verify the files that have been added.\n\nAt this stage, a preview environment will have been created for the service and you can verify its operation by connecting to it via a browser.\n\nOnce you are happy with the model, merge the PR and the service will be redeployed into staging with the model you trained.\n\n## Customising your project\nNow you are ready to go back to the local copy of your training project and can start editing the training script to change the model.\n\nYou will see that there are several steps annotated in the comments.\n\nThe first step is where you define success criteria for your training. We only want to go to the effort of deploying an instance of our model if we consider it sufficiently accurate for our purposes so you should always create one or more metrics by which you will later judge whether your training run was successful.\n\nIn the second step, we define the code to train your model. Feel free to change this to do what you want it to do.\n\nIn the third step is where we evaluate the trained model we hold in memory against the criteria you specified earlier. You are free to modify this code in line with your desired metrics.\n\nStep four is only executed if your model passes the success threshold. If it does not, the training build is marked as 'failed' and stops. Within this step, we convert the in-memory model into ONNX format and persist it temporarily to the local filesystem of the container in which the training build is running. We also write any metrics data and plots we wish to persist into a folder called 'metrics'.\n\nThe training script exits at this point, however the Jenkins X pipeline for the training build will take the ONNX model and anything you placed in the 'metrics' folder and will create a PR against the service repo as shown earlier.\n\n## Starting a training run\nTo trigger a training run after modifying the training script, you need to commit your changes to the remote repository associated with this project:\n\n```\n> git add app.py\n> git commit -m \"feat: Added new training feature...\"\n> git push\n```\n\nThis will trigger Jenkins X to start a new training run which you can monitor via the UI or with:\n\n```\n> jx get build logs\n```\n\n## Additional training runs\nIf you would like to trigger a training run to start again without modifying the script, perhaps because your initial run failed to meet your success criteria you can run:\n\n```\n> jx start pipeline --branch master\n```\nand select the name of the training project you would like to trigger.\n\n## Versioned assets\nEvery successful model trained creates a new version of your microservice. This enables you to do things like promoting an initial version of a model to your staging environment so that others on the team can focus on integrating your ML component with the rest of the application whilst you test alternate versions of the model in your preview environment to optimise performance. Once you are happy with your optimised model, you can promote it for integration by merging the Pull Request.\n\nYou can also use the git repository to go back to previous model instances in the event that you need to investigate any issues that might occur with deployed versions of earlier code. This gives you full traceability and an audit trail for your models.\n\nShould you need to revert a model from a staging or production environment, you can simply change the revision number of the service application in the GitOps repo for the target environment to the last known good instance and commit your changes. Jenkins X will then update your environment as necessary.",
            "content/en/v3/mlops/mlquickstarts.md": "---\ntitle: \"Finding a Machine Learning Quickstart\"\ndate: 2020-03-13T15:03:05Z\nlinktitle: \"ML Quickstarts Directory\"\ndescription: Directory of template Machine Learning projects.\nweight: 10\ntype: docs\naliases:\n  - /v3/mlops/mlquickstarts\n---\n\nThis directory is intended to help you find your way around the Jenkins X MLOps Quickstarts Library and get you up and running rapidly with a template project based around the class of Machine Learning approach you wish to work with and the language and framework you prefer.\n\nThe directory is divided by target programming language (Python only at this stage, but with additional quickstarts to follow in other languages) and then by ML framework.\n\nThe section for each framework is then divided by class of ML approach and CPU/GPU-based solutions.\n\nTo create an instance of a project, find the title of the particular quickstart you wish to use and then select this from the list that is presented when you use the command:\n\n```\n> jx project mlquickstart\n```\n\n\n**Python Quickstarts:**\n---\n<img src=\"https://avatars-04.gitter.im/group/iv/4/57542d4cc43b8c601977b6ad?s=48\" alt=\"LightGBM Logo\" width=\"40\" align=\"right\">\n\n---\n## LightGBM\nLightGBM is a gradient boosting framework that uses tree based learning algorithms. It is designed to be distributed and efficient with the following advantages:\n\n- Faster training speed and higher efficiency.\n- Lower memory usage.\n- Better accuracy.\n- Support of parallel and GPU learning.\n- Capable of handling large-scale data.\n\nLightGBM can outperform existing boosting frameworks on both efficiency and accuracy, with significantly lower memory consumption.\n\nDocumentation is at [https://lightgbm.readthedocs.io/](https://lightgbm.readthedocs.io/)\n\n**CPU-based:**\n\n`ML-python-lightgbm-cpu` is a project for training and deploying tree based learning algorithms using the LightGBM library.\n\nTraining Script : [ML-python-lightgbm-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-lightgbm-cpu-training)\n\nService Wrapper : [ML-python-lightgbm-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-lightgbm-cpu-service)\n\n---\n<img src=\"https://pytorch.org/assets/images/logo-dark.svg\" alt=\"PyTorch Logo\" width=\"140\" align=\"right\">\n\n## PyTorch\nPytorch is a rich ecosystem of tools, libraries, and more to support, accelerate, and explore AI development.\n\nDocumentation is at [https://pytorch.org/](https://pytorch.org/)\n### Convolutional Neural Networks\n**CPU-based:**\n\n`ML-python-pytorch-cpu` is a simple example demostrating the use of Pytorch with a Convolutional Neural Network (AlexNet) for image recognition.\n\nTraining Script : [ML-python-pytorch-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-cpu-training)\n\nService Wrapper : [ML-python-pytorch-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-cpu-service)\n\n\n### Multi-layer Perceptron Networks\n**CPU-based:**\n\n`ML-python-pytorch-mlpc-cpu` is a project for training and deploying Multi-layer Perceptron Networks in Pytorch.\n\nTraining Script : [ML-python-pytorch-mlpc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training)\n\nService Wrapper : [ML-python-pytorch-mlpc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service)\n\n**GPU-based:**\n\n`ML-python-pytorch-mlpc-gpu` is a project for training and deploying Multi-layer Perceptron Networks in Pytorch with CUDA acceleration.\n\nTraining Script : [ML-python-pytorch-mlpc-gpu-training](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training)\n\nService Wrapper : [ML-python-pytorch-mlpc-gpu-service](https://github.com/machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service)\n\n---\n<img src=\"https://scikit-learn.org/stable/_static/scikit-learn-logo-small.png\" alt=\"Scikit Logo\" width=\"140\" align=\"right\">\n\n\n## Scikit-Learn\nSimple and efficient tools for predictive data analysis, accessible to everybody, and reusable in various contexts. \n\nBuilt on NumPy, SciPy, and matplotlib\n\nDocumentation is at: [https://scikit-learn.org/](https://scikit-learn.org/)\n\n### K Nearest Neighbor Classification\n**CPU-based:**\n\n`ML-python-sklearn-knc-cpu` is a project for training and deploying K Nearest Neighbor Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-knc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-knc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-knc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-knc-cpu-service)\n\n### Naive Bayes Classification\n**CPU-based:**\n\n`ML-python-sklearn-nbc-cpu` is a project for training and deploying Naive Bayes Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-nbc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-nbc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-nbc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-nbc-cpu-service)\n\n### Random Forest Classification\n**CPU-based:**\n\n`ML-python-sklearn-rfc-cpu` is a project for training and deploying Random Forest Classifications using the SciKit-Learn library\n\nTraining Script : [ML-python-sklearn-rfc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rfc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-rfc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rfc-cpu-service)\n\n### Ridge Classification\n**CPU-based:**\n\n`ML-python-sklearn-rc-cpu` is a project for training and deploying Random Forest Classification using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-rc-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rc-cpu-training)\n\nService Wrapper : [ML-python-sklearn-rc-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-rc-cpu-service)\n\n### Support Vector Machines\n**CPU-based:**\n\n`ML-python-sklearn-svm-cpu` is a project for training and deploying Support Vector Machines using the SciKit-Learn library.\n\nTraining Script : [ML-python-sklearn-svm-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-sklearn-svm-cpu-training)\n\nService Wrapper : [ML-python-sklearn-svm-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-sklearn-svm-cpu-service)\n\n---\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2d/Tensorflow_logo.svg\" alt=\"TensorFlow Logo\" width=\"140\" align=\"right\">\n\n## TensorFlow\nTensorFlow is an end-to-end open source platform for machine learning. It has a comprehensive, flexible ecosystem of tools, libraries and community resources that lets researchers push the state-of-the-art in ML and developers easily build and deploy ML powered applications.\n\nDocumentation is at [https://www.tensorflow.org/](https://www.tensorflow.org/)\n\n### Classification (MNIST)\n**CPU-based:**\n\n`ML-python-tensorflow-mnist-cpu` is a project for training and deploying an MNIST classifier using TensorFlow.\n\nTraining Script : [ML-python-tensorflow-mnist-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-cpu-training)\n\nService Wrapper : [ML-python-tensorflow-mnist-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-cpu-service)\n\n**GPU-based:**\n\n`ML-python-tensorflow-mnist-gpu` is a project for training and deploying an MNIST classifier using TensorFlow with CUDA acceleration.\n\nTraining Script : [ML-python-tensorflow-mnist-gpu-training](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-gpu-training)\n\nService Wrapper : [ML-python-tensorflow-mnist-gpu-service](https://github.com/machine-learning-quickstarts/ML-python-tensorflow-mnist-gpu-service)\n\n---\n<img src=\"https://xgboost.ai/images/logo/xgboost-logo.png\" alt=\"XGBoost Logo\" width=\"140\" align=\"right\">\n\n## XGBoost\nScalable and flexible Gradient Boosting. Supports regression, classification, ranking and user defined objectives.\n\nDocumentation is at: [https://xgboost.readthedocs.io/en/latest/](https://xgboost.readthedocs.io/en/latest/)\n\n### Gradient Boosted Decision Trees\n**CPU-based:**\n\n`ML-python-xgb-cpu` is a project for training and deploying gradient boosted decision trees using the XGBoost library.\n\nTraining Script : [ML-python-xgb-cpu-training](https://github.com/machine-learning-quickstarts/ML-python-xgb-cpu-training)\n\nService Wrapper : [ML-python-xgb-cpu-service](https://github.com/machine-learning-quickstarts/ML-python-xgb-cpu-service)\n\n",
            "content/es/about/_index.md": "---\ntitle: Acerca de\nlinktitle: Acerca de\ndescription: Un resumen de los conceptos en Jenkins X\ntype: docs\nmenu:\n  main:\n    weight: 10\ncascade:\n  type: docs\n---\n\n## Concepts\n---\n\nJenkins X est\u00e1 dise\u00f1ado para simplificar el trabajo de los desarrolladores seg\u00fan los principios y las buenas pr\u00e1cticas de DevOps. Los enfoques adoptados se basan en la investigaci\u00f3n exhaustiva realizada para el libro [*ACCELERATE: Building and Scaling High Performing Technology Organsiations*](https://goo.gl/vZ8BFN). Puedes leer por qu\u00e9 usamos [Accelerate](/about/overview/accelerate/) como base para los principios de Jenkins X.\n\n## Principios\n---\n\n*\"DevOps es un conjunto de pr\u00e1cticas destinadas a reducir el tiempo entre la confirmaci\u00f3n de un cambio en un sistema y el momento en que se aplica en producci\u00f3n, al tiempo que garantiza una alta calidad.\"*\n\nLos objetivos de los proyectos DevOps son:\n\n* R\u00e1pidos tiempos de comercializaci\u00f3n\n* Mejoras en la frecuencia de despliegues\n* Disminuci\u00f3n de tiempo entre correcciones\n* Disminuci\u00f3n del \u00edndice de errores por liberaciones\n* Aumento del Tiempo Medio de recuperaci\u00f3n\n\nLos equipos de alto rendimiento deber\u00edan poder desplegarse varias veces al d\u00eda en comparaci\u00f3n con el promedio de la industria que cae entre una vez por semana y una vez por mes.\n\nEl tiempo de espera para que el c\u00f3digo migre de 'c\u00f3digo comprometido' a 'c\u00f3digo en producci\u00f3n' debe ser inferior a una hora y la tasa de falla de cambio debe ser inferior al 15%, en comparaci\u00f3n con un promedio de entre 31 y 45%.\n\nEl tiempo medio para recuperarse de una falla tambi\u00e9n debe ser inferior a una hora.\n\nJenkins X ha sido dise\u00f1ado desde los primeros principios para permitir que los equipos apliquen las mejores pr\u00e1cticas de DevOps para alcanzar los objetivos de rendimiento m\u00e1s importantes de la industria.\n\n## Pr\u00e1cticas\n---\nLas siguientes mejores pr\u00e1cticas son consideradas clave para manjar una estrategia exitosa de DevOps:\n\n* Arquitectura con Bajo Acoplamiento\n* Auto-servicio de Configuraci\u00f3n\n* Abastecimiento Autom\u00e1tico\n* Construcci\u00f3n, Integraci\u00f3n y Entrega Continuas\n* Gesti\u00f3n Autom\u00e1tica de Liberaciones\n* Pruebas Incrementales\n* Configuraci\u00f3n de Infraestructura como C\u00f3digo\n* Gesti\u00f3n de la Configuraci\u00f3n Integral\n* Desarrollo basado en un troncos/bases y caracter\u00edsticas con marcas\n\nJenkins X re\u00fane una serie de metodolog\u00edas y componentes ya existentes en un enfoque integrado que minimiza la complejidad.\n\n## Arquitectura\n\nJenkins X se basa en el modelo DevOps de arquitecturas con bajo acoplamiento y est\u00e1 dise\u00f1ado para ayudar a desplegar grandes cantidades de microservicios distribuidos de manera repetible y manejable a lo largo de m\u00faltiples equipos.\n\n<img src=\"/images/jx-arch.png\" class=\"img-thumbnail\">\n\n### Modelo conceptual\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## Construyendo Bloques\n\nJenkins X se basa en los siguientes principales componentes:\n\n### Kubernetes & Docker\n---\n\nEn el coraz\u00f3n del sistema est\u00e1 Kubernetes, que se ha convertido en la plataforma de infraestructura virtual de facto para DevOps. Todos los principales proveedores de Cloud ahora ofrecen Kubernetes como servicio bajo demanda y la plataforma tambi\u00e9n se puede instalar internamente en una infraestructura privada, si es necesario. Los entornos de prueba tambi\u00e9n se pueden crear en el hardware de desarrollo local utilizando el instalador de Minikube.\n\nFuncionalmente, la plataforma Kubernetes extiende los principios b\u00e1sicos de los Contenedores proporcionados por Docker para abarcar m\u00faltiples Nodos f\u00edsicos.\n\nEn resumen, Kubernetes proporciona una infraestructura virtual homog\u00e9nea que se puede escalar din\u00e1micamente agregando o eliminando nodos. Cada nodo participa en un \u00fanico espacio grande de red virtual privada plana.\n\nLa unidad de despliegue en Kubernetes es el Pod, que comprende uno o m\u00e1s contenedores Docker y algunos metadatos. Todos los contenedores dentro de un Pod comparten la misma direcci\u00f3n IP virtual y espacio de puerto. Los despliegues dentro de Kubernetes son declarativos, por lo que el usuario especifica el n\u00famero de instancias de una versi\u00f3n determinada de un Pod que se desea desplegar y Kubernetes calcula las acciones necesarias para pasar del estado actual al estado deseado mediante el despliegue o eliminaci\u00f3n de Pods en todos los nodos. La decisi\u00f3n de d\u00f3nde se colocar cada instancia de Pods est\u00e1 influenciada por los recursos disponibles, los recursos deseados y la coincidencia de etiquetas. Una vez desplegados, Kubernetes se compromete a garantizar que el n\u00famero deseado de Pods de cada tipo permanezca operativo realizando controles de estado peri\u00f3dicos y finalizando/reemplazando los Pods que no responden.\n\nPara imponer cierta estructura, Kubernetes permite la creaci\u00f3n de espacios de nombres virtuales que se pueden utilizar para separar los pods l\u00f3gicamente y para asociar potencialmente grupos de pods con recursos espec\u00edficos. Los recursos en un espacio de nombres pueden compartir una pol\u00edtica de seguridad \u00fanica, por ejemplo. Se requiere que los nombres de recursos sean \u00fanicos dentro de un espacio de nombres, pero se pueden reutilizar en espacios de nombres.\n\nEn el modelo Jenkins X, un Pod equivale a una instancia desplegada de un Microservicio (en la mayor\u00eda de los casos). Cuando se requiere el escalado horizontal del Microservicio, Kubernetes permite que se desplieguen m\u00faltiples instancias id\u00e9nticas de un Pod determinado, cada una con su propia direcci\u00f3n IP virtual. Estos se pueden agregar en un \u00fanico punto final virtual conocido como Servicio que tiene una direcci\u00f3n IP \u00fanica y est\u00e1tica y una entrada DNS local que coincide con el nombre del Servicio. Las llamadas al Servicio se reasignan din\u00e1micamente a la IP de una de las instancias de Pod saludables de forma aleatoria. Los servicios tambi\u00e9n se pueden usar para reasignar puertos. Dentro de la red virtual de Kubernetes, se puede hacer referencia a los servicios con un nombre de dominio completo en este formato: `<service-name>.<namespace-name>.svc.cluster.local`, que se puede acortar a `<service-name>.<namespace-name>` o simplemente `<service-name>` en el caso de servicios que se encuentran dentro del mismo espacio de nombres. Por lo tanto, un servicio RESTful llamado 'payments' desplegado en un espacio de nombres llamado 'finance' podr\u00eda referirse en c\u00f3digo a trav\u00e9s de `http://payments.finance.svc.cluster.local`, `http://payments.finance` o simplemente `http://payments`, dependiendo de la ubicaci\u00f3n del c\u00f3digo donde se hace la llamada.\n\nPara acceder a los Servicios desde fuera de la red local, Kubernetes necesita la creaci\u00f3n de un Ingress para cada Servicio. La forma m\u00e1s com\u00fan de hacerlo es utilizando uno o m\u00e1s balanceadores de carga con direcciones IP est\u00e1ticas, que se encuentran fuera de la infraestructura virtual de Kubernetes y redirigen las solicitudes de red a los servicios internos asignados. Al crear una entrada DNS externa para la direcci\u00f3n IP est\u00e1tica del balanceador de carga, es posible asignar servicios a nombres de dominio externos correctamente verificados. Por ejemplo, si nuestro balanceador de carga est\u00e1 asignado a `*.jenkins-x.io`, nuestro servicio de 'payments' podr\u00eda quedar expuesto como `http://payments.finance.jenkins-x.io`.\n\nKubernetes representa una plataforma poderosa en constante mejora para desplegar servicios a gran escala, pero tambi\u00e9n es compleja de entender y puede ser dif\u00edcil de configurar correctamente. Jenkins X trae a Kubernetes un conjunto de acuerdos predeterminados y algunas herramientas simplificadas con el objetivo de optimizar los prop\u00f3sitos de DevOps y de gestionar los servicios de bajo-acoplamiento.\n\nLa herramienta de l\u00ednea de comandos `jx` proporciona una forma simple de realizar operaciones comunes en instancias de Kubernetes, como ver registros y conectarse a instancias de contenedor. Adem\u00e1s, Jenkins X ampl\u00eda la convenci\u00f3n de Kubernetes Namespace para crear entornos (Environments) que se pueden encadenar entre s\u00ed y formar una jerarqu\u00eda de promoci\u00f3n en los flujos de liberaci\u00f3n.\n\nUn Entorno (Environment) en Jenkins X puede representar un entorno de infraestructura virtual como Dev, Staging, Production, etc para un equipo de desarrollo determinado. Las reglas de promoci\u00f3n entre entornos se pueden definir para que las versiones se puedan mover de forma autom\u00e1tica o manual a trav\u00e9s de los diferentes flujos (pipelines). Cada entorno se gestiona siguiendo la metodolog\u00eda GitOps: el estado deseado de un entorno se mantiene en un repositorio de Git y la confirmaci\u00f3n o la reversi\u00f3n de los cambios en el repositorio desencadena un cambio de estado asociado en el entorno dado en Kubernetes.\n\nLos cl\u00fasteres de Kubernetes se pueden crear directamente utilizando el comando `jx create cluster`, lo que facilita la reproducci\u00f3n de cl\u00fasteres en caso de fallo. Del mismo modo, la plataforma Jenkins X se puede actualizar en un cl\u00faster existente utilizando `jx upgrade platform`. Jenkins X admite trabajar con m\u00faltiples cl\u00fasteres de Kubernetes a trav\u00e9s de `jx context` y cambiar entre m\u00faltiples entornos dentro de un cl\u00faster con `jx environment`.\n\nLos desarrolladores deben conocer las capacidades que proporciona Kubernetes para distribuir datos de configuraci\u00f3n y credenciales de seguridad en todo el cl\u00faster. Los ConfigMaps se puede utilizar para crear conjuntos de llave/valor para metadatos de configuraci\u00f3n no confidenciales y los Secrets realizan un mecanismo similar pero encriptado para credenciales de seguridad y tokens. Kubernetes tambi\u00e9n proporciona un mecanismo para especificar Cuotas de recursos para los Pods, esto es necesario para optimizar los despliegues en todos los nodos y que discutiremos en breve.\n\nPor defecto, el estado del Pod es ef\u00edmero. Cualquier dato escrito en el sistema de archivos local de un Pod se pierde cuando se elimina ese Pod. Los desarrolladores deben tener en cuenta que Kubernetes puede decidir de forma unilateral eliminar instancias de Pods y volver a crearlos en cualquier momento como parte del proceso general de balanceo de carga para los nodos, por lo que los datos locales pueden perderse en cualquier momento. Cuando se requieren datos con estado, los vol\u00famenes persistentes deben declararse y montarse dentro del sistema de archivos de Pods espec\u00edficos.\n\n### Helm y Draft\n---\nLa interacci\u00f3n directa con Kubernetes implica realizar configuraciones de forma manual utilizando la l\u00ednea de comandos `kubectl` o pasando varios tipos de datos YAML a la API. Esto puede ser complejo y est\u00e1 abierto a la aparici\u00f3n de errores humanos. De acuerdo con el principio de DevOps de 'configuraci\u00f3n como c\u00f3digo', Jenkins X aprovecha Helm y Draft para crear bloques at\u00f3micos de configuraci\u00f3n para sus aplicaciones.\n\nHelm simplifica la configuraci\u00f3n de Kubernetes a trav\u00e9s del concepto de Cartas N\u00e1uticas (Chart en ingl\u00e9s). El chart es un conjunto de archivos que juntos especifican los metadatos necesarios para implementar una aplicaci\u00f3n o servicio en Kubernetes. En lugar de mantener una serie de archivos YAML repetitivos basados en la API de Kubernetes, Helm utiliza un lenguaje de plantillas para crear las especificaciones YAML necesarias a partir de un \u00fanico conjunto compartido de valores. Esto hace posible especificar aplicaciones Kubernetes reutilizables donde la configuraci\u00f3n se puede modificada en el momento del despliegue.",
            "content/es/about/maturity.md": "---\ntitle: Madurez de las Funcionalidades\nlinktitle: Madurez de las Funcionalidades\ndescription: Definiciones y procesos sobre c\u00f3mo las funcionalidades maduran o son obsoletas\nweight: 50\n---\n\n# Niveles de Madurez y Definiciones\n\nLas funcionalidades generalmente pasar\u00e1n por los siguientes niveles de madurez (aunque algunas nunca pueden ser obsoletas)\n\n1. Experimental - en ingl\u00e9s Experimental\n2. Estable - en ingl\u00e9s Stable\n3. Producci\u00f3n - en ingl\u00e9s Production\n4. Obsoleta - en ingl\u00e9s Deprecated\n\nCada uno de los niveles se detalla a continuaci\u00f3n, incluidas las pasos por las que debe pasar una funcionalidad para \"subir de nivel\"\n\n## Experimental\n\n{{< alert >}}\nTL;DR: \u00daselo bajo su propio riesgo\n{{< /alert >}}\n\nEste ser\u00eda el nivel inicial para la mayor\u00eda de las nuevas funcionalidades. Es probable que sea el primer impulso de algo que al menos funcione para el contribuyente. No se espera que las funcionalidades en este nivel cumplan con los requisitos, y podr\u00eda ser una sugerencia de c\u00f3mo abordar un problema determinado. Tambi\u00e9n podr\u00eda ser una cosa muy bien estructurada, pensada y pulida que en su mayor\u00eda solo necesita ser examinada por otros antes de ser elevada en madurez.\n\nLa conclusi\u00f3n principal para este nivel de madurez es que existe el riesgo de que las cosas cambien (configuraci\u00f3n/alcance/comportamiento/etc.) y probablemente no sea algo en lo que deba confiar en un entorno de producci\u00f3n a menos que sienta que sabe lo que est\u00e1 haciendo.\n\n## Estable\n\n{{< alert >}}\nTL;DR: Funcionalidad completa; necesita m\u00e1s pruebas/documentaci\u00f3n\n{{< /alert >}}\n\nDespu\u00e9s de haber estado en el estado Experimental durante un per\u00edodo de tiempo, y la funci\u00f3n ha recibido comentarios de otros, etc., eventualmente deber\u00eda alcanzar un estado de funci\u00f3n completa, donde se puede esperar que funcione en la mayor\u00eda de las circunstancias. Es posible que las pruebas automatizadas a\u00fan sean pocas y que la documentaci\u00f3n tambi\u00e9n deba desarrollarse un poco m\u00e1s.\n\nPara que una funcionalidad alcance este nivel, deber\u00eda haber llegado a un punto en el que no se espera que cambien varios \"contratos\" (configuraci\u00f3n, API, etc.); al menos no dr\u00e1sticamente. Tambi\u00e9n debe tener algunas pruebas automatizadas y documentaci\u00f3n; al menos para los flujos principales. Lo que deber\u00eda permanecer es, en su mayor\u00eda, solo correcciones de errores, pruebas y la documentaci\u00f3n completa.\n\n## Producci\u00f3n\n\n{{< alert >}}\nTL;DR: Nivel de produccion. Bien probado y documentado\n{{< /alert >}}\n\nEste es el nivel final de madurez, y como consumidor de una funcionalidad estable, debe esperar que sea s\u00f3lido, bien probado en varias configuraciones/entornos y bien documentado.\n\nLas funcionalidades en nivel de producci\u00f3n ciertamente pueden cambiar, pero los cambios deben anunciarse en el registro de cambios y, posiblemente, en el blog, y tambi\u00e9n deben expresarse claramente en un n\u00famero de versi\u00f3n (la versi\u00f3n principal/secundaria/parche aumenta cuando sea apropiado). Si una caracter\u00edstica de nivel de producci\u00f3n ha cambiado (modificado la configuraci\u00f3n de instalaci\u00f3n, una nueva opci\u00f3n, etc.) deber\u00eda ser f\u00e1cil para un usuario estar al tanto de esto, antes de actualizar a la nueva versi\u00f3n que incluye los cambios.\n\n## Obsoleta\n\n{{< alert >}}\nTL;DR: Esto se eliminar\u00e1 pronto. No usar\n{{< /alert >}}\n\nEventualmente, algunas funcionalidades quedar\u00e1n en desuso por cualquier raz\u00f3n (se encontr\u00f3 un mejor enfoque, el problema que resolvi\u00f3 ya no es un problema, etc.). Sin embargo, esto no deber\u00eda suceder durante la noche, y las obsolescencias deben anunciarse en el registro de cambios y en el blog con al menos un mes de antelaci\u00f3n.\n\nUna vez que una funci\u00f3n se ha anunciado como obsoleta, se marcar\u00e1 como tal (ver m\u00e1s abajo para m\u00e1s detalles) y la eliminaci\u00f3n final tambi\u00e9n se expresar\u00e1 claramente en un n\u00famero de versi\u00f3n (protuberancias de versi\u00f3n mayor/menor cuando corresponda).\n\n# Funciones Experimenales\n\nPara ayudar a aclarar qu\u00e9 funcionalidades son experimentales y cu\u00e1les son estables/producci\u00f3n, puede consultar la documentaci\u00f3n (este sitio) o el comando `jx --help`.\n\nEl sitio de documentaci\u00f3n tendr\u00e1 banderas como esta:\n\n{{< alert color=\"warning\" >}}\nExperimental\n{{< /alert >}}\n\nEl comando `--help` incluir\u00e1 la informaci\u00f3n en la descripci\u00f3n de un comando, de esta forma:\n\n```sh\nInstalling:\n  profile          Set your jx profile\n  boot             (Experimental) Boots up Jenkins X in a Kubernetes cluster using GitOps and a Jenkins X Pipeline\n  install          (Stable) Install Jenkins X in the current Kubernetes cluster\n  .\n  .\n```\n\nLas funciones/comandos de nivel de producci\u00f3n no se marcar\u00e1n espec\u00edficamente.\n\n{{< alert color=\"warning\" >}}\nEn este punto, estas marcas no se han aplicado universalmente. En caso de duda, pregunte en el canal slack `# jenkins-x-user`\n{{< /alert >}}\n\n## Acceso a Funciones Experimentales\n\nComo podr\u00eda involucrarse un poco con algunas funcionalidades experimentales, debe permitir espec\u00edficamente su uso; si no, simplemente ser\u00e1n ignorados.\n\nPara habilitar las funciones experimentales, realice una de las siguientes acciones (seg\u00fan d\u00f3nde necesite acceder a ellas)\n\n### JX Boot\n\nActualice su configuraci\u00f3n JX Boot para incluirlas a trav\u00e9s de: `allow-experimental: true`\n\n### jx CLI\n\nAdicione `--allow-experimental` al comando para utilizar las funciones experimentales\n\n# Funcionalidades Obsoletas\n\nPara resaltar las funcionalidades obsoletas y hacer que sea f\u00e1cil ver cu\u00e1les evitar, la documentaci\u00f3n (este sitio) incluir\u00e1 una advertencia como esta:\n\n{{< alert color=\"warning\" >}}\nObsoleta en jx desde 2.0.134. Ser\u00e1 eliminada en el 2 de diciembre del 2019.\n{{< /alert >}}\n\nen p\u00e1ginas que se refieren a funciones obsoletas. La advertencia indicar\u00e1 la versi\u00f3n donde la funci\u00f3n se detendr\u00e1/dejar\u00e1 de incluirse.\n\nDe manera similar a los comandos experimentales y estables, el comando `jx --help` resaltar\u00e1 comandos obsoletos con `(DEPRECATED)` en la descripci\u00f3n del comando.",
            "content/es/blog/_index.md": "---\ntitle: \"Jenkins X Blog\"\nlinkTitle: \"Blog\"\nmenu:\n  main:\n    weight: 30\n---\n\nAlso see [what others are writing about Jenkins X on the web](/docs/resources/demos-talks-posts/articles/) and [Talks and Conferences](/docs/resources/demos-talks-posts/talks/)\n",
            "content/es/blog/news/_index.md": "---\ntitle: \"News About Jenkins X\"\nlinkTitle: \"News\"\nweight: 20\n---\n\n\n",
            "content/es/blog/news/jenkins-x-new-logo.md": "---\ntitle: \"A New Logo for Jenkins X\"\ndate: 2019-07-31T07:36:00+02:00\ndescription: >\n    A new logo for Jenkins X\ncategories: [blog]\nkeywords: []\nslug: \"new-logo-jenkins-x\"\nauthor: tracymiranda\n---\nBack in March 2018, the Jenkins X project burst onto the scene as the Jenkins counterpart for automated CI/CD for Kubernetes. As part of that launch featured the logo: a variation of the Jenkins logo, featuring a pipe-smoking ship captain with Kubernetes logo on his cap.\n\nIn software, we like to say that naming is hard - because it is. Another thing that is also hard is trying to capture the essence of a project in a logo. Logos pack a lot of meaning into a small space. Icons, such as the Jenkins logo, establish a strong emotional connection with many developers. So with that in mind we always listened closely to feedback on the new logo and how people perceive the project as a result of it.\n\n## Why we are changing the logo\nIn listening to various types of feedback from all sorts of different sources we heard many positive things but also some problems and confusion were highlighted.\n\n* Not everyone was a fan of the logo and we heard quite a few comments back about aspects that people didn\u2019t like about it, with the \u2018pipe-smoking\u2019 featuring high on that list.\n* Confusion with Jenkins project - we also saw that the logo was more in keeping with A other Jenkins mascots, which led to confusion about what kind of project Jenkins X is - some perceived it as another plugin in the ecosystem.\n* We also heard that use of the Kubernetes logo was confusing or perhaps not completely within the remit of the Kubernetes logo guidelines.\n* From a practical perspective we also heard that the logo was too detailed and as a result would not work well as an icon, especially for a favicon. It  was seen as more of a mascot than a logo.\n\nWith the setup of the CD.Foundation and Jenkins X being one of the founding projects, distinct from Jenkins, we felt the time was right to address this feedback. So we literally went back to the drawing board to think about what logo could better represent Jenkins X as a project. We thought about what we want people to associate with the project: open source, continuous delivery, speed, automation, stability, teams, etc. We also wanted a logo that could improve representation, so we wanted to avoid a human-based logo that might inadvertently encode gender, age and other factors. Additionally, the 'X' has become a distinct part of the project's identity and so we wanted to really emphasize it in the new logo.\n\n## Designing the new logo & community feedback\nUltimately we focussed on trying to visualize speed and automation which led to the idea of a robot. However, we still wanted to have a nod to the original Jenkins project featured in the logo somehow or the other. We explicitly decided to not stick with the nautical theme traditionally associated with Kubernetes and related projects. We went through a few iterations, refining and cutting down details as we went. The design effort was a close partnership with Craig Ross, Creative Director at the Linux Foundation and his team, who also produced the [CD Foundation](https://cd.foundation/), CNCF, Network Service Mesh, and Tekton brands.\"\n\nAfter the core Jenkins X team had settled on a design they were happy with, we took it to the community for feedback and to address some of the details. We had alot of feedback, including all the things it reminded folks of (an upside-down koala, Bill Nye, Reddit logo, Flash Gordon, Tekton logo, etc). One overarching consistent theme about the original design was that it did not reflect the friendliness of the community. [Kyounger](https://github.com/jenkins-x/jx/issues/4144#issuecomment-497787629) in particular helped analyse this reaction and went the extra mile to propose a solution. We agreed and loved this suggestion and fed this back into the final version of the logo. Thanks alot Kenny & open source FTW!\n\n## Jenkins & Jenkins X\nJenkins X started life as a Jenkins subproject and is now an independent project with the Continuous Delivery Foundation (CDF). The bowtie in the new logo is an ever-present reminder of that provenance. Even though our logo and branding may be changing, under the umbrella of the CDF, we continue to work closely with the Jenkins project, sharing that same spirit of service towards developers\u2019 CI/CD and productivity needs.\n\n## Rolling out the new logo\nWe have now started switching over to the new logo and expect to see some new swag available soon too. The old logo we will now consider as a mascot of the Jenkins X project. If you are looking to update your use of the logo, [here is the new artwork](https://github.com/cdfoundation/artwork).\n\n<img src=\"/news/new-logo-jenkins-x/jenkinsx-stacked-color.png\">\n\nIt is a big change for the project but ultimately the reason we put so much time and energy into this is that is important to us we represent the spirit of Jenkins X in everything we do. So when you are using Jenkins X, and you see the new logo, we want you to feel part of the open and friendly community and we want your team to focus on what you really want to focus on: delivering quality software at speed and at any scale.\n\n\n",
            "content/es/community/_index.md": "---\ntitle: Comunidad\nlinktitle: Comunidad\nmenu:\n  main:\n    weight: 40\n---\n\nThe Jenkins X Community is like no other, we are friendly, very open to feedback, provide guidance, best practices and much more.  You can find us in various channels.\n\nWe value respect and inclusiveness and follow the [CDF Code of Conduct](https://github.com/cdfoundation/toc/blob/master/CODE_OF_CONDUCT.md) in all interactions.\n\nPlease join us, we'd love to hear your feedback or have you participate and show some of the work you are doing with Jenkins X!\n\n## Joining the Community\n\n### Events\n\nFor details of the next Jenkins X demo or talk checkout our [talks at conferences and meetups](/community/talksdemos/) page!\n\n### Slack\n\nWe'd love to talk with you about Jenkins X and are happy to help if you have any questions. \n\nTalk to us on our slack channels, which are part of the Kubernetes slack. Join Kubernetes slack [here](http://slack.k8s.io/) and find us on our channels:\n\n* [\\#jenkins-x-user](https://kubernetes.slack.com/messages/C9MBGQJRH) for users of Jenkins X\n* [\\#jenkins-x-dev](https://kubernetes.slack.com/messages/C9LTHT2BB) for developers of Jenkins X\n\n### Want to contribute?\n\nIt will be lots of fun!\n\nCheck out the [contribution guide](/docs/contributing/) for some tips on how to get started.\n\n### Office Hours\n\nWe meet for office hours **every other Thursday** at 4pm UK / 11am US Eastern / 8am US Pacific.\n\nNext office hours: **31 October 2019**\n\n<a href=\"https://us02web.zoom.us/j/89081347704?pwd=U2lob3JVamsxQ1RyK1hSa0prMWczdz09\" class=\"btn btn-lg bg-primary text-white\">join the Office Hours meeting</a>\n\nFeel free to [add your questions to the doc](https://docs.google.com/document/d/1wHdBlZAN-ndPELuBoM5HBnYiQLvcz92-euXne2mKOEI/edit) or ask your questions in person.\n\nPrevious office hour recordings can be found on our [Jenkins X YouTube channel](https://www.youtube.com/channel/UCN2kblPjXKMcjjVYmwvquvg/playlists) in the Office Hours playlist. \n\nAlternatively, see our office hours [archives](/community/office_hours/).\n\n### Subscribe to the Jenkins X Newsletter\nOur newsletter is filled with various topics and relevant content for people just starting, or folks who have been using the platform for a while.\n\n<!-- Begin Mailchimp Signup Form -->\n<link href=\"//cdn-images.mailchimp.com/embedcode/classic-10_7.css\" rel=\"stylesheet\" type=\"text/css\">\n<style type=\"text/css\">\n\t#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\n\t/* Add your own Mailchimp form style overrides in your site stylesheet or in this style block.\n\t   We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */\n</style>\n<div id=\"mc_embed_signup\">\n<form action=\"https://jenkins-x.us7.list-manage.com/subscribe/post?u=d0c128ac1f69ba2bb20742976&amp;id=84d053b0a0\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\n    <div id=\"mc_embed_signup_scroll\">\n\t<h2>Subscribe</h2>\n<div class=\"indicates-required\"><span class=\"asterisk\">*</span> indicates required</div>\n<div class=\"mc-field-group\">\n\t<label for=\"mce-EMAIL\">Email Address  <span class=\"asterisk\">*</span>\n</label>\n\t<input type=\"email\" value=\"\" name=\"EMAIL\" class=\"required email\" id=\"mce-EMAIL\">\n</div>\n<div class=\"mc-field-group\">\n\t<label for=\"mce-FNAME\">First Name </label>\n\t<input type=\"text\" value=\"\" name=\"FNAME\" class=\"\" id=\"mce-FNAME\">\n</div>\n<div class=\"mc-field-group\">\n\t<label for=\"mce-LNAME\">Last Name </label>\n\t<input type=\"text\" value=\"\" name=\"LNAME\" class=\"\" id=\"mce-LNAME\">\n</div>\n<div class=\"mc-field-group\">\n\t<label for=\"mce-MMERGE3\">Profile Image URL </label>\n\t<input type=\"url\" value=\"\" name=\"MMERGE3\" class=\" url\" id=\"mce-MMERGE3\">\n</div>\n\t<div id=\"mce-responses\" class=\"clear\">\n\t\t<div class=\"response\" id=\"mce-error-response\" style=\"display:none\"></div>\n\t\t<div class=\"response\" id=\"mce-success-response\" style=\"display:none\"></div>\n\t</div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\" name=\"b_d0c128ac1f69ba2bb20742976_84d053b0a0\" tabindex=\"-1\" value=\"\"></div>\n    <div class=\"clear\"><input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\"></div>\n    </div>\n</form>\n</div>\n<script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';fnames[3]='MMERGE3';ftypes[3]='imageurl';}(jQuery));var $mcj = jQuery.noConflict(true);</script>\n<!--End mc_embed_signup-->\n\n### Reporting Issues\n\nGot any thoughts, ideas or feedback then please drop them in a [GitHub Issue](https://github.com/jenkins-x/jx/issues/new)\n\nYou may also want to try [Stack Overflow](https://stackoverflow.com/questions/tagged/jenkins--x) with the tag `jenkins--x` though we prefer [GitHub Issues](https://github.com/jenkins-x/jx/issues)\n\n### Email\n\nIf you prefer email then join us on the [jenkins-developers mailing list](https://groups.google.com/forum/#!forum/jenkinsci-dev). Prefix posts with `[Jenkins X]` in the subject.\n\n",
            "content/es/docs/_index.md": "---\ntitle: Documentaci\u00f3n\nlinkTitle: Documentaci\u00f3n\nweight: 20\nmenu:\n  main:\n    weight: 20\n---\n",
            "content/es/docs/concepts/_index.md": "---\ntitle: Conceptos\nlinktitle: Conceptos\ndescription: Un resumen de los conceptos en Jenkins X.\nweight: 5\n---\n\nJenkins X est\u00e1 dise\u00f1ado para simplificar el trabajo de los desarrolladores seg\u00fan los principios y las mejores pr\u00e1cticas de DevOps. Los enfoques adoptados se basan en la investigaci\u00f3n exhaustiva realizada para el libro [*ACCELERATE: Building and Scaling High Performing Technology Organsiations*](https://goo.gl/vZ8BFN). Puedes leer por qu\u00e9 usamos [Accelerate](/about/overview/accelerate/) como base para los principios de Jenkins X.\n\n## Principios\n---\n\n*\"DevOps es un conjunto de pr\u00e1cticas destinadas a reducir el tiempo entre la confirmaci\u00f3n de un cambio en un sistema y el momento en que se aplica en producci\u00f3n, al tiempo que garantiza una alta calidad.\"*\n\nLos objetivos de los proyectos DevOps son:\n\n* R\u00e1pidos tiempos de comercializaci\u00f3n\n* Mejoras en la frecuencia de despliegues\n* Disminuci\u00f3n de tiempo entre correcciones\n* Disminuci\u00f3n del \u00edndice de errores por liberaciones\n* Aumento del Tiempo Medio de recuperaci\u00f3n\n\nLos equipos de alto rendimiento deber\u00edan poder desplegarse varias veces al d\u00eda en comparaci\u00f3n con el promedio de la industria que cae entre una vez por semana y una vez por mes.\n\nEl tiempo de espera para que el c\u00f3digo migre de 'c\u00f3digo comprometido' a 'c\u00f3digo en producci\u00f3n' debe ser inferior a una hora y la tasa de falla de cambio debe ser inferior al 15%, en comparaci\u00f3n con un promedio de entre 31 y 45%.\n\nEl tiempo medio para recuperarse de una falla tambi\u00e9n debe ser inferior a una hora.\n\nJenkins X ha sido dise\u00f1ado desde los primeros principios para permitir que los equipos apliquen las mejores pr\u00e1cticas de DevOps para alcanzar los objetivos de rendimiento m\u00e1s importantes de la industria.\n\n## Pr\u00e1cticas\n---\nLas siguientes mejores pr\u00e1cticas son consideradas clave para manjar una estrategia exitosa de DevOps:\n\n* Arquitectura con Bajo Acoplamiento\n* Auto-servicio de Configuraci\u00f3n\n* Abastecimiento Autom\u00e1tico\n* Construcci\u00f3n, Integraci\u00f3n y Entrega Continuas\n* Gesti\u00f3n Autom\u00e1tica de Liberaciones\n* Pruebas Incrementales\n* Configuraci\u00f3n de Infraestructura como C\u00f3digo\n* Gesti\u00f3n de la Configuraci\u00f3n Integral\n* Desarrollo basado en un troncos/bases y caracter\u00edsticas con marcas\n\nJenkins X re\u00fane una serie de metodolog\u00edas y componentes ya existentes en un enfoque integrado que minimiza la complejidad.\n\n## Arquitectura\n\nJenkins X se basa en el modelo DevOps de arquitecturas con bajo acoplamiento y est\u00e1 dise\u00f1ado para ayudar a desplegar grandes cantidades de microservicios distribuidos de manera repetible y manejable a lo largo de m\u00faltiples equipos.\n\n<img src=\"/images/jx-arch.png\" class=\"img-thumbnail\">\n\n### Modelo conceptual\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## Construyendo Bloques\n\nJenkins X se basa en los siguientes principales componentes:\n\n### Kubernetes & Docker\n---\n\nEn el coraz\u00f3n del sistema est\u00e1 Kubernetes, que se ha convertido en la plataforma de infraestructura virtual de facto para DevOps. Todos los principales proveedores de Cloud ahora ofrecen Kubernetes como servicio bajo demanda y la plataforma tambi\u00e9n se puede instalar internamente en una infraestructura privada, si es necesario. Los entornos de prueba tambi\u00e9n se pueden crear en el hardware de desarrollo local utilizando el instalador de Minikube.\n\nFuncionalmente, la plataforma Kubernetes extiende los principios b\u00e1sicos de los Contenedores proporcionados por Docker para abarcar m\u00faltiples Nodos f\u00edsicos.\n\nEn resumen, Kubernetes proporciona una infraestructura virtual homog\u00e9nea que se puede escalar din\u00e1micamente agregando o eliminando nodos. Cada nodo participa en un \u00fanico espacio grande de red virtual privada plana.\n\nLa unidad de despliegue en Kubernetes es el Pod, que comprende uno o m\u00e1s contenedores Docker y algunos metadatos. Todos los contenedores dentro de un Pod comparten la misma direcci\u00f3n IP virtual y espacio de puerto. Los despliegues dentro de Kubernetes son declarativos, por lo que el usuario especifica el n\u00famero de instancias de una versi\u00f3n determinada de un Pod que se desea desplegar y Kubernetes calcula las acciones necesarias para pasar del estado actual al estado deseado mediante el despliegue o eliminaci\u00f3n de Pods en todos los nodos. La decisi\u00f3n de d\u00f3nde se colocar cada instancia de Pods est\u00e1 influenciada por los recursos disponibles, los recursos deseados y la coincidencia de etiquetas. Una vez desplegados, Kubernetes se compromete a garantizar que el n\u00famero deseado de Pods de cada tipo permanezca operativo realizando controles de estado peri\u00f3dicos y finalizando/reemplazando los Pods que no responden.\n\nPara imponer cierta estructura, Kubernetes permite la creaci\u00f3n de espacios de nombres virtuales que se pueden utilizar para separar los pods l\u00f3gicamente y para asociar potencialmente grupos de pods con recursos espec\u00edficos. Los recursos en un espacio de nombres pueden compartir una pol\u00edtica de seguridad \u00fanica, por ejemplo. Se requiere que los nombres de recursos sean \u00fanicos dentro de un espacio de nombres, pero se pueden reutilizar en espacios de nombres.\n\nEn el modelo Jenkins X, un Pod equivale a una instancia desplegada de un Microservicio (en la mayor\u00eda de los casos). Cuando se requiere el escalado horizontal del Microservicio, Kubernetes permite que se desplieguen m\u00faltiples instancias id\u00e9nticas de un Pod determinado, cada una con su propia direcci\u00f3n IP virtual. Estos se pueden agregar en un \u00fanico punto final virtual conocido como Servicio que tiene una direcci\u00f3n IP \u00fanica y est\u00e1tica y una entrada DNS local que coincide con el nombre del Servicio. Las llamadas al Servicio se reasignan din\u00e1micamente a la IP de una de las instancias de Pod saludables de forma aleatoria. Los servicios tambi\u00e9n se pueden usar para reasignar puertos. Dentro de la red virtual de Kubernetes, se puede hacer referencia a los servicios con un nombre de dominio completo en este formato: `<service-name>.<namespace-name>.svc.cluster.local`, que se puede acortar a `<service-name>.<namespace-name>` o simplemente `<service-name>` en el caso de servicios que se encuentran dentro del mismo espacio de nombres. Por lo tanto, un servicio RESTful llamado 'payments' desplegado en un espacio de nombres llamado 'finance' podr\u00eda referirse en c\u00f3digo a trav\u00e9s de `http://payments.finance.svc.cluster.local`, `http://payments.finance` o simplemente `http://payments`, dependiendo de la ubicaci\u00f3n del c\u00f3digo donde se hace la llamada.\n\nPara acceder a los Servicios desde fuera de la red local, Kubernetes necesita la creaci\u00f3n de un Ingress para cada Servicio. La forma m\u00e1s com\u00fan de hacerlo es utilizando uno o m\u00e1s balanceadores de carga con direcciones IP est\u00e1ticas, que se encuentran fuera de la infraestructura virtual de Kubernetes y redirigen las solicitudes de red a los servicios internos asignados. Al crear una entrada DNS externa para la direcci\u00f3n IP est\u00e1tica del balanceador de carga, es posible asignar servicios a nombres de dominio externos correctamente verificados. Por ejemplo, si nuestro balanceador de carga est\u00e1 asignado a `*.jenkins-x.io`, nuestro servicio de 'payments' podr\u00eda quedar expuesto como `http://payments.finance.jenkins-x.io`.\n\nKubernetes representa una plataforma poderosa en constante mejora para desplegar servicios a gran escala, pero tambi\u00e9n es compleja de entender y puede ser dif\u00edcil de configurar correctamente. Jenkins X trae a Kubernetes un conjunto de acuerdos predeterminados y algunas herramientas simplificadas con el objetivo de optimizar los prop\u00f3sitos de DevOps y de gestionar los servicios de bajo-acoplamiento.\n\nLa herramienta de l\u00ednea de comandos `jx` proporciona una forma simple de realizar operaciones comunes en instancias de Kubernetes, como ver registros y conectarse a instancias de contenedor. Adem\u00e1s, Jenkins X ampl\u00eda la convenci\u00f3n de Kubernetes Namespace para crear entornos (Environments) que se pueden encadenar entre s\u00ed y formar una jerarqu\u00eda de promoci\u00f3n en los flujos de liberaci\u00f3n.\n\nUn Entorno (Environment) en Jenkins X puede representar un entorno de infraestructura virtual como Dev, Staging, Production, etc para un equipo de desarrollo determinado. Las reglas de promoci\u00f3n entre entornos se pueden definir para que las versiones se puedan mover de forma autom\u00e1tica o manual a trav\u00e9s de los diferentes flujos (pipelines). Cada entorno se gestiona siguiendo la metodolog\u00eda GitOps: el estado deseado de un entorno se mantiene en un repositorio de Git y la confirmaci\u00f3n o la reversi\u00f3n de los cambios en el repositorio desencadena un cambio de estado asociado en el entorno dado en Kubernetes.\n\nLos cl\u00fasteres de Kubernetes se pueden crear directamente utilizando el comando `jx create cluster`, lo que facilita la reproducci\u00f3n de cl\u00fasteres en caso de fallo. Del mismo modo, la plataforma Jenkins X se puede actualizar en un cl\u00faster existente utilizando `jx upgrade platform`. Jenkins X admite trabajar con m\u00faltiples cl\u00fasteres de Kubernetes a trav\u00e9s de `jx context` y cambiar entre m\u00faltiples entornos dentro de un cl\u00faster con `jx environment`.\n\nLos desarrolladores deben conocer las capacidades que proporciona Kubernetes para distribuir datos de configuraci\u00f3n y credenciales de seguridad en todo el cl\u00faster. Los ConfigMaps se puede utilizar para crear conjuntos de llave/valor para metadatos de configuraci\u00f3n no confidenciales y los Secrets realizan un mecanismo similar pero encriptado para credenciales de seguridad y tokens. Kubernetes tambi\u00e9n proporciona un mecanismo para especificar Cuotas de recursos para los Pods, esto es necesario para optimizar los despliegues en todos los nodos y que discutiremos en breve.\n\nPor defecto, el estado del Pod es ef\u00edmero. Cualquier dato escrito en el sistema de archivos local de un Pod se pierde cuando se elimina ese Pod. Los desarrolladores deben tener en cuenta que Kubernetes puede decidir de forma unilateral eliminar instancias de Pods y volver a crearlos en cualquier momento como parte del proceso general de balanceo de carga para los nodos, por lo que los datos locales pueden perderse en cualquier momento. Cuando se requieren datos con estado, los vol\u00famenes persistentes deben declararse y montarse dentro del sistema de archivos de Pods espec\u00edficos.\n\n### Helm y Draft\n---\nLa interacci\u00f3n directa con Kubernetes implica realizar configuraciones de forma manual utilizando la l\u00ednea de comandos `kubectl` o pasando varios tipos de datos YAML a la API. Esto puede ser complejo y est\u00e1 abierto a la aparici\u00f3n de errores humanos. De acuerdo con el principio de DevOps de 'configuraci\u00f3n como c\u00f3digo', Jenkins X aprovecha Helm y Draft para crear bloques at\u00f3micos de configuraci\u00f3n para sus aplicaciones.\n\nHelm simplifica la configuraci\u00f3n de Kubernetes a trav\u00e9s del concepto de Cartas N\u00e1uticas (Chart en ingl\u00e9s). El chart es un conjunto de archivos que juntos especifican los metadatos necesarios para implementar una aplicaci\u00f3n o servicio en Kubernetes. En lugar de mantener una serie de archivos YAML repetitivos basados en la API de Kubernetes, Helm utiliza un lenguaje de plantillas para crear las especificaciones YAML necesarias a partir de un \u00fanico conjunto compartido de valores. Esto hace posible especificar aplicaciones Kubernetes reutilizables donde la configuraci\u00f3n se puede modificada en el momento del despliegue.",
            "content/es/docs/concepts/components.md": "---\ntitle: Componentes\nlinktitle: Componentes\ndescription: Resumen de componentes de una t\u00edpica instalaci\u00f3n de Jenkins X\nweight: 10\n---\n\nUna instalaci\u00f3n de Jenkins X consiste en:\n\n* un Entorno de Desarrollo por equipo que corresponde con un [namespace en Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\n* de cero a muchos otros [Entornos Permanentes](/es/about/concepts/features/#entornos)\n  * lo que est\u00e1 listo para se utilizado es que cada equipo tenga su propios entornos de `Staging` y `Production`\n  * cada equipo puede tener tantos entornos como deseen y pueden nombrarlos de la manera que prefieran\n* opcional [Vista Previa del Entorno](/es/about/concepts/features/#entornos-de-vista-previa)\n\nNormalmente cada entorno es asociado con su propio [namespace en Kubernetes](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) para garantizar un correcto aislamiento entre entornos.\n\nT\u00e9cnicamente 2 equipos podr\u00edan compartir el mismo espacio de nombres (mismo namespace en Kubernetes), pero esto podr\u00eda traer problemas y por eso no lo recomendamos. Pensemos en el namespace `Staging` y en 2 equipos donde cada uno tiene una aplicaci\u00f3n en un repositorio Git, en total 2 repositorios. Al realizar cambios en uno de los repositorios Git se podr\u00edan generar conflictos con el otro en los nombres de los elementos o en los DNS. Para evitar estos problemas, es preferible mantener estructurar los equipos (las aplicaciones) en namespaces separados y realizar los enlaces entre servicios utilizando la estructura local DNS.\n\nRevise la lista completa de [componentes de Jenkins X](/docs/reference/components/).\n\n## Entornos de Desarrollo\n\nEn el entorno de desarrollo, hemos instalado una serie de aplicaciones principales que creemos son necesarias como m\u00ednimo para comenzar con CI/CD en Kubernetes.\n\nTambi\u00e9n admitimos [complementos](/es/about/concepts/features/#aplicaciones) para ampliar este conjunto b\u00e1sico.\n\nJenkins X viene con una configuraci\u00f3n que conecta estos servicios entre s\u00ed, lo que significa que todo funciona de conjunto de inmediato. Esto reduce dr\u00e1sticamente el tiempo para comenzar con Kubernetes, ya que todas las contrase\u00f1as, las variables de entorno y los archivos de configuraci\u00f3n est\u00e1n configurados para funcionar entre s\u00ed.\n\n1. __Jenkins__ \u2014 proporciona la automatizaci\u00f3n de flujos CI/CD. Hay un esfuerzo para descomponer Jenkins con el tiempo para volverlo m\u00e1s nativo de la nube y hacer mayor uso de los conceptos de Kubernetes en torno a: CRD, almacenamiento, escalado, entre otros.\n2. __Nexus__ \u2014 act\u00faa como un cach\u00e9 de dependencia para aplicaciones NodeJS y Java para mejorar dram\u00e1ticamente los tiempos de compilaci\u00f3n. Despu\u00e9s de una compilaci\u00f3n inicial de una aplicaci\u00f3n SpringBoot, el tiempo de compilaci\u00f3n se reduce de 12 minutos a 4. Todav\u00eda no hemos intentado demostrar, pero lo haremos pronto, el intercambiarlo con Artifactory.\n3. __Docker registry__ \u200a\u2014\u200aun registro de docker dentro del cl\u00faster donde nuestros pipelines env\u00edan im\u00e1genes de aplicaciones, pronto pasaremos a utilizar registros de proveedores nativos de la nube, como Google Container Registry, Azure Container Registry o Amazon Elastic Container Registry (ECR), por ejemplo.\n4. __ChartMuseum__\u200a\u2014\u200aun Repositorio para publicar los charts de Helm\n5. __Monocular__ \u200a\u2014\u200auna interfaz de usuario utilizada para obtener y ejecutar charts de Helm\n\n## Entornos Permanentes\n\nEstos [entornos](/es/about/concepts/features/#entornos), como `Staging` y `Production` utilizan GitOps para auto-gestionarse, por lo que cada uno tiene asociado un repositorio Git con el c\u00f3digo necesario para configurar todas las aplicaciones y servicios que son desplegados en el.\n\nNormalmente se utilizan charts de Helm dentro del repositorio para definir qu\u00e9 chart ser\u00e1 instalado, que versi\u00f3n utilizar y cualquier otra configuraci\u00f3n espec\u00edfica necesaria del entorno, as\u00ed como recurso adicionales. p.ej. Informaci\u00f3n sensible (Secrets) o aplicaciones como Prometheus, etc.\n\n## Entornos de Vista Previa\n\nLos [Entornos de Vista Previa](/es/about/concepts/features/#entornos-de-vista-previa) son similares a los [Entornos Permanentes](/es/about/concepts/features/#entornos) en el punto donde ambos est\u00e1n definidos en el c\u00f3digo fuente utilizando los charts de Helm.\n\nLa principal diferencia es que los entornos de vista previa est\u00e1n configurados dentro del c\u00f3digo fuente de la aplicaci\u00f3n, en la carpeta `./chart/preview`.\n\nAdem\u00e1s, estos entornos no son permanentes, sino que se crean a partir de un PR en el repositorio Git de la aplicaciones y luego se eliminan un tiempo despu\u00e9s (manualmente o mediante la recolecci\u00f3n autom\u00e1tica de basura).\n\n## Anotaciones Personalizadas de Entrada\n\nPara obtener informaci\u00f3n sobre c\u00f3mo agregar anotaciones personalizadas al controlador de entradas, consulte [\u00bfC\u00f3mo agregar anotaciones personalizadas al controlador de Entradas?](/docs/resources/faq/using/#how-to-add-custom-annotations-to-ingress-controller)",
            "content/es/docs/concepts/diagram.md": "---\ntitle: Diagrama\nlinktitle: Diagrama\ndescription: Diagrama de la arquitectura de Jenkins X\nweight: 20\n---\n\nExisten varias arquitecturas basadas en c\u00f3mo elige instalar Jenkins X. A continuaci\u00f3n, le mostramos dos arquitecturas comunes.\n\n<figure>\n<img src=\"/images/ArchitectureStaticJenkins.png\"/>\n<figcaption>\n<h5>La arquitectura muestra un despliegue con una instancia est\u00e1tica de Jenkins</h5>\n</figcaption>\n</figure>\n\n\n\n\n<figure>\n<img src=\"/images/ArchitectureServerlessJenkins.png\"/>\n<figcaption>\n<h5>La arquitectura muestra un despliegue sin servidor (serverless) utilizando los Pipelines de Tekton</h5>\n</figcaption>\n</figure>",
            "content/es/docs/concepts/features.md": "---\ntitle: Funcionalidades\nlinktitle: Funcionalidades\ndescription: \u00bfC\u00f3mo Jenkins X puede ayudarte con las entregas continuas?\nweight: 30\n---\n\n## L\u00ednea de Comando\n\nJenkins X viene con una \u00fatil y pr\u00e1ctica herramienta de l\u00ednea de comandos [jx](/commands/jx/) para:\n\n* [instalar Jenkins X](/docs/getting-started/setup/install/) dentro de un cl\u00faster de Kubernetes existente\n* [crear un nuevo cluster de Kubernetes](/docs/getting-started/setup/create-cluster/) e instalar Jenkins X dentro de \u00e9l\n* [cargar/importar proyectos](/docs/resources/guides/using-jx/creating/import/) dentro de Jenkins X junto a su flujos de configuraci\u00f3n CI/CD\n* [crea nuevas aplicaciones Spring Boot](/developing/create-spring/) las cuales son cargadas dentro de Jenkins X junto a sus flujos de configuraci\u00f3n CI/CD\n\n## Pipelines Automatizados\n\nEn lugar de tener que tener un conocimiento profundo de las partes internas de Jenkins Pipeline, Jenkins X configurar\u00e1 autom\u00e1ticamente pipelines (flujos de actividades) incre\u00edbles para que sus proyectos implementen completamente CI y CD utilizando las [mejores pr\u00e1cticas de DevOps](/about/concepts/)\n\n## Entornos\n\nUn _entorno_ es un lugar donde se despliegan las aplicaciones. Los desarrolladores a menudo hacen referencia a los entornos usando un nombre corto como `Testing, Staging/UAT or Production`.\n\nCon Jenkins X cada _equipo_ tiene sus propios Entornos. De forma predeterminada, Jenkins X crea los entornos `Staging` y `Production` para cada equipo, pero puede crear nuevos entornos a trav\u00e9s de [jx create environment](/commands/jx_create_environment/).\n\nTambi\u00e9n est\u00e1 el entorno `Dev`, que es donde se instalan herramientas como Jenkins, Nexus o Prow y donde se ejecutan los pipelines de CI/CD.\n\nUtilizamos GitOps para gestionar la configuraci\u00f3n y la versi\u00f3n de los recursos de Kubernetes que se despliegan en cada entorno. Por lo tanto, cada Entorno tiene su propio repositorio Git que contiene todos los Helm Charts, sus versiones y la configuraci\u00f3n para que las aplicaciones se ejecuten en el entorno.\n\nUn Entorno se asigna a un espacio de nombres (namespace) en un cl\u00faster de Kubernetes. Cuando los PR son mezclados en el repositorio Git del entorno, se desencadena la ejecuci\u00f3n de los pipelines para aplicar los cambias a trav\u00e9s de los Helms Charts en el namespace del entorno.\n\nEsto significa que tanto los desarrolladores como administradores pueden utilizar el mismo repositorio de Git para administrar todas las configuraciones y versiones de todas las aplicaciones y recursos para un entorno, por lo tanto, todos los cambios en el entorno se capturan en Git. De esta forma es f\u00e1cil ver qui\u00e9n realiz\u00f3 los cambios y, lo que es m\u00e1s importante, es f\u00e1cil revertir los cambios cuando sucedan cosas malas.\n\n<img src=\"/images/gitops.png\" class=\"img-thumbnail\">\n\n## Equipos\n\nUn equipo en Jenkins X est\u00e1 representado por una instalaci\u00f3n de Jenkins X en un namespace separado.\n\nPuede instalar Jenkins X en diferentes namespaces en el mismo cl\u00faster si lo desea utilizando el argumento `--namespace` en la l\u00ednea de comando [jx create cluster](/commands/jx_create_cluster/) o [jx install](/commands/deprecation/). Tenga en cuenta que para admitir m\u00faltiples instalaciones de Jenkins X en el mismo cl\u00faster, debe [evitar Tiller si est\u00e1 utilizando helm 2.x](/news/helm-without-tiller/).\n\nTambi\u00e9n puede utilizar la CLI [jx create team](/commands/jx_create_team/) para crear un nuevo `Team` [Custom Resource](/docs/reference/components/custom-resources/). Al utilizar este comando el controlador de equipos crear\u00e1, en segundo plano, una nueva instalaci\u00f3n de Jenkins X en los namespaces del equipo, reutilizando de forma predeterminada el mismo nexus y registro de docker.\n\nLea la [gu\u00eda de configuraci\u00f3n](/docs/resources/guides/managing-jx/common-tasks/config/) para ampliar los detalles sobre c\u00f3mo compartir recursos como Nexus entre equipos.\n\n## Promoci\u00f3n\n\nLa promoci\u00f3n es implementada con GitOps generando una PR en el repositorio Git del entorno para que todos los cambios pasen por Git para su revisi\u00f3n, aprobaci\u00f3n y para que cualquier cambio sea f\u00e1cil de revertir.\n\nCuando un nuevo cambio dentro del repositorio Git del entorno se mezcla con la rama master, se activa el pipeline para el entorno, el cual aplica los cambio a los recursos a trav\u00e9s de helm; siempre utilizando el c\u00f3digo del repositorio Git como \u00fanica fuente de informaci\u00f3n.\n\nLos Pipelines para CD de Jenkins X automatizan la promoci\u00f3n de cambios de versi\u00f3n a trav\u00e9s de cada Entorno que se configura con la propiedad _promotion strategy_ en `Auto`. De forma predeterminada, el entorno `Staging` utiliza la promoci\u00f3n autom\u00e1tica y el entorno `Production` utiliza la promoci\u00f3n manual.\n\nPara promover manualmente una versi\u00f3n de la aplicaci\u00f3n hacia un entorno debes utilizar el comando [jx promote](/developing/promote/).\n\n<img src=\"/images/overview.png\" class=\"img-thumbnail\">\n\n## Entornos de Vista Previa\n\nJenkins X le permite activar Entornos de Vista Previa para los PR, de esta forma podr\u00e1 obtener r\u00e1pida retroalimentaci\u00f3n antes de mezclar los cambios en la rama master. Adem\u00e1s de una r\u00e1pida retroalimentaci\u00f3n, esta funcionalidad le permite evitar la aprobaci\u00f3n humana dentro de su pipeline de liberaci\u00f3n para acelerar las entregas de cambios mezclados a master.\n\nCuando el Entorno de Vista Previa est\u00e9 en funcionamiento, Jenkins X comentar\u00e1 su PR con un enlace para que, con un solo clic, los miembros de su equipo puedan probar la vista previa.\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\n## Retroalimentaci\u00f3n\n\nComo puede ver arriba, Jenkins X agrega comentarios autom\u00e1ticamente en los PR cuando utilizar Entornos de Vista Previa.\n\nSi los comentarios del commit hacen referencia a los problemas (issues, p.ej. con el texto `fixes #123`), los pipelines de Jenkins X generar\u00e1n notas de la versi\u00f3n como las mostradas en los [jx releases](https://github.com/jenkins-x/jx/releases).\n\nAdem\u00e1s, a medida que la versi\u00f3n (conjunto de nuevos commits) sea promovida en `Staging` o `Production`, recibir\u00e1 comentarios autom\u00e1ticos sobre cada problema solucionado diciendo que el problema solucionado se encuentra disponible para su revisi\u00f3n en el correspondiente entorno. p.ej.\n\n<img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n\n## Aplicaciones\n\nUna colecci\u00f3n de las mejores herramientas de software empaquetadas con charts de helm vienen pre-integradas con Jenkins X, tales como: Nexus, ChartMuseum, Monocular, Prometheus, Grafana, etc.\n\n### Complementos\n\nAlgunas de estas aplicaciones est\u00e1n ajustadas; como: Nexus, ChartMuseum, Monocular. Otros se proporcionan como un `Addon`.\n\nPara instalar un complemento utilice el comando [jx create addon](/commands/jx_create_addon/). p.ej.\n\n```sh\njx create addon grafana\n```",
            "content/es/docs/concepts/jenkins-x-pipelines.md": "---\ntitle: Pipelines en Jenkins X\nlinktitle: Pipelines en Jenkins X\ndescription: Flujo de actividades sin servidor (serverless) pensadas para la nube\nkeywords: [tekton]\nweight: 40\n---\n\nHemos [anunciado recientemente](/news/jenkins-x-next-gen-pipeline-engine/) la incorporaci\u00f3n de los **Pipelines en Jenkins X**. Estos Pipelines son ejecuciones sin servidor basados en el motor de [Tekton Pipelines](https://tekton.dev/).\n\nTekton es un proyecto open source dise\u00f1ado como soluci\u00f3n moderna nativa de la nube para ejecutar pipelines.\n\nEl trabajo aqu\u00ed todav\u00eda es experimental, pero nos encantar\u00eda recibir comentarios y ayuda de la comunidad para impulsarlo.\n\n## Probar los Pipelines de Jenkins X\n\nEn este momento, para habilitar una instalaci\u00f3n basada en Tekton, puede crear un nuevo cl\u00faster usando `jx` junto con estos indicadores:\n\n```sh\njx create cluster gke --tekton\n```\n\nO bien, si desea participar en la pr\u00f3xima generaci\u00f3n de Jenkins X con GitOps incorporado para su entorno de desarrollo, utilizando Tekton y Vault para el almacenamiento de Secretos, utilice el siguiente comando (solo funciona en GCP y AWS en este momento):\n\n```sh\njx create cluster gke --ng\n```\n\nLa experiencia general del desarrollador, los complementos CLI e IDE deber\u00edan funcionar como antes, \u00a1pero utilizando los Recursos Personalizados de [Tekton Pipelines](https://tekton.dev/) como maquinaria en lugar de crear un servidor Jenkins por equipo!\n\n## Utilizando un Inicio R\u00e1pido\n\nUna vez que se inicia su cl\u00faster, puede crear un nuevo inicio r\u00e1pido, hemos estado usando el NodeJS de manera confiable.\n\n```sh\njx create quickstart\n```\n\nSe crea un `prowjob` (trabajo/ejecuci\u00f3n de prow), un nuevo controlador pipelines prow vigila estos trabajos y cuando recibe un evento verificar\u00e1 si tiene una especificaci\u00f3n `pipelinerun` presente, si no, publicar\u00e1 el `prowjob` en un nuevo servicio `pipelinerunner` de Jenkins X que a su vez clona el repositorio que luego traducen a su `jenkins-x.yml` en recursos comunes de Tekton Pipeline. Una vez que se crean, el controlador `tekton-pipeline-controller` ejecuta las construcciones.\n\n## Diferencias con los Pipelines de Jenkins\n\nEl Pipeline en Jenkins X utiliza un nuevo archivo `jenkins-x.yml` que es YAML en lugar del fichero Groovy `Jenkinsfile` utilizado por Jenkins.\n\nSin embargo, todav\u00eda se est\u00e1n reutilizando los mismos paquetes de construcci\u00f3n reutilizables y de composici\u00f3n por detr\u00e1s del tel\u00f3n. (Los paquetes de construcci\u00f3n de Jenkins X - [build packs](/docs/create-project/build-packs/) - en realidad est\u00e1n escritos en YAML en los Pipelines de Jenkins X).\n\nUna cosa que notar\u00e1 es que con los Pipelines de Jenkins X no necesitamos copiar/pegar un gran archivo `Jenkinsfile` en el repositorio Git de cada aplicaci\u00f3n; por lo general, el archivo `jenkins-x.yml` generado es peque\u00f1o, como este:\n\n```yaml\nbuildPack: maven\n```\n\n\u00a1Eso es! Lo que eso significa b\u00e1sicamente es que, en tiempo de ejecuci\u00f3n, el Pipeline de Jenkins X utilizar\u00e1 los paquetes de construcci\u00f3n - [build packs](/docs/create-project/build-packs/) - para generar el Pipeline de Tekton.\n\n## Personalizar el Pipelines\n\nTener paquetes de compilaci\u00f3n - [build packs](/docs/create-project/build-packs/) - automatizados para hacer todo su CI+CD es bastante impresionante, ya que la mayor\u00eda de las veces sus microservicios se compilar\u00e1n, probar\u00e1n, empaquetar\u00e1n, lanzar\u00e1n y promocionar\u00e1n de la misma manera. \u00a1CI+CD es a menudo un trabajo pesado indiferenciado que deber\u00edamos automatizar!\n\nSin embargo, hay veces que desea [personalizar un pipeline](/docs/create-project/build-packs/#pipelines) en particular (liberaci\u00f3n, PR, caracter\u00edstica, etc.) o modificar pasos involucrados dentro del [ciclo de vida](/docs/first-projects/build-packs/#life-cycles).\n\nPuede leer m\u00e1s sobre el [modelo de extensi\u00f3n](/docs/create-project/build-packs/#pipeline-extension-model) para descubrir todo lo que puede hacer. B\u00e1sicamente, puede agregar pasos antes/despu\u00e9s de cualquier ciclo de vida o reemplazar completamente un conjunto de ciclos de vida o incluso optar por salir del paquete de compilaci\u00f3n por completo e alinear sus pipelines dentro de su `jenkins-x.yml`.\n\nPara una forma r\u00e1pida de agregar un nuevo paso en el ciclo de vida de su pipeline, utilice el comando [jx create step](/commands/deprecation/):\n\n<figure>\n<img src=\"/images/architecture/create-step.gif\" />\n<figcaption>\n<h5>Crea un nuevo paso en su Pipeline de Jenkins X a trav\u00e9s del CLI</h5>\n</figcaption>\n</figure>\n\nTambi\u00e9n puede agregar o anular una variable de entorno en su pipeline a trav\u00e9s del comando [jx create variable](/commands/jx_create_variable/).\n\n## Modificaciones en VS Code\n\nSi est\u00e1 utilizando [VS Code](https://code.visualstudio.com/), le recomendamos que instale la [extensi\u00f3n de lenguaje YAML](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml) de Red Hat.\n\nEsta extensi\u00f3n le permite editar archivos YAML con validaci\u00f3n de esquema JSON de forma opcional.\n\nEl esquema JSON de Jenkins X ya est\u00e1 registrado en [schemastore.org](http://schemastore.org/json/), por lo tanto, editar su archivo `jenkins-x.yml` en VS Code incluir\u00e1 la finalizaci\u00f3n inteligente y la validaci\u00f3n.\n\n<figure>\n<embed src=\"/images/architecture/yaml-edit.mp4\" autostart=\"false\" height=\"400\" width=\"600\" />\n<figcaption>\n<h5>Editar el Pipeline de Jenkins X en VS Code</h5>\n</figcaption>\n</figure>\n\nNos encantar\u00eda mejorar esta experiencia de usuario, por si te [apetece ayudar](/docs/contributing/).\n\n## Modificaciones en IDEA\n\nEsto ya deber\u00eda estar incluido de f\u00e1brica debido a que el esquema JSON de Jenkins X est\u00e1 registrado en [schemastore.org](http://schemastore.org/json/), por lo que editar su archivo `jenkins-x.yml` en IDEA incluir\u00e1 la finalizaci\u00f3n inteligente y la validaci\u00f3n.\n\nNos encantar\u00eda mejorar esta experiencia de usuario, por si te [gustar\u00eda ayudar](/docs/contributing/).\n\n## Variables de entorno predeterminadas\n\nLas siguientes variables de entorno est\u00e1n disponibles para su uso en los pasos del Pipeline de Jenkins X:\n\n| Nombre | Descripci\u00f3n |\n| --- | --- |\n| DOCKER_REGISTRY | el servidor de registro de docker (p.ej. `docker.io` o `gcr.io`) |\n| BUILD_NUMBER | el n\u00famero de construcci\u00f3n (1, 2, 3) comienza en `1` para cada repo y rama |\n| PIPELINE_KIND | el tipo de pipeline p.ej `release` o `pullrequest` |\n| PIPELINE_CONTEXT | el contexto del pipeline si existen m\u00faltiples pipelines por PR (para diferenciar tests/governance/lint etc) |\n| REPO_OWNER | el due\u00f1o del repositorio Git |\n| REPO_NAME | el nombre del repositorio Git |\n| JOB_NAME | el nombre de la tarea que normalmente tiene este aspecto `$REPO_OWNER/$REPO_NAME/$BRANCH_NAME` |\n| APP_NAME | el nombre de la applicaci\u00f3n que normalmente es `$REPO_NAME`\n| BRANCH_NAME | el nombre de la rama p.ej `master` o `PR-123` |\n| JX_BATCH_MODE | indica a jx que utilice bash si el valor es `true` |\n| VERSION | contiene el n\u00famero de versi\u00f3n que ha sido liberada o la versi\u00f3n de la vista previa del PR |\n| BUILD_ID | igual que `$BUILD_NUMBER`\n| JOB_TYPE | la tipo de tarea de prow p.ej `presubmit` para el PR o `postsubmit` para la liberaci\u00f3n |\n| PULL_BASE_REF | la rama/referencia en Git |\n| PULL_BASE_SHA | el SHA en Git que ha sido construido |\n| PULL_NUMBER | para los PRs este ser\u00e1 el n\u00famero sin el prefijo `PR-`\n| PULL_REFS | para combinar por lotes todas las referencias de Git |\n\n",
            "content/es/docs/concepts/technology.md": "---\ntitle: Preguntas sobre Tecnolog\u00eda\nlinktitle: Preguntas sobre Tecnolog\u00eda\ndescription: Preguntas tecnol\u00f3gicas sobre Kubernetes y los proyectos de c\u00f3digo abierto asociados\nweight: 50\n---\n\n## \u00bfQu\u00e9 es Helm?\n\n[helm](https://www.helm.sh/) es el administrador de paquetes de c\u00f3digo abierto para Kubernetes.\n\nFunciona como cualquier otro administrador de paquetes (brew, yum, npm, etc) donde existen uno o m\u00e1s repositorios de donde se instalan los paquetes. Los paquetes en helm se llaman cartas n\u00e1uticas (`charts`) para seguir con el tema n\u00e1utico en Kubernetes. Estos `charts` pueden ser buscados, instalados y actualizados.\n\nUn [chart de helm es b\u00e1sicamente un conjunto de ficheros YAML versionados](https://docs.helm.sh/developing_charts/#charts) de Kubernetes que se puede instalar f\u00e1cilmente en cualquier cl\u00faster.\n\nHelm permite la composici\u00f3n entre charts (un chart puede contener otro chart) a trav\u00e9s del fichero `requirements.yaml`.\n\n## \u00bfQu\u00e9 es Skaffold?\n\n[skaffold](https://github.com/GoogleContainerTools/skaffold) en una herramienta de c\u00f3digo abierto para construir im\u00e1genes de docker en los cl\u00fasteres de Kubernetes y luego desplegarlas/actualizarlas a trav\u00e9s de `kubectl` o `helm`.\n\nEl reto de construir im\u00e1genes de docker dentro del cl\u00faster de Kubernetes es seleccionar c\u00f3mo hacerlo, porque existen varias estrategias a seguir para lograr el mismo objetivo, p.ej:\n\n* utilizar el proceso (daemon) y socket local de docker del cl\u00faster de Kubernetes.\n* utilizar el servicio de la nube como por ejemplo Google Cloud Builder\n* utilizar un enfoque sin docker-daemon como es [kaniko](https://github.com/GoogleContainerTools/kaniko) que no necesita tener accesso al daemon de docker.\n\nLo bueno de skaffold es que abstrae su c\u00f3digo o CLI de esos detalles; te permite definir la pol\u00edtica para construir im\u00e1genes de docker en su archivo `skaffold.yaml` para cambiar entre docker daemon, GCB o kaniko, etc.\n\nSkaffold tambi\u00e9n es realmente \u00fatil dentro de [DevPods](/docs/reference/devpods/) para hacer compilaciones incrementales r\u00e1pidas si cambia el c\u00f3digo fuente.\n\n## \u00bfC\u00f3mo se compara Helm con Skaffold?\n\n`helm` le permite instalar/actualizar paquetes llamados charts que utilizan una o m\u00e1s im\u00e1genes de docker que se encuentran en alg\u00fan registro de docker junto con algunos ficheros Kubernetes YAML para instalar/actualizar aplicaciones en un cl\u00faster de Kubernetes.\n\n`skaffold` es una herramienta para realizar construcciones de im\u00e1genes de docker y, opcionalmente, volver a desplegar aplicaciones a trav\u00e9s de `kubectl` o `helm`, ya sea dentro del pipeline CI/CD o cuando se desarrolla localmente.\n\nJenkins X utiliza `skaffold` en sus pipelines de CI/CD para crear im\u00e1genes de docker. Luego se liberan versiones de im\u00e1genes de docker y charts de helm en cada mezcla de master. Luego se promueven los cambios a trav\u00e9s de `helm`.\n\n## \u00bfQu\u00e9 es exposecontroller?\n\nResulta que exponer servicios fuera del cl\u00faster de Kubernetes puede ser complejo. p.ej.\n\n* \u00bfQu\u00e9 dominio usar?\n* \u00bfDeber\u00eda usar TLS y generar certificados y asociarlos con los dominios?\n* \u00bfEst\u00e1s usando OpenShift si es as\u00ed, entonces quiz\u00e1s usar `Route` es mejor que usar `Ingress`?\n\nEntonces, hemos simplificado los microservicios en Jenkins X delegando a un microservicio llamado [exposecontroller](https://github.com/jenkins-x/exposecontroller) el trabajo de ocuparse de estas cosas, como p.ej:\n\n* exponer todos los `Service` que tienen una etiqueta para indicar que est\u00e1n destinados a ser expuestos utilizando el cl\u00faster actual\n* controla las reglas de exposici\u00f3n de los namespaces como el dominio\n* utilizar o no TLS\n* utilizar `Route` o `Ingress`\n\nSi mira dentro del repositorio Git de su entorno, puede observar que hay 2 `exposecontroller` de forma predeterminada. Ambos `exposecontroller` son [charts de helm](https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml).\n\nEstas 2 tareas son utilizadas de forma predeterminada para la generaci\u00f3n o limpieza de recursos `Ingress` para exponer los recursos `Services` etiquetados para a los que desee acceder desde fuera del cl\u00faster. p.ej aplicaci\u00f3n web o api rest.\n\nPuede optar por no utilizar exposecontroller si lo desea, simplemente no use las etiquetas de exposecontroller en sus servicios. Si lo desea, puede eliminar el trabajo de exposecontroller de un entorno, \u00a1aunque no podr\u00e1 acceder a ninguno de nuestros QuickStarts desde fuera del cl\u00faster si lo hace!",
            "content/es/docs/concepts/version-stream.md": "---\ntitle: Version Stream\nlinktitle: Version Stream\ndescription: \u00bfC\u00f3mo mejoramos la estabilidad de Jenkins X y sus Aplicaciones?\nweight: 60\n---\n\nJenkins X est\u00e1 compuesto por una gran cantidad de l\u00ednea de comandos empaquetados, im\u00e1genes de docker y charts de helm, algunos de los cuales son lanzados por la comunidad Jenkins X y otros provienen del ecosistema de c\u00f3digo abierto m\u00e1s amplio.\n\nPara mejorar la estabilidad de Jenkins X cuando muchos paquetes y charts est\u00e1n cambiando todo el tiempo, hemos introducido el Flujo de versiones de Jenkins X, `Version Stream`.\n\n<figure>\n<img src=\"/images/jx-version-stream-v1.png\"/>\n<figcaption>\n<h5>El diagrama muestra c\u00f3mo se propagar\u00e1 una nueva versi\u00f3n JX a trav\u00e9s de los componentes.</h5>\n</figcaption>\n</figure>\n\n## \u00bfC\u00f3mo funciona?\n\nEl flujo de versiones (`Version Stream`) se almacena en el repositorio Git [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) y almacena la versi\u00f3n estable de todos los paquetes y charts utilizados por Jenkins X.\n\nCuando ejecuta un comando, como por ejemplo [crear un cl\u00faster](/es/docs/getting-started/setup/create-cluster/), [instalar en un cl\u00faster existente](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) o ejecutar el comando [jx upgrade](/commands/jx_upgrade/), el comando `jx` se asegurar\u00e1 de que tenga un clon local del repositorio Git [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) actualizado. Despu\u00e9s de clonado el repositorio Jenkins X se descarga la versi\u00f3n estable de los charts y paquetes descritos en el, o registrar\u00e1 una advertencia si la versi\u00f3n no lo es.\n\nLa versi\u00f3n [jx](https://github.com/jenkins-x/jx) por ahora se publica como una [versi\u00f3n preliminar](https://help.github.com/en/articles/creating-releases). Cada versi\u00f3n de jx se actualiza solamente cuando una nueva versi\u00f3n llega con \u00e9xito al repositorio jenkins-x-versions. Cada nueva versi\u00f3n es sometida a rondas de pruebas BDD (_consulte el diagrama anterior para obtener m\u00e1s informaci\u00f3n_) antes de ser marcadas como listas para liberar.\n\n## \u00bfC\u00f3mo actualizamos el Flujo de Versiones?\n\nUtilizamos GitOps y CI/CD para administrar el Flujo de Versiones (`Version Stream`).\n\nA medida que se lanzan nuevos paquetes o charts, generamos PR en el repositorio git [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions). Luego activamos nuestras [pruebas BDD](https://github.com/jenkins-x/bdd-jx) a trav\u00e9s de [jx step bdd](/commands/jx_step_bdd/) y verificamos que la nueva versi\u00f3n del chart/paquete funcione antes de mezclar los cambios. Actualmente activamos manualmente las pruebas de BDD a trav\u00e9s del comentario `/test this`, pero esperamos pasar a la activaci\u00f3n peri\u00f3dica de las pruebas de BDD (por ejemplo, una vez al d\u00eda).\n\nLas personas que aprueban los PR tambi\u00e9n pueden optar por ejecutar sus propias pruebas manuales en las PR si lo desean.\n\nAl completar con \u00e9xito todas las pruebas BDD ejecutadas en el PR, mezclar\u00e1 el cambio y ejecutar\u00e1 una actualizaci\u00f3n de todas las dependencias jx (homebrew-jx, jx-docs, jx-tutorial y dev-env-base).\n\n## Creando Pull Requests (PR)\n\nTenemos un simple comando CLI [jx step create pullrequest versions](/commands/jx_step_create_pullrequest_versions/) que se puede utilizar para generar autom\u00e1ticamente solicitudes de extracci\u00f3n (PR) en el repositorio git [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions).\n\nSi eres el responsable de un chart de entrada que utiliza Jenkins X, ser\u00eda incre\u00edble agregar este comando al final de su pipeline de liberaci\u00f3n para generar un PR y que de esa forma podamos actualizar Jenkins X para utilizar su nueva versi\u00f3n (despu\u00e9s que las pruebas BDD hayan pasado correctamente):\n\n```sh\njx step create pullrequest versions -n mychartName -v 1.2.3\n```\n\ndonde mychartName es el nombre de gr\u00e1fico completo que utiliza el prefijo de repositorio remoto. p.ej. jenkins-x / prow es el nombre del gr\u00e1fico de proa mantenido en el repositorio de gr\u00e1ficos jenkins-x.\n\ndonde `mychartName` es el nombre completo del chart donde se incluye el prefijo para el repositorio remoto. p.ej `jenkins-x/prow` ser\u00eda `prow` el nombre del chart que se le da manteminiento y `jenkins-x` el repositorio del chart.\n\n### Actualizaciones Peri\u00f3dicas\n\nNo siempre es f\u00e1cil/posible actualizar los pipelines de entrada para impulsar los cambios de versi\u00f3n a Jenkins X a trav\u00e9s de los PRs. Por lo tanto, puede configurar tareas peri\u00f3dicas para buscar actualizaciones de versi\u00f3n para todos los charts o para charts que coincidan con una expresi\u00f3n regular.\n\np.ej para actualizar las versiones de todos los charts incluidos en `jenkins-x` utilice el siguiente comando:\n\n```sh\njx step create version pr -f \"jenkins-x/*\"\n```\n\n## Ejecutar los tests BDD\n\nDesde un clon de Git master o un PR, puede ejecutar las pruebas BDD contra la combinaci\u00f3n de la versi\u00f3n del PR utilizando el comando [jx step bdd](/commands/jx_step_bdd/) y especificando `--dir .` para el directorio del clon.\n\np.ej. puede ejecutar las pruebas BDD usted mismo a trav\u00e9s de ...\n\n```sh\ngit clone https://github.com/jenkins-x/jenkins-x-versions.git\n\n#\u00a0env vars for the git / jenkins secrets\nexport GIT_PROVIDER=github\nexport GIT_PROVIDER_URL=https://github.com\nexport BUILD_NUMBER=10\nexport JENKINS_CREDS_PSW=mypassword\nexport GIT_CREDS_PSW=XXXXXXX\nexport GIT_USER=YYYYY\n\njx step bdd --dir . --config jx/bdd/staticjenkins.yaml --gopath /tmp --git-provider=$GIT_PROVIDER --git-provider-url=$GIT_PROVIDER_URL --git-username $GIT_USER --git-owner $GIT_USER --git-api-token $GIT_CREDS_PSW --default-admin-password $JENKINS_CREDS_PSW --no-delete-app --no-delete-repo --tests test-create-spring\n```\n\nLos diversos archivos YAML en la carpeta [jx/bdd](https://github.com/jenkins-x/jenkins-x-versions/tree/master/jx/bdd) contienen una selecci\u00f3n de diferentes grupos configuraciones que se pueden utilizar.",
            "content/es/docs/contributing/_index.md": "---\ntitle: Contribuye al Proyecto Jenkins X\nlinktitle: Contribuye a Jenkins X\ndescription: Contribuye al desarrollo de Jenkins X y a su documentaci\u00f3n.\nweight: 10\n---\n\nJenkins X relies heavily on the enthusiasm and participation of the open-source community. We need your help so please dive in! There are many ways to help:\n\n\n* [Give us feedback](/community/). What could we improve? Anything you don't like or you think is missing?\n* Help [improve the documentation](/community/documentation/) so its more clear how to get started and use Jenkins X\n* [Add your own quickstarts](/docs/getting-started/first-project/create-quickstart/#adding-your-own-quickstarts) so the Jenkins X community can easily bootstrap new projects using your quickstart. If you work on an open source project is there a good quickstart we could add to Jenkins X?\n* Create an [Addon](/about/concepts/features/#applications). To add your own addon just create a Helm chart for some useful way to extend Jenkins X and then submit a Pull Request on [the pkg/kube/constants.go file](https://github.com/jenkins-x/jx/blob/master/pkg/kube/constants.go#L32-L50) to add your chart into the `AddonCharts` with its name matching a chart name\n* If you'd like to [contribute to the code](/community/code/) then try browse the [current issues](https://github.com/jenkins-x/jx/issues).\n  * we have marked issues [help wanted](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) or [good first issue](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) to save you hunting around too much\n  * in particular we would love help on getting Jenkins X [working well on windows](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3Awindows) or the [integrations with cloud services, git providers and issues trackers](https://github.com/jenkins-x/jx/issues?q=is%3Aissue+is%3Aopen+label%3Aintegrations)\n * we could always use more test cases and to improve test coverage!\n",
            "content/es/docs/contributing/code/_index.md": "---\ntitle: Contribute to the code\nlinktitle: Development\ndescription: How to contribute to Jenkins X development.\nauthors: [digitalcraftsman]\nweight: 10\n---\n\n# Introduction\n\nJenkins X is an open-source project and lives by the work of its [contributors](https://github.com/jenkins-x/jx/graphs/contributors). There are plenty of [open issues](https://github.com/jenkins-x/jx/issues), and we need your help to make Jenkins X even more awesome. You don't need to be a Go guru to contribute to the project's development.\n\n# Assumptions\n\nThis contribution guide takes a step-by-step approach in hopes of helping newcomers. Therefore, we only assume the following:\n\n* You are new to Git or open-source projects in general\n* You are a fan of Jenkins X and enthusiastic about contributing to the project\n\n{{< alert >}}\nIf you're struggling at any point in this contribution guide, reach out to the Jenkins X community in [Jenkins X's Discussion forum](/community/).\n{{< /alert >}}\n\n# Prerequisites\n\nTo contribute to Jenkins X jx binary, you will need:\n\n - [Git](https://git-scm.com) and a [GitHub](https://github.com) account\n - [Go](https://golang.org/) `1.11.4`, with support for compiling to `linux/amd64`\n - [pre-commit](https://pre-commit.com/#install) - We use pre-commit as a method of executing specific tasks prior to a git commit. The majority of our pre-commit configurations use [detect-secrets](https://github.com/Yelp/detect-secrets), which helps us prevent leaking secrets into repositories. Once installed, ensure you're at the root of the repository which contains a `.pre-commit-config.yaml` configuration file, then:\n\n```sh\npre-commit install\n```\n\n## Install Go\n\nWe recommend the latest version of go `1.11.4` as this ensures the go modules works.\n\nThe installation of Go should take only a few minutes. You have more than one option to get Go up and running on your machine.\n\nIf you are having trouble following the installation guides for go, check out [Go Bootcamp](http://www.golangbootcamp.com/book/get_setup) which contains setups for every platform or reach out to the Jenkins X community in the [Jenkins X Slack channels](/community/#slack).\n\n### Install Go on macOS\n\nIf you are a macOS user and have [Homebrew](https://brew.sh/) installed on your machine, installing Go is as simple as the following command:\n\n```sh\nbrew install go\n```\n\n### Install Go via GVM\n\nMore experienced users can use the [Go Version Manager](https://github.com/moovweb/gvm) (GVM). GVM allows you to switch between different Go versions *on the same machine*. If you're a beginner, you probably don't need this feature. However, GVM makes it easy to upgrade to a new released Go version with just a few commands.\n\nGVM comes in especially handy if you follow the development of Jenkins X over a longer period of time. Future versions of Jenkins X will usually be compiled with the latest version of Go. Sooner or later, you will have to upgrade if you want to keep up.\n\n### Install Go on Windows\n\nSimply install the latest version by downloading the [installer](https://golang.org/dl/).\n\n\n## Clearing your go module cache\n\nIf you have used an older version of go you may have old versions of go modules. So its good to run this command to clear your cache if you are having go build issues:\n\n```sh\ngo clean -modcache\n```\n\n### Set up your GOPATH\n\nOnce you're finished installing Go, let's confirm everything is working correctly. Open a terminal - or command line under Windows - and type the following:\n\n```sh\ngo version\n```\n\nYou should see something similar to the following written to the console (on macOS). Note that the version here reflects the most recent version of Go as of the last update for this page:\n\n```sh\ngo version go1.11 darwin/amd64\n```\n\nNext, make sure that you set up your `GOPATH` [as described in the installation guide](https://github.com/golang/go/wiki/SettingGOPATH).\n\nYou can print the `GOPATH` with `echo $GOPATH`. You should see a non-empty string containing a valid path to your Go workspace; .e.g.:\n\n```sh\n$ echo $GOPATH\n/Users/<yourusername>/Code/go\n```\n\n## Install Git on your system\n\nGit is a [version control system](https://en.wikipedia.org/wiki/Version_control) to track the changes of source code.\n\nYou will need to have Git installed on your computer to contribute to Jenkins X development. Teaching Git is outside the scope of the Jenkins X docs, but if you're looking for an excellent reference to learn the basics of Git, we recommend the [Git book](https://git-scm.com/book/) if you are not sure where to begin.\n\nMove back to the terminal and check if Git is already installed. Type in `git version` and press enter. You can skip the rest of this section if the command returned a version number. Otherwise [download](https://git-scm.com/downloads) the latest version and follow this [installation guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\n\nFinally, check again with `git version` if Git was installed successfully.\n\n### Git Graphical Front Ends\n\nThere are several [GUI clients](https://git-scm.com/downloads/guis) that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, we will use the command line since the commands are everywhere the same.\n\n### Install Hub on Your System (Optional)\n\nHub is a great tool for working with GitHub. The main site for it is [hub.github.com](https://hub.github.com/). Feel free to install this little Git wrapper.\n\nOn a Mac, you can install [Hub](https://github.com/github/hub) using [Homebrew](https://brew.sh):\n\n```sh\nbrew install hub\n```\n\nNow we'll create an [alias in Bash](http://tldp.org/LDP/abs/html/aliases.html) so that typing `git` actually runs `Hub`:\n\n```sh\necho \"alias git='hub'\" >> ~/.bash_profile\n```\n\n## Create a GitHub Account\n\nIf you're going to contribute code, you'll need to have an account on GitHub. Go to [www.github.com/join](https://github.com/join) and set up a personal account.\n\n## Set up your working copy\n\nThe working copy is set up locally on your computer. It's what you'll edit, compile, and end up pushing back to GitHub. The main steps are cloning the repository and creating your fork as a remote.\n\n### Fork the repository\n\nIf you're not familiar with this term, GitHub's [help pages](https://help.github.com/articles/fork-a-repo/) provide again a simple explanation:\n\n> A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nOpen the [Jenkins X repository](https://github.com/jenkins-x/jx) on GitHub and click on the \"Fork\" button in the top right.\n\n![Fork button](/images/contribute/development/forking-a-repository.png)\n\n### Clone your fork locally\n\nNow open your fork repository on GitHub and copy the remote url of your fork. You can choose between HTTPS and SSH as protocol that Git should use for the following operations. HTTPS works always [if you're not sure](https://help.github.com/articles/which-remote-url-should-i-use/).\n\n![Copy remote url](/images/contribute/development/copy-remote-url.png)\n\nThen go back to your terminal and clone your fork locally. Since jx is a Go package, it should be located at `$GOPATH/src/github.com/jenkins-x/jx`.\n\n```sh\nmkdir -p $GOPATH/src/github.com/jenkins-x\ncd $GOPATH/src/github.com/jenkins-x\ngit clone git@github.com:<YOUR_USERNAME>/jx.git\ncd jx\n```\n\nAdd the conventional upstream `git` remote in order to fetch changes from jx's main master\nbranch and to create pull requests:\n\n```sh\ngit remote add upstream https://github.com/jenkins-x/jx.git\n```\n\nLet's check if everything went right by listing all known remotes:\n\n```sh\ngit remote -v\n```\n\nThe output should look similar to:\n\n```sh\norigin    git@github.com:<YOUR_USERNAME>/jx.git (fetch)\norigin    git@github.com:<YOUR_USERNAME>/jx.git (push)\nupstream  https://github.com/jenkins-x/jx.git (fetch)\nupstream  https://github.com/jenkins-x/jx.git (push)\n```\n\n### Fork with Hub\n\nAlternatively, you can use the Git wrapper Hub. Hub makes forking a repository easy:\n\n```sh\nhub fork\n```\n\nThat command will log in to GitHub using your account, create a fork of the repository that you're currently working in, and add it as a remote to your working copy.\n\n## Contribution Workflow\n\n### Create a new branch\n\nFirst, ensure that your local repository is up-to-date with the latest version of jx. More details on [GitHub help](https://help.github.com/articles/syncing-a-fork/)\n\n```sh\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\n```\n\nNow you can create a new branch for your change:\n\n```sh\ngit checkout -b <BRANCH-NAME>\n```\n\nYou can check on which branch your are with `git branch`. You should see a list of all local branches. The current branch is indicated with a little asterisk.\n\n### General Development\n\n#### Cross-platform Development\n\nBear in mind when developing that the code can (and will) run on different architectures/operating systems from your own. You may develop on a *nix platform, but other users will also be using Windows. Keep other platforms in mind when developing your code, eg:\n* Not all platforms use the `HOME` environment variable for your home directory. Use [`user.Current`](https://golang.org/pkg/os/user/#Current)[`.HomeDir`](https://golang.org/pkg/os/user/#User) instead of looking up `$HOME` to get the user's home directory\n* Different platforms use different places for temporary directories/files. Use [`ioutil.TempDir`](https://golang.org/pkg/io/ioutil/#TempDir) instead of creating directories/files under `/tmp`\n* Be aware of path separators (*nix uses `/`, Windows uses `\\`) - do not just concantenate strings when using filepaths; instead use [`filepath.Join`](https://golang.org/pkg/path/filepath/#Join) to concatenate file paths safely\n* Be aware of default line endings (*nix uses `LF`, Windows uses `CRLF`)\n\n### Push commits\n\nTo push our commits to the fork on GitHub you need to specify a destination. A destination is defined by the remote and a branch name. Earlier, the remote url of our fork was given the default name of `origin`. The branch should be given the same name as our local one. This makes it easy to identify corresponding branches.\n\n```sh\ngit push --set-upstream origin <BRANCH-NAME>\n```\n\nNow Git knows the destination. Next time when you to push commits you just need to enter `git push`.\n\n### Build your change\n\nWith the prerequisites installed and your fork of jx cloned, you can make changes to local jx source code and hack as much as you want.\n\nRun `make` to build the `jx` binaries:\n\n```sh\nmake build\n```\nSee below to get some advises on how to [test](#testing) and [debug](#debugging).\n\n### Squash and rebase\n\nSo you are happy with your development and are ready to prepare the PR. Before going further, let's squash and rebase your work.\n\nThis is a bit more advanced but required to ensure a proper Git history of Jenkins X. Git allows you to [rebase](https://git-scm.com/docs/git-rebase) commits. In other words: it allows you to rewrite the commit history.\n\nLet's take an example.\n\n```sh\ngit rebase --interactive @~3\n```\n\nThe `3` at the end of the command represents the number of commits that should be modified. An editor should open and present a list of last three commit messages:\n\n```sh\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\npick 33c8973 Begin workflow\npick 3502f2e Refactoring and typo fixes\n```\n\nIn the case above we should merge the last 2 commits in the commit of this tutorial (`Add \"How to contribute to Jenkins X\" tutorial`). You can \"squash\" commits, i.e. merge two or more commits into a single one.\n\nAll operations are written before the commit message. Replace `pick` with an operation. In this case `squash` or `s` for short:\n\n```sh\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\nWe also want to rewrite the commits message of the third last commit. We forgot \"docs:\" as prefix according to the code contribution guidelines. The operation to rewrite a commit is called `reword` (or `r` as shortcut).\n\nYou should end up with a similar setup:\n\n```sh\nreword 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\nClose the editor. It should open again with a new tab. A text is instructing you to define a new commit message for the last two commits that should be merged (aka \"squashed\"). Save the file and close the editor again.\n\nA last time a new tab opens. Enter a new commit message and save again. Your terminal should contain a status message. Hopefully this one:\n\n```sh\nSuccessfully rebased and updated refs/heads/<BRANCH-NAME>.\n```\n\nCheck the commit log if everything looks as expected. Should an error occur you can abort this rebase with `git rebase --abort`.\n\nIn case you already pushed your work to your fork, you need to make a force push\n\n```sh\ngit push --force\n```\nLast step, to ensure that your change would not conflict with other changes done in parallel by other contributors, you need to rebase your work on the latest changes done on jx master branch. Simply:\n\n```sh\ngit checkout master #Move to local master branch\ngit fetch upstream #Retrieve change from jx master bracnch\ngit merge upstream/master #Merge the change into your local master\ngit checkout <BRANCH-NAME> #Move back to your local branch where you did your development\ngit rebase master\n```\nHandle any conflicts and make sure your code builds and all tests pass. Then force push your branch to your remote.\n\n## Signoff\n\nA [Developer Certificate of Origin](https://en.wikipedia.org/wiki/Developer_Certificate_of_Origin) is required for all\ncommits. It can be proivided using the [signoff](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff)\noption for `git commit` or by GPG signing the commit. The developer certificate is available at (https://developercertificate.org/).\n\nJenkins X enforces the DCO using the a [bot](https://github.com/probot/dco). You can view the details on the DCO check\nby viewing the `Checks` tab in the GitHub pull request.\n\n![DCO signoff check](https://user-images.githubusercontent.com/13410355/42352794-85fe1c9c-8071-11e8-834a-05a4aeb8cc90.png)\n\nYou can use a hook to make sure all your commits messages are signed off.\n\n1. Run `mkdir -p ~/.git-templates/hooks`\n2. Run `git config --global init.templatedir ~/.git-templates`\n3. Add this to `~/.git-templates/hooks/prepare-commit-msg`:\n\n    ```bash\n    #!/bin/sh\n\n    COMMIT_MSG_FILE=$1  # The git commit file.\n    COMMIT_SOURCE=$2    # The current commit message.\n\n    # Add \"Signed-off-by: <user> <email>\" to every commit message.\n    SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n    git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n    if test -z \"$COMMIT_SOURCE\"; then\n    /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n    fi\n    ```\n\n4. Make sure this file executable `chmod u+x ~/.git-templates/hooks/prepare-commit-msg`\n5. Run `git init` on the repo you want to use the hook on\n\nNote that this will not override the hooks already defined on your local repo. It adds the `Signed-off-by: ...` line\nafter the commit message has been created by the user.\n\nA better alternative is to GPG sign all your commits. This has the advantage that as well as stating your agreement to\nthe DCO it also creates a trust mechanism for your commits. It's a little harder to set up but there is a\ngood guide from GitHub:\n\n1. If you don't already have a GPG key then follow [this guide to create one](https://help.github.com/en/articles/generating-a-new-gpg-key)\n2. Now you have a GPG key follow [this guide to see how to sign your commit](https://help.github.com/en/articles/signing-commits)\n3. Next, tell [tell GitHub about your key so that it can verify your commits](https://help.github.com/en/articles/adding-a-new-gpg-key-to-your-github-account)\n4. Now, configure git to always use sign commits by running\n\n```sh\ngit config --global user.signingkey <key id>\n```\n\n   The process to find the key id is described in [https://help.github.com/en/articles/checking-for-existing-gpg-keys](https://help.github.com/en/articles/checking-for-existing-gpg-keys)\n\n5. Set up a keychain for your platform. This is entirely optional but means you don't need to type your passphrase every\n   time and allows git to run headless. If you are using a Mac GPG Suite is a good way to do this. If you are on another\n   platform please open a PR against this document and add your recommendations!\n\n\n## The commit message\n\nJenkins X uses [conventional commits](https://www.conventionalcommits.org/en/v1.0.0-beta.4/) as it's commit message format. These are particularly important as semantic releases are in use, and they use the commit messages to determine the type of changes in the codebase. Following formalized conventions for commit messages the semantic release automatically determines the next [semantic version](https://semver.org) number and generates a changelog based on the conventional commit.\n\nSemantic releases originate in the [Angular Commit Message Conventions](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines), and the rules described there are the ones used by Jenkins X.\n\nHere is an example of the release type that will be done based on a commit messages:\n\n| Commit message                                                                                                                                                                                   | Release type               |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------|\n| `fix(pencil): stop graphite breaking when too much pressure applied`                                                                                                                             | Patch Release              |\n| `feat(pencil): add 'graphiteWidth' option`                                                                                                                                                       | ~~Minor~~ Feature Release  |\n| `perf(pencil): remove graphiteWidth option`<br><br>`BREAKING CHANGE: The graphiteWidth option has been removed.`<br>`The default graphite width of 10mm is always used for performance reasons.` | ~~Major~~ Breaking Release |\n\n\n## Open a pull request\n\nWe made a lot of progress. Good work. In this step we finally open a pull request to submit our additions. Open the [Jenkins X master repository](https://github.com/jenkins-x/jx/) on GitHub in your browser.\n\nYou should find a green button labeled with \"New pull request\". But GitHub is clever and probably suggests you a pull request like in the beige box below:\n\n![Open a pull request](/images/contribute/development/open-pull-request.png)\n\nThe new page summaries the most important information of your pull request. Scroll down and you find the additions of all your commits. Make sure everything looks as expected and click on \"Create pull request\".\n\nThere are a number of automated checks that will run on your PR:\n\n* Semantic Pull Request - validates that your commit messages meet the Conventional Commit format described above.\n  Additionally your PR must also have a conventional message. The UX for this bot is a little odd as it doesn't go red\n  if the messages are NOT correct, instead it goes yellow. You need it to go to a green tick!\n* DCO - see [Signoff](#signoff)\n* Hound - lints the code and comments inline with any issues. You need this to go to a green tick and and say \"No violations found. Woof!\"\n* lint - runs a lot more lint checks but in a CI job so won't provide inline feedback. You need this to pass as a green tick. Check the log for any errors.\n* bdd - runs the end to end test [create-spring](https://github.com/jenkins-x/bdd-jx/blob/master/test/spring/jx_create_spring.go) in a new team on an existing cluster using static jenkins. Check the logs for errors.\n* tekton - runs the end to end test [create-spring](https://github.com/jenkins-x/bdd-jx/blob/master/test/spring/jx_create_spring.go), [test-quickstart-golang-http](https://github.com/jenkins-x/bdd-jx/blob/master/test/quickstart/helpers.go#L50) and [test-import-golang-http-from-jenkis-x-yml](https://github.com/jenkins-x/bdd-jx/blob/master/test/_import/jx_import.go#L37) in a new cluster using tekton. Check the logs for errors.\n* integration - runs all the tests that are inline in jx codebase. Check the logs for errors.\n* tide - performs the merge when all the checks pass. Don't worry about the state of this one, it doesn't add much info.\n  Clicking on the details link is very helpful as it will take you to the dashboard where you can navigate to the \"Tide\"\n  screen and check the status of your PR in the merge queue.\n\nThen Jenkins X itself and the maintainers will review your PR, potentially initiate discussion around your change and finally, merge it successfully in Jenkins X jx. Congratulations !\n\n## Getting a pull request merged\n\nNow your pull request is submitted, you need to get it merged. If you aren't a regular contributor you'll need a maintainer to manually review your PR and issue a `/ok-to-test` command in a PR comment. This will trigger the automated tests. If the tests fail, you'll need to ask one of the maintainers to send you the failure log (in the future we will make these public but first we need to check we are masking all secrets).\n\nIf the tests pass you need to get a `/lgtm` from one of the reviewers (listed in the `OWNERS` file in the repository). You need a new LGTM every time you push changes. Once the tests pass and you have a LGTM for the latest changeset, your PR will be automatically merged.\n\nJenkins X (well, Tide, a component of Jenkins X) won't merge your changes until it has the tests passing against the *current* `HEAD` of `master` - but don't worry, whilst the tests *continue* to pass it will automatically merge your changeset into master and rerun the tests. As you can imagine, this can take a little while (a few hours) if the merge queue is long. Tide will also automatically attempt to batch up passing changes, but if the batch fails, it will resort to merging the changesets one by one.\n\nIf the retest against `HEAD` of `master` fail, then it will notify you on the pull request and you'll need to make some changes (and potentially get a new LGTM).\n\n## Testing\n\nThe jx test suite is divided into three sections:\n - The standard unit test suite\n - Slow unit tests\n - Integration tests\n\nTo run the standard test suite:\n```sh\nmake test\n```\n\nTo run the standard test suite including slow running tests:\n```sh\nmake test-slow\n```\n\nTo run all tests including integration tests (NOTE These tests are not encapsulated):\n```sh\nmake test-slow-integration\n```\n\nTo get a nice HTML report on the tests:\n```sh\nmake test-report-html\n```\n\n### Writing tests\n\n#### Unit Tests\n\nUnit tests should be isolated (see below what is an unencapsulated test), and should contain the `t.Parallel()` directive in order to keep things nice and speedy.\n\nIf you add a slow running (more than a couple of seconds) test, it needs to be wrapped like so:\n```golang\nif testing.Short() {\n\tt.Skip(\"skipping a_long_running_test\")\n} else {\n\t// Slow test goes here...\n}\n```\nSlows tests can (and should) still include `t.Parallel()`.\n\nBest practice for unit tests is to define the testing package appending _test to the name of your package, e.g. `mypackage_test` and then import `mypackage` inside your tests.\nThis encourages good package design and will enable you to define the exported package API in a composable way.\n\n#### Integration Tests\n\nTo add an integration test, create a separate file for your integration tests using the naming convention `mypackage_integration_test.go` Use the same package declaration as your unit tests: `mypackage_test`. At the very top of the file before the package declaration add this custom build directive:\n\n```golang\n// +build integration\n```\nNote that there needs to be a blank line before you declare the package name.\n\nThis directive will ensure that integration tests are automatically separated from unit tests, and will not be run as part of the normal test suite.\nYou should **NOT** add `t.Parallel()` to an unencapsulated test as it may cause intermittent failures.\n\n### What is an unencapsulated test?\nA test is unencapsulated (not isolated) if it cannot be run (with repeatable success) without a certain surrounding state. Relying on external binaries that may not be present, writing or reading from the filesystem without care to specifically avoid collisions, or relying on other tests to run in a specific sequence for your test to pass are all examples of a test that you should carefully consider before committing. If you would like to easily check that your test is isolated before committing simply run: `make docker-test`, or if your test is marked as slow: `make docker-test-slow`. This will mount the jx project folder into a golang docker container that does not include any of your host machines environment. If your test passes here, then you can be happy that the test is encapsulated.\n\n### Mocking / Stubbing\n<a name=\"mocking--stubbing\"></a>\n\nMocking or stubbing methods in your unit tests will get you a long way towards test isolation. Coupled with the use of interface based APIs you should be able to make your methods easily testable and useful to other packages that may need to import them.\n[Pegomock](https://github.com/petergtz/pegomock) is our current mocking library of choice, mainly because it is very easy to use and doesn't require you to write your own mocks (Yay!)\nWe place all interfaces for each package in a file called `interface.go` in the relevant folder. So you can find all interfaces for `github.com/jenkins-x/jx/pkg/util` in `github.com/jenkins-x/jx/pkg/util/interface.go`\nGenerating/regenerating a mock for a given interface is easy, just go to the `interface.go` file that corresponds with the interface you would like to mock and add a comment directly above your interface definition that will look something like this:\n```golang\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n\tDidError() bool\n\tDidFail() bool\n\tError() error\n\tRun() (string, error)\n\tRunWithoutRetry() (string, error)\n\tSetName(string)\n\tSetDir(string)\n\tSetArgs([]string)\n\tSetTimeout(time.Duration)\n\tSetExponentialBackOff(*backoff.ExponentialBackOff)\n}\n```\nIn the example you can see that we pass the generator to use: `pegomock generate` the package path name: `github.com/jenkins-x/jx/pkg/util` the name of the interface: `CommandInterface` and finally an output directive to write the generated file to a mock sub-folder. To keep things nice and tidy it's best to write each mocked interface to a separate file in this folder. So in this case: `-o mocks/command_interface.go`\n\nNow simply run:\n```sh\ngo generate ./...\n```\nor\n```sh\nmake generate-mocks\n```\n\nYou now have a mock to test your new interface!\nThe new mock can now be imported into your test file and used for easy mocking/stubbing.\nHere's an example:\n```golang\npackage util_test\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/jenkins-x/jx/pkg/util\"\n\tmocks \"github.com/jenkins-x/jx/pkg/util/mocks\"\n\t. \"github.com/petergtz/pegomock\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestJXBinaryLocationSuccess(t *testing.T) {\n\tt.Parallel()\n\tcommandInterface := mocks.NewMockCommandInterface()\n\tWhen(commandInterface.RunWithoutRetry()).ThenReturn(\"/test/something/bin/jx\", nil)\n\n\tres, err := util.JXBinaryLocation(commandInterface)\n\tassert.Equal(t, \"/test/something/bin\", res)\n\tassert.NoError(t, err, \"Should not error\")\n}\n```\nHere we're importing the mock we need in our import declaration:\n```golang\nmocks \"github.com/jenkins-x/jx/pkg/util/mocks\"\n```\nThen inside the test we're instantiating `NewMockCommandInterface` which was automatically generated for us by pegomock.\n\nNext we're stubbing something that we don't actually want to run when we execute our test. In this case we don't want to make a call to an external binary as that could break our tests isolation. We're using some handy matchers which are provided by pegomock, and importing using a `.` import to keep the syntax neat (You probably shouldn't do this outside of tests):\n```golang\nWhen(commandInterface.RunWithoutRetry()).ThenReturn(\"/test/something/bin/jx\", nil)\n```\nNow when we can set up our  test using the mock interface and make assertions as normal.\n\n\n### Debug logging\n\nLots of the test have debug output to try figure out when things fail. You can enable verbose debug logging for tests via:\n\n```sh\nexport JX_TEST_DEBUG=true\n```\n\n## Debugging\n\nFirst you need to [install Delve](https://github.com/derekparker/delve/blob/master/Documentation/installation/README.md).\n\nThen build a version of `jx` that is optimised for debugging\n\n```sh\nDEBUG=on make build\n```\n\nThen you should be able to run a debug version of a jx command:\n\n```sh\ndlv --listen=:2345 --headless=true --api-version=2 exec ./build/jx -- some arguments\n```\n\nThen, in your IDE you should be able to set a breakpoint and connect to `2345` e.g. in IntelliJ you create a new `Go Remote` execution and then hit `Debug`.\n\n### Debugging jx with stdin\n\nIf you want to debug using `jx` with `stdin` to test out terminal interaction, you can start `jx` as usual from the command line then:\n\n1. Find the `pid` of the jx command via something like `ps -elaf | grep jx`\n2. Start Delve, attaching to the pid:\n\n\t```sh\n\tdlv --listen=:2345 --headless=true --api-version=2 attach SomePID\n\t```\n\n### Debugging a unit test\n\nYou can run a single unit test via:\n\n```sh\nexport TEST=\"TestSomething\"\nmake test1\n```\n\nYou can then start a Delve debug session on a unit test via:\n\n```sh\nexport TEST=\"TestSomething\"\nmake debugtest1\n```\n\nThen set breakpoints and debug in your IDE as described in [Debugging](#debugging).\n\n### Using a helper script\n\nIf you create a bash file called `jxDebug` as the following (replacing `SomePid` with the actual `pid`):\n\n```bash\n#!/bin/sh\necho \"Debugging jx\"\ndlv --listen=:2345 --headless=true --api-version=2 exec `which jx` -- $*\n```\n\nThen you can change your `jx someArgs` CLI to `jxDebug someArgs` then debug it!\n\n### Enabling Kubernetes API tracing\n\nIn some cases it can be useful to see the REST API calls made to the Kubernetes cluster.\nYou can enable trace by setting the environment variable `TRACE_KUBE_API` to the value \"on\" or \"1\".\nFor example:\n\n```sh\nTRACE_KUBE_API=on jx get apps\n```\n\n## Try a new version of jx inside a pipeline\n\nYou can usually just run `jx` locally on your laptop and can simulate being in a pipeline using environment variables and run it inside a git clone of a sample project etc. However there are times you really want to test inside an actual running pipeline - here's how:\n\nWhen you create a Pull Request and its approved for test we generate preview docker images you can use inside your jenkins server pipelines for maven/go/nodejs builders.\n\ne.g. see the `SNAPSHOT-JX_PR-$ID-$BUILD_NUMBER` images for the [jenkinsxio/builder-maven](https://hub.docker.com/r/jenkinsxio/builder-maven/tags/) image\n\nOnce you have a preview docker image you can then edit the jenkins pod template for maven/go/nodejs to use your PR\u2019s docker image to try out your changes to jx in a jenkins pipeline. To do this\n\n* `jx console` to open the Jenkins console\n* Manage Jenkins -> Configure System\n* search for builder-(maven|go|nodejs) and use the new docker image version you just built (that ends in your `PR number-buildnumber`)\n* now retrigger a pipeline\n\nWe don't yet do the same for serverless jenkins images am afraid - for that you'll have to make your own Docker image replacing the `jx` binary then edit the Prow configuration (`kubectl edit cm config`).\n\n\nAnother approach is you can make your own docker image, then pause a pipeline and `kubectl cp` your linux build of `jx` into the docker image and `kubectl exec` or `jx rsh` into the build pod and run the `jx` command there.\n\n## Code Generation\n\nJenkins X makes use of code generation to create [Mocks](#mocking--stubbing), Kubernetes Custom Resource clients, [OpenAPI spec and API Documentation](/apidocs).\nThe generated files, except for the HTML docs, checked into version control.\nThere are several `make` targets resposible for code generation.\nThey can be found in `Makefile.codegen`.\n\n* `make generate` runs all generation you need to do before commiting changes\n* `make generate-mocks` - generates the [Pegomocks](https://github.com/petergtz/pegomock) only\n* `make generate-client` - generates the Kubernetes Custom Resource clientset only.\n* `make generate-openapi` generates the [OpenAPI](https://swagger.io/specification/) spec only\n* `make generate-docs` generates the HTML apidocs, and is not committed\n\n {{< alert >}}\n Not all files under `pkg/client/clientset/versioned/typed/jenkins.io/v1` are generated.\n The expansion files are manually maintained and need to be kept when re-generating the clientset.\n See also [clientset generation](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machingenerating-clientset.md) in the Kuberenetes Community repository.\n {{< /alert >}}\n\nIf you get a conflict on any of these directories or files when committing, rebasing or merging your best bet is to discard the changeset you have, and regenerate:\n\n* `pkg/client` (`make generate-client`)\n* `docs/apidocs/openapi-spec` (`make generate-openapi`)\n* `**/mocks/**` (`make generate-mocks`)\n\nAs part of the PR builds we run a job to validate that the code generation is up to date.\nIf the code generation is not up to date (running `make generate` produces a `git diff` or untracked files) then your PR will be blocked.\n",
            "content/es/docs/contributing/documentation/_index.md": "---\ntitle: Contribute to the Documentation\nlinktitle: Documentation\ndescription: How to help improve the Jenkins X documentation\nweight: 10\n---\n\nWe welcome your contributions to Jenkins X documentation whether you are a developer, an end user of Jenkins X, or someone who can't stand seeing typos!\n\n# Assumptions\n\nThis contribution guide takes a step-by-step approach in hopes of helping newcomers. Therefore, we only assume the following:\n\n* You are new to Git or open-source projects in general\n* You are a fan of Jenkins X and enthusiastic about contributing to the project\n\n{{< alert >}}\nIf you're struggling at any point in this contribution guide, reach out to the Jenkins X community in [Jenkins X's Discussion forum](/community/).\n{{< /alert >}}\n\n## Getting Started\n\nThe first thing you'll need to do is get your local environment setup, so that you can add/change content and make sure it looks right before raising a Pull Request.\n\nWe'll go through each step below, but here's what you need to get started:\n\n* [Git](https://git-scm.com) and a [GitHub](https://github.com) account\n* A local workign copy of the code\n* A way to run the site locally to check your changes before submitting them\n\n## Install Git on your system\n\nGit is a [version control system](https://en.wikipedia.org/wiki/Version_control) to track the changes of source code.\n\nYou will need to have Git installed on your computer to contribute to Jenkins X development. Teaching Git is outside the scope of the Jenkins X docs, but if you're looking for an excellent reference to learn the basics of Git, we recommend the [Git book](https://git-scm.com/book/) if you are not sure where to begin.\n\nMove back to the terminal and check if Git is already installed. Type `git version` and press enter. If the command returned a version number, you can skip the rest of this section.\n\nOtherwise, [download](https://git-scm.com/downloads) the latest version and follow this [installation guide](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).\n\nFinally, run `git version` again to check if Git was installed successfully.\n\n### Git Graphical Front Ends\n\nThere are several [GUI clients](https://git-scm.com/downloads/guis) that help you to operate Git. Not all are available for all operating systems and maybe differ in their usage. Thus, we will use the command line since the commands are everywhere the same.\n\n## Create a GitHub Account\n\nIf you're going to contribute to the docs, you'll need to have an account on GitHub. Go to [www.github.com/join](https://github.com/join) and set up a personal account.\n\n## Set up your working copy\n\nThe working copy is set up locally on your computer. It's what you'll edit, compile, and end up pushing back to GitHub. The main steps are cloning the repository and creating your fork as a remote.\n\n### Fork the repository\n\nIf you're not familiar with this term, GitHub's [help pages](https://help.github.com/articles/fork-a-repo/) provide a simple explanation:\n\n> A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nOpen the [Jenkins X docs repository](https://github.com/jenkins-x/jx-docs) on GitHub and click on the \"Fork\" button in the top right.\n\n### Clone your fork locally\n\nNow open your fork repository on GitHub and copy the remote url of your fork. You can choose between HTTPS and SSH as protocol that Git should use for the following operations. HTTPS works always [if you're not sure](https://help.github.com/articles/which-remote-url-should-i-use/).\n\n![Copy remote url](/images/contribute/development/copy-remote-url.png)\n\nThen go back to your terminal, `cd` to where you would like to place your local copy of the `jx-docs` repo, and then clone your fork.\n\n```sh\ngit clone --recurse-submodules --depth 1 git@github.com:<YOUR_USERNAME>/jx-docs.git\ncd jx-docs\n```\n\n{{< alert >}}\nIn case you already have a git clone locally (from before the theme change) then run the following to pull the Docsy theme and dependencies\n\n```sh\ngit submodule update --init --recursive\n```\n{{< /alert >}}\n\nAdd the conventional upstream `git` remote in order to fetch changes from the `jx-docs` master\nbranch and to create pull requests:\n\n```sh\ngit remote add upstream https://github.com/jenkins-x/jx-docs.git\n```\n\nLet's check if everything went right by listing all known remotes:\n\n```sh\ngit remote -v\n```\n\nThe output should look similar to:\n\n```sh\norigin    git@github.com:<YOUR_USERNAME>/jx-docs.git (fetch)\norigin    git@github.com:<YOUR_USERNAME>/jx-docs.git (push)\nupstream  https://github.com/jenkins-x/jx-docs.git (fetch)\nupstream  https://github.com/jenkins-x/jx-docs.git (push)\n```\n\n## Local preview environment\n\nThe documentation (and the rest of the website) is generated using the static site generator [Hugo](https://gohugo.io), and you'll need a copy of that locally to be able to preview the site.\n\nAlthough Jenkins X offers preview environments, and they're used as part of the process of contributing documentation, it's usually faster to run the site locally and check that everything looks good for you, before you push your changes.\n\nThere are two different ways that you can run the site locally: using a locally installed version of Hugo or using a pre-baked Docker image that includes what's normally needed. Which approach you choose is fully up to you.\n\n### Docker/docker-compose method\n\nIf you haven't worked with Hugo before, or don't want to install it locally, this is your best option.\n\nThe first thing you'll need to make use of this approach is Docker installed on your local environment. How to install a Docker engine depends on your platform etc., so best to head over to [Docker](https://docs.docker.com/install/) to find the right one.\n\nTo make it as simple as possible, we've created and published Docker images installed with what's normally needed to run and work with Hugo, and have setup a `docker-compose.yml` file that will help you start up a preview server with a few helpful options.\n\nIn order to use this setup, first make sure you're in the folder with your local cloned copy of the `jx-docs` repo, then run the following command to download and start the Hugo server:\n\n```sh\ndocker-compose up -d server\n```\n\nThis will make the site available on http://localhost:1313/ and it will auto-update when you save changes to any of the files in the repo.\n\nTo be able to see what's going on, and know when the site is ready (can take a bit to process when you first start up), you can run this command (ctrl-c to stop watching the logs):\n\n```sh\ndocker-compose logs -f server\n```\n\nYou'll know the site is ready when you see something like:\n\n```sh\nserver_1        | Watching for changes in /src/{assets,content,layouts,static,themes}\nserver_1        | Watching for config changes in /src/config.toml, /src/themes/docsy/config.toml\nserver_1        | Environment: \"development\"\nserver_1        | Serving pages from memory\nserver_1        | Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nserver_1        | Web Server is available at //localhost:1313/ (bind address 0.0.0.0)\nserver_1        | Press Ctrl+C to stop\n```\n\nAs you're changing things and adding new content, your local Hugo server might get a bit wonky at times or you'll want to see what errors it's throwing. Here's a few simple commands to work with your local Hugo:\n\n#### See the Hugo Logs\n\n```sh\ndocker-compose logs -f server\n```\n\nLeave `-f` off if you don't want new log entries to show up in your console. (ctrl-c to escape when `-f` is on)\n\n#### Restart the Hugo Server\n\n```sh\ndocker-compose restart server\n```\n\n#### Stop the Hugo Server\n\n```sh\ndocker-compose stop server\n```\n\nor\n\n```sh\ndocker-compose down\n```\n\n### Install Hugo\n\nYou need a recent extended version (we recommend version 0.58 or later) of Hugo to do local builds and previews of the Jenkins X documentation site. If you install from the release page, make sure to get the extended Hugo version, which supports SCSS; you may need to scroll down the list of releases to see it.\n\n[Install Hugo following the gohugo.io instructions](https://gohugo.io/getting-started/installing).\n\nCheck you're using `Hugo extended` and a version higher than `0.58.0` :\n\n```sh\nhugo version\n```\n\nThe output should look something like `Hugo Static Site Generator v0.58.3/extended darwin/amd64 BuildDate: unknown`\n\n#### Install PostCSS\n\nTo build or update your site\u2019s CSS resources, you also need [PostCSS](https://postcss.org/) to create the final assets. If you need to install it, you must have a recent version of `NodeJS` installed on your machine so you can use `npm`, the Node package manager. By default `npm` installs tools under the directory where you run `npm install`:\n\n```sh\nsudo npm install -D --save autoprefixer\nsudo npm install -D --save postcss-cli\n```\n\nGet local copies of the project submodules so you can build and run your site locally:\n\n```sh\ngit submodule update --init --recursive\n```\n\n#### Starting the preview server\n\nBuild the site:\n\n```sh\nhugo server\n```\n\nIt's ready when you see something like this:\n\n```sh\nEnvironment: \"development\"\nServing pages from memory\nRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender\nWeb Server is available at //localhost:1313/ (bind address 127.0.0.1)\nPress Ctrl+C to stop\n```\n\nPreview your site in your browser at: http://localhost:1313. You can use `Ctrl + c` to stop the Hugo server whenever you like.\n\nIt may be a good idea to run the server in a separate terminal so that you can keep it running while also using git or other commands.\n\n#### Using spellchecker and linkchecker\n\nIn a later section we'll go over how to use other tools to check for spelling errors or typos, as well as checking that all links are working as expected. If you don't want to use the supplied docker approach, these tools will need to be installed locally as well:\n\n```sh\nnpm i markdown-spellcheck -g\ncurl https://htmltest.wjdp.uk | sudo bash -s -- -b /usr/local/bin\n```\n\nSee [markdown-spellcheck install](https://github.com/lukeapage/node-markdown-spellcheck#cli-usage) and [htmltest install](https://github.com/wjdp/htmltest#system-wide-install) pages for more details on other ways to install them.\n\n{{< alert >}}\nNote that at this point in time, htmltest installs as version 0.10.3, which does not include the option `IgnoreSSLVerify` which results in a lot of `x509` errors in the output. The docker option is based on a newer build that's not yet available as an official version\n{{< /alert >}}\n\n## Contribution Workflow\n\nOnce you've completed the initial steps to get started, you can begin to make changes and add new content.\n\nAt a high level, your workflow will likely look something like this:\n\n* Create a new branch for you work\n* Start the Hugo server to preview your changes (updates the site live)\n* Make changes/add new content\n* Commit and push your changes to your fork of `jx-docs`\n* Raise a Pull Request (PR) to have your changes merged into the main `jx-docs` repo\n* Wait for and then participate in a review of your changes\n  * might involve making adjustments or adding a bit more\n* See your changes go live on the [Jenkins X site](https://jenkins-x.io)\n\nWe'll go though each of the steps below in more detail\n\n### Create a new branch\n\nFirst, ensure that your local repository is up-to-date with the latest version of `jx-docs`. More details on [GitHub help](https://help.github.com/articles/syncing-a-fork/)\n\n```sh\ngit fetch upstream\ngit checkout master\ngit merge upstream/master\n```\n\nYou've now updated your local copy of the repository. To update your fork on GitHub, push your changes:\n\n```sh\ngit push origin master\n```\n\nCreate a new branch for the changes you'd like to make:\n\n```sh\ngit checkout -b <BRANCH-NAME>\n```\n\nYou can check on which branch your are with `git branch`. You should see a list of all local branches. The current branch is indicated with a little asterisk.\n\n### Start the Hugo server\n\nIn case you don't already have it running, this is a good time to start your local Hugo server. See the previous sections on how to do this, as it depends on how you installed Hugo (locally, or using docker).\n\nIf you already have Hugo running, it's usually best to double check that the site looks as you'd expect it (basically the same as the live site) and if something's off, do a quick restart of Hugo.\n\n### Make Changes\n\nAll pages are written in GitHub-flavored markdown (see [below](#markdown-syntax-reference) for details on syntax).\n\nSome things, like the footer etc. are in the `/themes/docsy` structure, but most likely you'll just be adding/changing things in the various page structures. If you do make changes that involve the theme, remember to copy-paste the theme file to the appropriate folder in the `/layouts` structure, and make your changes there. If you make changes to files in the `/themes/docsy` structure, they will likely be deleted when we update the theme.\n\n### Add new Content\n\nThe Jenkins X docs make heavy use of Jenkins X's archetypes feature. All content sections in Jenkins X documentation have an assigned archetype.\n\nAdding new content to the Jenkins X docs follows the same pattern, regardless of the content section:\n\n```sh\ndocker-compose run server new <DOCS-SECTION>/<new-content-lowercase>.md\n```\n\n### Commit and push your changes\n\nWhen you've finished, and verified that everything looks good (using the Hugo server), you should run one last check to verify that you didn't break anything.\n\n#### Checking References and Links\n\nWe're using a tool called [htmltest](https://github.com/wjdp/htmltest) to check that links are still valid etc. so you just need to run the following commands to build the site locally, and verify that everything looks good:\n\n```sh\ndocker-compose run server hugo\ndocker-compose up linkchecker\n```\n\nIf using a locally installed Hugo/htmltest, use these commands instead:\n\n```sh\nhugo\nhtmltest -c .htmltest.yml\n```\n\n#### Checking Spelling\n\nFor spell checking, we're using [node-markdown-spellcheck](https://github.com/lukeapage/node-markdown-spellcheck) to run through all our markdown files and list any spelling issue or unknown word it can find.\n\nTo make this as simple as possible, just run the following command\n\n```sh\ndocker-compose up spellchecker\n```\n\nIf using a locally installed Hugo/markdown-spellcheck, use these commands instead:\n\n```sh\nmdspell --en-us --ignore-numbers --ignore-acronyms --report \"content/**/*.md\"\n```\n\nThis will output any issue the spell checker have found.\n\nIt's likely that the report includes words that are spelled correctly, but that just means the spell checker is not aware of the correct spelling (happens a lot for technical terms, commands, etc.). Please edit the `.spelling` file and add the unknown word.\nAlso, please try and keep the list alphabetically sorted; makes it easier to navigate when you're looking for something\n\n#### Commit & Push\n\nIf everything is good, you can commit your changes, and push them to your fork:\n\n```sh\ngit push --set-upstream origin <BRANCH-NAME>\n```\n\nIf you need to push more commits to the same branch, you can just use `git push` going forward; set-upstream is only needed once.\n\n## Open a pull request \ud83c\udf89\n\nIn this step, you'll open a pull request to submit your additions. Open either the [Jenkins X documentation master repository](https://github.com/jenkins-x/jx-docs) or your own fork of the respository on GitHub in your browser.\n\nYou should find a green button labeled with \"New pull request\". But GitHub is clever and probably suggests you a pull request like in the beige box below:\n\n![Open a pull request](/images/contribute/development/open-pull-request.png)\n\nClick on the green \"Compare and pull request\" button. A new page will open which summaries the most important information of your pull request. Scroll down and you'll find the additions of all your commits. Make sure everything looks as expected and click on \"Create pull request\".\n\nThere are a number of automated checks that will run on your PR:\n\n* Semantic Pull Request - validates that your commit messages meet the [Conventional Commit format](https://github.com/probot/semantic-pull-requests#semantic-pull-requests).\n  Additionally your PR must also have a conventional message. The UX for this bot is a little odd as it doesn't go red\n  if the messages are NOT correct, instead it goes yellow. You need it to go to a green tick!\n* tide - performs the merge when all the checks pass. Don't worry about the state of this one, it doesn't add much info.\n  Clicking on the details link is very helpful as it will take you to the dashboard where you can navigate to the \"Tide\"\n  screen and check the status of your PR in the merge queue.\n\n### Review Process\n\nThe final part of all of this, is letting others review your work and provide feedback. As a rule of thumb, the conversation should happen on the PR, but sometimes things will be sorted out via Slack or a video call.\n\nSometimes it may take a few days for a review to happen. If you feel it's an urgent change, jump on the [community slack channel](https://jenkins-x.io/community/#slack) `#jenkins-x-user` and ask for someone to review your PR.\n\nOnce the review is done, your changes will be merged into the master branch, and the site will be updated.\n\n{{< alert >}}\nIn case you need to update your PR/branch because js-docs/master have been updated since you submitted your PR, run the followin `git` command to pull all the changes to your local environment and then push them to your PR/branch:\n\n```sh\ngit fetch upstream\ngit merge upstream/master\ngit push\n```\n\nIf you experience Merge Conflicts, there's a good [article on GitHub](https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line) that helps explain what to do\n{{< /alert >}}\n\n## Reference\n\nThe following sections contains other information that's helpful when working with Hugo and the Jenkins X site; you don't necessary need to go through this if this is your first time.\n\n### Search by Algolia/DocSearch\n\nWe're using [DocSearch](https://community.algolia.com/docsearch/) by Algolia to power the internal search.\n\n* The script and local config are declared in `/layouts/partials/scripts.html`\n* Styling is included via `/layouts/partials/head-css.html`\n* The configuration of the search index is managed via [docsearch-configs](https://github.com/algolia/docsearch-configs/blob/master/configs/jenkins_x.json) which can be updated via a PR\n\n### Markdown Syntax Reference\n\n#### Code examples\n\nAcross all pages on the Jenkins X docs, the typical triple-back-tick markdown syntax is used. If you do not want to take the extra time to implement the following code block shortcodes, please use standard GitHub-flavored markdown. The Jenkins X docs use a version of [highlight.js](https://highlightjs.org/) with a specific set of languages.\n\nYour options for languages are `xml`/`html`, `go`/`golang`, `md`/`markdown`/`mkd`, `handlebars`, `apache`, `toml`, `yaml`, `json`, `css`, `asciidoc`, `ruby`, `powershell`/`ps`, `scss`, `sh`/`zsh`/`bash`/`git`, `http`/`https`, and `javascript`/`js`.\n````md\n```go\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n\tDidError() bool\n\tDidFail() bool\n\tError() error\n\tRun() (string, error)\n\tRunWithoutRetry() (string, error)\n\tSetName(string)\n\tSetDir(string)\n\tSetArgs(\\[]string)\n\tSetTimeout(time.Duration)\n\tSetExponentialBackOff(\\*backoff.ExponentialBackOff)\n}\n```\n````\nbecomes\n\n```go\n// CommandInterface defines the interface for a Command\n//go:generate pegomock generate github.com/jenkins-x/jx/pkg/util CommandInterface -o mocks/command_interface.go\ntype CommandInterface interface {\n\tDidError() bool\n\tDidFail() bool\n\tError() error\n\tRun() (string, error)\n\tRunWithoutRetry() (string, error)\n\tSetName(string)\n\tSetDir(string)\n\tSetArgs(\\[]string)\n\tSetTimeout(time.Duration)\n\tSetExponentialBackOff(\\*backoff.ExponentialBackOff)\n}\n```\n\n#### Blockquotes\n\nBlockquotes can be added to the Jenkins X documentation using [typical Markdown blockquote syntax][bqsyntax]:\n\n```text\n> Without the threat of punishment, there is no joy in flight.\n```\n\nThe preceding blockquote will render as follows in the Jenkins X docs:\n\n> Without the threat of punishment, there is no joy in flight.\n\nHowever, you can add a quick and easy `<cite>` element (added on the client via JavaScript) by separating your main blockquote and the citation with a hyphen with a single space on each side:\n\n```text\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe](https://en.wikipedia.org/wiki/Kobo_Abe)\n```\n\nWhich will render as follows in the Jenkins X docs:\n\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe][abe]\n\n[abe]: https://en.wikipedia.org/wiki/Kobo_Abe\n[bqsyntax]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes\n[charcount]: http://www.lettercount.com/\n[`docs/static/images/showcase/`]: https://github.com/jenkins-x/jx/tree/master/docs/static/images/showcase/\n[ghforking]: https://help.github.com/articles/fork-a-repo/\n[hugodev]: /community/code/\n[shortcodeparams]: content-management/shortcodes/#shortcodes-without-markdown\n[sourceforge]: http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions\n[templating function]: /functions/\n",
            "content/es/docs/getting-started/_index.md": "---\ntitle: \"Comenzando\"\nlinkTitle: \"Comenzando\"\nweight: 2\ndescription: >\n  \u00bfC\u00f3mo ponerse en marcha r\u00e1pidamente con Jenkins X?\n---\n\nLa forma m\u00e1s sencilla de comenzar es a trav\u00e9s de los [Tutoriales de Google Cloud](/es/docs/resources/guides/managing-jx/tutorials/google-hosted/).\n\nDe lo contrario, primero deber\u00e1 instalar la [herramienta de l\u00ednea de comandos jx](/docs/getting-started/setup/install/) en su m\u00e1quina.\n\nPuede utilizar la [l\u00ednea de comando jx](/commands/jx/#jx) para [crear un nuevo cl\u00faster de Kubernetes](/docs/getting-started/setup/create-cluster/) con Jenkins X instalado autom\u00e1ticamente.\n\nSi ya tiene un cl\u00faster de Kubernetes existente, [instale Jenkins X en su cl\u00faster de Kubernetes](/getting-started/install-on-cluster/).\n\nCuando tenga un cl\u00faster Kubernetes con Jenkins X instalado, consulte sus [pr\u00f3ximos pasos](/es/docs/getting-started/).",
            "content/es/docs/getting-started/build-test-preview/_index.md": "---\ntitle: \"Crear, probar y obtener la vista previa de una aplicaci\u00f3n\"\nweight: 3\ndescription: >\n  Este tutorial le ayudar\u00e1 a comprender c\u00f3mo construir, probar y obtener una vista previa de su aplicaci\u00f3n en varios **entornos** integrados en Jenkins X\n---\n\nA toda persona que ha desarrollado en entornos de Git le resultar\u00e1 familiar los entornos de desarrollo en Jenkins X, con la diferencia de poder contar en este \u00faltimo con funcionalidades que le permitan automatizar el proceso de desarrollo, las compilaciones y las promociones.\n\n## El tradicional entorno de desarrollo\n\nEl flujo tradicional de desarrollo en Git tiene los siguientes pasos:\n\n1. Bifurcaci\u00f3n - El desarrollador crea una bifurcaci\u00f3n del repositorio del proyecto en su \u00e1rea personal.\n2. Ramificaci\u00f3n - El desarrollador crea una rama en el repositorio de su \u00e1rea personal por las posibles razones:\n  - Crear una nueva funcionalidad\n  - Corregir un error\n  - Adicionar un parche de seguridad\n3. Inserci\u00f3n - El desarrollador ingresa el c\u00f3digo a su rama del repositorio local y le env\u00eda hacia su repositorio remoto, creando de esta forma una diferencia en el fichero (`diff`).\n4. Creaci\u00f3n de solicitud de extracci\u00f3n - El desarrollador crea una solicitud de extracci\u00f3n (PR) desde su repositorio hacia el repositorio principal.\n5. Correcci\u00f3n - Los cambios en el c\u00f3digo son revisado por el equipo de calidad (QA) del repositorio principal para validar la nueva funcionalidad o la correcci\u00f3n del error. En este proceso se pueden sugerir cambios en caso de ser necesario.\n6. Mezclado - El c\u00f3digo modificado en el PR, si es aceptado, se mezcla en la rama master del proyecto principal.\n\n## El proceso de desarrollo en Jenkins X\n\nDesarrollar con Jenkins X es similar al flujo tradicional de Git, incluyendo los beneficios de la automatizaci\u00f3n del despliegue continuo a trav\u00e9s del contexto de Git, tambi\u00e9n conocido como *GitOps*.\n\nJenkins X va un paso m\u00e1s all\u00e1 brindando una *vista previa del entorno* permitiendo a los desarrolladores o al equipo de pruebas QA validar la nueva funcionalidad o las correcciones para evaluar la compilaci\u00f3n de la funcionalidad dentro del PR de Git.\n\n### Generar el entorno de vista previa\n\nEn un escenario t\u00edpico de desarrollo en Jenkins X, los usuarios realizan cambios a la aplicaci\u00f3n que han importado o creado a trav\u00e9s de una de las posibles variantes, p.ej [inicios r\u00e1pidos](/es/docs/getting-started/first-project/create-quickstart/), [importar proyectos](/es/docs/resources/guides/using-jx/creating/import/), entre otros.\n\nLuego de tener el proyecto, el proceso para generar la vista previa de entorno a partir de los cambios realizados es muy similar al flujo tradicional de Git. Los pasos ser\u00edan:\n\n1. El desarrollador crea una rama en su repositorio local para crear la nueva funcionalidad:\n```sh\ngit checkout -b acme-feature1\n```\n2. El desarrollador realiza las modificaciones en el c\u00f3digo y luego los agrega como cambios en Git:\n```sh\ngit add index.html server.js\n```\n3. El desarrollador establece los cambios en Git junto a un comentario:\n```sh\ngit commit -m \"nifty new image added to the index file\"\n```\n4. El desarrollador empuja los cambios hacia el repositorio remoto:\n```sh\ngit push origin acme-feature1\n```\n5. En su terminal se mostrar\u00e1 un enlace para crear la solicitud de extracci\u00f3n. Haga *clic en el enlace* para acceder a la p\u00e1gina de GitHub de su repositorio y crear la solicitud de extracci\u00f3n.\n6. Jenkins X crear\u00e1 una vista r\u00e1pida del entorno en el PR creado en el paso anterior. Se mostrar\u00e1 un enlace para que pueda evaluar la nueva funcionalidad:\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\nEl entorno de vista r\u00e1pida es creada cada vez que se realice una modificaci\u00f3n en el repositorio, permitiendo as\u00ed la validaci\u00f3n y evaluaci\u00f3n por parte de los integrantes del proyecto de las nuevas funcionalidades o correcciones.\n\n### Probando el entorno de vista previa\n\nEl sistema env\u00eda una notificaci\u00f3n por email tanto el desarrollador como al responsable de aprobar los cambios en el repositorio indicando que los cambios est\u00e1n listos para ser revisados. Durante el proceso de aprobaci\u00f3n, los integrantes pueden dar clic en el enlace de vista previa del entorno para revisar y validar los cambios.\n\nCuando el responsable de aprobar los cambios considera que el nuevo estado es correcto, puede aprobar y mezclar los cambios a la rama `master` simplemente haciendo el siguiente comentario en el PR:\n```sh\n/approve\n```\nEn este momento los cambios se mezclan y se inicia una nueva compilaci\u00f3n en la rama `master` con todas las modificaciones incluidas para que luego sea liberadas a los entornos `Staging` y `Production`.",
            "content/es/docs/getting-started/demos-talks-posts/_index.md": "---\ntitle: \"Demos, charlas y art\u00edculos\"\nweight: 5\ndescription: >\n  Una lista de demostraciones, charlas y publicaciones \u00fatiles para continuar en su viaje de inicio.\n---\n",
            "content/es/docs/getting-started/demos-talks-posts/create_cluster.md": "---\ntitle: Crear un cl\u00faster\nlinktitle: Crear un cl\u00faster\ndescription: \u00bfC\u00f3mo crear un cl\u00faster de Kubernetes e instalar Jenkins X?\nweight: 30\n---\n\nEste [demo](https://www.youtube.com/watch?v=ELA4tytdFeA) [crea un nuevo cluster de Kubernetes](/docs/getting-started/setup/create-cluster/) utilizando los siguientes comandos en paralelo:\n\n* [jx create cluster gke](/commands/jx_create_cluster_gke/)\n* [jx create cluster aks](/commands/jx_create_cluster_aks/)\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ELA4tytdFeA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/es/docs/getting-started/demos-talks-posts/create_cluster_gke.md": "---\ntitle: Crear un cl\u00faster en GKE\nlinktitle: Crear un cl\u00faster en GKE\ndescription: \u00bfC\u00f3mo crear un cl\u00faster de Kubernetes en GKE e instalar Jenkins X?\nweight: 40\n---\n\nEste [demo](https://www.youtube.com/watch?v=r8-J9Qg-p9U) utiliza el comando [jx create cluster gke](/commands/jx_create_cluster_gke/) para [crear un nuevo cl\u00faster de Kubernetes](/docs/getting-started/setup/create-cluster/):\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/r8-J9Qg-p9U\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/es/docs/getting-started/demos-talks-posts/create_spring.md": "---\ntitle: Crear Aplicaci\u00f3n Spring\nlinktitle: Crear Aplicaci\u00f3n Spring\ndescription: C\u00f3mo crear una nueva aplicaci\u00f3n Spring Boot con CI/CD y Promociones GitOps\nweight: 50\n---\n\nEste [demo](https://www.youtube.com/watch?v=kPes3rvT1UM) utiliza el comando [jx create spring](/commands/deprecation/) para [crear una aplicaci\u00f3n Spring Boot con pipelines CI/CD](/developing/create-spring/) y [Promociones GitOps](/es/about/concepts/features/#promoci\u00f3n):\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kPes3rvT1UM\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/es/docs/getting-started/demos-talks-posts/devoxx-uk-2018.md": "---\ntitle: \"Demo DevOxx UK 2018\"\ndescription: \"Demostraci\u00f3n en vivo de Jenkins X con GKE en DevOxx UK, 2018\"\nweight: 60\n---\n\nEste es el [video de la charla realizada por James Strachan: Continuous Delivery for Kubernetes](https://youtu.be/BF3MhFjvBTU?list=PLRsbF2sD7JVpRvLpv_Cub94zsM1aHm-Op) at [DevOxx UK, 2018](https://www.devoxx.co.uk/).\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/BF3MhFjvBTU?list=PLRsbF2sD7JVpRvLpv_Cub94zsM1aHm-Op\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nTambi\u00e9n puesdes [obtener las diapositivas de la charla en este enlace](https://docs.google.com/presentation/d/1hwt2lFh3cCeFdP4xoT_stMPs0nh2xVZUtze6o79WfXc/edit#slide=id.p).",
            "content/es/docs/getting-started/demos-talks-posts/kubecon-2018.md": "---\ntitle: \"Demo KubeCon 2018\"\ndescription: \"Resumen de Jenkins X en KubeCon Copenhagen\"\nweight: 70\n---\n\nEste es el [video de la charla realizada por James Strachan: Jenkins X: Easy CI/CD for Kubernetes](https://youtu.be/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo) en el [KubeCon Europe 2018](https://events.linuxfoundation.org/events/kubecon-cloudnativecon-europe-2018/).\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/uHe7R_iZSLU?list=PLj6h78yzYM2N8GdbjmhVU65KYm_68qBmo\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\nPuedes [obtener las diapositivas de la charla en este enlace](https://docs.google.com/presentation/d/19DAFONpT3L4t6sisyTuK2_chHrVorQO_1ijWEo8Euas/edit?usp=sharing).\n\n<img src=\"/news/jenkins-x-does-kubecon/kubecon-talk.jpg\">\n",
            "content/es/docs/getting-started/first-project/_index.md": "---\ntitle: \"Crea tu primer proyecto\"\nweight: 2\ndescription: >\n  Ahora que que tienes configurada la plataforma, pasemos a crear su primer proyecto.\n---\n",
            "content/es/docs/getting-started/first-project/create-quickstart.md": "---\ntitle: Crear un inicio r\u00e1pido\nlinktitle: Crear un inicio r\u00e1pido\ndescription: \u00bfC\u00f3mo crear e importar una nueva aplicaci\u00f3n de forma r\u00e1pida en Jenkins?\nweight: 10\n---\n\nLos inicios r\u00e1pidos son aplicaciones prefabricadas desde las que puede iniciar un proyecto, en lugar de comenzar desde cero.\n\nPuedes crear nuevas aplicaciones desde nuestra lista de aplicaciones de inicio r\u00e1pido seleccionadas a trav\u00e9s del comando [jx create quickstart](/commands/jx_create_quickstart/).\n\n\n```sh\njx create quickstart\n```\n\nLuego se le solicita una lista de aplicaciones de inicio r\u00e1pido para elegir.\n\nSi conoces el lenguaje que deseas utilizar podr\u00e1s utilizarlo para filtrar el listado de aplicaciones de inicio r\u00e1pido, por ejemplo:\n\n```sh\njx create quickstart -l go\n```\n\nO utilizar el texto `filter` para filtrar por el nombre del proyecto:\n\n```sh\njx create quickstart -f http\n```\n\n### \u00bfQu\u00e9 ocurre cuando creas una aplicaci\u00f3n de inicio r\u00e1pido?\n\nUna vez seleccionado el proyecto a crear y le definas un nombre, se realizar\u00e1n los siguientes pasos de forma autom\u00e1tica:\n\n* se crea una nueva aplicaci\u00f3n desde el inicio r\u00e1pido en un sub-directorio\n* se adiciona el c\u00f3digo fuente al repositorio de git local\n* se crea un repositorio git remoto en el servicio de git, como por ejemplo [GitHub](https://github.com)\n* se empuja tu c\u00f3digo local al servicio de git remoto\n* se adicionan los ficheros:\n  * `Dockerfile` para construir la aplicaci\u00f3n como una imagen de docker\n  * `Jenkinsfile` para implementar el flujo de CI / CD\n  * Plantilla Helm para ejecutar la aplicaci\u00f3n dentro de Kubernetes\n* si est\u00e1 usando Jenkins X Pipelines y tekton entonces:\n  * se registra un detonador (webhook) en el repositorio remoto git para desencadenar / activar un flujo de tareas (pipeline) en tekton a trav\u00e9s de prow / lighthouse.\n  * se adiciona el repositorio a la configuraci\u00f3n de prow / lighthose\n* si est\u00e1s utilizando Jenkins Server entonces:\n  * se registra un detonador en el repositorio remoto git para desencadenar / activar un flujo de tareas en Jenkins\n  * se crea un proyecto multi-branch en el servidor Jenkins\n* se provoca (trigger) el primer flujo de tareas (pipeline)\n\n### \u00bfC\u00f3mo funcionan los inicios r\u00e1pido?\n\nEl c\u00f3digo de estas aplicaciones de inicio r\u00e1pido se encuentra en la [organizaci\u00f3n jenkins-quickstarts en GitHub](https://github.com/jenkins-x-quickstarts).\n\nCuando creas el inicio r\u00e1pido se utiliza el [paquete de construcci\u00f3n de Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) para identificar la configuraci\u00f3n que necesita del proyecto. Durante la identificaci\u00f3n se tiene en cuenta los diferentes lenguajes existentes en el proyecto y se selecciona el paquete m\u00e1s adecuado.\n\nCuando utilizas [jx create](/docs/getting-started/setup/create-cluster/), [jx install](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) o [jx init](/commands/deprecation/) el [paquete de construcci\u00f3n de Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) es clonado ha la carpeta local `~/.jx/draft/packs`.\n\nDependiendo del tipo de instalaci\u00f3n de Jenkins X (Serverless Jenkins vs Static Master Jenkins), puedes ver todos los lenguajes disponibles en los paquetes de construcci\u00f3n si listas los elementos de la siguiente ubicaci\u00f3n de tu m\u00e1quina:\n\n*Serverless Jenkins*:\n```sh\nls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/packs\n```\n\n*Static Master Jenkins*:\n```sh\nls -al ~/.jx/draft/packs/github.com/jenkins-x-buildpacks/jenkins-x-classic/packs\n```\n\nEntonces, cuando creas un proyecto de inicio r\u00e1pido, ya sea a trav\u00e9s de [jx create spring](/docs/resources/guides/using-jx/common-tasks/create-spring/) o [jx import](/docs/resources/guides/using-jx/creating/import/), el [constructor de paquetes de Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) realiza lo siguiente:\n\n* selecciona el paquete correcto basado en el lenguaje del c\u00f3digo ([listado de posibles paquetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs)).\n* el paquete seleccionado es utilizado para incluir los siguientes fichero en caso de que no existan:\n  * `Dockerfile` para crear la imagen de docker para la aplicaci\u00f3n\n  * `Jenkinsfile` para implementar el flujo de tareas CI / CD utilizando la declaraci\u00f3n de tareas como c\u00f3digo (declarative pipeline as code)\n  * Plantillas Helm para desplegar la aplicaci\u00f3n en Kubernetes e implementar la [Vista Previa de Entornos](/es/about/concepts/features/#entornos-de-vista-previa)\n\n## Agregar tu propio Inicio r\u00e1pido\n\nSi desea enviar un nuevo inicio r\u00e1pido a Jenkins X, [simplemente plantee el problema](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:) con la URL en GitHub de su inicio r\u00e1pido y podremos bifurcarlo (fork) en la [organizaci\u00f3n de inicio r\u00e1pido](https://github.com/jenkins-x-quickstarts) para que aparezca en el men\u00fa de inicio r\u00e1pido `jx create`.\n\nOtra forma puede ser si forma parte de un proyecto de c\u00f3digo abierto y desea crear tu propio grupo de inicios r\u00e1pidos para su proyecto; puede [plantear el problema](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:) d\u00e1ndonos detalles de la organizaci\u00f3n en GitHub donde est\u00e1n los inicios r\u00e1pidos y los agregaremos a la  organizaci\u00f3n para que aparezcan en el comando [jx create quickstart](/commands/jx_create_quickstart/). Es m\u00e1s f\u00e1cil para el [jx create quickstart](/commands/jx_create_quickstart/) si se mantienen los inicios r\u00e1pidos separados por organizaciones en GitHub.\n\nUna vez incluidos, podr\u00e1 utilizar sus propios inicios r\u00e1pidos en el comando `jx create quickstart` mediante el par\u00e1metro de comando `-g` o `--organisations`. Por ejemplo:\n\n```sh\njx create quickstart  -l go --organisations my-github-org\n```\n\nEntonces todos los inicios r\u00e1pidos que se encuentren en `my-github-org` ser\u00e1n listados adicionalmente a los existentes en la organizaci\u00f3n Jenkins X.\n\n## Personalizar los grupos de inicio r\u00e1pido\n\nPuedes configurar a nivel de grupos las aplicaciones de inicio r\u00e1pido que desees que se muestren con el comando `jx create quickstart`. Esta configuraci\u00f3n se encuentra guardada en un [Environment Custom Resource](/docs/reference/components/custom-resources/) en Kubernetes.\n\nPara adicionar una nueva ubicaci\u00f3n de aplicaciones de inicio r\u00e1pido puedes utilizar el comando [jx create quickstartlocation](/commands/jx_create_quickstartlocation/).\n\n```sh\njx create quickstartlocation --url https://mygit.server.com --owner my-quickstarts\n```\n\nSi omites el par\u00e1metro `--url` el comando va a asumir como repositorios a [GitHub](https://github.com/). Ten en cuenta que est\u00e1 permitido incluir tanto repositorios privados como p\u00fablicos.\n\nEsto significa que puedes tener tu repositorio privado para inicios r\u00e1pidos en tu organizaci\u00f3n. Nosotros recomendamos l\u00f3gicamente que [los nuevos inicios r\u00e1pidos sean compartidos como proyectos open source](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:) para que puedan ser incluidos y compartidos con toda [la comunidad](/community/) - pero puede darse el caso que desees tener un repositorio propio privado para utilizarlo con proyectos propietarios.\n\nPuedes adem\u00e1s especificar `--includes` o excluir `--excludes` patrones para filtrar por nombres de repositorios donde `*` incluye a todos los elementos y `foo*` selecciona todos aquellos que empiezen con `foo`. Por ejemplo, puedes solamente incluir los lenguajes y tecnolog\u00edas de tu organizaci\u00f3n necesite y el resto excluirlos.\n\nTe interesar\u00e1 saber que puedes utilizar el alias `gsloc` en vez de `quickstartlocation` si te gustan m\u00e1s lo alias cortos ;)\n\nPuedes entonces ver la ubicaci\u00f3n actual de tus aplicaciones de inicio r\u00e1pido de tu equipo utilizando el comando [jx get quickstartlocations](/commands/jx_get_quickstartlocation/)\n\n```sh\njx get quickstartlocations\n```\n\nO con su alias corto\n\n```sh\njx get qsloc\n```\n\nExiste el comando [jx delete quickstartlocation](/commands/jx_delete_quickstartlocation/) por si necesitas eliminar la ubicaci\u00f3n del repositorio git.\n\n",
            "content/es/docs/getting-started/next.md": "---\ntitle: \u00bfQue sigue?\nlinktitle: \u00bfQue sigue?\ndescription: Qu\u00e9 hacer despu\u00e9s de instalar Jenkins X en un cl\u00faster de Kubernetes\nweight: 6\n---\n\nPerfecto, entonces ya [tienes la CLI jx](/getting-started/install/) y tambi\u00e9n has logrado realizar al menos uno de estos dos objetivos:\n\n* [crear un cl\u00faster de Kubernetes con Jenkins X](/getting-started/create-cluster/)\n* [instalar Jenkins X en un cl\u00faster de Kubernete existente](/getting-started/install-on-cluster/)\n\n\u00bfQu\u00e9 es lo siguiente?\n\nBueno, la secci\u00f3n [Utilizando de Jenkins X](/docs/resources/guides/using-jx/) contiene los siguientes pasos que puede probar, como por ejemplo:\n\n* [cree una nueva aplicaci\u00f3n Spring Boot e imp\u00f3rtela a Jenkins X](/docs/resources/guides/using-jx/creating/create-spring/)\n* [cree un nuevo inicio e imp\u00f3rtelo a Jenkins X](/docs/getting-started/first-project/create-quickstart/)\n* [importe un proyecto existente (c\u00f3digo fuente) en Jenkins X](/docs/resources/guides/using-jx/creating/import/)\n* [navegue](/docs/resources/guides/using-jx/developing/browsing/) por canales, compilaciones, aplicaciones y actividades\n\nTambi\u00e9n puede consultar las [diversas demostraciones de lo que puede hacer con Jenkins X](/docs/resources/demos-talks-posts/).\n",
            "content/es/docs/getting-started/promotion/_index.md": "---\ntitle: Promoci\u00f3n y Entornos\nlinktitle: Promoci\u00f3n y Entornos\ndescription: Promueva las nuevas versiones de su aplicaci\u00f3n hacia los entornos\nweight: 4\n---\n\nLos Pipelines de Entrega Continua de Jenkins X automatizan la [promoci\u00f3n](/es/about/concepts/features/#promoci\u00f3n) de cambio de versiones a trav\u00e9s de cada [Entorno](/es/about/concepts/features/#entornos). Cada Entorno se encuentra configurado con la propiedad _estrategia de promoci\u00f3n_ en `Auto`. La configuraci\u00f3n pre-establecida para los entornos es:\n\n* El entorno `Staging` utiliza promoci\u00f3n autom\u00e1tica\n* El entorno `Production` utiliza promoci\u00f3n `Manual`\n\nPara realizar una Promoci\u00f3n manual de tu aplicaci\u00f3n hacia un entorno espec\u00edfico debes utilizar el comando [jx promote](/commands/jx_promote/).\n\n```sh\njx promote --app myapp --version 1.2.3 --env production\n```\n\nEl comando espera hasta que se complete la promoci\u00f3n registrando los detalles del progreso. Puedes especificar el tiempo de espera antes de que se realice la promoci\u00f3n a trav\u00e9s del argumento `--timeout`.\n\np.ej. para esperar 5 horas.\n\n```sh\njx promote  --app myapp --version 1.2.3 --env production --timeout 5h\n```\n\nPuedes utilizar varias expresiones de tiempo para especidicar el timpo de espera como `20m` o `10h30m`.\n\n<img src=\"/images/overview.png\" class=\"img-thumbnail\">\n\n## Retroalimentaci\u00f3n\n\nSi el mensaje presente en el commit hace referencia a un problema (p.ej. a trav\u00e9s del texto `fixes #123`), entonces el pipeline de Jenkins X va a generar notas de liberaci\u00f3n como el siguiente [ejemplo de jx](https://github.com/jenkins-x/jx/releases).\n\nCuando la versi\u00f3n que incluye estos commits se promueva a `Staging` o `Production`, recibir\u00e1 comentarios autom\u00e1ticos sobre cada problema solucionado con la siguiente informaci\u00f3n:\n\n* el problema ahora est\u00e1 disponible para su revisi\u00f3n en el entorno correspondiente\n* un enlace a las notas de la versi\u00f3n\n* un enlace a la aplicaci\u00f3n en ejecuci\u00f3n en ese ambiente\n\np.ej.\n\n<img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n\n\n## Promoviendo aplicaciones externas\n\nPuede que existan aplicaciones que est\u00e9n actualmente liberadas por otros equipos u organizaciones y que tal vez no utilicen Jenkins X ni est\u00e9n en su repositorio de plantillas Helm.\n\nSi desea buscar en sus repositorios de helm una aplicaci\u00f3n para promocionar, puede usar la opci\u00f3n `-f` de filtro para encontrar la plantilla a utilizar en la promoci\u00f3n.\n\np.ej. para encontrar y promover la plantilla helm de `redis` hacia `Staging` debe utilizar el siguiente comando:\n\n```sh\njx promote -f redis --env staging\n```\n\nPara las bases de datos seguramente vas a desear utilizar un alias (`--alias`). El alias ser\u00e1 el nombre de la plantilla helm para darle un nombre l\u00f3gico acorde al tipo de base de datos que necesites. Si necesitas m\u00faltiples bases de datos en el mismo entorno para distintos microservicios el `--alias` ser\u00e1 quien pueda ayudarte. p.ej.\n\n```sh\njx promote -f postgres --alias salesdb --env staging\n```\n\nSi no puedes encontrar una aplicaci\u00f3n en particular necesitar\u00e1s adicionar el correspondiente repositorio de charts a su instalaci\u00f3n de helm a trav\u00e9s de:\n\n```sh\nhelm repo add myrepo https://something.acme.com/charts/\n```\n\np.ej. para adicionar las plantillas estables de la comunidad helm.\n\n```sh\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com/\n\"stable\" has been added to your repositories\n```\n\npara adicionar las plantillas de incubaci\u00f3n de la comunidad helm.\n\n```sh\nhelm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/\n\"incubator\" has been added to your repositories\n```\n\nActualmente existe un [gran n\u00famero de plantillas creadas por la comunidad helm](https://github.com/helm/charts/tree/master/stable). Si deseas adicionar tu aplicaci\u00f3n desarrollada fuera de Jenkins X solo tienes que empaquetar tus ficheros YAML en una plantilla helm e instalarla en un repositorio de plantillas.",
            "content/es/docs/getting-started/setup/_index.md": "---\ntitle: \"Configurar Jenkins X\"\nlinkTitle: \"Configurar Jenkins X\"\nweight: 1\ndescription: >\n  \u00bfC\u00f3mo configurar Jenkins X?\n---\n\n",
            "content/es/docs/getting-started/setup/boot/_index.md": "---\ntitle: Jenkins X Boot\nlinktitle: Jenkins X Boot\ndescription: Instalar, configurar y actualizar Jenkins X mediante GitOps y Jenkins X Pipeline\ncategories: [getting started]\nkeywords: [install]\nweight: 10\n---\n\n## Resumen\n\n_Jenkins X Boot_ utiliza el siguiente enfoque:\n\n* cree su cl\u00faster de Kubernetes donde desee:\n  * utilice Terraform para crear su cl\u00faster de Kubernetes junto a los recursos que sean necesarios de la plataforma.\n  * utilice la consola web de su proveedor cloud para crear su cl\u00faster de Kubernetes.\n  * utilice `jx create cluster --skip-installation`. Por ejemplo:\n    ``` sh\n    jx create cluster gke --skip-installation\n    ```\n  * utilice alguna herramienta personalizada de su elecci\u00f3n o tal vez una proporcionado por su equipo de operaciones.\n\n* seguramente va a desear verificar que puede comunicarse correctamente con su cl\u00faster de Kubernetes a trav\u00e9s de:\n\n``` sh\nkubectl get ns\n```\n\n* ejecute el comando [jx boot](/commands/jx_boot/):\n```sh\njx boot\n```\n\nAhora se le solicitar\u00e1n los par\u00e1metros necesarios para la instalaci\u00f3n, como su usuario / contrase\u00f1a de administrador, el usuario y token de Pipeline git, etc.\n\nEntonces Jenkins X debe instalarse y configurarse en su cl\u00faster de Kubernetes.\n\n### Acerca de 'jx boot'\n\nEl comando [jx boot](/commands/jx_boot/) interpreta y ejecuta el pipeline de arranque utilizando el binario local `jx`. El pipeline utilizado para arrancar Jenkins X puede ser ejecutado m\u00e1s tarde dentro de Kubernetes a trav\u00e9s de Tekton. Si en alg\u00fan momento algo sale mal con Tekton, siempre puedes volver a utilizar el comando `jx boot` para que las cosas vuelvan a funcionar (por ejemplo, si alguien elimina accidentalmente su cl\u00faster).\n\n#### Pre and Post Validation\n\nAntes de intentar cualquier tipo de instalaci\u00f3n `boot` ejecutar\u00e1 [jx step verify preinstall](/commands/jx_step_verify_preinstall/) para comprobar que todo est\u00e9 bien. Tambi\u00e9n verificar\u00e1 que las versiones de los paquetes que requiere que est\u00e9n instalados se encuentran dentro de los l\u00edmites superior e inferior. Mas informaci\u00f3n al respecto, [aqu\u00ed](https://github.com/jenkins-x/jenkins-x-versions/tree/master/packages). Si usas Terraform (tu archivo `jx-requirements.yml` tiene `terraform: true`)  `boot` fallar\u00e1 si Terraform a\u00fan no ha creado los recursos requeridos en la nube. Si no lo est\u00e1s usando los recursos se crear\u00e1n autom\u00e1ticamente. \n\nUna vez que la instalaci\u00f3n se ha completado, se ejecuta el comando [jx step verify install](/commands/jx_step_verify_install/) para verificar que su instalaci\u00f3n sea v\u00e1lida.\n\n#### Packages\n\nPara instalaciones basadas en `boot`, las versiones de paquetes que usa `jx` han de encontrarse entre los l\u00edmites especificados en [version stream](https://github.com/jenkins-x/jenkins-x-versions/tree/master/packages). Habitualmente actualizar los paquetes es sencillo, sin embargo, no sucede igual si hay decrementar la versi\u00f3n.\n\n##### Brew\n\nEste [gist] (https://gist.github.com/rdump/b79a63084b47f99a41514432132bd408) describe c\u00f3mo puede cambiar a diferentes versiones del paquete `kubectl` usando el administrador de paquetes `brew`.\n\n## Modificando su instalaci\u00f3n\n\nEn cualquier momento puede volver a ejecutar el comando [jx boot](/commands/jx_boot/) para aplicar cualquier cambio en su configuraci\u00f3n.\n\nPara lograrlo solamente edite cualquier elemento en la configuraci\u00f3n y vuelva a ejecutar [jx boot](/commands/jx_boot/), ya sea para agregar o eliminar aplicaciones, para cambiar par\u00e1metros, configuraciones o para actualizar / degradar versiones de dependencias.\n\n## Requisitos\n\nExiste un fichero llamado [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) que se utiliza para especificar o definir los requerimientos l\u00f3gicos de su instalaci\u00f3n, como por ejemplo:\n\n* qu\u00e9 proveedor de Kubernetes va a utilizar\n* d\u00f3nde almacenar la informaci\u00f3n sensible (ficheros en la m\u00e1quina local o con el sistema Vault)\n* si est\u00e1s utilizando Terraform para gestionar los recursos del cloud\n* si deseas utilizar Kaniko para construir las im\u00e1genes de los contenedores\n\nEste es el fichero principal de las configuraciones para `jx boot` y donde realizar\u00e1s la mayor\u00eda de los cambios. Te recomendamos que revises el fichero [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) y realices todos los ajustes que consideres necesarios.\n\n## Informaci\u00f3n sensible (Secrets)\n\nBoot actualmente admite las siguientes opciones para administrar secretos:\n\n### Almacenamiento Local\n\nEsta es la opci\u00f3n pre-establecida o puedes tambi\u00e9n especificarla utilizando `secretStorage: local`:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nsecretStorage: local\nwebhook: prow\n```\n\nPara esta configuraci\u00f3n la informaci\u00f3n est\u00e1 almacenada en la carpeta `~/.jx/localSecrets/$clusterName`. Si lo deseas puedes utilizar la variable `$JX_HOME` para modificar su ubicaci\u00f3n.\n\n### Vault\n\nEsta es la estrategia recomendada cuando se utilizan los proveedores GKE o EKS. Puede ser configurados expl\u00edcitamente con `secretStorage: vault`:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nsecretStorage: vault\nwebhook: prow\n```\n\nEsta configuraci\u00f3n va a provocar que el pipeline de `jx boot` instale Vault utilizando KMS y configure un almacenamiento en el cloud (bucket) para salvar/cargar la informaci\u00f3n sensible.\n\nLa gran ventaja de utilizar Vault se muestra en el trabajo de equipo, donde cada miembro puede f\u00e1cilmente ejecutar el comando `jx boot` en el mismo cluster. A\u00fan en el caso donde accidentalmente se borre su cl\u00faster de Kubernetes, su restauraci\u00f3n ser\u00e1 muy f\u00e1cil utilizando KMS + el bucket de almacenamiento.\n\n## Webhook\n\nJenkins X admite varios sistemas para gestionar webhooks y opcionalmente admite [ChatOps](/docs/resources/faq/using/chatops/).\n\n[Prow](/docs/reference/components/prow/) y [Lighthouse](/architecture/lighthouse/) admiten webhooks y [ChatOps](/docs/resources/faq/using/chatops/), mientras que Jenkins solo admite webhooks.\n\n### Prow\n\n[Prow](/docs/reference/components/prow/) es actualmente el sistema de webhook y [ChatOps](/docs/resources/faq/using/chatops/) pre-establecido cuando se utiliza [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/) y GitHub.\n\nSe configura a trav\u00e9s de `webhook: prow` en el fichero `jx-requirements.yml`.\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n### Lighthouse\n\n[Lighthouse](/architecture/lighthouse/) es actualmente el sistema de webhook y [ChatOps](/docs/resources/faq/using/chatops/) pre-establecido cuando se utiliza [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/) y un servidor git diferente a [GitHub](https://github.com).\n\nCuando Lighthouse sea m\u00e1s estable y est\u00e9 bien probado, lo convertiremos en la configuraci\u00f3n pre-establecida para todas las instalaciones que utilicen [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/).\n\nSe configura a trav\u00e9s de `webhook: lighthouse` en el fichero `jx-requirements.yml`.\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: lighthouse\n```\n\n### Jenkins\n\nPara utilizar el servidor Jenkins en boot con el objetivo de procesar webhooks y pipelines se debe configurar el fichero `jx-requirements.yml` estableciendo `webhook: jenkins`.\n\n## Git\n\nJenkins X admite diferentes proveedores de git. Puedes especificar el proveedor de git y la organizaci\u00f3n que desees utilizar para cada entorno en el fichero  [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml).\n\n{{< pageinfo >}}\n\n**NOTA** Jenkins X crea los repositorios como privados por defecto. Esto puede causar problemas al evaluar Jenkins X con GitHub si se utiliza una organizaci\u00f3n gratuita de GitHub para mantener los diversos repositorios (de entorno) creados, ya que las cuentas de la organizaci\u00f3n libre no tienen acceso a repositorios privados. Sin embargo, el uso de una cuenta personal de Github no es un problema, ya que las cuentas privadas gratuitas tienen repositorios privados ilimitados.\n\nPara fines de evaluaci\u00f3n, puede usar una cuenta privada de GitHub como propietario de los repositorios, y cambiar a una cuenta de organizaci\u00f3n paga una vez que est\u00e9 listo para entrar. Alternativamente, puede habilitar los repositorios de entorno p\u00fablico estableciendo `environmentGitPublic` en `true` en su configuraci\u00f3n de jx boot. En caso de que est\u00e9 utilizando `jx create` o `jx install`, deber\u00e1 agregar la opci\u00f3n `--git-public` como parte del comando para habilitar el repositorio p\u00fablico.\n{{< /pageinfo >}}\n\n\n### GitHub\n\nEsta es la configuraci\u00f3n pre-establecida si no especificas nada.\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n### GitHub Enterprise\n\nLa configuraci\u00f3n es similar a la descrita anteriormente con la diferencia que necesitas especificar la URL del `gitServer` en caso de que sea diferente de https://github.com. Se configura a trav\u00e9s de: `gitKind: github`\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: ghe\n  gitServer: https://github.myserver.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n### Bitbucket Server\n\nPara este servidor git se especifica la URL `gitServer` y el tipo `gitKind: bitbucketserver`. Si deseas utilizar [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/) aseg\u00farate de establecer [lighthouse webhook](#webhook) a trav\u00e9s de `webhook: lighthouse`.\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketserver\n  gitName: bs\n  gitServer: https://bitbucket.myserver.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n### Bitbucket Cloud\n\nPara este servidor git se especifica el tipo `gitKind: bitbucketcloud`. Si deseas utilizar [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/) aseg\u00farate de establecer [lighthouse webhook](#webhook) a trav\u00e9s de `webhook: lighthouse`.\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketcloud\n  gitName: bc\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n\n### Gitlab\n\nPara este servidor git se especifica la URL `gitServer` y el tipo `gitKind: gitlab`. Si deseas utilizar [Serverless Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/) aseg\u00farate de establecer [lighthouse webhook](#webhook) a trav\u00e9s de `webhook: lighthouse`.\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: gitlab\n  gitName: gl\n  gitServer: https://gitlab.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n## Repositorios\n\nPor defecto, Jenkins X utiliza:\n\n* [Nexus](https://www.sonatype.com/nexus-repository-oss) como un repositorio de artefactos para almacenar elementos como: jars, archivos `pom.xml`, m\u00f3dulos npm, etc.\n* [Chartmusem](https://chartmuseum.com/) como repositorio de charts de Helm\n\nPuede configurar nexus a trav\u00e9s del archivo `jx-requirements.yml`:\n\n```yaml\nrepository: nexus\n```\n\n### Bucketrepo\n\nEl microservicio [bucketrepo](https://github.com/jenkins-x/bucketrepo) es un repositorio de artefactos que utiliza como almacenamiento la nube. Este servicio puede:\n\n* actuar como un proxy maven para almacenar en cach\u00e9 las dependencias cuando se llevan a cabo las compilaciones de java/maven\n* actuar como un repositorio de artefactos (p.ej, para desplegar artefactos maven)\n* como repositorio de charts de helm\n\nPara habilitar `bucketrepo` establezca la siguiente configuraci\u00f3n en el fichero `jx-requirements.yml`:\n\n```yaml\nrepository: bucketrepo\n```\n\nEste servicio utiliza de forma predeterminada el sistema de archivos local para almacenar los artefactos.\n\nPara habilitar el almacenamiento en la nube de los artefactos guardados en `bucketrepo` debe establecer la configuraci\u00f3n `storage.repository`, en cuyo caso se utiliza el bucket que est\u00e9 utilizando en el proveedor cloud. Vea la [secci\u00f3n de almacenamiento para m\u00e1s detalles](#almacenamiento).\n\n### Ninguna\n\nSi desea inhabilitar el repositorio de artefactos (nexus) pero mantener chartmuseum para los charts, puede utilizar la siguiente configuraci\u00f3n:\n\n```yaml\nrepository: none\n```\n\nTenga en cuenta que si no utiliza un repositorio para los artefactos no podr\u00e1 desplegar artefactos de maven. Sin embargo, podr\u00e1 seguir utilizando el [Chartmusem](https://chartmuseum.com/) para almacenar los charts.\n\n## Almacenamiento\n\nEl fichero [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) permite configurar almacenamiento a largo plazo para registros e informes.\n\nPor ejemplo, el siguiente fichero `jx-requirements.yml` tiene habilitado el almacenamiento a largo plazo.\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: true\n  reports:\n    enabled: false\n  repository:\n    enabled: false\n```\n\nPuedes establecer la URL del almacenamiento (cloud storage bucket) en la secci\u00f3n `storage` para definir d\u00f3nde ser\u00e1 guardada la informaci\u00f3n. Las siguientes sintaxis de URL son permitidas:\n\n* `gs://anotherBucket/mydir/something.txt` : utilizando un bucket GCS en GCP\n* `s3://nameOfBucket/mydir/something.txt` : utilizando un bucket S3 en AWS\n* `azblob://thatBucket/mydir/something.txt` : utilizando un bucket en Azure\n* `http://foo/bar` : fichero almacenado en un repositorio git sin utilizar HTTPS\n* `https://foo/bar` : fichero almacenado en un repositorio git utilizando HTTPS\n\nPor ejemplo:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n    url: gs://my-logs\n  reports:\n    enabled: false\n    url: gs://my-logs\n  repository:\n    enabled: false\n    url: gs://my-repo\n```\n\nPara ampliar detalles utilice la [Gu\u00eda de Almacenamiento](https://jenkins-x.io/architecture/storage/).\n\n## Ingress\n\nSi no especificas nada en tu fichero [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml), boot va a establecer HTTP (en vez de HTTPS) junto con [nip.io](https://nip.io/) como mecanismo DNS.\n\nDespu\u00e9s de ejecutar boot, tu fichero `jx-requirements.yml` debe tener un aspecto similar a este:\n\n```yaml\ncluster:\n  provider: gke\n  clusterName: my-cluster-name\n  environmentGitOwner: my-git-org\n  project: my-gke-project\n  zone: europe-west1-d\nenvironments:\n- key: dev\n- key: staging\n- key: production\ningress:\n  domain: 1.2.3.4.nip.io\n  externalDNS: false\n  tls:\n    email: \"\"\n    enabled: false\n    production: false\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\nSi deseas habilitar un DNS externo, un nombre de dominio DNS o TLS (para registrar autom\u00e1ticamente todos las entradas DNS para los servicios) debes modificar la secci\u00f3n `ingress` adicionando `ingress.externalDNS = true` en el fichero `jx-requirements.yml` y volver a ejecutar `jx boot`.\n\nPuedes tambi\u00e9n habilitar TLS a trav\u00e9s de `ingress.tls.enabled = true`.\n\nA continuaci\u00f3n le mostramos un ejemplo completo.\n\n```yaml\ncluster:\n  clusterName: mycluster\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: github\n  gitServer: https://github.com\n  namespace: jx\n  provider: gke\n  vaultName: jx-vault-myname\nenvironments:\n- key: dev\n- key: staging\n- key: production\ngitops: true\ningress:\n  domain: my.domain.com\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: someone@acme.com\n    enabled: true\n    production: true\nkaniko: true\nsecretStorage: vault\nstorage:\n  logs:\n    enabled: true\n    url: gs://jx-prod-logs\n  reports:\n    enabled: false\n    url: \"\"\n  repository:\n    enabled: false\n    url: \"\"\nwebhook: prow\n```\n\n## Actualizaciones\n\nCon `jx boot` todas las versiones y configuraciones se realizan en git, por lo que es muy f\u00e1cil gestionar cambios via GitOps tanto de forma autom\u00e1tica como manual.\n\n### Actualizaciones Autom\u00e1ticas\n\nPuedes habilitar las actualizaciones autom\u00e1ticas en el fichero `jx-requirements.yml` a trav\u00e9s de `schedule` con una expresi\u00f3n cron.\n\n```yaml\nautoUpdate:\n  enabled: true\n  schedule: \"0 0 23 1/1 * ? *\"\n```\n\nCuando las actualizaciones autom\u00e1ticas est\u00e1n habilitadas un `CronJob` es ejecutado peri\u00f3dicamente para revisar cambios en el [flujo de versiones](/es/about/concepts/version-stream/) o en la [configuraci\u00f3n del boot](https://github.com/jenkins-x/jenkins-x-boot-config). Si se detectan cambios el comando [jx upgrade boot](/commands/jx_upgrade_boot/) va a crear un Pull Request en el repositorio git de desarrollo. Una vez mezclado los cambios la configuraci\u00f3n del boot se ha actualizado y por ende Tekton iniciar\u00e1 el pipeline para actualizar la instalaci\u00f3n.\n\n### Actualizaciones Manuales\n\nPuedes ejecutar manualmente el comando [jx upgrade boot](/commands/jx_upgrade_boot/) siempre que lo desees. Si al ejecutarlo existen cambio en el [flujo de versiones](/es/about/concepts/version-stream/) o en la [configuraci\u00f3n del boot](https://github.com/jenkins-x/jenkins-x-boot-config) se crear\u00e1 un Pull Request en el repositorio git de desarrollo.\n\nUna vez mezclado los cambios la configuraci\u00f3n del boot se ha actualizado y por ende Tekton iniciar\u00e1 el pipeline para actualizar la instalaci\u00f3n.\n\n### Restauraci\u00f3n\n\nSi algo en alg\u00fan momento va mal, por ejemplo, el cl\u00faster, el namespace o Tekton, y su instalaci\u00f3n no puede ejecutar pipelines, puedes siempre volver a ejecutar [jx boot](/docs/getting-started/setup/boot/) en su laptop para restaurar el cl\u00faster.\n\n\n## Salvas\n\nJenkins X est\u00e1 integrado con [Velero](https://velero.io) para permitir salvar el estado de Jenkins X (CRDs with PVs).\n\nPara habilitar Velero adicione las siguientes l\u00edneas en el fichero `jx-requirements.yml`:\n\n```yaml\nstorage:\n  backup:\n    enabled: true\n    url: gs://my-backup-bucket\nvelero:\n  namespace: velero\n```\n\nPuedes utilizar cualquier URL almacenamiento habilitada. Para conocer sobre las URL revise la [gu\u00eda de almacenamiento](/docs/resources/guides/managing-jx/common-tasks/storage/).\n",
            "content/es/docs/getting-started/setup/boot/background.md": "---\ntitle: Antecedentes\nlinktitle: Antecedentes\ndescription: \u00bfPor qu\u00e9 se ha creado Jenkins X Boot?\nweight: 50\n---\n\nEn los \u00faltimos 1-2 a\u00f1os, hemos aprendido que hay muchos tipos diferentes de cl\u00faster de Kubernetes y formas de configurar cosas como Ingress, DNS, dominios, certificados. Esta gran diversidad implica el aumento de la complejidad en los comandos actuales [jx create cluster](/commands/jx_create_cluster/) y [jx install](/commands/deprecation/).\n\nAdem\u00e1s, ahora se recomienda usar herramientas como Terraform para administrar todos sus recursos en la nube: crear / actualizar cl\u00fasteres de Kubernetes, buckets de almacenamiento en la nube, cuentas de servicio, KMS, etc.\n\nDetectamos tambi\u00e9n que ten\u00edamos muchos segmentos diferentes de l\u00f3gica de instalaci\u00f3n distribuidos por distintos comandos, por ejemplo, [jx create cluster](/commands/jx_create_cluster/), [jx install](/commands/deprecation/), el uso del [par\u00e1metro --gitops](/docs/resources/guides/managing-jx/common-tasks/manage-via-gitops/). A esto le podemos sumar las diferentes formas de gestionar la informaci\u00f3n sensible (Secrets). Esta gran matrix de combinaciones hace muy dif\u00edcil el poder probar y mantener de forma s\u00f3lida cada comando.\n\nAdem\u00e1s, nos topamos con problemas en los comandos [jx create cluster](/commands/jx_create_cluster/) y [jx install](/commands/deprecation/) porque estos deben instalar componentes como el Ingerss Controller y no se estaba dando la posibilidad de modificar/quitar su instalaci\u00f3n.\n\nLos usuarios a menudo tuvieron dificultades para comprender c\u00f3mo configurar y anular f\u00e1cilmente las cosas; o actualizar valores despu\u00e9s de que las cosas se hayan instalado.\n\nPor lo tanto, quer\u00edamos llegar a un nuevo enfoque limpio, libre de los problemas mencionados anteriormente. Este nuevo enfoque funcionara para todo tipo de instalaci\u00f3n y proporcionar\u00e1 una forma est\u00e1ndar de ampliar y personalizar la configuraci\u00f3n a trav\u00e9s de [Jenkins X Pipelines](/es/about/concepts/jenkins-x-pipelines/) y del estilo de configuraci\u00f3n de Helm.",
            "content/es/docs/getting-started/setup/boot/how-it-works.md": "---\ntitle: \u00bfC\u00f3mo funciona?\nlinktitle: \u00bfC\u00f3mo funciona?\ndescription: Instalar, configurar o actualizar Jenkins X a trav\u00e9s de GitOps y Jenkins X Pipeline\nweight: 100\n---\n\n## Repositorio de Origen\n\nBoot configura autom\u00e1ticamente todos los elementos de tipo [SourceRepository](/docs/reference/components/custom-resources/#sourcerepository) que existan en la carpeta [repositories/templates](https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates). De igual agrega todo los elementos de tipo [Scheduler](/docs/reference/components/custom-resources/#scheduler) para reconstruir la configuraci\u00f3n de Prow.\n\nDe igual forma, Boot crea y actualiza autom\u00e1ticamente los webhooks que se necesiten en el proveedor de git para los recursos [SourceRepository](/docs/reference/components/custom-resources/#sourcerepository).\n\nSi est\u00e1 utilizando GitOps, esperamos automatizar la gesti\u00f3n de la carpeta [repositories/templates](https://github.com/jenkins-x/jenkins-x-boot-config/tree/master/repositories/templates) a medida que se importa/crea proyectos. Hasta entonces, puede crear manualmente un Pull Request en su repositorio git de boot a trav\u00e9s de [jx step create pullrequest repositories](/commands/jx_step_create_pullrequest_repositories/).\n\n## Pipeline\n\nEl proceso de instalaci\u00f3n/actualizaci\u00f3n est\u00e1 definido en un [Jenkins X Pipeline](/es/about/concepts/jenkins-x-pipelines/) en el fichero con nombre [jenkins-x.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml).\n\nLo t\u00edpico es que no tenga que modificar este fichero, pero si necesitas hacerlo revisa primero [esta gu\u00eda](/es/about/concepts/jenkins-x-pipelines/#personalizar-el-pipelines).\n\n## Configuraci\u00f3n\n\nEl proceso boot se configura utilizando el estilo de configuraci\u00f3n de Helm basado en ficheros `values.yaml`. Aunque tambi\u00e9n admitimos el uso de algunas [extensiones para helm](https://github.com/jenkins-x/jx/issues/4328).\n\n### Fichero de Par\u00e1metros\n\nSe ha definido el fichero [env/parameters.yaml](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml) para establecer todos los par\u00e1metros registrados y cargados desde Vault o desde el directorio de archivos local con informaci\u00f3n sensible.\n\n#### Inserci\u00f3n de secrets en los par\u00e1metros\n\nSi observan en el fichero [env/parameters.yaml](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/parameters.yaml) podr\u00e1n ver algunos valores en el propio fichero y otros relacionados con un enlace, por ejemplo `local:my-cluster-folder/nameofSecret/key`. Las definiciones con enlace permiten 2 esquemas:\n\n* `vault:` para obtener valores desde Vault (ubicaci\u00f3n + llave).\n* `local:` para obtener valores desde el fichero almacenado en `~/.jx/localSecrets/$path.yml` (llave solamente).\n\nEsto significa que se pueden almacenar todos los Par\u00e1metros utilizados en la configuraci\u00f3n inicial para luego hacer referencia a ellos desde la fichero `values.tmpl.yaml` y poblar el \u00e1rbol de valores a insertar luego en Vault.\n\n### Poblar el fichero `parameters.yaml`\n\nSe puede poblar o nutrir el fichero `env/parameters.yaml` del Pipeline a trav\u00e9s del comando:\n\n```sh\njx step create values --name parameters\n```\n\nSe utiliza el fichero [parameters.schema.json](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/parameters.tmpl.schema.json) para nutrir el UI.\n\n### Mejoras al fichero values.yaml\n\n#### Mantenimiento del \u00e1rbol de ficheros values.yaml\n\nEn lugar de tener solo un fichero enorme values.yaml con todas las anidaciones posibles, se puede tener una estructura de arb\u00f3rea de archivos para cada aplicaci\u00f3n que solo incluya la configuraci\u00f3n espec\u00edfica en cada carpeta. p.ej.\n\n```sh\nenv/\n  values.yaml   # nivel m\u00e1ximo de configuraci\u00f3n\n  prow/\n    values.yaml #\u00a0configuraciones espec\u00edficas de Prow\n  tekton/\n    values.yaml  # configuraciones espec\u00edficas de Tekton\n```\n\n#### Plantillas values.tmpl.yaml\n\nAl utilizar `jx step helm apply` permitimos que los archivos `values.tmpl.yaml` utilicen las plantillas go/helm en la misma forma que los archivos `templates/foo.yaml` son utilizados dentro de las plantillas helm. De esta forma se pueden generar cadenas de valor/dato que utilicen plantillas para estructurar cosas como valores de secrets m\u00e1s peque\u00f1os. p.ej. crear un fichero maven `settings.xml`  o un fichero docker `config.json` que incluye muchos usuarios/contrase\u00f1as para diferentes registros.\n\nPodemos ver en el fichero `values.tmpl.yaml` c\u00f3mo est\u00e1n todos los elementos estructurados y podremos referencia a ellos como valore de secrets a trav\u00e9s de URLs (o funciones de plantillas) para acceder a Vault o al almacenamiento local.\n\nPara hacer esto se utiliza la expresi\u00f3n `{{ .Parameter.pipelineUser.token }}` en alg\u00fan lugar del archivo `values.tmpl.yaml`. Entonces se podr\u00e1 insertar valores dentro de la plantillas helm; pero esto sucede primero para ayudar a generar el fichero `values.yaml`.\n",
            "content/es/docs/getting-started/setup/create-cluster/_index.md": "---\ntitle: Crear cl\u00faster\nlinktitle: Crear cl\u00faster\ndescription: \u00bfComo crear un cl\u00faster de Kubernetes?\ncategories: [getting started]\nkeywords: [cluster]\nweight: 1\n---\n\nJenkins X necesita que exista un cl\u00faster de Kubernetes para que pueda instalarse mediante el [jx boot](/docs/getting-started/setup/boot/).\n\nExisten varios enfoques para crear grupos de Kubernetes.\n\nNuestra recomendaci\u00f3n es usar [Terraform](https://www.terraform.io) para configurar toda su infraestructura en la nube (cl\u00faster de Kubernetes, cuentas de servicio, almacenamiento, registro, etc.) y utilizar un proveedor de la nube para crear y administrar sus cl\u00fasteres de Kubernetes.\n\nO puede utilizar un enfoque espec\u00edfico de proveedor de Kubernetes:",
            "content/es/docs/getting-started/setup/create-cluster/amazon/_index.md": "---\ntitle: Amazon\nlinktitle: Amazon\ndescription: \u00bfComo crear un cl\u00faster de Kubernetes? en Amazon (AWS)?\nweight: 40\n---\n\nExisten deferentes maneras de configurar cl\u00fasteres en Amazon:\n\n## Utilizando EKS y eksctl\n\nSi deseas EKS en AWS, entonces la herramienta preferida es [eksctl](https://eksctl.io).\n\nPrimero debes instalar [eksctl CLI](https://eksctl.io/introduction/installation/).\n\nLuego sigue las instrucciones para [crear un cl\u00faster EKS con eksctl](https://eksctl.io/usage/creating-and-managing-clusters/).\n\n## Utilizando EC2 y Kops\n\nSi deseas utilizar EC2 y Kops debes descargar la [liberaci\u00f3n de Kops](https://github.com/kubernetes/kops/releases).\nLuego debes seguir las instrucciones para [crear un cl\u00faster en AWS utilizando Kops](https://kubernetes.io/docs/setup/production-environment/tools/kops/).\n\n\n## Utilizando jx CLI\n\nAseg\u00farese de [tener instalado la CLI jx](/es/docs/getting-started/setup/install/) para luego poder utilizar Kops:\n\n```sh\njx create cluster aws --skip-installation\n```\n\no puedes utilizar el servicio EKS:\n\n```sh\njx create cluster eks --skip-installation\n```\n",
            "content/es/docs/getting-started/setup/create-cluster/amazon/terraform.md": "---\ntitle: Crear cl\u00faster EKS con Terraform\nlinktitle: Terraform\ndescription: \u00bfC\u00f3mo configurar un cl\u00faster EKS, requerimientos y Jenkins X con Terraform en AWS?\ncategories: [getting started]\nkeywords: [install,Kubernetes,aws,terraform]\nweight: 65\n---\n\nEsta es una gu\u00eda corta para configurar EKS en AWS utilizando Terraform donde se incluyen los requisitos necesarios para instalar Jenkins X y Vault. Se asume que est\u00e1 configurado el acceso a AWS y que est\u00e1 familiarizado con AWS, kubectl y Terraform.\n\nEl fragmento de c\u00f3digo de Terraform agrupa los recursos necesarios para EKS en AWS. El resultado (output) de la ejecuci\u00f3n ser\u00e1 utilizado como par\u00e1metros en el comando `jx install`.\n\n```tf\nvariable \"region\" {\n}\n\nvariable \"subnets\" {\n    type = \"list\"\n}\n\nvariable \"vpc_id\" {\n}\n\nvariable \"key_name\" {\n    description = \"SSH key name for worker nodes\"\n}\n\nvariable \"bucket_domain\" {\n    description = \"Suffix for S3 bucket used for vault unseal operation\"\n}\n\nprovider \"aws\" {\n    region  = \"${var.region}\"\n}\n\nmodule \"eks\" {\n    source       = \"terraform-aws-modules/eks/aws\"\n    cluster_name = \"${var.region}\"\n    subnets      = \"${var.subnets}\"\n    vpc_id       = \"${var.vpc_id}\"\n    worker_groups = [\n        {\n            autoscaling_enabled   = true\n            asg_min_size          = 3\n            asg_desired_capacity  = 3\n            instance_type         = \"t3.large\"\n            asg_max_size          = 20\n            key_name              = \"${var.key_name}\"\n        }\n    ]\n    version = \"5.0.0\"\n}\n\n# Needed for cluster-autoscaler\nresource \"aws_iam_role_policy_attachment\" \"workers_AmazonEC2ContainerRegistryPowerUser\" {\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser\"\n  role       = \"${module.eks.worker_iam_role_name}\"\n}\n\n# Create S3 bucket for KMS\nresource \"aws_s3_bucket\" \"vault-unseal\" {\n    bucket = \"vault-unseal.${var.region}.${var.bucket_domain}\"\n    acl    = \"private\"\n\n    versioning {\n        enabled = false\n    }\n}\n\n# Create KMS key\nresource \"aws_kms_key\" \"bank_vault\" {\n    description = \"KMS Key for bank vault unseal\"\n}\n\n# Create DynamoDB table\nresource \"aws_dynamodb_table\" \"vault-data\" {\n    name           = \"vault-data\"\n    read_capacity  = 2\n    write_capacity = 2\n    hash_key       = \"Path\"\n    range_key      = \"Key\"\n    attribute {\n        name = \"Path\"\n        type = \"S\"\n    }\n\n    attribute {\n        name = \"Key\"\n        type = \"S\"\n    }\n}\n\n# Create service account for vault. Should the policy\nresource \"aws_iam_user\" \"vault\" {\n  name = \"vault_${var.region}\"\n}\n\ndata \"aws_iam_policy_document\" \"vault\" {\n    statement {\n        sid = \"DynamoDB\"\n        effect = \"Allow\"\n        actions = [\n            \"dynamodb:DescribeLimits\",\n            \"dynamodb:DescribeTimeToLive\",\n            \"dynamodb:ListTagsOfResource\",\n            \"dynamodb:DescribeReservedCapacityOfferings\",\n            \"dynamodb:DescribeReservedCapacity\",\n            \"dynamodb:ListTables\",\n            \"dynamodb:BatchGetItem\",\n            \"dynamodb:BatchWriteItem\",\n            \"dynamodb:CreateTable\",\n            \"dynamodb:DeleteItem\",\n            \"dynamodb:GetItem\",\n            \"dynamodb:GetRecords\",\n            \"dynamodb:PutItem\",\n            \"dynamodb:Query\",\n            \"dynamodb:UpdateItem\",\n            \"dynamodb:Scan\",\n            \"dynamodb:DescribeTable\"\n        ]\n        resources = [\"${aws_dynamodb_table.vault-data.arn}\"]\n    }\n    statement {\n        sid = \"S3\"\n        effect = \"Allow\"\n        actions = [\n                \"s3:PutObject\",\n                \"s3:GetObject\"\n        ]\n        resources = [\"${aws_s3_bucket.vault-unseal.arn}/*\"]\n    }\n    statement {\n        sid = \"S3List\"\n        effect = \"Allow\"\n        actions = [\n            \"s3:ListBucket\"\n        ]\n        resources = [\"${aws_s3_bucket.vault-unseal.arn}\"]\n    }\n    statement {\n        sid = \"KMS\"\n        effect = \"Allow\"\n        actions = [\n            \"kms:Encrypt\",\n            \"kms:Decrypt\",\n            \"kms:DescribeKey\"\n        ]\n        resources = [\"${aws_kms_key.bank_vault.arn}\"]\n    }\n}\n\nresource \"aws_iam_user_policy\" \"vault\" {\n    name = \"vault_${var.region}\"\n    user = \"${aws_iam_user.vault.name}\"\n\n    policy = \"${data.aws_iam_policy_document.vault.json}\"\n}\n\nresource \"aws_iam_access_key\" \"vault\" {\n    user = \"${aws_iam_user.vault.name}\"\n}\n\n# Output KMS key id, S3 bucket name and secret name in the form of jx install options\noutput \"jx_params\" {\n    value = \"--provider=eks --gitops --no-tiller --vault --aws-dynamodb-region=${var.region} --aws-dynamodb-table=${aws_dynamodb_table.vault-data.name} --aws-kms-region=${var.region} --aws-kms-key-id=${aws_kms_key.bank_vault.key_id} --aws-s3-region=${var.region}  --aws-s3-bucket=${aws_s3_bucket.vault-unseal.id} --aws-access-key-id=${aws_iam_access_key.vault.id} --aws-secret-access-key=${aws_iam_access_key.vault.secret}\"\n}\n```\n\nSalvar como `eks.tf`\n\nEl m\u00f3dulo terraform-aws-modules/eks/aws va a guardar el fichero kubeconfig como `config`. Este podr\u00e1 ser copiado o mezclado con el suyo `~/.kube/config`. Con esta configuraci\u00f3n `jx install` puede ser iniciado utilizando los par\u00e1metros de salida de Terraform.",
            "content/es/docs/getting-started/setup/create-cluster/azure.md": "---\ntitle: Azure\nlinktitle: Azure\ndescription: \u00bfC\u00f3mo crear un cl\u00faster de Kubernetes en Azure?\nweight: 40\n---\n\nDebes utilizar [este provechoso blog](https://cloudblogs.microsoft.com/opensource/2019/03/06/jenkins-x-azure-kubernetes-service-setup/).\n\nDe lo contrario garantice [tener instalado jx CLI](/es/docs/getting-started/setup/install/) y ejecute el siguiente comando:\n\n```sh\njx create cluster aks --skip-installation\n```",
            "content/es/docs/getting-started/setup/create-cluster/google.md": "---\ntitle: Google\nlinktitle: Google\ndescription: C\u00f3mo crear un cl\u00faster de Kubernetes en la Plataforma Google Cloud (GCP)?\nweight: 50\n---\n\n## Utilizando la Consola de Google Cloud\n\nPuedes crear un cl\u00faster de Kubernetes in pocos clics en la [Consolo de Google Cloud](https://console.cloud.google.com/).\n\nPrimero garantiza tener creado/seleccionado un proyecto:\n\n<img src=\"/images/quickstart/gke-select-project.png\" class=\"img-thumbnail\">\n\nLuego puedes dar clic en el bot\u00f3n `create cluster` en la p\u00e1gina de los [cl\u00fasteres de Kubernetes](https://console.cloud.google.com/kubernetes/list) o intentar [crear un cl\u00faster](https://console.cloud.google.com/kubernetes/add) directamente.\n\n## Utilizando gcloud\n\nLa interfaz de l\u00edneas de comandos (CLI) para trabajar con Google Cloud es `gcloud`. Si no la tienes instalada entonces por favor [instale gcloud](https://cloud.google.com/sdk/install).\n\nPara crear un cluster con gcloud siga [las siguientes instrucciones](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster).\n\n## Utilizando Google Cloud Shell\n\nSi no quieres instalar `gcloud` puedes utilizar [Google Cloud Shell](https://console.cloud.google.com/) porque tiene incluidos la mayor\u00eda de los componentes que necesitar\u00e1s para la instalaci\u00f3n (`git, gcloud, kubectl`, etc).\n\nPrimero necesitas abrir utilizar el bot\u00f3n de la barra de herramientas para abrir Google Cloud Shell:\n\n<img src=\"/images/quickstart/gke-start-shell.png\" class=\"img-thumbnail\">\n\nUna veza abierto podr\u00e1s crear el cl\u00faster utilizando `gcloud` juanto a [las siguientes instrucciones](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster).\n\n## Conectando con el cl\u00faster\n\nUna vez creado el cl\u00faster vas a necesitar conectarte a \u00e9l a trav\u00e9s de las herramienas `kubectl` o [jx](/es/docs/getting-started/setup/install/).\n\nPara lograrlo, has clic en el bot\u00f3n `Connect` en la p\u00e1gina [Kubernetes Engine page](https://console.cloud.google.com/kubernetes/list) en la [Consola de Google](https://console.cloud.google.com/).\n\n<img src=\"/images/quickstart/gke-connect.png\" class=\"img-thumbnail\">\n\nAhora deber\u00edas poder utilizar las herramientas CLI `kubectl` y `jx` desde su laptop para comunicarte con el cl\u00faster GKE. Por ejemplo, el siguiente comando deber\u00eda listar los nodos presentes en su cl\u00faster:\n\n```sh\nkubectl get node\n```\n",
            "content/es/docs/getting-started/setup/install/_index.md": "---\ntitle: Instalar jx\nlinktitle: Instalar jx\ndescription: \u00bfC\u00f3mo instalar el binario jx en tu m\u00e1quina?\nweight: 5\nkeywords: [instalar]\n---\n\nElija las instrucciones m\u00e1s adecuadas para su sistema operativo:\n\n## macOS\n\nEn una Mac puedes utilizar [brew](https://brew.sh/):\n\n```sh\nbrew install jenkins-x/jx/jx\n```\n\nPara instalar Jenkins X en macOS sin utilizar brew debes descargar el fichero `.tar` y descomprimirlo en el directorio donde puedas ejecutar el comando `jx`.\n\n1.  Descargue el archivo binario `jx` utilizando `curl` y la barra `|` a trav\u00e9s del comando:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r '.tag_name')/jx-darwin-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n    o, si no tienen instalado `jq` utilice el siguiete comando:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-darwin-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n\n2.  Instale el binario `jx` moviendo el fichero descargado al directorio correspondientes al PATH de su entorno, utilice el comando `mv`.\n\n```sh\nsudo mv jx /usr/local/bin\n```\n\n3. Ejecute `jx version` para confirmar que tienes la \u00faltima versi\u00f3n estable\n\n```sh\njx version\n```\n\n## Linux\n\nPara instalar Jenkins X en Linux descargue el fichero `.tar` y descompr\u00edmalo en el directorio donde puedas ejecutar el comando `jx`.\n\n1.  Descargue el archivo binario `jx` utilizando `curl` y la barra `|` a trav\u00e9s del comando:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r '.tag_name')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n    o, si no tienen instalado `jq` utilice el siguiete comando:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n2.  Instale el binario `jx` moviendo el fichero descargado al directorio correspondientes al PATH de su entorno, utilice el comando `mv`.\n\n```sh\nsudo mv jx /usr/local/bin\n```\n\n3. Ejecute `jx version` para confirmar que tienes la \u00faltima versi\u00f3n estable\n\n```sh\njx version\n```\n\n## Windows\n\nPuede instalar Jenkins X en Windows a trav\u00e9s de Chocolatey, un sistema de administraci\u00f3n de paquetes de terceros que proporciona comandos convenientes en un solo paso para las instalaciones y actualizaciones locales de Jenkins X.\n\nInstale el sistema de gesti\u00f3n de paquetes de Chocolatey utilizando un Shell de administraci\u00f3n:\n\n1.  Clic-Derecho menu: Inicio\\[Comando R\u00e1pido (Admin)\\].\n\n2.  En la ventana de comando, ejecute `powershell.exe` para descargar e instalar el binario  `choco` en la ruta donde podr\u00e1 ser ejecutado, utilice la siguiente l\u00ednea:\n\n        @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n\n3.  Instalar Jenkins X utilizando Chocolatey:\n\n        choco install jenkins-x\n\nPuedes actualizar Jenkinx X a su \u00faltima versi\u00f3n utilizando Chocolatey:\n\n```sh\nchoco upgrade jenkins-x\n```\n\n- Si utilizas [scoop](https://scoop.sh), entonces hay un [manifiesto disponible](https://github.com/lukesampson/scoop/blob/master/bucket/jx.json).\n\n  Para instalar el binario `jx` ejecute:\n\n  ```sh\n  scoop install jx\n  ```\n\n  Para actualizar el binario `jx` ejecute:\n\n  ```sh\n  scoop update jx\n  ```\n\n## Plataforma Google Cloud (GCP)\n\nPara ejecutar los comandos `jx` desde GCP Cloud Shell, instale los binarios de Jenkins X desde el repositorio de GitHub y h\u00e1galo con los comandos de GCP Shell:\n\n1.  Abra [GCP Cloud Shell](https://cloud.google.com/shell/docs/starting-cloud-shell),\n    y seleccione su proyecto GCP para Jenkinx X.\n\n{{< alert >}}\nEs altamente recomendable que utilice el navegador Google Chrome con GCP Cloud Shell para evitar problemas inesperados.\n{{< /alert >}}\n\n1.  Estando en GCP Cloud Shell, descargue el archivo binario `jx` utilizando `curl` y la barra `|` a trav\u00e9s del comando:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r '.tag_name')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n1.  Mueva el ejecutable `jx` al directorio de ejecutables utilizando el siguiente comando:\n\n```sh\nsudo mv jx /usr/local/bin\n```\n\n4. Ejecute `jx version` para confirmar que tienes la \u00faltima versi\u00f3n estable\n\n```sh\njx version\n```\n\nUna vez instalado el binario `jx` podr\u00e1s [configurar el cl\u00faster para Jenkins X en Google Kubernetes Engine](/getting-started/create-cluster/).\n\n## Otras plataformas\n\n[descargue el binario](https://github.com/jenkins-x/jx/releases) para `jx` y agr\u00e9guelo al su `$PATH`\n\nTambi\u00e9n puede intentar [construirlo usted mismo](https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md). Sin embargo, si lo construye usted mismo ten cuidado de eliminar cualquier binario `jx` anterior para que su compilaci\u00f3n local se encuentre primero en el `$PATH` :)\n\n## Obtener Ayuda\n\nPara identificar los comandos disponibles escriba:\n\n```sh\njx\n```\n\nO, para obtener informaci\u00f3n sobre un comando espec\u00edfico, por ejemplo `create`, escriba:\n\n```sh\njx help create\n```\n\nTambi\u00e9n puedes buscar en la [documentaci\u00f3n de referencia para comandos jx](/commands/jx/)\n",
            "content/es/docs/managing-jx/_index.md": "---\ntitle: \"Administrando Jenkins X\"\nlinkTitle: \"Administrando Jenkins X\"\nweight: 3\ndescription: >\n  Aprende c\u00f3mo administrar Jenkins X.\n---\n",
            "content/es/docs/managing-jx/common-tasks/_index.md": "---\ntitle: \"Principales Tareas\"\nlinkTitle: \"Principales Tareas\"\nweight: 10\ndescription: >\n  Se describen las principales tareas de la plataforma Jenkins X para ayudarlo a administrarla.\n---\n",
            "content/es/docs/managing-jx/common-tasks/access-control.md": "---\ntitle: Control de Acceso\nlinktitle: Control de Acceso\ndescription: Gestionar el Control de Acceso\nweight: 10\n---\n\nJenkins X utiliza pol\u00edticas de control de acceso basado en roles - en ingl\u00e9s Role-Based Access Control (RBAC) - para controlar el acceso a sus diversos recursos. La aplicaci\u00f3n de las pol\u00edticas es proporcionada por el [RBAC de Kubernetes](https://kubernetes.io/docs/reference/access-authn-authz/rbac/).\n\nLos [Equipos](/about/concepts/features/#teams) pueden tener varios [Entornos](/about/concepts/features/#environments) (p.ej, Dev, Staging, Production) junto con din\u00e1micos [Entornos de Vista Previa](/docs/reference/preview/). Mantener sincronizados los recursos [`Role`](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) y [`RoleBinding`](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) pertenecientes al mecanismo RBAC de Kubernetes con todos los namespaces y miembros de su equipo puede ser un desaf\u00edo.\n\nPara facilitar esta gesti\u00f3n, Jenkins X crea un nuevo [Recurso Personalizado](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/) llamado [`EnvironmentRoleBinding`](/docs/reference/components/custom-resources/#environmentrolebinding) que le permite asociar un `Role` etiquetado con `jenkins.io/kind=EnvironmentRole` con tantos `Users` o `ServiceAccounts` como desee. Luego, el [controlador de roles](/commands/jx_controller_role/#jx-controller-role) tiene la misi\u00f3n de mantener la informaci\u00f3n replicada y consistente a trav\u00e9s de todos los namespaces y entornos. El controlador de roles garantiza esta tarea actualizando constantemente los recursos `Role` y `RoleBinding` de cada namespace.\n\nLos roles son por equipo, por lo que es posible tener roles especiales por equipo o utilizar nombres comunes para los roles, pero personalizarlos para cada equipo.\n\n## Implicaciones de Seguridad para el namespace admin\n\nJenkins X almacena varias configuraciones y ajustes (por ejemplo, `Users`,` Teams`) en el namespace de administraci\u00f3n principal (`jx`). Tenga cuidado al otorgar roles en el equipo `jx` predeterminado, ya que permitir a los usuarios editar algunos de estos archivos puede permitirles escalar sus permisos.\nEn lugar de otorgar a los usuarios que no son administradores acceso al espacio de nombres `jx`, cree equipos y otorgue acceso a los usuarios cuando usen un cl\u00faster compartido.\n\n## Roles Predeterminados\n\nJenkins X incluye una colecci\u00f3n de objetos `Role` predeterminados que puede utilizar en la plantilla `jenkins-x-platform`. Puede crear el suyo si lo desea, pero cualquier edici\u00f3n puede perderse cuando se actualiza Jenkins X.\n\n[viewer](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/viewer-role.yaml)\n: El rol `viewer` permite el acceso de lectura a proyectos, construcciones y logs. No permite el acceso a informaci\u00f3n confidencial.\n\n[committer](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/committer-role.yaml)\n: El role `committer` proporciona los mismos permisos que el `viewer` y permite al usuario iniciar construcciones e importar nuevos proyectos.\n\n[owner](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/templates/owner-role.yaml)\n: El rol `owner` permite a los usuarios modificar todos los recursos del equipo.\n\n## Adicionar Usuarios\n\nPara adicionar usuarios utilice el comando [jx create user](/commands/jx_create_user/), p.ej:\n\n```sh\njx create user --email \"joe@example.com\" --login joe --name \"Joe Bloggs\"\n```\n\n## Modificar Roles del Usuario\n\nPara modificar los roles de un usuario utilice el comando [jx edit userroles](/commands/jx_edit_userroles/), p.ej:\n\n```sh\njx edit userrole --login joe\n```\nSi no utiliza el par\u00e1metro `--login` (`-l`) en la l\u00ednea de comando el sistema le pedir\u00e1 que elija el usuario a editar.\n\nPor ejemplo, para asignarle a `joe` el role `committer` (y elimine cualquier otro rol existente):\n\n```sh\njx edit userrole --login joe --role committer\n```\n\nSi tiene roles espec\u00edficos y desea otorgar m\u00faltiples roles a un usuario, puede especificar los roles como una lista separada por comas:\n```sh\njx edit userrole --login joe --role committer,viewer\n```\n\nLa modificaci\u00f3n de los roles de un usuario cambia el `EnvironmentRoleBinding`. El [controlador de roles](/commands/jx_controller_role/#jx-controller-role) replicar\u00e1 estos cambios en todos los namespaces de entorno subyacentes.",
            "content/es/docs/managing-jx/common-tasks/create-custom-builder.md": "---\ntitle: Construcci\u00f3n Personalizada\nlinktitle: Construcci\u00f3n Personalizada\ndescription: \u00bfC\u00f3mo crear una construcci\u00f3n personalizado para Jenkins X?\ncategories: [getting started]\nkeywords: [install,builder]\nweight: 260\n---\n\nEn Jenkins X, es posible crear sus Constructores personalizados (tambi\u00e9n conocidos como [POD templates](https://github.com/jenkinsci/kubernetes-plugin)) o sobrescribir las existentes. Solo necesita basar su imagen de Docker en esta [imagen base de construcci\u00f3n](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/builder-base/Dockerfile.common). Estas im\u00e1genes contienen una serie de herramientas pre-instaladas que se actualizan y publican constantemente en [Docker Hub](https://hub.docker.com/r/jenkinsxio/builder-base/).\n\n## Crear un Constructor personalizado desde cero\n\n### Imagen Constructora\n\nPrimero debes crear una imagen de Docker para tu constructor. Por ejemplo, el ficheor `Dockerfile` inicial puede verse as\u00ed:\n\n```dockerfile\nFROM jenkinsxio/builder-base:latest\n\n# Install your tools and libraries\nRUN yum install -y gcc openssl-devel\n\nCMD [\"gcc\"]\n```\n\nAhora puede construir la imagen y publicarla en su repositorio:\n\n```sh\nexport BUILDER_IMAGE=<YOUR_REGISTRY>/<YOUR_BUILDER_IMAGE>:<VERSION>\ndocker build -t ${BUILDER_IMAGE} .\ndocker push ${BUILDER_IMAGE}\n```\n\nNo se preocupe, no es necesario que ejecute estos pasos manualmente cada vez que necesite construir una nueva imagen. Jenkins X puede manejar esto por ti. Solo necesita insertar su ficheor `Dockerfile` en un repositorio similar a [este](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-go). Ajuste el fichero `Jenkinsfile` de acuerdo con el nombre de su organizaci\u00f3n y aplicaci\u00f3n, y luego importe el repositorio en su plataforma Jenkins X con:\n\n```sh\njx import --url <REPOSITORY_URL>\n```\n\nDe ahora en adelante, cada vez que agregue una modificaci\u00f3n Jenkins X va a construir y publicar autom\u00e1ticamente esta imagen.\n\n### Instalar el Constructor\n\nPuede instalar su constructor tanto al inicio de la instalaci\u00f3n de Jenkins X como durante la actualizaci\u00f3n.\n\nCrea el fichero `myvalues.yaml` en su carpeta local `~/.jx/` con el siguiente contenido:\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      MyBuilder:\n        Name: mybuilder\n        Label: jenkins-mybuilder\n        volumes:\n        - type: Secret\n          secretName: jenkins-docker-cfg\n          mountPath: /home/jenkins/.docker\n        EnvVars:\n          JENKINS_URL: http://jenkins:8080\n          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_NAME: jenkins-x-bot\n          GIT_COMMITTER_NAME: jenkins-x-bot\n          XDG_CONFIG_HOME: /home/jenkins\n          DOCKER_CONFIG: /home/jenkins/.docker/\n        ServiceAccount: jenkins\n        Containers:\n          Jnlp:\n            Image: jenkinsci/jnlp-slave:3.14-1\n            RequestCpu: \"100m\"\n            RequestMemory: \"128Mi\"\n            Args: '${computer.jnlpmac} ${computer.name}'\n          Dlang:\n            Image: <YOUR_BUILDER_IMAGE>\n            Privileged: true\n            RequestCpu: \"400m\"\n            RequestMemory: \"512Mi\"\n            LimitCpu: \"1\"\n            LimitMemory: \"1024Mi\"\n            Command: \"/bin/sh -c\"\n            Args: \"cat\"\n            Tty: true\n```\n\nModifique el nombre del constructor y su imagen correspondiente.\n\nAhora puede continuar con la instalaci\u00f3n de Jenkins X, el generador se agregar\u00e1 autom\u00e1ticamente a la plataforma.\n\n### Utilizar el Constructor\n\nAhora que su constructor/generador a sido instalado en Jenkins, puede hacer referencia a \u00e9l en el fichero `Jenkinsfile`:\n\n```Groovy\npipeline {\n    agent {\n        label \"jenkins-mybuilder\"\n    }\n    stages {\n      stage('Build') {\n        when {\n          branch 'master'\n        }\n        steps {\n          container('mybuilder') {\n              // your steps\n          }\n        }\n      }\n    }\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n```\n\n## Sobreescribir el Constructor existente\n\nJenkins X viene con una serie de [constructores pre-instalados](https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/jenkins-x-platform/values.yaml) que puede sobrescribir si es necesario durante la instalaci\u00f3n o actualizaci\u00f3n.\n\nSolo necesita crear su imagen personalizada ya sea en [base a la imagen del generador](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/builder-base/Dockerfile.common) o la [imagen del generador](https://hub.docker.com/u/jenkinsxio/) que desea sobrescribir. Ver m\u00e1s detalles arriba.\n\nLuego puede crear el fichero `myvalues.yaml` en su carpeta local `~/.jx/` con el siguiente contenido:\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      Maven:\n        Containers:\n          Maven:\n            Image: <YOUR_REGISTRY>/<YOUR_MAVEN_BUILDER_IMAGE>:<VERSION>\n      Nodejs:\n        Containers:\n          Nodejs:\n            Image: <YOUR_REGISTRY>/<YOUR_NODEJS_BUILDER_IMAGE>:<VERSION>\n      Go:\n        Containers:\n          Go:\n            Image: <YOUR_REGISTRY>/<YOUR_GO_BUILDER_IMAGE>:<VERSION>\n```\n\nAhora puede continuar con la instalaci\u00f3n de Jenkins X, el generador se agregar\u00e1 autom\u00e1ticamente a la plataforma.",
            "content/es/docs/managing-jx/common-tasks/dns.md": "---\ntitle: DNS\nlinktitle: DNS\ndescription: Configuraci\u00f3n de DNS para el acceso externo de los servicios del cl\u00faster\nweight: 80\n---\n\nPara poder acceder a los servicios alojados dentro de su cl\u00faster, usamos un dominio [nip.io](https://nip.io/). Esto hace que sea muy f\u00e1cil configurar y administrar DNS.\n\nSin embargo, para los usuarios que desean que los servicios del cl\u00faster est\u00e9n disponibles en un dominio personal, utilizamos DNS externos, que es igual de f\u00e1cil.\n\n## DNS Externos\n**NOTA**: *Actualmente solo disponible en GKE*\n\nPuede utilizar el servicio [ExternalDNS](https://github.com/kubernetes-incubator/external-dns) para exponer los Servicios (`Services`) y Entradas (`Ingress`) de Kubernetes mediante la sincronizaci\u00f3n con proveedores de DNS.\n\nSi est\u00e1 utilizando [jx boot](/es/docs/getting-started/setup/boot/) para instalar y configurar su instalaci\u00f3n, modifique el fichero `jx-requirements.yml` para habilitar `ingress.externalDNS: true` como se describe en la [documentaci\u00f3n de entradas](/es/docs/getting-started/setup/boot/#ingress).\n\nDe lo contrario, para que su cl\u00faster utilice ExternalDNS utilice la siguiente l\u00ednea de comando:\n\n```sh\njx install --provider gke --tekton --external-dns\n```\n\n*Este comando le pedir\u00e1 el dominio que desea utilizar.*\n\n```sh\n\ud83d\ude45 developer ~/go-workspace/jx(master)$ jx install --provider gke --tekton --external-dns\nWARNING: When using tekton, only kaniko is supported as a builder\nContext \"gke_<your-project-id>_europe-west1-b_<your-cluster-name>\" modified.\nset exposeController Config URLTemplate \"{{.Service}}-{{.Namespace}}.{{.Domain}}\"\nGit configured for user: **********  and email *********@****.***\nhelm installed and configured\n? Provide the domain Jenkins X should be available at: your-domain.com\n```\n\nLuego se crea una zona administrada de CloudDNS dentro de su proyecto GCP de cl\u00fasteres, los grupos de registros que exponen sus servicios ser\u00e1n creados por ExternalDNS dentro de esta zona administrada.\n\n```sh\n\ud83d\ude45 developer ~/go-workspace()$ gcloud dns managed-zones list\nNAME                           DNS_NAME                   DESCRIPTION                       VISIBILITY\nyour-domain-com-zone           your-domain.com.           managed-zone utilised by jx       public\n```\n\n### Asignaci\u00f3n\n\nUna vez completada la instalaci\u00f3n, se enviar\u00e1 una lista de servidores de nombres al terminal, actualice el sitio donde ha registrado su dominio utilizando estos servidores de nombres para delegar su dominio en Google CloudDNS.\n\n```sh\n\n        ********************************************************\n\n            External DNS: Please delegate your-domain.com via\n            your registrar onto the following name servers:\n                ns-cloud-d1.googledomains.com.\n                ns-cloud-d2.googledomains.com.\n                ns-cloud-d3.googledomains.com.\n                ns-cloud-d4.googledomains.com.\n\n        ********************************************************\n\n```\n\n#### [Dominios en Google](https://domains.google)\n\nSi est\u00e1 utilizando Dominios de Google como su registrador de dominios, consulte [aqu\u00ed](https://support.google.com/domains/answer/3290309?hl=en-GB&ref_topic=9018335) para obtener detalles sobre c\u00f3mo delegar en servidores de nombres personalizados.\n\n### Plantillas URL\n\nTodos los servicios deben estar disponibles en el mismo dominio, la cual se deriva de la siguiente manera:\n\n```sh\n<service>-<namespace>.<your-domain>\n```",
            "content/es/docs/managing-jx/common-tasks/security-features.md": "---\ntitle: Funcionalidades de Seguridad\nlinktitle: Funcionalidades de Seguridad\ndescription: Complementos de seguridad para Jenkins X\nweight: 170\n---\n\nJenkins X tiene algunos complementos \u00fatiles que pueden ayudar a garantizar la seguridad de sus aplicaciones desplegadas. Hay seguridad est\u00e1tica y de contenedores, as\u00ed como complementos de seguridad din\u00e1micos disponibles.\n\n### Seguridad est\u00e1tica\n\n[Anchore Engine](https://github.com/anchore/anchore-engine) se utiliza para proporcionar seguridad a las im\u00e1genes de docker. Anchore examina el contenido de las im\u00e1genes a partir de un PR, de un estado de revisi\u00f3n o desde un contenedores en ejecuci\u00f3n.\n\nEsto fue introducido en [esta publicaci\u00f3n](https://jenkins.io/blog/2018/05/08/jenkins-x-anchore/).\n\nPara habilitar esto, ejecute el siguiente comando y el servicio de Anchore ser\u00e1 configurado:\n\n```sh\njx create addon anchore\n```\n\nEsto lanzar\u00e1 los recursos necesarios, y tendr\u00e1 disponible el servicio para ejecutarse en cualquiera de los entornos de su equipo, y en cualquier aplicaci\u00f3n de vista previa en ejecuci\u00f3n.\n\nPara probarlo, puede usar el siguiente comando para informar sobre cualquier problema encontrado:\n\n```sh\njx get cve --environment=staging\n```\n\nAqu\u00ed hay un video que [lo muestra en acci\u00f3n](https://youtu.be/rB8Sw0FqCQk). Para eliminar este complemento utilice el siguiente comando:\n\n```sh\njx delete addon anchore\n```\n\n### Seguridad din\u00e1mica\n\nEl sitio web Open Web Application Security Project publica una herramienta llamada ZAP: el [Zed Attack Proxy](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project). Esto proporciona varias herramientas, incluido un comando de l\u00ednea que se puede ejecutar contra una entrada de la aplicaci\u00f3n en busca de un conjunto b\u00e1sico de problemas.\n\nEn Jenkins X, esto se puede ejecutar contra una aplicaci\u00f3n de vista previa (que obtiene cada aplicaci\u00f3n) creando un enlace a la vista previa:\n\n```sh\njx create addon owasp-zap\n```\n\nLuego de habilitar este complemento cada PR tendr\u00e1 su vista previa de la aplicaci\u00f3n ejecutada a trav\u00e9s del an\u00e1lisis de ZAP. En caso de detectarse fallas finalizar\u00e1 el pipeline CI autom\u00e1ticamente. Los pipelines no se modifican para ejecutar esta prueba, y se aplicar\u00e1n a todas los PR para el equipo.\n\nPara eliminar el componente ZAP utilice el siguiente comando:\n\n```sh\njx delete post preview job --name owasp-zap\n```\n\nEl enlace de vista previa tambi\u00e9n se puede configurar con el comando:\n\n```sh\njx create post preview job --name owasp --image owasp/zap2docker-weekly:latest -c \"zap-baseline.py\" -c \"-I\" -c \"-t\" -c \"\\$(JX_PREVIEW_URL)\"\n```\n\nPuede tener m\u00faltiples enlaces configurados, por lo tanto, si tuviera contenedores espec\u00edficos a los que necesite revisar/probar, podr\u00eda ejecutar en cada aplicaci\u00f3n de vista previa (es decir, cada PR) utilizando el siguiente comando:\n\n[Entornos de vista previa](/docs/reference/preview/)",
            "content/es/docs/managing-jx/common-tasks/storage.md": "---\ntitle: Almacenamiento\nlinktitle: Almacenamiento\ndescription: \u00a1Guardemos sus archivos de tuber\u00eda en alg\u00fan lugar nativo de la nube!\nweight: 180\n---\n\nCuando utilizamos un servidor Jenkins est\u00e1tico (Static Jenkins Server) con Jenkins X heredamos el modelo de almacenamiento habitual Jenkins; que crean registros, resultados de pruebas e informes los cuales son almacenados en un volumen (Persistent Volume) persistente del servidor Jenkins.\n\nSin embargo, a medida que avanzamos hacia un [Jenkins m\u00e1s nativo en la nube](/blog/2018/11/26/changes-november-26-2018/) y usamos Jenkins sin servidor ([Serverless Jenkins](/news/serverless-jenkins/)), necesitamos una mejor soluci\u00f3n para el almacenamiento de cosas como registros, resultados de pruebas, informes de cobertura de c\u00f3digo, etc.\n\n## Extensiones de almacenamiento\n\nAs\u00ed que hemos agregado un punto de extensi\u00f3n de almacenamiento que se usa desde:\n\n* almacenar registros cuando se utiliza [Serverless Jenkins](/news/serverless-jenkins/), que se realiza mediante el comando [jx controller build](/commands/jx_controller_build/)\n* utilizando el comando [jx step stash](/commands/jx_step_stash/) que oculta archivos de una compilaci\u00f3n (informes de prueba o cobertura)\n\n## Configurar el Almacenamiento\n\nPuede configurar la ubicaci\u00f3n predeterminada a utilizar para el almacenamiento. Actualmente permitimos:\n\n* almacenar archivos (registros, informes de prueba o cobertura) en una rama de un repositorio git. p.ej. podr\u00edan ser parte de la rama `gh-pages` para su sitio est\u00e1tico.\n* almacenar ficheros en espacios en la nube (buckets) como por ejemplo S3, GCS, Azure blobs, etc.\n\nEl almacenamiento utiliza clasificaciones que se utilizan para definir la carpeta donde se guardar\u00e1n los tipos de recursos como\n\n* registros (logs)\n* pruebas (tests)\n* cobertura (coverage)\n\nTambi\u00e9n puede usar la clasificaci\u00f3n especial `default` que se utiliza si no tiene una configuraci\u00f3n para la clasificaci\u00f3n en cuesti\u00f3n. p.ej. puede definir una ubicaci\u00f3n de `default` y luego simplemente configurar d\u00f3nde van los `logs` si eso es diferente.\n\nSi est\u00e1 utilizando [jx boot](/es/docs/getting-started/setup/boot/) para instalar y configurar Jenkins X, modifique el fichero `jx-requirements.yml` para configurar el almacenamiento como se describe en la [documentaci\u00f3n de boot](/es/docs/getting-started/setup/boot/#almacenamiento)\n\nDe lo contrario, para configurar la ubicaci\u00f3n de almacenamiento para una clasificaci\u00f3n y un equipo, use el comando [jx edit storage](/commands/jx_edit_storage/).\n\np.ej.\n\n```sh\n# Configure the tests to be stored in cloud storage (using S3 / GCS / Azure Blobs etc)\njx edit storage -c tests --bucket-url s3://myExistingBucketName\n\n# Configure the git URL and branch of where to store logs\njx edit storage -c logs --git-url https://github.com/myorg/mylogs.git --git-branch cheese\n```\n\nPuede ver la configuraci\u00f3n de almacenamiento de su equipo a trav\u00e9s de [jx get storage](/commands/jx_get_storage/)\n\n## Utilizando el Almacenado (Stash)\n\nDentro del pipeline, puede ejecutar el comando [jx step stash](/commands/jx_step_stash/) para almacenar archivos:\n\n```sh\n# lets collect some files with the file names relative to the 'target/test-reports' folder and store in a Git URL\njx step stash -c tests -p \"target/test-reports/*\" --basedir target/test-reports\n\n# lets collect some files to a specific AWS cloud storage bucket\njx step stash -c coverage -p \"build/coverage/*\" --bucket-url s3://my-aws-bucket\n```\n\n* especifique el clasificador mediante el par\u00e1metro `-c` para pruebas o cobertura, etc.\n* especifique los archivos que se recopilar\u00e1n mediante el par\u00e1metro `-p`, que admite expresiones como `*` para archivos que se almacenar\u00e1n con la ruta relativa del directorio.\n* si desea eliminar un prefijo de directorio de los archivos guardados, como por ejemplo `target/reports`, puede utilizar `--basedir` para especificar el directorio para crear nombres de archivo relativos\n\nDe forma predeterminada, [jx step stash](/commands/jx_step_stash/) usar\u00e1 la ubicaci\u00f3n configurada de su equipo para la clasificaci\u00f3n que usted proporcione. Si lo desea, puede anular la ubicaci\u00f3n de almacenado utilizando `--git-url` o `--bucket-url`.\n\n### Recuperar ficheros Almacenados (Unstashing)\n\nSi lo necesita, puede recuperar los ficheros previamente almacenados a trav\u00e9s del comando [jx step unstash](/commands/jx_step_unstash/).\n\nSi est\u00e1 en alg\u00fan c\u00f3digo fuente de Go y tiene una URL de Jenkins X, como una URL de registro de compilaci\u00f3n o un archivo adjunto de un [PipelineActivity Custom Resource](/docs/reference/components/custom-resources/), la URL podr\u00eda tener varias formas, como:\n\n  * `gs://anotherBucket/mydir/something.txt` : utilizando un bucket GCS en GCP\n  * `s3://nameOfBucket/mydir/something.txt` : utilizando un bucket S3 en AWS\n  * `azblob://thatBucket/mydir/something.txt` : utiliznado un bucket de Azure\n  * `http://foo/bar` : fichero almacenado en un repositorio git HTTP\n  * `https://foo/bar` : fichero almacenado en un repositorio git HTTPS\n\nSi desea poder leer f\u00e1cilmente desde la URL del c\u00f3digo fuente de Go, puede usar [la funci\u00f3n `ReadURL`](https://github.com/jenkins-x/jx/blob/e5a7943dc0c3d79c27f30aea73235f18b3f5dcff/pkg/cloud/buckets/buckets.go#L44-L45).",
            "content/es/docs/managing-jx/common-tasks/tls.md": "---\ntitle: TLS\nlinktitle: TLS\ndescription: Configurando TLS en Jenkins X\nweight: 190\n---\n\nConsulte la [documentaci\u00f3n de entradas de boot](/es/docs/getting-started/setup/boot/#ingress).",
            "content/es/docs/managing-jx/common-tasks/upgrade-jx.md": "---\ntitle: Actualizando Jenkins X\nlinktitle: Actualizando Jenkins X\ndescription:  Instrucciones para actualizar su instalaci\u00f3n de Jenkins X\ncategories: [tutorials]\nkeywords: [usage,docs]\nweight: 190\n---\n\nPuede mantener actualizado su entorno de Jenkins X utilizando la l\u00ednea de comando `jx upgrade`. A continuaci\u00f3n se muestran los recursos que pudiera actualizar con mayor frecuencia. Para consultar un detallado listado de recursos posibles a actualizar ve [la documentaci\u00f3n del propio comando](/commands/jx_upgrade/).\n\nActualizando el binario CLI\n------------------------\n\nActualice la interfaz de l\u00ednea de comandos de Jenkins X abriendo un terminal y ejecutando:\n\n    $ jx upgrade cli\n\nSi no utiliza par\u00e1metros adicionales, el comando actualizar\u00e1 el binario `jx` a la \u00faltima versi\u00f3n liberada. Sin embargo, si desea instalar una versi\u00f3n espec\u00edfica puede agregar el par\u00e1metro `-v` como se muestra a continuaci\u00f3n:\n\n    $ jx upgrade cli -v 2.0.46\n\nActualizando la plataforma\n----------------------\n\nActualice su plataforma de Jenkins X junto a los paquetes relacionados con ella a trav\u00e9s del comando:\n\n    $ jx upgrade platform\n\nLa palabra `platform` en el comando de actualizaci\u00f3n hace referencia a los siguientes sistemas: Jenkins, Helm, ChartMuseum, Nexus y Monocular. La plataforma tambi\u00e9n hace referencia a cualquier servidor ChartMuseum asociado con el cl\u00faster.\n\nActualizando Aplicaciones\n--------------\n\nPuede actualizar cualquier aplicaci\u00f3n instalada en Jenkins X durante el proceso de creaci\u00f3n del cl\u00faster utilizando `jx` para actualizar el recurso:\n\n    $ jx upgrade apps\n\nLa palabra `apps` hace referencia a todas las aplicaciones instaladas en su cl\u00faster de Kubernetes si hay actualizaciones disponibles. Si desea actualizar solo aplicaciones espec\u00edficas, puede usar el comando `jx upgrade app` junto a la aplicaci\u00f3n especificada:\n\n    $ jx upgrade app cb-app-slack",
            "content/es/docs/managing-jx/examples/_index.md": "---\ntitle: \"Ejemplos\"\nlinkTitle: \"Ejemplos\"\nweight: 20\ndescription: >\n  Ejemplos de c\u00f3mo configurar Jenkins X\n---\n\nPara obtener m\u00e1s detalles, consulte la [documentaci\u00f3n de boot](/es/docs/getting-started/setup/boot/) sobre:\n\n* [secrets](/es/docs/getting-started/setup/boot/#informaci\u00f3n-sensible-secrets)\n* [git](/es/docs/getting-started/setup/boot/#git)\n* [webhook](/es/docs/getting-started/setup/boot/#webhook)\n",
            "content/es/docs/managing-jx/faq/_index.md": "---\ntitle: FAQ\nlinktitle: FAQ\ndescription: Preguntas sobre c\u00f3mo gestionar Jenkins X\nweight: 60\n---\n\n## \u00bfC\u00f3mo agrego un usuario a mi instalaci\u00f3n de Jenkins X?\n\nJenkins X asume que cada usuario tiene acceso al mismo cl\u00faster de desarrollo kubernetes en el que se est\u00e1 ejecutando Jenkins X.\n\nSi su usuario no tiene acceso al cl\u00faster de kubernetes, debemos configurar su archivo `~/.kube/config` para que pueda acceder a \u00e9l.\n\nSi est\u00e1 utilizando el GKE de Google, puede navegar por la [Consola GKE](https://console.cloud.google.com) para ver todos los cl\u00fasteres y hacer clic en el bot\u00f3n `Connect` al lado de su cl\u00faster de desarrollo y eso le permite copiar/pegar el comando para conectarse al cl\u00faster.\n\nPara otros cl\u00fasteres, estamos planeando escribir algunos [comandos CLI para exportar e importar la configuraci\u00f3n de kube](https://github.com/jenkins-x/jx/issues/1406).\n\nAdem\u00e1s, [CloudBees](https://www.cloudbees.com/) est\u00e1 trabajando en una distribuci\u00f3n de Jenkins X que incluir\u00e1 un inicio de sesi\u00f3n \u00fanico junto con una incre\u00edble interfaz de usuario web para visualizar equipos, pipelines, registros, entornos, aplicaciones, versiones e infraestructura. La interfaz de usuario de CloudBees proporciona una manera f\u00e1cil para que cualquier persona de su equipo inicie sesi\u00f3n en Jenkins X desde la l\u00ednea de comandos con el bot\u00f3n `Connect` en la p\u00e1gina `Teams` que utiliza [jx login](/commands/deprecation/).\n\n### Una vez que el usuario tiene acceso al cl\u00faster de Kubernetes\n\nUna vez que el usuario tiene acceso al cl\u00faster de Kubernetes:\n\n* [instale el binario jx](/es/docs/getting-started/setup/install/)\n\nSi Jenkins X fue instalado en el namespace `jx`, entonces lo siguientes debe ser [cambiar su contexto](/docs/resources/guides/using-jx/developing/kube-context/) al namespace `jx`:\n\n    $  jx ns jx\n\nPara probar, debe poder escribir:\n\n    $  jx get env\n    $  jx open\n\nPara ver los entornos y cualquier herramienta de desarrollo como las consolas de Jenkins o Nexus.\n\n## \u00bfC\u00f3mo funciona el control de acceso y la seguridad?\n\nVea la [documentaci\u00f3n de control de acceso](/docs/resources/guides/managing-jx/common-tasks/access-control/).\n\n## \u00bfC\u00f3mo actualizo mi instalaci\u00f3n de Jenkins X?\n\nNuestra estrategia para la instalaci\u00f3n, configuraci\u00f3n y actualizaci\u00f3n de Jenkins X es [jx boot](/es/docs/getting-started/setup/boot/).\n\nSi est\u00e1 utilizando [jx boot](/es/docs/getting-started/setup/boot/) puede habilitar las actualizaciones [autom\u00e1ticas](/es/docs/getting-started/setup/boot/#actualizaciones-autom\u00e1ticas) o hacerlas [manualmente](/es/docs/getting-started/setup/boot/#actualizaciones-manuales).\n\nSi algo va mal durante la actualizaci\u00f3n (p.ej, si es borrado el cl\u00faster, el namespace o Tekton), puede volver a ejecutar el cmando [jx boot](/es/docs/getting-started/setup/boot/) en su laptop para restaurar el estado del cl\u00faster.\n\n\nDe lo contrario, el enfoque anterior es el siguiente:\n\n### Si no utiliza boot\n\nPuede actualizar Jenkins X a trav\u00e9s del comando [jx upgrade](/commands/jx_upgrade/). Comience por:\n\n```sh\n$ jx upgrade cli\n```\n\npara que obtenga la \u00faltima versi\u00f3n de la sistema CLI, luego actualice la plataforma:\n\n```sh\n$ jx upgrade platform\n```\n\n## \u00bfC\u00f3mo actualizo el binario jx usado dentro de las compilaciones cuando uso jenkins sin servidor?\n\nUtilizamos `BuildTemplates` espec\u00edficos para diferentes lenguajes de programaci\u00f3n. Estas `BuildTemplates` describen los pasos que se ejecutar\u00e1n como parte del trabajo, que en el caso de Jenkins X BuildTemplates, todos ejecutan `JenkinsfileRunner` para ejecutar el Jenkinsfile del proyecto.\n\n```sh\n$ kubectl get buildtemplates\nNAME                        AGE\nenvironment-apply           9d\nenvironment-build           9d\njenkins-base                9d\njenkins-csharp              9d\njenkins-cwp                 9d\njenkins-elixir              9d\njenkins-filerunner          9d\njenkins-go                  9d\njenkins-go-nodocker         9d\njenkins-go-script-bdd       1d\njenkins-go-script-ci        1d\njenkins-go-script-release   1d\njenkins-gradle              9d\njenkins-javascript          9d\njenkins-jenkins             9d\njenkins-maven               9d\njenkins-python              9d\njenkins-rust                9d\njenkins-scala               9d\njenkins-test                9d\nknative-chart-ci            9d\nknative-chart-release       9d\nknative-deploy              9d\nknative-maven-ci            9d\nknative-maven-release       9d\n```\n\nLa imagen Docker que tiene el proceso `Jenkinsfile` tambi\u00e9n tiene otras herramientas instaladas, como el binario `jx`. Si necesita actualizar `jx` a una versi\u00f3n m\u00e1s nueva, debe [modificar el Dockerfile base utilizado para el paso del proceso Jenkinsfile de BuildTemplate](https://github.com/jenkins-x/jenkins-x-serverless/blob/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base#L120-L123), para que use la versi\u00f3n jx que desee. Aunque esto [normalmente se hace autom\u00e1ticamente](https://github.com/jenkins-x/jenkins-x-serverless/commits/def939f559b6b0e6735c043ce032686397053a6e/Dockerfile.base).\n\nUna vez hecho esto, debe cambiar BuildTemplate en su cl\u00faster para que comience a usar la nueva versi\u00f3n de la imagen de Docker. Por ejemplo, puede ver la versi\u00f3n actual de esta imagen para Go BuildTemplate en su cl\u00faster:\n\n```sh\n$ kubectl describe buildtemplate jenkins-go | grep Image\nImage:       jenkinsxio/jenkins-go:256.0.44\n```\n\nSi desea utilizar una versi\u00f3n diferente que use una versi\u00f3n m\u00e1s nueva de jx, puede cambiar manualmente todas las BuildTemplates, pero en su lugar, vamos a ocuparnos de jx\n\n```sh\njx upgrade addon jx-build-templates\n```\n\nCompruebe que se han realizado los cambios:\n\n```sh\n$ kubectl describe buildtemplate jenkins-go | grep Image\nImage:       jenkinsxio/jenkins-go:256.0.50\n```\n\n## \u00bfC\u00f3mo difiere `--prow` de `--gitops`?\n\n* `--prow` usa [jenkins sin servidor](/news/serverless-jenkins/) y usa [prow](https://github.com/kubernetes/test-infra/tree/master/prow) para implementar ChatOps en los PRs.\n* `--gitops` todav\u00eda est\u00e1 en progreso, pero usar\u00e1 GitOps para administrar la instalaci\u00f3n de Jenkins X (el entorno de desarrollo) para que la instalaci\u00f3n de la plataforma se almacene en un repositorio de git y la actualizaci\u00f3n / adici\u00f3n de aplicaciones / cambio de configuraci\u00f3n se cambie a trav\u00e9s de PRs como cambios en la promoci\u00f3n de aplicaciones a los entornos de puesta en escena o producci\u00f3n.\n\n## \u00bfC\u00f3mo reutilizo mi controlador Ingress existente?\n\nDe manera predeterminada, [cuando instala Jenkins X en un cl\u00faster de Kubernetes existente](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/), le pregunta si desea instalar un controlador Ingress. Jenkins X necesita un controlador Ingress de alg\u00fan tipo para que podamos configurar los recursos `Ingress` para cada `Service` para que podamos acceder a las aplicaciones web a trav\u00e9s de URL fuera del cl\u00faster de Kubernetes (por ejemplo, dentro de los navegadores web).\n\nEl comando [jx install](/commands/deprecation/) toma una serie de par\u00e1metros CLI que comienzan con `--ingress` donde puede apuntar el namespace, el deployment y el service del controlador de entrada que desea usar para la instalaci\u00f3n.\n\nSi puede, le recomendamos que use el controlador de entrada predeterminado, ya que sabemos que funciona muy bien y solo usa una sola IP de LoadBalancer para todo el cl\u00faster (su proveedor de la nube a menudo cobra por direcci\u00f3n IP). Sin embargo, si desea apuntar a un controlador de entrada diferente, simplemente especifique esos argumentos en la instalaci\u00f3n:\n\n```sh\n$ jx install \\\n  --ingress-service=$(yoursvcname) \\\n  --ingress-deployment=$(yourdeployname) \\\n  --ingress-namespace=kube-system\n```\n\n## \u00bfC\u00f3mo habilito las URL HTTPS?\n\nEn general utilizamos el comando [jx upgrade ingress](/commands/deprecation/).\n\nPara m\u00e1s detalles vea los siguiente documentos:\n\n* [Actualizaci\u00f3n de reglas de entrada y adici\u00f3n de certificados TLS con Jenkins X](https://technologyconversations.com/2019/05/31/upgrading-ingress-rules-and-adding-tls-certificates-with-jenkins-x/) por [Viktor Farcic](https://technologyconversations.com)\n* [Jenkins X\u200a\u2014\u200aHabilitar TLS en Vistas Previas](https://itnext.io/jenkins-x-tls-enabled-previews-d04fa68c7ce9?source=friends_link&sk=c13828b223f56ed662fd7ec0872c3d1e) por [Steve Boardwell](https://medium.com/@sboardwell)\n* [Jenkins X\u200a\u2014\u200aSeguridad en el Cl\u00faster](https://itnext.io/jenkins-x-securing-the-cluster-e1b9fcd8dd05?source=friends_link&sk=e1e46e780908b2e3c8415c3191e82c56) por [Steve Boardwell](https://medium.com/@sboardwell)\n\n## \u00bfC\u00f3mo cambio las URL en un entorno?\n\nUtilizamos [exposecontroller](https://github.com/jenkins-x/exposecontroller) para automatizar la configuraci\u00f3n de los recursos `Ingress` para los Servicios expuestos, lo que permite TLS y tambi\u00e9n inyecta URL externas para servicios en el c\u00f3digo (por ejemplo, para que podamos registrar webhooks).\n\nLa plantilla `UrlTemplate` predeterminada para cada entorno tiene la forma: `{{.Service}}.{{.Namespace}}.{{.Domain}}` donde el `Service` es el nombre del servicio, `Namespace` es el espacio de nombres de Kubernetes y `Domain` est\u00e1 configurado el Dominio DNS\n\nSi desea modificar los esquemas de URL de su servicio en un entorno, edite el fichero `env/values.yaml` en su repositorio Git de Entornos. Para encontrar las URL de cada repositorio de origen, use el comando `jx get env`.\n\nLuego, modifique el contenido en `env/values.yaml` para incluir el valor `urlTemplate:` de la siguiente manera:\n\n```yaml\nexpose:\n  config:\n    urltemplate: \"{{.Service}}-{{.Namespace}}.{{.Domain}}\"\n```\n\nHemos omitido los otros valores de `expose:` y `config:` por brevedad; lo importante es asegurarse de que especifique un valor personalizado de `expose.config.urltemplate`. El valor predeterminado es `{{.Service}}.{{.Namespace}}.{{.Domain}}` si no se especifica ninguno.\n\nCada vez que modifique el repositorio de git para un entorno, el pipeline de GitOps se ejecutar\u00e1 para actualizar sus recursos de Ingress para que coincidan con su `UrlTemplate`.",
            "content/es/docs/managing-jx/faq/boot.md": "---\ntitle: Preguntas sobre Boot\nlinktitle: Preguntas sobre Boot\ndescription: Preguntas sobre c\u00f3mo utilizar 'jx boot'\nweight: 20\n---\n\nPara ampliar los detalles vea c\u00f3mo utilizar [jx boot](/es/docs/getting-started/setup/boot/).\n\n## \u00bfC\u00f3mo actualizo boot?\n\nSi est\u00e1 utilizando [jx boot](/es/docs/getting-started/setup/boot/) puede habilitar las [actualizaciones autom\u00e1ticas](/es/docs/getting-started/setup/boot/#actualizaciones-autom\u00e1ticas) o puedes [hacerlas manualmente](/es/docs/getting-started/setup/boot/#actualizaciones-manuales).\n\nSi en alg\u00fan momento algo va mal (p.ej, se borra el cl\u00faster, el namespace o Tekton), siempre puede volver a ejecutar [jx boot](/es/docs/getting-started/setup/boot/) en su laptop para restaurar el cl\u00faster.\n\n## \u00bfC\u00f3mo adiciono m\u00e1s recursos?\n\nAdicione recursos (p.ej, `Ingress, ConfigMap, Secret`) a su entorno de desarrollo en como ficheros YAML al directorio boot `env/templates`.\n\n## \u00bfC\u00f3mo adiciono un nuevo Entorno?\n\nAgregue un nuevo recurso `SourceRepository` y `Environment` a la carpeta `env/templates` para cada nuevo entorno que desee crear. Actualmente solo hemos agregado `dev, staging, production`.\n\nDesde su cl\u00faster en ejecuci\u00f3n, siempre puede tomar el recurso `SourceRepository` and `Environment` a trav\u00e9s de lo siguiente (donde XXX es el nombre del repositorio de Staging devuelto a trav\u00e9s de `kubectl get sr`):\n\n```sh\n$ kubectl get env staging -oyaml > env/templates/myenv.yaml\n$ kubectl get sr XXX -oyaml > env/templates/myenv-sr.yaml\n```\n\nluego modifique el YAML para adaptarlo, cambiando los nombres de los recursos para evitar chocar con su repositorio de Staging.\n\n## \u00bfC\u00f3mo administrar los recursos SourceRepository?\n\nVea c\u00f3mo actualizar su [configuraci\u00f3n boot con los \u00faltimos recursos SourceRepository](/es/docs/getting-started/setup/boot/how-it-works/#repositorio-de-origen).\n\n## \u00bfC\u00f3mo enlazo SourceRepository a un Scheduler personalizado?\n\nDebe asignar su `SourceRepository` a un `Scheduler` especificando `--scheduler` cuando utilice los comandos `jx create quickstart / jx import` en su repositorio o modifique el `spec.scheduler.name` de `SourceRepository` del CRD en su repositorio Git de desarrollo o especificando un programador predeterminado diferente en el `dev environment.spec.teamSettings.defaultScheduler.name` luego la pr\u00f3xima vez que se genere la configuraci\u00f3n de prow (en el comando `jx create quickstart / jx import / jx boot` actualizar\u00e1 la configuraci\u00f3n de prow para usar su programador.\n\nConsulte tambi\u00e9n [\u00bfC\u00f3mo agrego m\u00faltiples pipelines paralelas a un proyecto?](/docs/resources/faq/using/chatops/#how-do-i-add-multiple-parallel-pipelines-to-a-project)\n\n## \u00bfC\u00f3mo adiciono charts en Jekins X?\n\nDepender\u00e1 de en cu\u00e1l namespaces desea instalar el chart.\n\nSi est\u00e1 en el entorno de desarrollo (el namespace `jx` por defecto), entonces `env/requirements.yaml` es donde agregar el chart y para un chart `foo` puede agregar `env/foo/values.yaml` para configurarlo. (o `env/foo/values.tmpl.yaml` si desea utilizar algunas [plantillas](/docs/getting-started/setup/boot/how-it-works/#improvements-to-values-yaml) con ficheros `values.yaml`).\n\nSin embargo, si desea que nuestro chart est\u00e9 en otro namespace, entonces usamos la convenci\u00f3n de agregar una carpeta en el directorio `system`, en la configuraci\u00f3n boot (por ejemplo, como lo hacemos para las entradas, administrador de certificados, velero, malla de servicio, etc.). Entonces, cree una nueva carpeta `system`  y agregue el paso `jx step helm apply` en el pipeline en `jenkins-x.yml` como lo hacemos para `cert-manager`, `nginx`, `velero`, etc.\n\n## \u00bfC\u00f3mo desactivo el controlador de Entrada?\n\nSi ya tiene su propio controlador de Entrada y no desea que `jx boot` instale otro, simplemente puede eliminar el paso `install-nginx-controller` en el repositorio Git de su entorno de desarrollo. p.ej. [elimine este paso](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jenkins-x.yml#L85-L99) del fichero `jenkins-x.yml` en el repositorio Git de su entorno de desarrollo.",
            "content/es/docs/managing-jx/faq/issues.md": "---\ntitle: Problemas comunes\nlinktitle: Problemas comunes\ndescription: Preguntas sobre problemas comunes configurando Jenkins X.\nweight: 50\n---\n\nHemos tratado de recopilar problemas comunes aqu\u00ed con soluciones alternativas. Si su problema no aparece en esta lista, [inf\u00f3rmenos](https://github.com/jenkins-x/jx/issues/new).\n\n## Jenkins X no se inicia\n\nSi su instalaci\u00f3n no se inicia, podr\u00eda haber algunas razones diferentes por las que los m\u00f3dulos Jenkins X no se inician.\n\nSu cl\u00faster podr\u00eda estar sin recursos. Puede revisar los recursos de reserva de su cl\u00faster a trav\u00e9s del comando [jx status](/commands/jx_status/):\n\n```sh\n$ jx status\n```\n\nTambi\u00e9n tenemos un comando de diagn\u00f3stico para detectar problemas comunes, [jx step verify install](/commands/jx_step_verify_install/):\n\n```sh\n$ jx step verify install\n```\n\nUn problema com\u00fan para lo cual pudieran no iniciar los pods es si el cl\u00faster no tiene una [clase de almacenamiento predeterminado](https://kubernetes.io/docs/concepts/storage/storage-classes/) configurada, por lo tanto, los recursos `Persistent Volume Claims` no pueden obtener los `Persistent Volumes` como se describe en las [instrucciones de instalaci\u00f3n](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/).\n\nPuede revisar su clase de almacenamiento y vol\u00famenes persistentes a trav\u00e9s de:\n\n```sh\n$ kubectl get pvc\n```\n\nSi las cosas est\u00e1n funcionando debe ver algo similar a esto:\n\n```sh\n$ kubectl get pvc\nNAME                        STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\njenkins                     Bound     pvc-680b39b5-94f1-11e8-b93d-42010a840238   30Gi       RWO            standard       12h\njenkins-x-chartmuseum       Bound     pvc-6808fb5e-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\njenkins-x-docker-registry   Bound     pvc-680a415c-94f1-11e8-b93d-42010a840238   100Gi      RWO            standard       12h\njenkins-x-mongodb           Bound     pvc-680d6fd9-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\njenkins-x-nexus             Bound     pvc-680fc692-94f1-11e8-b93d-42010a840238   8Gi        RWO            standard       12h\n```\n\nPuede ver el estado (`status`) en `Pending` entonces significa que no tiene la [clase de almacenamiento predetermianda](https://kubernetes.io/docs/concepts/storage/storage-classes/) configurada en su cl\u00faster de Kubernetes, o te puedes haber quedado sin espacio de almacenamiento.\n\nPor favor, intente crear una [clase de almacenamiento predeterminada](https://kubernetes.io/docs/concepts/storage/storage-classes/) para su cl\u00faster o contacte con el equipo de operaciones - proveedor cloud.\n\nSi todos los `Persistent Volume Claims` tienen el estado `Bound` y todav\u00eda no se ha iniciado, entonces intente:\n\n```sh\n$ kubectl get pod\n```\n\nSi un pod no puede iniciarse, intente:\n\n```sh\n$ kubectl describe pod some-pod-name\n```\n\nTal vez este comando le de alguna pista. Podr\u00eda estar relacionado RBAC?\n\nSi todav\u00eda est\u00e1 atascado env\u00edenos la descripci\u00f3n del problema [create an issue](https://github.com/jenkins-x/jx/issues/new).\n\n## http: el servidor dio respuesta HTTP al cliente HTTPS\n\nSi su pipeline ha fallado con algo similar a esto:\n\n```sh\nThe push refers to a repository [100.71.203.90:5000/lgil3/jx-test-app]\ntime=\"2018-07-09T21:18:31Z\" level=fatal msg=\"build step: pushing [100.71.203.90:5000/lgil3/jx-test-app:0.0.2]: Get https://100.71.203.90:5000/v1/_ping: http: server gave HTTP response to HTTPS client\"\n```\n\nEsto significa que est\u00e1 utilizando el registro de Docker interno de Jenkins X para sus im\u00e1genes, pero el servicio de Docker de su cl\u00faster de Kubernetes no ha sido configurado para registros inseguros (`insecure-registries`), por lo que tiene que utilizar `http` para acceder al servicio del registro Docker `jenkins-x-docker-registry` en su cluster.\n\nPor defecto, Docker desea que todos los registros sean expuestos a trav\u00e9s de `https` y utilizar TLS y certificados. Esto debe estar garantizado por todos los registros p\u00fablicos. Sin embargo, al utilizar Jenkins X con un registro de Docker interno es dif\u00edcil lograrlo porque no hay un nombre DNS p\u00fablico disponible y no se tiene HTTPS or certificados; por lo que de forma predeterminada se necesita tener registros inseguros configurados (`insecure-registry`) en todos los servicios de Docker en sus nodos Kubernetes.\n\nIntentamos automatizar esta configuraci\u00f3n cuando usamos `jx create cluster`, p.ej en AWS, el valor predeterminado es el rango de IP `100.64.0.0/10` para que coincida con la mayor\u00eda de las direcciones IP del servicio Kubernetes.\n\nEn [EKS](/commands/jx_create_cluster_eks/), usamos ECR de manera predeterminada para evitar este problema. Del mismo modo, pronto cambiaremos por defecto a GCR y ACR en GKE y AKS respectivamente.\n\nPor lo tanto, una soluci\u00f3n alternativa es utilizar un [registro real de contenedores externos](/docs/resources/guides/managing-jx/common-tasks/docker-registry/) o habilitar el registro inseguro (`insecure-registry`) en sus demonios de Docker en sus nodos en su cl\u00faster de Kubernetes.\n\n## Helm falla con el Error: UPGRADE FAILED: incompatible versions client[...] server[...]'\n\nEn t\u00e9rminos generales, esto sucede cuando su laptop tiene una versi\u00f3n de Helm diferente a la versi\u00f3n utilizada en nuestras im\u00e1genes de Docker y/o la versi\u00f3n de Helm que se ejecuta en su servidor.\n\nLa soluci\u00f3n m\u00e1s simple para esto es [no usar tiller en absoluto](/news/helm-without-tiller/), lo que en realidad ayuda a evitar que este problema suceda y resuelve una serie de problemas de seguridad tambi\u00e9n.\n\nSin embargo, cambiar de usar Tiller a No Tiller requiere una re-instalaci\u00f3n de Jenkins X (\u00bfaunque podr\u00eda intentar hacerlo en un conjunto separado de namespaces y luego mover los proyectos gradualmente?).\n\nLa soluci\u00f3n manual es instalar [la misma versi\u00f3n de Helm que la utilizada en el servidor](https://github.com/helm/helm/releases)\n\nO puede intentar cambiar Tiller para que coincida con la versi\u00f3n de su cliente:\n\n* ejecute `helm init --upgrade`\n\nAunque tan pronto como se ejecute un pipeline, cambiar\u00e1 la versi\u00f3n de Helm nuevamente, por lo que deber\u00e1 seguir repitiendo lo anterior.\n\n## error creando credenciales de Jenkins jenkins-x-chartmuseum 500 Server Error\n\nEsto es un [problema pendiente](https://github.com/jenkins-x/jx/issues/1234) que resolveremos lo antes posible.\n\nB\u00e1sciamente sucede cuando tienes un token viejo de API en `~/.jx/jenkinsAuth.yaml` para la URL del servidor Jenkins. T\u00fa tambi\u00e9n puedes:\n\n* eliminarlo del fichero manualmente\n* ejecutar el siguiente comando [jx delete jenkins token](/commands/deprecation/):\n\n        $ jx delete jenkins token admin\n\n## errores con chartmuseum.build.cd.jenkins-x.io\n\nSi ve un error como este:\n\n```sh\nerror:failed to add the repository 'jenkins-x' with URL 'https://chartmuseum.build.cd.jenkins-x.io'\n```\n\no\n\n```sh\nLooks like \"https://chartmuseum.build.cd.jenkins-x.io\" is not a valid chart repository or cannot be reached\n```\n\nentonces parece que tienes una referencia hacia una URL caducada del chartmuseum para los charts en Jenkins X.\n\nLa nueva URL es: http://chartmuseum.jenkins-x.io\n\nPuede ser que tu instalaci\u00f3n Helm tenga una URL del repositorio vieja. Puedes verla as\u00ed:\n\n```sh\n$ helm repo list\nNAME     \tURL\nstable   \thttps://kubernetes-charts.storage.googleapis.com\njenkins-x\thttp://chartmuseum.jenkins-x.io\n```\n\nSi est\u00e1 viendo esto ...\n\n```sh\n$ helm repo list\nNAME     \tURL\njenkins-x\thttps://chartmuseum.build.cd.jenkins-x.io\n```\n\nentonces por favor, ejecute ...\n\n```sh\nhelm repo remove jenkins-x\nhelm repo add jenkins-x\thttp://chartmuseum.jenkins-x.io\n```\n\ny podr\u00e1 resolver su problema y seguir adelante.\n\nOtra causa posible es tener una URL vieja en tu repositorio Git del entorno, tal vez tenga una referencia a la anterior URL.\n\nEntonces abra su fichero `env/requirements.yaml` en sus repositorios Git staging/production y modif\u00edquelos para usar la URL http://chartmuseum.jenkins-x.io en lugar de **chartmuseum.build.cd.jenkins-x.io** como este [fichero de requisitos](https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml).\n\n## errores de git: POST 401 Bad credentials\n\nEsto indica que su token API de git se ingres\u00f3 incorrectamente o se ha regenerado y ahora es incorrecto.\n\nPara recrearlo con un nuevo valor de token de API, intente lo siguiente (cambiar el nombre del servidor git para que coincida con su proveedor git):\n\n```sh\n$ jx delete git token -n github <yourUserName>\n$ jx create git token -n github <yourUserName>\n```\n\nPuede ver m\u00e1s detalles en [c\u00f3mo utilizar Git y Jenkins X aqu\u00ed](/docs/resources/guides/managing-jx/common-tasks/git/).\n\n## Invalidar token git para escanear un proyecto\n\nSi recibe un error en Jenkins cuando intenta escanear sus repositorios en busca de ramas, algo como:\n\n```sh\nhudson.AbortException: Invalid scan credentials *****/****** (API Token for acccessing https://github.com git service inside pipelines) to connect to https://api.github.com, skipping\n```\n\nEntonces su token para la API de Git debe ser incorrecta o estar vencida.\n\nPara recrear el valor del token para la API intente lo siguiente (cambiar el nombre del servidor git para que coincida con su proveedor git):\n\n```sh\n$ jx delete git token -n GitHub admin\n$ jx create git token -n GitHub admin\n```\n\nPuede ver m\u00e1s detalles en [c\u00f3mo utilizar Git y Jenkins X aqu\u00ed](/docs/resources/guides/managing-jx/common-tasks/git/).\n\n## \u00bfCu\u00e1les son las credenciales para acceder a los servicios principales?\n\nLos servicios principales autenticados de Jenkins X incluyen Jenkins, Nexus, ChartMuseum. El nombre de usuario predeterminado es `admin` y la contrase\u00f1a por defecto se genera e imprime en el terminal despu\u00e9s de `jx create cluster` o `jx install`.\n\n### Establecer nombre de usuario y contrase\u00f1a de administrador para los servicios principales\n\nPuede establecer nombre del usuario de administraci\u00f3n a trav\u00e9s del par\u00e1metro `--default-admin-username=username`.\n\n{{< alert >}}\nQuiz\u00e1s est\u00e9 utilizando el dominio de seguridad de Active Directory en Jenkins. Es en este escenario que tiene sentido configurar el nombre de usuario de administrador a trav\u00e9s de `--default-admin-username` seg\u00fan sus cuentas de servicio existentes.\n\nTambi\u00e9n puede pasar este valor a trav\u00e9s de `myvalues.yaml`.\n{{< /alert >}}\n\nSi desea establecer la contrase\u00f1a predeterminada usted mismo, puede establecer el indicador `--default-admin-password=foo` en los dos comandos anteriores.\n\nSi ya no tiene la salida de la consola del terminal, puede buscar en el archivo local `~/.jx/jenkinsAuth.yaml` y encontrar la contrase\u00f1a que coincida con la URL de su servidor Jenkins para el cl\u00faster deseado.\n\n## Persistent Volume Claims no se enlazan\n\nSi observa que las peticiones de volumen persistentes creados al instalar Jenkins X no se unen con\n\n    $ kubectl get pvc\n\nDebe comprobar que tiene una clase de almacenamiento predeterminada de cl\u00faster para el aprovisionamiento din\u00e1mico de volumen persistente. Consulte [aqu\u00ed](https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/) para obtener m\u00e1s detalles.\n\n## No puedo conectarme a nodos en AWS\n\nSi no ve ning\u00fan nodo v\u00e1lido devuelto por `kubectl get node` u obtiene errores al ejecutar` jx status`, algo como:\n\n```sh\nUnable to connect to the server: dial tcp: lookup abc.def.regino.eks.amazonaws.com on 10.0.0.2:53: no such host\n```\n\npodr\u00eda ser que su configuraci\u00f3n de kube est\u00e9 obsoleta. Tratar\n\n```sh\naws eks --region <CLUSTER_REGION> update-kubeconfig --name <CLUSTER_NAME>\n```\n\nEso deber\u00eda regenerar su archivo local `~/kube/config` y entonces `kubectl get node` o `jx status` deber\u00edan encontrar sus nodos\n\n## \u00bfC\u00f3mo puedo diagnosticar problemas de exposecontroller?\n\nCuando promueve una nueva versi\u00f3n de su aplicaci\u00f3n a un entorno, como el entorno Staging, se genera un PR en el repositorio del entorno.\n\nCuando el pipeline del master se ejecuta en un entorno, se crea un `Job` de Kubernetes para [exposecontroller](https://github.com/jenkins-x/exposecontroller) que ejecuta un pod hasta que finaliza.\n\nPuede ser complicado encontrar el registro para trabajos temporales ya que se elimina el pod.\n\nUna manera de diagnosticar los registros en su entorno Staging, es [descargar e instalar kail](https://github.com/boz/kail) y agregarlo a su `PATH`.\n\nLuego ejecute este comando:\n\n```sh\nkail -l job-name=expose -n jx-staging\n```\n\nSi luego promueve el entorno Staging o vuelve a activar el pipeline en la rama `master` de su repositorio Git de Staging (p.ej, a trav\u00e9s de [jx start pipeline](/commands/jx_start_pipeline/)), deber\u00eda ver la salida del [exposecontroller] (https://github.com/jenkins-x/exposecontroller) pod.\n\n## \u00bfPor qu\u00e9 la promoci\u00f3n es realmente lenta?\n\nSi encuentra que recibe muchas advertencias en sus pipelines como esta ...\n\n```sh\n\"Failed to query the Pull Request last commit status for https://github.com/myorg/environment-mycluster-staging/pull/1 ref xyz Could not find a status for repository myorg/environment-mycluster-staging with ref xyz\n```\n\ny la promoci\u00f3n demora 30 minutos desde la liberaci\u00f3n de un pipeline en una aplicaci\u00f3n que comienza con el cambio que afecta a `Staging`, y probablemente se deba principalmente a Webhooks.\n\nCuando [importamos proyectos](/docs/resources/guides/using-jx/creating/import/) o [creamos inicios r\u00e1pidos](/es/docs/getting-started/first-project/create-quickstart/), automatizamos la configuraci\u00f3n de los pipelines de CI/CD para el repositorio Git. Lo que esto hace es configurar Webhooks en el repositorio de Git para activar Jenkins X para activar pipelines (ya sea usando Prow para [Jenkins X Pipelines sin servidor](/es/about/concepts/jenkins-x-pipelines/) o el servidor est\u00e1tico jenkins si no).\n\nSin embargo, a veces su proveedor de Git (por ejemplo, [GitHub](https://github.com/) puede no poder conectarse a su instalaci\u00f3n Jenkins X (por ejemplo, debido a problemas de red/firewall).\n\nLa forma m\u00e1s f\u00e1cil de diagnosticar esto es abrir el repositorio Git (por ejemplo, para el repositorio de su entorno).\n\n```sh\njx get env\n```\n\nEntonces:\n\n* clic en la URL generada para, p.ej, su repositorio Git de `Staging`\n* clic el icon `Settings`\n* selecciona el tab `Webhooks` en la izquierda\n* selecciona la URL del webhook de Jenkins X\n* vea el \u00faltimo webhook - \u00bfTuvo \u00e9xito? Intenta reactivarlo? Eso deber\u00eda resaltar cualquier problema de red, etc.\n\nSi no puede usar webhooks p\u00fablicos, puede mirar algo como [ultrahook] (http://www.ultrahook.com/)\n\n## No puede crear un cl\u00faster en minikube\n\nSi est\u00e1s utilizando Mac, entonces `hyperkit` es el mejor controlador de M\u00e1quinas Virtuales a utilizar - pero necesita que instale primero [Docker para Mac](https://docs.docker.com/docker-for-mac/install/). Int\u00e9ntenlo y vuelva a ejecutar el comando `jx create cluster minikube`.\n\nSi su minikube est\u00e1 fallando al inicio, entonces puede intentar:\n\n```sh\n$ minikube delete\n$ rm -rf ~/.minikube\n```\n\nSi el comando `rm` falla, tal vez necesite:\n\n```sh\nsudo rm -rf ~/.minikube\n```\n\nAhora intente `jx create cluster minikube` nuevamente: \u00bfeso ayud\u00f3? A veces hay certificados obsoletos o archivos que cuelgan de antiguas instalaciones de minikube que pueden romper cosas.\n\nA veces, un reinicio puede ayudar en casos donde la virtualizaci\u00f3n sale mal ;)\n\nDe lo contrario, puede intentar seguir las instrucciones del minikube\n\n* [instalar minikube](https://github.com/kubernetes/minikube#installation)\n* [ejecutar minikube start](https://github.com/kubernetes/minikube#quickstart)\n\n## Minkube e hyperkit: No puede encontrar la direcci\u00f3n IP\n\nSi est\u00e1 utilizando minikube en un mac con hyperkit y encuentra que minikube no puede comenzar con un registro como:\n\n```sh\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\n```\n\nEs posible que haya encontrado [este problema en minikube e hyperkit](https://github.com/kubernetes/minikube/issues/1926#issuecomment-356378525).\n\nLa soluci\u00f3n es intentar lo siguiente:\n\n```sh\n$ rm ~/.minikube/machines/minikube/hyperkit.pid\n```\n\nEntonces vuelva a intentarlo. Esperamos que esta vez funcione correctamente!\n\n## No se puede acceder a los servicios en minikube\n\nAl ejecutar minikube localmente, `jx` usa de manera predeterminada [nip.io](http://nip.io/) como una forma de usar nombres DNS agradables para los servicios y evitar el hecho de que la mayor\u00eda de las computadoras port\u00e1tiles no pueden usar DNS. Sin embargo, a veces [nip.io](http://nip.io/) tiene problemas y no funciona.\n\nPara evitar usar nip.io, puede hacer lo siguiente:\n\nEdite el archivo `~/.jx/cloud-environments/env-minikube/myvalues.yaml` y agregue el siguiente contenido:\n\n```yaml\nexpose:\n  Args:\n    - --exposer\n    - NodePort\n    - --http\n    - \"true\"\n```\n\nLuego, vuelva a ejecutar `jx install` y esto cambiar\u00e1 los servicios que se expondr\u00e1n en los puertos de nodo en lugar de usar el ingreso y DNS.\n\nEntonces, si escribes:\n\n```sh\njx open\n```\n\nVer\u00e1 todas las UR del formulario `http://$(minikube ip):somePortNumber` que luego evita pasar por [nip.io](http://nip.io/), solo significa que las URL son un poco m\u00e1s cr\u00edpticas utilizando n\u00fameros de puerto m\u00e1gicos en lugar de simples nombres de host.\n\n## \u00bfC\u00f3mo obtengo la contrase\u00f1a y el nombre de usuario para Jenkins?\n\nInstale [KSD](https://github.com/mfuentesg/ksd) ejecutando `go get github.com/mfuentesg/ksd` y luego ejecute `kubectl get secret jenkins -o yaml | ksd`\n\n## \u00bfC\u00f3mo veo el registro de exposecontroller?\n\nPor lo general, ejecutamos el `exposecontroller` como un trabajo posterior a la instalaci\u00f3n cuando realizamos la promoci\u00f3n a `Staging` o `Production` para exponer servicios sobre Ingress y posiblemente inyectar URL externas en la configuraci\u00f3n de las aplicaciones.\n\nPor lo tanto, el `Job` activar\u00e1 un `Pod` de corta duraci\u00f3n para que se ejecute en el namespace de su entorno, luego se eliminar\u00e1 el pod.\n\nSi desea ver los registros del `exposecontroller`, deber\u00e1 observar los registros utilizando un selector y luego activar el pipeline de promoci\u00f3n para capturarlo.\n\nUna forma de hacerlo es a trav\u00e9s de la CLI de [kail](https://github.com/boz/kail):\n\n```sh\n$ kail -l  job-name=expose\n```\n\nEsto buscar\u00e1 registros de exposecontroller y luego los volcar\u00e1 a la consola. Ahora active un pipeline de promoci\u00f3n y deber\u00eda ver la salida dentro de un minuto m\u00e1s o menos.\n\n## No se pueden crear certificados TLS durante la configuraci\u00f3n de Ingress\n\n> [cert-manager](https://docs.cert-manager.io/en/latest/index.html) cert-manager es un proyecto separado de _Jenkins X_.\n\nLos cl\u00fasteres GKE reci\u00e9n creados o el cl\u00faster existente que ejecuta Kubernetes **v1.12** o anterior encontrar\u00e1n el siguiente error al configurar Ingress con TLS en todo el sitio:\n\n```sh\nWaiting for TLS certificates to be issued...\nTimeout reached while waiting for TLS certificates to be ready\n```\n\nEste problema se debe a que el pod _cert-manager_ no tiene la etiqueta `disable-validation` establecida, que es un problema conocido de cert-manager que [est\u00e1 documentado en su sitio web](https://docs.cert-manager.io/en/latest/getting-started/install/kubernetes.html). Los siguientes pasos, tomados de la p\u00e1gina web [cert-manager/troubleshooting-installation](https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html#troubleshooting-installation), deber\u00edan resolver el problema:\n\nCompruebe si existe la etiqueta _disable-validation_ en el pod de cert-manager.\n\n```sh\n$ kubectl describe namespace cert-manager\n```\n\nSi no puede ver la etiqueta `certmanager.k8s.io/disable-validation=true` en su namespace, debe agregarla con:\n\n```sh\n$ kubectl label namespace cert-manager certmanager.k8s.io/disable-validation=true\n```\n\nConfirme que la etiqueta ha sido adicionada al pod _cert-manager_.\n\n```sh\n$ kubectl describe namespace cert-manager\n\nName:         cert-manager\nLabels:       certmanager.k8s.io/disable-validation=true\nAnnotations:  <none>\nStatus:       Active\n...\n```\n\nAhora vuelva a ejecutar la configuraci\u00f3n Ingres con _jx_:\n\n```sh\njx upgrade ingress\n```\n\nMientras se ejecuta el comando ingress, puede seguir los registros de _cert-manager_ en otra terminal y ver qu\u00e9 est\u00e1 sucediendo. Necesitar\u00e1 encontrar el nombre de su pod _cert-manager_ usando:\n\n```sh\nkubectl get pods --namespace cert-manager\n```\n\nEntonces imprima los registros del pod _cert-manager_.\n\n```sh\nkubectl logs YOUR_CERT_MNG_POD --namespace cert-manager -f\n```\n\nSus certificados TLS ahora deber\u00edan estar configurados y funcionando, de lo contrario, consulte las instrucciones oficiales de [soluci\u00f3n de problemas del administrador de certificados](https://docs.cert-manager.io/en/latest/getting-started/troubleshooting.html).\n\n## Other issues\n\nPor favor [h\u00e1ganos saber](https://github.com/jenkins-x/jx/issues/new) si podemos ayudar? \u00a1Buena suerte!",
            "content/es/docs/managing-jx/tutorials/_index.md": "---\ntitle: \"Tutoriales\"\nlinkTitle: \"Tutoriales\"\nweight: 30\ndescription: >\n  Tutoriales sobre c\u00f3mo configurar Jenkins X\n---\n",
            "content/es/docs/managing-jx/tutorials/google-hosted.md": "---\ntitle: Tutoriales Google Cloud Alojado\nlinktitle: Tutoriales Google Cloud\ndescription: Tutoriales con Google Kubernetes Engine y Cloud Shell\nweight: 10\n---\n\nEstos tutoriales se pueden utilizar con [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/) utilizando su funci\u00f3n [Google Cloud Shell](https://cloud.google.com/shell/docs/) para ayudarte a ponerte en marcha r\u00e1pidamente.\n\n### Instalando JX en GKE\n\n**Tiempo de duraci\u00f3n.** Aproximadamente 25 minutos\n\nAl finalizar esta gu\u00eda deber\u00e1s tener:\n\n* una instalaci\u00f3n de JX funcionando en Google Kubernetes Engine\n* creada una aplciaci\u00f3n de inicio r\u00e1pido\n* promovida esta aplicaci\u00f3n a producci\u00f3n\n\n\n[<svg height=\"54\" width=\"274\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.2\">\n  <g\n     transform=\"translate(0,-6)\"\n     id=\"layer1\">\n    <rect\n       width=\"266.465\"\n       height=\"50.53175\"\n       ry=\"4.6644692\"\n       x=\"1.7675018\"\n       y=\"7.7341251\"\n       id=\"rect3101\"\n       style=\"fill:#3367d6;fill-opacity:1\" />\n  </g>\n  <g\n     id=\"layer2\">\n    <text\n       x=\"52.473\"\n       y=\"31.976562\"\n       id=\"text4303\"\n       xml:space=\"preserve\"\n       style=\"font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none\">ABRIR EN GOOGLE CLOUD SHELL</text>\n    <g\n       transform=\"matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)\"\n       id=\"g3949\"\n       style=\"fill:#ffffff\">\n      <path\n         d=\"M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z\"\n         id=\"path3937\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 10,17.8 h 4 V 20 h -4 z\"\n         id=\"path3939\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 8,20 h 8 v 2 H 8 z\"\n         id=\"path3941\"\n         style=\"fill:#ffffff\" />\n    </g>\n  </g>\n</svg>](https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&page=editor&print=install-guide.txt&tutorial=tutorials%2Finstall-jx-on-gke%2Flesson.md)\n\n### Instalar JX en GKE utilizando Terraform\n\n**Tiempo de duraci\u00f3n.** Aproximadamente 30 minutos\n\nAl finalizar esta gu\u00eda deber\u00e1s tener:\n\n* una instalaci\u00f3n de JX funcionando en Google Kubernetes Engine utilizando Terraform\n* creada una aplciaci\u00f3n de inicio r\u00e1pido\n* promovida esta aplicaci\u00f3n a producci\u00f3n utilizando prow\n\n[<svg height=\"54\" width=\"274\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   version=\"1.2\">\n  <g\n     transform=\"translate(0,-6)\"\n     id=\"layer1\">\n    <rect\n       width=\"266.465\"\n       height=\"50.53175\"\n       ry=\"4.6644692\"\n       x=\"1.7675018\"\n       y=\"7.7341251\"\n       id=\"rect3101\"\n       style=\"fill:#3367d6;fill-opacity:1\" />\n  </g>\n  <g\n     id=\"layer2\">\n    <text\n       x=\"52.473\"\n       y=\"31.976562\"\n       id=\"text4303\"\n       xml:space=\"preserve\"\n       style=\"font-size:13px;font-style:normal;font-weight:normal;line-height:100%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Roboto, Sans;user-select: none\">ABRIR EN GOOGLE CLOUD SHELL</text>\n    <g\n       transform=\"matrix(1.1349981,0,0,1.1349981,16.464659,15.380023)\"\n       id=\"g3949\"\n       style=\"fill:#ffffff\">\n      <path\n         d=\"M 21,2 H 3 C 1.9,2 1,2.9 1,4 v 11.9 c 0,1.1 0.9,2 2,2 h 7 V 20 H 8 v 2 h 8 v -2 h -2 v -2.2 h 7 c 1.1,0 2,-0.9 2,-2 V 4 C 23,2.9 22.1,2 21,2 z m -4,13 h -4 v -2 h 4 v 2 z m 0.1,-4.8 -9.9,4.1 v -2.1 l 7.2,-3.1 -7.2,-3 v -2 l 9.9,4.1 v 2 z\"\n         id=\"path3937\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 10,17.8 h 4 V 20 h -4 z\"\n         id=\"path3939\"\n         style=\"fill:#ffffff\" />\n      <path\n         d=\"m 8,20 h 8 v 2 H 8 z\"\n         id=\"path3941\"\n         style=\"fill:#ffffff\" />\n    </g>\n  </g>\n</svg>](https://console.cloud.google.com/cloudshell/open?git_repo=https%3A%2F%2Fgithub.com%2Fjenkins-x%2Fjx-tutorial&page=editor&print=install-guide.txt&tutorial=tutorials%2Finstall-jx-on-gke-with-terraform%2Flesson.md)",
            "content/es/docs/overview/_index.md": "---\ntitle: \"Resumen\"\nlinkTitle: \"Resumen\"\nweight: 1\ndescription: >\n  \u00bfQu\u00e9 es Jenkins X?\n---\n\nPara comprender **las complejidades y el funcionamiento interno** de Jenkins X, necesitamos entender Kubernetes. Pero no se necesita comprender Kubernetes para **utilizar Jenkins X**. Esta es una de las principales contribuciones del proyecto. Jenkins X nos permite aprovechar el poder de Kubernetes sin tener que pasar una eternidad aprendiendo la lista, cada vez mayor, de las cosas que hace. Jenkins X nos ayuda al simplificar procesos complejos en conceptos que pueden adoptarse r\u00e1pidamente y sin pasar meses tratando de descubrir \"la forma correcta de hacer las cosas\". Ayuda al eliminar y simplificar algunos de los problemas causados por la complejidad general de Kubernetes y su ecosistema Si realmente eres un ninja de Kubernetes, apreciar\u00e1s todo el esfuerzo puesto en Jenkins X. Si no lo eres, podr\u00e1s saltar y aprovechar el poder de Kubernetes sin arrancarte el pelo de la frustraci\u00f3n causada por la complejidad de Kubernetes.\n\nDejar\u00e9 de decirte que Kubernetes es un orquestador de contenedores, c\u00f3mo gestiona nuestros despliegues y c\u00f3mo se apoder\u00f3 del mundo por la tormenta. Espero que ya sepas todo eso. En cambio, definir\u00e9 a Kubernetes como una plataforma para gobernarlos a todos. Hoy, la mayor\u00eda de los proveedores de software est\u00e1n construyendo su pr\u00f3xima generaci\u00f3n de software para que sea nativa de Kubernetes o, al menos, para que funcione mejor dentro de ella. Est\u00e1 surgiendo todo un ecosistema y trata a Kubernetes como un lienzo en blanco. Como resultado, diariamente se agregan nuevas herramientas, y cada vez es m\u00e1s evidente que Kubernetes ofrece posibilidades casi ilimitadas. Sin embargo, con eso viene una mayor complejidad. Es m\u00e1s dif\u00edcil que nunca elegir qu\u00e9 herramientas usar. \u00bfC\u00f3mo vamos a desarrollar nuestras aplicaciones? \u00bfC\u00f3mo vamos a gestionar diferentes entornos? \u00bfC\u00f3mo vamos a empaquetar nuestras aplicaciones? \u00bfQu\u00e9 proceso vamos a aplicar para los ciclos de vida de la aplicaci\u00f3n? Y as\u00ed sucesivamente y as\u00ed sucesivamente. Ensamblar un cl\u00faster de Kubernetes con todas las herramientas y procesos lleva tiempo, y aprender a usar lo que ensamblamos parece una historia interminable. Jenkins X tiene como objetivo eliminar esos y otros obst\u00e1culos.\n\nJenkins X est\u00e1 basado en el criterio de expertos. Define muchos aspectos del ciclo de vida del desarrollo de software y toma decisiones por nosotros. Nos dice qu\u00e9 hacer y c\u00f3mo. Es como un gu\u00eda tur\u00edstico en tus vacaciones que te muestra a d\u00f3nde ir, qu\u00e9 mirar, cu\u00e1ndo tomar una foto y cu\u00e1ndo es el momento de tomar un descanso. Al mismo tiempo, es flexible y permite a los usuarios avanzados ajustarlo para satisfacer sus propias necesidades.\n\nEl verdadero poder detr\u00e1s de Jenkins X es el proceso, la selecci\u00f3n de herramientas y el pegamento que envuelve todo en una unidad cohesiva que es f\u00e1cil de aprender y usar. Nosotros (las personas que trabajan en la industria del software) tendemos a reinventar la rueda todo el tiempo. Pasamos innumerables horas tratando de descubrir c\u00f3mo desarrollar nuestras aplicaciones m\u00e1s r\u00e1pido y c\u00f3mo tener un entorno local lo m\u00e1s cercano posible a la producci\u00f3n. Dedicamos tiempo a la b\u00fasqueda de herramientas que nos permitan empaquetar e implementar nuestras aplicaciones de manera m\u00e1s eficiente. Dise\u00f1amos los pasos que forman un flujo o canal de entrega continua. Escribimos scripts (conjunto de instrucciones) que automatizan tareas repetitivas. Y, sin embargo, no podemos escapar de la sensaci\u00f3n de que probablemente estemos reinventando cosas que ya fueron hechas por otros. Jenkins X est\u00e1 dise\u00f1ado para ayudarnos con esas decisiones, y nos ayuda a elegir las herramientas adecuadas para un trabajo. Es una colecci\u00f3n de las mejores pr\u00e1cticas de la industria. En algunos casos, Jenkins X es el que define esas pr\u00e1cticas mientras que en otros, nos ayuda a adoptar las realizadas por otros.\n\nSi estamos a punto de comenzar a trabajar en un nuevo proyecto, Jenkins X crear\u00e1 la estructura y los archivos necesarios. Si necesitamos un cl\u00faster de Kubernetes con todas las herramientas seleccionadas, instaladas y configuradas, Jenkins X lo har\u00e1. Si necesitamos crear repositorios Git, establecer webhooks y crear flujos o canales de entrega continua, todo lo que tenemos que hacer es ejecutar un solo comando `jx`. La lista de lo que hace Jenkins X es vasta y crece todos los d\u00edas.\n\nNo entrar\u00e9 en detalles de todo lo que hace Jenkins X. Eso vendr\u00e1 despu\u00e9s. Por ahora, espero llamar tu atenci\u00f3n. Lo m\u00e1s importante a tener en cuenta es que debe despejar su mente de cualquier experiencia de Jenkins que ya tenga. Claro, Jenkins est\u00e1 all\u00ed, pero es solo una parte del paquete. Jenkins X es muy diferente del \"Jenkins tradicional\". Las diferencias son tan grandes que la \u00fanica forma de que lo aceptes es olvidarte de lo que sabes sobre Jenkins y empezar de cero.",
            "content/es/docs/overview/faq.md": "---\ntitle: Preguntas Generales\nlinktitle: Preguntas Generales\ndescription: Preguntas generales acerca del proyecto Jenkins X\nweight: 20\n---\n\nHemos tratado de recopilar problemas comunes aqu\u00ed con soluciones alternativas. Si su problema no figura aqu\u00ed, [h\u00e1ganoslo saber](https://github.com/jenkins-x/jx/issues/new).\n\n## \u00bfEs Jenkins X un proyecto de c\u00f3digo abierto?\n\n\u00a1Si! Todo el c\u00f3digo fuente y los artefactos de Jenkins X son de c\u00f3digo abierto; \u00a1Apache o MIT y siempre lo ser\u00e1n!\n\n## \u00bfC\u00f3mo se compara Jenkins X con Jenkins?\n\nJenkins X proporciona [flujos automatizados CI/CD](/es/about/concepts/features/#pipelines-automatizados) para aplicaciones en Kubernetes con [promoci\u00f3n GitOps a trav\u00e9s de entornos](/es/about/concepts/features/#promoci\u00f3n) y [vista previa de entornos en PR](/es/about/concepts/features/#entornos-de-vista-previa). (Vea [las funcionalidades para m\u00e1s detalles](/es/about/concepts/features/)).\n\nJenkins es un servidor de CI/CD de prop\u00f3sito general que se puede configurar para hacer lo que desee agregando complementos (plugins), cambiando la configuraci\u00f3n y escribiendo sus propios flujos de actividades (pipelines).\n\nEn Jenkins X, solamente con la [instalaci\u00f3n de Jenkins X](/es/docs/getting-started/) se configuran autom\u00e1ticamente un grupo de herramientas como Helm, registro de docker, Nexus, etc. Luego puede [crear](/docs/resources/guides/using-jx/common-tasks/create-spring/) / [importar](/docs/resources/guides/using-jx/creating/import/) proyectos y obtendr\u00e1 el flujo CI/CD completamente automatizado junto con las vistas previas. Esto permitir\u00e1 que sus desarrolladores se concentren en crear aplicaciones mientras usted delega en Jenkins X la administraci\u00f3n de su CI+CD.\n\nJenkins X admite diferentes motores de ejecuci\u00f3n; puede orquestar un servidor Jenkins por equipo reutilizando Jenkins en un contenedor docker. Sin embargo, cuando utilizamos los [Pipelines de Jenkins X sin servidor](/es/about/concepts/jenkins-x-pipelines/), utilizamos [Tekton](https://tekton.dev/) en lugar de Jenkins como motor de los flujos CI/CD para proporcionar una arquitectura nativa en la nube, moderna y de alta disponibilidad.\n\n## \u00bfEs Jenkins X una bifurcaci\u00f3n de Jenkins?\n\n\u00a1No! Jenkins X puede orquestar el servidor Jenkins reutiliz\u00e1ndolo dentro de un contenedor y configur\u00e1ndolo para que sea lo m\u00e1s nativo posible.\n\nSin embargo, cuando utilizamos los [Pipelines de Jenkins X sin servidor (serverless)](/es/about/concepts/jenkins-x-pipelines/), utilizamos [Tekton](https://tekton.dev/) en lugar de Jenkins como el motor de CI/CD para proporcionar una arquitectura nativa en la nube, moderna y de alta disponibilidad.\n\n## \u00bfPor qu\u00e9 crear un subproyecto?\n\nSomos grandes admiradores de [Kubernetes](https://kubernetes.io/) y de la nube. Creemos que es el enfoque futuro a largo plazo para ejecutar software para muchas personas.\n\nSin embargo, mucha gente todav\u00eda querr\u00e1 ejecutar Jenkins de la manera regular de jenkins a trav\u00e9s de: `java -jar jenkins.war`\n\nEntonces, la idea del subproyecto Jenkins X es centrarse al 100% en el caso de uso de Kubernetes y Cloud Native y dejar que el proyecto principal de Jenkins se enfoque en el enfoque cl\u00e1sico de Java.\n\nUna de las grandes fortalezas de Jenkins siempre ha sido su flexibilidad y su enorme ecosistema de diferentes\ncomplementos y capacidades. El subproyecto Jenkins X por separado ayuda a la comunidad a iterar e ir r\u00e1pido\nmejorando tanto el Cloud Native como las distribuciones cl\u00e1sicas de Jenkins en paralelo.",
            "content/es/docs/reference/_index.md": "---\ntitle: \"Referencia\"\nlinkTitle: \"Referencia\"\nweight: 6\ndescription: >\n  Documentos de referencia para Jenkins X.\n---",
            "content/es/docs/reference/components/_index.md": "---\ntitle: \"Componentes en Jenkins X\"\nlinkTitle: \"Componentes\"\nweight: 5\ndescription: >\n  De qu\u00e9 est\u00e1 hecho Jenkins X.\n---\n",
            "content/es/docs/reference/components/build-packs.md": "---\ntitle: Paquetes de Compilaci\u00f3n\nlinktitle: Paquetes de Compilaci\u00f3n\ndescription: Convertir el c\u00f3digo fuente en aplicaciones en Kubernetes\nweight: 30\n---\n\nUsamos paquetes de compilaci\u00f3n de estilo [draft](https://draft.sh/) para diferentes lenguajes, tiempos de ejecuci\u00f3n y herramientas de compilaci\u00f3n para agregar los archivos de configuraci\u00f3n necesarios a los proyectos a medida que los [importamos](/docs/resources/guides/using-jx/creating/import/) o los [creamos](/docs/resources/guides/using-jx/common-tasks/create-spring/) para que podamos compilarlos e desplegarlos en Kubernetes.\n\nLos paquetes de compilaci\u00f3n se utilizan para predeterminar los siguientes archivos si a\u00fan no existen en el proyecto que se est\u00e1 creando/importando:\n\n* `Dockerfile` para convertir el c\u00f3digo en una imagen de docker para ejecutarla en Kubernetes\n* `Jenkinsfile` para definir de forma declarativa el pipeline de Jenkins para definir los pasos CI/CD de la aplicaci\u00f3n\n* helm chart en la carpeta `charts` para generar los recursos de Kubernetes para ejecutar la apliaci\u00f3n\n* un _chart de vista previa_ en la carpeta `charts/preview` para definir las dependencias para el despliegue hacia el [entorno de vista previa](/es/about/concepts/features/#entornos-de-vista-previa) en una solicitud de extracci\u00f3n.\n\nLos paquetes de compilaci\u00f3n predeterminados est\u00e1n en [https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) con una carpeta para cada lenguaje o herramienta de compilaci\u00f3n.\n\nLa l\u00ednea de comando `jx` clona los paquetes de compilaci\u00f3n en la carpeta `.~/.jx/draft/packs/` y los actualiza a trav\u00e9s del `git pull` cada vez que intenta crear o importar un proyecto.\n\n## Modelo de extensi\u00f3n Pipeline\n\nComo parte de la transici\u00f3n de [Jenkins hacia ser nativa de la nube](/docs/resources/guides/managing-jx/common-tasks/cloud-native-jenkins/), hemos reestructurado nuestros [paquetes de compilaci\u00f3n](https://github.com/jenkins-x-buildpacks/) para que sean m\u00e1s modulares y m\u00e1s f\u00e1ciles de componer y reutilizar en las cargas de trabajo.\n\nPor ejemplo, el paquete de compilaci\u00f3n [jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) hereda del paquete de compilaci\u00f3n [jenkins-x-classic](https://github.com/jenkins-x-buildpacks/jenkins-x-classic), reutilizando el CI y los pipelines de liberaci\u00f3n, pero luego agregando las cargas de trabajo espec\u00edficas de Kubernetes (por ejemplo, construyendo im\u00e1genes de docker, creando charts de helm, [vista previa de entornos](/es/about/concepts/features/#entornos-de-vista-previa) y [promoci\u00f3n a trav\u00e9s de GitOps](/es/about/concepts/features/#promoci\u00f3n))\n\nPara hacer esto, hemos introducido un nuevo formato de archivo YAML simple para definir pipelines.\n\n## Pipelines\n\nCada fichero Pipeline YAML tiene un n\u00famero de pipelines separados l\u00f3gicamente:\n\n* `release` para procesar las mezclas a la rama `master` que com\u00fanmente crea una nueva versi\u00f3n y liberaci\u00f3n, luego desencadena una promoci\u00f3n\n* `pullRequest` para el procesamiento de las solicitudes de extracci\u00f3n (Pull Requests)\n* `feature` para el procesamiento de las mezclas de las ramas de funcionalidades. Sin embargo, tenga en cuenta que el [libro accelerate](/about/accelerate/) no recomienda las ramas de funcionalidades a largo plazo. En su lugar, considere utilizar el desarrollo basado en troncales, que es una pr\u00e1ctica de equipos de alto rendimiento.\n\n## Ciclos de Vida\n\nLuego, cada pipeline tiene una serie de fases distintas del ciclo de vida, algo as\u00ed como Maven tiene `clean`,` compile`, `compile-test`,` package` etc.\n\nEstas fases de ciclos de vida en Jenkins X Pipeline YAML son:\n\n* `setup`\n* `preBuild`\n* `build`\n* `postBuild`\n* `promote`\n\n## Extensible\n\nUn Pipeline YAML puede extender otro archivo YAML. Puede hacer referencia a un pipeline base YAML a trav\u00e9s de:\n\n* usando `file` para hacer referencia a una ruta de archivo relativa en el mismo paquete de compilaci\u00f3n [como este ejemplo usando `file`](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2)\n* usando `import` para hacer referencia a un archivo YAML que se importa como este [ejemplo usando import](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3) que luego se refiere a un [m\u00f3dulo importado nombrado a trav\u00e9s de git](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/imports.yaml#L2-L4)\n\n## Anteponer pasos\n\nAl igual que las clases en lenguajes como Java, puede anteponer los pasos en un Pipeline YAML desde un Pipeline YAML base. Esto le permite reutilizar los pasos en el ciclo de vida de un pipeline base y luego agregar sus propios pasos adicionales.\n\nPor defecto, todos los pasos que defina se agregan despu\u00e9s de los pasos YAML del pipeline base, [como en este ejemplo](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence/pipeline.yaml#L7).\n\nPuede agregar pasos antes de los pasos del pipeline base utilizando la propiedad `preSteps:` c[omo este ejemplo](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L6).\n\nSi desea reemplazar por completo todos los pasos de un pipeline base para un ciclo de vida particular, puede usar `replace: true` como [en este ejemplo](https://github.com/jenkins-x/jx/blob/0520fe3d9740cbcb1cc9754e173fe7726219f58e/pkg/jx/cmd/test_data/step_buildpack_apply/inheritence2/pipeline.yaml#L11-L14).\n\n## Pipeline de ejemplo\n\nPor ejemplo, para las bibliotecas maven, [usamos este archivo pipeline.yaml](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml) que:\n\n* [extiende](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L1-L2) el [pipeline com\u00fan](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/pipeline.yaml) que configura git y define pasos comunes de compilaci\u00f3n posterior\n* [configura el agente](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L3-L5) en t\u00e9rminos de [plantilla de pod](/docs/resources/guides/managing-jx/common-tasks/pod-templates/) y nombre del contenedor\n* define los pasos para los [build steps](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L7-L11) del pipeline del `pull request`\n* define el [grupo de pasos de versi\u00f3n](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L13-L18) del pipeline de liberaci\u00f3n y los [pasos de compilaci\u00f3n](https://github.com/jenkins-x-buildpacks/jenkins-x-classic/blob/f7027df958eb385d50fec0c0368e606a6d5eb9df/packs/maven/pipeline.yaml#L19-L21)\n\nLuego, el [pipeline de maven kubernetes.yaml](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml) se [extiende](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/45819e05fa197d9069af682fbbcad0af8d8d605a/packs/maven/pipeline.yaml#L2-L3) desde el pipeline cl\u00e1sico para agregar los pasos kubernetes.\n\n# Crear nuevos paquetes de compilaci\u00f3n\n\nNos encantan las [contribuciones](/community/), as\u00ed que considere agregar nuevos paquetes de compilaci\u00f3n y [plantillas de pod](/docs/resources/guides/managing-jx/common-tasks/pod-templates/).\n\nAqu\u00ed hay instrucciones sobre c\u00f3mo crear un nuevo paquete de compilaci\u00f3n. Por favor, si algo no est\u00e1 claro, [\u00fanase a la comunidad y solo pregunte](/community/), aqu\u00ed estamos encantados de ayudar.\n\nEl mejor lugar para comenzar es una aplicaci\u00f3n de _inicio r\u00e1pido_. Un proyecto de muestra que puede usar como prueba. As\u00ed que cree/encuentre un proyecto de ejemplo adecuado y luego [imp\u00f3rtelo](/docs/resources/guides/using-jx/creating/import/).\n\nLuego, agregue manualmente un `Dockerfile` y un `Jenkinsfile` si a\u00fan no ha agregado uno para usted. Puede comenzar con los archivos de las [carpetas del paquete de compilaci\u00f3n actual](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs), utilizando el lenguaje/framework m\u00e1s similar al suyo.\n\nSi su paquete de compilaci\u00f3n est\u00e1 utilizando herramientas de compilaci\u00f3n que a\u00fan no est\u00e1n disponibles en una de las [plantillas de pod](/es/docs/reference/components/pod-templates/) existentes, entonces deber\u00e1 [enviar una nueva plantilla de pod](/es/docs/reference/components/pod-templates/#enviar-nuevas-plantillas-de-pod), probablemente tambi\u00e9n utilizando una nueva imagen del contenedor de compilaci\u00f3n.\n\nUna vez que tenga una plantilla de pod para usar, por ejemplo, `jenkins-foo`, consulte en su `Jenkinsfile`:\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-foo\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('foo') {\n            sh \"foo deploy\"\n          }\n```\nUna vez que su `Jenkinsfile` sea capaz de hacer CI/CD para su lenguage/tiempo de ejecuci\u00f3n en su proyecto de muestra, entonces deber\u00edamos poder tomar el `Dockerfile`, el `Jenkinsfile` y la carpeta de charts y copiarlos en una carpeta en su bifurcaci\u00f3n del [jenkins-x/draft-packs repository](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes).\n\nPuede probarlo localmente agregando estos archivos a su clon local del repositorio de paquetes de compilaci\u00f3n en `~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs`.\n\np.ej.\n\n```sh\nexport PACK=\"foo\"\nmkdir ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\ncp Dockerfile Jenkinsfile  ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\n\n# the charts will be in some folder charts/somefoo\ncp -r charts/somefoo ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK/charts\n```\n\nUna vez que su paquete de compilaci\u00f3n est\u00e9 en una carpeta en `~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/`, entonces deber\u00eda ser utilizable por el comando [jx import](/commands/jx_import/) que utiliza la detecci\u00f3n del lenguaje de programaci\u00f3n para encontrar el paquete de compilaci\u00f3n m\u00e1s adecuado para usar al importar un proyecto. Si su paquete de compilaci\u00f3n requiere una l\u00f3gica personalizada para detectarlo, av\u00edsenos y podemos ayudarlo agregando un parche en el comando [jx import](/commands/jx_import/) para que funcione mejor para su paquete de compilaci\u00f3n. Por ejemplo, tenemos una l\u00f3gica personalizada para [manejar mejor a Maven y Gradle](https://github.com/jenkins-x/jx/blob/712d9edf5e55aafaadfb3e0ac57692bb44634b1c/pkg/jx/cmd/common_buildpacks.go#L82:L108).\n\nSi necesitas m\u00e1s ayuda [\u00fanete a la comunidad](/community/).",
            "content/es/docs/reference/components/cloud-native-jenkins.md": "---\ntitle: Jenkins Nativo de la Nube\nlinktitle: Jenkins Nativo de la Nube\ndescription: Hagamos que Jenkins sea nativo de la nube\nweight: 31\n---\n\nJenkins X ayuda a admitir _Jenkins nativo en la nube_ a trav\u00e9s de:\n\n* orquestando tanto [Jenkins sin servidor](/news/serverless-jenkins/) con [prow](/architecture/prow/) como Jenkins Est\u00e1tico con maestros por equipo. Esto permite que los equipos se muevan hacia un sistema sin servidor mientras que tambi\u00e9n traen maestros est\u00e1ticos.\n* cada equipo puede instalar su propio Jenkins X en su propio namespace (a trav\u00e9s de `jx install --namespace myteam`)\n* soporte para diferentes cargas de trabajo por equipo (ver [jx edit buildpack](/commands/jx_edit_buildpack/)).\n\n\n## Diferentes cargas de trabajo\n\nAlgunos equipos desarrollan aplicaciones nativas en la nube en Kubernetes y, por lo tanto, deber\u00edan usar la opci\u00f3n `kubernetes workloads`.\n\nPara los equipos que no implementan aplicaciones en Kubernetes, como la entrega de bibliotecas o binarios, hay una nueva opci\u00f3n de `carga de trabajo de biblioteca` que tiene CI y versiones automatizadas pero no CD.\n\nCuando [crea un cl\u00faster](/es/docs/getting-started/setup/create-cluster/) o [instala Jenkins X](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/), se le solicita que elija entre los paquetes de construcci\u00f3n disponibles.\n\n```sh\n? Pick workload build pack:   [Use arrows to move, type to filter]\n> Kubernetes Workloads: Automated CI+CD with GitOps Promotion\n  Library Workloads: CI+Release but no CD\n```\n\nPuede cambiar esta configuraci\u00f3n en cualquier momento a trav\u00e9s de [jx edit buildpack](/commands/jx_edit_buildpack/).\n\nPor defecto, simplemente presione enter para apegarse a la opci\u00f3n de cargas de trabajo de Kubernetes. Sin embargo, si tiene un n\u00famero significativo de bibliotecas que desea administrar, puede configurar un equipo separado para esto e importar sus diversos proyectos de biblioteca all\u00ed.\n\n## Cargas de trabajo actuales\n\nAlmacenamos nuestros paquetes de construcci\u00f3n en la organizaci\u00f3n [jenkins-x-buildpacks](https://github.com/jenkins-x-buildpacks/) en GitHub. Actualmente apoyamos:\n\n* el paquete de construcci\u00f3n [jenkins-x-classic](https://github.com/jenkins-x-buildpacks/jenkins-x-classic) es compatible con las versiones CI+Release, pero no incluye el CD. p.ej. hacer CI y liberar sus bibliotecas Java o m\u00f3dulos de Nodo pero no desplegarlas en Kubernetes.\n* el paquete de construcci\u00f3n [jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) admite el CI+CD automatizado con la promoci\u00f3n GitOps y entornos de vista previa para `cargas de trabajo de Kubernetes`.\n\nSin embargo, deber\u00eda poder extender cualquiera de estos paquetes de construcci\u00f3n para agregar plataformas y capacidades alternativas.\n\n## Escribiendo su propio paquete de construcci\u00f3n\n\nQueremos que [extienda Jenkins X](/docs/contributing/addons/), as\u00ed que consulte la documentaci\u00f3n sobre [c\u00f3mo crear sus propios paquetes de construcci\u00f3n]/docs/resources/guides/managing-jx/common-tasks/build-packs/#creating-new-build-packs).",
            "content/es/docs/reference/components/custom-jenkins.md": "---\ntitle: Servidores de Jenkins Personalizados\nlinktitle: Servidores de Jenkins Personalizados\ndescription: \u00bfC\u00f3mo trabajar con Servidores de Jenkins Personalizados en Jenkins X?\nweight: 70\n---\n\nJenkins X proporciona CI/CD automatizado para las bibliotecas y microservicios que desee implementar en Kubernetes, pero \u00bfqu\u00e9 pasa con esas otros pipelines basadas en `Jenkinsfile` que ya ha creado en un servidor Jenkins personalizado?\n\nJenkins X ahora tiene una [aplicaci\u00f3n Jenkins](https://github.com/jenkins-x-apps/jx-app-jenkins) que facilita agregar uno o m\u00e1s servidores Jenkins personalizados a su equipo y utilizar el servidor Jenkins personalizado para implementar cualquier pipeline personalizado que haya desarrollado.\n\n**NOTA** la aplicaci\u00f3n Jenkins est\u00e1 dise\u00f1ada solo para ejecutar pipelines personalizadas de `Jenkinsfile` que haya desarrollado a mano; no es un motor de ejecuci\u00f3n para los pipelines automatizadas de CI/CD en Jenkins X para cargas de trabajo de Kubernetes; para eso realmente recomendamos los [pipelines de Jenkins X sin servidor](/es/about/concepts/jenkins-x-pipelines/), pero tambi\u00e9n puede usar un servidor Jenkins est\u00e1tico incorporado.\n\n## \u00bfPor qu\u00e9 Jenkins personalizado?\n\nEsta aplicaci\u00f3n le permite mantener su inversi\u00f3n en sus pipelines de Jenkins existentes, invoc\u00e1ndolas en un Servidor Jenkins personalizado de su propia elecci\u00f3n y configuraci\u00f3n mientras comienza a usar m\u00e1s CI/CD automatizado en Jenkins X para nuevas bibliotecas y microservicios utilizando [Pipelines de Jenkins sin servidor X](/about/concepts/jenkins-x-pipelines/) o el servidor est\u00e1tico incorporado de Jenkins en Jenkins X.\n\nLuego puede mezclar y combinar entre el CI/CD automatizado en Jenkins X y sus pipelines personalizadas de Jenkins, \u00a1todo bien organizado junto con Jenkins X!\n\n## Instalar un Jenkins personalizado\n\nPara instalar el servidor de Jenkins personalizado debe ejecutar el siguiente comando:\n\n```sh\njx add app jenkins\n```\n\nEsto instalar\u00e1 un nuevo servidor Jenkins en su equipo actual. Entonces deber\u00eda aparecer a trav\u00e9s de ...\n\n```sh\njx open\n```\n\nEsto tambi\u00e9n crear\u00e1 un token API autom\u00e1ticamente para que la CLI `jx` pueda consultar o iniciar pipelines en el servidor Jenkins personalizado. Puede tomar un minuto m\u00e1s o menos para completar el trabajo de configuraci\u00f3n.\n\n## Obtener el nombre de usuario/contrase\u00f1a\n\nDesafortunadamente, hay una limitaci\u00f3n en la aplicaci\u00f3n Jenkins actual de que no le solicita la contrase\u00f1a cuando agrega la aplicaci\u00f3n Jenkins.\n\nEntonces, para encontrar la contrase\u00f1a, tendr\u00e1 que encontrarla a mano, me temo.\n\n* descargar [ksd](https://github.com/mfuentesg/ksd) y adicionarlo a su $PATH\n* escriba lo siguiente (debe necesitar cambiar el nombre del `Secret` si utiliza un alias diferente en su servidor Jenkins):\n\n```sh\nkubectl get secret jx-jx-app-jenkins -o yaml | ksd\n```\n\nLuego podr\u00e1 ver su usuario/contrase\u00f1a en la pantalla si lo desea para para registrase en la interfaz de Jenkins a trav\u00e9s del comando [jx console](/commands/deprecation/).\n\n## Usando el Jenkins personalizado\n\nEl comando `jx` que funciona con servidores Jenkins puede funcionar directamente con su nuevo servidor Jenkins personalizado; aunque debe especificar que desea interactuar con un servidor Jenkins personalizado en lugar del motor de ejecuci\u00f3n incorporado en Jenkins X (p.ej, [Pipelines de Jenkins X sin servidor](/about/concepts/jenkins-x-pipelines/) o el servidor Jenkins incorporado dentro de Jenkins X)\n\nSi solo tiene una aplicaci\u00f3n Jenkins personalizada en su equipo, puede usar `-m` para especificar que desea trabajar con un servidor Jenkins personalizado. De lo contrario, puede especificar `-n myjenkinsname`.\n\n```sh\n# view the pipelines\njx get pipeline -m\n\n# view the log of a pipeline\njx get build log -m\n\n# view the Jenkins console\njx console -m\n\n#\u00a0lets start a pipeline in the custom jenkins\njx start pipeline -m\n```\n\n## Administrar servidores Jenkins personalizados a trav\u00e9s de GitOps\n\nHemos dise\u00f1ado la aplicaci\u00f3n Jenkins para Jenkins X utilizando el [framework de extensi\u00f3n de la aplicaci\u00f3n](/docs/contributing/addons/), lo que significa que puede administrar sus servidores Jenkins personalizados a trav\u00e9s de [GitOps](/docs/resources/guides/managing-jx/common-tasks/manage-via-gitops/), manteniendo todas las aplicaciones, su versi\u00f3n y configuraci\u00f3n en git y utilizando las herramientas Jenkins X para agregar/actualizar/configurar/eliminar sus aplicaciones.",
            "content/es/docs/reference/components/custom-resources.md": "---\ntitle: Recursos Personalizados\nlinktitle: Recursos Personalizados\ndescription: Recursos Personalizados definidos para Jenkins X\nparent: \"components\"\nweight: 10\n---\n\nKubernetes proporciona un mecanismo de extensi\u00f3n llamado [Recursos Personalizados](https://kubernetes.io/docs/concepts/api-extension/custom-resources/) que permite que los microservicios extiendan la plataforma Kubernetes para resolver problemas de orden superior.\n\nEntonces, en Jenkins X, hemos agregado una serie de Recursos Personalizados para ayudar a ampliar Kubernetes para admitir CI/CD.\n\nTambi\u00e9n puede [navegar por la Referencia de API de Recursos Personalizados](/apidocs/).\n\n## Environments\n\nJenkins X admite de forma nativa los [entornos](/es/about/concepts/features/#entornos) que le permiten ser definidos para su equipo y luego consultarlos a trav\u00e9s de [jx get environments](/commands/jx_get_environments/).\n\n```sh\njx get environments\n```\n\nDurante el funcionamiento de ese comando se utiliza el recurso personalizado de Kubernetes `Environments`.\n\nPor lo tanto, tambi\u00e9n puede consultar los entornos a trav\u00e9s de [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/):\n\n```sh\nkubectl get environments\n```\n\nO editarlos v\u00eda `YAML` directamente si lo desea:\n\n```sh\nkubectl edit env staging\n```\n\naunque puede preferir el comando [jx edit environment](/commands/jx_edit_environment/), que es m\u00e1s f\u00e1cil.\n\n## Release\n\nLos pipelines de Jenkins X generan el recurso personalizado `Release` que podemos utilizar para realizar un seguimiento de:\n\n* qu\u00e9 versi\u00f3n, etiqueta Git y URL Git se asignan a una versi\u00f3n en Kubernetes/Helm\n* qu\u00e9 URL y registro pipeline de Jenkins se usaron para realizar el lanzamiento\n* qu\u00e9 compromisos, problemas y PR formaron parte de cada lanzamiento para que podamos implementar los [comentarios a medida que los problemas se solucionan en Staging/Production](/es/about/concepts/features/#retroalimentaci\u00f3n)\n\n## SourceRepository\n\nEsto almacena informaci\u00f3n sobre los repositorios de c\u00f3digo fuente que Jenkins X est\u00e1 configurado para construir.\n\nEs creado por `jx import` y `jx create quickstart` y se elimina cada vez que se invoca una `jx delete application`.\n\n## Scheduler\n\nEsto se utiliza para definir una configuraci\u00f3n para uno o m\u00e1s `SourceRepository` y `jx boot` lo usa para generar la configuraci\u00f3n de Prow.\n\nEsto le permite configurar un `Scheduler` predeterminado para un equipo y luego no tiene que tocar su configuraci\u00f3n de Prow en absoluto; Todos los proyectos importados/creados heredar\u00e1n del `Scheduler` predeterminado.\n\nO cuando realiza `jx import` o `jx create quickstart` puede pasar el par\u00e1metro de l\u00ednea de comando `--scheduler` para usar un programador espec\u00edfico.\n\n## PipelineActivity\n\nEste recurso almacena el estado del pipeline en t\u00e9rminos de etapas de pipelines de Jenkins, m\u00e1s la [actividad de promoci\u00f3n](/es/about/concepts/features/#promoci\u00f3n).\n\nEste recurso tambi\u00e9n lo utiliza el comando [jx get activities](/commands/jx_get_activities/).\n\n## Team\n\nEl recurso personalizado `Team` se crea mediante el comando [jx create team](/commands/jx_create_team/) y el controlador `team controller` lo utiliza para observar los nuevos recursos `Team` para luego crear una instalaci\u00f3n de Jenkins X en el namespace del `teams`. Para obtener m\u00e1s informaci\u00f3n sobre los equipos, consulte [la funci\u00f3n del equipo](/es/about/concepts/features/#equipos).\n\n### User\n\nEl recurso personalizado `User` se utiliza para admitir RBAC en los distintos [entornos](/es/about/concepts/features/#entornos) y [vistas previas de entornos](/about/concepts/features/#preview-environments) en equipos.\n\nTambi\u00e9n lo utilizan el comando [jx edit userroles](/commands/jx_edit_userroles/) para cambiar los roles de usuario.\n\n## EnvironmentRoleBinding\n\nEl recurso `EnvironmentRoleBinding` es como el recurso est\u00e1ndar de Kubernetes [RoleBinding](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#rolebinding-v1-rbac-authorization-k8s-io), pero permite la asignaci\u00f3n de un rol a m\u00faltiples [entornos](/es/about/concepts/features/#entornos) y [vistas previas de entornos](/about/concepts/features/#preview-environments) en un equipo mediante el uso de un selector de entornos en el que se vinculan roles.\n\nEsto facilita la vinculaci\u00f3n de un `Role` a todos los entornos, a todos los entornos de vista previa o a ambos o a un conjunto determinado de usuarios.",
            "content/es/docs/reference/components/decisions.md": "---\ntitle: Decisiones\nlinktitle: Decisiones\ndescription: Decisiones tomadas por el proyecto Jenkins X\nweight: 20\n---\n\n# Decisiones\n\nJenkins X es una experiencia de desarrollo basada en opiniones de expertos, aqu\u00ed explicaremos los antecedentes y las decisiones que hemos tomado para ayudar a explicar las razones de estas opiniones. Tambi\u00e9n puede consultar la p\u00e1gina [Accelerate](/docs/reference/components/decisions/) para obtener detalles sobre c\u00f3mo Jenkins X implementa las competencias recomendadas por este libro.\n\n## Kubernetes\n\nPrimero es por qu\u00e9 Jenkins X se centra exclusivamente en Kubernetes y solo est\u00e1 destinado a ejecutarse en \u00e9l.\n\nKubernetes ha ganado las guerras de la nube, cada proveedor importante de la nube ahora es compatible con Kubernetes o est\u00e1 trabajando activamente en una soluci\u00f3n de Kubernetes. Google, Microsoft, Amazon, Red Hat, Oracle, IBM, Alibaba, Digital Ocean, Docker, Mesos y Cloud Foundry, por nombrar algunos. Ahora tenemos una plataforma de despliegues hacia donde apuntar y para desarrollar aplicaciones portables de primera clase.\n\nEl ecosistema de Kubernetes es rico en innovaci\u00f3n y con una comunidad vibrante, innovadora y diversa de c\u00f3digo abierto que invita sola, la cual sugiere grandes cosas para todos los involucrados.\n\nJenkins X recomienda usar cl\u00fasteres de Kubernetes administrados en la nube p\u00fablica siempre que sea posible. GKE, AKS y EKS ofrecen servicios gestionados de Kubernetes, lo que reduce dr\u00e1sticamente el riesgo de instalar, actualizar y mantener su cl\u00faster de Kubernetes para que pueda concentrarse en desarrollar un c\u00f3digo incre\u00edble.\n\nes decir, permite que las personas que saben c\u00f3mo ejecutar contenedores y administrar cl\u00fasteres a escala puedan concentrarse en agregar valor a su negocio.\n\n## Draft\n\n[Draft](https://draft.sh) tiene algunas capacidades, pero Jenkins X solo usa la funci\u00f3n de detecci\u00f3n de idioma y la creaci\u00f3n de paquetes. Jenkins X mantiene sus propios [paquetes de draft](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes)  dise\u00f1ados para ejecutarse con Jenkins X.\n\nDraft proporciona una excelente manera de iniciar un proyecto de c\u00f3digo fuente con el paquete necesario para ejecutar la aplicaci\u00f3n en Kubernetes.\n\nEl proyecto Draft vino de Deis, que fue adquirida por Microsoft y contin\u00faa invirtiendo y evolucionando su historia de desarrollador de Kubernetes.\n\n## Helm\n\n[Helm](https://helm.sh) proporciona el paquete de plantillas para ejecutar aplicaciones en Kubernetes. Hemos recibido comentarios mixtos de nuestro uso de Helm. Desde nuestra experiencia, poder crear plantillas y componer m\u00faltiples Helm Charts juntos ha sido un hallazgo muy bien recibido. Esto condujo a nuestro uso de Helm para componer, instalar y actualizar entornos completos y poder anteponer valores f\u00e1cilmente como el n\u00famero de r\u00e9plicas o los l\u00edmites de recursos de aplicaciones por entorno, por ejemplo.\n\nLas plantillas OpenShift ten\u00edan como objetivo hacer algo similar, sin embargo, son espec\u00edficas de OpenShift.\n\nMuchas de las preocupaciones con Helm se est\u00e1n abordando con la actualizaci\u00f3n de la versi\u00f3n principal de Helm 3. Eliminar el uso de Tiller, el componente del lado del servidor de Helm, es una gran victoria, ya que se considera inseguro debido a los permisos elevados que necesita para ejecutarse. Jenkins X [proporciona una forma](/docs/reference/components/helm3/) de usar la versi\u00f3n beta de Helm 3 para las personas que deseen probar esto en su lugar, lo estamos utilizando nosotros mismos y hasta ahora est\u00e1 funcionando muy bien. Si hay problemas, nos gustar\u00eda enviar comentarios al proyecto Helm para que podamos ayudarlos a llegar a GA antes.\n\nEl proyecto Helm vino de Deis, que fue adquirido por Microsoft y contin\u00faa invirtiendo y evolucionando su historia de desarrollador de Kubernetes.\n\n## Skaffold\n\nJenkins X utiliza [Skaffold](https://github.com/GoogleContainerTools/skaffold) para realizar las acciones de construcci\u00f3n y empuje de imagen en un pipeline. Skaffold nos permite implementar diferentes servicios de creaci\u00f3n de im\u00e1genes y de registros como [Google Container Builder](https://cloud.google.com/container-builder/), [Azure Container Builder](https://github.com/Azure/acr-builder) y [ECR](https://aws.amazon.com/ecr/).\n\nPara las personas que no trabajan en una nube p\u00fablica con el generador de contenedores o los servicios de registro, Skaffold tambi\u00e9n puede trabajar con [kaniko](https://github.com/GoogleContainerTools/kaniko), esto permite a los pipelines construir im\u00e1genes de Docker utilizando contenedores sin ra\u00edz. Esto es significativamente m\u00e1s seguro que montar el socket de Docker desde cada nodo en el cl\u00faster.\n\n## Jenkins\n\nJenkins, \u00bfpor qu\u00e9 una gran JVM que no est\u00e1 altamente disponible? Puede parecer una sorpresa \u00e9sta selecci\u00f3n como el motor de pipelines para usar en la nube, sin embargo, la adopci\u00f3n de Jenkins por parte de los desarrolladores y la comunidad que tiene significa que es ideal para usar y evolucionar su propia historia nativa de la nube. Jenkins X ya genera definiciones de recursos personalizados de Kubernetes para actividades en los pipelines que utilizan nuestras las herramientas IDE y CLI en lugar de consultar a Jenkins. Almacenaremos construcciones y ejecuciones de Jenkins en Kubernetes en lugar de en `$JENKINS_HOME`, lo que significa que podemos escalar los maestros de Jenkins. Tambi\u00e9n estamos cambiando a Prow para interceptar eventos de webhook de Git en lugar de utilizar Jenkins, esto significa que podemos tener una soluci\u00f3n altamente disponible, as\u00ed como entregar la programaci\u00f3n de construcciones a Kubernetes.\n\nTL;DR estamos moviendo muchas de las funcionalidades del master de Jenkins a la plataforma Kubernetes.\n\nTomar este enfoque tambi\u00e9n significa que podremos habilitar otros motores de pipelines en el futuro.\n\n## Prow\n\n[Prow](https://github.com/kubernetes/test-infra/tree/master/prow) maneja eventos Git y puede desencadenar flujos de trabajo en Kubernetes.\n\nProw puede ejecutarse en un modo de alta disponibilidad donde existen m\u00faltiples pods para una URL de entrada de webhook. A diferencia de Jenkins, si realiza una actualizaci\u00f3n, Jenkins tiene un tiempo de inactividad en el que se pueden perder los eventos de webhook. Esto est\u00e1 en nuestros planes futuros y esperamos tenerlo disponible pronto.\n\n## Nexus\n\n[Nexus](https://help.sonatype.com/repomanager3) es una JVM con sobrepeso que recientemente se mud\u00f3 a OSGi, sin embargo, hace el trabajo que necesitamos. Dependencias de cach\u00e9 para compilaciones m\u00e1s r\u00e1pidas y proporciona un repositorio compartido donde los equipos pueden compartir sus artefactos liberados.\n\nSi alguien desarrollara un servidor de repositorio de artefactos de c\u00f3digo abierto en un lenguaje m\u00e1s amigable para la nube como Go, entonces Jenkins X probablemente cambiar\u00eda para ahorrar en facturas en la nube.\n\nEn este momento, Jenkins X no utiliza el registro de Docker de Nexus. La raz\u00f3n principal fue que necesit\u00e1bamos hacer un trabajo para configurar las definiciones de pod con secretos de extracci\u00f3n de im\u00e1genes para que podamos utilizar el registro autenticado. Sin embargo, nuestro enfoque recomendado es cambiar al uso de registros de proveedores de nube nativos como [ECR de Amazon](https://aws.amazon.com/ecr/), [Google Container Registry](https://cloud.google.com/container-registry/) o DockerHub, por ejemplo, con la ayuda de Skaffold.\n\n## Docker registry\n\nComo se indic\u00f3 anteriormente, no tenemos la intenci\u00f3n de usar [este registro](https://github.com/kubernetes/charts/tree/master/stable/docker-registry) a largo plazo, ya que preferimos usar registros de proveedores de la nube como [ECR de Amazon](https://aws.amazon.com/ecr/), [Google Container Registry](https://cloud.google.com/container-registry/) o Dockerhub, por ejemplo, con la ayuda de Skaffold.\n\n## ChartMuseum\n\nAl momento de crear Jenkins X, hab\u00eda pocas opciones de c\u00f3mo publicar Helm Charts, la comunidad de Kubernetes usa p\u00e1ginas de GitHub, pero quer\u00edamos encontrar una soluci\u00f3n que funcione para las personas que usan cualquier proveedor de Git. [ChartMuseum](https://github.com/kubernetes-helm/chartmuseum) est\u00e1 escrito en Go, por lo que funciona bien en la nube, admite m\u00faltiples almacenamiento en la nube y funciona muy bien con Monocular.\n\n## Monocular\n\nUsamos [Monocular](https://github.com/kubernetes-helm/monocular) para descubrir las aplicaciones publicadas de nuestros equipos, podr\u00edamos usar KubeApps de forma predeterminada si la comunidad lo prefiere, pero habilitaremos KubeApps como complemento independientemente.\n\n## Git\n\nJenkins X solo trabaja con Git. Hay muchas dependencias e implementaciones de clientes que Jenkins X ya necesita admitir para diferentes proveedores de Git, no escuchamos suficiente demanda para admitir otros sistemas de control de versiones, por lo que por ahora Jenkins X est\u00e1 vinculado a Git.\n\n## Programming languages\n\nJenkins X tiene como objetivo ayudar a proporcionar el nivel adecuado de comentarios para que los desarrolladores entiendan c\u00f3mo funcionan sus aplicaciones y brindarles formas f\u00e1ciles de experimentar con otros lenguajes que puedan adaptarse mejor a la funci\u00f3n y a ejecutarse en la nube. Por ejemplo, hay muchas organizaciones basadas en Java que solo saben c\u00f3mo escribir, ejecutar y mantener aplicaciones Java. Java es extremadamente intensivo en recursos en comparaci\u00f3n con Golang, Rust, Swift, NodeJS, por nombrar algunos, esto genera facturas en la nube mucho m\u00e1s altas cada mes. Con Jenkins X, nuestro objetivo es ayudar a los desarrolladores a experimentar con otras opciones utilizando inicios r\u00e1pidos y complementos de m\u00e9tricas como Grafana y Prometheus para ver c\u00f3mo se comportan en la nube.\n\nPor ejemplo, cualquier microservicio nuevo que creemos en el proyecto Jenkins X tiende a estar en Golang o NodeJS dado el enorme efecto que tiene en nuestra facturaci\u00f3n en la nube. Lleva tiempo cambiar a un nuevo lenguaje de programaci\u00f3n, pero con Jenkins X esperamos poder mitigar un gran riesgo utilizando inicios r\u00e1pidos, CI/CD automatizados y una forma relativamente consistente de trabajar en todos los idiomas.\n\n### Maven\n\nMaven tiene algunas herramientas que mucha gente est\u00e1 acostumbrada a usar y que no se adaptan particularmente bien al CD. Por ejemplo, el [plugin de liberaci\u00f3n de Maven](http://maven.apache.org/maven-release/maven-release-plugin/) versionar\u00e1 un proyecto y se comprometer\u00e1 directamente a dominar la nueva versi\u00f3n SNAPSHOT que en el mundo de CD desencadenar\u00eda otra versi\u00f3n que resultar\u00eda en un bucle recursivo.\n\nPara proyectos Java, Jenkins X usa la versi\u00f3n [maven version:set plugin](https://www.mojohaus.org/versions-maven-plugin/set-mojo.html) para actualizar todos los poms en un proyecto usando la pr\u00f3xima versi\u00f3n de lanzamiento siguiendo el paso #Versioning mencionado anteriormente.\n\nSi se necesita un nuevo incremento de versi\u00f3n mayor o menor, los usuarios pueden crear una nueva etiqueta Git con el nuevo n\u00famero mayor/menor y Jenkins X lo respetar\u00e1. Alternativamente, puede actualizar el padre `pom.xml` y cualquier archivo pom hijo \u00e9l mismo y Jenkins X detectar\u00e1 y usar\u00e1 la nueva versi\u00f3n mayor o menor.",
            "content/es/docs/reference/components/docker-registry.md": "---\ntitle: Registro Docker\nlinktitle: Registro Docker\ndescription: Configure su registro de Docker\nweight: 90\n---\n\nPara poder crear y publicar im\u00e1genes de Docker necesitamos usar un Registro de Docker.\n\nDe forma predeterminada, Jenkins X se entrega con un Registro Docker que se incluye en el namespace del sistema para Jenkins X junto con Jenkins y Nexus. Dado que este registro de Docker se ejecuta dentro de su cl\u00faster de Kubernetes y se usa internamente dentro de su cl\u00faster, es dif\u00edcil exponerlo a trav\u00e9s de HTTPS con certificados autofirmados, por lo que de manera predeterminada usamos registros de Docker inseguros para el rango de IP de IP de servicio en su cl\u00faster de Kubernetes.\n\n## Utilizando un registro de Docker diferente\n\nSi est\u00e1 utilizando la nube p\u00fablica, puede aprovechar el registro de docker de sus proveedores de nube; o reutilice su propio registro de docker existente.\n\n### Si est\u00e1 utilizando un Master de Jenkins Est\u00e1tico\n\nPara especificar el host/puerto Docker Registry, puede usar la consola Jenkins:\n\n```sh\n$ jx console\n```\n\nLuego navegue a `Manage Jenkins -> Configure System` y cambie la variable de entorno `DOCKER_REGISTRY` para apuntar a su registro de docker de elecci\u00f3n.\n\nOtro enfoque es agregar lo siguiente a su archivo `values.yaml` para la personalizaci\u00f3n de los charts de Helm en la plataforma Jenkins X:\n\n```yaml\njenkins:\n  Servers:\n    Global:\n      EnvVars:\n        DOCKER_REGISTRY: \"gcr.io\"\n```\n\n## Actualice el secreto en config.json\n\nVa a necesitar actualizar el valor del secreto de docker almacenado en `config.json`.\n\nPuede logarlo a trav\u00e9s del comando [jx create docker auth](/commands/jx_create_docker/):\n\n```\n$ jx create docker auth --host \"foo.private.docker.registry\" --user \"foo\" --secret \"FooDockerHubToken\" --email \"fakeemail@gmail.com\"\n\n```\n\nSi crea un fichero `config.json` para su proveedor de registro de docker, p.ej para GCR en Google Cloud, seguramente necesitar\u00e1 algo como esto:\n\n```json\n{\n    \"credHelpers\": {\n        \"gcr.io\": \"gcloud\",\n        \"us.gcr.io\": \"gcloud\",\n        \"eu.gcr.io\": \"gcloud\",\n        \"asia.gcr.io\": \"gcloud\",\n        \"staging-k8s.gcr.io\": \"gcloud\"\n    }\n}\n```\n\nPara AWS es como esto:\n\n```json\n{\n\t\"credsStore\": \"ecr-login\"\n}\n```\n\nPara actualizar el secreto `jenkins-docker-cfg` puede hacerlo de la siguiente forma:\n\n```\n$ kubectl delete secret jenkins-docker-cfg\n$ kubectl create secret generic jenkins-docker-cfg --from-file=./config.json\n```\n\n**NOTA** el archivo debe llamarse `config.json` ya que el nombre del archivo se usa en la clave del `secret` subyacente en kubernetes\n\n## Utilizando Docker Hub\n\nSi desea almacenar las im\u00e1genes en DockerHub, entonces debe modificar su fichero `config.json` como se describe a continuaci\u00f3n:\n\n```json\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"MyDockerHubToken\",\n            \"email\": \"myemail@acme.com\"\n        }\n    }\n}\n```\n\n## Utilizando jFrog BinTray (Artifactory)\n\nUtilizar JFrog BinTray como registro privado para docker es posible. Esto ha sido probado solamente durante la creaci\u00f3n del cl\u00faster y pasando el par\u00e1metro `--docker-registry=private-reg.bintray.io`. Luego, despu\u00e9s de creado el cl\u00faster, va a necesitar lo siguiente:\n\n1. Borre el `Secret` existente con el nombre `jenkins-docker-cfg` ejecutando:\n\n```sh\n$ kubectl delete secret jenkins-docker-cfg\n```\n\n1. Cree un fichero local con el nombre `config.json` y su valor debe estar en el siguiente formato (actualice los valores basados en su registro de usuario y FQDN):\n\n```json\n{\n    \"auths\": {\n        \"https://private-reg.bintray.io\": {\n            \"auth\": \"username:password (base64 encoded)\",\n            \"email\": \"myemail@acme.com\"\n        }\n    }\n}\n```\n\n1. Cree el nuevo recurso `Secret` con nombre `jenkins-docker-cfg` con el contenido del fichero `config.json` como lo siguiente:\n\n```sh\n$ kubectl create secret generic jenkins-docker-cfg --from-file=./config.json\n```\n\nCon esto debe ser sufiente, ahora debe poder ejecutar los pipelines y almacenar las im\u00e1genes en registro jFrog BinTray.\n\n### Montar el Secreto para su registro\n\nSu registro docker va a necesitar un Secreto que necesita ser montado en la [Plantilla Pod](/docs/resources/guides/managing-jx/common-tasks/pod-templates/).",
            "content/es/docs/reference/components/git.md": "---\ntitle: Servidores Git\nlinktitle: Servidores Git\ndescription: Trabajando con diferentes servidores Git\nweight: 100\n---\n\nJenkins X usa de manera predeterminada [GitHub](https://github.com/), la soluci\u00f3n gratuita de alojamiento p\u00fablico de Git para proyectos de c\u00f3digo abierto.\n\nSin embargo, al trabajar en la empresa, es posible que desee utilizar diferentes servidores git.\n\n## Configurar servidores Git a trav\u00e9s de boot\n\nRecomendamos encarecidamente que use [boot](/docs/getting-started/setup/boot/) para instalar y configurar Jenkins X.\n\nSi est\u00e1 utilizando boot, utilice [estas instrucciones para configurar Git](/es/docs/getting-started/setup/boot/#git)\n\n## Listar servidores Git\n\nPuede listar los servidores Git configurados a trav\u00e9s del comando [jx get git](/commands/jx_get_git/):\n\n```\njx get git\n```\n{{< alert >}}\n**NOTA:** Todos los proveedores de Git mencionados aqu\u00ed son compatibles si est\u00e1 utilizando Jenkins Static Masters. Sin embargo, si est\u00e1 utilizando **Jenkins X Serverless con Tekton**, solo se admite GitHub. Esto significa que todos los dem\u00e1s proveedores de Git, incluido GitHub Enterprise, no son compatibles actualmente debido a c\u00f3mo Prow se comunica con las API.\n\nSin embargo, estamos integrando [Lighthouse](https://github.com/jenkins-x/lighthouse) para garantizar el soporte para los proveedores de Git listados en esta p\u00e1gina en un entorno Jenkins X Serverless muy pronto.\n{{< /alert >}}\n\n## Utilizar diferentes proveedores Git por entornos\n\nCuando instales Jenkins X, crear\u00e1 repositorios de Git para `Staging` y `Production` usando GitHub.\n\nSi desea utilizar un proveedor de Git diferente para sus entornos, cuando instale Jenkins X agregue el par\u00e1metro `--no-default-environments` en el comando [jx create cluster](/commands/jx_create_cluster/) o [jx install](/commands/deprecation/).\n\np.ej. para [crear un nuevo cl\u00faster](/es/docs/getting-started/setup/create-cluster/).\n\n```sh\n$ jx create cluster gke --no-default-environments\n```\n\no [instalarlo en un cl\u00faster existente](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/)\n\n```sh\n$ jx install --no-default-environments\n```\n\nLuego, una vez que Jenkins X est\u00e9 instalado, puede [agregar un nuevo proveedor git](#agregar-un-nuevo-proveedor-git).\n\nLuego, cuando el proveedor git est\u00e1 configurado, puede verificar que est\u00e9 disponible y que tenga el `gitKind` correcto a trav\u00e9s de:\n\n```sh\n$ jx get git server\n```\n\nAhora cree los entornos `Staging` y `Production` utilizando el proveedor de git que desee a trav\u00e9s de:\n\n```sh\n$ jx create env staging --git-provider-url=https://gitproviderhostname.com\n$ jx create env production --git-provider-url=https://gitproviderhostname.com\n```\n\n## Agregar un nuevo proveedor git\n\nSi ya tiene un servidor git en alg\u00fan lugar, puede agregarlo a Jenkins X a trav\u00e9s de [jx create git server](/commands/jx_create_git_server/):\n\n```sh\njx create git server gitKind someURL\n```\n\nDonde `gitKind` es uno de los tipos de proveedores de git compatibles como `github, gitea, gitlab, bitbucketcloud, bitbucketserver`\n\nPuede verificar qu\u00e9 URL del servidor y los valores `gitKind` se configuran a trav\u00e9s de:\n\n```sh\njx get git server\n```\n**NOTA:** aseg\u00farese de establecer el `gitKind` correcto para su proveedor de git; de lo contrario, se invocar\u00e1 el proveedor de API REST subyacente incorrecto.\n\n## GitHub Enterprise\n\nPara adicionar al servidor GitHub Enterprise intente:\n\n```sh\njx create git server github https://github.foo.com -n GHE\njx create git token -n GHE myusername\n```\n\nDonde `-n` es el nombre del servicio git.\n\n## BitBucket Cloud\n\nPara adicionar BitBucket Cloud intente:\n\n```sh\njx create git server bitbucketcloud -n BitBucket https://bitbucket.org\njx create git token -n BitBucket myusername\n```\n\nPor favor, aseg\u00farece que `gitKind` est\u00e1 correctamente escrito como `bitbucketcloud` a trav\u00e9s del comando:\n\n```sh\njx get git server\n```\n\ny que aparece en la columna `Kind`.\n\n## BitBucket Server\n\nPara adicionar BitBucket Standalone Server intente:\n\n```sh\njx create git server bitbucketserver -n BitBucket https://your_server_address\njx create git token -n BitBucket myusername\n```\n\n## Gitlab\n\nPara adicionar el servidor Gitlab y el token intente:\n\n```sh\njx create git server gitlab https://gitlab.com/ -n gitlab\njx create git token -n gitlab myusername\n```\n\n### Adicionar tokens de usuarios\n\nPara utilizar este servidor git necesitar\u00e1s adicionar el nombre de usuario y el token del API a trav\u00e9s de [jx create git token](/commands/jx_create_git_token/):\n\n```sh\njx create git token -n myProviderName myUserName\n```\n\nSe le preguntar\u00e1 el token del API.\n\n### Proveedores Git hospedado en Kubernetes\n\nPuede instalar proveedores git dentro del cl\u00faster de kubernetes que ejecuta Jenkins X.\n\np.ej. hay un complemento para [gitea](https://gitea.io/en-us/) que le permite instalar `gitea` como parte de su instalaci\u00f3n de Jenkins X.\n\nPara usar [gitea](https://gitea.io/en-us/) con Jenkins X, debe habilitar el complemento `gitea` antes de instalar Jenkins X:\n\n```sh\njx edit addon gitea -e true\n```\n\nPuede ver los complementos habilitados a trav\u00e9s de [jx get addons](/commands/jx_get_addons/):\n\n```sh\njx get addons\n```\n\nAhora, cuando [instales Jenkins X](/docs/getting-started/) tambi\u00e9n instalar\u00e1 el componente `gitea`.\n\nLuego, cada vez que Jenkins X necesite crear un repositorio git para un entorno o para un nuevo proyecto, el servidor gitea aparecer\u00e1 en la lista de selecci\u00f3n.\n\n#### Limitaciones conocidas de gitea\n\nAl momento de escribir, [el plugin de gitea para Jenkins](https://issues.jenkins-ci.org/browse/JENKINS-50459) no actualiza correctamente el PR y los estados de construcci\u00f3n de git commit que rompen los canales de promoci\u00f3n de GitOps. La promoci\u00f3n puede funcionar a trav\u00e9s de la aprobaci\u00f3n manual, pero el pipeline informa un fallo.\n\nOtro problema es que los nuevos proyectos creados por `jx` dentro de `gitea` no habilitan los [botones de combinaci\u00f3n en los PR](https://github.com/go-gitea/go-sdk/issues/100). La soluci\u00f3n es que despu\u00e9s de crear un proyecto en github, vaya a la p\u00e1gina de `Settings` para el repositorio dentro de la consola web de `gitea` y active los botones de mezcla all\u00ed.",
            "content/es/docs/reference/components/helm3.md": "---\ntitle: Helm 3\nlinktitle: Helm 3\ndescription: Usando Helm 3 con Jenkins X\nweight: 110\n---\n\nJenkins X utiliza [Helm](https://www.helm.sh/) para instalar Jenkins X e instalar las aplicaciones que cree en cada uno de los [Entornos](/about/concepts/features/#environments) (como `Staging` y `Production`).\n\n**NOTA** hasta que Helm 3 sea GA recomendamos que las personas utilicen [Helm 2.x sin Tiller](/news/helm-without-tiller/)\n\nActualmente se est\u00e1 desarrollando Helm 3 que tiene una serie de grandes mejoras:\n\n* elimine el componente del lado del servidor, Tiller, para que la `instalaci\u00f3n de Helm` use el RBAC del usuario/ServiceAccount actual\n* las versiones se vuelven conscientes de los namespaces evitando la necesidad de crear nombres de versiones \u00fanicos a nivel global\n\nEn el momento de escribir Helm 3 todav\u00eda est\u00e1 en su desarrollo, pero para mejorar los comentarios, hemos agregado soporte para Helm 2 y Helm 3 en Jenkins X.\n\nPuede usar Helm 2 o Helm 3 para hacer cualquiera de estas cosas:\n\n* instalar Jenkins X\n* instalar sus aplicaciones en los entornos `Staging` y `Production`\n\np.ej. puede utilizar Helm 2 para instalar Jenkins X, luego utilizar Helm 3 para sus entornos `Staging` y `Production`.\n\nVea c\u00f3mo especificar cu\u00e1l versi\u00f3n de Helm utilizar.\n\n## Utilizar helm 3 para instalar Jenkins X\n\nCuando instale Jenkins X a trav\u00e9s de `jx create cluster ...` o `jx install` puede especificar `--helm3` para utilizar helm 3 en vez de helm 2.x.\n\nSi lo instala utilizando helm 2, entonces su equipo por defecto utilizar\u00e1 helm 2 para su liberaciones. Si lo instala utilizando helm 3, entonces su equipo utilizar\u00e1 por defecto la versi\u00f3n 3.\n\nPara cambiar la versi\u00f3n de helm utilizada por su equipo use el comando [jx edit helmbin](/commands/jx_edit_helmbin/):\n\n```\njx edit helmbin helm3\n```\n\no para cambiar a helm 2:\n\n```\njx edit helmbin helm\n```\n\nPuede ver la configuraci\u00f3n actual para su equipo a trav\u00e9s del comando [jx get helmbin](/commands/jx_get_helmbin/):\n\n```\njx get helmbin\n```\n\nB\u00e1sicamente la [plantilla del pod](/docs/resources/guides/managing-jx/common-tasks/pod-templates/) contiene ambos binarios:\n\n* `helm` which is a 2.x distro of helm\n* `helm3` which is a 3.x distro of helm",
            "content/es/docs/reference/components/lighthouse.md": "---\ntitle: Lighthouse\nlinktitle: Lighthouse\ndescription: Ligero webhook y [ChatOps](/es/docs/resources/faq/using/chatops/) para m\u00faltiples proveedores git.\nweight: 41\n---\n\n[Prow](https://github.com/kubernetes/test-infra/tree/master/prow) es una excelente manera de hacer [ChatOps](/es/docs/resources/faq/using/chatops/) con los [Pipelines de Jenkins X](/es/about/concepts/jenkins-x-pipelines/), aunque desafortunadamente solo es compatible con GitHub.com y es bastante pesado y complejo. Para solucionar este problema, hemos creado [Lighthouse](https://github.com/jenkins-x/lighthouse).\n\n[Lighthouse](https://github.com/jenkins-x/lighthouse) es un gestor de webhooks ligero basado en [ChatOps](/es/docs/resources/faq/using/chatops/) que puede activar los [Pipelines de Jenkins X](/es/about/concepts/jenkins-x-pipelines/) en webhooks de m\u00faltiples proveedores de git como: GitHub, GitHub Enterprise, BitBucket Server, BitBucket Cloud, GitLab, Gogs y Gitea.\n\nActualmente, Lighthouse se enfoca en usar [Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) con Tekton, aunque a largo plazo podr\u00eda reutilizarse con Tekton orquestando pipelines de Jenkins a trav\u00e9s de la aplicaci\u00f3n [Custom Jenkins Server](/docs/resources/guides/managing-jx/common-tasks/custom-jenkins/)\n\n## Features\n\nActualmente, Lighthouse admite los [plugins comunes de prow](https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow/plugins) y maneja los webhooks de inserci\u00f3n a las ramas y los webhooks de solicitud de extracci\u00f3n para luego activar los pipelines Jenkins X.\n\nLighthouse utiliza la misma estructura de archivos `config.yaml` and `plugins.yaml` de Prow para que podamos migrar f\u00e1cilmente desde `prow <-> lighthouse`.\n\nEsto tambi\u00e9n significa que podemos reutilizar la limpia generaci\u00f3n de la configuraci\u00f3n de Prow desde los CRD de `SourceRepository`, `SourceRepositoryGroup` y `Scheduler` integrados en [jx boot](/docs/reference/boot/). p.ej. Aqu\u00ed est\u00e1 la [configuraci\u00f3n predeterminada del planificador](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/env/templates/default-scheduler.yaml) que se utiliza para cualquier proyecto importado a su cl\u00faster Jenkins X; sin tener que tocar los archivos de configuraci\u00f3n de Prow. Puede crear muchos planificadores y asociarlos a diferentes recursos de `SourceRepository`.\n\nTambi\u00e9n podemos reutilizar la capacidad de Prow de definir muchos pipelines separados en un repositorio (para PR o versiones) a trav\u00e9s de contextos separados. Luego, en una solicitud de extracci\u00f3n, podemos usar `/test something` o `/test all` para activar los pipelines y usar los comandos `/ok-to-test` y `/approve` o `/lgtm`.\n\n## Using Lighthouse with boot\n\nHemos integrado [lighthouse](https://github.com/jenkins-x/lighthouse) en [jx boot](/docs/reference/boot/). Para cambiar a `lighthouse` desde `prow`, debe agregar algo como esto a su fichero `jx-requirements.yml`:\n\n```yaml\nwebhook: lighthouse\n```\n\nUna vez modificado su fichero `jx-requirements.yml` solo tiene que ejecutar el comando `jx boot`.\n\nSi est\u00e1 utilizando algo m\u00e1s que github.com como su proveedor de git, tambi\u00e9n necesitar\u00e1 un poco m\u00e1s de YAML para configurar el proveedor de git. Aqu\u00ed hay unos ejemplos:\n\n## GitHub Enterprise\n\n```yaml\ncluster:\n  provider: gke\n  zone: europe-west1-c\n  environmentGitOwner: myowner\n  gitKind: github\n  gitName: ghe\n  gitServer: https://my-github.com\nwebhook: lighthouse\n```\n\n## BitBucket Server\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myowner\n  gitKind: bitbucketserver\n  gitName: bs\n  gitServer: https://my-bitbucket-server.com\nwebhook: lighthouse\n```\n\n## GitLab\n\n```yaml\ncluster:\n  provider: gke\n  environmentGitOwner: myowner\n  gitKind: gitlab\n  gitName: gitlab\n  gitServer: https://my-gitlab-server.com\nwebhook: lighthouse\n```\n\n## Comparaciones con Prow\n\nLighthouse es muy parecido a Prow y actualmente reutiliza el c\u00f3digo fuente del complemento Prow y un [mont\u00f3n de plugins de prow](https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow/plugins).\n\nSin embargo, tiene algunas diferencias:\n\n* en lugar de ser un faro espec\u00edfico de GitHub, utiliza [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) para que pueda ser compatible con cualquier proveedor de git\n* lighthouse es principalmente como el servicio `hook` de Prow; un controlador de webhook de escala autom\u00e1tica: para mantener el tama\u00f1o reducido. Esto tambi\u00e9n significa que si algo sale mal manejando webhooks, solo tiene un pod para investigar.\n* lighthouse tambi\u00e9n es muy ligero. En Jenkins X tenemos alrededor de 10 pods relacionados con Prow; con lighthouse tenemos solo 1 junto con el controlador Tekton en s\u00ed. Ese m\u00f3dulo lighthouse tambi\u00e9n podr\u00eda escalarse f\u00e1cilmente de 0 a muchos, ya que se inicia muy r\u00e1pidamente.\n* lighthouse se centra exclusivamente en las tuber\u00edas de Tekton, por lo que no requiere un CRD `ProwJob`; en cambio, un webhook de inserci\u00f3n a una rama de solicitud de liberaci\u00f3n o extracci\u00f3n puede desencadenar cero a muchos CRD de `PipelineRun`.\n\n## Portar comandos de Prow\n\nSi hay alg\u00fan comando de Prow que desee que a\u00fan no hayamos transferido, es relativamente f\u00e1cil portar plugins de Prow.\n\nHemos reutilizado el c\u00f3digo del plugin de Prow y el c\u00f3digo de configuraci\u00f3n; Por lo tanto, se trata principalmente de cambiar las importaciones de `k8s.io/test-infra/prow` a `github.com/jenkins-x/lighthouse/pkg/prow`, y luego modificar las estructuras del cliente github de, por ejemplo, `github.PullRequest` a `scm.PullRequest`.\n\nLa mayor\u00eda de las estructuras de github mapean 1-1 con los equivalentes [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) (por ejemplo, Issue, Commit, PullRequest) aunque la API go-scm tiende a devolver segmentos a los recursos de forma predeterminada. Sin embargo, hay algunas diferencias de nombres en diferentes partes de la API.\n\np.ej. compare la API de `githubClient` para [prow lgtm](https://github.com/kubernetes/test-infra/blob/344024d30165cda6f4691cc178f25b16f1a1f5af/prow/plugins/lgtm/lgtm.go#L134-L150) versus [lighthouse lgtm](https://github.com/jenkins-x/lighthouse/blob/master/pkg/prow/plugins/lgtm/lgtm.go#L135-L150).\n\nTodo el c\u00f3digo relacionado con el plugin Prow vive en el \u00e1rbol de paquetes [pkg/prow](https://github.com/jenkins-x/lighthouse/tree/master/pkg/prow). En general, todo lo que hemos hecho es cambiar a [jenkins-x/go-scm](https://github.com/jenkins-x/go-scm) y cambiar los agentes de Prow actuales y, en su lugar, usar un solo agente Tekton usando [PlumberClient](https://github.com/jenkins-x/lighthouse/blob/master/pkg/plumber/interface.go#L3-L6) para activar los pipelines.\n\n## Variables de entornos\n\nLas siguientes variables de entornos son utilizadas:\n\n| Nombre  |  Descripci\u00f3n |\n| ------------- | ------------- |\n| `GIT_KIND` | el tipo de servidor git: `github, bitbucket, gitea, stash` |\n| `GIT_SERVER` | la URL del servidor si no usa los proveedores p\u00fablicos alojados de Git: https://github.com or https://bitbucket.org https://gitlab.com |\n| `GIT_USER` | el usuario git (bot name) a utilizar en las operacionse de Git |\n| `GIT_TOKEN` | el token de git para realizar las operaciones en el repositorio (agregar comentarios, etiquetas, etc) |\n| `HMAC_TOKEN` | el token enviado desde el proveedor Git en los webhooks |\n| `JX_SERVICE_ACCOUNT` | la cuenta de servicio que se usar\u00e1 para los pipelines generados |",
            "content/es/docs/reference/components/pod-templates.md": "---\ntitle: Plantillas Pod\nlinktitle: Plantillas Pod\ndescription: Pods utilizados para implementar pipelines de Jenkins\nweight: 160\n---\n\nImplementamos pipelines CI/CD utilizando pipelines declarativos de Jenkins a trav\u00e9s del fichero `Jenkinsfile` en el c\u00f3digo de cada aplicaci\u00f3n o entorno de repositorio git.\n\nUtilizamos [plugins de Kubernetes](https://github.com/jenkinsci/kubernetes-plugin) para que Jenkins pueda activar nuevos pods en Kubernetes para cada construcci\u00f3n, lo que nos da un grupo el\u00e1stico de agentes para ejecutar tuber\u00edas gracias a Kubernetes.\n\nEl complemento Kubernetes utiliza plantillas (_pod templates_) para definir el pod utilizado para ejecutar un pipeline de CI/CD que consiste en:\n\n* uno o m\u00e1s contenedores de compilaci\u00f3n para ejecutar comandos dentro (p.ej, sus herramientas de compilaci\u00f3n como `mvn` o `npm` junto con las herramientas que utilizamos para otras partes del pipeline como `git, jx, helm, kubectl`, etc.)\n* vol\u00famenes para persistencia\n* Variables de entorno\n* secretos para que el pipeline pueda escribir en repositorios git, registros de docker, repositorios maven/npm /helm, etc\n\n## Refiri\u00e9ndose a Plantillas de Pod\n\nJenkins X viene con un conjunto predeterminado de plantillas de pod para los lenguajes y tiempos de ejecuci\u00f3n admitidos en nuestros paquetes de compilaci\u00f3n y se denominan algo as\u00ed como: `jenkins-$PACKNAME`.\n\nPor ejemplo, el [paquete de compilaci\u00f3n de Maven](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/) utiliza la plantilla de pod `jenkins-maven`.\n\nLuego podemos referirnos al nombre de la [plantilla de pod en el fichero Jenkinsfile](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/Jenkinsfile#L1-L4) usando la sintaxis del agente `agent { label \"jenkins-$PACKNAME\" }` en el pipeline declarativo. p.ej.\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-maven\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('maven') {\n            sh \"mvn deploy\"\n          }\n          ...\n```\n\n## Enviar nuevas Plantillas de Pod\n\nSi est\u00e1 trabajando en un nuevo [paquete de compilaci\u00f3n](/architecture/build-packs/), nos encantar\u00eda que [env\u00ede](/docs/contributing/) una nueva plantilla de pod y podemos incluirla en la distribuci\u00f3n Jenkins X!\n\nAhora sigue las instrucciones sobre c\u00f3mo hacer esto. Por favor, si algo no est\u00e1 claro, ven [\u00fanete a la comunidad y pregunta](/community/) \u00a1estaremos encantados de ayudarte!\n\nPara enviar un nuevo paquete de compilaci\u00f3n:\n\n* bifurcar el repositorio [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/)\n* agregue su paquete de compilaci\u00f3n al [archivo values.yaml en el repositorio jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/blob/master/jenkins-x-platform/values.yaml) en la secci\u00f3n `jenkins.Agent.PodTemplates` de YAML\n* es posible que desee comenzar copiando/pegando la plantilla de pod existente m\u00e1s similar (por ejemplo, copie `Maven` si est\u00e1 trabajando en un pod de compilaci\u00f3n basado en Java) y simplemente configure el nombre, la etiqueta y la imagen, etc.\n* ahora env\u00ede una solicitud de extracci\u00f3n en el repositorio [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/) para su plantilla de pod\n\n### Construir contenedores\n\nAl usar plantillas de pod y pipeliens de Jenkins, puede usar muchos contenedores diferentes para cada herramienta. p.ej. un contenedor para `maven` y otro para `git`, etc.\n\nHemos encontrado que es mucho m\u00e1s simple tener un solo contenedor de constructor con todas las herramientas comunes en su interior. Esto tambi\u00e9n significa que puede usar `kubectl exec` o (/commands/jx_rsh) para abrir un shell dentro del pod de compilaci\u00f3n y tener todas las herramientas que necesita disponibles para depurar/diagnosticar pipelines con problemas.\n\nPor lo tanto, tenemos una imagen de docker base ([builder-base](https://github.com/jenkins-x/builder-base)) en el generador que contiene [todas las diferentes herramientas](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common#L4-L15) que tendemos a utilizar en los pipelines de CI/CD como `jx, skaffold, helm, git, updatebot`.\n\nSi desea usar una sola imagen de generador para su nueva plantilla de pod, puede usar la base de generador y luego agregar sus herramientas personalizadas en la parte superior.\n\np.ej. [builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven) utiliza un [Dockerfile](https://github.com/jenkins-x/jenkins-x-builders/blob/master/builder-maven/Dockerfile#L1) para hacer referencia al constructor base.\n\nEntonces, lo m\u00e1s simple podr\u00eda ser copiar un constructor similar, como [builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven) y luego editar el `Dockerfile` para agregar las herramientas de compilaci\u00f3n que necesite.\n\nNos encantan las solicitudes de extracci\u00f3n y las [contribuciones](/docs/contributing/), as\u00ed que env\u00ede solicitudes de extracci\u00f3n para nuevos contenedores de compilaci\u00f3n y plantillas de pods, \u00a1y estamos m\u00e1s que felices de [ayudar](/docs/contributing/)!\n\n## Agregar sus propias Plantillas de Pod\n\nPara mantener las cosas Limpias y simples, tendemos a definir plantillas de pod en la configuraci\u00f3n de Jenkins y luego nos referimos al nombre en el `Jenkinsfile`.\n\nHay intentos de facilitar la inserci\u00f3n de definiciones de plantillas de pod dentro de su `Jenkinsfile` si lo necesita; aunque una plantilla de pod tiende a tener muchas cosas espec\u00edficas del entorno de desarrollador dentro, como secretos, por lo que preferir\u00edamos mantener la mayor\u00eda de las plantillas de pod dentro del c\u00f3digo fuente de su entorno de desarrollo en lugar de copiarlas/pegarlas en cada aplicaci\u00f3n.\n\nHoy, la forma m\u00e1s f\u00e1cil de agregar nuevas plantillas de pod es a trav\u00e9s de la consola Jenkins. p.ej.\n\n```sh\n$ jx console\n```\n\nEso abrir\u00e1 la consola de Jenkins. Luego navegue a `Manage Jenkins` (en el men\u00fa de la izquierda) y luego a `Configure System`.\n\nAhora se enfrentar\u00e1 a una gran p\u00e1gina de opciones de configuraci\u00f3n ;) Las plantillas de pod generalmente est\u00e1n en la parte inferior; deber\u00eda ver todas las plantillas de pod actuales para cosas como maven, NodeJS, etc.\n\nPuede editar/agregar/eliminar plantillas de pod en esa p\u00e1gina y presionar Guardar.\n\nSin embargo, tenga en cuenta que a largo plazo esperamos [mantener su entorno de desarrollo a trav\u00e9s de GitOps, como lo hacemos para Staging y Production](https://github.com/jenkins-x/jx/issues/604), lo que significa que los cambios realizados a trav\u00e9s de la interfaz de usuario de Jenkins se perder\u00e1n al [actualizar su entorno de desarrollo](/commands/deprecation/).\n\nA largo plazo, esperamos agregar las plantillas de pod en su archivo `values.yaml` en el repositorio git de su entorno de desarrollador como lo hacemos para el [chart jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431).\n\nSi est\u00e1 creando plantillas de pod utilizando herramientas de compilaci\u00f3n de c\u00f3digo abierto, puede ser m\u00e1s sencillo [enviar su plantilla de pod en una solicitud de extracci\u00f3n](#enviar-nuevas-plantillas-de-pod) y podemos agregar esa plantilla de pod en futuras versiones de Jenkins X.",
            "content/es/docs/reference/components/prow.md": "---\ntitle: Prow\nlinktitle: Prow\ndescription: El sistema CI/CD que Kubernetes usa para construirse\nparent: \"components\"\nweight: 40\n---\n\nProw es un sistema CI/CD basado en Kubernetes. Los trabajos pueden ser activados por varios tipos de eventos e informar su estado a muchos servicios diferentes. Adem\u00e1s de la ejecuci\u00f3n del trabajo, Prow proporciona automatizaci\u00f3n de GitHub en forma de cumplimiento de pol\u00edticas, operaciones de chat a trav\u00e9s de comandos de estilo /foo y mezclas autom\u00e1ticamente las solicitudes de extracci\u00f3n (Pull Request, PR).\n\nProw tiene una arquitectura de microservicio implementada como una colecci\u00f3n de contenedor que se ejecutan como despliegues de Kubernetes.\n\n## hook\n\nHay un [binario llamado hook](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook) que recibe todos los enganches web de GitHub. Es un servidor sin estado que escucha los webhooks de GitHub y los env\u00eda a los plugins apropiados. Los plugins de Hook se usan para activar trabajos, implementar comandos en `slash`, publicar en Slack y m\u00e1s. El enlace binario expone un punto final /hook para recibir las solicitudes de enlace web del servidor Git (b\u00e1sicamente todos los enlaces web van a /hook). Hay una regla de ingreso que expone ese punto final al exterior del cl\u00faster.\n\n## Prow Plugins\n\nEl [binario hook](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/hook) usa diferentes plugins que se pueden habilitar/deshabilitar de forma independiente, para hacer cosas diferentes. B\u00e1sicamente son controladores de eventos para los diferentes eventos de GitHub recibidos a trav\u00e9s de enlaces web. Estos plugins se configuran utilizando una configuraci\u00f3n yaml que se pasa desde un ConfigMap de Kubernetes para establecer el enlace, y se puede habilitar por repositorio u organizaci\u00f3n.\nTodos los plugins tienen la misma interfaz. El proceso de enlace pasa dos objetos a cada plugin es: un cliente del plugin que les permite hablar con k8s, git, GitHub, los archivos de propietarios en git repo, slack, etc., y el evento deserializado de GitHub (como IssueCommentEvent).\n\n### lgtm plugin\n\n[El plugin LGTM](https://github.com/kubernetes/test-infra/tree/master/prow/plugins/lgtm) es un buen ejemplo para comenzar a usar plugins. Es un complemento que agrega la etiqueta LGTM cuando alguien comenta /lgtm en una solicitud de extracci\u00f3n.\n\n### UpdateConfig plugin\n\n[Un plugin que actualiza autom\u00e1ticamente un ConfigMap](https://github.com/kubernetes/test-infra/tree/master/prow/plugins/updateconfig) cada vez que se mezcla un PR en un repositorio. De esta forma, puede mantener actualizados autom\u00e1ticamente sus ConfigMaps, siguiendo un flujo de GitOps.\nPuede asignar archivos espec\u00edficos a ConfigMaps, o incluso usar expresiones regulares.\nNormalmente se usa para actualizar el ConfigMap que contiene la configuraci\u00f3n de Prow, por lo que cada vez que un PR se mezcla con cambios en los archivos que contienen la configuraci\u00f3n de Prow, ConfigMap se actualizar\u00e1 autom\u00e1ticamente.\n\n### Trigger plugin\n\nProbablemente el plugin m\u00e1s importante. Es un plugin que reacciona a los comentarios en los PR, por lo que podemos desencadenar construcciones (escribiendo \"prueba\" como un comentario o cualquier otro desencadenante). Determina qu\u00e9 trabajos ejecutar en funci\u00f3n de la configuraci\u00f3n del trabajo. Cuando encuentra un trabajo que necesita ser activado, crea un [ProwJob CRD](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85), utilizando la configuraci\u00f3n que se encuentra en el enganche del ConfigMap (de esa manera puede crear un objeto [ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85) diferente dependiendo de la organizaci\u00f3n o repositorio, como usar un agente de construcci\u00f3n diferente (Jenkins vs Knative vs pods), el tipo de trabajo, etc. Este CRD contiene algunos campos interesantes:\n\n- agent: para seleccionar qu\u00e9 controlador k8s se encargar\u00e1 de este trabajo\n- refs: Repositorio y revisi\u00f3n de GitHub para usar para el c\u00f3digo fuente\n- type: ya sea env\u00edo previo o posterior al env\u00edo (ejecute el trabajo antes de mezclar o publicar)\n- pod_spec: especificaci\u00f3n para crear un objeto Pod, si usamos [plank](https://github.com/kubernetes/test-infra/tree/master/prow/plank)\n- build_spec: especificaci\u00f3n para crear un [objeto Knative Build](https://github.com/knative/docs/blob/master/build/builds.md), si se est\u00e1 utilizando [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go)\n\nEl ciclo de vida de un [ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/apis/prowjobs/v1/types.go#L85) es gestionado por el controlador de ProwJob que est\u00e1 ejecut\u00e1ndose en el cl\u00faster. Los posibles estados del ProwJob son:\n\n- triggered: el trabajo ha sido creado pero a\u00fan no est\u00e1 programado.\n- pending: el trabajo ha sido programado pero no ejecutado.\n- Success/failure: El trabajo se ha completado.\n- aborted: significa que Prow detuvo el trabajo antes de tiempo (nueva confirmaci\u00f3n empujada, tal vez).\n- error: significa que el trabajo no ha sido programado (tal vez por una mala configuraci\u00f3n).\n\n#### Job Type\n\nEn la configuraci\u00f3n de Prow, puede configurar trabajos de Presubmits y Postsubmits por repositorio que se activan con el plugin de activaci\u00f3n. Los env\u00edos previos (`Presubmits`) se ejecutan cuando el c\u00f3digo PR cambia (abriendo un nuevo PR o enviando c\u00f3digo a la rama del PR), para que pueda probar los cambios en su nuevo c\u00f3digo. Las publicaciones posteriores (`Postsubmits`) se ejecutan cada vez que aparece una nueva confirmaci\u00f3n en una rama de origen (evento push de GitHub).\n\nEl caso de uso para env\u00edos posteriores es donde puede haber menos de 100 mezclas por d\u00eda en un repositorio de gran volumen, pero podr\u00eda haber diez o cien veces m\u00e1s que muchos trabajos de env\u00edo previo ejecutados. Los env\u00edos de correos se pueden usar cuando algo es muy costoso de probar y no necesariamente bloquea la mezcla, pero s\u00ed desea se\u00f1al. Del mismo modo, la forma en que mezcla el sistema es que su verificaci\u00f3n previa al env\u00edo se ejecutar\u00e1 con su c\u00f3digo mezclado en la rama a la que se dirige, por lo que t\u00e9cnicamente el compromiso de mezcla que termina en la rama `master` ya se ha probado de manera efectiva y, a menudo, esto significa que puede desea un trabajo de env\u00edo previo pero no duplicarlo tambi\u00e9n, ya que no le da m\u00e1s se\u00f1al.\n\n### ProwJob controllers\n\nM\u00e1s tarde, podemos usar diferentes operadores de Kubernetes que reaccionan a los objetos ProwJob para ejecutar nuestras construcciones, en funci\u00f3n del campo del agente (cada operador busca ProwJobs con un valor de agente espec\u00edfico):\n\n- [Plank](https://github.com/kubernetes/test-infra/blob/master/prow/plank/controller.go) es uno que utiliza pods de Kubernetes. Usa el campo `pod_spec`.\n- [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go) es un operador de construcci\u00f3n que utiliza Knative Build CRD. Utiliza el campo `build_spec`.\n- There is a [jenkins-operator](https://github.com/kubernetes/test-infra/blob/master/prow/jenkins/controller.go) que se ejecuta en Jenkins. Esto no se recomienda actualmente.\n\nEstos controladores administran [el ciclo de vida de un ProwJob](https://github.com/kubernetes/test-infra/blob/master/prow/life_of_a_prow_job.md).\n\n#### [plank](https://github.com/kubernetes/test-infra/tree/master/prow/plank)\nPlank es un operador de Kubernetes que reacciona a los recursos personalizados de ProwJob. Crea un Pod para ejecutar la compilaci\u00f3n asociada con el objeto ProwJob. El objeto ProwJob en s\u00ed contiene un PodSpec.\n\n- Si ProwJob no tiene un Pod, crea un pod para ejecutar la construcci\u00f3n. Use init-container para hacer la obtenci\u00f3n de VCS.\n- Si ProwJob tiene un Pod con estado completado, marque ProwJob como completado.\n- Si se completa ProwJob, no haga nada.\n\nNosotros utilizamos construcciones Knative en Jenkins X, que utilizan el [controlador prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go), por lo que no tiene que preocuparse por plank.\n\n#### [prow-build](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/build/controller.go)\nOperador de Kubernetes que observa los objetos de ProwJob y reacciona a aquellos cuyo campo de agente es el agente de construcci\u00f3n Knative. Crear\u00e1 [un objeto Knative Build](https://github.com/knative/docs/blob/master/build/builds.md) basado en el campo `build_spec` del objeto ProwJob.\n[El controlador de construcci\u00f3n de Knative](https://github.com/knative/build/blob/master/cmd/controller/main.go) reacciona y crea un Pod para ejecutar la construcci\u00f3n. Todos los ProwJob, Build y Pod tienen el mismo nombre (un UUID).\n\nEl objeto Build contiene campos interesantes:\n\n- serviceAccountName: [ServiceAccount contiene los Secrets necesarios para acceder al servidor Git o al registro Docker](https://github.com/knative/docs/blob/master/build/auth.md).\n- source: Repositorio y revisi\u00f3n de Git para usar para el c\u00f3digo fuente.\n- steps: Especifica una o m\u00e1s im\u00e1genes de contenedores que desea ejecutar en su construcci\u00f3n. Cada imagen de contenedor se ejecuta hasta su finalizaci\u00f3n o hasta que se detecta la primera falla.\n- template: contiene el nombre de un Knative BuildTemplate registrado, junto con las variables de entorno para pasar al objeto Build. La plantilla debe ser un objeto BuildTemplate que exista en el cl\u00faster. **Si se define el campo de plantilla, el campo de pasos se ignorar\u00e1**.\n\n##### Steps\n\nLos pasos en una compilaci\u00f3n son las diferentes acciones que se ejecutar\u00e1n como parte de esa construcci\u00f3n. Cada paso en una construcci\u00f3n que debe especificar una imagen del Builder, o el tipo de imagen del contenedor que se adhiere al [Contrato del constructor Knative](https://github.com/knative/docs/blob/master/build/builder-contract.md) . Estos pasos/im\u00e1genes del constructor\n\n- Se ejecutan y eval\u00faan en orden, comenzando desde la parte superior del archivo de configuraci\u00f3n.\n- Cada uno se ejecuta hasta su finalizaci\u00f3n o hasta que se detecta la primera falla.\n- Tener dos vol\u00famenes que se comparten entre todos los pasos. Uno se montar\u00e1 en /workspace, que contiene el c\u00f3digo especificado en el campo fuente Build. Otro es /builder/home que est\u00e1 montado en $HOME, y se usa principalmente para guardar archivos de credenciales que se usar\u00e1n en diferentes pasos.\n\nUna imagen del builder es una imagen especial que podemos ejecutar como un paso de Build CRD, y que normalmente es un contenedor especialmente dise\u00f1ado cuyo punto de entrada es una herramienta que realiza algunas acciones y sale con un estado cero en caso de \u00e9xito. Estos puntos de entrada suelen ser herramientas de l\u00ednea de comandos, por ejemplo, git, docker, mvn, etc.\n\n##### BuildTemplate\n\n[Un BuildTemplate](https://github.com/knative/docs/blob/master/build/build-templates.md) encapsula un proceso de compilaci\u00f3n compartida con algunas capacidades de parametrizaci\u00f3n limitadas.\n\nUna plantilla contiene pasos para ejecutar en la compilaci\u00f3n. En lugar de especificar los mismos pasos en diferentes compilaciones, podemos reutilizar esos pasos creando una BuildTemplate que contenga estos pasos. Utilizamos BuildTemplates para compartir pasos entre diferentes Builds. Hay [BuildTemplates de la comunidad](https://github.com/knative/build-templates/) que puede usar, o puede definir sus propias plantillas.\n\n###### Jenkins X Build Templates\n\nJenkins X utiliza BuildTemplates personalizadas para ejecutar las compilaciones de las aplicaciones. En [este repositorio](https://github.com/jenkins-x/jenkins-x-serverless) puede encontrar las diferentes BuildTemplates disponibles, seg\u00fan el lenguaje de la aplicaci\u00f3n. Estas BuildTemplates usan una imagen de constructor de Step diferente seg\u00fan el lenguaje, ya que tienen que construir la aplicaci\u00f3n usando diferentes herramientas como maven, go o Gradle. Por lo tanto, cada imagen de Builder tiene diferentes herramientas instaladas, aunque eventualmente todas las im\u00e1genes de Builder b\u00e1sicamente ejecutan [Jenkins sin servidor](/news/serverless-jenkins/) (tambi\u00e9n conocido como [Jenkinsfile-Runner](https://github.com/jenkinsci/jenkinsfile-runner)). Eso permite que nuestras compilaciones definan los pasos en un Jenkinsfile. Todos estos pasos se ejecutan dentro del mismo [contenedor Jenkinsfile Runner](https://hub.docker.com/r/jenkins/jenkinsfile-runner/dockerfile/), que no coincide con el modelo de pasos de Knative Build.\n\n##### El trabajo se ejecuta dentro del Pod\n\nEl Pod que se cre\u00f3 para ejecutar la compilaci\u00f3n real tiene un contenedor que no hace nada, pero tiene contenedores de inicio para realizar los pasos necesarios para ejecutar el trabajo:\n\n- [creds-init](https://github.com/knative/build/tree/master/cmd/creds-init): Los Secrets de la cuenta de servicio se montan en /var/build-secrets/ para que este contenedor tenga acceso a ellos. Los agrega en sus respectivos archivos de credenciales en $HOME, que es otro volumen compartido entre todos los pasos. T\u00edpicamente credenciales para el servidor git y el registro de docker.\n- [git-init](https://github.com/knative/build/tree/master/cmd/git-init): clona el repositorio SHA/revisi\u00f3n Git especificado en uno de los vol\u00famenes compartidos /workspace\n- Otro contenedor de inicio para cada paso definido en Build o BuildTemplate.\n\nRecuerde que cada contenedor de inicio usa su propia imagen de contenedor. Adem\u00e1s, tienen diferentes namespaces de Linux del sistema de archivos. Pero tienen algunos vol\u00famenes compartidos como las carpetas $HOME y /workspace.\n\n## sinker\n\n[Recolector de basura](https://github.com/kubernetes/test-infra/tree/master/prow/cmd/sinker) para ProwJobs y Pods creados para ejecutar compilaciones. Elimina ProwJobs completos despu\u00e9s de 2 d\u00edas y pods completados despu\u00e9s de 30 minutos.\n\n## crier\n\nOtro controlador de Kubernetes que mira CRD de ProwJobs. Contiene diferentes notificadores de los cambios de ProwJob a clientes externos, como la verificaci\u00f3n del estado de GitHub o un mensaje a PubSub.\n\nSe utiliza para actualizar el estado de confirmaci\u00f3n de GitHub cuando finaliza ProwJob.\n\n## deck\n[Presenta una UI de trabajos recientes](https://prow.k8s.io/) e [informaci\u00f3n de ayuda de comandos/plugins](https://prow.k8s.io/command-help).\n\n## tide\n\nLos RP que satisfacen un conjunto de criterios predefinidos se pueden configurar para que [Tide](https://github.com/kubernetes/test-infra/blob/master/prow/cmd/tide/README.md) los mezcle autom\u00e1ticamente. Volver\u00e1 a probar autom\u00e1ticamente los RP que cumplan con los criterios (\"marea alta\") y los mezclar\u00e1 autom\u00e1ticamente cuando tengan resultados de prueba aprobados (\"marea baja\").\n\nConsultar\u00e1 a GitHub de vez en cuando tratando de mezclar las solicitudes de extracci\u00f3n. No reacciona a los eventos, no es un plugin.\n\n## Esfuerzos en curso\n\nUso de contenedores de inicio para los pasos [puede cambiar en el futuro](https://github.com/knative/build/pull/470), debido a limitaciones en los contenedores de inicio.\nKnative Build CRD est\u00e1 en desuso en favor de Pipeline CRD. Build CRD ser\u00e1 reemplazado por el nuevo Task CRD, pero son muy similares.",
            "content/es/docs/reference/components/source.md": "---\ntitle: C\u00f3digo Fuente\nlinktitle: C\u00f3digo Fuente\ndescription: La ubicaci\u00f3n de varios repositorios de c\u00f3digo fuente\nparent: \"components\"\nweight: 400\n---\n\nJenkins X est\u00e1 construido sobre los hombros de gigantes y tambi\u00e9n tiene muchos repositorios de diferentes or\u00edgenes para hacer lograr varios objetivos, desde herramientas CLI, im\u00e1genes de docker, helm charts y [aplicaciones como complementos](/docs/contributing/addons/).\n\nEsta p\u00e1gina enumera las principales organizaciones y repositorios.\n\n## Organizaciones\n\n* [jenkins-x](https://github.com/jenkins-x) la organizaci\u00f3n principal para el c\u00f3digo fuente\n* [jenkins-x-apps](https://github.com/jenkins-x-apps) contiene el est\u00e1ndar de [aplicaciones de componentes](/docs/contributing/addons/) para Jenkins X\n* [jenkins-x-buildpacks](https://github.com/jenkins-x-buildpacks) contiene los paquetes de [compilaci\u00f3n disponibles](/docs/resources/guides/managing-jx/common-tasks/build-packs/)\n* [jenkins-x-charts](https://github.com/jenkins-x-charts) los principales helm charts que distribuimos\n* [jenkins-x-images](https://github.com/jenkins-x-images) contiene algunas compilaciones de im\u00e1genes de docker personalizadas\n* [jenkins-x-quickstarts](https://github.com/jenkins-x-quickstarts) los proyectos de inicio r\u00e1pido utilizados por [create quickstart](/docs/getting-started/first-project/create-quickstart/)\n* [jenkins-x-test-projects](https://github.com/jenkins-x-test-projects) proyectos de prueba que usamos en casos de prueba\n\n## Repositorios\n\nAqu\u00ed mencionaremos a algunos de los principales repositorios en las organizaciones anteriores:\n\n* [jenkins-x/jx](https://github.com/jenkins-x/jx) el repositorio principal que crea la CLI `jx` y los pasos de pipelines reutilizables\n* [jenkins-x/jx-docs](https://github.com/jenkins-x/jx-docs) la documentaci\u00f3n basada en Hugo que genera este sitio web\n* [jenkins-x/bdd-jx](https://github.com/jenkins-x/bdd-jx) las pruebas BDD que utilizamos para verificar los cambios de plataforma y verificar los PR en [jenkins-x/jx](https://github.com/jenkins-x/jx)\n* [jenkins-x/jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform) el principal helm chart compuesto para la plataforma Jenkins X\n* [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) contiene el [flujo de versiones](/es/about/concepts/version-stream/): las versiones estables de todos los _charts_ y _paquetes_ de CLI\n* [jenkins-x/cloud-environments](https://github.com/jenkins-x/cloud-environments) las configuraciones helm para diferentes proveedores de la nube\n\n### Construir pods e im\u00e1genes\n\n* [jenkins-x/jenkins-x-builders](https://github.com/jenkins-x/jenkins-x-builders) genera las im\u00e1genes est\u00e1ticas de docker de los pod de compilaci\u00f3n del servidor jenkins\n* [jenkins-x/jenkins-x-image](https://github.com/jenkins-x/jenkins-x-image) genera la imagen docker para el servidor jenkins est\u00e1tico que usamos por defecto\n* [jenkins-x/jenkins-x-serverless](https://github.com/jenkins-x/jenkins-x-serverless) genera las im\u00e1genes de docker para [jenkins sin servidor](/news/serverless-jenkins/) cuando se utiliza [Prow](/architecture/prow/)\n\n### Herramientas\n\n* [jenkins-x/lighthouse](https://github.com/jenkins-x/lighthouse) la soluci\u00f3n estrat\u00e9gica para webhooks y ChatOps para m\u00faltiples proveedores de git\n* [jenkins-x/exposecontroller](https://github.com/jenkins-x/exposecontroller) una `Deployment` o `Job` que se puede usar para generar/actualizar recursos de `Ingress` (o `Route` en OpenShift) si cambia su dominio DNS o habilita TLS; tambi\u00e9n puede inyectar URL externas en su aplicaci\u00f3n a trav\u00e9s de la inyecci\u00f3n del `ConfigMap`.",
            "content/es/docs/reference/components/vault.md": "---\ntitle: Vault\nlinktitle: Vault\ndescription: Gestione sus Secretos\nweight: 200\n---\n\n{{< pageinfo >}}\nTenga en cuenta que actualmente Vault solo funciona en Google Cloud Platform (GCP) con Google Kubernetes Engine (GKE). Estamos trabajando para ampliar el soporte a otros proveedores de la nube.\n{{< /pageinfo >}}\n\n# \u00bfQu\u00e9 es Vault?\n\n[Vault](https://www.vaultproject.io) es un proyecto de c\u00f3digo abierto para administrar secretos de forma segura y es nuestra forma preferida de administrar secretos en sus entornos en Jenkins X.\n\nEn las infraestructuras inform\u00e1ticas tradicionales, todos los recursos y componentes (hardware, redes, disponibilidad, seguridad e implementaci\u00f3n) as\u00ed como los costos laborales asociados se gestionan localmente. Terceros entornos inform\u00e1ticos como proveedores de servicios en la nube y de Git ofrecen soluciones descentralizadas con distintas ventajas en el servicio de fiabilidad y costos sobre las soluciones tradicionales.\n\nSin embargo, un problema con el uso de servicios en la nube, almacenamiento distribuido y repositorios remotos es la falta de redes confiables, hardware examinado, y otras medidas de seguridad observadas de cerca practicadas en entornos locales de\ninfraestructura. Por conveniencia, los usuarios a menudo almacenan informaci\u00f3n como credenciales de autenticaci\u00f3n en repositorios p\u00fablicos y abiertos, expuestos a posibles actividades maliciosas.\n\n[Hashicorp *Vault*](https://www.vaultproject.io/) es una herramienta que centraliza la gesti\u00f3n de secretos: recursos que proporcionan autenticaci\u00f3n a su entorno inform\u00e1tico, como tokens, claves, contrase\u00f1as y certificados.\n\nJenkins X maneja los recursos de seguridad y autenticaci\u00f3n a trav\u00e9s de la integraci\u00f3n de Vault. Los usuarios pueden implementar Vault para almacenar y administrar de forma segura todos los aspectos de su plataforma de desarrollo.\n\nJenkins X instala y configura Vault para su cl\u00faster de manera predeterminada a trav\u00e9s del proceso de creaci\u00f3n del cl\u00faster.\n\n## Caracter\u00edsticas de Vault\n\nVault es una herramienta para acceder y almacenar secretos de usuario. Gestiona el Complejidad del acceso seguro a los recursos:\n\n- Almacenamiento de secretos: Vault coloca los secretos en un formato cifrado en un dep\u00f3sito (bucket) de almacenamiento remoto.\n\n- Creaci\u00f3n y eliminaci\u00f3n de secretos - Vault crea secretos para un acceso din\u00e1micos a dep\u00f3sitos de almacenamiento, acceso ef\u00edmero que son\ncreados/destruidos seg\u00fan sea necesario para el acceso temporal a datos, y genera claves para la autenticaci\u00f3n de la base de datos.\n\n- Cifrado de datos: Vault almacena los secretos en un dep\u00f3sito de almacenamiento remoto en directorios seguros con cifrado seguro.\n\nJenkins X interact\u00faa con Vault a trav\u00e9s del programa de l\u00ednea de comando `jx`. Hay comandos para crear, eliminar y gestionar secretos y b\u00f3vedas.\n\nJenkins X usa Vault para almacenar todos los secretos de Jenkins X, como el token de acceso personal de GitHub generado para el pipeline del bot (sistema) cuando [crea un cl\u00faster de Jenkins X cluster](/docs/getting-started/setup/boot/). Tambi\u00e9n almacena cualquier secreto de GitOps, como contrase\u00f1as para los dep\u00f3sitos de almacenamiento y claves para acceso seguro al servidor.\n\nLos secretos pueden ser recuperados por el pipeline o por la l\u00ednea de comando si est\u00e1 registrado en la cuenta asociada con el servicio Kubernetes, as\u00ed como en cualquier secreto almacenado en el espacio de nombres `jx` para el pipeline.\n\nLas b\u00f3vedas se aprovisionan en Kubernetes usando `vault-operator`, un Controlador Kubernetes de c\u00f3digo abierto instalado cuando Vault est\u00e1 siendo  configurado durante la creaci\u00f3n del cl\u00faster y la instalaci\u00f3n de Jenkins X.\n\n# Utilizando Vault en el CLI\n\nPrimero necesita descargar e instalar el CLI [safe](https://github.com/starkandwayne/safe) para Vault.\n\nUna vez instalado [safe](https://github.com/starkandwayne/safe) puede ejecutar el siguiente comando:\n\n```\neval `jx get vault-config`\n```\n\nahora debe poder utilizar [safe](https://github.com/starkandwayne/safe) CLI para acceder a Vault.\n\nPuede entonces obtener un secreto a trav\u00e9s de:\n\n\n```\nsafe get /secret/my-cluster-name/creds/my-secret\n```\n\no puede actualizar un secreto a trav\u00e9s de:\n\n```\nsafe set /secret/my-cluster-name/creds/my-secret username=myname password=mytoken\n```\n\nSi tiene un blob de JSON para codificar como secreto, como una clave de cuenta de servicio, convierta el archivo a base64 primero y luego config\u00farelo ...\n\n```sh\ncat my-service-account.json | base64 > myfile.txt\nsafe set /secret/my-cluster-name/creds/my-secret json=@myfile.txt\n```\n\n# Configurar DNS y TLS para Vault\n\nPara una instalaci\u00f3n segura de Jenkins X, debe habilite TLS cuando interact\u00fae con el servicio de almacenamiento. Para configurar TLS, primero debe configurar los ajustes de DNS de Zona en Google Cloud Platform, y luego configure los ajustes de DNS externos para el `Ingress` y TLS en el\nfichero de configuraci\u00f3n ``jx-requirements.yml`.\n\n## Configurar Google Cloud DNS\n\nPara configurar el acceso DNS y TLS de Vault correctamente, debe configurar Google Cloud DNS de forma adecuada.\n\nDebe tener un nombre de dominio registrado, por ejemplo `www.acmecorp.example` antes de configurar el DNS en la Zona de Configuraciones de Google. Para obtener m\u00e1s informaci\u00f3n, consulte la gu\u00eda de [Creaci\u00f3n de una Zona Administrada P\u00fablica](https://cloud.google.com/dns/docs/quickstart#create_a_managed_public_zone).\n\n1. Navegue hasta la p\u00e1gina de [Selecci\u00f3n de Proyecto](https://console.cloud.google.com/projectselector2/home/dashboard) y elija su proyecto de Google Cloud Platform.\n\n2. [Cree un DNS de Zona](https://console.cloud.google.com/networking/dns/zones/~new)\n\n3. Elija como su *Tipo de zona* Public.\n\n4. Escriba un *Nombre de zona* para su zona.\n\n5. Adicione un sufijo al DNS in *DNS name*, p.ej `acmecorp.example`.\n\n6. Seleccione su *DNSSEC* o el estado de Seguridad DNS, que debe se configurado como `Off` para este ejemplo.\n\n7. (Opcional) Ingrese una *Descripci\u00f3n* para su zona DNS.\n\n8. Clic en `Create`.\n\nUna vez creada, se carga la p\u00e1gina *Zone Details*. *NS* (servidor de nombres) y los registros *SOA* (Inicio de autoridad) se crean autom\u00e1ticamente para su dominio (por ejemplo, `acmecorp.example`)\n\n## Configurar DNS Externo en Jenkins X\n\nUna vez que haya configurado Google Cloud DNS, puede usar la p\u00e1gina de [Zonas](https://console.cloud.google.com/net-services/dns/zones) en su proyecto de Google Cloud Platform para configurar su dominio externo.\n\n{{< alert >}}\nNOTA: El DNS externo actualizar\u00e1 autom\u00e1ticamente los registros DNS si reutiliza el nombre de dominio, por lo que si elimina un cl\u00faster antiguo y crea uno nuevo, conservar\u00e1 la misma configuraci\u00f3n de dominio para el nuevo cl\u00faster.\n{{< /alert >}}\n\nPara configurar DNS Externo:\n\n1. Elija un nombre DNS \u00fanico; puede usar dominios anidados (por ejemplo, cluster1.acmecorp.example). Ingrese el nombre en el campo Nombre DNS\n\n2. Ejecute el comando `jx create domain` contra su nombre de dominio, por ejemplo:\n\n```\n$ jx create domain gke --domain cluster1.acmecorp.example\n```\n    Se le preguntar\u00e1 la informaci\u00f3n que se necesite para la configuraci\u00f3n:\n\n    1. Seleccione su proyecto Google Cloud Platform del listado disponible.\n\n    2. Actualice sus servidores administrados existentes para usar la lista que se muestra de los servidores de nombres DNS en la nube. Copie la lista para usar en los pr\u00f3ximos pasos.\n\nEl siguiente paso es configurar GCP:\n\n1. Desde la p\u00e1gina [Zonas](https://console.cloud.google.com/net-services/dns/zones) de Google Cloud Platform, cambie el *Resource Record Type* a `NS`) y use los valores predeterminados para su dominio para *TTL* (`5`) y *TTL Unit* (`minutos`).\n\n2. Agregue el primer servidor de nombres al campo *Servidor de nombres*\n\n3. Clic en `Add item` y adicione cualquier servidor de nombre.\n\n4. Clic en `Create`.\n\nFinalmente, configure Jenkins X para los nuevos nombres de dominio:\n\n1. Edite el fichero `jx-requirements.yml` y actualice el campo `dominio` (en `Ingress`) a su nombre de dominio, por ejemplo `cluster1.acmecorp.example`.\n\n2. En la configuraci\u00f3n *tls*, habilite TLS con `enabled: true`.\n\nEl fichero `jx-requirements.yml` quedar\u00eda de la siguiente forma si utilizamos las configuraciones mencionadas:\n\n```yaml\ngitops: true\ningress:\n  domain: cluster1.acmecorp.example\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: certifiable@acmecorp.example\n    enabled: true\n    production: true\nsecretStorage: vault\n```\n\n{{< alert >}}\nRecuerde ejecutar el comando `jx boot` para que los cambios tengan efecto en su entorno.\n{{< /alert >}}\n\n# Crear un Vault\n\nDe forma predeterminada, se crea un servicio Vault utilizando [jx boot](/getting-started/boot/) para crear su cl\u00faster, a menos que haya especificado durante la configuraci\u00f3n del cl\u00faster no cree Vault. En este caso, puede crear una instalaci\u00f3n posterior con la interfaz de l\u00ednea de comandos `jx create`:\n\n```\n$ jx create vault\n```\n\n1. El programa le preguntar\u00e1 el nombre para su Vault (p.ej `acmevault`)\n\n2. El programa le pedir\u00e1 su Google Cloud Zone de elecci\u00f3n. Consulte [Regiones y zonas](https://cloud.google.com/compute/docs/regions-zones/) en la documentaci\u00f3n de Google Cloud para obtener m\u00e1s informaci\u00f3n. En este ejemplo, `us-east1-c` se elige por su proximidad a la sede de Acme.\n\n3. Si tiene una cuenta de dep\u00f3sito de almacenamiento configurada desde la creaci\u00f3n de un cl\u00faster con `jx boot`, entonces el comando `jx create vault` analizar\u00e1 su instalaci\u00f3n en busca de dep\u00f3sitos de almacenamiento relacionados con Vault y, si se encuentra, le pedir\u00e1 que apruebe eliminar y volver a crear el Vault desde cero.\n\n4. El programa le preguntar\u00e1 por el *Expose type* para el Vault para crear reglas y rutas para el balanceo de carga del cl\u00faster y otros servicios. El valor predeterminado es `Ingress`.\n\n5. El programa solicitar\u00e1 un dominio de cl\u00faster. El valor predeterminado es el creado en [el proceso de creaci\u00f3n de Cluster](/docs/getting-started/setup/boot/), como 192.168.1.100.nip.io.\n\n6. El programa le pedir\u00e1 una `URLTemplate`. Presione `Enter` para usar el valor predeterminado.\n\n7. El programa verificar\u00e1 sus respuestas a las preguntas anteriores en resumen y le pedir\u00e1 que apruebe la creaci\u00f3n de Vault (el valor predeterminado es `Yes`).",
            "content/es/docs/using-jx/_index.md": "---\ntitle: \"Utilizando Jenkins X\"\nlinkTitle: \"Utilizando Jenkins X\"\nweight: 4\ndescription: >\n  Aprende c\u00f3mo utilizar Jenkins X y lo que puedes hacer con esta el.\n---\n",
            "content/es/docs/using-jx/creating/_index.md": "---\ntitle: Agregar repositorios a Jenkins X\nlinkTitle: \"Agregar Repositorios\"\nweight: 2\ndescription: >\n  \u00bfC\u00f3mo crear nuevos microservicios o importar un c\u00f3digo fuente existente en Jenkins X?\n---",
            "content/es/docs/using-jx/creating/create-camel.md": "---\ntitle: Crear Camel\nlinktitle: Crear Camel\ndescription: \u00bfC\u00f3mo crear un nuevo microservicio Apache Camel e importarlo a Jenkins X?\nweight: 20\n---\n\nSi desea crear un nuevo microservicio Spring Boot usando [Apache Camel](http://camel.apache.org/), puede utilizar el comando [jx create camel](/commands/deprecation/).\n\n```sh\njx create camel\n```\n\nLuego se le solicita el nombre del proyecto.\n\nSi lo desea, puede especificar esto en la l\u00ednea de comando:\n\n```sh\njx create camel -a myapp\n```\n\n### \u00bfQu\u00e9 sucede cuando creas un microservicio de Camel?\n\nUna vez que haya elegido el proyecto a crear y le haya dado un nombre, los siguientes pasos se automatizar\u00e1n para usted:\n\n* crea un nuevo microservicio Camel en un subdirectorio\n* adiciona su c\u00f3digo fuente a un repositorio Git\n* crea un repositorio Git remoto en un servidor Git como por ejemplo [GitHub](https://github.com)\n* empuja el c\u00f3digo local al repositorio remoto Git\n* adiciona los siguientes ficheros:\n  * `Dockerfile` para construir su aplicaci\u00f3n en una imagen Docker\n  * `Jenkinsfile` para implementar el pipeline CI/CD\n  * chart Helm para ejecutar la aplicaci\u00f3n dentro de Kubernetes\n* registra un enlace en el repositorio remoto Git y sus equipos en Jenkins\n* adiciona el repositorio Git a sus equipos en Jenkins\n* desencadena el primer pipeline",
            "content/es/docs/using-jx/creating/create-mlquickstart.md": "---\ntitle: \"Crear MLquickstart\"\nlinktitle: Crear MLquickstart\ndescription: \u00bfC\u00f3mo crear una aplicaci\u00f3n de aprendizaje autom\u00e1tico de inicio r\u00e1pido e importarla a Jenkins X?\nweight: 30\n---\n\nEl inicio r\u00e1pido de aprendizaje autom\u00e1tico (Machine learning quickstarts) son aplicaciones pre-configuradas de aprendizaje autom\u00e1tico que puedes utilizar para iniciar tus propios proyectos.\n\nPuede crear nuevas aplicaciones desde nuestra lista de inicio r\u00e1pido de aprendizaje autom\u00e1tico a trav\u00e9s del comando [jx create mlquickstart](/commands/jx_create_mlquickstart/).\n\n```sh\njx create mlquickstart\n```\nLuego se le solicita que elija de un listado de aplicaciones posibles.\n\nVer\u00e1 que estos vienen en grupos de tres:\n\n```sh\n? select the quickstart you wish to create  [Use arrows to move, space to select, type to filter]\n> machine-learning-quickstarts/ML-python-pytorch-cpu\n  machine-learning-quickstarts/ML-python-pytorch-cpu-service\n  machine-learning-quickstarts/ML-python-pytorch-cpu-training\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-service\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-cpu-training\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-service\n  machine-learning-quickstarts/ML-python-pytorch-mlpc-gpu-training\n```\n\nCada inicio r\u00e1pido de aprendizaje autom\u00e1tico consta de dos proyectos, un proyecto de entrenamiento que administra el script de capacitaci\u00f3n para su modelo y un proyecto de servicio que le permite abarcar sus instancias de modelo entrenadas con API de servicio listas para integrarse en su aplicaci\u00f3n.\n\nSi desea crear solo el proyecto `-service` o `-training`, puede hacerlo seleccionando la opci\u00f3n con el sufijo de nombre correspondiente.\n\nSin embargo, la mayor\u00eda de las veces, lo que desea hacer es seleccionar *el conjunto de proyectos*, que es la primera opci\u00f3n con el mismo nombre de prefijo y sin sufijo. Eso crear\u00e1 un par de proyectos coincidentes que est\u00e1n vinculados. Por ejemplo, si llama al repositorio `my-first-ml-project` y selecciona el conjunto de proyectos `ML-python-pytorch-cpu`, crear\u00e1 dos proyectos independientes en la carpeta actual, `my-first-ml-project-training` y `my-first-ml-project-service`.\n\nSi los crea individualmente, es importante que sus proyectos compartan el mismo nombre ra\u00edz y que terminen con los sufijos `-training` y `-service` para que puedan integrarse autom\u00e1ticamente durante el proceso de construcci\u00f3n.\n\nPuede utilizar un filtro de texto para filtrar los nombres de los proyectos:\n\n```sh\njx create mlquickstart -f gpu\n```\n\n### \u00bfQu\u00e9 sucede cuando se crea un inicio r\u00e1pido?\n\nUna vez que haya elegido el proyecto a crear y le haya dado un nombre, se automatizar\u00e1 lo siguiente:\n\n* crea un par de proyectos desde el inicio r\u00e1pido en subdirectorios\n* adiciona el c\u00f3digo de ambos en un par de repositorios Git\n* crea un repositorio Git  para cada repositorio Git local en una plataforma como [GitHub](https://github.com)\n* empuja el c\u00f3digo de los repositorios locales hacia los repositorios remotos\n* adiciona los siguientes ficheros:\n  * `Dockerfile` para construir la imagen Docker de la aplicaci\u00f3n\n  * `Jenkinsfile` para implementar el pipeline CI/CD para las construcciones de entrenamiento y servicio\n  * charts de Helm para ejecutar la aplicaci\u00f3n en Kubernetes\n* registra un enlaces (webhooks) en el repositorio Git remoto hacia los equipos del servidor Jenkins X\n* desencadena los pipelines de entrenamiento y despliegue del servicio\n\nUna vez que cree un inicio r\u00e1pido de aprendizaje autom\u00e1tico, los proyectos de entrenamiento y servicio se construir\u00e1n simult\u00e1neamente. El proyecto de servicio se desplegar\u00e1, pero la primera vez no se iniciar\u00e1 porque todav\u00eda no tiene un modelo de entrenamiento para trabajar.\n\nMientras tanto, el proyecto de entrenamiento comenzar\u00e1 a trabajar en la capacitaci\u00f3n del modelo y, una vez capacitado, realizar\u00e1 algunas pruebas de aceptaci\u00f3n para verificar que la instancia del modelo capacitado sea lo suficientemente precisa como para que valga la pena promoverla para futuras pruebas. Si el modelo no ha aprendido lo suficientemente bien, la construcci\u00f3n del entrenamiento fallar\u00e1 en este punto.\n\nPuede reiniciar el entrenamiento con el comando:\n\n```sh\njx start pipeline\n```\n\ny luego seleccione el nombre del proyecto de entrenamiento que desea ejecutar nuevamente, o puede editar su secuencia de comandos de capacitaci\u00f3n, confirmar sus cambios y enviarlos para activar autom\u00e1ticamente otra ejecuci\u00f3n de capacitaci\u00f3n.\n\nUna vez completado el entrenamiento con \u00e9xito, la versi\u00f3n de su modelo que acaba de recibir capacitaci\u00f3n y las m\u00e9tricas asociadas con esta ejecuci\u00f3n se pasar\u00e1n a su proyecto `-service` mediante un PR. Ahora debe revisar el repositorio del proyecto `-service` y verificar las m\u00e9tricas de capacitaci\u00f3n para verificar su idoneidad. El proyecto `-service` se reconstruir\u00e1 autom\u00e1ticamente utilizando la instancia del modelo reci\u00e9n entrenado y se desplegar\u00e1 en un entorno de vista previa donde puede probarlo utilizando su API.\n\nSi se aprueban todas las comprobaciones de control de calidad, puede cerrar la sesi\u00f3n de la misma manera que lo har\u00eda para cualquier otra compilaci\u00f3n dentro de Jenkins-X (haga que los aprobadores y revisores issue /approve y /lgtm comentarios en el hilo del PR).\n\nUna vez que se cierra la sesi\u00f3n, la instancia del modelo entrenado se mezcla en la rama `master` de su proyecto `-service`, se reconstruye y se despliega en etapas para pruebas e integraci\u00f3n adicionales.\n\nCada vez que reinicie el proyecto de entrenamiento, obtendr\u00e1 una nueva instancia de modelo que puede elegir promover de la misma manera. Todos los modelos se versionan a trav\u00e9s de Git, por lo que puede realizar un seguimiento de cada instancia y sus m\u00e9tricas.\n\n### \u00bfC\u00f3mo funciona el inicio r\u00e1pido?\n\nLa fuente de estos proyectos de Inicio R\u00e1pido se mantiene en [la organizaci\u00f3n GitHub de machine-learning-quickstarts](https://github.com/machine-learning-quickstarts).\n\nAl igual que con los inicios r\u00e1pidos convencionales de Jenkins-X, utilizamos [los paquetes de compilaci\u00f3n Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) para que utilizar el paquete adecuado para el proyecto utilizando el lenguaje de c\u00f3digo fuente y los tipos frameworks de aprendizaje autom\u00e1tico para elegir la combinaci\u00f3n m\u00e1s adecuada.\n\nCuando utilice [jx create](/es/docs/getting-started/setup/create-cluster/), [jx install](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) o [jx init](/commands/deprecation/), [los paquetes de compilaci\u00f3n de Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) ser\u00e1n clonados en su carpeta local `~/.jx/draft/packs`.\n\nEntonces, cuando creas un proyecto de inicio r\u00e1pido de aprendizaje autom\u00e1tico, [los paquetes de compilaci\u00f3n de Jenkins X](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) son utilizado para:\n\n* buscar el paquete correspondiente al lenguaje de programaci\u00f3n. p.ej aqu\u00ed est\u00e1 la actual [lista de paquetes para lenguajes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs).\n* el paquete de lenguaje es utilizado para seleccionar los siguientes ficheros correspondientes si no existen:\n  * `Dockerfile` para crear la imagen Docker de la aplicaci\u00f3n\n  * `jenkins-x.yml` para implementar los pipelines CI/CD utilizando pipelines declarativos como c\u00f3digo\n  * Charts Helms para desplegar la aplicaci\u00f3n en Kubernetes y para implementar [Vistas Previas de Entornos](/es/about/concepts/features/#entornos-de-vista-previa).\n\n## Adicionar tus propios Inicios R\u00e1pidos\n\nSi desea enviar un nuevo inicio r\u00e1pido a Jenkins X, simplemente [plantee un problema](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:) con la URL en GitHub de su inicio r\u00e1pido y podemos bifurcarlo en la [organizaci\u00f3n de inicio r\u00e1pido](https://github.com/machine-learning-quickstarts) para que aparezca en el men\u00fa `jx create mlquickstart`.\n\nO si forma parte de un proyecto de c\u00f3digo abierto y desea seleccionar su propio conjunto de inicios r\u00e1pidos para su proyecto; puede [plantear un problema](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:) proporcion\u00e1ndonos detalles de la organizaci\u00f3n de GitHub donde est\u00e1n los inicios r\u00e1pidos y lo agregaremos como una organizaci\u00f3n predeterminada en el comando [jx create mlquickstart](/commands/jx_create_mlquickstart/). Es m\u00e1s f\u00e1cil para [jx create mlquickstart](/commands/jx_create_mlquickstart/) si mantiene los inicios r\u00e1pidos en una organizaci\u00f3n separada de inicio r\u00e1pido en GitHub.\n\nHasta que lo hagamos, puede seguir usando sus propios Inicios R\u00e1pidos en el comando `jx create mlquickstart` a trav\u00e9s del par\u00e1metro `-g` o `--organisation`. p.ej.\n\n```sh\njx create mlquickstart  --organisations my-github-org\n```\n\nLuego, todos los inicios r\u00e1pidos de aprendizaje autom\u00e1tico que se encuentran en `my-github-org` se enumerar\u00e1n adem\u00e1s de los valores predeterminados.\n\nTenga en cuenta que hay algunos est\u00e1ndares para crear inicios r\u00e1pidos de aprendizaje autom\u00e1tico:\n\n* Todos los nombres de inicio r\u00e1pido deben comenzar con las letras `ML-` para distinguirlo de un inicio r\u00e1pido convencional\n* Los proyectos de entrenamiento deben tener sufijos `-training`\n* Los proyectos de servicio deben tener el sufijo `-service`\n* Todos los componentes de un conjunto de proyectos deben compartir el mismo prefijo ra\u00edz a su nombre\n\nPara crear un conjunto de proyectos de aprendizaje autom\u00e1tico, cree un nuevo repositorio en su organizaci\u00f3n de inicio r\u00e1pido de modo que el nombre sea el prefijo compartido para su inicio r\u00e1pido, por ejemplo: `machine-learning-quickstarts/ML-python-pytorch-cpu`\n\nIntente elegir nombres explicativos para que quede claro qu\u00e9 lenguaje, framework y hardware est\u00e1n asociados con este conjunto de proyectos.\n\nDentro de su repositorio de conjuntos de proyectos, cree un \u00fanico archivo llamado `projectset` que tenga el siguiente formato:\n\n```yaml\n[\n   {\n      \"Repo\":\"ML-python-pytorch-cpu-service\",\n      \"Tail\":\"-service\"\n   },\n   {\n      \"Repo\":\"ML-python-pytorch-cpu-training\",\n      \"Tail\":\"-training\"\n   }\n]\n```\n\n## Personalizar sus equipos de Inicio R\u00e1pido\n\nPuede configurar a nivel de equipo los inicios r\u00e1pidos que se le presentan en el comando `jx create mlquickstart`. Estas configuraciones se almacenan en el recurso [Environment Custom Resource](/docs/reference/components/custom-resources/) en Kubernetes.\n\nPara agregar la ubicaci\u00f3n de un conjunto de inicios r\u00e1pidos de aprendizaje autom\u00e1tico, puede usar el comando [jx create quickstartlocation](/commands/jx_create_quickstartlocation/).\n\n```sh\njx create quickstartlocation --url https://mygit.server.com --owner my-mlquickstarts --includes=[ML-*]\n```\n\nTenga en cuenta que DEBE especificar la opci\u00f3n `--includes=[ML-*]` o sus inicios r\u00e1pidos se agregar\u00e1n a la lista de inicio r\u00e1pido convencional en lugar de a la lista de aprendizaje autom\u00e1tico.\n\nSi omite el par\u00e1metro `--url`, el comando asumir\u00e1 que es un repositorio de [GitHub](https://github.com/). Tenga en cuenta que se admiten repositorios p\u00fablicos y privados.\n\nEsto significa que puede tener sus propios inicios r\u00e1pidos privados compartidos para reutilizar dentro de su organizaci\u00f3n. Por supuesto, obviamente preferimos que [comparta sus inicios r\u00e1pidos con nosotros a trav\u00e9s del c\u00f3digo abierto](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20mlquickstart&body=Please%20add%20this%20github%20mlquickstart:), luego podemos incluir su inicio r\u00e1pido con toda la comunidad, pero puede haber ocasiones en las que desee seleccionar sus propios inicios r\u00e1pidos internos utilizando un software propietario.\n\nTambi\u00e9n puede especificar otros patrones como `--includes` o `--excludes` para filtrar los nombres de los repositorios donde `*` coincide con cualquier cosa y `foo*` coincide con cualquier cosa que comience por `foo`. p.ej. puede incluir los lenguajes y las tecnolog\u00edas que admite su organizaci\u00f3n y excluir el resto, etc.\n\nTambi\u00e9n tenga en cuenta que puede usar el alias de `qsloc` en lugar de `quickstartlocation` si desea alias m\u00e1s cortos;)\n\nLuego puede ver las ubicaciones actuales de inicio r\u00e1pido para su equipo a trav\u00e9s del comando [jx get quickstartlocations](/commands/jx_get_quickstartlocation/):\n\n```sh\njx get quickstartlocations\n```\n\nO utilizando la abreviatura\n\n```sh\njx get qsloc\n```\n\nTambi\u00e9n est\u00e1 el comando [jx delete quickstartlocation](/commands/jx_delete_quickstartlocation/) si necesita eliminar una organizaci\u00f3n Git.",
            "content/es/docs/using-jx/creating/create-spring.md": "---\ntitle: Crear Spring Boot\nlinktitle: Crear Spring Boot\ndescription: \u00bfC\u00f3mo crear una aplicaci\u00f3n Spring Boot e importarla en Jenkins X?\nweight: 40\n---\n\nLos desarrolladores de microservicios de Java pueden aprovechar los recursos recomendados de [Spring\nBoot](https://spring.io/projects/spring-boot), as\u00ed como sus componentes pre-configurados. Este framework toma la plataforma Spring y agrega componentes pre-establecidos, bibliotecas de terceros, empaquetadores de software y herramientas de l\u00ednea de comandos para ejecutar scripts especializados.\n\nEl objetivo de Spring Boot es crear software basado en Spring, como microservicios, que se puede desplegar utilizando la l\u00ednea de comando `java` o los ficheros de empaquetado *Web Application Resource* (WAR). Spring Boot usa Spring como base para el desarrollo, y lo mejora con componentes que proporcionan un desarrollo y despliegues m\u00e1s r\u00e1pidos, as\u00ed como configuraci\u00f3n para comenzar a desarrollar microservicios, y un marco de plugin con soporte para funcionalidades de los proyectos Maven y Gradle.\n\n## Spring Boot y Jenkins X\n\nPuede incorporar Jenkins X en su proyecto Spring Boot de dos formas:\n\n1.  Importando un proyecto existente de Spring BootBy utilizando `jx import`\n\n2.  Creando una aplicaci\u00f3n Spring Boot desde cero utilizando `jx create spring`\n\n## Importando un proyecto existente de Spring Boot\n\nSi usted tiene un proyecto en Spring Boot (tal vez creado utilizando [Spring Boot Initializr](http://start.spring.io/)) y desea gestionar sus construcciones con Jenkins X, utilice el comando `jx import` para:\n\n* incluir tu c\u00f3digo en un servidor Git como puede ser GitHub\n* adicionar el fichero `Dockerfile` para construir la imagen Docker\n* adicionar el fichero `pipeline.yaml` al directorio local `~/.jx/` para gestionar el pipeline del desarrollo\n* adicionar el chart de Helm para ejecutar la aplicaci\u00f3n en Kubernetes\n\nLos pasos para lograr este objetivo son:\n\n1. Vaya al directorio de su proyecto Spring Boot:\n\n```sh\ncd my-springapp/\n```\n\n1.  Ejecute el comando import desde la l\u00ednea de comando:\n\n```sh\njx import\n```\n\n3.  La aplicaci\u00f3n le pregunta su nombre de usuario Git (p.ej `myuser`).\n\n4.  La aplicaci\u00f3n le pregunta si desea inicializar su proyecto en Git.\n\n5.  La aplicaic\u00f3n le pregunta qu\u00e9 organizaci\u00f3n utilizar para las construcciones (p.ej, `myorg`).\n\n6.  La aplicaci\u00f3n le pregunta qu\u00e9 nombre ponerle al repositorio remoto en Git (p.ej `my-springapp`)\n\nAhora puede realizar compilaciones, adicionar c\u00f3digo del proyecto en su repositorio Git reci\u00e9n creado, y Jenkins X procesar\u00e1 autom\u00e1ticamente los PR y crear\u00e1 [vistas previas](/docs/reference/preview/) de sus aplicaciones para pruebas y validaci\u00f3n.\n\n## Creando una aplicaci\u00f3n Spring Boot\n\nSi est\u00e1 evaluando Spring Boot para su entorno Jenkins X y necesita una aplicaci\u00f3n de ejemplo con estas caracter\u00edsticas, as\u00ed como su configuraci\u00f3n de pipelines CI/CD con promociones GitOps, utilice `jx create` para lograr su objetivo.\n\nLos pasos para lograrlo son los siguientes:\n\n1. Ejecute siguiente comando para crear la aplicaci\u00f3n Spring Boot:\n\n```sh\njx create spring\n```\n\n1. La aplicaci\u00f3n le preguntar\u00e1 por su usuario en Git (p.ej `myuser`)\n\n2. La aplicaci\u00f3n le permitir\u00e1 seleccionar la organizaci\u00f3n que desee utilizar\n\n3. La aplicaci\u00f3n le preguntar\u00e1 por el nombre del repositorio, (p.ej `my-springapp1`)\n\n4. La aplicaci\u00f3n le preguntar\u00e1 por el lenguaje de programaci\u00f3n que va a utilizar (por defecto `java`)\n\n5. La aplicaci\u00f3n le preguntar\u00e1 por el ID del grupo (por defecto, `com.example`)\n\n6. La aplicaci\u00f3n le preguntar\u00e1 por alguna entrada o dependencia que desee utilizar durante el desarrollo de la aplicaci\u00f3n.\n   Le recomendamos que como m\u00ednimo utilice las dependencias `Acurator` y `Web`, las cuales pueden ser seleccionadas utilizando la `Barra de Espacio`.\n\n7. La aplicaci\u00f3n le mostrar\u00e1 para inicializar el repositorio Git.\n\nEsta es una [demostraci\u00f3n utilizando el comando jx create spring](/docs/resources/demos-talks-posts/create_spring/).\n\nTambi\u00e9n puede adicionar algunas opciones al comado `jx create` como por ejemplo, especificar las dependencias:\n\n```sh\njx create spring -d web -d actuator\n```\n\nEl argumento `-d` le permite especificar las dependencias de Spring Boot que desea agregar a su aplicaci\u00f3n. En el ejemplo anterior, el comando llama al argumento `web`, que pasa en la dependencia de Web Starter para crear aplicaciones web RESTful; la dependencia del `acurator` para monitorear el estado y las m\u00e9tricas de su aplicaci\u00f3n. Cuando omite los argumentos `-d`, el comando `jx` le preguntar\u00e1 que elija las dependencias a trav\u00e9s de un asistente de CLI.\n\nRecomendamos que siempre incluya la dependencia **actuator** en sus aplicaciones Spring Boot, ya que ayuda a proporcionar comprobaciones de [Liveness and Readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/).\n\n## Proyectos Spring Boot gestionados por Jenkins X\n\nLos dos m\u00e9todos para configurar proyectos Spring Boot en Jenkins X realizan varias acciones:\n\n- Crea una nueva aplicaci\u00f3n Spring Boot en un subdirectorio local\n- Adiciona el c\u00f3digo fuente a un repositorio Git\n- Crea un repositorio Git remoto en plataformas como [GitHub](https://github.com)\n- Agrega el c\u00f3digo al repositorio Git remoto\n- Agrega los siguientes ficheros al proyecto:\n  - Un `Dockerfile` para construir la imagen de Docker del proyecto\n  - Un `pipeline.yaml` para implementar el pipeline CI/CD\n  - Un chart de Helm para ejecutar la aplicacion en Kubernetes\n- Registra un enlace (p.ej `http://hook-jx.192.169.1.100.nip.io/hook`) en el repositorio Git remoto\n- Inicia el primer pipeline de construcci\u00f3n\n\nAhora puede usar su subdirectorio de proyecto local habilitado para Git para realizar cambios en su aplicaci\u00f3n Spring Boot, enviar esos cambios a Git y hacer que Jenkins X construya autom\u00e1ticamente, cree [vistas previas](/docs/reference/preview/) para pruebas y validaci\u00f3n, y [promueva](/developing/promote/) su aplicaci\u00f3n a producci\u00f3n para uso general.",
            "content/es/docs/using-jx/creating/import.md": "---\ntitle: Importar\nlinktitle: Importar\ndescription: \u00bfC\u00f3mo importar un proyecto existente en Jenkins X?\nweight: 70\n---\n\nSi ya tiene alg\u00fan c\u00f3digo fuente que desea importar a Jenkins X, puede usar el comando [jx import](/commands/jx_import/). p.ej.\n\n```sh\ncd my-cool-app\njx import\n```\n\nAl utilizar el comando [jx import](/commands/jx_import/) se realizar\u00e1n las siguientes acciones (se le indicar\u00e1 en el camino):\n\n* adiciona su c\u00f3digo en un repositorio Git si no existe actualmente\n* crea un repositorio Git remoto en plataformas como [GitHub](https://github.com)\n* empuja su c\u00f3digo al repositorio Git remoto\n* adiciona ficheros necesarios a su c\u00f3digo si no existen, fichero como:\n  * `Dockerfile` para construir la imagen Docker de su aplicaci\u00f3n\n  * `Jenkinsfile` para implementar el pipeline CI/CD\n  * chart de Helm para ejecutar la aplicaci\u00f3n dentro de Kubernetes\n  * registra un enlace (webhook) entre el repositorio Git remoto y sus equipos de Jenkins\n* adiciona el repositorio Git a sus equipos de Jenkins\n* desencadena el primer pipeline\n\n### Evitando docker + helm\n\nSi est\u00e1s importando un repositorio que no crea una imagen Docker puede utilizar el par\u00e1metro `--no-draft` en la l\u00ednea de comando para indicarle que no utilice Draft. De esta forma no ser\u00e1n creados los ficheros `Dockerfile` y el chart de Helm.\n\n### Importando a trav\u00e9s de la URL\n\nSi desea importar un proyecto que ya est\u00e1 en un repositorio git remoto, puede usar el par\u00e1metro `--url`:\n\n```sh\njx import --url https://github.com/jenkins-x/spring-boot-web-example.git\n```\n\n### Importar proyectos de GitHub\n\nSi desea importar proyectos desde una organizaci\u00f3n de GitHub puede utilizar:\n\n```sh\njx import --github --org myname\n```\n\nEl sistema le preguntar\u00e1 por el repositorio que desea importar. Utilice las flechas y la barra de espacio para seleccionar/desmarcar repositorios:\n\nSi desea que est\u00e9n marcados todos los repositorios a la hora de importarlos utilice `--all`, luego puede desmarcar el que desee:\n\n```sh\njx import --github --org myname --all\n```\n\nPara filtrar el listado puede adicionar el par\u00e1metro `--filter`\n\n```sh\njx import --github --org myname --all --filter foo\n```\n\n## Patrones de Ramas\n\nAl importar proyectos en Jenkins X, usamos patrones de rama Git para determinar qu\u00e9 nombres de rama se configuran autom\u00e1ticamente para CI/CD.\n\nPor lo general, eso puede ser predeterminado a algo como `master|PR-.*|feature.*`. Eso significa que la rama `master`, cualquier rama que comience con `PR-` o `feature` se escanear\u00e1 para buscar el fichero `Jenkinsfile` para configurar los pipelines CI/CD.\n\nSi usa otro nombre de rama que no sea `master`, como `develop` o lo que sea, puede cambiar este patr\u00f3n para que sea lo que quiera a trav\u00e9s del par\u00e1metro `--branches` siempre que ejecute [jx import](/commands/jx_import/) o [jx create quickstart](/commands/jx_create_quickstart/).\n\n```sh\njx import --branches \"develop|PR-.*|feature.*\"\n```\n\nPuede desear establecer simplemento `.*` para trabajar con todas las ramas.\n\n```sh\njx import --branches \".*\"\n```\n\n## Configurar los patrones de ramas de tu equipos\n\nPor lo general, un equipo usa las mismas convenciones de nomenclatura para las ramas, por lo que es posible que desee configurar los patrones de las ramas a nivel de equipo para que se usen de forma predeterminada si alguien en su equipo ejecuta [jx import](/commands/jx_import/) o [jx create quickstart](/commands/jx_create_quickstart/).\n\nEstas configuraciones se almacenan en el recurso [Environment Custom Resource](/docs/reference/components/custom-resources/) en Kubernetes.\n\nPara establecer los patrones de ramas para su equipo, utilice el comando [jx create branchpattern](/commands/jx_create_branchpattern/).\n\n```sh\njx create branchpattern  \"develop|PR-.*|feature.*\"\n```\n\nLuego puede ver los patrones de rama actuales para su equipo a trav\u00e9s del comando [jx get branchpattern](/commands/jx_get_branchpattern/):\n\n```sh\njx get branchpattern\n```\n",
            "content/es/docs/using-jx/faq/_index.md": "---\ntitle: FAQ\nlinktitle: FAQ\ndescription: Preguntas sobre c\u00f3mo desarrollar aplicaciones nativas en la nube con Jenkins X\nweight: 40\naliases:\n  - /faq/\n---\n\n## \u00bfC\u00f3mo habilito el completamiento de bash?\n\nEl completamiento en bash le ayuda a utilizar la l\u00ednea de comandos `jx`, presionando `TAB` podr\u00e1 completar comandos y argumentos de l\u00ednea de comandos.\n\nPara ver c\u00f3mo habilitar la finalizaci\u00f3n de bash, consulte el comando [jx completion](/commands/jx_completion/)\n\n## \u00bfC\u00f3mo se incluyen configuraciones espec\u00edficas del entorno?\n\nCada entorno en Jenkins X se define en un repositorio Git; utilizamos GitOps para gestionar todos los cambios en cada entorno, tales como:\n\n* agregar/eliminar aplicaciones\n* cambiar la versi\u00f3n de una aplicaci\u00f3n (actualizar o degradar)\n* configurar cualquier aplicaci\u00f3n con valores espec\u00edficos del entorno\n\nLos primeros dos elementos son definidos en el fichero `env/requirements.yaml` del repositorio Git de su entorno. El \u00faltimo es definido en el fichero `env/values.yaml`.\n\nLos charts de Helm utilizan el [fichero values.yaml](https://github.com/helm/helm/blob/master/docs/chart_template_guide/values_files.md) por lo tanto, puedes modificar/sobre-escribir cualquier configuraci\u00f3n dentro del chart para cambiar las configuraciones p.ej, etiquetas, anotaciones, n\u00famero de r\u00e9plicas, variables de entornos, entre otros.\n\nPor ejemplo, si desea cambiar el n\u00famero de r\u00e9plicas (`replicaCount`) de la aplicaci\u00f3n `foo` en `Staging`, entonces debe:\n\n1. buscar la URL del repositorio Git correspondiente al entorno `Staging` a trav\u00e9s del comando [jx get env](/commands/jx_get_environments/)\n2. acceder al fichero `env/values.yaml` para adicionar/editar el n\u00famero de r\u00e9plicas\n\n```yaml\nfoo:\n  replicaCount: 5\n```\n\n3. Enviar los cambios a trav\u00e9s de un Pull Request (PR) para que se realice las pruebas correspondientes de flujo de CI as\u00ed como cualqui\u00e9r otra revisi\u00f3n/aprobaci\u00f3n necesaria\n4. Se mezclan los cambios hacia la rama master para modificar el valor de `replicaCount` en la aplicaci\u00f3n `foo` (se asume que existe un chart `foo` en el fichero `env/requirements.yaml`)\n\nPuede usar helm para hacer cosas como establecer el `namespace` actual si lo necesita.\n\nPara ver un ejemplo m\u00e1s complejo de c\u00f3mo puede utilizar el fichero `values.yaml` para establecer valores en chart de helm, vea c\u00f3mo lo hacemos para [configurar el propio Jenkins X](/docs/resources/guides/managing-jx/common-tasks/config/).\n\n## \u00bfC\u00f3mo se inserta la configuraci\u00f3n de vista previa?\n\nConsulte la pregunta anterior sobre [c\u00f3mo insertar la configuraci\u00f3n espec\u00edfica del entorno en entornos](#c\u00f3mo-se-incluyen-configuraciones-espec\u00edficas-del-entorno).\n\nLos Entornos de Vista Previa son similares a otros entornos, como `Staging` y `Production`, solo que en lugar de almacenar los entornos en un repositorio Git separado, el entorno de vista previa se define dentro de cada carpeta de la aplicaci\u00f3n `charts/preview`.\n\nPor lo tanto, para inyectar cualquier configuraci\u00f3n personalizada en su entorno de Vista previa, puede modificar el fichero `charts/preview/values.yaml` de sus aplicaciones ubicado en el repositorio Git para sobre-escribir cualquier par\u00e1metro de la plantilla helm definido en el chart con ubicaci\u00f3n `charts/myapp`.\n\nEs posible que deba modificar los charts de Helm para agregar una configuraci\u00f3n adicional si la configuraci\u00f3n que desea configurar no se cambia f\u00e1cilmente a trav\u00e9s del fichero `values.yaml`.\n\n## \u00bfC\u00f3mo gestiono los secretos en cada entorno?\n\nEstamos utilizando secretos sellados por nosotros mismos para administrar Jenkins X en producci\u00f3n para todos los flujos CI/CD, por lo que los secretos se cifran y se registran en el repositorio Git de cada entorno. Utilizamos el plugin [helm-secrets](https://github.com/futuresimple/helm-secrets) para hacer esto.\n\nAunque un enfoque m\u00e1s agradable ser\u00eda utilizar un operador de Vault que estamos investigando ahora, que buscar\u00eda + poblar\u00eda secretos (y los reciclar\u00eda, etc.) a trav\u00e9s de Vault.\n\n## \u00bfCu\u00e1ndo se eliminan los Entornos de Vista Previa?\n\nTenemos un trabajo de recolecci\u00f3n de basura en segundo plano que elimina los Entornos de Vista Previa despu\u00e9s de cerrar/mezclar el PR. Puede ejecutarlo cuando lo desee a trav\u00e9s del comando [jx gc previews](/commands/jx_gc_previews/).\n\n```sh\njx gc previews\n```\n\nTambi\u00e9n puede ver las vistas previas actuales a trav\u00e9s de [jx get previews](/commands/jx_get_previews/):\n\n```sh\njx get previews\n```\n\ny eliminar una vista previa eligiendo una para eliminar a trav\u00e9s de [jx delete preview](/commands/jx_delete_preview/):\n\n```sh\njx delete preview\n```\n\n## \u00bfC\u00f3mo agrego otros servicios a una Vista Previa?\n\nCuando crea un PR, de forma predeterminada Jenkins X crea un nuevo [Entorno de Vista Previa](/es/about/concepts/features/#entornos-de-vista-previa). Dado que este es un nuevo espacio de nombres din\u00e1mico, es posible que desee configurar microservicios adicionales en el `namespace` para que pueda probar adecuadamente su vista previa de la construcci\u00f3n.\n\nPara obtener m\u00e1s informaci\u00f3n, vea [c\u00f3mo agregar charts, servicios o configuraciones a su entorno de vista previa](/docs/reference/preview/#adding-more-resources).\n\n## \u00bfPuedo utilizar mi actual pipeline de liberaci\u00f3n?\n\nCon Jenkins X, puede crear su propio pipeline de liberaciones si lo desea; aunque hacerlo significa que se pierde nuestro [modelo de extensi\u00f3n](/docs/contributing/addons/) que le permite habilitar f\u00e1cilmente varias aplicaciones de extensi\u00f3n como Gobernanza, Cumplimiento, calidad de c\u00f3digo, cobertura de c\u00f3digo, escaneo de seguridad, pruebas de vulnerabilidad y varias otras extensiones que se agregan todo el tiempo a trav\u00e9s de nuestra comunidad.\n\nHemos creado espec\u00edficamente este modelo de extensi\u00f3n para minimizar el trabajo que tienen sus equipos para editar y mantener los pipelines en muchos microservicios separados. La idea es que estamos tratando de automatizar tanto los pipelines como las extensiones de los pipelines para que los equipos puedan centrarse en su c\u00f3digo real y menos en la tuber\u00eda de CI/CD, que es pr\u00e1cticamente todo el trabajo pesado indiferenciado en estos d\u00edas.\n\n## \u00bfC\u00f3mo puedo manejar ramas personalizadas con tekton?\n\nNo usamos `patrones de rama` con tekton; son una configuraci\u00f3n espec\u00edfica de jenkins.\n\nPara Tekton utilizamos la configuraci\u00f3n [prow](/docs/reference/components/prow/) / [lighthouse](/docs/reference/components/lighthouse/) para especificar qu\u00e9 ramas desencadenan qu\u00e9 contextos de los pipelines.\n\nSi est\u00e1 utilizando [boot](/es/docs/getting-started/setup/boot/) para instalar Jenkins X, puede crear su propio recurso personalizado `Scheduler`  en el fichero`env/templates/myscheduler.yaml` basado en [la configuraci\u00f3n predeterminada](https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml).\n\np.ej. as\u00ed es como especificamos [las ramas utilizadas para crear las liberaciones](https://github.com/jenkins-x-charts/jxboot-resources/blob/master/jxboot-resources/templates/default-scheduler.yaml#L48).\n\nTambi\u00e9n puede crear contextos de pipelines; p.ej. as\u00ed es como agregamos m\u00faltiples canales de prueba paralelos en [el flujo de la versi\u00f3n](/about/concepts/version-stream/) a trav\u00e9s de un [Scheduler personalizado](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/master/env/templates/jx-versions-scheduler.yaml#L21) para que podamos tener muchas pruebas de integraci\u00f3n ejecutadas en paralelo en un solo PR. Luego, cada contexto nombrado enumerado tiene un fichero `jenkins-x-$context.yml` asociado en el repositorio de origen para definir el pipeline a ejecutar como [este ejemplo que define el contexto `boot-lh`](https://github.com/jenkins-x/jenkins-x-versions/blob/master/jenkins-x-boot-lh.yml)\n\nLuego puede asociar sus recursos `SourceRepository` con su scheduler personalizado de la siguiente manera:\n\n* especificando el nombre del planificador en la propiedad `spec.scheduler.name` de su `SourceRepository` a trav\u00e9s de `kubectl edit sr my-repo-name`\n* especificando el nombre del planificador cuando importa un proyecto a trav\u00e9s de `jx import --scheduler myname`\n* especificando el nombre del planificador predeterminado en su entorno de desarrollo `dev` en `spec.teamSettings.defaultScheduler.name` antes de importar proyectos\n\nSi no est\u00e1 usando [boot](/es/docs/getting-started/setup/boot/), puede utilizar `kubectl edit cm config` y modificar la configuraci\u00f3n prow a mano, aunque recomendamos usar [boot](/es/docs/getting-started/setup/boot/) y GitOps; La configuraci\u00f3n de prow es f\u00e1cil de romper si la cambia a mano.\n\n## \u00bfC\u00f3mo funciona realmente la promoci\u00f3n?\n\nLos recursos de kubernetes que se despliegan se definen como archivos YAML en el c\u00f3digo fuente de su aplicaci\u00f3n en `charts/myapp/templates/*.yaml`. Si no especifica nada, Jenkins X crea recursos predeterminados (un `Service + Deployment`) pero puede agregar cualquier recurso k8s como YAML en esa carpeta (`PVCs, ConfigMaps, Services`, etc.).\n\nLuego, el pipeline de liberaci\u00f3n de Jenkins X comprime autom\u00e1ticamente los archivos YAML en un paquete inmutable versionado (usando el mismo n\u00famero de versi\u00f3n como imagen de Docker, la etiqueta Git y las notas de liberaci\u00f3n) y lo despliega en un repositorio de charts de su elecci\u00f3n (por defecto, chartmuseum pero usted puede cambiarlo f\u00e1cilmente a almacenamiento en la nube/nexus/o lo que sea) para que cualquier lanzamiento pueda usar f\u00e1cilmente la versi\u00f3n inmutable.\n\nLa promoci\u00f3n en Jenkins X est\u00e1 completamente separada del lanzamiento y apoyamos la promoci\u00f3n de cualquier lanzamiento si se empaqueta como un chart de Helm. La promoci\u00f3n a trav\u00e9s de comando [jx promote](/es/docs/getting-started/promotion/) genera un PR en el repositorio de Git para un entorno (Staging, Canary, Promotion o cualquier otro). B\u00e1sicamente, se trata de GitOps: especificando qu\u00e9 versiones y configuraciones de qu\u00e9 aplicaciones est\u00e1n en cada entorno utilizando un repositorio Git y configuraciones como c\u00f3digo.\n\nEl PR activa un pipeline de CI para verificar que los cambios son v\u00e1lidos (por ejemplo, que el chart de Helm existe y se puede descargar, que existen las im\u00e1genes de Docker, etc.). Cada vez que el PR se mezclan (podr\u00eda ser autom\u00e1ticamente o puede requerir tickets reviews/+1s/JIRA/ServiceNow o lo que sea), entonces se activa otro pipeline para aplicar los charts de Helm desde la rama master al cl\u00faster k8s de destino y a el `namespace`.\n\nJenkins X automatiza todo lo anterior, pero dado que ambos pipelines se definen en un repositorio Git de entornos en un fichero `Jenkinsfile`, puede personalizarlo para agregar sus propios pasos previos/posteriores si lo desea. p.ej. puede analizar el YAML para pre-aprovisionar PVs para cualquier PVCs utilizando alguna herramienta de salvas de disco personalizada. O puede hacerlo en una tarea desencadenada por un enlace de Helm. Aunque preferimos que estas herramientas se creen como parte del [modelo de extensi\u00f3n](/docs/contributing/addons/) de Jenkins X para evitar que los pipelines personalizados se da\u00f1en en futuras versiones de Jenkins X, aunque no es un gran problema.\n\n## How do I change the owner of a docker image\n\nCuando se utiliza un registro de docker como gcr.io, el propietario de la imagen de docker `gcr.io/owner/myname:1.2.3` puede ser diferente a su propietario/organizaci\u00f3n de Git.\n\nEn el GCR de Google, esta suele ser su ID de proyecto de GCP; que puede tener muchos proyectos diferentes para agrupar im\u00e1genes.\n\nHay algunas opciones para definir qu\u00e9 propietario de registro de docker usar:\n\n* especific\u00e1ndolo en su fichero `jenkins-x.yml`\n\n```yaml\ndockerRegistryHost: gcr.io\ndockerRegistryOwner: my-gcr-project-id\n```\n* especific\u00e1ndolo en el [CRD del Entorno](/docs/reference/components/custom-resources/) llamado `dev` en `env.spec.teamSettings.dockerRegistryOrg`\n* defina una variable de entorno `DOCKER_REGISTRY_ORG`\n\nSi no se encuentra ninguno de ellos, el c\u00f3digo predeterminado es el propietario del repositorio Git.\n\nPara ampliar los detalles vea el c\u00f3digo de para resolverlo [aqu\u00ed](https://github.com/jenkins-x/jx/blob/65962ff5ef1a6d1c4776daee0163434c9c2cb566/pkg/cmd/opts/docker.go#L14)\n\n## \u00bfQu\u00e9 pasa si mi equipo no quiere usar Helm?\n\nPara ayudar a automatizar CI/CD con GitOps, asumimos que los charts de Helm se crean como parte de la configuraci\u00f3n automatizada del proyecto y del CI/CD. p.ej. simplemente [importe su c\u00f3digo fuente](/docs/resources/guides/using-jx/creating/import/) y se generar\u00e1 una imagen de docker + chart de Helm para usted; los desarrolladores no necesitan saber ni preocuparse si no quieren usar Helm:\n\nSi un desarrollador desea crear espec\u00edficamente un recurso (por ejemplo, `Secret, ConfigMap`, etc.), simplemente puede hackear el YAML directamente en `charts/myapp/templates/*.yaml`. Cada vez m\u00e1s, la mayor\u00eda de los IDE tienen asistentes de IU para crear + editar recursos de kubernetes.\n\nPor defecto, los l\u00edmites de recursos se colocan en ficheros `values.yaml`, por lo que es f\u00e1cil personalizarlos seg\u00fan sea necesario en diferentes entornos (solicitudes/l\u00edmites, chequeos de estados y similares).\n\nSi tiene un desarrollador que se opone a la soluci\u00f3n de administraci\u00f3n de configuraci\u00f3n de helm para configurar el entorno, puede optar por no usar eso y simplemente usar Helm como una forma de versionar y descargar grupos inmutables de YAML y simplemente adherirse a los archivos YAML comunes, digamos, `charts/myapp/templates/deployment.yaml`.\n\nLuego, si desea utilizar otra herramienta de administraci\u00f3n de configuraci\u00f3n, puede agregarla, p.ej [kustomise support](https://github.com/jenkins-x/jx/issues/2302).\n\n## \u00bfC\u00f3mo cambio el dominio de las aplicaciones sin servidor?\n\nSi utiliza [aplicaciones sin servidor](/docs/guides/tutorials/serverless-apps/) con Knative, no usaremos el mecanismo `exposecontroller` predeterminado para los recursos de `Ingress`, ya que Knative no usa los recursos `Service` de Kubernetes.\n\nPuede solucionar esto editando manualmente la configuraci\u00f3n Knative a trav\u00e9s de:\n\n```sh\nkubectl edit cm config-domain --namespace knative-serving\n```\n\nPara ampliar los detalles vea [c\u00f3mo personalizar el dominio con Knative](https://knative.dev/docs/serving/using-a-custom-domain/)\n\n## \u00bfPuedo reutilizar exposecontroller para mis aplicaciones?\n\nDeber\u00eda poder utilizar directamente [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) en cualquier aplicaci\u00f3n que implemente en cualquier entorno (por ejemplo, `Staging` o `Production`) ya que activamos exposecontroller en cada nueva versi\u00f3n.\n\nUsamos [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) en Jenkins X para manejar la generaci\u00f3n de recursos `Ingress` para que podamos admitir todos los DNS en un dominio o automatizar la configuraci\u00f3n de HTTPS/TLS junto con la inyecci\u00f3n de endpoints externos en aplicaciones con ConfigMaps a trav\u00e9s de [anotaciones](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources).\n\nPara que [exposecontroller](https://github.com/jenkins-x/exposecontroller/blob/master/README.md) genere el recurso `Ingress` para un `Service`, simplemente [agregue la etiqueta a su Servicio](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#label). p.ej. agregue esto a sus `charts/myapp/templates/service.yaml`:\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp\n  annotations:\n    fabric8.io/expose: \"true\"\n```\n\nSi desea inyectar la URL o el nombre de host de la URL externa o su `Ingress`, simplemente [use estas anotaciones](https://github.com/jenkins-x/exposecontroller/blob/master/README.md#using-the-expose-url-in-other-resources).\n\n## \u00bfC\u00f3mo agregar anotaciones personalizadas al controlador de entrada?\n\nPuede haber ocasiones en las que necesite agregar sus anotaciones personalizadas al controlador de entradas o al [exposecontroller](https://github.com/jenkins-x/exposecontroller) que `jx` utiliza para exponer servicios.\n\nPuede agregar una lista de anotaciones al Helm Chart del servicio de su aplicaci\u00f3n, que se encuentra en el repositorio de c\u00f3digo de su aplicaci\u00f3n.\n\nSe puede agregar una anotaci\u00f3n personalizada en el fichero `charts/myapp/values.yaml` y puede tener el siguiente aspecto:\n\n```yaml\n# Default values for node projects.\n# This is a YAML-formatted file.\n# Declare variables to be passed into your templates.\nreplicaCount: 1\nimage:\n  repository: draft\n  tag: dev\n  pullPolicy: IfNotPresent\nservice:\n  name: node-app\n  type: ClusterIP\n  externalPort: 80\n  internalPort: 8080\n  annotations:\n    fabric8.io/expose: \"true\"\n    fabric8.io/ingress.annotations: \"kubernetes.io/ingress.class: nginx\"\n\n```\n\nPara ver un ejemplo de d\u00f3nde agregamos m\u00faltiples anotaciones y el `exposecontroller` agrega a las reglas de entrada generadas, eche un vistazo a este fichero [values.yaml](https://github.com/jenkins-x/jenkins-x-platform/blob/08a304ff03a3e19a8eb270888d320b4336237005/values.yaml#L655).\n\n## \u00bfDebo usar un monorepo?\n\nTodos estamos tratando de [acelerar](/about/overview/accelerate/) y entregar valor comercial a nuestros clientes m\u00e1s r\u00e1pido. Es por eso que a menudo usamos los 2 equipos de pizza y microservicios como una forma de capacitar a los equipos para ir r\u00e1pido; liberar microservicios de forma independiente sin necesidad de coordinaci\u00f3n entre equipos para acelerar las cosas.\n\nSi est\u00e1 desarrollando microservicios en 2 equipos de pizza separados, entonces, como [otros](https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b), no creemos que deba usar monorepos; en su lugar, use un repositorio por microservicio para que cada mciroservicio pueda liberarse en su propia cadencia de lanzamiento individual.\n\nMonorepo generalmente funciona mejor cuando un solo equipo est\u00e1 trabajando en un monolito que publica todo peri\u00f3dicamente despu\u00e9s de cambiar un solo repositorio.\n\n## \u00bfC\u00f3mo puedo utilizar un monorepo?\n\nHemos centrado la automatizaci\u00f3n de los CI/CD en Jenkins X para ayudar a los equipos a [acelerar](/about/overview/accelerate/) utilizando microservicios para construir aplicaciones nativas en la nube. Por lo tanto, asumimos repositorios separados para cada microservicio.\n\nSi tiene un monorepo existente que desea importar a Jenkins X, puede hacerlo; solo tenga en cuenta que tendr\u00e1 que crear y mantener sus propios pipelines para su monorepo. Tan solo modif\u00edquelos en su fichero `jenkins-x.yml` despu\u00e9s de importar su monorepo.\n\nVea c\u00f3mo [agregar un paso personalizado a su pipeline](/about/concepts/jenkins-x-pipelines/).\n\n## \u00bfC\u00f3mo se inyectan secretos de Vault en entornos de staging/production/preview?\n\n### Staging/Production\n\nDe forma predeterminada, [habilitar Vault](/docs/getting-started/setup/boot/#vault) a trav\u00e9s de los `jx-requirements.yml` de `jx boot` solo lo activar\u00e1 en sus entornos de pipeline y vista previa, no en staging y producci\u00f3n. Para activarlo tambi\u00e9n en esos entornos, simplemente agregue un archivo `jx-requirements.yml` a la ra\u00edz de su repositorio, con al menos el siguiente contenido:\n\n```yaml\nsecretStorage: vault\n```\n\nLuego, suponiendo que tenga un secreto en Vault con ruta `secret/path/to/mysecret` que contiene la contrase\u00f1a `password`, puede inyectarla en el servicio `myapp` (por ejemplo, como una variable de entorno `PASSWORD`) agregando lo siguiente a su repositorio staging `/env/values.yaml`:\n\n```yaml\nmyapp:\n  env:\n    PASSWORD: vault:path/to/mysecret:password\n```\n\nObserve el prefijo con `vault:`: esquema de URL y tambi\u00e9n que omitimos el primer componente de ruta (`secret/`), ya que se agrega autom\u00e1ticamente. Finalmente, el nombre de la clave est\u00e1 separado de la ruta por dos puntos (`:`).\n\nSi su secreto no es espec\u00edfico del entorno, tambi\u00e9n puede inyectarlo directamente en el `/charts/myapp/values.yaml` de su aplicaci\u00f3n:\n\n```yaml\nenv:\n  PASSWORD: vault:path/to/mysecret:password\n```\n\nSin embargo, tenga en cuenta que este valor se anular\u00eda a nivel de entorno si la misma clave tambi\u00e9n est\u00e1 presente all\u00ed.\n\n### Preview\n\nVault no necesita estar expl\u00edcitamente habilitado para el entorno de vista previa. Para inyectar el mismo secreto que el anterior en su vista previa, simplemente agregue lo siguiente a el fichero `/charts/preview/values.yaml` de su aplicaci\u00f3n:\n\n```yaml\npreview:\n  env:\n    PASSWORD: vault:path/to/mysecret:password\n```\n\n## \u00bfC\u00f3mo se inyecta un secreto de Vault a trav\u00e9s de un secreto de Kubernetes?\n\nCuando inyecta secretos directamente en variables de entorno, aparecen en el fichero `Deployment` yaml como texto sin formato, lo que no es aconsejable. Se recomienda inyectarlos en un yaml secreto que se montar\u00e1 como variables de entorno.\n\nPor ejemplo, comience por inyectar el secreto en su repositorio staging `/env/values.yaml`:\n\n```yaml\nmyapp\n  mysecrets:\n    password: vault:path/to/mysecret:password\n```\n\nLuego, en las plantillas de su aplicaci\u00f3n `/charts/myapp/templates`, cree un fichero `mysecrets.yaml`, en el que se refiera al secreto que acaba de agregar:\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecrets\ndata:\n  PASSWORD: {{ .Values.mysecrets.password | b64enc }}\n```\n\nObserve c\u00f3mo codificamos el valor secreto en Base64, ya que este es el formato esperado en un yaml secreto.\n\nAdem\u00e1s, aseg\u00farese de agregar un valor predeterminado para la misma clave en el fichero `/charts/myapp/values.yaml` de su aplicaci\u00f3n:\n\n```yaml\nmysecrets:\n  password: \"\"\n```\n\nEso le permite a Helm resolver hasta cierto punto durante el revestimiento de su `mysecrets.yaml`, ya que el revestimiento no parece tener en cuenta los valores del entorno. De lo contrario, podr\u00eda obtener algo como:\n\n```sh\nerror: failed to build dependencies for chart from directory '.': failed to lint the chart '.': failed to run 'helm lint --values values.yaml' command in directory '.', output: '==> Linting .\n[ERROR] templates/: render error in \"myapp/templates/secrets.yaml\": template: myapp/templates/secrets.yaml:6:21: executing \"myapp/templates/secrets.yaml\" at <.Values.mysecrets.password>: nil pointer evaluating interface {}.password\n```\n\nFinalmente, monte el yaml secreto como variables de entorno en su aplicaci\u00f3n `/charts/myapp/templates/deployment.yaml`:\n\n```yaml\n...\n    spec:\n      containers:\n      - name: {{ .Chart.Name }}\n        envFrom:\n        - secretRef:\n            name: mysecrets\n...\n```",
            "content/es/docs/using-jx/faq/chatops.md": "---\ntitle: Preguntas sobre ChatOps\nlinktitle: Preguntas sobre ChatOps\ndescription: Preguntas sobre el uso de ChatOps en Jenkins X\nweight: 20\n---\n\n## \u00bfQu\u00e9 es ChatOps?\n\nUsamos la frase _ChatOps_ para referirnos a los cambios en el c\u00f3digo operativo y la promoci\u00f3n de GitOps a trav\u00e9s del chat. M\u00e1s espec\u00edficamente, esto generalmente se hace comentando los Pull Requests en el sitio web de su proveedor de Git; aunque en el futuro esto podr\u00eda ser a trav\u00e9s de Slack o consolas web tambi\u00e9n.\n\n## \u00bfCu\u00e1les son los beneficios de ChatOps?\n\nChatOps ayuda a los desarrolladores a colaborar en los PR y acelera la mezcla de los PR. Queremos poder mezclar los cambios lo m\u00e1s r\u00e1pido posible en la rama master para que podamos integrar continuamente el c\u00f3digo y minimizar las desventajas de las ramas a largo plazo.\n\nChatOps (y [tide en particular](#qu\u00e9-hace-hook)) tambi\u00e9n ayuda a automatizar y acelerar las tareas, p.ej.\n\n* los desarrolladores no tienen que seguir presionando recargar en una p\u00e1gina de PR esperando que se pasen todas las pruebas para que puedan hacer clic en `Merge`. Simplemente agregue un comentario `/lgtm` o apruebe la revisi\u00f3n del c\u00f3digo y el PR se fusionar\u00e1 autom\u00e1ticamente una vez que sus pruebas se vuelvan verdes. \u00a1Esto tambi\u00e9n evita que los desarrolladores presionen accidentalmente el bot\u00f3n `Merge` antes de que pasen todas las pruebas!\n* todas los PR se vuelven a clasificar autom\u00e1ticamente y se prueban contra la rama master antes de mezclarsse, lo que garantiza que no rompamos la rama master accidentalmente\n* la mezcla por lotes de los PR es compatible para acelerar la mezcla de los PRs.\n\nPara ampliar los detalles vea [qu\u00e9 es lo que tide hace](#qu\u00e9-hace-hook)\n\n## \u00bfQu\u00e9 tipos de webhook admiten ChatOps?\n\n[Prow](/docs/reference/components/prow/) y [Lighthouse](/architecture/lighthouse/) admiten webhooks y ChatOps, mientras que Jenkins solo admite webhooks.\n\n## \u00bfC\u00f3mo vuelvo a activar un PR de un pipeline?\n\nSi un pipeline falla debido a alg\u00fan error de compilaci\u00f3n o falla en la prueba, corrija el c\u00f3digo y env\u00ede sus cambios y el pipeline del PR se volver\u00e1 a ejecutar.\n\nSi cree que el pipeline fall\u00f3 debido a alguna raz\u00f3n de infraestructura temporal, puede usar ChatOps para reactivar el pipeline comentando el PR:\n\n* `/retest` vuelve a ejecutar solamente los pipelines fallidos.\n* `/test all` vuelve a a ejecutar todos los pipelines fallidos.\n* `/test foo` vuelve a ejecutar todos los pipelines con nombre `foo`.\n\nTenga en cuenta que debe estar en el archivo `OWNERS` como [aprobador para que esto funcione](#por-qu\u00e9-un-pull-request-no-tiene-un-pipeline-activado).\n\n## \u00bfC\u00f3mo agrego m\u00faltiples pipelines paralelos a un proyecto?\n\nPuede ser \u00fatil tener varios pipelines para realizar diferentes tipos de pruebas de ejecuci\u00f3n prolongada en PR. p.ej. ejecutar el mismo conjunto de pruebas utilizando diferentes bases de datos, configuraciones de microservicios o infraestructura subyacente.\n\nEn Jenkins X puede crear un recurso personalizado `Scheduler` en su configuraci\u00f3n [jx boot](/es/docs/getting-started/setup/boot/), en el fichero `env/templates/myscheduler.yaml`, que puede agregar m\u00faltiples contextos con nombre en la secci\u00f3n `presubmits`. Luego, para cada nombre de contexto, aseg\u00farese de tener un fichero llamado `jenkins-x-${context}.yml` en su proyecto.\n\nEntonces Jenkins X invocar\u00e1 cada contexto a pedido a trav\u00e9s de `/test mycontext` o autom\u00e1ticamente si habilita `alwaysRun: true`.\n\nPuede ver c\u00f3mo definimos muchos [contextos de prueba paralelas en la secuencia de versiones aqu\u00ed](https://github.com/jenkins-x/environment-tekton-weasel-dev/blob/f377a72498282de9ee49b807b4d5ba74321a4fab/env/templates/jx-versions-scheduler.yaml#L18), que todos se ejecutan en paralelo e informan su estado en cada PR en la [secuencia de versiones](/es/about/concepts/version-stream/)\n\nConsulte tambi\u00e9n [\u00bfC\u00f3mo asigno SourceRepository a un Scheduler personalizado?](/docs/resources/faq/setup/#how-do-i-map-sourcerepository-to-a-custom-scheduler)\n\n## \u00bfQu\u00e9 hace hook?\n\n`hook` es el nombre del microservicio en [Prow](/docs/reference/components/prow/) y el enlace http en [Lighthouse](/architecture/lighthouse/) que escucha los webhooks provenientes de su proveedor Git que luego se procesa como un comando ChatOps o como un disparador de un pipeline.\n\n## \u00bfQu\u00e9 hace tide?\n\n`tide` es un microservicio en [Prow](/docs/reference/components/prow/) and [Lighthouse](/architecture/lighthouse/) que peri\u00f3dicamente consulta los Pull Request abiertos en los repositorios que ha importado a Jenkins X. Luego realiza la siguiente l\u00f3gica:\n\n* si un PR ha pasado todas sus pruebas de revisi\u00f3n + CI (p.ej, ha aplicado las etiquetas `approved` y/o `lgtm` o ha pasado una revisi\u00f3n del c\u00f3digo github) y es verde y se basa en la rama master, se mezcla autom\u00e1ticamente.\n* si un PR ha pasado todas sus pruebas de revisi\u00f3n + CI pero no se basa en la rama master, sus pipelines se vuelven a activar en funci\u00f3n de la rama master para garantizar que el PR sea v\u00e1lido si se mezclara.\n* si el procesamiento por lotes est\u00e1 habilitado y hay varias PRs pendientes que est\u00e1n aprobadas y en verde, se activa un pipeline de lote que mezcla m\u00faltiples PRs en un solo cambio: si todas esos pipelines se vuelven verdes, todas las PRs se mezclan a la vez y se cierran . Esto acelera enormemente las mezclas de m\u00faltiples PRs (ya que evita volver a activar las pruebas de cada RP despu\u00e9s de fusionar cada una).\n\n## \u00bfC\u00f3mo puedo hacer ChatOps HA?\n\nPara hacer que ChatOps sea altamente accesible, ampl\u00ede los despliegues que escuchan las solicitudes http hasta, por ejemplo, 3 r\u00e9plicas.\n\nCuando se utiliza [Lighthouse](/architecture/lighthouse/) significa modificar las r\u00e9plicas para el despliegue de `lighthouse`. p.ej. en su repositorio git [boot](/es/docs/getting-started/setup/boot/) intente cambiar el fichero `env/lighthouse/values.tmpl.yaml` a:\n\n```yaml\nreplicaCount: 3\n```\n\nCuando utilice [Prow](/es/docs/reference/components/prow/), debe escalar los servicios `hook` y `pipelinerunner`. p.ej. en su repositorio Git boot intente cambiar el fichero `env/prow/values.tmpl.yaml` a:\n\n```yaml\nhook:\n  replicaCount: 3\npipelinerunner:\n  replicaCount: 3\n```\n\n## \u00bfDebo usar prow o lighthouse?\n\nSi est\u00e1 utilizando un servidor Git que no sea https://github.com, le recomendamos [Lighthouse](/architecture/lighthouse/).\n\nSi est\u00e1 utilizando https://github.com recomendamos por ahora [Prow](/docs/reference/components/prow/), ya que ha tenido m\u00e1s pruebas que [Lighthouse](/architecture/lighthouse/).\n\nAunque [Lighthouse](/architecture/lighthouse/) es nuestra direcci\u00f3n estrat\u00e9gica. Estamos comenzando a mover gradualmente nuestros repositorios de c\u00f3digo abierto a [Lighthouse](/architecture/lighthouse/). En alg\u00fan momento en el futuro, una vez que hayamos estado usando [Lighthouse](/architecture/lighthouse/) en producci\u00f3n para todos nuestros repositorios de c\u00f3digo abierto y comerciales, [Lighthouse](/architecture/lighthouse/) se convertir\u00e1 en nuestra soluci\u00f3n recomendada para todos los proveedores Git para que podamos tener una base de c\u00f3digo \u00fanica, m\u00e1s simple y m\u00e1s peque\u00f1a para mantener.\n\n## \u00bfC\u00f3mo manejar un pipeline da\u00f1ado?\n\nSi tiene un PR pendiente que est\u00e1 bloqueado debido a que alguna de las pruebas falla; puede usar ChatOps para anular su estado a trav\u00e9s del comando ChatOps: `/override nameOfPipeline`\n\n## \u00bfPor qu\u00e9 un Pull Request no tiene un pipeline activado?\n\n[Prow](/docs/reference/components/prow/) y [Lighthouse](/architecture/lighthouse/) usan un archivo `OWNERS` almacenado en cada repositorio Git para definir qu\u00e9 desarrolladores pueden revisar y aprobar cambios. Incluso puede limitar esos roles a diferentes carpetas.\n\nSi un no revisor env\u00eda una PR, no activar\u00e1 los pipelines de CI de forma predeterminada hasta que un revisor agregue un comentario `/ok-to-test` en el PR.\n\nSi tiene repositorios p\u00fablicos de Git, esto tambi\u00e9n evita el problema de seguridad de un no aprobador que env\u00eda una PR para cambiar el pipeline para enviarles por correo electr\u00f3nico sus credenciales de seguridad en al pipeline CI ;)",
            "content/es/docs/using-jx/faq/pipelines.md": "---\ntitle: Preguntas sobre Pipelines\nlinktitle: Preguntas sobre Pipelines\ndescription: Preguntas sobre c\u00f3mo utilizar Pipelines Serverless en Jenkins X\nweight: 10\n---\n\nPara obtener m\u00e1s informaci\u00f3n, consulte la gu\u00eda sobre los [Pipelines Serverless Jenkins X](/es/about/concepts/jenkins-x-pipelines/) con [Tekton](https://tekton.dev/). Tambi\u00e9n est\u00e1 la referencia de [sintaxis de Pipelines en Jenkins X](/docs/reference/pipeline-syntax-reference/).\n\n## \u00bfC\u00f3mo agrego un paso personalizado?\n\nPara agregar un nuevo paso personalizado a su fichero `jenkins-x.yml`, vea [c\u00f3mo utilizar jx create step](/es/about/concepts/jenkins-x-pipelines/#personalizar-el-pipelines).\n\n## \u00bfC\u00f3mo modifico un paso?\n\nSi hay un paso con nombre en el pipeline que desea modificar, puede agregar las l\u00edneas YAML a su fichero `jenkins-x.yml` de la siguiente manera:\n\nEn este caso, vamos a reemplazar el paso llamado `helm-release` en el pipeline `release`\n\n```\npipelineConfig:\n  pipelines:\n    overrides:\n      - pipeline: release\n        name: helm-release\n        step:\n          image: busybox\n          sh: echo \"this command is replaced\"\n```\n\nPuede ver el efecto de este cambio localmente antes de enviarlo a Git mediante el comando [jx step syntax effective](/commands/jx_step_syntax_effective/):\n\n```\n$ jx step syntax effective -s\n```\n\nPuede anular etapas enteras o reemplazar un paso espec\u00edfico con un solo paso o una secuencia de pasos. Tambi\u00e9n puede agregar pasos antes/despu\u00e9s de otro paso.\n\nPara obtener m\u00e1s detalles, consulte [c\u00f3mo modificar los pasos](/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines).\n\n## \u00bfC\u00f3mo puedo modificar la imagen predeterminada del contenedor?\n\nComo puede ver arriba, puede modificar cualquier paso en cualquier paquete de compilaci\u00f3n; pero tambi\u00e9n puede modificar la imagen del contenedor utilizada de forma predeterminada en todos los pasos agregando este YAML a su `jenkins-x.yml`:\n\n```\npipelineConfig:\n  agent:\n    label: jenkins-go\n    container: somerepo/my-container-image:1.2.3\n```\n\nPuede ver el efecto de este cambio localmente antes de enviarlo a Git mediante el comando [jx step syntax effective](/commands/jx_step_syntax_effective/):\n\n```\n$ jx step syntax effective -s\n```\n\nPara obtener m\u00e1s detalles, consulte [c\u00f3mo modificar los pasos](/docs/reference/pipeline-syntax-reference/#specifying-and-overriding-release-pull-request-and-feature-pipelines).\n\n## \u00bfC\u00f3mo se comparan los pipelines de Jenkins X con los pipelines de Jenkins?\n\nVea las [diferencias entre los Pipelines de ambos sistemas: Jenkins X y Jenkins](/es/about/concepts/jenkins-x-pipelines/#diferencias-con-los-pipelines-de-jenkins).\n\n## \u00bfC\u00f3mo obtengo el completamiento de IDE editando `jenkins-x.yml`?\n\nVea la gu\u00eda de IDE para [IDEA](/es/about/concepts/jenkins-x-pipelines/#modificaciones-en-idea) y [VS Code](/es/about/concepts/jenkins-x-pipelines/#modificaciones-en-vs-code).\n\n## \u00bfQu\u00e9 variables de entorno est\u00e1n disponibles por defecto dentro de un pipeline?\n\nVea las [variables de entorno preestablecidas creadas para los pasos de los pipelines](/es/about/concepts/jenkins-x-pipelines/#variables-de-entorno-predeterminadas).\n\n## \u00bfHay alguna referencia para la sintaxis?\n\nVea la [sintaxis de referencia para los Pipelines de Jenkins x](/docs/reference/pipeline-syntax-reference/).\n\n## \u00bfC\u00f3mo se monta un Secret o ConfigMap?\n\nCada paso del pipeline de Jenkins X en el fichero `jenkins-x.yml` es b\u00e1sicamente un [contenedor](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#container-v1-core) de Kubernetes para que pueda especificar la imagen, los l\u00edmites de recursos, las variables de entorno y montar `ConfigMap` o `Secret`.\n\nPuede ver un ejemplo de [c\u00f3mo montar un Secret en una variable de entorno aqu\u00ed](/docs/reference/pipeline-syntax-reference/#full-pipeline-definition-in-jenkins-x-yml).\n\nSi est\u00e1 dentro de un script de shell, tambi\u00e9n puede usar el comando [jx step credential](/commands/deprecation/).\n\n## \u00bfPuedo montar un volumen persistente en mi pipeline?\n\nTekton ya monta un Persistent Volumen separado para cada pod construido en `/workspace`, por lo que los resultados de la compilaci\u00f3n se mantienen durante un tiempo hasta que se recolecta la basura.\n\nEn la mayor\u00eda de los cl\u00fasteres de Kubernetes, no puede compartir f\u00e1cilmente un solo volumen persistente en varios pods; Por lo tanto, tener un PV compartido en varias compilaciones generalmente no es f\u00e1cil ni compatible. Sin embargo, puede agregar un paso para llenar su PV al inicio desde un bucket de la nube y al final de un pipeline copiar datos en un bucket para acelerar el almacenamiento en cach\u00e9.\n\nTambi\u00e9n puede hacer cosas como utilizar Nexus como cach\u00e9 de red para obtener dependencias de Maven (que ocurre OOTB con las compilaciones de Maven en Jenkins X) o agregar el proxy Athens para Go.\n\nEsperemos que la comunidad de Tekton encuentre algunas soluciones de almacenamiento en cach\u00e9 a\u00fan mejores para acelerar las compilaciones.\n\n## \u00bfC\u00f3mo defino una variable de entorno dentro de un paso para otros pasos?\n\nLos archivos son el enfoque m\u00e1s f\u00e1cil ya que el directorio `/workspace` se comparte con todos los pasos. Entonces escriba en un paso y use el valor de otros pasos, etc.\n\nLa otra opci\u00f3n es montar un `ConfigMap` como variables de entorno en cada paso y modificarlo en un paso; pero los archivos son realmente m\u00e1s f\u00e1ciles.",
            "content/zh/about/_index.md": "---\ntitle: \u5173\u4e8e Jenkins X\nlinktitle: \u6982\u89c8\ndescription: Jenkins X \u7684\u6982\u5ff5\uff0c\u7279\u70b9\uff0c\u5b9e\u8df5\u548c\u67b6\u6784\u3002\ntype: docs\nmenu:\n  main:\n    weight: 10\n---\n\nJenkins X \u662f\u57fa\u4e8e Kubernetes \u7684\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u90e8\u7f72\u5e73\u53f0\u3002 \u8be5\u9879\u76ee\u662f <a href=\"https://jenkins.io/\">Jenkins</a> \u7684\u5b50\u9879\u76ee\u3002\n\n## \u6982\u5ff5\n---\nJenkins X\u65e8\u5728\u4f7f\u7a0b\u5e8f\u5458\u5728\u7814\u53d1\u8fc7\u7a0b\u4e2d\u80fd\u591f\u8f7b\u677e\u9075\u5faaDevOps\u539f\u7406\u548c\u6700\u4f73\u5b9e\u8df5\u3002\u63a8\u8350\u7684\u65b9\u6cd5\u662f\u6765\u81ea\u4e8e[* Accelerate\uff1a\u6784\u5efa\u548c\u6269\u5c55\u9ad8\u6027\u80fd\u6280\u672f\u7ec4\u7ec7*]\uff08https://goo.gl/vZ8BFN\uff09\u4e4b\u524d\u5bf9\u4e1a\u754c\u8fdb\u884c\u7684\u5168\u9762\u7814\u7a76\u8c03\u67e5\u3002\u60a8\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u4e3a\u4ec0\u4e48Jenkins X\u4f1a\u91cd\u70b9\u4f7f\u7528[Accelerate]\uff08../ accelerate\uff09\u3002\n\n## \u539f\u5219\n---\n*\"DevOps\u662f\u65e8\u5728\u7f29\u77ed\u5c06\u6e90\u4ee3\u7801\u53d1\u5e03\u5230\u751f\u4ea7\u73af\u5883\u65f6\u95f4\u7684\u4e00\u7ec4\u5b9e\u8df5\u3002\u8fd9\u91cc\u4e0d\u4ec5\u4ec5\u51cf\u5c11\u4ece\u6e90\u4ee3\u7801\u66f4\u6539\u5230\u6700\u540e\u751f\u4ea7\u73af\u5883\u53d1\u5e03\u7684\u65f6\u95f4\u5dee\uff0c\u540c\u65f6\u8fd8\u8981\u786e\u4fdd\u7cfb\u7edf\u7684\u9ad8\u8d28\u91cf\uff0c\"*\n\nDevOps\u9879\u76ee\u7684\u76ee\u6807\u662f\uff1a\n\n*\u66f4\u5feb\u7684\u4e0a\u5e02\u65f6\u95f4\n*\u63d0\u9ad8\u90e8\u7f72\u9891\u7387\n*\u66f4\u77ed\u7684\u4fee\u590d\u65f6\u95f4\n*\u964d\u4f4e\u53d1\u5e03\u5931\u8d25\u7387\n*\u66f4\u5feb\u7684\u5e73\u5747\u6062\u590d\u65f6\u95f4\n\n\u9ad8\u6548\u56e2\u961f\u5e94\u8be5\u6bcf\u5929\u80fd\u591f\u90e8\u7f72\u591a\u6b21\uff0c\u8fdc\u9ad8\u4e8e\u6bcf\u5468\u4e00\u6b21\u5230\u6bcf\u6708\u4e00\u6b21\u7684\u884c\u4e1a\u5e73\u5747\u6c34\u5e73\u3002\n\n\u4ece\u201c\u63d0\u4ea4\u7684\u4ee3\u7801\u201d\u72b6\u6001\u5230\u201c\u751f\u4ea7\u4e2d\u7684\u4ee3\u7801\u201d\u72b6\u6001\u7684\u65f6\u95f4\u5e94\u5c11\u4e8e\u4e00\u5c0f\u65f6\uff0c\u66f4\u6539\u5931\u8d25\u7387\u5e94\u5c11\u4e8e15\uff05\uff0c\u800c\u4e1a\u754c\u5e73\u5747\u6bd4\u4f8b\u9ad8\u8fbe31-45\uff05\u3002\n\n\u4ece\u6545\u969c\u4e2d\u6062\u590d\u7684\u5e73\u5747\u65f6\u95f4\u4e5f\u5e94\u5c11\u4e8e\u4e00\u5c0f\u65f6\u3002\n\nJenkins X\u4ece\u6700\u521d\u7684\u8bbe\u8ba1\u5c31\u662f\u57fa\u4e8e\u8fd9\u4e9b\u539f\u5219\uff0c\u5141\u8bb8\u56e2\u961f\u5e94\u7528DevOps\u6700\u4f73\u5b9e\u8df5\u6765\u8fbe\u5230\u884c\u4e1a\u9876\u5cf0\u7684\u7ee9\u6548\u76ee\u6807\u3002\n\n## Practices\n---\n\u4ee5\u4e0b\u6700\u4f73\u5b9e\u8df5\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u8fd0\u884cDevOps\u65b9\u6cd5\u7684\u5173\u952e\uff1a\n\n*\u677e\u8026\u5408\u67b6\u6784\n*\u81ea\u52a9\u670d\u52a1\u914d\u7f6e\n*\u81ea\u52a8\u90e8\u7f72\u548c\u7ba1\u7406\u8d44\u6e90\n*\u6301\u7eed\u6784\u5efa/\u96c6\u6210\u548c\u4ea4\u4ed8\n*\u81ea\u52a8\u53d1\u5e03\u7ba1\u7406\n*\u589e\u91cf\u6d4b\u8bd5\n*\u57fa\u7840\u7ed3\u6784\u914d\u7f6e\u4e3a\u4ee3\u7801\n*\u5168\u9762\u7684\u914d\u7f6e\u7ba1\u7406\n*\u57fa\u4e8e\u4e3b\u5e72\u7684\u5f00\u53d1\u548c\u529f\u80fd\u6807\u5fd7\n\nJenkins X\u5c06\u8bb8\u591a\u4e1a\u754c\u719f\u6089\u7684\u65b9\u6cd5\u548c\u7ec4\u4ef6\u6574\u5408\u5230\u4e00\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u4ece\u800c\u6700\u5927\u7a0b\u5ea6\u5730\u51cf\u5c11\u4e86\u590d\u6742\u6027\u3002\n\n## \u67b6\u6784\n\nJenkins X\u5efa\u7acb\u5728\u677e\u8026\u5408\u67b6\u6784\u7684DevOps\u6a21\u578b\u7684\u57fa\u7840\u4e0a\uff0c\u7528\u4ee5\u652f\u6301\u591a\u4e2a\u56e2\u961f\u4e2d\u53ef\u91cd\u590d\u7684\u65b9\u5f0f\u90e8\u7f72\u5927\u91cf\u5206\u5e03\u5f0f\u5fae\u670d\u52a1\u3002\n\n<img src=\"/images/jx-arch.png\" class=\"img-thumbnail\">\n\n### \u6982\u5ff5\u6a21\u578b\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## \u6784\u5efa\n\nJenkins X\u5efa\u7acb\u5728\u4ee5\u4e0b\u6838\u5fc3\u7ec4\u4ef6\u4e4b\u4e0a\uff1a \n\n### Kubernetes & Docker\n\n\u8be5\u7cfb\u7edf\u7684\u6838\u5fc3\u662fKubernetes\uff0c\u5b83\u5df2\u6210\u4e3aDevOps\u7684\u4e8b\u5b9e\u4e0a\u7684\u865a\u62df\u57fa\u7840\u67b6\u6784\u5e73\u53f0\u3002\u73b0\u5728\uff0c\u6bcf\u4e2a\u4e3b\u8981\u7684\u4e91\u63d0\u4f9b\u5546\u90fd\u63d0\u4f9bKubernetes\u57fa\u7840\u67b6\u6784\u670d\u52a1\u3002\u5982\u679c\u9700\u8981\uff0cKubernetes\u4e5f\u53ef\u4ee5\u5185\u90e8\u5b89\u88c5\u5728\u79c1\u6709\u4e91\u57fa\u7840\u67b6\u6784\u4e0a\u3002\u8fd8\u53ef\u4ee5\u4f7f\u7528Minikube\u5b89\u88c5\u7a0b\u5e8f\u5728\u672c\u5730\u5f00\u53d1\u786c\u4ef6\u4e0a\u521b\u5efa\u6d4b\u8bd5\u73af\u5883\u3002\n\n\u5728\u529f\u80fd\u4e0a\uff0cKubernetes\u5e73\u53f0\u6269\u5c55\u4e86\u4ee5\u8de8\u8d8a\u591a\u4e2a\u7269\u7406\u8282\u70b9\u7684Docker\u5bb9\u5668\u3002\n\n\u7b80\u800c\u8a00\u4e4b\uff0cKubernetes\u63d0\u4f9b\u4e86\u4e00\u4e2a\u540c\u7c7b\u7684\u865a\u62df\u57fa\u7840\u67b6\u6784\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u6216\u5220\u9664\u8282\u70b9\u6765\u52a8\u6001\u6269\u5bb9\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u53c2\u4e0e\u5355\u4e2a\u5927\u578b\u4e13\u7528\u865a\u62df\u7f51\u7edc\u7a7a\u95f4\u3002\n\nKubernetes\u4e2d\u7684\u90e8\u7f72\u5355\u4f4d\u662fPod\uff0cpod\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2aDocker\u5bb9\u5668\u548c\u4e00\u4e9b\u5143\u6570\u636e\u3002 Pod\u4e2d\u7684\u6240\u6709\u5bb9\u5668\u5171\u4eab\u76f8\u540c\u7684\u865a\u62dfIP\u5730\u5740\u548c\u7aef\u53e3\u7a7a\u95f4\u3002 Kubernetes\u5185\u7684\u90e8\u7f72\u662f\u58f0\u660e\u5f0f\u7684\u3002\u5f53\u7528\u6237\u6307\u5b9a\u8981\u90e8\u7f72Pod\u7684\u7248\u672c\u548c\u6570\u91cf\u540e\uff0cKubernetes\u901a\u8fc7\u8de8\u8282\u70b9\u90e8\u7f72\u6216\u5220\u9664Pod\u6765\u51b3\u5b9a\u4ece\u5f53\u524d\u72b6\u6001\u5230\u6240\u9700\u72b6\u6001\u6240\u9700\u7684\u64cd\u4f5c\u3002\u5173\u4e8e\u5982\u4f55\u914d\u7f6ePod\u7684\u5177\u4f53\u7279\u6027\u5219\u88ab\u7cfb\u7edf\u53ef\u7528\u8d44\u6e90\uff0c\u6240\u9700\u8d44\u6e90\u548c\u6807\u7b7e\u5339\u914d\u7684\u5f71\u54cd\u3002\u90e8\u7f72\u540e\uff0cKubernetes\u4f1a\u5b9a\u671f\u8fdb\u884c\u5065\u5eb7\u72b6\u51b5\u68c0\u67e5\uff0c\u901a\u8fc7\u7ec8\u6b62\u548c\u66ff\u6362\u65e0\u54cd\u5e94\u7684Pod\u6765\u786e\u4fdd\u6bcf\u79cd\u7c7b\u578b\u7684Pod\u6240\u9700\u4fdd\u6301\u6570\u91cf\u3002\n\n\u4e3a\u4e86\u786e\u5b9a\u67d0\u79cd\u7ed3\u6784\uff0cKubernetes\u5141\u8bb8\u521b\u5efa\u865a\u62df\u547d\u540d\u7a7a\u95f4Namespace\uff0c\u8be5\u547d\u540d\u7a7a\u95f4\u53ef\u7528\u4e8e\u903b\u8f91\u4e0a\u5206\u9694Pod\uff0c\u5e76\u5c06Pod\u7ec4\u4e0e\u7279\u5b9a\u8d44\u6e90\u76f8\u5173\u8054\u3002\u4f8b\u5982\uff0c\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u8d44\u6e90\u53ef\u4ee5\u5171\u4eab\u4e00\u4e2a\u5b89\u5168\u7b56\u7565\u3002\u8d44\u6e90\u540d\u79f0\u5728\u547d\u540d\u7a7a\u95f4\u5185\u5fc5\u987b\u552f\u4e00\uff0c\u4f46\u53ef\u4ee5\u5728\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e2d\u91cd\u7528\u3002\n\n\u5728Jenkins X\u6a21\u578b\u4e2d\uff0c\u4e00\u4e2aPod\u76f8\u5f53\u4e8e\u4e00\u4e2a\u5df2\u90e8\u7f72\u7684\u5fae\u670d\u52a1\u5b9e\u4f8b\uff08\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff09\u3002\u5728\u9700\u8981\u6c34\u5e73\u6269\u5c55\u5fae\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0cKubernetes\u5141\u8bb8\u90e8\u7f72\u591a\u4e2a\u76f8\u540c\u8fd0\u884c\u5b9e\u4f8b\u7684Pods\uff0c\u800c\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u5176\u81ea\u5df1\u7684\u865a\u62dfIP\u5730\u5740\u3002\u5b83\u4eec\u53ef\u4ee5\u805a\u5408\u5230\u4e00\u4e2a\u79f0\u4e3a\u670d\u52a1Service\u7684\u865a\u62df\u8282\u70b9\u4e2d\uff0c\u8be5\u8282\u70b9\u6709\u552f\u4e00\u7684\u9759\u6001IP\u5730\u5740\u548c\u4e0e\u8be5\u670d\u52a1\u540d\u79f0\u5339\u914d\u7684\u672c\u5730DNS\u6761\u76ee\u3002\u5bf9\u8be5\u670d\u52a1\u7684\u8c03\u7528\u4f1a\u52a8\u6001\u968f\u673a\u6620\u5c04\u5230\u67d0\u4e2a\u5065\u5eb7Pod\u5b9e\u4f8b\u7684IP\u3002\u670d\u52a1\u8fd8\u53ef\u4ee5\u7528\u4e8e\u91cd\u65b0\u6620\u5c04\u7aef\u53e3\u3002\u5728Kubernetes\u865a\u62df\u7f51\u7edc\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u7684\u4f7f\u7528\u5b8c\u5168\u57df\u540d\u6765\u8c03\u7528\u670d\u52a1\uff1a\u201c<service-name>.<namespace-name>.svc.cluster.local\u201d\uff0c\u53ef\u4ee5\u5c06\u5176\u7f29\u5199\u4e3a \u201c<service-name>.<namespace-name>\u201d \u6216\u5728\u5c5e\u4e8e\u76f8\u540c\u540d\u79f0\u7a7a\u95f4Namespace\u7684\u60c5\u51b5\u4e0b\u4ec5\u4e3a\u201c<service-name>\u201d\u3002\u6bd4\u65b9\u8bf4\uff0c\u5728\u201cfinance\u201d \u7684\u540d\u79f0\u7a7a\u95f4\u4e0b\u8c03\u7528RESTful\u670d\u52a1\u201cpayment\u201d\uff0c\u5c31\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u6839\u636e\u8c03\u7528\u4ee3\u7801\u7684\u4f4d\u7f6e\u6765\u51b3\u5b9a\u662f\u201chttp://payments.finance.svc.cluster.local\u201d\uff0c\u201chttp://payments.finance\u201d\u6216\u53ea\u662f\u201chttp://payments\u201d\u3002\n\n\u8981\u4ece\u5916\u90e8\u7f51\u7edc\u8bbf\u95ee\u672c\u5730\u670d\u52a1\uff0cKubernetes\u8981\u6c42\u4e3a\u6bcf\u4e2a\u670d\u52a1\u521b\u5efa\u4e00\u4e2aIngress\u3002 \u6700\u5e38\u89c1\u7684\u5f62\u5f0f\u662f\u4f7f\u7528\u4e00\u4e2a\u6216\u591a\u4e2a\u5e26\u6709\u9759\u6001IP\u5730\u5740\u7684\u8d1f\u8f7d\u5747\u8861\u5668\uff0c\u8be5\u8d1f\u8f7d\u5747\u8861\u5668\u4f4d\u4e8eKubernetes\u865a\u62df\u57fa\u7840\u67b6\u6784\u4e4b\u5916\uff0c\u5e76\u5c06\u7f51\u7edc\u8bf7\u6c42\u8def\u7531\u5230\u6620\u5c04\u7684\u5185\u90e8\u670d\u52a1\u3002 \u901a\u8fc7\u4e3a\u8d1f\u8f7d\u5747\u8861\u5668\u7684\u9759\u6001IP\u5730\u5740\u521b\u5efa\u5916\u90e8DNS\u6761\u76ee\uff0c\u53ef\u4ee5\u5c06\u670d\u52a1\u6620\u5c04\u5230\u5916\u90e8\u5b8c\u5168\u9650\u5b9a\u57df\u540d\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u5668\u6620\u5c04\u5230\u201c* .jenkins-x.io\u201d\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u4ed8\u6b3e\u670d\u52a1\u53ef\u80fd\u4f1a\u663e\u793a\u4e3a\u201chttp://payments.finance.jenkins-x.io\u201d\u3002\n\nKubernetes\u4ee3\u8868\u4e86\u4e00\u4e2a\u5f3a\u5927\u4e14\u4e0d\u65ad\u66f4\u65b0\u7684\u53ef\u7528\u4e8e\u5927\u89c4\u6a21\u90e8\u7f72\u670d\u52a1\u7684\u5e73\u53f0\u3002\u4f46\u662f\u4e00\u822c\u7814\u53d1\u4eba\u5458\u4e5f\u5f88\u96be\u7406\u89e3\u548c\u64cd\u4f5cKubernetes\u7684\u8d1f\u8d23\u914d\u7f6e\u3002 Jenkins X\u4e3aKubernetes\u5e26\u6765\u4e86\u4e00\u7ec4\u9ed8\u8ba4\u914d\u7f6e\u548c\u4e00\u4e9b\u7b80\u5316\u7684\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u76ee\u7684\u5c31\u662f\u4f18\u5316DevOps\u548c\u7b80\u5316\u677e\u8026\u5408\u670d\u52a1\u7684\u7ba1\u7406\u3002\n\n\u201cjx\u201d\u547d\u4ee4\u884c\u5de5\u5177\u63d0\u4f9b\u4e86\u5bf9Kubernetes\u5b9e\u4f8b\u8fdb\u884c\u4e00\u4e9b\u5e38\u89c1\u64cd\u4f5c\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u4f8b\u5982\u67e5\u770b\u65e5\u5fd7\u548c\u8fde\u63a5\u5230\u5bb9\u5668\u5b9e\u4f8b\u3002 \u6b64\u5916\uff0cJenkins X\u901a\u8fc7\u6269\u5c55Kubernetes\u547d\u540d\u7a7a\u6765\u521b\u5efaEnvironments\uff0c\u8fd9\u4e9bEnvironments\u53ef\u4ee5\u6d41\u6c34\u7ebf\u7684\u65b9\u5f0f\u94fe\u63a5\u5728\u4e00\u8d77\u5f62\u6210\u4e0d\u65ad\u5347\u7ea7\u7684\u53d1\u5e03\u7ba1\u9053\u3002\n\nJenkins X Environment\u53ef\u4ee5\u7ed9\u7814\u53d1\u56e2\u961f\u7684\u4e00\u4e2a\u7ed9\u5b9a\u865a\u62df\u57fa\u7840\u67b6\u6784\u73af\u5883\uff0c\u4f8b\u5982Dev\uff0cStaging\uff0cProduction\u7b49\u3002 \u901a\u8fc7\u5b9a\u4e49\u73af\u5883\u4e4b\u95f4\u7684\u5347\u7ea7\u89c4\u5219\uff0c\u6784\u5efa\u5b8c\u7684\u4ee3\u7801\u53ef\u4ee5\u5728\u6d41\u6c34\u7ebf\u91cc\u7684\u5404\u4e2a\u73af\u5883\u4e0a\u8fdb\u884c\u81ea\u52a8\u6216\u624b\u52a8\u53d1\u5e03\u3002 \u6bcf\u4e2a\u73af\u5883\u5747\u6309\u7167GitOps\u65b9\u6cd5\u8fdb\u884c\u7ba1\u7406-\u73af\u5883\u7684\u72b6\u6001\u5728Git\u5b58\u50a8\u5e93\u91cc\u6765\u7ef4\u62a4\uff0c\u5411Git\u5b58\u50a8\u5e93\u63d0\u4ea4\u6216\u56de\u6eda\u53d8\u66f4\u4f1a\u89e6\u53d1Kubernetes\u4e2d\u7ed9\u5b9a\u73af\u5883\u72b6\u6001\u7684\u76f8\u5e94\u6539\u53d8\u3002 \n\n\u5728Jenkins X\u7684\u7cfb\u7edf\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528`jx create cluster`\u547d\u4ee4\u76f4\u63a5\u521b\u5efaKubernetes\u96c6\u7fa4\uff0c\u4ece\u800c\u5728\u53d1\u751f\u6545\u969c\u65f6\u8f7b\u677e\u5730\u590d\u5236\u96c6\u7fa4\u3002\u540c\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u201cjx upgrade platform\u201d \u5728\u73b0\u6709\u96c6\u7fa4\u4e0a\u5347\u7ea7Jenkins X\u5e73\u53f0\u3002 Jenkins X\u652f\u6301\u901a\u8fc7`jx context`\u5904\u7406\u591a\u4e2aKubernetes\u96c6\u7fa4\uff0c\u5e76\u652f\u6301`jx environment`\u5207\u6362\u5728\u540c\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u7684\u4e0d\u540c\u73af\u5883\u3002\n\n\u5f00\u53d1\u4eba\u5458\u5e94\u4e86\u89e3Kubernetes\u63d0\u4f9b\u5728\u6574\u4e2a\u7fa4\u96c6\u4e2d\u5206\u53d1\u914d\u7f6e\u548c\u5b89\u5168\u51ed\u8bc1\u7684\u529f\u80fd\u3002 ConfigMap\u53ef\u7528\u4e8e\u4e3a\u975e\u673a\u5bc6\u914d\u7f6e\u5143\u6570\u636e\u521b\u5efa\u540d\u79f0/\u503c\u5bf9name/value pairs\u7684\u96c6\u5408\uff0c\u540c\u65f6Secrets\u5219\u5bf9\u5b89\u5168\u51ed\u8bc1\u548c\u4ee4\u724c\u6267\u884c\u52a0\u5bc6\u4fdd\u62a4\u7684\u673a\u5236\u3002 Kubernetes\u8fd8\u63d0\u4f9b\u4e86\u4e00\u79cd\u4e3aPod\u6307\u5b9a\u8d44\u6e90\u914d\u989d\u7684\u673a\u5236\uff0c\u8fd9\u5bf9\u4e8e\u4f18\u5316\u8de8\u8282\u70b9\u7684\u90e8\u7f72\u662f\u5fc5\u8981\u7684\uff0c\u6211\u4eec\u5c06\u5728\u7a0d\u540e\u8ba8\u8bba\u3002\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cPod\u72b6\u6001\u4e3a\u77ac\u6001\u3002\u5220\u9664\u8be5Pod\u65f6\uff0c\u5199\u5165Pod\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u7684\u6240\u6709\u6570\u636e\u90fd\u4f1a\u4e22\u5931\u3002\u5f00\u53d1\u4eba\u5458\u5e94\u6ce8\u610f\uff0c\u4f5c\u4e3aNode\u5e38\u89c4\u8d1f\u8f7d\u5e73\u8861\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0cKubernetes\u53ef\u80fd\u4f1a\u5728\u4efb\u4f55\u65f6\u5019\u5355\u65b9\u9762\u51b3\u5b9a\u5220\u9664Pods\u5b9e\u4f8b\u5e76\u91cd\u65b0\u521b\u5efa\u5b83\u4eec\uff0c\u56e0\u6b64\u672c\u5730\u6570\u636e\u53ef\u80fd\u968f\u65f6\u4e22\u5931\u3002\u5982\u679c\u9700\u8981\u4fdd\u5b58\u72b6\u6001\u6570\u636e\uff0c\u5219\u9700\u8981\u58f0\u660e\u6301\u4e45\u4fdd\u7559\u7684\u50a8\u5b58\u7a7a\u95f4\uff0c\u5e76\u5c06\u5176\u5b89\u88c5\u5728\u7279\u5b9aPod\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002\n\n### Helm and Draft\n\u7528\u6237\u5982\u679c\u76f4\u63a5\u4e0eKubernetes\u4ea4\u4e92\uff0c\u53ef\u4ee5\u4f7f\u7528`kubectl`\u547d\u4ee4\u884c\u8fdb\u884c\u624b\u52a8\u914d\u7f6e\uff0c\u6216\u5c06\u5404\u79cd\u7c7b\u578b\u7684YAML\u6570\u636e\u4f20\u9012\u7ed9Kubernetes API Server\u3002 \u8fd9\u4e2a\u64cd\u4f5c\u8fc7\u7a0b\u53ef\u80fd\u5f88\u590d\u6742\uff0c\u5e76\u4e14\u5bb9\u6613\u51fa\u73b0\u4eba\u4e3a\u9519\u8bef\u3002\u6839\u636eDevOps\u7684\u201c\u5c06\u4ee3\u7801\u914d\u7f6e\u4e3a\u4ee3\u7801\u201d\u539f\u5219\uff0cJenkins X\u5229\u7528Helm\u548cDraft\u4e24\u4e2a\u5f00\u6e90\u8f6f\u4ef6\u6765\u4e3a\u7528\u6237\u7684\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u539f\u5b50\u914d\u7f6e\u5355\u5143\u3002\n\nHelm\u901a\u8fc7Chart\u7684\u65b9\u5f0f\u7b80\u5316\u4e86Kubernetes\u7684\u914d\u7f6e\u3002Chart\u662f\u4e00\u7ec4\u6587\u4ef6\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5171\u540c\u6307\u5b9a\u4e86\u5c06\u7ed9\u5b9a\u5e94\u7528\u7a0b\u5e8f\u6216\u670d\u52a1\u90e8\u7f72\u5230Kubernetes\u4e2d\u6240\u9700\u7684\u5143\u6570\u636e\u3002 Helm\u5e76\u6ca1\u6709\u4f7f\u7528\u57fa\u4e8eKubernetes API\u7684\u4e00\u7cfb\u5217\u6837\u677fYAML\u6587\u4ef6\uff0c\u800c\u662f\u4f7f\u7528\u6a21\u677f\u8bed\u8a00\u4ece\u5355\u4e2a\u5171\u4eab\u503c\u96c6\u6765\u521b\u5efa\u6240\u9700\u7684YAML\u89c4\u8303\u6587\u4ef6\u3002 \u8fd9\u4f7f\u5f97\u5728\u53ef\u91cd\u7528\u7684Kubernetes\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u90e8\u7f72\u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u91cd\u65b0\u5b9a\u4e49\u914d\u7f6e\u3002\n\n\n\n",
            "content/zh/about/accelerate.md": "---\ntitle: \u52a0\u901f\nlinktitle: \u52a0\u901f\ndescription: Jenkins X \u7528\u5230\u4e86\u54ea\u4e9b\u5728\u300aAccelerate\u300b\u4e00\u4e66\u4e2d\u63d0\u53ca\u7684\u80fd\u529b\ndate: 2018-07-01\npublishdate: 2018-07-01\nlastmod: 2018-07-01\nweight: 10\n---\n\n<img src=\"/images/accelerate.jpg\" class=\"img-thumbnail\">\n\nJenkins X \u91cd\u65b0\u6784\u601d\u4e86\u4e91\u539f\u751f\u65f6\u4ee3\u4e0b\u7684 CI/CD \u5b9e\u73b0\uff0c\u8fd9\u4e9b\u60f3\u6cd5\u53d7\u5230\u4e86 DevOps \u72b6\u6001\u62a5\u544a\u548c\u8fd1\u6765\u5927\u70ed\u7684[\u300aAccelerate\u300b](https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339)\u4e00\u4e66\u7684\u6df1\u523b\u5f71\u54cd\uff0c\u8fd9\u672c\u4e66\u7684\u4e09\u4f4d\u5408\u8457\u8005\u5206\u522b\u662f\uff1a[Nicole Forsgren](https://twitter.com/nicolefv)\u3001[Jez Humble](https://twitter.com/jezhumble)\u4ee5\u53ca[Gene Kim](https://twitter.com/RealGeneKim?)\u3002\n\n\u7ecf\u5e74\u7d2f\u6708\u57fa\u4e8e\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u56e2\u961f\u548c\u7ec4\u7ec7\u6536\u96c6\u4e0a\u6765\u7684\u6570\u636e\u88ab DevOps \u9886\u57df\u7684\u601d\u60f3\u9886\u8896\u548c\u6570\u636e\u79d1\u5b66\u5bb6\u4eec\u8fdb\u884c\u4e86\u6df1\u5165\u7684\u5206\u6790\u3002\u300aAccelerate\u300b\u4e00\u4e66\u603b\u7ed3\u4e86\u4e00\u7ec4\u6709\u52a9\u4e8e\u5b9e\u65bd DevOps \u7684\u80fd\u529b\uff0c\u8fd9\u4e9b\u80fd\u529b\u88ab Jenkins X \u5b9e\u73b0\u4ee5\u5e2e\u52a9\u7528\u6237\u4ee5\u5f00\u7bb1\u5373\u7528\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u79d1\u5b66\u8bc1\u660e\u8fc7\u7684\u6536\u76ca\u3002\u6211\u4eec\u4f1a\u4ece\u5df2\u7ecf\u5b9e\u73b0\u7684\u80fd\u529b\u9879\u5165\u624b\uff0c\u5e76\u4e0d\u65ad\u6574\u5408\u66f4\u591a\u7684\u80fd\u529b\u8fdb\u6765\u3002\n\n<img src=\"/images/capabilities_zh.png\" class=\"img-thumbnail\">\n\n# \u5bf9\u6240\u6709\u6784\u4ef6\u8fdb\u884c\u7248\u672c\u63a7\u5236\n\n\u6765\u81ea Weaveworks \u7684\u5929\u624d\u4eec\u521b\u9020\u4e86 GitOps \u7684\u6982\u5ff5\uff0c\u8fd9\u4e00\u70b9\u6211\u4eec\u975e\u5e38\u8ba4\u540c\u3002\u5bf9\u73af\u5883\u7684\u4efb\u4f55\u53d8\u66f4\uff0c\u65e0\u8bba\u662f\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\uff0c\u7248\u672c\u5347\u7ea7\uff0c\u8d44\u6e90\u7ea6\u675f\u53d8\u66f4\uff0c\u8fd8\u662f\u7b80\u5355\u7684\u5e94\u7528\u914d\u7f6e\uff0c\u90fd\u5e94\u8be5\u5728 Git \u4e0a\u63d0\u4ea4\u4e00\u4e2a Pull Request \uff0c\u5e76\u4e14\u91c7\u7528\u7c7b\u4f3c\u73af\u5883\u7684\u6301\u7eed\u96c6\u6210\u5bf9\u8fd9\u4e9b\u53d8\u66f4\u8fdb\u884c\u9a8c\u8bc1\uff0c\u5e76\u4e14\u7ecf\u8fc7\u56e2\u961f\u7684\u5ba1\u6838\uff0c\u8fd9\u4e2a\u56e2\u961f\u8d1f\u8d23\u6240\u6709\u76f8\u5173\u73af\u5883\u7684\u53d8\u66f4\u63a7\u5236\u3002\u4e8e\u662f\u9488\u5bf9\u4e00\u4e2a\u73af\u5883\u7684\u4efb\u4f55\u53d8\u66f4\u90fd\u53ef\u4ee5\u88ab\u8ffd\u6eaf\u5e76\u4e14\u8fbe\u5230\u53d7\u63a7\u72b6\u6001\u3002\n\n_\u5173\u8054\u7684\u52a0\u901f\u80fd\u529b\u9879\uff1a\u5bf9\u6240\u6709\u751f\u4ea7\u6784\u4ef6\u8fdb\u884c\u7248\u672c\u63a7\u5236_\n\n# \u81ea\u52a8\u5316\u90e8\u7f72\u8fc7\u7a0b\n\n## \u73af\u5883\n\nJenkins X \u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4f1a\u81ea\u52a8\u521b\u5efa\u57fa\u4e8e Git \u7684\u73af\u5883\uff0c\u5e76\u4e14\u4f7f\u7528`jx create environment`\u547d\u4ee4\u6765\u8f7b\u677e\u5730\u521b\u5efa\u65b0\u7684\u73af\u5883\u3002\u6b64\u5916\uff0c\u5f53\u901a\u8fc7quickstart(`jx create quickstart`)\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u57fa\u4e8e Java \u4e2d SpringBoot (`jx create spring`) \u5e94\u7528\uff0c\u6216\u8005\u5bfc\u5165\u5df2\u6709\u5e94\u7528(`jx import`)\u65f6\uff0cJenkins X \u90fd\u4f1a\u81ea\u52a8\u5e2e\u4f60\u6dfb\u52a0 CI/CD \u6d41\u6c34\u7ebf\uff0c\u5e76\u914d\u7f6e\u76f8\u5173\u4efb\u52a1\u3001git \u4ee3\u7801\u4ed3\u5e93\u3001webhook \u6765\u542f\u7528\u81ea\u52a8\u5316\u90e8\u7f72\u6d41\u7a0b\u3002\n\nJenkins X \u5f00\u7bb1\u5373\u7528\u5730\u521b\u5efa\u4e86\u6c38\u4e45\u7684\u9884\u53d1\u5e03\u548c\u751f\u4ea7\u73af\u5883\uff08\u8fd9\u4e2a\u662f\u53ef\u914d\u7f6e\u7684\uff09\u4ee5\u53ca\u4e00\u4e2a Pull Request \u9636\u6bb5\u4e34\u65f6\u4f7f\u7528\u7684\u5e94\u7528\u9884\u89c8\u73af\u5883\u3002\n\n### \u9884\u89c8\u73af\u5883\n\n\u5728\u4e00\u4e2a\u53d8\u66f4\u88ab\u5408\u5165\u4e3b\u5e72\u4e4b\u524d\uff0c\u6211\u4eec\u5e0c\u671b\u5c3d\u53ef\u80fd\u7684\u8fdb\u884c\u6d4b\u8bd5\u3001\u5b89\u5168\u3001\u9a8c\u8bc1\u548c\u8bd5\u9a8c\u5de5\u4f5c\u3002\u4f7f\u7528\u4e34\u65f6\u52a8\u6001\u521b\u5efa\u7684\u9884\u89c8\u73af\u5883\uff0c\u4efb\u4f55 Pull Request \u90fd\u4f1a\u751f\u6210\u6709\u4e00\u4e2a\u9884\u89c8\u7248\u672c\u88ab\u6784\u5efa\u548c\u90e8\u7f72\uff0c\u5305\u62ec\u5f15\u7528\u4e86\u516c\u5171\u5e93\u7684\u4e0b\u6e38\u5e94\u7528\u3002\u8fd9\u5c31\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u540c\u4efb\u4f55\u5173\u8054\u56e2\u961f\u8fdb\u884c\u4ee3\u7801\u8bc4\u5ba1\uff0c\u6d4b\u8bd5\u548c\u66f4\u597d\u7684\u534f\u4f5c\uff0c\u6765\u786e\u8ba4\u8fd9\u6b21\u53d8\u66f4\u53ef\u4ee5\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u3002\n\nJenkins X \u7684\u7ec8\u6781\u76ee\u6807\u662f\u63d0\u4f9b\u4e00\u79cd\u65b9\u5f0f\uff0c\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u3001\u6d4b\u8bd5\u4eba\u5458\u3001\u8bbe\u8ba1\u4eba\u5458\u548c\u4ea7\u54c1\u7ecf\u7406\u6765\u9a8c\u8bc1\u5c06\u8981\u5408\u5165\u4e3b\u5e72\u7684\u53d8\u66f4\u5b8c\u5168\u7b26\u5408\u9884\u671f\u3002\u6211\u4eec\u5e0c\u671b\u786e\u4fe1\u8fd9\u6b21\u53d8\u66f4\u6ca1\u6709\u5bf9\u4efb\u4f55\u670d\u52a1\u6216\u7279\u6027\u5e26\u6765\u8d1f\u9762\u5f71\u54cd\uff0c\u5e76\u4e14\u6309\u7167\u9884\u60f3\u7684\u90a3\u6837\u6765\u4ea4\u4ed8\u4ef7\u503c\u3002\n\n\u8ba9\u9884\u89c8\u73af\u5883\u53d8\u5f97\u771f\u6b63\u6709\u8da3\u7684\u662f\uff0c\u5f53\u6211\u4eec\u80fd\u591f\u5728\u4e0d\u540c\u9636\u6bb5\u548c\u6210\u719f\u5ea6\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c PR\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5bfc\u5165\u4e00\u5b9a\u6bd4\u4f8b\u7684\u771f\u5b9e\u751f\u4ea7\u73af\u5883\u6d41\u91cf\uff0c\u6bd4\u5982 beta \u7528\u6237\u3002\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5206\u6790\u6b64\u6b21\u53d8\u66f4\u7684\u4ef7\u503c\uff0c\u5e76\u4e14\u4f7f\u7528\u5047\u8bbe\u9a71\u52a8\u5f00\u53d1\u7684\u65b9\u5f0f\u8fd0\u884c\u591a\u79cd\u81ea\u52a8\u5316\u8bd5\u9a8c\u3002\u8fd9\u4f1a\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u7406\u89e3\u5f53\u53d8\u66f4\u63a8\u9001\u7ed9\u6240\u6709\u7528\u6237\u65f6\u7684\u6548\u679c\u3002\n\n_\u5173\u8054\u7684\u52a0\u901f\u80fd\u529b\u9879\uff1a\u57f9\u517b\u548c\u652f\u6301\u56e2\u961f\u8bd5\u9a8c_\n\n\u4f7f\u7528\u9884\u89c8\u73af\u5883\u662f\u5bfc\u5165\u81ea\u52a8\u5316\u6d4b\u8bd5\u7684\u7edd\u4f73\u65b9\u5f0f\u3002\u867d\u7136 Jenkins X \u652f\u6301\u8fd9\u79cd\u65b9\u5f0f\uff0c\u4f46\u662f\u6211\u4eec\u5c1a\u6ca1\u6709\u9488\u5bf9\u9884\u89c8\u73af\u5883\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u7684\u4f8b\u5b50\u3002\u4e00\u4e2a\u6700\u7b80\u6d4b\u8bd5\u96c6\u5408\u5e94\u8be5\u53ef\u4ee5\u786e\u4fdd\u5e94\u7528\u6b63\u5e38\u542f\u52a8\uff0c\u5e76\u4e14\u901a\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684 Kubernetes \u7684\u6709\u6548\u6027\uff08liveness\uff09\u68c0\u67e5\u3002\u76f8\u5173\u5185\u5bb9\u5305\u62ec\uff1a\n\n_\u5173\u8054\u7684\u52a0\u901f\u80fd\u529b\u9879\uff1a\u5b9e\u65bd\u81ea\u52a8\u5316\u6d4b\u8bd5_\n\n_\u5173\u8054\u7684\u52a0\u901f\u80fd\u529b\u9879\uff1a\u81ea\u52a8\u5316\u90e8\u7f72\u8fc7\u7a0b_\n\n### \u6c38\u4e45\u73af\u5883\n\n\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4e60\u60ef\u4e8e\u5728\u53d8\u66f4\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u5728\u591a\u5957\u73af\u5883\u4e2d\u9a8c\u8bc1\u3002\u5c3d\u7ba1\u8fd9\u770b\u8d77\u6765\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u5728\u771f\u6b63\u5408\u5e76\u5230\u4e3b\u5e72\u4e4b\u524d\uff0c\u67d0\u4e9b\u6d41\u7a0b\u8bc1\u660e\u5b83\u5e76\u4e0d\u5408\u9002\uff0c\u8fd9\u5c31\u6709\u53ef\u80fd\u5bfc\u81f4\u5176\u4ed6\u53d8\u66f4\u7684\u4e25\u91cd\u5ef6\u8fdf\u3002\u540e\u7eed\u63d0\u4ea4\u90fd\u4f1a\u963b\u585e\uff0c\u5e76\u4e14\u7d27\u6025\u751f\u4ea7\u73af\u5883\u53d8\u66f4\u4e5f\u540c\u6837\u4f1a\u88ab\u63a8\u8fdf\u3002\n\nJenkins X \u5e0c\u671b\u6240\u6709\u53d8\u66f4\u548c\u8bd5\u9a8c\u5728\u5408\u5e76\u4e3b\u5e72\u4e4b\u524d\u90fd\u7ecf\u8fc7\u9a8c\u8bc1\u3002\u53d8\u66f4\u5728\u9884\u53d1\u5e03\u73af\u5883\u4e2d\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u9a8c\u8bc1\u540e\u5728\u63a8\u9001\u5230\u751f\u4ea7\u73af\u5883\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u4f7f\u7528\u81ea\u52a8\u5316\u7684\u65b9\u5f0f\u3002\n\nJenkins X \u7684\u9ed8\u8ba4\u6d41\u6c34\u7ebf\u63d0\u4f9b\u4e86\u73af\u5883\u95f4\u81ea\u52a8\u5316\u90e8\u7f72\u7684\u80fd\u529b\u3002\u5b83\u53ef\u4ee5\u88ab\u5b9a\u5236\u4ee5\u9002\u914d\u4f60\u81ea\u5df1\u7684 CI/CD \u6d41\u6c34\u7ebf\u8981\u6c42\u3002\n\nJenkins X \u8ba4\u4e3a\u9884\u53d1\u5e03\u73af\u5883\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u6a21\u62df\u751f\u4ea7\u73af\u5883\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u4f7f\u7528\u670d\u52a1\u7f51\u683c\u6280\u672f\u5bfc\u5165\u771f\u5b9e\u751f\u4ea7\u6570\u636e\u6765\u9a8c\u8bc1\u771f\u5b9e\u884c\u4e3a\u3002\u7740\u540c\u6837\u6709\u52a9\u4e8e\u9884\u89c8\u73af\u5883\u7684\u53d8\u66f4\u90e8\u7f72\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u94fe\u63a5\u5230\u9884\u53d1\u5e03\u4e2d\u7684\u975e\u751f\u4ea7\u670d\u52a1\u3002\n\n_\u5173\u8054\u7684\u52a0\u901f\u80fd\u529b\u9879\uff1a\u81ea\u52a8\u5316\u90e8\u7f72\u8fc7\u7a0b_\n\n# \u4f7f\u7528\u4e3b\u5e72\u5f00\u53d1\u5206\u652f\u7b56\u7565\n\n\u300aAccelerate\u300b\u4e00\u4e66\u7684\u7814\u7a76\u53d1\u73b0\u90a3\u4e9b\u4f7f\u7528\u77ed\u5206\u652f\u751f\u547d\u5468\u671f\u5e76\u57fa\u4e8e\u4e3b\u5e72\u5f00\u53d1\u7684\u56e2\u961f\u62e5\u6709\u66f4\u597d\u7684\u6548\u80fd\u3002\u8fd9\u5bf9\u4e8e Jenkins X \u6838\u5fc3\u56e2\u961f\u6210\u5458\u800c\u8a00\u518d\u719f\u6089\u4e0d\u8fc7\uff0c\u6240\u4ee5 Jenkins X \u901a\u8fc7\u914d\u7f6e Git \u4ed3\u5e93\u548c CI/CD \u4efb\u52a1\u5373\u53ef\u8f7b\u677e\u5b9e\u73b0\u8fd9\u4e2a\u80fd\u529b\u3002\n\n# \u5b9e\u65bd\u6301\u7eed\u96c6\u6210\n\nJenkins X \u5c06 CI \u89c6\u4e3a\u4e00\u4e2a\u53d8\u66f4\u7ecf\u8fc7 Pull Request \u5408\u5165\u4e3b\u5e72\u524d\u7684\u9a8c\u8bc1\u6d3b\u52a8\u3002\u81ea\u52a8\u5316\u914d\u7f6e\u4ee3\u7801\u4ed3\u5e93\uff0cJenkins \u548c Kubernetes \u6765\u63d0\u4f9b\u5f00\u7bb1\u5373\u7528\u7684\u6301\u7eed\u96c6\u6210\u529f\u80fd\u3002\n\n# \u5b9e\u65bd\u6301\u7eed\u4ea4\u4ed8\n\nJenkins X \u5c06 CD \u89c6\u4e3a\u4e00\u4e2a\u53d8\u66f4\u5408\u5165\u4e3b\u5e72\u540e\u5230\u7ebf\u4e0a\u73af\u5883\u8fd0\u884c\u7684\u6d3b\u52a8\u3002Jenkins X \u5c06\u53d1\u5e03\u6d41\u6c34\u7ebf\u4e2d\u7684\u5927\u90e8\u5206\u73af\u5883\u81ea\u52a8\u5316\uff1a\n\nJenkins X \u5efa\u8bae\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c\u53f7\u3002\u91c7\u7528 git \u6807\u7b7e\u6765\u8ba1\u7b97\u4e0b\u4e00\u6b21\u53d1\u5e03\u7248\u672c\u610f\u5473\u7740\u65e0\u9700\u5728\u4e3b\u5e72\u5206\u652f\u4e2d\u4fdd\u5b58\u6700\u65b0\u7684\u7248\u672c\u53f7\u3002\u5f53\u53d1\u5e03\u7cfb\u7edf\u5c06\u6700\u65b0\u7684\u548c\u4e0b\u4e00\u6b21\u7248\u672c\u4fdd\u5b58\u5728 git \u4ed3\u5e93\u4e2d\uff0c\u8fd9\u4f1a\u8ba9 CD \u53d8\u5f97\u56f0\u96be\uff0c\u56e0\u4e3a\u53d1\u5e03\u6d41\u6c34\u7ebf\u4e2d\u7684\u53d8\u66f4\u4f1a\u89e6\u53d1\u4e00\u6b21\u65b0\u7684\u53d1\u5e03\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u9012\u5f52\u7684\u53d1\u5e03\u89e6\u53d1\u5668\u3002\u4f7f\u7528 git \u6807\u7b7e\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u6765\u5b9e\u73b0 Jenkins X \u7684\u5b8c\u6574\u81ea\u52a8\u5316\u6d41\u7a0b\u3002\n\nJenkins X \u4f1a\u57fa\u4e8e\u6bcf\u4e00\u6b21\u9488\u5bf9\u4e3b\u5e72\u7684\u53d8\u66f4\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u53d1\u5e03\u7248\u672c\uff0c\u8fd9\u4e2a\u7248\u672c\u5c31\u662f\u6f5c\u5728\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u7684\u7248\u672c\u3002\n\n# \u4f7f\u7528\u677e\u8026\u5408\u7684\u67b6\u6784\n\nJenkins X \u9762\u5411 Kubernetes \u7528\u6237\uff0c\u8fd9\u8ba9\u5b83\u53ef\u4ee5\u53d7\u76ca\u4e8e\u591a\u79cd\u4e91\u7684\u7279\u6027\u6765\u8bbe\u8ba1\u548c\u5f00\u53d1\u677e\u8026\u5408\u7684\u89e3\u51b3\u65b9\u6848\u3002\u670d\u52a1\u53d1\u73b0\u3001\u5bb9\u9519\u6027\u3001\u6269\u5c55\u6027\u3001\u5065\u5eb7\u68c0\u67e5\u3001\u6eda\u52a8\u5347\u7ea7\u3001\u5bb9\u5668\u7f16\u6392\u548c\u8c03\u5ea6\u7b49\u4ec5\u4ec5\u662f Kubernetes \u6240\u5e26\u6765\u7684\u90e8\u5206\u80fd\u529b\u3002\n\n# \u8d4b\u80fd\u56e2\u961f\u7684\u67b6\u6784\n\nJenkins X \u65e8\u5728\u5e2e\u52a9\u591a\u8bed\u8a00\u7684\u5e94\u7528\u5f00\u53d1\u8005\u3002\u76ee\u524d Jenkins X \u5177\u5907\u81ea\u52a8\u8bed\u8a00\u68c0\u6d4b\u80fd\u529b\u7684 quickstart \u548c\u81ea\u52a8\u5316 CI/CD \u914d\u7f6e\uff0c\u6bd4\u5982 Golang, Java, NodeJS, .Net, React, Angular, Rust, Swift \u4ee5\u53ca\u66f4\u591a\u8bed\u8a00\u652f\u6301\u3002\u8fd9\u6837\u505a\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6301\u7eed\u6027\u7684\u5de5\u4f5c\u65b9\u5f0f\u6765\u8ba9\u5f00\u53d1\u8005\u66f4\u52a0\u4e13\u6ce8\u4e8e\u5f00\u53d1\u6d3b\u52a8\u3002\n\nJenkins X \u540c\u6837\u63d0\u4f9b\u4e86\u5f88\u591a\u63d2\u4ef6\uff0c\u6bd4\u5982\u81ea\u52a8\u5316\u5ea6\u91cf\u6570\u636e\u6536\u96c6\u548c\u53ef\u89c6\u5316\u5de5\u5177\uff1aGrafana \u548c Prometheus\u3002\u96c6\u4e2d\u5316\u7684\u5ea6\u91cf\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u67e5\u770b\u6784\u5efa\u548c\u90e8\u7f72\u5728 Kubernetes \u4e0a\u7684\u5e94\u7528\u6307\u6807\u3002\n\n[DevPods](/docs/reference/devpods/) \u662f\u4e00\u4e2a\u5168\u65b0\u7684\u7279\u6027\uff0c\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5728\u672c\u5730 IDE \u4e2d\u7f16\u8f91\u4ee3\u7801\uff0c\u5e76\u81ea\u52a8\u5316\u540c\u6b65\u5230\u4e91\u73af\u5883\u4e0a\u8fdb\u884c\u6784\u5efa\u548c\u91cd\u65b0\u90e8\u7f72\u3002\n\nJenkins X \u76f8\u4fe1\u81ea\u52a8\u5316\u53ef\u4ee5\u5e2e\u52a9\u5f00\u53d1\u8005\u5728\u4e91\u73af\u5883\u4e0b\u8fdb\u884c\u8bd5\u9a8c\uff0c\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\uff0c\u5e76\u901a\u8fc7\u53cd\u9988\u8ba9\u4ed6\u4eec\u66f4\u5feb\u7684\u505a\u51fa\u6700\u4f73\u51b3\u7b56\u3002\n",
            "content/zh/about/sponsors/_index.md": "---\ntitle: Jenkins X \u8d5e\u52a9\u5546\nlinktitle: \u8d5e\u52a9\u5546\ndescription: \ndate: 2019-01-21\npublishdate: 2019-01-21\ndraft: false\nweight: 20\ntoc: true\ntype: docs\n---\n\n\u6211\u4eec\u611f\u8c22\u4ee5\u4e0b\u7ec4\u7ec7\u5bf9\u652f\u6301 Jenkins X \u9879\u76ee\u505a\u51fa\u7684\u4e00\u4e9b\u4e3b\u8981\u627f\u8bfa\n\n## CloudBees\n\n<img src=\"/images/sponsors/cb.svg\" class=\"img-thumbnail\">\n\n* [CloudBees Jenkins X Support](https://www.cloudbees.com/products/jenkins-x-support) ",
            "content/zh/blog/_index.zh.md": "---\ntitle: \"Jenkins X \u65b0\u95fb\"\nlinkTitle: \"\u65b0\u95fb\"\nmenu:\n  main:\n    weight: 30\n---\n",
            "content/zh/blog/news/_index.md": "---\ntitle: \"News About Jenkins X\"\nlinkTitle: \"News\"\nweight: 20\n---\n\n\n",
            "content/zh/blog/news/jenkins-x-new-logo.md": "---\ntitle: \"Jenkins X \u65b0 logo\"\ndate: 2019-07-31T07:36:00+02:00\ndescription: >\n    Jenkins X \u65b0 logo\ncategories: [blog]\nkeywords: []\nslug: \"new-logo-jenkins-x\"\naliases: []\nauthor: tracymiranda\ntranslator: donhui\n---\n\u65e9\u57282018\u5e743\u6708\uff0cJenkins X \u9879\u76ee\u4f5c\u4e3a Kubernetes \u81ea\u52a8\u5316 CI/CD \u7684 Jenkins \u5bf9\u5e94\u9879\u76ee\u7a81\u7136\u51fa\u73b0\u3002\u4f5c\u4e3a\u8fd9\u6b21\u53d1\u884c\u7684\u4e00\u90e8\u5206\uff0c\u5b83\u7684 logo \u662f Jenkins logo \u7684\u4e00\u4e2a\u53d8\u79cd\uff0c\u4e00\u4e2a\u53fc\u7740\u70df\u6597\u7684\u8239\u957f\uff0c\u4ed6\u7684\u5e3d\u5b50\u4e0a\u6709 Kubernetes logo\u3002\n\n\u5728\u8f6f\u4ef6\u4e2d\uff0c\u6211\u4eec\u559c\u6b22\u8bf4\u547d\u540d\u662f\u56f0\u96be\u7684\u2014\u2014\u56e0\u4e3a\u786e\u5b9e\u5982\u6b64\u3002\u53e6\u4e00\u4ef6\u540c\u6837\u56f0\u96be\u7684\u4e8b\u60c5\u662f\u8bd5\u56fe\u5728 logo \u4e2d\u6355\u6349\u9879\u76ee\u7684\u672c\u8d28\u3002Logo \u5728\u4e00\u4e2a\u5c0f\u7a7a\u95f4\u91cc\u6709\u5f88\u591a\u610f\u4e49\u3002Icon \uff0c\u4f8b\u5982 Jenkins logo\uff0c\u4e0e\u8bb8\u591a\u5f00\u53d1\u4eba\u5458\u5efa\u7acb\u5f3a\u70c8\u7684\u60c5\u611f\u8054\u7cfb\u3002\u56e0\u6b64\uff0c\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u603b\u662f\u5bc6\u5207\u542c\u53d6\u6709\u5173\u65b0 logo \u7684\u53cd\u9988\uff0c\u4ee5\u53ca\u4eba\u4eec\u5982\u4f55\u770b\u5f85\u8fd9\u4e2a\u9879\u76ee\u3002\n\n## \u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u6539\u53d8 logo\n\u5728\u542c\u53d6\u5404\u79cd\u4e0d\u540c\u6765\u6e90\u7684\u5404\u79cd\u53cd\u9988\u65f6\uff0c\u6211\u4eec\u542c\u5230\u4e86\u8bb8\u591a\u79ef\u6781\u7684\u4e8b\u60c5\uff0c\u4f46\u4e5f\u5f3a\u8c03\u4e86\u4e00\u4e9b\u95ee\u9898\u548c\u56f0\u60d1\u3002\n\n* \u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u559c\u6b22\u8fd9\u4e2a logo\uff0c\u6211\u4eec\u542c\u5230\u4e86\u4e0d\u5c11\u5173\u4e8e\u4eba\u4eec\u4e0d\u559c\u6b22\u5b83\u7684\u65b9\u9762\u7684\u53cd\u9988\u610f\u89c1\uff0c\u5176\u4e2d\u201c\u53fc\u7740\u70df\u6597\u201d\u8fd9\u4e2a\u53cd\u9988\u610f\u89c1\u6392\u5728\u6700\u524d\u9762\u3002\n* \u4e0e Jenkins \u9879\u76ee\u7684\u6df7\u6dc6\u2014\u2014\u6211\u4eec\u4e5f\u770b\u5230\u8fd9\u4e2a logo \u4e0e Jenkins \u7684\u5176\u4ed6\u5409\u7965\u7269\u66f4\u52a0\u4e00\u81f4\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5173\u4e8e Jenkins X \u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u9879\u76ee\u7684\u6df7\u6dc6\u2014\u2014\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u8fd9\u662f\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u53e6\u4e00\u4e2a\u63d2\u4ef6\u3002\n* \u6211\u4eec\u8fd8\u542c\u8bf4\uff0c\u4f7f\u7528 Kubernetes logo \u4ee4\u4eba\u56f0\u60d1\uff0c\u6216\u53ef\u80fd\u5e76\u975e\u5b8c\u5168\u5728 Kubernetes logo \u6307\u5357\u7684\u8303\u56f4\u5185\u3002\n* \u4ece\u5b9e\u7528\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\u4e5f\u542c\u8bf4\u8fd9\u4e2a logo \u592a\u8be6\u7ec6\u4e86\uff0c\u56e0\u6b64\u4e0d\u80fd\u5f88\u597d\u5730\u4f5c\u4e3a\u4e00\u4e2a icon\uff0c\u5c24\u5176\u662f\u4e00\u4e2a favicon\u3002\u5b83\u88ab\u770b\u4f5c\u662f\u5409\u7965\u7269\u800c\u4e0d\u662f logo\u3002\n\n\u968f\u7740\u6301\u7eed\u4ea4\u4ed8\u57fa\u91d1\u4f1a\u7684\u6210\u7acb\uff0cJenkins X \u662f\u57fa\u91d1\u4f1a\u521b\u59cb\u9879\u76ee\u4e4b\u4e00\uff0c\u533a\u522b\u4e8e Jenkins\uff0c\u6211\u4eec\u89c9\u5f97\u662f\u65f6\u5019\u5904\u7406\u8fd9\u4e2a\u53cd\u9988\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u771f\u7684\u56de\u5230\u4e86\u753b\u677f\u4e0a\uff0c\u601d\u8003\u4ec0\u4e48\u6837\u7684 logo \u53ef\u4ee5\u66f4\u597d\u5730\u4ee3\u8868 Jenkins X \u4f5c\u4e3a\u4e00\u4e2a\u9879\u76ee\u3002\u6211\u4eec\u8003\u8651\u4e86\u6211\u4eec\u5e0c\u671b\u4eba\u4eec\u4e0e\u9879\u76ee\u76f8\u5173\u8054\u7684\u5185\u5bb9\uff1a\u5f00\u6e90\u3001\u6301\u7eed\u4ea4\u4ed8\u3001\u901f\u5ea6\u3001\u81ea\u52a8\u5316\u3001\u7a33\u5b9a\u6027\u3001\u56e2\u961f\u7b49\u7b49\u3002\u6211\u4eec\u4e5f\u60f3\u8981\u4e00\u4e2a logo\uff0c\u53ef\u4ee5\u63d0\u9ad8\u4ee3\u8868\u6027\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u8981\u907f\u514d\u4e00\u4e2a\u57fa\u4e8e\u4eba\u7684 logo\uff0c\u5b83\u53ef\u80fd\u4f1a\u65e0\u610f\u95f4\u7f16\u7801\u6027\u522b\u3001\u5e74\u9f84\u548c\u5176\u4ed6\u56e0\u7d20\u3002\u6b64\u5916\uff0c\u201cX\u201d \u5df2\u7ecf\u6210\u4e3a\u9879\u76ee logo \u7684\u4e00\u4e2a\u72ec\u7279\u90e8\u5206\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u5728\u65b0 logo \u4e2d\u771f\u6b63\u5f3a\u8c03\u5b83\u3002\n\n## \u8bbe\u8ba1\u65b0 logo \u548c\u793e\u533a\u53cd\u9988\n\u6700\u7ec8\uff0c\u6211\u4eec\u4e13\u6ce8\u4e8e\u5c1d\u8bd5\u53ef\u89c6\u5316\u901f\u5ea6\u548c\u81ea\u52a8\u5316\uff0c\u8fd9\u5bfc\u81f4\u4e86\u673a\u5668\u4eba\u7684\u60f3\u6cd5\u3002\u4f46\u662f\uff0c\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5411 logo \u4e2d\u7684\u539f\u59cb Jenkins \u9879\u76ee\u8868\u793a\u81f4\u656c\u3002\u6211\u4eec\u660e\u786e\u51b3\u5b9a\u4e0d\u575a\u6301\u4f20\u7edf\u4e0a\u4e0e Kubernetes \u548c\u76f8\u5173\u9879\u76ee\u76f8\u5173\u7684\u822a\u6d77\u4e3b\u9898\u3002\u6211\u4eec\u7ecf\u5386\u4e86\u51e0\u6b21\u8fed\u4ee3\uff0c\u7cbe\u70bc\u5e76\u51cf\u5c11\u7ec6\u8282\u3002\u8bbe\u8ba1\u5de5\u4f5c\u4e0e Linux \u57fa\u91d1\u4f1a\u521b\u610f\u603b\u76d1 Craig Ross \u53ca\u5176\u56e2\u961f\u5bc6\u5207\u5408\u4f5c\uff0c\u4ed6\u4eec\u8fd8\u5236\u4f5c\u4e86[\u6301\u7eed\u4ea4\u4ed8\u57fa\u91d1\u4f1a](https://cd.foundation/)\uff0cCNCF\uff0cNetwork Service Mesh \u548c Tekton \u54c1\u724c\u3002\n\n\u5728\u6838\u5fc3 Jenkins X \u56e2\u961f\u786e\u5b9a\u4ed6\u4eec\u6ee1\u610f\u7684\u8bbe\u8ba1\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u5176\u5e26\u5230\u793e\u533a\u4ee5\u83b7\u5f97\u53cd\u9988\u5e76\u89e3\u51b3\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\u3002\u6211\u4eec\u6709\u5f88\u591a\u53cd\u9988\uff0c\u5305\u62ec\u5b83\u8ba9\u4eba\u4eec\u60f3\u8d77\u7684\u6240\u6709\u4e8b\u60c5\uff08\u4e00\u4e2a\u98a0\u5012\u7684\u8003\u62c9\uff0cBill Nye\uff0cReddit logo\uff0cFlash Gordon\uff0cTekton logo \u7b49\uff09\u3002\u6700\u521d\u7684\u8bbe\u8ba1\u6709\u4e00\u4e2a\u59cb\u7ec8\u5982\u4e00\u7684\u4e3b\u9898\uff0c\u90a3\u5c31\u662f\u5b83\u6ca1\u6709\u53cd\u6620\u51fa\u793e\u533a\u7684\u53cb\u597d\u6027\u3002[Kyounger](https://github.com/jenkins-x/jx/issues/4144#issuecomment-497787629) \u7279\u522b\u5e2e\u52a9\u5206\u6790\u4e86\u8fd9\u4e00\u53cd\u9988\uff0c\u5e76\u52a0\u500d\u52aa\u529b\u63d0\u51fa\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4eec\u540c\u610f\u5e76\u559c\u6b22\u8fd9\u4e2a\u5efa\u8bae\uff0c\u5e76\u5c06\u5176\u53cd\u9988\u5230 logo \u7684\u6700\u7ec8\u7248\u672c\u4e2d\u3002\u975e\u5e38\u611f\u8c22 Kenny \u548c\u5f00\u6e90 FTW\uff01\n\n## Jenkins \u548c Jenkins X\nJenkins X \u6700\u521d\u662f Jenkins \u5b50\u9879\u76ee\uff0c\u73b0\u5728\u662f\u6301\u7eed\u4ea4\u4ed8\u57fa\u91d1\u4f1a\uff08CDF\uff09\u7684\u4e00\u4e2a\u72ec\u7acb\u9879\u76ee\u3002\u65b0 logo \u4e2d\u7684\u9886\u7ed3\u65f6\u523b\u63d0\u9192\u7740\u4eba\u4eec\u5b83\u7684\u51fa\u5904\u3002\u5c3d\u7ba1\u6211\u4eec\u7684 logo \u548c\u54c1\u724c\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u5728 CDF \u7684\u5e87\u62a4\u4e0b\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4e0e Jenkins \u9879\u76ee\u7d27\u5bc6\u5408\u4f5c\uff0c\u4e3a\u5f00\u53d1\u4eba\u5458\u7684 CI/CD \u548c\u751f\u4ea7\u529b\u9700\u6c42\u5171\u4eab\u76f8\u540c\u7684\u670d\u52a1\u7cbe\u795e\u3002\n\n## \u63a8\u51fa\u65b0 logo\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u5f00\u59cb\u5207\u6362\u5230\u65b0\u7684 logo\uff0c\u5e76\u671f\u5f85\u770b\u5230\u4e00\u4e9b\u65b0\u7684 swag \u5f88\u5feb\u53ef\u7528\u3002\u6211\u4eec\u73b0\u5728\u5c06\u628a\u65e7\u7684 logo \u4f5c\u4e3a Jenkins X \u9879\u76ee\u7684\u5409\u7965\u7269\u3002\u5982\u679c\u60a8\u5e0c\u671b\u66f4\u65b0\u4f7f\u7528\u7684 logo\uff0c[\u65b0\u7684\u827a\u672f\u54c1\u5728\u8fd9\u91cc](https://github.com/cdfoundation/artwork)\u3002\n\n<img src=\"/news/new-logo-jenkins-x/jenkinsx-stacked-color.png\"> \n\n\u8fd9\u5bf9\u9879\u76ee\u6765\u8bf4\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u6539\u53d8\uff0c\u4f46\u6700\u7ec8\u6211\u4eec\u6295\u5165\u8fd9\u4e48\u591a\u65f6\u95f4\u548c\u7cbe\u529b\u7684\u539f\u56e0\u662f\uff0c\u8fd9\u5bf9\u6211\u4eec\u6765\u8bf4\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u5728\u505a\u7684\u6bcf\u4ef6\u4e8b\u4e2d\u90fd\u4ee3\u8868\u7740 Jenkins X \u7684\u7cbe\u795e\u3002\u6240\u4ee5\u5f53\u4f60\u4f7f\u7528 Jenkins X \u7684\u65f6\u5019\uff0c\u5f53\u4f60\u770b\u5230\u65b0 logo \u7684\u65f6\u5019\uff0c\u6211\u4eec\u60f3\u8ba9\u4f60\u611f\u89c9\u5230\u5f00\u653e\u53cb\u597d\u7684\u793e\u533a\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u60f3\u8ba9\u4f60\u7684\u56e2\u961f\u4e13\u6ce8\u4e8e\u4f60\u771f\u6b63\u60f3\u8981\u5173\u6ce8\u7684\u4e8b\u60c5\uff1a\u4ee5\u4efb\u4f55\u901f\u5ea6\u548c\u89c4\u6a21\u4ea4\u4ed8\u9ad8\u8d28\u91cf\u7684\u8f6f\u4ef6\u3002\n",
            "content/zh/community/_index.md": "---\ntitle: \u793e\u533a\nlinktitle: \u793e\u533a\nmenu:\n  main:\n    weight: 40\n---\n\n\u8bf7\u52a0\u5165\u6211\u4eec\u7684\u793e\u533a\uff0c\u6211\u4eec\u5e0c\u671b\u542c\u5230\u60a8\u7684\u53cd\u9988\uff01\n\n### Slack\n\nKubernetes \u793e\u533a[\u5728 Slack](http://slack.k8s.io/) \u7684 [slack.k8s.io](http://slack.k8s.io/) \u9891\u9053\u4e0a\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5728\u90a3\u6709\u804a\u5929\u5ba4\u53ef\u4ee5\u8ba8\u8bba\u6240\u6709\u6709\u5173 Jenkins X \u7684\u4e8b\u60c5\uff1a\n\n* [\\#jenkins-x-user](https://kubernetes.slack.com/messages/C9MBGQJRH) \u7528\u4e8e Jenkins X \u7684\u7528\u6237\n* [\\#jenkins-x-dev](https://kubernetes.slack.com/messages/C9LTHT2BB) \u7528\u4e8e Jenkins X \u7684\u5f00\u53d1\u8005\n\n### IRC\n\nJenkins \u7684\u5206\u652f\u4f7f\u7528 IRC \uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5728 **freenode.net** \u6709\u4e00\u4e2a IRC \u804a\u5929\u5ba4 **#jenkins-x**\n\n\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528 [#jenkins-x \u7684 riot \u5e94\u7528](https://riot.im/app/#/room/#freenode_#jenkins-x:matrix.org)\n\n### Issues\n\n\u6709\u4efb\u4f55\u60f3\u6cd5\u3001\u4e3b\u610f\u6216\u8005\u53cd\u9988\uff0c\u8bf7\u6dfb\u52a0\u5230 [GitHub Issue](https://github.com/jenkins-x/jx/issues/new)\u3002\n\n### Email\n\n\u5982\u679c\u4f60\u66f4\u559c\u6b22\u7535\u5b50\u90ae\u4ef6\uff0c\u90a3\u4e48\u52a0\u5165\u6211\u4eec\u7684 [jenkins-x \u90ae\u4ef6\u5217\u8868](https://groups.google.com/forum/#!forum/jenkins-x) \u3002\n\n### \u5fae\u4fe1\n\n\u4f7f\u7528\u5fae\u4fe1\u626b\u63cf\u4e0b\u9762\u7684\u4e8c\u7ef4\u7801\uff0c\u5173\u6ce8\u6211\u4eec\u7684\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u53ca\u65f6\u83b7\u53d6\u6211\u4eec\u6700\u65b0\u5206\u4eab\u7684\u6280\u672f\u6587\u7ae0\u6216\u8005\u6d3b\u52a8\u901a\u77e5\uff1a\n\n<img src=\"/images/wechat.png\" class=\"img-thumbnail\" style=\"width:129px;\">\n",
            "content/zh/docs/Concepts/_index.md": "---\ntitle: \u6982\u5ff5\nlinktitle: \u6982\u5ff5\ndescription: Jenkins X \u4e2d\u7684\u6982\u5ff5\ndate: 2018-04-21\npublishdate: 2018-04-21\nlastmod: 2018-04-21\n---\n\nJenkins X \u65e8\u5728\u4f7f\u5f97 DevOps \u539f\u5219\u548c\u6700\u4f73\u5b9e\u8df5\u5bf9\u4e8e\u7814\u53d1\u4eba\u5458\u6765\u8bf4\u7b80\u5355\u3002\n\n## \u539f\u5219\n---\n*\"DevOps \u662f\u4e00\u5957\u65e8\u5728\u7f29\u77ed\u4ece\u63d0\u4ea4\u53d8\u66f4\u5230\u751f\u4ea7\u53d1\u5e03\u7684\u65f6\u95f4\u7684\u5b9e\u8df5\uff0c\u540c\u65f6\u4fdd\u8bc1\u9ad8\u8d28\u91cf\"*\n\nDevOps\u9879\u76ee\u7684\u76ee\u6807\uff1a\n\n* \u5e02\u573a\u9700\u6c42\n* \u63d0\u9ad8\u90e8\u7f72\u9891\u7387\n* \u7f29\u77ed\u4fee\u590d\u65f6\u95f4\n* \u66f4\u4f4e\u7684\u5e02\u573a\u9519\u8bef\u7387\n* \u66f4\u5feb\u7684\u5e73\u5747\u6062\u590d\u65f6\u95f4\n\n\u76f8\u5bf9\u4e8e\u884c\u4e1a\u5e73\u5747\u6c34\u5e73\u2014\u2014\u6bcf\u5468\u4e00\u6b21\u548c\u6bcf\u6708\u4e00\u6b21\u6765\u8bf4\uff0c\u9ad8\u6548\u7684\u56e2\u961f\u5e94\u8be5\u6709\u80fd\u529b\u6bcf\u5929\u90e8\u7f72\u591a\u6b21\u3002\n\n\u4ee3\u7801\u4ece\u5df2\u63d0\u4ea4\u5230\u4e0a\u751f\u4ea7\u5e94\u8be5\u5c11\u4e8e\u4e00\u4e2a\u5c0f\u65f6\uff0c\u53d8\u66f4\u5931\u8d25\u7387\u4e5f\u5e94\u8be5\u5c0f\u4e8e15%\uff0c\u800c\u5e73\u5747\u503c\u572831-45%\u4e4b\u95f4\u3002\n\n\u4ece\u5931\u8d25\u4e2d\u7684\u5e73\u5747\u6062\u590d\u65f6\u95f4\u5e94\u8be5\u5c11\u4e8e\u4e00\u4e2a\u5c0f\u65f6\u3002\n\nJenkins X \u8bbe\u8ba1\u4e86\u7b2c\u4e00\u539f\u5219\uff0c\u5141\u8bb8\u56e2\u961f\u91c7\u7528 DevOps \u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u6765\u8fbe\u5230\u884c\u4e1a\u7684\u6700\u9ad8\u76ee\u6807\u3002\n\n## \u5b9e\u8df5\n---\n\u4e0b\u5217\u6700\u4f73\u5b9e\u8df5\u88ab\u8ba4\u4e3a\u662fDevOps\u6210\u529f\u7684\u5173\u952e\uff1a\n\n* \u67b6\u6784\u677e\u8026\u5408\n* \u81ea\u670d\u52a1\u914d\u7f6e\n* \u81ea\u52a8\u5316\u7ba1\u7406\n* \u6301\u7eed\u6784\u5efa / \u96c6\u6210\u548c\u90e8\u7f72\n* \u81ea\u52a8\u53d1\u5e03\u7ba1\u7406\n* \u589e\u91cf\u6d4b\u8bd5\n* \u914d\u7f6e\u5373\u4ee3\u7801\n\nJenkins X \u628a\u5927\u91cf\u5e38\u89c1\u7684\u65b9\u6cd5\u8bba\u548c\u7ec4\u4ef6\u96c6\u6210\u4e3a\u590d\u6742\u5ea6\u6700\u5c0f\u7684\u65b9\u6cd5\u3002\n\n## \u67b6\u6784\n\nJenkins X \u57fa\u4e8e\u677e\u8026\u5408\u67b6\u6784\u7684 DevOps \u6a21\u578b\uff0c\u88ab\u8bbe\u8ba1\u7528\u6765\u652f\u6301\u5728\u591a\u4e2a\u56e2\u961f\u4e4b\u95f4\uff0c\u90e8\u7f72\u5927\u91cf\u53ef\u91cd\u590d\u3001\u53ef\u7ba1\u7406\u7684\u5206\u5e03\u5f0f\u5fae\u670d\u52a1\u3002\n\n### \u6982\u5ff5\u6a21\u578b\n\n<img src=\"/images/model.png\" class=\"img-thumbnail\">\n\n## \u6784\u6210\n\nJenkins X \u57fa\u4e8e\u4ee5\u4e0b\u7684\u6838\u5fc3\u7ec4\u4ef6\uff1a  \n  \n### Kubernetes \u548c Docker\n---\nKubernetes \u662f\u7cfb\u7edf\u7684\u6838\u5fc3\uff0c\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e86 DevOps \u4e8b\u5b9e\u4e0a\u7684\u865a\u62df\u57fa\u7840\u8bbe\u65bd\u5e73\u53f0\u3002\u6bcf\u4e2a\u4e3b\u8981\u7684\u4e91\u670d\u52a1\u5546\u73b0\u5728\u90fd\u5df2\u7ecf\u63d0\u4f9b\u4e86 Kubernetes \u57fa\u7840\u8bbe\u65bd\uff0c\u5e76\u4e14\u53ef\u80fd\u5df2\u7ecf\u5728\u5f88\u591a\u79c1\u6709\u57fa\u7840\u8bbe\u65bd\u4e2d\u4e5f\u88ab\u5b89\u88c5\u4e86\u3002\u6d4b\u8bd5\u73af\u5883\u53ef\u80fd\u4e5f\u5728\u4f7f\u7528 Minikube \u5b89\u88c5\u5668\u521b\u5efa\u672c\u5730\u5f00\u53d1\u73af\u5883\u3002\n\n\u4ece\u529f\u80fd\u4e0a\uff0c\u8be5Kubernetes \u5e73\u53f0\u6269\u5c55\u4e86 Docker \u63d0\u4f9b\u7684\u57fa\u672c\u5bb9\u5668\u5316\u539f\u5219\uff0c\u7528\u4e8e\u8de8\u591a\u4e2a\u7269\u7406\u8282\u70b9\u3002\n\n\u7b80\u5355\u6765\u8bf4\uff0cKubernetes \u63d0\u4f9b\u4e86\u540c\u6784\u7684\u865a\u62df\u57fa\u7840\u8bbe\u65bd\uff0c\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u6dfb\u52a0\u6216\u8005\u79fb\u9664\u8282\u70b9\u5b9e\u73b0\u4f38\u7f29\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u5728\u4e00\u4e2a\u5927\u578b\u4e13\u7528\u865a\u62df\u7f51\u7edc\u7a7a\u95f4\u91cc\u3002\n\nKubernetes \u4e2d\u7684\u90e8\u7f72\u5355\u5143\u662f Pod\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a Docker \u5bb9\u5668\u4ee5\u53ca\u4e00\u4e9b\u5143\u6570\u636e\u3002Pod \u4e2d\u6240\u6709\u7684\u5bb9\u5668\u5206\u4eab\u540c\u6837\u7684\u865a\u62df IP \u5730\u5740\u548c\u7aef\u53e3\u8303\u56f4\u3002Deployments\u5728 Kubernetes \u4e2d\u662f\u7533\u660e\u5f0f\u7684\uff0c\u56e0\u6b64\uff0c\u7528\u6237\u6307\u5b9a\u7279\u5b9a\u7248\u672c\u7684 Pod \u4e2d\u90e8\u7f72\u7684\u5b9e\u4f8b\u6570\u91cf\uff0cKubernetes \u636e\u6b64\u6765\u8ba1\u7b97\u8de8\u8282\u70b9\u4e2d\u7684 Pod \u662f\u5e94\u8be5\u5220\u9664\u6216\u90e8\u7f72\u3002\u6839\u636e\u6807\u7b7e\u5339\u914d\u6765\u51b3\u5b9a\u8d44\u6e90\u7684\u5b9e\u4f8b\u6570\u91cf\u3002\u4e00\u65e6\u88ab\u90e8\u7f72\uff0cKubernetes \u5c31\u4f1a\u901a\u8fc7\u5b9a\u671f\u7684\u5065\u5eb7\u68c0\u67e5\u6765\u4fdd\u8bc1 Pod \u7684\u6570\u91cf\uff0c\u7ec8\u6b62\u6216\u5219\u66ff\u6362\u6ca1\u54cd\u5e94\u7684 Pod\u3002\n\n\u4e3a\u4e86\u589e\u52a0\u67d0\u4e9b\u7ed3\u6784\uff0cKubernetes \u5141\u8bb8\u521b\u5efa\u865a\u62df\u547d\u540d\u7a7a\u95f4\u7528\u4e8e\u5bf9 Pod \u505a\u903b\u8f91\u5206\u79bb\uff0c\u9690\u542b\u5730\u628a\u4e00\u7ec4 Pod \u548c\u7279\u5b9a\u8d44\u6e90\u5173\u8054\u8d77\u6765\u3002\u4f8b\u5982\uff1a\u5728\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u8d44\u6e90\u5171\u7528\u5b89\u5168\u7b56\u7565\u3002\u540c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u91cc\u7684\u8d44\u6e90\u540d\u79f0\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0c\u4f46\u5728\u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u91cc\u4e0d\u53d7\u8be5\u7ea6\u675f\u3002\n\n\u5728 Jenkins X \u6a21\u578b\u4e2d\uff0c\u4e00\u4e2a Pod \u76f8\u5f53\u4e8e\u90e8\u7f72\u597d\u7684\u4e00\u4e2a\u5fae\u670d\u52a1\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff09\u3002\u5f53\u5fae\u670d\u52a1\u9700\u8981\u6a2a\u5411\u6269\u5bb9\u65f6\uff0cKubernetes \u5141\u8bb8\u5728\u4e00\u4e2a Pod \u4e2d\u6709\u591a\u4e2a\u76f8\u540c\u7684\u5b9e\u4f8b\u88ab\u90e8\u7f72\uff0c\n\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df IP \u5730\u5740\u3002\u5b83\u4eec\u53ef\u4ee5\u805a\u5408\u4e3a\u4e00\u4e2a\u865a\u62df\u7ec8\u7aef\uff0c\u4e5f\u5c31\u662f\u670d\u52a1\uff0c\u5b83\u6709\u552f\u4e00\u7684\u9759\u6001 IP \u5730\u5740\uff0c\u5e76\u4e14\u672c\u5730\u7684 DNS \u7eaa\u5f55\u4f1a\u5339\u914d\u670d\u52a1\u7684\u540d\u79f0\u3002\u5bf9\u670d\u52a1\u7684\u8c03\u7528\n\u4f1a\u52a8\u6001\u5730\u968f\u673a\u6620\u5c04\u5230\u5065\u5eb7\u7684 POD \u5b9e\u4f8b\u4e0a\u3002\u670d\u52a1\u8fd8\u53ef\u4ee5\u91cd\u65b0\u6620\u5c04\u7aef\u53e3\u3002\u5728 Kubernetes \u865a\u62df\u7f51\u7edc\u4e2d\uff0c\u670d\u52a1\u53ef\u4ee5\u6839\u636e\u57df\u540d\u5168\u79f0\u6765\u996e\u7528\u7684\uff0c\u683c\u5f0f\u4e3a`<service-name>.<namespace-name>.svc.cluster.local`\uff0c\u5b83\u4e5f\u53ef\u4ee5\u7f29\u77ed\u4e3a`<service-name>.<namespace-name>`\uff0c\u6216\u8005\u670d\u52a1\u7684\u547d\u540d\u7a7a\u95f4\u90fd\u4e00\u6837\u7684\u8bdd\u53ef\u4ee5\u662f`<service-name>`\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a RESTful \u670d\u52a1'payments'\u90e8\u7f72\u5728\u547d\u540d\u7a7a\u95f4'finance'\u4e2d\u65f6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7`http://payments.finance.svc.cluster.local`\u6216\u8005`http://payments.finance`\u6216\u53ea\u662f`http://payments`\u6765\u5f15\u7528\uff0c\u8fd9\u8981\u53d6\u51b3\u4e8e\u4ee3\u7801\u7684\u8c03\u7528\u4f4d\u7f6e\u3002\n\n\u4e3a\u4e86\u5728\u672c\u5730\u7f51\u7edc\u4ee5\u5916\u7684\u5730\u65b9\u8bbf\u95ee\u670d\u52a1\uff0cKubernetes \u9700\u8981\u7ed9\u6bcf\u4e2a\u670d\u52a1\u521b\u5efa\u4e00\u4e2a\u5165\u53e3\u3002\u6700\u5e38\u89c1\u7684\u5f62\u5f0f\u662f\u5229\u7528\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u8d1f\u8f7d\u5747\u8861\u7ed1\u5b9a\u9759\u6001 IP \u5730\u5740\uff0c\u5728 Kubernetes \u5916\u9762\u7684\u865a\u62df\u57fa\u7840\u8bbe\u65bd\u548c\u8def\u7531\u7f51\u7edc\u8bf7\u6c42\u6620\u5c04\u5230\u5185\u90e8\u670d\u52a1\u3002\u7ed9\u8d1f\u8f7d\u5747\u8861\u7684\u9759\u6001 IP \u5730\u5740\u521b\u5efa\u4e00\u4e2a\u901a\u914d\u7b26\u7684\u5916\u90e8 DNS \u7eaa\u5f55\uff0c\u5c31\u524b\u4e00\u628a\u670d\u52a1\u6620\u5c04\u5230\u5916\u90e8\u7684\u5168\u79f0\u57df\u540d\u4e0a\u3002\u4f8b\u5982\uff1a\u5982\u679c\u6211\u4eec\u7684\u8d1f\u8f7d\u5747\u8861\u6620\u5c04\u5230 `*.jenkins-x.io` \uff0c\u90a3\u4e48\u6211\u4eec\u8d1f\u8f7d\u7684\u670d\u52a1\u5c31\u53ef\u80fd\u66b4\u9732\u4e3a `http://payments.finance.jenkins-x.io` \u3002\n\nKubernetes \u4e3a\u5f3a\u5927\u7684\u4e0d\u65ad\u63d0\u9ad8\u7684\u5e73\u53f0\u5728\u90e8\u7f72\u670d\u52a1\u4e0a\u63d0\u4f9b\u5de8\u5927\u7684\u4f38\u7f29\u80fd\u529b\uff0c\u4f46\u5b83\u540c\u65f6\u4e5f\u662f\u590d\u6742\u4e0d\u5bb9\u6613\u7406\u89e3\u7684\uff0c\u800c\u4e14\u8981\u6b63\u786e\u8fdb\u884c\u914d\u7f6e\u4e5f\u6709\u4e00\u5b9a\u7684\u56f0\u96be\u3002Jenkins X \u7ed9 Kubernetes\u5f15\u5165\u4e86\u4e00\u7cfb\u5217\u9ed8\u8ba4\u7ea6\u5b9a\u4ee5\u53ca\u7b80\u5355\u7684\u5de5\u5177\uff0c\u4e3a\u4e86\u4f18\u5316 DevOps \u5e76\u7ba1\u7406\u677e\u8026\u5408\u7684\u670d\u52a1\u3002\n\n\u547d\u4ee4\u884c\u5de5\u5177 `jx` \u63d0\u4f9b\u4e86\u6267\u884c\u57fa\u4e8e Kubernetes \u5b9e\u4f8b\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a\u67e5\u770b\u65e5\u5fd7\u3001\u8fde\u63a5\u5bb9\u5668\u5b9e\u4f8b\u3002\u53e6\u5916\uff0cJenkins X \u6269\u5c55\u4e86 Kubernetes \u7684\u547d\u540d\u7a7a\u95f4\u7ea6\u5b9a\u6765\u521b\u5efa\u73af\u5883\uff0c\u8fd9\u6837\u5c31\u628a\u53d1\u5e03\u6d41\u6c34\u7ebf\u4e32\u8054\u8d77\u6765\u4e86\u3002\n\n\u4e00\u4e2a Jenkins X \u73af\u5883\u4ee3\u8868\u4e00\u4e2a\u865a\u62df\u57fa\u7840\u8bbe\u65bd\u73af\u5883\uff0c\u4f8b\u5982\uff1aDev\u3001Staging\u3001Production\u7b49\u7b49\u3002\u4e24\u4e2a\u73af\u5883\u4e4b\u95f4\u7684\u6d41\u8f6c\u89c4\u5219\u662f\u53ef\u4ee5\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u6d41\u6c34\u7ebf\u5b9e\u73b0\u81ea\u52a8\u6216\u8005\u4eba\u5de5\u53d1\u7248\u3002\u6bcf\u4e2a\u73af\u5883\u7684\u7ba1\u7406\u90fd\u9075\u5faa GitOps \u7684\u65b9\u6cd5\u2014\u2014\u73af\u5883\u72b6\u6001\u7684\u7ef4\u62a4\u4f9d\u8d56\u4e8e Git \u4ed3\u5e93\uff0c\u63d0\u4ea4\u6216\u8005\u56de\u6eda\u90fd\u4f1a\u5173\u8054 Kubernetes \u4e2d\u7684\u73af\u5883\u72b6\u6001\u7684\u6539\u53d8\u3002\n\nKubernetes \u96c6\u7fa4\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u547d\u4ee4 `jx create cluster` \u6765\u521b\u5efa\uff0c\u8fd9\u4f7f\u5f97\u5f53\u53d1\u751f\u9519\u8bef\u65f6\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u590d\u5236\u4e00\u4e2a\u96c6\u7fa4\u3002\u76f8\u540c\u5730\uff0cJenkins X \u5e73\u53f0\u901a\u8fc7 `jx upgrade platform` \u6765\u5347\u7ea7\u5df2\u6709\u7684\u96c6\u7fa4\u3002Jenkins X \u901a\u8fc7 `jx context` \u652f\u6301\u591a Kubernetes \u96c6\u7fa4\uff0c\u5728\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u53ef\u4ee5\u901a\u8fc7 `jx environment` \u6765\u5207\u6362\u73af\u5883\u3002\n\n\u7814\u53d1\u4eba\u5458\u5e94\u8be5\u77e5\u9053 Kubernetes \u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u914d\u7f6e\u6570\u636e\u4ee5\u53ca\u5938\u96c6\u7fa4\u7684\u5b89\u5168\u8eab\u4efd\u3002ConfigMaps \u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4e00\u7cfb\u5217\u952e\u503c\u5bf9\u5f62\u5f0f\u7684\u975e\u654f\u611f\u914d\u7f6e\u5143\u7d20\u53e5\uff0cSecrets \u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u4f46\u4fdd\u5b58\u7684\u662f\u52a0\u5bc6\u7684\u8eab\u4efd\u4fe1\u606f\u3002Kubernetes \u8fd8\u63d0\u4f9b\u4e3a Pod \u6307\u5b9a\u8d44\u6e90\u914d\u989d\u7684\u673a\u5236\uff0c\u8fd9\u5728\u4f18\u5316\u8de8\u8282\u70b9\u4e4b\u95f4\u7684\u90e8\u7f72\u4e0a\u662f\u6709\u5fc5\u8981\u7684\u3002\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5148\u7b80\u77ed\u5730\u8ba8\u8bba\u4e0b\u3002\n\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Pod \u7684\u72b6\u6001\u662f\u4e34\u65f6\u7684\u3002\u5f53 Pod \u88ab\u5220\u9664\u540e\uff0c\u8be5 Pod \u4e0b\u8f7d\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55\u6570\u636e\u90fd\u4f1a\u4e22\u5931\u3002\u7814\u53d1\u4eba\u5458\u5e94\u8be5\u660e\u767d\uff0cKubernetes \u4e3a\u4e86\u8282\u70b9\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u53ef\u80fd\u968f\u65f6\u4f1a\u5220\u9664\u6216\u8005\u91cd\u5efa Pod\uff0c\u56e0\u6b64\u672c\u5730\u6570\u636e\u53ef\u80fd\u4f1a\u5728\u4efb\u4f55\u65f6\u95f4\u4e22\u5931\u3002\u5f53\u7528\u5230\u6709\u72b6\u6001\u7684\u6570\u636e\u65f6\uff0c\u5e94\u8be5\u7533\u660e\u6301\u4e45\u5316\u7684\u5377\uff08Volumes\uff09\uff0c\u5e76\u6302\u8f7d\u5230\u6307\u5b9a Pod \u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\u3002\n\n### Helm \u548c Draft\n---\n\u8981\u76f4\u63a5\u548c kubernetes \u4ea4\u4e92\u7684\u8bdd\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c  `kubectl` \uff0c\u6216\u8005\u4f20\u9012\u5404\u79cd\u683c\u5f0f\u7684 YAML \u6570\u636e\u7ed9 API\u3002\u8fd9\u4e00\u70b9\u4f1a\u6bd4\u8f83\u56f0\u96be\uff0c\u800c\u4e14\u9519\u8bef\u4fe1\u606f\u7684\u53ef\u8bfb\u6027\u5dee\u3002\u4e3a\u4e86\u6cbf\u7528 DevOps \u201d\u914d\u7f6e\u5373\u4ee3\u7801\u201d \u7684\u539f\u5219\uff0cJenkins X \u501f\u52a9 Helm \u548c Draft \u6765\u521b\u5efa\u5e94\u7528\u7684\u539f\u5b50\u914d\u7f6e\u3002\n\nHelm \u901a\u8fc7 Chart \u7684\u6982\u5ff5\u7b80\u5316\u4e86 Kubernetes \u7684\u914d\u7f6e\uff0c\u5b83\u628a\u4e00\u5957\u9700\u8981\u90e8\u7f72\u5230 Kubernetes \u4e2d\u7684\u5e94\u7528\u6216\u8005\u670d\u52a1\u7684\u539f\u6570\u636e\u6587\u4ef6\u7ec4\u7ec7\u8d77\u6765\u3002Helm \u4e0d\u662f\u7ef4\u62a4\u4e00\u5957\u57fa\u4e8e Kubernetes API \u7684\u6837\u677f\u5316 YAML \u6587\u4ef6\uff0c\u800c\u662f\u4f7f\u7528\u6a21\u677f\u8bed\u8a00\u6765\u901a\u8fc7\u9700\u8981\u7684\u503c\u6765\u521b\u5efa YAML \u6587\u4ef6\u3002\u8fd9\u4f7f\u5f97\u5728\u90e8\u7f72\u671f\u95f4\u53ef\u4ee5\u91cd\u7528 Kubernetes \u5e94\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n",
            "content/zh/docs/Concepts/components.md": "---\ntitle: \u7ec4\u4ef6\nlinktitle: \u7ec4\u4ef6\ndescription: \u5178\u578b Jenkins X \u5b89\u88c5\u4e2d\u7684\u7ec4\u4ef6\u6982\u89c8\n---\n\nJenkins X \u5b89\u88c5\u7684\u5305\u62ec\uff1a\n\n* \u6bcf\u4e2a\u56e2\u961f\u4e00\u4e2a\u5f00\u53d1\u73af\u5883\uff0c\u4e5f\u5c31\u662f [kubernetes \u547d\u540d\u7a7a\u95f4](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/)\n* \u96f6\u6216\u591a\u4e2a\u5176\u5b83 [\u6c38\u4e45\u73af\u5883](/zh/about/concepts/features/#environments) \n  * \u4e3a\u6bcf\u4e2a\u56e2\u961f\u83b7\u53d6\u5404\u81ea\u5f00\u7bb1\u5373\u7528\u7684 `Staging` \u548c `\u751f\u4ea7` \u73af\u5883\n  * \u6bcf\u4e2a\u56e2\u961f\u53ef\u4ee5\u6309\u7167\u9700\u8981\u6709\u5f88\u591a\u73af\u5883\uff0c\u5e76\u4f9d\u636e\u4e60\u60ef\u547d\u540d\n* \u53ef\u9009\u7684 [\u9884\u89c8\u73af\u5883](/zh/about/concepts/features/#preview-environments) \n\n\u901a\u5e38\uff0c\u6bcf\u4e2a\u73af\u5883\u4f1a\u5173\u8054\u5bf9\u5e94\u4e0d\u540c\u7684 [kubernetes \u547d\u540d\u7a7a\u95f4](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) \uff0c\u4ee5\u786e\u4fdd\u73af\u5883\u4e4b\u95f4\u5e72\u51c0\u9694\u79bb\u3002\n\n\u5c3d\u7ba1\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4e24\u4e2a\u56e2\u961f\u53ef\u4ee5\u5171\u4eab\u540c\u6837\u7684\u57fa\u7840\u547d\u540d\u7a7a\u95f4\uff0c\u6bd4\u5982 `Staging`\uff0c\u5c3d\u7ba1\u6211\u4eec\u5efa\u8bae\u5206\u5f00\u4ee5\u4fdd\u6301\u7b80\u5355\u2014\u2014\u4e0d\u7136\u7684\u8bdd\uff0c\u5728\u540c\u4e00\u4e2a git \u5e93\u4e2d\u914d\u7f6e\u76f8\u540c\u7684\u547d\u540d\u7a7a\u95f4\u53ef\u80fd\u4f1a\u53d1\u751f\u51b2\u7a81\uff1b\u4f8b\u5982\uff1a\u670d\u52a1\u8d44\u6e90\u540d\u79f0\u6216\u8005 DNS \u4f1a\u51b2\u7a81\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4e24\u4e2a\u56e2\u961f\u5171\u4eab\u57fa\u7840\u5fae\u670d\u52a1\uff0c\u4f7f\u7528 `\u670d\u52a1\u94fe\u63a5` \u5728\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u8fde\u63a5\u53e6\u5916\u4e00\u4e2a\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u8fd9\u6837\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7\u672c\u5730 DNS \u4ee5\u672c\u5730\u670d\u52a1\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\n\n## \u5f00\u53d1\u73af\u5883\n\n\u5728\u5f00\u53d1\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u5b89\u88c5\u4e86\u5f88\u591a\u5fc5\u8981\u7684\u6700\u5c0f\u6838\u5fc3\u5e94\u7528\uff0c\u624d\u80fd\u542f\u52a8\u57fa\u4e8e Kubernetes \u7684 CI/CD\u3002\n\n\u6211\u4eec\u8fd8\u652f\u6301 [addons](/zh/about/concepts/features/#applications) \u6269\u5c55\u6838\u5fc3\u5957\u4ef6\u3002\n\nJenkins X \u7684\u914d\u7f6e\u628a\u8fd9\u4e9b\u670d\u52a1\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5de5\u4f5c\u4e86\u3002\u8fd9\u6837\u5c31\u795e\u5947\u5730\u628a Kubernetes \u7684\u5bc6\u7801\u3001\u73af\u5883\u904d\u5386\u548c\u914d\u7f6e\u6587\u4ef6\u5168\u90e8\u914d\u7f6e\u597d\u5e76\u53ef\u4ee5\u5de5\u4f5c\u4e86\u3002\n\n1. __Jenkins__ \u200a\u2014\u200a\u63d0\u4f9b CI \u548c CD \u81ea\u52a8\u5316\u3002\u8fd9\u6837\u5bf9 Jenkins \u7684\u89e3\u8026\u53d8\u5f97\u66f4\u52a0\u4e91\u539f\u751f\uff0c\u5e76\u5229\u7528 Kubernetes \u7684\u6982\u5ff5\uff0c\u4f8b\u5982\uff1aCRDs\uff08\u81ea\u5b9a\u4e49\u8d44\u6e90\u5b9a\u4e49\uff09\u3001\u5b58\u50a8\u548c\u4f38\u7f29\u3002\n2. __Nexus__\u200a\u2014\u200a\u4f5c\u4e3a NodeJS \u548c Java \u7a0b\u5e8f\u7684\u4f9d\u8d56\u7f13\u5b58\uff0c\u53ef\u4ee5\u51cf\u5c11\u6784\u5efa\u65f6\u95f4\u3002\u4e00\u4e2a SpringBoot \u5e94\u7528\u7684\u521d\u59cb\u5316\u6784\u5efa\u540e\uff0c\u6784\u5efa\u65f6\u95f4\u80fd\u4ece12\u5206\u949f\u51cf\u5c11\u52304\u5206\u949f\u3002\u6211\u4eec\u8fd8\u6ca1\u6709\u5b9e\u73b0\uff0c\u4f46\u662f\u5df2\u7ecf\u8ba1\u5212\u5f88\u5feb\u7528 Artifactory \u6765\u66ff\u6362\u3002\n3. __Docker registry__ \u200a\u2014\u200a\u4e00\u4e2a\u96c6\u7fa4\u4e2d\u7684 docker \u6ce8\u518c\u8868\uff08registry\uff09\uff0c\u7528\u4e8e\u6211\u4eec\u7684\u6d41\u6c34\u7ebf\u63a8\u9001\u5e94\u7528\u7684\u955c\u50cf\uff0c\u6211\u4eec\u5c06\u5f88\u5feb\u4f7f\u7528\u539f\u751f\u7684\u4e91\u63d0\u4f9b\u5546\uff0c\u4f8b\u5982\uff1aGoogle Container Registry, Azure Container Registry \u6216 Amazon Elastic Container Registry (ECR)\u3002\n4. __ChartMuseum__\u200a\u2014\u200a\u4e00\u4e2a\u53d1\u5e03 Helm charts \u7684 registry\n5. __Monocular__ \u200a\u2014\u200a\u4e00\u4e2a\u7528\u4e8e\u53d1\u73b0\u548c\u8fd0\u884c Helm charts \u7684 UI\n\n## \u6c38\u4e45\u73af\u5883\n\n\u8fd9\u4e9b[\u73af\u5883](/zh/about/concepts/features/#environments)\uff0c\u50cf `Staging` \u548c `Production` \u4f7f\u7528 GitOps \u6765\u7ba1\u7406\u4ed6\u4eec\uff0c\u56e0\u6b64\uff0c\u6bcf\u4e2a\u90fd\u6709\u4e00\u4e2a\u5305\u542b\u914d\u7f6e\u6240\u6709\u5e94\u7528\u548c\u670d\u52a1\u4ee5\u53ca\u8981\u90e8\u7f72\u7684\u4f4d\u7f6e\u4fe1\u606f\u7684\u6e90\u7801\u7684 git \u4ed3\u5e93\u3002\n\n\u901a\u5e38\uff0c\u6211\u4eec\u4f7f\u7528 git \u4ed3\u5e93\u4e2d\u7684 Helm charts \u6765\u5b9a\u4e49\u54ea\u4e9b charts \u8981\u88ab\u5b89\u88c5\uff0c\u5b83\u4eec\u7684\u7248\u672c\uff0c\u73af\u5883\u7684\u5177\u4f53\u914d\u7f6e\uff0c\u4ee5\u53ca\u9644\u52a0\u8d44\u6e90\uff08\u4f8b\u5982\uff1aSecrets \u6216 \u50cf Prometheus \u53ef\u8fd0\u884c\u7684\u5e94\u7528\u7b49\uff09\n\n## \u9884\u89c8\u73af\u5883\n\n[\u9884\u89c8\u73af\u5883](/zh/about/concepts/features/#preview-environments) \u548c[\u6c38\u4e45\u73af\u5883](/zh/about/concepts/features/#environments) \u7c7b\u4f3c\uff0c\u90fd\u5728\u6e90\u7801\u4e2d\u4f7f\u7528 Helm charts \u5b9a\u4e49\u3002\n\n\u4e3b\u8981\u7684\u4e0d\u540c\u4e4b\u5904\uff0c\u662f\u9884\u89c8\u73af\u5883\u914d\u7f6e\u5728\u5e94\u7528\u7684\u6e90\u7801\u7684 `./chart/preview` \u76ee\u5f55\u4e2d\u3002\n\n\u800c\u4e14\uff0c\u5b83\u4eec\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u662f\u7531\u4e00\u4e2a\u5e94\u7528\u7684 git \u4ed3\u5e93\u7684 Pull Request \u521b\u5efa\uff0c\u800c\u4e14\u540e\u9762\u4f1a\u88ab\u5220\u9664\uff08\u624b\u52a8\u6216\u8005\u901a\u8fc7\u5783\u573e\u56de\u6536\u81ea\u52a8\uff09\u3002\n",
            "content/zh/docs/Concepts/features.md": "---\ntitle: \u7279\u8272\nlinktitle: \u7279\u8272\ndescription: Jenkins X \u5982\u4f55\u5e2e\u52a9\u4f60\u505a\u6301\u7eed\u4ea4\u4ed8\ndate: 2018-04-21\npublishdate: 2018-04-21\nlastmod: 2018-04-30\n---\n\n## \u547d\u4ee4\u884c\n\nJenkins X \u5e26\u6765\u4e86\u4e00\u4e2a\u65b9\u4fbf\u4f7f\u7528\u7684\u547d\u4ee4\u884c\u5de5\u5177 [jx](/commands/jx/) \uff1a\n\n* [\u5b89\u88c5 Jenkins X](/zh/docs/getting-started/setup/install/) \u5230\u4f60\u5df2\u7ecf\u5b58\u5728\u7684 Kubernetes \u96c6\u7fa4\n* [\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 kubernetes \u96c6\u7fa4](/zh/docs/getting-started/setup/create-cluster/) \u5e76\u628a Jenkins X \u5b89\u88c5\u8fdb\u53bb\n* [\u5bfc\u5165\u9879\u76ee](/zh/developing/import) \u5230 Jenkins X \u4e2d\u4ee5\u53ca\u4ed6\u4eec\u7684\u6301\u7eed\u90e8\u7f72\u6d41\u6c34\u7ebf\u8bbe\u7f6e\n* [\u521b\u5efa\u65b0\u7684 Spring Boot \u5e94\u7528](/zh/developing/create-spring) \u5e76\u5bfc\u5165 Jenkins X \u4e2d\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6301\u7eed\u90e8\u7f72\u6d41\u6c34\u7ebf\u8bbe\u7f6e\n\n## \u6d41\u6c34\u7ebf\n\n\u4e0d\u5fc5\u6df1\u5165\u4e86\u89e3 Jenkins \u6d41\u6c34\u7ebf\u7684\u5185\u90e8\uff0cJenkins X \u4f1a\u9ed8\u8ba4\u7ed9\u4f60\u7684\u9879\u76ee\u63d0\u4f9b\u4e00\u4e9b\u5f88\u597d\u7684\u6d41\u6c34\u7ebf\u2014\u2014\u57fa\u4e8e[DevOps \u6700\u4f73\u5b9e\u8df5](/zh/about/concepts)\u5b9e\u73b0\u4e86\u6240\u6709\u7684\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u90e8\u7f72\n\n## \u73af\u5883\n\n\u73af\u5883\u6307\u7684\u662f\u5e94\u7528\u90e8\u7f72\u7684\u5730\u65b9\u3002\u5f00\u53d1\u4eba\u5458\u901a\u5e38\u4f7f\u7528\u7f29\u5199\u6765\u63cf\u8ff0\u73af\u5883\uff0c\u4f8b\u5982\uff1a\u201c\u6d4b\u8bd5\u4e2d\uff08Testing\uff09\u3001Staging/UAT\u6216\u8005\u751f\u4ea7\uff08Production\uff09\u201d\u3002\n\n\u5728 Jenkins X \u4e2d\u6bcf\u4e2a\u56e2\u961f\u90fd\u6709\u4e00\u5957\u81ea\u5df1\u7684\u73af\u5883\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cJenkins X \u4f1a\u7ed9\u6bcf\u4e2a\u56e2\u961f\u521b\u5efa\u4e00\u4e2a `Staging` \u548c `\u751f\u4ea7` \u73af\u5883\uff0c\u4f46\u4f60\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 [jx create environment](/commands/jx_create_environment/)\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u73af\u5883\u3002\n\n\u6211\u4eec\u4f7f\u7528 GitOps \u6765\u7ba1\u7406\u8981\u90e8\u7f72\u5230\u6bcf\u4e2a\u73af\u5883\u4e2d\u7684 Kubernetes \u8d44\u6e90\u7684\u914d\u7f6e\u548c\u7248\u672c\u3002\u56e0\u6b64\uff0c\u6bcf\u4e2a\u73af\u5883\u90fd\u6709\u81ea\u5df1\u7684 git \u4ed3\u5e93\uff0c\u5e94\u7528\u5728\u8fd9\u4e2a\u73af\u5883\u4e2d\u8fd0\u884c\u9700\u8981\u7684 Helm Charts\u3001\u7248\u672c\u4ee5\u53ca\u914d\u7f6e\u90fd\u5728\u5e93\u4e2d\u3002\n\n\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u4e00\u4e2a\u73af\u5883\u5bf9\u5e94\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u3002\u5f53 Pull Requests \u88ab\u5408\u5e76\u5230\u73af\u5883\u6240\u5728\u7684 git \u5e93\u540e\uff0c\u8be5\u73af\u5883\u7684\u6d41\u6c34\u7ebf\u5c31\u4f1a\u628a git \u5e93\u4e2d\u7684 Helm Charts \u5e94\u7528\u5230\u73af\u5883\u547d\u540d\u7a7a\u95f4\u4e2d\u3002\n\n\u8fd9\u610f\u5473\u7740\u5f00\u53d1\u548c\u8fd0\u7ef4\u90fd\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a git \u5e93\u4e2d\uff0c\u7ba1\u7406\u5e94\u7528\u548c\u8d44\u6e90\u5728\u67d0\u4e2a\u73af\u5883\u4e2d\u7684\u6240\u6709\u914d\u7f6e\u548c\u7248\u672c\uff0c\u5e76\u4e14\u5bf9\u73af\u5883\u7684\u6240\u6709\u6539\u53d8\u90fd\u53ef\u4ee5\u5728 git \u4e2d\u83b7\u53d6\u5230\u3002\u56e0\u6b64\uff0c\u8fd9\u6837\u5f88\u5bb9\u6613\u770b\u5230\u662f\u8c01\u4f5c\u51fa\u7684\u6539\u53d8\uff0c\u800c\u4e14\uff0c\u66f4\u91cd\u8981\u7684\u662f\u5f53\u53d1\u751f\u95ee\u9898\u540e\u5f88\u5bb9\u6613\u56de\u6eda\u6539\u53d8\u3002\n\n## \u90e8\u7f72\u5347\u7ea7\n\n\u90e8\u7f72\u5347\u7ea7\u662f\u901a\u8fc7 GitOps \u5728\u73af\u5883\u5173\u8054\u7684 git \u5e93\u4e0a\u53d1\u8d77\u4e00\u4e2a Pull Requests \u6765\u5b9e\u73b0\u7684\uff0c\u8fd9\u6837\u6240\u6709\u7684\u6539\u53d8\u90fd\u901a\u8fc7 git \u6765\u5ba1\u67e5\u3001\u6279\u51c6\uff0c\u56e0\u6b64\u6240\u6709\u7684\u6539\u53d8\u7684\u90fd\u5f88\u5bb9\u6613\u56de\u6eda\u3002\n\n\u5f53\u73af\u5883\u6240\u5173\u8054\u7684 git \u5e93\u4e0a\u6709\u65b0\u7684\u53d8\u5316\u5408\u5e76\u5230 master \u540e\uff0c\u73af\u5883\u7684\u6d41\u6c34\u7ebf\u5c31\u4f1a\u89e6\u53d1\uff0chelm \u5c31\u4f1a\u628a\u4efb\u4f55\u6539\u53d8\u5e94\u7528\u5230\u8d44\u6e90\u4e0a\u3002\n\nJenkins X \u7684\u6301\u7eed\u90e8\u7f72\u6d41\u6c34\u7ebf\u628a\u6539\u53d8\u4e86\u7684\u7248\u672c\u81ea\u52a8\u505a\u90e8\u7f72\u5347\u7ea7\uff0c\u8fd9\u662f\u9700\u8981\u628a\u914d\u7f6e\u4e2d\u7684\u201d\u90e8\u7f72\u5347\u7ea7\u7b56\u7565\u201c\u8bbe\u7f6e\u4e3a\u201d\u81ea\u52a8\u201c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u201dStaging\u201c\u73af\u5883\u4f7f\u7528\u81ea\u52a8\u90e8\u7f72\u5347\u7ea7\uff0c\u800c\u201d\u751f\u4ea7\u201c\u73af\u5883\u4f7f\u7528\u201d\u624b\u52a8\u201c\u90e8\u7f72\u5347\u7ea7\u3002\n\n\u8981\u624b\u52a8\u628a\u67d0\u4e2a\u7248\u672c\u7684\u5e94\u7528\u90e8\u7f72\u5347\u7ea7\u5230\u4e00\u4e2a\u73af\u5883\u4e2d\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528[jx promote](/developing/promote/)\u547d\u4ee4\u3002\n\n<img src=\"/images/overview.png\" class=\"img-thumbnail\">\n\n## \u9884\u53d1\u73af\u5883\n\nJenkins X \u5141\u8bb8\u4f60\u7ed9 Pull Requests \u8bbe\u7f6e\u4e00\u4e2a\u9884\u53d1\u73af\u5883\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u53d8\u66f4\u540e\u5e76\u5230 master \u4e4b\u524d\u5f97\u5230\u66f4\u591a\u7684\u53cd\u9988\u3002\u8fd9\u4f7f\u4f60\u7684\u53d8\u66f4\u5728\u88ab\u5408\u5e76\u4ee5\u53ca\u53d1\u5e03\u4e4b\u524d\u66f4\u5feb\u5f97\u5230\u53cd\u9988\uff0c\u5e76\u5141\u8bb8\u4f60\u907f\u514d\u5728\u4f60\u7684\u53d1\u7248\u6d41\u6c34\u7ebf\u4e2d\u6709\u4eba\u4e3a\u7684\u6279\u51c6\uff0c\u52a0\u901f\u53d8\u66f4\u5728\u5408\u5e76\u540e\u7684\u90e8\u7f72\u3002\n\n\u5f53\u9884\u53d1\u73af\u5883\u542f\u52a8\u5e76\u8fd0\u884c\u540e\uff0cJenkins X \u5c06\u4f1a\u5728\u4f60\u7684 Pull Requests \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5e26\u94fe\u63a5\u7684\u8bc4\u8bba\uff0c\u8fd9\u6837\u4f60\u4eec\u56e2\u961f\u7684\u6210\u5458\u5c31\u53ef\u4ee5\u70b9\u51fb\u6765\u5c1d\u8bd5\u5b83\uff01\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n## \u53cd\u9988\n\n\u6b63\u5982\u5728\u4e0a\u9762\u770b\u5230\u7684\uff0c\u5f53\u4f60\u4f7f\u7528\u9884\u53d1\u73af\u5883\u65f6\uff0cJenkins X \u4f1a\u5728\u4f60\u7684 Pull Requests \u4e0a\u81ea\u52a8\u6dfb\u52a0\u8bc4\u8bba\u3002\n\n\u5982\u679c\u4f60\u5728\u63d0\u4ea4\u65e5\u5fd7\u4e2d\u5f15\u7528\u4e86 issues\uff08\u4f8b\u5982\uff1a\u901a\u8fc7\u6587\u672c`fixes #123`\uff09\uff0c\u90a3\u4e48\uff0cJenkins X \u6d41\u6c34\u7ebf\u5c06\u4f1a\u751f\u6210\u53d1\u7248\u8bb0\u5f55\uff0c\u4f8b\u5982\uff1a [the jx releases](https://github.com/jenkins-x/jx/releases)\u3002\n\n\u540c\u6837\u5730\uff0c\u5728\u5347\u7ea7\u5230`Staging`\u6216\u8005`\u751f\u4ea7`\u73af\u5883\u65f6\uff0c\u8fd9\u4e9b\u7248\u672c\u4e0a\u4e5f\u4f1a\u5728\u5df2\u4fee\u590d\u7684\u95ee\u9898\u4e0a\u81ea\u52a8\u6dfb\u52a0\u5bf9\u5e94\u73af\u5883\u53ef\u7528\u7684\u8bc4\u8bba\u3002\u4f8b\u5982\uff1a\n\n<img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n\n\n## \u5e94\u7528\n\n\u4e00\u4e9b\u6700\u597d\u7684\u8f6f\u4ef6\u5de5\u5177\u5df2\u7ecf\u88ab\u6253\u5305\u4e3a helm charts\uff0c\u90e8\u5206\u9884\u5148\u96c6\u6210\u5728\u4e86 Jenkins X \u4e2d\uff0c\u4f8b\u5982\uff1aNexus\u3001ChartMuseum\u3001Monocular\u3001Prometheus\u3001Grafana\u7b49\u7b49\u3002\n\n### \u63d2\u4ef6\n\n\u90e8\u5206\u5e94\u7528\u662f\u5185\u7f6e\u7684\uff1b\u4f8b\u5982\uff1aNexus\u3001ChartMuseum\u3001Monocular\u3002\u5176\u4ed6\u7684\u5219\u662f\u4f5c\u4e3a\u201c\u63d2\u4ef6\u201d\u63d0\u4f9b\u7684\u3002\n\n\u8981\u5b89\u88c5\u63d2\u4ef6\u7684\u8bdd\uff0c\u4f7f\u7528\u547d\u4ee4[jx create addon](/commands/jx_create_addon/)\u3002\u4f8b\u5982\uff1a\n\n```sh\njx create addon grafana\n```\n",
            "content/zh/docs/Concepts/technology.md": "---\ntitle: \u6280\u672f\u6027\u95ee\u9898\nlinktitle: \u6280\u672f\ndescription: Kubernetes \u4ee5\u53ca\u5173\u8054\u7684\u5f00\u6e90\u9879\u76ee\u7684\u6280\u672f\u95ee\u9898\n---\n\n## \u4ec0\u4e48\u662f Helm?\n\n[helm](https://www.helm.sh/) \u662f Kubernetes \u7684\u5f00\u6e90\u5305\u7ba1\u7406\u5668\u3002\n\n\u5b83\u548c\u5176\u4ed6\u7684\u5305\u7ba1\u7406\u5de5\u5177\uff08brew, yum, npm\u7b49\uff09\u7c7b\u4f3c\uff0c\u6709\u4e00\u4e2a\u6216\u8005\u66f4\u591a\u7684\u5305\u4ed3\u5e93\u53ef\u4ee5\u5b89\u88c5\uff08\u5728 helm \u4e2d\u53eb\u505a `charts` \u548c kubernetes \u7684\u4e3b\u9898\u4fdd\u6301\u4e00\u81f4\uff09\uff0c\u53ef\u4ee5\u641c\u7d22\u3001\u5b89\u88c5\u548c\u5347\u7ea7\u3002\n\n\u4e00\u4e2a [helm chart \u57fa\u672c\u4e0a\u662f\u5e26\u7248\u672c\u7684 kubernetes yaml \u538b\u7f29\u5305](https://docs.helm.sh/developing_charts/#charts) \uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u5b89\u88c5\u5728\u4efb\u4f55 kubnernetes \u96c6\u7fa4\u4e0a\u3002\n\nHelm \u901a\u8fc7\u6587\u4ef6 `requirements.yaml` \u652f\u6301\u7ec4\u5408\uff08\u4e00\u4e2a chart \u53ef\u4ee5\u5305\u542b\u5176\u4ed6 charts\uff09\u3002\n\n## \u4ec0\u4e48\u662f Skaffold?\n\n[skaffold](https://github.com/GoogleContainerTools/skaffold) \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u6784\u5efa docker \u955c\u50cf\uff0c\u5e76\u901a\u8fc7 `kubectl` \u6216 `helm` \u90e8\u7f72\u3001\u5347\u7ea7\u3002\n\n\u5728 kubernetes \u96c6\u7fa4\u4e2d\u6784\u5efa docker \u955c\u50cf\u7684\u6311\u6218\u6709\u51e0\u79cd\u65b9\u6cd5\u6765\u5b9e\u73b0\uff1a\n\n* \u4f7f\u7528\u672c\u5730 docker daemon \u548c kubernetes \u96c6\u7fa4\u7684 socket\n* \u4f7f\u7528\u4e00\u4e2a\u4e91\u670d\u52a1\uff0c\u4f8b\u5982\uff1aGoogle Cloud Builder\n* \u4f7f\u7528\u65e0 docker-daemon\uff0c\u4f8b\u5982\uff1a[kaniko](https://github.com/GoogleContainerTools/kaniko) \u4e0d\u9700\u8981\u8bbf\u95ee\u6743\u9650\n\nSkaffold \u7684\u597d\u5904\u662f\u628a\u4f60\u7684\u4ee3\u7801\u6216 CLI \u4ece\u7ec6\u8282\u4e2d\u62bd\u8c61\u51fa\u6765\uff1b\u4f60\u53ef\u4ee5\u5728\u6587\u4ef6 `skaffold.yaml` \u4e2d\u914d\u7f6e\u6784\u5efa docker \u955c\u50cf\u7684\u7b56\u7565\uff0c\u5207\u6362 docker daemon\u3001GCB \u6216 kaniko\u7b49\u3002\n\nSkaffold \u5728 [DevPods](/docs/reference/devpods/) \u4e2d\u4e5f\u5f88\u6709\u7528\uff0c\u5f53\u4f60\u6539\u53d8\u4ee3\u7801\u540e\u53ef\u4ee5\u6267\u884c\u5feb\u901f\u589e\u91cf\u6784\u5efa\u3002\n\n## Helm \u548c Skaffold \u6bd4\u8f83\uff1f\n\n`helm` \u5141\u8bb8\u4f60\u5b89\u88c5\u3001\u5347\u7ea7\u53eb\u505a charts \u7684\u5305\uff0c\u4f7f\u7528\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u5728\u4e00\u4e9b docker registry \u4e2d\u7684 docker \u955c\u50cf\u4ee5\u53ca\u4e00\u4e9b kubernetes YAML \u6587\u4ef6\u6765\u5b89\u88c5\u3001\u5347\u7ea7 kubernetes \u96c6\u7fa4\u4e2d\u7684\u5e94\u7528\u3002\n\n`skaffold` \u662f\u4e00\u4e2a\u7528\u4e8e\u6267\u884c docker \u6784\u5efa\u7684\u5de5\u5177\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7 `kubectl` \u6216 `helm` \u91cd\u542f\u90e8\u7f72\u5e94\u7528\u2014\u2014\u6216\u8005\u5728\u4e00\u4e2a CI/CD \u6d41\u6c34\u7ebf\u4e2d\u4ee5\u53ca\u672c\u5730\u5f00\u53d1\u4e2d\u4f7f\u7528\u3002\n\nJenkins X \u4f7f\u7528\u5728\u5b83\u7684 CI/CD \u6d41\u6c34\u7ebf\u4e2d\u4f7f\u7528 `skaffold` \u521b\u5efa docker \u955c\u50cf\u3002\u6211\u4eec\u5728\u6bcf\u6b21\u5408\u5e76\u5230 master \u65f6\u53d1\u5e03\u7248\u672c\u5316\u7684 docker \u955c\u50cf\u548c helm charts\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7 `helm` \u5347\u7ea7\u73af\u5883\u3002\n\n## \u4ec0\u4e48\u662f exposecontroller?\n\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u66b4\u9732\u670d\u52a1\u6bd4\u8f83\u590d\u6742\u3002\u4f8b\u5982\uff1a\n\n* \u4f7f\u7528\u4ec0\u4e48\u57df\u540d\uff1f\n* \u4f60\u662f\u5426\u5e94\u8be5\u4f7f\u7528 TLS \u548c\u751f\u6210\u7684\u8bc1\u4e66\uff0c\u5e76\u628a\u5b83\u4eec\u5173\u8054\u5230\u57df\u540d\u4e0a\uff1f\n* \u4f60\u662f\u5426\u5728\u4f7f\u7528 OpenShift\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u53ef\u80fd\u4f7f\u7528 `Route` \u4f1a\u6bd4 `Ingress` \u66f4\u597d\uff1f\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5728 Jenkins X \u4e2d\u901a\u8fc7\u628a\u5fae\u670d\u52a1\u4ee3\u7406\u5230\u4e00\u4e2a\u53eb\u505a [exposecontroller](https://github.com/jenkins-x/exposecontroller) \u7684\u670d\u52a1\u4e0a\u5b9e\u73b0\u7b80\u5316\uff0c\u5b83\u7684\u804c\u8d23\u5c31\u662f\u5904\u7406\u4e0a\u9762\u7684\u4e8b\u60c5\u2014\u2014\u628a\u6240\u6709\u5e26\u6709\u8868\u660e\u5e0c\u671b\u66b4\u9732\u5230\u5f53\u524d\u96c6\u7fa4\u7684 `Service` \u8d44\u6e90\u66b4\u9732\uff0c\u7c7b\u4f3c\u57df\u540d\u7684\u547d\u540d\u7a7a\u95f4\u7684\u66b4\u9732\u89c4\u5219\uff0c\u662f\u5426\u4f7f\u7528 TLS \u4ee5\u53ca `Route` \u6216 `Ingress`\u7b49\u3002\n\n\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u4f60\u7684\u73af\u5883 git \u4ed3\u5e93\uff0c\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u4e24\u4e2a `exposecontroller` [\u9ed8\u8ba4\u662f charts](https://github.com/jenkins-x/default-environment-charts/blob/master/env/requirements.yaml)\n\n\u9ed8\u8ba4\u6709\u4e24\u4e2a\u4efb\u52a1\u7528\u6765\u81ea\u52a8\u5316\u751f\u6210\u6216\u8005\u6e05\u7406 `Ingress` \u8d44\u6e90\uff0c\u4ee5\u5b9e\u73b0\u66b4\u9732\u6807\u8bb0\u4e86\u4f60\u5e0c\u671b\u4ece\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\u7684 `Services` \u8d44\u6e90\u3002\u4f8b\u5982\uff1aweb \u5e94\u7528\u6216\u8005 rest \u63a5\u53e3\u3002\n\n\u4f60\u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528 exposecontroller \u2014\u2014 \u53ea\u8981\u4e0d\u5728\u4f60\u7684\u670d\u52a1\u4e2d\u4f7f\u7528 exposecontroller \u6807\u7b7e\u5373\u53ef\u3002\u4f60\u4e5f\u53ef\u4ee5\u4ece\u73af\u5883\u4e2d\u79fb\u9664 exposecontroller \u4efb\u52a1 \u2014\u2014 \u8fd9\u4e48\u505a\u7684\u8bdd\uff0c\u6211\u4eec\u6240\u6709\u7684\u5feb\u901f\u5f00\u59cb\uff08QuickStarts\uff09\u90fd\u65e0\u6cd5\u4ece\u96c6\u7fa4\u5916\u90e8\u8bbf\u95ee\uff01\n",
            "content/zh/docs/Overview/_index.md": "---\ntitle: \"Overview\"\nlinkTitle: \"Overview\"\nweight: 1\ndescription: >\n  What is Jenkins X?\n---\n\nTo understand **intricacies and inner workings** of Jenkins X, we need to understand Kubernetes. But, you do not need to understand Kubernetes to **use Jenkins X**. That is one of the main contributions of the project. Jenkins X allows us to harness the power of Kubernetes without spending eternity learning the ever-growing list of the things it does. Jenkins X helps us by simplifying complex processes into concepts that can be adopted quickly and without spending months in trying to figure out \"the right way to do stuff.\" It helps by removing and simplifying some of the problems caused by the overall complexity of Kubernetes and its ecosystem. If you are indeed a Kubernetes ninja, you will appreciate all the effort put into Jenkins X. If you're not, you will be able to jump right in and harness the power of Kubernetes without ripping your hair out of frustration caused by Kubernetes complexity.\n\nI'll skip telling you that Kubernetes is a container orchestrator, how it manages our deployments, and how it took over the world by the storm. You hopefully already know all that. Instead, I'll define Kubernetes as a platform to rule them all. Today, most software vendors are building their next generation of software to be Kubernetes-native or, at least, to work better inside it. A whole ecosystem is emerging and treating Kubernetes as a blank canvas. As a result, new tools are being added on a daily basis, and it is becoming evident that Kubernetes offers near-limitless possibilities. However, with that comes increased complexity. It is harder than ever to choose which tools to use. How are we going to develop our applications? How are we going to manage different environments? How are we going to package our applications? Which process are we going to apply for application life cycles? And so on and so forth. Assembling a Kubernetes cluster with all the tools and processes takes time, and learning how to use what we assembled feels like a never-ending story. Jenkins X aims to remove those and quite other obstacles.\n\nJenkins X is opinionated. It defines many aspects of the software development life cycle, and it makes decisions for us. It tells us what to do and how. It is like a tour guide on your vacations that shows you where to go, what to look at, when to take a photo, and when it's time to take a break. At the same time, it is flexible and allows power users to tweak it to fit their own needs.\n\nThe real power behind Jenkins X is the process, the selection of tools, and the glue that wraps everything into one cohesive unit that is easy to learn and use. We (people working in the software industry) tend to reinvent the wheel all the time. We spend countless hours trying to figure out how to develop our applications faster and how to have a local environment that is as close to production as possible. We dedicate time searching for tools that will allow us to package and deploy our applications more efficiently. We design the steps that form a continuous delivery pipeline. We write scripts that automate repetitive tasks. And yet, we cannot escape the feeling that we are likely reinventing things that were already done by others. Jenkins X is designed to help us with those decisions, and it helps us to pick the right tools for a job. It is a collection of industry's best practices. In some cases, Jenkins X is the one defining those practices, while in others it helps us adopting those made by others.\n\nIf we are about to start working on a new project, Jenkins X will create the structure and the required files. If we need a Kubernetes cluster with all the tools selected, installed, and configured, Jenkins X will do that. If we need to create Git repositories, set webhooks, and create continuous delivery pipelines, all we need to do is execute a single `jx` command. The list of what Jenkins X does is vast, and it grows every day.\n\nI won't go into details of everything Jenkins X does. That will come later. For now, I hope I got your attention. The critical thing to note is that you need to clear your mind from any Jenkins experience you might already have. Sure, Jenkins is there, but it is only a part of the package. Jenkins X is very different from the \"traditional Jenkins\". The differences are so massive that the only way for you to embrace it is to forget what you know about Jenkins and start from scratch.\n\n## Where should I go next?\n\nGive your users next steps from the Overview. For example:\n\n* [Getting Started](/zh/docs/getting-started/): Get started with $project\n* [Examples](/examples/): Check out some example code!\n\n",
            "content/zh/docs/Overview/faq.md": "---\ntitle: \u5e38\u89c1\u95ee\u9898\u89e3\u7b54\nlinktitle: FAQ\ndescription: Jenkins X \u5e38\u89c1\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002\n---\n\n\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u628a\u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898\u6574\u7406\u5230\u8fd9\u91cc\u3002\u5982\u679c\u4f60\u9047\u5230\u7684\u95ee\u9898\u6ca1\u6709\u5728\u8fd9\u91cc\u5217\u51fa\u6765\uff0c\u8bf7[\u8ba9\u6211\u4eec\u77e5\u9053](https://github.com/jenkins-x/jx/issues/new)\u3002\n\n\n## Jenkins X \u662f\u5f00\u6e90\u7684\u5417\uff1f\n\n\u662f\u7684\uff01Jenkins X \u7684\u6240\u6709\u6e90\u7801\u548c\u6210\u54c1\u90fd\u662f\u5f00\u6e90\u7684\uff1bApache \u6216 MIT \u80fd\u4fdd\u8bc1\u8fd9\u4e00\u70b9\uff01\n\n## Jenkins X \u548c Jenkins \u76f8\u6bd4\u5982\u4f55\u5462\uff1f\n\nJenkins X \u901a\u8fc7[\u8de8\u73af\u5883\u7684 GitOps \u90e8\u7f72\u5347\u7ea7](/zh/about/concepts/features/#\u90e8\u7f72\u5347\u7ea7)\u548c[ Pull Requests \u9884\u53d1\u73af\u5883](/zh/about/concepts/features/#\u9884\u53d1\u73af\u5883)\u4e3a Kubernetes \u4e2d\u7684\u5e94\u7528\u63d0\u4f9b\u4e86[\u81ea\u52a8\u5316 CI + CD ](/zh/about/concepts/features/#automated-pipelines)\u3002\n\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u8003[\u7279\u6027](/zh/about/concepts/features/)\u3002\n\nJenkins\u662f\u4e00\u4e2a\u901a\u7528\u7684 CI/CD \u670d\u52a1\u5668\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u63d2\u4ef6\u3001\u66f4\u6539\u914d\u7f6e\u548c\u7f16\u5199\u81ea\u5df1\u7684\u6d41\u6c34\u7ebf\u6765\u914d\u7f6e\u5b83\u6765\u505a\u4f60\u559c\u6b22\u7684\u4efb\u4f55\u4e8b\u60c5\u3002\n\n\u5bf9\u4e8e Jenkins X \u4ec5\u4ec5[\u5b89\u88c5 Jenkins X ](/zh/dosc/getting-started/)\uff0c\u5b83\u5c06\u81ea\u52a8\u914d\u7f6e\u6240\u6709\u5404\u79cd\u4e0d\u540c\u7684\u5de5\u5177\uff08 helm\uff0cdocker registry\uff0cnexus \u7b49\u7b49\uff09\uff0c\u7136\u540e[\u521b\u5efa](/zh/docs/resources/guides/using-jx/common-tasks/create-spring/)/\u5bfc\u5165(/zh/docs/resources/guides/using-jx/common-tasks/import/)\uff0c\u4f60\u5c06\u83b7\u5f97\u5168\u9762\u7684\u81ea\u52a8\u5316 CI/CD \u548c\u9884\u53d1\u73af\u5883\u3002\u8fd9\u4f7f\u5f97\u5f53\u4f60\u59d4\u6258 Jenkins X \u7ba1\u7406\u60a8\u7684 CI + CD \u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u96c6\u4e2d\u7cbe\u529b\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u3002\n\nJenkins X \u652f\u6301\u4e0d\u540c\u7684\u6267\u884c\u5f15\u64ce\uff1b\u56e0\u6b64\u5b83\u53ef\u4ee5\u901a\u8fc7\u5728 Docker \u5bb9\u5668\u4e2d\u91cd\u7528 Jenkins \u6765\u4e3a\u6bcf\u4e2a\u56e2\u961f\u7f16\u6392 Jenkins \u670d\u52a1\u5668\u3002\u7136\u800c\u5f53\u4f7f\u7528[\u65e0\u670d\u52a1 Jenkins X \u6d41\u6c34\u7ebf](/zh/about/concepts/jenkins-x-pipelines/)\u65f6\uff0c\u6211\u4eec\u4f7f\u7528 [Tekton](https://tekton.dev/) \u800c\u4e0d\u662f Jenkins \u4f5c\u4e3a\u5e95\u5c42\u7684 CI/CD \u5f15\u64ce\u6765\u63d0\u4f9b\u4e00\u4e2a\u65b0\u5f0f\u7684\u3001\u9ad8\u53ef\u7528\u7684\u4e91\u539f\u751f\u67b6\u6784\u3002\n\n\n## Jenkins X \u662f Jenkins \u7684\u5206\u652f\u5417\uff1f\n\n\u4e0d\uff01 Jenkins X \u53ef\u4ee5\u901a\u8fc7\u5728\u5bb9\u5668\u4e2d\u91cd\u7528 Jenkins \u6765\u7f16\u6392 Jenkins \uff0c\u5e76\u5c3d\u53ef\u80fd\u5730\u7528 kubernetes \u539f\u751f\u65b9\u5f0f\u914d\u7f6e\u5b83\u3002\n\n\u7136\u800c\u5f53\u4f7f\u7528[\u65e0\u670d\u52a1 Jenkins X \u6d41\u6c34\u7ebf](/zh/about/concepts/jenkins-x-pipelines/)\u65f6\uff0c\u6211\u4eec\u4f7f\u7528 [Tekton](https://tekton.dev/) \u800c\u4e0d\u662f Jenkins \u4f5c\u4e3a\u5e95\u5c42\u7684 CI/CD \u5f15\u64ce\u6765\u63d0\u4f9b\u4e00\u4e2a\u65b0\u5f0f\u7684\u3001\u9ad8\u53ef\u7528\u7684\u4e91\u539f\u751f\u67b6\u6784\u3002\n\n## \u4e3a\u4ec0\u4e48\u8981\u521b\u5efa\u4e00\u4e2a\u5b50\u9879\u76ee\uff1f\n\n\u6211\u4eec\u662f <a href=\"https://kubernetes.io/\">Kubernetes</a> \u548c\u4e91\u7684\u8d85\u7ea7\u7c89\u4e1d\uff0c\u5e76\u8ba4\u4e3a\u662f\u8f6f\u4ef6\u8fd0\u884c\u7684\u672a\u6765\u8d8b\u52bf\u3002\n\n\u7136\u800c\uff0c\u5f88\u591a\u5206\u652f\u4ecd\u7136\u60f3\u8981\u901a\u8fc7\uff1a<code>java -jar jenkins.war</code >\u4ee5\u5e38\u89c4\u7684\u65b9\u5f0f\u6765\u8fd0\u884c Jenkins\u3002\n\n\u56e0\u6b64\uff0cJenkins X \u5b50\u9879\u76ee\u7684\u60f3\u6cd5\uff0c\u662f\u4e3a\u4e86100%\u5173\u6ce8\u5728 Kubernetes \u548c\u4e91\u539f\u751f\u4f7f\u7528\u573a\u666f\uff0c\u5e76\u8ba9 Jenkins \u6838\u5fc3\u9879\u76ee\u5173\u6ce8\u7ecf\u5178\u7684 Java \u65b9\u5f0f\u3002\n\nJenkins \u6700\u5f3a\u5927\u7684\u662f\u5b83\u7684\u7075\u6d3b\u6027\u548c\u5de8\u5927\u7684\u63d2\u4ef6\u751f\u6001\u3002\u5206\u79bb Jenkins X \u5b50\u9879\u76ee\u5e2e\u52a9\u793e\u533a\u5e76\u884c\u5730\u8fed\u4ee3\u5e76\u5feb\u901f\u6539\u8fdb\u4e91\u539f\u751f\u548c Jenkins \u7ecf\u5178\u7684\u53d1\u884c\u3002\n",
            "content/zh/docs/Overview/license.md": "---\ntitle: Apache License\nlinktitle: License\ndescription: Jenkins X is released under the Apache 2.0 license.\ndate: 2016-02-01\npublishdate: 2016-02-01\nlastmod: 2016-03-02\ncategories: [\"about jenkins x\"]\nkeywords: [\"License\",\"apache\"]\nweight: 60\n---\n\n{{< pageinfo >}}\nJenkins X is released under the Apache 2.0 license.\n{{< /pageinfo >}}\n\n_Version 2.0, January 2004_ <br>\n<http://www.apache.org/licenses/LICENSE-2.0>\n\n*Terms and Conditions for use, reproduction, and distribution*\n\n## 1. Definitions\n\n\u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \u201ccontrol\u201d means **(i)** the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or **(ii)** ownership of fifty percent (50%) or more of the\noutstanding shares, or **(iii)** beneficial ownership of such entity.\n\n\u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\u201cSource\u201d form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\u201cObject\u201d form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\u201cContribution\u201d shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\u201csubmitted\u201d means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \u201cNot a Contribution.\u201d\n\n\u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n## 2. Grant of Copyright License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n## 3. Grant of Patent License\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n## 4. Redistribution\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\n* **(a)** You must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\n* **(b)** You must cause any modified files to carry prominent notices stating that You\nchanged the files; and\n* **\\(c)** You must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\n* **(d)** If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.\n\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n## 5. Submission of Contributions\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n## 6. Trademarks\n\nThis License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n## 7. Disclaimer of Warranty\n\nUnless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n## 8. Limitation of Liability\n\nIn no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n## 9. Accepting Warranty or Additional Liability\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\n_END OF TERMS AND CONDITIONS_\n\n## APPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets `[]` replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives.\n\n```txt\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\nAdd this as a file called `apache-notice.txt` to the root of your repo",
            "content/zh/docs/Reference/_index.md": "---\ntitle: \"Reference\"\nlinkTitle: \"Reference\"\nweight: 6\ndescription: >\n  Reference docs for Jenkins X.\n---\n\n",
            "content/zh/docs/Reference/preview.md": "---\ntitle: \u9884\u89c8\nlinktitle: \u9884\u89c8\ndescription: \u5728\u53d8\u66f4\u5408\u5e76\u5230 master \u4e4b\u524d\u9884\u89c8 Pull Requests\n---\n\n\n\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u4f7f\u7528 [\u9884\u89c8\u73af\u5883](/zh/about/concepts/features/#preview-environments) \uff0c\u4f7f\u5f97\u5728\u53d8\u66f4\u5408\u5e76\u5230 master \u4e4b\u524d\u5c3d\u5feb\u5730\u5f97\u5230\u53cd\u9988\u3002\n\n\u901a\u5e38\uff0c\u9884\u89c8\u73af\u5883\u662f\u7531 Jenkins X \u7684\u6d41\u6c34\u7ebf\u4e2d\u81ea\u52a8\u521b\u5efa\u7684\u3002\n\n\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx](/commands/jx/) \u901a\u8fc7\u547d\u4ee4 [jx preview](/commands/jx_preview/) \u624b\u52a8\u521b\u5efa\u4e00\u4e2a[\u9884\u89c8\u73af\u5883](/zh/about/concepts/features/#preview-environments)\u3002\n\n```sh\njx preview\n```\n\n### \u521b\u5efa\u9884\u89c8\u73af\u5883\u65f6\u90fd\u505a\u4e86\u4ec0\u4e48\n\n* \u4e00\u4e2a\u65b0\u7684 [\u73af\u5883](/zh/about/concepts/features/#environments) \uff0c\u4f8b\u5982 `\u9884\u89c8` \u88ab\u521b\u5efa\u65f6\uff0c\u4e00\u4e2a [kubernetes \u547d\u540d\u7a7a\u95f4](https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/) \u4f1a\u5728 [jx get environments](/commands/jx_get_environments/) \u51fa\u73b0\uff0c \u4f7f\u7528 [jx \u73af\u5883\u548c jx \u547d\u540d\u7a7a\u95f4\u547d\u4ee4](/zh/developing/kube-context) \u4f60\u53ef\u4ee5\u770b\u5230\u90a3\u4e2a\u9884\u89c8\u73af\u5883\u662f\u6d3b\u8dc3\u7684\uff0c\u5e76\u53ef\u4ee5\u8fdb\u5165\u67e5\u770b\u3002\n* Pull Request \u4f1a\u4f5c\u4e3a\u9884\u89c8 Docker \u955c\u50cf\u548c chart \u6784\u5efa\uff0c\u5e76\u88ab\u90e8\u7f72\u5230\u9884\u89c8\u73af\u5883\u4e2d\n* \u6dfb\u52a0\u4e00\u6761\u6ce8\u91ca\u5230 Pull Request \u4e2d\uff0c\u8ba9\u4f60\u4eec\u56e2\u961f\u77e5\u9053\u8be5\u9884\u89c8\u5e94\u7528\u5df2\u7ecf\u51c6\u5907\u597d\u53ef\u4ee5\u6d4b\u8bd5\u4e86\uff0c\u5e76\u5e26\u6709\u6253\u5f00\u5e94\u7528\u7684\u94fe\u63a5\u3002\u56e0\u6b64\uff0c\u53ea\u8981\u70b9\u51fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u8ba9\u4f60\u4eec\u56e2\u961f\u6210\u5458\u4f53\u9a8c\u9884\u89c8\u73af\u5883\uff01\n\n<img src=\"/images/pr-comment.png\" class=\"img-thumbnail\">\n\n\n\n",
            "content/zh/docs/_index.md": "---\ntitle: Jenkins X \u6587\u6863\nlinktitle: \u6587\u6863\ndescription:\ndate: 2017-02-01\npublishdate: 2017-02-01\nweight: 20\nmenu:\n  main:\n    weight: 20\nsections_weight: 20\ndraft: false\nslug:\naliases: []\n---\nJenkins X \u662f\u57fa\u4e8e Kubernetes \u7684\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u90e8\u7f72\u5e73\u53f0\n\n",
            "content/zh/docs/contributing/_index.md": "---\ntitle: \u7ed9 Jenkins X \u9879\u76ee\u505a\u8d21\u732e\nlinktitle: \u7ed9 Jenkins X \u9879\u76ee\u505a\u8d21\u732e\ndescription: \u7ed9 Jenkins X \u9879\u76ee\u505a\u7814\u53d1\u548c\u6587\u6863\u8d21\u732e\u3002\nweight: 10\n---\n\nJenkins X \u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u5f00\u6e90\u793e\u533a\u7684\u70ed\u60c5\u53c2\u4e0e\u3002\u6211\u4eec\u9700\u8981\u4f60\uff0c\u6240\u4ee5\u8bf7\u52a0\u5165\u6211\u4eec\uff01\u8fd9\u91cc\u6709\u5f88\u591a\u65b9\u5f0f\u63d0\u4f9b\u5e2e\u52a9\uff1a\n\n* [\u7ed9\u6211\u4eec\u53cd\u9988](community/)\u3002 \u6211\u4eec\u8fd8\u53ef\u4ee5\u6539\u8fdb\u4ec0\u4e48\uff1f\u4f60\u4e0d\u559c\u6b22\u4ec0\u4e48\u6216\u8005\u4f60\u8ba4\u4e3a\u7f3a\u5c11\u4ec0\u4e48\uff1f\n* \u5e2e\u52a9 [\u6539\u8fdb\u6587\u6863](documentation/)\uff0c\u4ee5\u4fbf\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u5982\u4f55\u5f00\u59cb\u4f7f\u7528Jenkins X\u3002\n* [\u6dfb\u52a0\u60a8\u81ea\u5df1\u7684\u5feb\u901f\u5165\u95e8](/zh/docs/getting-started/first-project/create-quickstart/#adding-your-own-quickstarts) \u4ee5\u4fbf Jenkins X \u793e\u533a\u53ef\u4ee5\u4f7f\u7528\u60a8\u7684\u5feb\u901f\u5165\u95e8\u8f7b\u677e\u5f15\u5bfc\u65b0\u9879\u76ee\u3002\u5982\u679c\u4f60\u5728\u4e3a\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u5de5\u4f5c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u9879\u76ee\u662f\u5426\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u597d\u7684\u5feb\u901f\u5165\u95e8\u9879\u76ee\u6dfb\u52a0\u5230 Jenkins X \u5f53\u4e2d\u3002\n* \u521b\u5efa\u4e00\u4e2a [\u63d2\u4ef6](/zh/about/concepts/features/#\u5e94\u7528)\u3002\u8981\u6dfb\u52a0\u81ea\u5df1\u7684\u63d2\u4ef6\uff0c\u53ea\u9700\u521b\u5efa\u4e00\u4e2a Helm Chart \uff0c\u4ee5\u83b7\u5f97\u6269\u5c55 Jenkins X\uff0c\u7136\u540e\u63d0\u4ea4\u4e00\u4e2a Pull Request \u5728 [the pkg/kube/constants.go file](https://github.com/jenkins-x/jx/blob/master/pkg/kube/constants.go#L32-L50) \u6765\u6dfb\u52a0\u4f60\u7684 chart \u7684\u540d\u79f0\u5339\u914d\u5230`AddonCharts`\u3002\n* \u5982\u679c\u4f60\u60f3\u8981 [\u8d21\u732e\u4ee3\u7801](development/) \u90a3\u4e48\u5c1d\u8bd5\u6d4f\u89c8 [\u5f53\u524d\u95ee\u9898](https://github.com/jenkins-x/jx/issues).\n  * \u6211\u4eec\u5df2\u7ecf\u6807\u8bb0\u4e86\u95ee\u9898 [\u9700\u8981\u5e2e\u52a9](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) \u6216\u8005 [\u597d\u7684\u9996\u4e2a\u95ee\u9898](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) \u4e3a\u4f60\u8282\u7701\u5bfb\u627e\u95ee\u9898\u7684\u65f6\u95f4\u3002\n  * \u6211\u4eec\u7279\u522b\u4e50\u610f\u5e2e\u52a9\u60a8 [\u5728 Windows \u4e0a\u8fd0\u884c Jenkins X](https://github.com/jenkins-x/jx/issues?q=is%3Aopen+is%3Aissue+label%3Awindows) \u6216\u8005 [\u548c\u4e91\u670d\u52a1\uff0cgit \u63d0\u4f9b\u7a0b\u5e8f\u4ee5\u53ca\u95ee\u9898\u8ddf\u8e2a\u5668\u96c6\u6210](https://github.com/jenkins-x/jx/issues?q=is%3Aissue+is%3Aopen+label%3Aintegrations)\u3002\n * \u4e3a\u4e86\u66f4\u957f\u8fdc\u7684\u76ee\u6807\uff0c\u6211\u4eec\u5236\u5b9a\u4e86 [\u957f\u671f\u8def\u7ebf\u56fe](roadmap)\u3002\n * \u6211\u4eec\u603b\u662f\u63a5\u6536\u66f4\u591a\u7684\u6d4b\u8bd5\u7528\u4f8b\u5e76\u63d0\u9ad8\u6d4b\u8bd5\u8986\u76d6\u7387\u3002\n",
            "content/zh/docs/contributing/code/_index.md": "---\ntitle: \u8d21\u732e\u4ee3\u7801\nlinktitle: \u5f00\u53d1\ndescription: \u5982\u4f55\u4e3a Jenkins X \u7684\u53d1\u5c55\u505a\u8d21\u732e\nauthors: [digitalcraftsman]\n---\n\n## \u4ecb\u7ecd\n\nJenkins X \u662f\u7531\u4f17\u591a[\u5f00\u53d1\u8005][contributors]\u5f00\u53d1\u7684\u5f00\u6e90\u9879\u76ee\u3002\u8fd8\u6709\u5f88\u591a [open issues][issues]\uff0c\u6211\u4eec\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u6765\u4f7f Jenkins X \u53d8\u5f97\u66f4\u68d2\u3002\u5373\u4f7f\u4f60\u4e0d\u662f\u4e00\u4e2a Go \u8bed\u8a00\u7684\u4e13\u5bb6\uff0c\u4e5f\u53ef\u4ee5\u5bf9\u9879\u76ee\u7684\u5f00\u53d1\u8d21\u732e\u529b\u91cf\u3002\n\n\n## \u5047\u8bbe\n\n\u672c\u7bc7\u6307\u5bfc\u6587\u6863\u5c06\u5e2e\u52a9\u65b0\u63a5\u89e6 Jenkins X \u7684\u8bfb\u8005\u9010\u6b65\u719f\u6089\u5b83\uff0c\u56e0\u6b64\u6211\u4eec\u5047\u5b9a\uff1a\n\n* \u4f60\u662f\u521a\u521a\u63a5\u89e6 Git \u6216\u8005\u5f00\u6e90\u9879\u76ee\n* \u4f60\u662f Jenkins X \u7684\u7231\u597d\u8005\u5e76\u4e50\u4e8e\u5bf9\u9879\u76ee\u7684\u53d1\u5c55\u8d21\u732e\u529b\u91cf\n\n{{< alert \"\u6709\u5176\u5b83\u7684\u95ee\u9898\uff1f\" >}}\n\u5982\u679c\u5728\u9605\u8bfb\u6b64\u6307\u5bfc\u6587\u6863\u8fc7\u7a0b\u4e2d\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u5411 Jenkins X \u793e\u533a\u7684[\u8ba8\u8bba\u7ec4](/community/)\u5bfb\u6c42\u5e2e\u52a9\u3002\n{{< /alert >}}\n\n## \u5b89\u88c5 Go\n\nGo \u8bed\u8a00\u73af\u5883\u7684\u5b89\u88c5\u4ec5\u9700\u8981\u51e0\u5206\u949f\u3002\u5e76\u4e14\u591a\u79cd\u65b9\u5f0f\u53ef\u4f9b\u9009\u62e9\u3002\n\n\u5982\u679c\u5728\u5b89\u88c5\u8fc7\u7a0b\u5f53\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u67e5\u9605 [Go Bootcamp,which contains setups for every platform][gobootcamp] \u6216\u8005\u5411 Jenkins X [\u8bba\u575b][forums]\u4e2d\u5bfb\u6c42\u5e2e\u52a9\u3002\n\n\n### \u4ece\u6e90\u7801\u5b89\u88c5 Go\n\n[\u4e0b\u8f7d\u6700\u65b0\u7248 Go \u6e90\u7801][godl]\u5e76\u901a\u8fc7\u5b98\u65b9[\u5b89\u88c5\u6587\u6863][goinstall]\u8fdb\u884c\u5b89\u88c5\u3002\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u786e\u8ba4\u662f\u5426\u4e00\u5207\u5de5\u4f5c\u6b63\u5e38\u3002\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\u6216\u8005\u5728 Windows \u4e0a\u7684\u547d\u4ee4\u884c\u5e76\u8f93\u5165:\n\n```sh\ngo version\n```\n\n\u5728\u7ec8\u7aef\u7684\u7a97\u53e3\u4e0a\u53ef\u4ee5\u770b\u5230\u7c7b\u4f3c\u5982\u4e0b\u7684\u4fe1\u606f\u3002\u6ce8\u610f `version` \u8868\u793a\u7684\u662f\u5728\u5728\u66f4\u65b0\u6b64\u6587\u6863\u65f6\u6700\u65b0\u7684 Go \u7684\u7248\u672c\u4fe1\u606f:\n\n```sh\ngo version go1.8 darwin/amd64\n```\n\n\u4e0b\u4e00\u6b65\uff0c\u786e\u4fdd[\u6839\u636e\u5b89\u88c5\u6587\u6863][setupgopath] \u8bbe\u7f6e\u4e86 `GOPATH` \u73af\u5883\u53d8\u91cf\u3002\n\u901a\u8fc7 `echo $GOPATH` \u8f93\u51fa `GOPATH`\u3002\u5e94\u8be5\u662f\u6307\u5411\u4e86\u4f60\u7684\u5408\u6cd5\u7684 Go \u7684\u5de5\u4f5c\u76ee\u5f55\u7684\u975e\u7a7a\u5b57\u7b26\u4e32\uff0c\u5982:\n\n```sh\n/Users/<yourusername>/Code/go\n```\n\n### \u4f7f\u7528 Homebrew \u5b89\u88c5 Go\n\n\u5982\u679c\u4f60\u662f MacOS \u7528\u6237\u5e76\u4e14\u5b89\u88c5\u4e86 [Homebrew](https://brew.sh/)\uff0c\u5b89\u88c5\u8fc7\u7a0b\u5c06\u4f1a\u5f88\u7b80\u5355\uff0c\u5728\u7ec8\u7aef\u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4:\n\n```sh\nbrew install go\n```\n\n### \u901a\u8fc7 GVM \u5b89\u88c5 GO\n\n\u66f4\u6709\u7ecf\u9a8c\u7684\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 [Go Version Manager][gvm] (GVM)\u3002GVM \u5141\u8bb8\u4f60\u5728 *\u540c\u4e00\u53f0\u673a\u5668\u4e0a* \u5b89\u88c5\u5e76\u5207\u6362\u4f7f\u7528\u591a\u79cd\u7248\u672c\u7684 Go \u8bed\u8a00\u73af\u5883\u3002\u5982\u679c\u4f60\u662f\u521d\u5b66\u8005\uff0c\u53ef\u80fd\u4e0d\u592a\u9700\u8981\u8fd9\u4e2a\u529f\u80fd\u3002\u7136\u800c\uff0c GVM \u901a\u8fc7\u51e0\u6761\u547d\u4ee4\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u66f4\u65b0\u5230\u65b0\u53d1\u5e03\u7248\u672c\u7684 Go \u8bed\u8a00\u3002\n\n\u5728\u5f00\u53d1 Jenkins X\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u540e\uff0cGVM \u4f7f\u7528\u8d77\u6765\u5c06\u4f1a\u7279\u522b\u7684\u65b9\u4fbf\u3002Jenkins X \u4e4b\u540e\u7684\u7248\u672c\u5c06\u4f1a\u7528\u6700\u65b0\u7248\u7248\u7684 Go \u8bed\u8a00\u8fdb\u884c\u7f16\u8bd1\uff0c\u56e0\u6b64\u5982\u679c\u60f3\u4e0e\u793e\u533a\u5f00\u53d1\u540c\u6b65\u7684\u8bdd\uff0c\u5c06\u4f1a\u9700\u8981\u66f4\u65b0 Go \u73af\u5883\u3002\n\n## \u521b\u5efa\u4e00\u4e2a GitHub \u8d26\u53f7\n\n\u5982\u679c\u4f60\u60f3\u8981\u8d21\u732e\u4ee3\u7801\u7684\u8bdd\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a Github \u8d26\u53f7\u3002\u767b\u5f55 [www.github.com/join](https://github.com/join) \u6ce8\u518c\u4e2a\u4eba\u8d26\u53f7\u3002\n\n## \u5728\u4f60\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 Git\nJenkins X \u5f00\u53d1\u8fc7\u7a0b\u5f53\u4e2d\u9700\u8981\u5728\u672c\u673a\u5b89\u88c5 Git \u5ba2\u6237\u7aef\u3002Git \u7684\u4f7f\u7528\u5b66\u4e60\u4e0d\u5305\u542b\u5728 Jenkins X \u7684\u6587\u6863\u4e2d\uff0c\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u4ece\u54ea\u91cc\u5f00\u59cb\u7684\u8bdd\uff0c\u6211\u4eec\u63a8\u8350\u901a\u8fc7 [Git book][gitbook] \u5b66\u4e60\u4f7f\u7528 Git \u7684\u57fa\u672c\u77e5\u8bc6\u3002\u4f7f\u7528\u7684\u8bcd\u6c47\u5c06\u4f1a\u901a\u8fc7\u6ce8\u89e3\u8fdb\u884c\u89e3\u91ca\u3002\n\nGit \u662f\u4e00\u4e2a[\u7248\u672c\u63a7\u5236\u7cfb\u7edf](https://en.wikipedia.org/wiki/Version_control)\uff0c\u7528\u4e8e\u8ddf\u8e2a\u6e90\u4ee3\u7801\u7684\u53d8\u5316\u3002\u4e3a\u4e86\u4e0d\u91cd\u590d\u9020\u8f6e\u5b50\uff0cJenkins X \u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9\u7684\u8f6f\u4ef6\u5305\u6765\u6269\u5c55\u529f\u80fd\u3002\n\nGo \u63d0\u4f9b\u4e86 `get` \u7684\u5b50\u547d\u4ee4\u6765\u5e2e\u52a9\u4e0b\u8f7d\u8f6f\u4ef6\u5305\u4ee5\u914d\u7f6e\u5de5\u4f5c\u73af\u5883\u3002\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u7684\u6e90\u7801\u4fe1\u606f\u5728 Git \u4e2d\u8bb0\u5f55\u3002`get` \u4f1a\u4e0e\u627f\u8f7d\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u7684 Git \u670d\u52a1\u5668\u7aef\u8fdb\u884c\u4ea4\u4e92\u6765\u4e0b\u8f7d\u6240\u6709\u7684\u4f9d\u8d56\u3002\n\n\u56de\u5230\u7ec8\u7aef\u4e2d\uff0c\u8f93\u5165 `git version` \u5e76\u6309\u56de\u8f66\uff0c\u68c0\u9a8c\u662f\u5426\u5b89\u88c5 Git\u3002\u5982\u679c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7248\u672c\u53f7\u4fe1\u606f\uff0c\u90a3\u4e48\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u7684\u914d\u7f6e\u3002\u5426\u5219\u7684\u8bdd[\u4e0b\u8f7d](https://git-scm.com/downloads)\u6700\u65b0\u7248\u7684 Git \u5e76\u6839\u636e[\u5b89\u88c5\u6587\u6863](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\u8fdb\u884c\u5b89\u88c5\u3002\n\n\u6700\u540e\uff0c\u518d\u4e00\u6b21\u8f93\u5165 `git version` \u68c0\u9a8c Git \u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u3002\n\n### Git \u56fe\u5f62\u5316\u524d\u7aef\n\n\u6709\u4e00\u4e9b[\u56fe\u5f62\u754c\u9762\u5ba2\u6237\u7aef](https://git-scm.com/downloads/guis)\u53ef\u4ee5\u5e2e\u52a9\u64cd\u4f5c Git\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5ba2\u6237\u7aef\u5728\u6240\u6709\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u90fd\u6709\u76f8\u5e94\u7684\u7248\u672c\uff0c\u800c\u4e14\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u7684\u4f7f\u7528\u65b9\u6cd5\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u5728\u4ee5\u4e0b\u7684\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f1a\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u7684\u65b9\u5f0f\u4e3a\u57fa\u51c6\u3002\n\n### \u5728\u4f60\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 Hub\uff08\u53ef\u9009\uff09\n\n\u5728\u4e0e GitHub \u534f\u540c\u5f00\u53d1\u65f6\uff0cHub \u662f\u4e2a\u5f88\u597d\u7684\u5de5\u5177\u3002\u8bf7\u8bbf\u95ee [hub.github.com](https://hub.github.com/)\uff0c\u6765\u5b89\u88c5\u4f53\u9a8c\u8fd9\u4e2a\u5c01\u88c5\u4e86 Git \u7684\u5c0f\u5de5\u5177\u3002\n\n\u5728 Mac \u7cfb\u7edf\u4e0a\uff0c\u53ef\u4ee5\u901a\u8fc7 [Homebrew](https://brew.sh) \u6765\u5b89\u88c5 [Hub](https://github.com/github/hub)\uff1a\n\n```sh\nbrew install hub\n```\n\n\u5b89\u88c5\u4e4b\u540e\uff0c\u5728 Bash \u4e2d\u521b\u5efa[\u5feb\u6377\u952e](http://tldp.org/LDP/abs/html/aliases.html)\uff0c\u4ee5\u65b9\u4fbf\u6211\u4eec\u5728\u6267\u884c `git` \u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u6267\u884c\u7684\u662f `hub`:\n\n```sh\necho \"alias git='hub'\" >> ~/.bash_profile\n```\n\n\u786e\u8ba4\u5b89\u88c5\u914d\u7f6e\u662f\u5426\u6b63\u786e\uff1a\n\n```sh\ngit version 2.6.3\nhub version 2.2.2\n```\n\n## \u8bbe\u7f6e\u4f60\u7684\u5de5\u4f5c\u526f\u672c\n\n\u5de5\u4f5c\u526f\u672c\u662f\u5728\u4f60\u7684\u7535\u8111\u4e2d\u8fdb\u884c\u672c\u5730\u8bbe\u7f6e\u7684\u3002\u4f60\u5c06\u4f1a\u5bf9\u5b83\u8fdb\u884c\u7f16\u8f91\uff0c\u7f16\u8bd1\u4ee5\u53ca\u6700\u7ec8\u63a8\u9001\u56de\u5230 GitHub\u3002\u4e3b\u8981\u7684\u6b65\u9aa4\u662f\u5728\u8fdc\u7aef\u5bf9\u6e90 Git \u4ee3\u7801\u5e93\u521b\u5efa\u4f60\u7684\u5206\u652f\u4ed3\u5e93\u5e76\u4e4b\u540e\u5728\u672c\u5730\u8fdb\u884c\u514b\u9686\u3002\n\n### \u514b\u9686\u4ed3\u5e93\n\n\u6211\u4eec\u5047\u5b9a\u4f60\u5df2\u7ecf\u8bbe\u7f6e\u4e86 `GOPATH`\uff08\u5982\u679c\u4e0d\u786e\u5b9a\u7684\u8bdd\u67e5\u9605\u4e0a\u9762\u7684\u76f8\u5e94\u90e8\u5206\uff09\u73af\u5883\u53d8\u91cf\uff0c\u73b0\u5728\u4ee5\u53ef\u4ee5\u4e0b\u8f7d Jenkins X \u7684\u4ee3\u7801\u5e93\u5230\u672c\u5730\u7535\u8111\u4e2d\u3002\u8fd9\u4e00\u8fc7\u7a0b\u5c31\u662f\u88ab\u79f0\u4f5c\u201c\u514b\u9686\u4ed3\u5e93\u201d\u3002GitHub \u7684[\u5e2e\u52a9\u6587\u6863](https://help.github.com/articles/cloning-a-repository/)\u5bf9\u5176\u8fdb\u884c\u4e86\u7b80\u77ed\u7684\u89e3\u91ca\uff1a\n\n> When you create a repository on GitHub\uff0c it exists as a remote repository. You can create a local clone of your repository on your computer and sync between the two locations.\n\n\u6211\u4eec\u4f1a\u514b\u9686 Jenkins X \u4ee3\u7801\u5e93\u7684[\u4e3b\u7248\u672c](https://github.com/jenkins-x/jx)\u3002\u7531\u4e8e\u4f60\u8fd8\u6ca1\u6709\u5bf9\u4ee3\u7801\u5e93\u7684\u63d0\u4ea4\u4ee3\u7801\u7684\u6743\u9650\uff0c\u8fd9\u770b\u4e0a\u53bb\u6709\u4e9b\u8fdd\u53cd\u5e38\u7406\u3002\u4f46\u662f\u8fd9\u4e00\u6b65\u9aa4\u5728 Go \u7684\u5de5\u4f5c\u6d41\u5f53\u4e2d\u662f\u5fc5\u987b\u7684\u4e00\u9879\u3002\u4f60\u5c06\u4f1a\u5728\u4e3b\u7248\u672c\u7684\u526f\u672c\u4e2d\u8fdb\u884c\u5de5\u4f5c\uff0c\u5c06\u4fee\u6539\u7684\u90e8\u5206\u63d0\u4ea4\u5230\u4f60\u5728 GitHub \u4e0a\u7684\u4ed3\u5e93\u5f53\u4e2d\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u514b\u9686\u4e3b\u7248\u672c\u5e93\uff1a\n\n```sh\ngo get -v -u github.com/jenkins-x/jx\n```\n\nJenkins X \u4f7f\u7528 [Testify](https://github.com/stretchr/testify) \u8fdb\u884c Go \u4ee3\u7801\u7684\u6d4b\u8bd5\u3002\u5982\u679c\u8fd8\u6ca1\u6709\u5b89\u88c5\u7684\u8bdd\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u83b7\u5f97 Testify \u6d4b\u8bd5\u5de5\u5177\uff1a\n\n```sh\ngo get github.com/stretchr/testify\n```\n\n### \u6d3e\u751f\u4ed3\u5e93\n\n\u5982\u679c\u5bf9\u8fd9\u4e2a\u672f\u8bed\u611f\u5230\u964c\u751f\u7684\u8bdd\uff0cGitHub \u7684[\u5e2e\u52a9\u6587\u6863](https://help.github.com/articles/fork-a-repo/) \u63d0\u4f9b\u4e86\u7b80\u5355\u7684\u8bf4\u660e\uff1a\n\n> A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\n#### \u624b\u5de5\u6d3e\u751f\n\n\u6253\u5f00 [Jenkins X \u4ed3\u5e93](https://github.com/jenkins-x/jx)\uff0c\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \"Fork\" \u6309\u94ae\u3002\n\n![Fork button](/images/contribute/development/forking-a-repository.png)\n\u73b0\u5728\u6253\u5f00\u4f60\u5728 GitHub \u4e2d\u521b\u5efa\u51fa\u7684\u6d3e\u751f\u4ed3\u5e93\uff0c \u62f7\u8d1d\u8fdc\u7aef\u8fde\u63a5\u3002\u4f60\u53ef\u4ee5\u5728 HTTPS \u548c SSH \u534f\u8bae\u95f4\u8fdb\u884c\u9009\u62e9\u3002 HTTPS \u9002\u7528\u4e8e\u4efb\u4f55\u60c5\u51b5\u3002\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u7684\u8bdd\uff0c \u8bf7[\u67e5\u9605](https://help.github.com/articles/which-remote-url-should-i-use/)\u3002\n\n![Copy remote url](/images/contribute/development/copy-remote-url.png)\n\n\u5207\u6362\u5230\u547d\u4ee4\u7a97\u53e3\u4e2d\uff0c\u8fdb\u5165\u5230\u521a\u624d\u6240\u514b\u9686\u7684\u4e3b\u7248\u672c\u5e93\u7684\u5de5\u4f5c\u76ee\u5f55\u5f53\u4e2d\u3002\n\n```sh\ncd $GOPATH/src/github.com/jenkins-x/jx\n```\n\n\u73b0\u5728 Git \u9700\u8981\u77e5\u9053\u6211\u4eec\u521a\u521a\u521b\u5efa\u51fa\u6765\u7684\u5206\u4e4b\u4ed3\u5e93\u7684\u5730\u5740\u4fe1\u606f\n\n```sh\ngit remote add <YOUR-GITHUB-USERNAME> <COPIED REMOTE-URL>\n```\n\n#### \u4f7f\u7528 Hub \u6d3e\u751f\n\n\u76f8\u7c7b\u4f3c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 Git \u7684\u5c01\u88c5\u5de5\u5177 Hub \u8fdb\u884c\u64cd\u4f5c\u3002Hub \u4f7f\u5f97\u521b\u5efa\u5206\u4e4b\u4ed3\u5e93\u53d8\u5f97\u5bb9\u6613\uff1a\n```sh\ngit fork\n```\n\n\u8fd9\u4e00\u547d\u4ee4\u4f1a\u4f7f\u7528\u4f60\u7684\u8d26\u53f7\u767b\u5f55\u5230 GitHub \u4e2d\uff0c\u5e76\u5bf9\u5f53\u524d\u6240\u5728\u7684\u5de5\u4f5c\u76ee\u5f55\u7684\u4e3b\u4ed3\u5e93\u521b\u5efa\u6d3e\u751f\u4ed3\u5e93\uff0c\u5728\u4e4b\u540e\u4f1a\u5c06\u65b0\u521b\u5efa\u7684\u8fde\u63a5\u4fe1\u606f\u6dfb\u52a0\u5230\u4f60\u7684\u5de5\u4f5c\u526f\u672c\u5f53\u4e2d\u3002\n\n#### \u9a8c\u8bc1\n\n\u8ba9\u6211\u4eec\u901a\u8fc7\u5217\u51fa\u6240\u6709\u5df2\u6709\u7684 remote \u6765\u68c0\u67e5\u662f\u5426\u4e00\u5207\u5c31\u7eea\uff1a\n\n```sh\ngit remote -v\n```\n\n\u8f93\u51fa\u5e94\u8be5\u7c7b\u4f3c\u5982\u4e0b\u5185\u5bb9\uff1a\n\n```sh\ndigitalcraftsman    git@github.com:digitalcraftsman/hugo.git (fetch)\ndigitalcraftsman    git@github.com:digitalcraftsman/hugo.git (push)\norigin  https://github.com/jenkins-x/jx (fetch)\norigin  https://github.com/jenkins-x/jx (push)\n```\n\n## Jenkins X Git \u8d21\u732e\u6d41\u7a0b\n\n### \u521b\u5efa\u65b0\u7684\u5206\u652f\n\n\u6c38\u8fdc\u4e0d\u8981\u5728 \"master\" \u5206\u652f\u4e0a\u8fdb\u884c\u4ee3\u7801\u7684\u5f00\u53d1\u3002\u5f00\u53d1\u56e2\u961f\u4e5f\u4e0d\u4f1a\u63a5\u53d7\u5728\u6b64\u4e4b\u4e0a\u7684 pull request\u3002\u76f8\u53cd\uff0c \u5e94\u8be5\u521b\u5efa\u4e00\u4e2a\u6709\u63cf\u8ff0\u4fe1\u606f\u7684\u5206\u4e4b\u5e76\u5728\u5176\u4e4b\u4e0a\u8fdb\u884c\u5f00\u53d1\u3002\n\n\u9996\u5148\uff0c \u4f60\u9700\u8981\u83b7\u53d6\u5728\u4e3b\u7248\u672c\u4e0a\u8fdb\u884c\u7684\u6700\u65b0\u7684\u5185\u5bb9\uff1a\n\n```sh\ngit checkout master\ngit pull\n```\n\u73b0\u5728\uff0c\u4e3a\u4f60\u7684\u9644\u52a0\u529f\u80fd\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7248\u672c\uff1a\n\n```sh\ngit checkout -b <BRANCH-NAME>\n```\n\n\u53ef\u4ee5\u901a\u8fc7 `git branch` \u6765\u68c0\u67e5\u4f60\u5f53\u524d\u6240\u5728\u7684\u5206\u652f\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5305\u542b\u6240\u6709\u672c\u5730\u5206\u652f\u7684\u5217\u8868\u3002\u5728\u5f53\u524d\u6240\u64cd\u4f5c\u7684\u7248\u672c\u4e4b\u524d\u4f1a\u6709 \u201c*\u201d \u6807\u8bc6\u3002\n\n### \u8d21\u732e\u6587\u6863\n\n\u4e5f\u8bb8\u4f60\u60f3\u5148\u4ece Jenkins X \u7684\u6587\u6863\u5f00\u59cb\u8d21\u732e\u3002\u5982\u679c\u8fd9\u6837\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u7701\u7565\u4e0b\u9762\u5927\u90e8\u5206\u7684\u6b65\u9aa4\uff0c\u4ec5\u5173\u6ce8\u5728\u521a\u514b\u9686\u7684\u4ee3\u7801\u5e93\u7684 `/docs` \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5373\u53ef\u3002 \u901a\u8fc7\u6267\u884c `cd docs` \u8fdb\u5165\u6587\u6863\u76ee\u5f55\u4e2d\u3002\n\n\u53ef\u4ee5\u901a\u8fc7 `hugo server` \u542f\u52a8 Jenxins X \u5185\u7f6e\u7684\u670d\u52a1\u3002 \u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee [http://localhost:1313](http://localhost:1313) \u8fdb\u884c\u6d4f\u89c8\u3002Hugo \u4f1a\u76d1\u6d4b\u6240\u6709\u6587\u4ef6\u5185\u5bb9\u7684\u4fee\u6539\uff0c\u5e76\u5c06\u5176\u5728\u6d4f\u89c8\u5668\u4e2d\u8fdb\u884c\u663e\u793a\u3002\n\n\u60f3\u4e86\u89e3\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u5305\u62ec Jenkins X \u6587\u6863\u662f\u5982\u4f55\u6784\u5efa\u3001\u7ec4\u7ec7\u4ee5\u53ca\u7531\u4f17\u591a\u50cf\u4f60\u4e00\u6837\u65e0\u79c1\u7684\u4eba\u5982\u4f55\u5bf9\u5176\u8fdb\u884c\u6539\u8fdb\u7684\uff0c\u8bf7[\u53c2\u9605](docscontrib)\u3002\n\n### \u6784\u5efa Jenkins X\n\n\u5728\u4ee3\u7801\u5e93\u4e0a\u8fdb\u884c\u66f4\u6539\u7684\u540c\u65f6\uff0c\u521b\u5efa\u76f8\u5e94\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fdb\u884c\u6d4b\u8bd5\u662f\u5f88\u597d\u7684\u65b9\u6cd5\uff1a\n\n```sh\ngo build -o hugo main.go\n```\n\n### \u6d4b\u8bd5\n\u6709\u65f6\u5bf9\u4ee3\u7801\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u5e26\u6765\u6ca1\u6709\u6ce8\u610f\u5230\u7684\u8d1f\u9762\u5f71\u54cd\u3002\u6216\u8005\u662f\u5e76\u4e0d\u50cf\u9884\u671f\u7684\u90a3\u6837\u5de5\u4f5c\u3002\u5927\u90e8\u5206\u7684\u529f\u80fd\u90fd\u6709\u5176\u76f8\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u8fd9\u4e9b\u6d4b\u8bd5\u6587\u4ef6\u90fd\u4ee5 `_test.go` \u7ed3\u5c3e\u3002\n\n\u8bf7\u786e\u4fdd `go test ./...` \u547d\u4ee4\u901a\u8fc7\u6ca1\u6709\u5f02\u5e38\u4ee5\u53ca `go build` \u6267\u884c\u5b8c\u6bd5\u3002\n\n### \u683c\u5f0f\n\nGo \u8bed\u8a00\u7684\u4ee3\u7801\u683c\u5f0f\u4e5f\u8bb8\u6839\u636e\u4eba\u7684\u610f\u8bc6\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662f\u4e0d\u8bba\u662f\u7531\u8c01\u7f16\u5199\u7684\u4ee3\u7801\uff0cGo \u672c\u8eab\u4f1a\u786e\u4fdd\u4ee3\u7801\u770b\u4e0a\u53bb\u4e00\u81f4\u3002Go \u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u5de5\u5177\uff0c\u4f7f\u6211\u4eec\u7684\u4fee\u6539\u98ce\u683c\u7edf\u4e00\uff1a\n\n```sh\ngo fmt ./...\n```\n\n\u5982\u679c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u8bf7\u786e\u4fdd\u9075\u5faa\u6211\u4eec\u7684[\u4ee3\u7801\u8d21\u732e\u6307\u5bfc\u8bf4\u660e](https://github.com/jenkins-x/jx/blob/master/CONTRIBUTING.MD)\u3002\n\n```sh\n# Add all changed files\ngit add --all\ngit commit --message \"YOUR COMMIT MESSAGE\"\n```\n\n\u4ee3\u7801\u7684\u63d0\u4ea4\u8bb0\u5f55\u4fe1\u606f\u5e94\u8be5\u63cf\u8ff0\u63d0\u4ea4\u505a\u4e86\u90a3\u4e9b\u5de5\u4f5c\uff08\u5982\uff0c\u6dfb\u52a0\u529f\u80fd XYZ\uff09\u800c\u4e0d\u662f\u63cf\u8ff0\u5982\u4f55\u5b8c\u6210\u7684\u3002\n\n### \u4fee\u6539\u63d0\u4ea4\n\n\u4f60\u4e5f\u8bb8\u6ce8\u610f\u5230\u4e86\u4e00\u4e9b\u63d0\u4ea4\u8bb0\u5f55\u4fe1\u606f\u5e76\u4e0d\u9075\u5b88\u8d21\u732e\u6307\u5bfc\u8bf4\u660e\u6216\u8005\u4f60\u662f\u5728\u67d0\u4e9b\u6587\u4ef6\u4e2d\u5fd8\u8bb0\u4e86\u4ec0\u4e48\u3002\u6ca1\u5173\u7cfb\uff0cGit \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u5de5\u5177\u6765\u89e3\u51b3\u7c7b\u4f3c\u8fd9\u6837\u7684\u95ee\u9898\u3002\u4e0b\u9762\u7684\u4e24\u79cd\u65b9\u6cd5\u5c06\u4f1a\u8986\u76d6\u6240\u6709\u7684\u5e38\u89c1\u95ee\u9898\u3002\n\n\u5982\u679c\u4f60\u4e0d\u786e\u5b9a\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u547d\u4ee4\u7684\u8bdd\u4e5f\u53ef\u4ee5\u4fdd\u7559\u4e0d\u884c\u6539\u6b63\uff0c\u5728\u4e4b\u540e\u63d0\u4ea4 Pull Request \u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u5bf9\u63d0\u4ea4\u4fe1\u606f\u8fdb\u884c\u4fee\u6539\u3002\n\n#### \u4fee\u6539\u6700\u540e\u4e00\u6b21\u63d0\u4ea4\n\n\u8ba9\u6211\u4eec\u4ee5\u4f60\u60f3\u8981\u4fee\u6539\u6700\u540e\u7684\u4e00\u6b21\u63d0\u4ea4\u4fe1\u606f\u4e3a\u4f8b\u3002\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u4ee5\u66ff\u6362\u4e4b\u524d\u7684\u63d0\u4ea4\u4fe1\u606f\uff1a\n\n```sh\ngit commit --amend -m\"\u65b0\u7684\u63d0\u4ea4\u4fe1\u606f\"\n```\n\n\u68c0\u67e5\u5386\u53f2\u63d0\u4ea4\u8bb0\u5f55\uff0c\u67e5\u8be2\u4fee\u6539\u4fe1\u606f\uff1a\n\n```sh\ngit log\n# \u8f93\u5165 q \u9000\u51fa\n```\n\n\u5728\u505a\u4e86\u6700\u540e\u7684\u4fee\u6539\u540e\uff0c\u4f60\u4e5f\u8bb8\u5fd8\u8bb0\u4e86\u4ec0\u4e48\u3002\u6ca1\u6709\u5fc5\u8981\u521b\u5efa\u65b0\u7684\u63d0\u4ea4\u3002\u53ea\u9700\u8981\u5c06\u6700\u65b0\u7684\u4fee\u6539\u6dfb\u52a0\u5230 Git \u8bb0\u5f55\u5f53\u4e2d\u5e76\u5728\u4e4b\u540e\u5c06\u5176\u5408\u5e76\u5230\u4e4b\u524d\u7684\u4fee\u6539\u4e2d\uff1a\n\n```sh\ngit add --all\ngit commit --amend\n```\n\n#### \u4fee\u6539\u591a\u6b21\u63d0\u4ea4\n\n{{< alert color=\"warning\" title=\"Be Careful Modifying Multiple Commits\">}}\n\u5bf9\u6b64\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u7684\u4fee\u6539\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u4e0d\u53ef\u610f\u6599\u7684\u540e\u679c\u3002\u5982\u679c\u4e0d\u786e\u5b9a\u7684\u5982\u4f55\u4f7f\u7528\u7684\u8bdd\uff0c\u8df3\u8fc7\u4e0b\u9762\u7684\u90e8\u5206\uff01\n{{< /alert >}}\n\n\u8fd9\u4e00\u90e8\u5206\u7684\u64cd\u4f5c\u9700\u8981\u66f4\u9ad8\u7684\u6280\u80fd\u3002Git \u5141\u8bb8\u4f60\u5bf9\u591a\u6b21\u63d0\u4ea4\u8fdb\u884c[\u4fee\u6539](https://git-scm.com/docs/git-rebase)\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a\u5b83\u5141\u8bb8\u4f60\u5bf9\u5386\u53f2\u7684\u63d0\u4ea4\u8fdb\u884c\u4fee\u6539\u3002\n\n\n```sh\ngit rebase --interactive @~6\n```\n\n\u5728\u547d\u4ee4\u7ed3\u5c3e\u5904\u7684 `6` \u8868\u793a\u7684\u662f\u60f3\u8981\u8fdb\u884c\u4fee\u6539\u7684\u63d0\u4ea4\u7684\u7f16\u53f7\u3002\u5b83\u4f1a\u6253\u5f00\u4e00\u4e2a\u7f16\u8f91\u5668\uff0c\u5176\u5185\u5bb9\u662f\u4e4b\u524d6\u6b21\u7684\u5386\u53f2\u63d0\u4ea4\u4fe1\u606f\u5217\u8868\uff1a\n\n```sh\npick 80d02a1 tpl: Add hasPrefix to the template funcs' \"smoke test\"\npick aaee038 tpl: Sort the smoke tests\npick f0dbf2c tpl: Add the other test case for hasPrefix\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\npick 33c8973 Begin workflow\npick 3502f2e Refactoring and typo fixes\n```\n\n\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5e94\u8be5\u5c06\u6700\u540e\u7684\u63d0\u4ea4\u5230\u672c\u6587\u6863\u4e4b\u95f4\u7684\u63d0\u4ea4(`Add \"How to contribute to Jenkins X\" tutorial`)\u5386\u53f2\u63d0\u4ea4\u8fdb\u884c\u5408\u5e76\u3002\u4f60\u53ef\u4ee5\u201c\u538b\u7f29\u201d\u63d0\u4ea4\uff0c \u5982\uff0c\u5c06\u4e24\u4e2a\u53ca\u4ee5\u4e0a\u7684\u63d0\u4ea4\u5408\u5e76\u4e3a\u4e00\u4e2a\u3002\n\u5728\u63d0\u4ea4\u4fe1\u606f\u4e4b\u524d\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u5c06\u4f1a\u6267\u884c\u3002\u66ff\u6362 `pick` \u4e3a\u60f3\u8981\u8fdb\u884c\u7684\u64cd\u4f5c\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u5f53\u4e2d\u6211\u4eec\u4f7f\u7528 `squash` \u6216\u8005\u5176\u7701\u7565\u7248 `s`\u3002\n\n```sh\npick 80d02a1 tpl: Add hasPrefix to the template funcs' \"smoke test\"\npick aaee038 tpl: Sort the smoke tests\npick f0dbf2c tpl: Add the other test case for hasPrefix\npick 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\n\u6839\u636e\u4ee3\u7801\u8d21\u732e\u6307\u5bfc\u6587\u6863\uff0c\u5728\u5386\u53f2\u63d0\u4ea4\u4e2d\u7684\u7b2c\u4e09\u4e2a\u63d0\u4ea4\u5fd8\u8bb0\u4e86\u6dfb\u52a0\u524d\u7f00 \"docs:\"\uff0c\u56e0\u6b64\u60f3\u8981\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u4fee\u6539\u4e00\u4e2a\u63d0\u4ea4\u7684\u64cd\u4f5c\u662f `reword` \u6216\u8005\u5176\u7701\u7565\u7248 `r`\u3002\n\n\u4fee\u6539\u540e\uff0c\u5e94\u8be5\u662f\u7c7b\u4f3c\u5982\u4e0b\u7684\u5185\u5bb9\uff1a\n\n```sh\npick 80d02a1 tpl: Add hasPrefix to the template funcs' \"smoke test\"\npick aaee038 tpl: Sort the smoke tests\npick f0dbf2c tpl: Add the other test case for hasPrefix\nreword 911c35b Add \"How to contribute to Jenkins X\" tutorial\nsquash 33c8973 Begin workflow\nsquash 3502f2e Refactoring and typo fixes\n```\n\n\u6b64\u65f6\u5173\u95ed\u7f16\u8f91\u5668\u3002\u5b83\u4f1a\u6253\u5f00\u65b0\u7684\u7a97\u53e3\uff0c\u5c06\u4f1a\u6709\u6587\u672c\u6307\u5bfc\u4f60\u5bf9\u4e4b\u524d\u7684\u4e24\u6b21\u63d0\u4ea4\u8fdb\u884c\u7684\u5408\u5e76\uff08\u5373\uff0c\u201c\u538b\u7f29\u201d\uff09\u8bbe\u7f6e\u65b0\u7684\u63d0\u4ea4\u4fe1\u606f\u3002\u8f93\u5165 <kbd>CTRL</kbd>+<kbd>S</kbd> \u4fdd\u5b58\u6587\u4ef6\u5173\u95ed\u7f16\u8f91\u5668\u3002\n\n\u518d\u4e00\u6b21\uff0c\u5c06\u4f1a\u6253\u5f00\u65b0\u7684\u7a97\u53e3\u3002\u8f93\u5165\u65b0\u7684\u63d0\u4ea4\u4fe1\u606f\u5e76\u4e14\u4fdd\u5b58\u3002\u4f60\u7684\u7ec8\u7aef\u5c06\u4f1a\u663e\u793a\u5982\u4e0b\u7c7b\u4f3c\u7684\u72b6\u6001\u4fe1\u606f\uff1a\n\n```sh\nSuccessfully rebased and updated refs/heads/<BRANCHNAME>.\n```\n\n\u68c0\u67e5\u63d0\u4ea4\u8bb0\u5f55\u4ee5\u786e\u4fdd\u4fee\u6539\u6210\u529f\u3002\u5982\u679c\u53d1\u751f\u4e86\u9519\u8bef\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u6267\u884c `git rebase --abort` \u6765\u64a4\u9500\u64cd\u4f5c\u3002\n\n### \u63a8\u9001\u63d0\u4ea4\n\n\u6211\u4eec\u9700\u8981\u6307\u5b9a\u76ee\u6807\u5730\u5740\u4ee5\u4f7f\u5f97\u5c06\u6211\u4eec\u7684\u63d0\u4ea4\u63a8\u9001\u56de\u5230\u5728Github\u4e2d\u7684\u5206\u652f\u7248\u672c\u5e93\u3002\u76ee\u6807\u5730\u5740\u7531 `remote` \u548c `branch`\u540d\u79f0\u6240\u6784\u6210\u3002\u5728\u4e4b\u524d\u7684\u64cd\u4f5c\u4e2d\uff0c`remote` \u5730\u5740\u4e0e\u6211\u4eec\u7684GitHub\u8d26\u53f7\u6240\u5bf9\u5e94\uff0c\u4ee5\u6211\u4e3a\u4f8b\u662f `digitalcraftsman`\u3002\u5206\u652f\uff08branch\uff09\u5e94\u8be5\u548c\u6211\u4eec\u672c\u5730\u7684\u4e00\u6837\u3002 \u8fd9\u5c31\u4f7f\u5f97\u8bc6\u522b\u76f8\u5e94\u7684\u5206\u652f\u53d8\u5f97\u7b80\u5355\u3002\n\n```sh\ngit push --set-upstream <YOUR-GITHUB-USERNAME> <BRANCHNAME>\n```\n\n\u73b0\u5728Git\u77e5\u9053\u4e86\u76ee\u6807\u5730\u5740\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u60f3\u8981\u8fdb\u884c\u63d0\u4ea4\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u8f93\u5165 `git push`\u3002\n\n\u5982\u679c\u4f60\u5728\u4e0a\u4e00\u6b65\u9aa4\u5bf9\u5386\u53f2\u63d0\u4ea4\u8bb0\u5f55\u8fdb\u884c\u4e86\u4fee\u6539\uff0cGitHub \u4f1a\u62d2\u7edd\u4f60\u7684\u63a8\u9001\u3002\u8fd9\u662f\u4e00\u4e2a\u4fdd\u62a4\u529f\u80fd\uff0c\u56e0\u4e3a\u5386\u53f2\u63d0\u4ea4\u8bb0\u5f55\u4e0d\u4e00\u81f4\u4ee5\u53ca\u65b0\u7684\u63d0\u4ea4\u4e0d\u80fd\u50cf\u5f80\u5e38\u4e00\u6837\u8fdb\u884c\u8ffd\u52a0\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7 `git push --force` \u5f3a\u5236\u7684\u8fdb\u884c\u63d0\u4ea4\u3002\n\n## \u6253\u5f00\u4e00\u4e2a Pull Request\n\n\u505a\u7684\u5f88\u597d\uff0c\u6211\u4eec\u6709\u4e86\u5f88\u5927\u7684\u8fdb\u5c55\u3002\u5728\u8fd9\u4e00\u6b65\uff0c\u6211\u4eec\u5c06\u4f1a\u63d0\u51fa\u5408\u5e76\u8bf7\u6c42\u6765\u63d0\u4ea4\u6211\u4eec\u7684\u9644\u52a0\u529f\u80fd\u3002\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00 [Jenkins X \u4e3b\u4ee3\u7801\u5e93](https://github.com/jenkins-x/jx/)\u3002\n\n\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u7eff\u8272\u6309\u94ae\uff0c\u4e0a\u9762\u6807\u8bc6 \u201cNew pull request\u201d\u3002GitHub \u5f88\u667a\u80fd\uff0c\u5f88\u6709\u53ef\u80fd\u50cf\u5982\u4e0b\u56fe\u6240\u793a\u7684\u90a3\u6837\uff0c\u5728\u4e00\u4e2a\u7c73\u9ec4\u8272\u7a97\u53e3\u4e2d\u5efa\u8bae\u4f60\u5f00 pull request\uff1a\n\n![Open a pull request](/images/contribute/development/open-pull-request.png)\n\n\u5728\u65b0\u7684\u9875\u9762\u5f53\u4e2d\uff0c\u5c06\u4f1a\u5305\u542b\u4f60\u7684 pull request \u4e2d\u7684\u91cd\u8981\u4fe1\u606f\u3002\u6eda\u52a8\u9f20\u6807\u4f60\u4f1a\u53d1\u73b0\u6240\u6709\u7684\u63d0\u4ea4\u4fe1\u606f\u3002\u786e\u4fdd\u6240\u6709\u7684\u4e00\u5207\u4e0e\u6784\u60f3\u7684\u4e00\u81f4\u5e76\u70b9\u51fb\u6309\u94ae \u201cCreate pull request\u201d\u3002\n\n\n### \u540c\u610f\u8d21\u732e\u8005\u6388\u6743\u534f\u8bae\n\n\u6700\u540e\u4e5f\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u4f60\u5e94\u8be5\u540c\u610f\u8d21\u732e\u8005\u6388\u6743\u534f\u8bae\uff08CLA\uff09\u3002\u4e00\u4e2a\u65b0\u7684\u8bc4\u8bba\u4fe1\u606f\u5e94\u8be5\u4f1a\u81ea\u52a8\u7684\u6dfb\u52a0\u5230\u4f60\u7684 pull request \u5f53\u4e2d\u3002\u70b9\u51fb\u9ec4\u8272\u7684\u5fbd\u7ae0\uff0c\u540c\u610f\u534f\u8bae\u5e76\u7528\u4f60\u81ea\u5df1\u7684 GitHub \u8d26\u53f7\u8fdb\u884c\u8ba4\u8bc1\u3002\u5b83\u4ec5\u9700\u8981\u51e0\u6b65\u70b9\u51fb\u4e4b\u540e\u5373\u53ef\u5b8c\u6210\u3002\n\n![Accept the CLA](/images/contribute/development/accept-cla.png)\n\n### \u81ea\u52a8\u5316\u6784\u5efa\n\n\u6211\u4eec\u4f7f\u7528 [Travis CI loop](https://travis-ci.org/jenkins-x/jx) (Linux \u548c OS&nbsp;X) \u4ee5\u53ca [AppVeyor](https://ci.appveyor.com/project/jenkins-x/jx/branch/master) (Windows) \u6765\u5bf9\u5305\u542b\u6709\u4f60\u7684\u63d0\u4ea4\u7684 Jenkins X \u8fdb\u884c\u7f16\u8bd1\u3002 \u8fd9\u53ef\u4ee5\u786e\u4fdd\u5728\u5408\u5e76\u4f60\u7684 pull request \u4e4b\u524d\uff0c\u6240\u6709\u7684\u90fd\u4e0e\u6240\u8bbe\u60f3\u7684\u5de5\u4f5c\u4e00\u81f4\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u5bf9 Jenkins X \u7684\u4ee3\u7801\u5e93\u8fdb\u884c\u4e86\u4fee\u6539\u7684\u8bdd\uff0c\u8fd9\u5c06\u5f88\u6709\u610f\u4e49\u3002\n\n![Automic builds and their status](/images/contribute/development/ci-errors.png)\n\n\u5728\u4e0a\u56fe\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230 Travis \u4e0d\u80fd\u591f\u5bf9\u8fd9\u4e2a pull request \u8fdb\u884c\u7f16\u8bd1\u3002\u70b9\u51fb \u201cDetails\u201d \u6765\u67e5\u770b\u5931\u8d25\u7684\u539f\u56e0\u3002\u4f46\u662f\u8fd9\u4e2a\u9519\u8bef\u5e76\u4e0d\u4e00\u5b9a\u662f\u7531\u4f60\u7684\u63d0\u4ea4\u6240\u5bfc\u81f4\u7684\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f7f\u7528 `master` \u5206\u652f\u6765\u4f5c\u4e3a\u57fa\u7840\u6765\u9a8c\u8bc1\u4f60\u7684 pull request \u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\u5982\u679c\u4f60\u9047\u5230\u95ee\u9898\u7684\u8bdd\uff0c\u5728 pull request \u5f53\u4e2d\u8fdb\u884c\u8bc4\u8bba\u3002\u6211\u4eec\u613f\u610f\u5bf9\u4f60\u8fdb\u884c\u5e2e\u52a9\u3002\n\n## \u4ece\u54ea\u91cc\u5f00\u59cb\uff1f\n\n\u611f\u8c22\u4f60\u9605\u8bfb\u4e86\u672c\u7bc7\u8d21\u732e\u6307\u5bfc\u6587\u6863\u3002\u5e0c\u671b\u6211\u4eec\u53ef\u4ee5\u5728 GitHub \u4e2d\u518d\u6b21\u770b\u5230\u4f60\u3002\u6709\u5f88\u591a [open issues][issues] \u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\n\n\u5982\u679c\u4f60\u8ba4\u4e3a\u53d1\u73b0\u4e86 bug \u6216\u8005\u6709\u65b0\u7684\u60f3\u6cd5\u53ef\u4ee5\u6539\u8fdb Jenkins X\uff0c\u8bf7\u968f\u65f6\u7684 [open an issue][newissue]\uff0c\u6211\u4eec\u5f88\u4e50\u4e8e\u542c\u53d6\u4f60\u7684\u58f0\u97f3\u3002\n\n## \u5b66\u4e60 Git \u548c Golang \u7684\u53c2\u8003\n\n* [Codecademy's Free \"Learn Git\" Course][codecademy] (\u514d\u8d39)\n* [Code School and GitHub's \"Try Git\" Tutorial][trygit] (\u514d\u8d39)\n* [The Git Book][gitbook] (\u514d\u8d39)\n* [Go Bootcamp][gobootcamp]\n* [GitHub Pull Request Tutorial, Thinkful][thinkful]\n\n\n[codecademy]: https://www.codecademy.com/learn/learn-git\n[contributors]: https://github.com/jenkins-x/jx/graphs/contributors\n[docscontrib]: /community/documentation/\n[gitbook]: https://git-scm.com/\n[gobootcamp]: http://www.golangbootcamp.com/book/get_setup\n[godl]: https://golang.org/dl/\n[goinstall]: https://golang.org/doc/install\n[gvm]: https://github.com/moovweb/gvm\n[issues]: https://github.com/jenkins-x/jx/issues\n[newissue]: https://github.com/jenkins-x/jx/issues/new\n[releases]: /docs/getting-started/\n[setupgopath]: https://golang.org/doc/code.html#Workspaces\n[thinkful]: https://www.thinkful.com/learn/github-pull-request-tutorial/\n[trygit]: https://try.github.io/levels/1/challenges/1\n",
            "content/zh/docs/contributing/code/triage.zh.md": "---\ntitle: \u5206\u7c7b\u95ee\u9898\nlinktitle: \u5206\u7c7b\u95ee\u9898\ndescription: \u5982\u4f55\u5bf9 Jenkins X \u9879\u76ee\u4e2d\u7684\u95ee\u9898\u8fdb\u884c\u5206\u7c7b\n---\n\nJenkins X \u9879\u76ee\u4e3b\u8981\u7684\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u662f https://github.com/jenkins-x/jx/issues\u3002\u8fd9\u65e8\u5728\u6355\u6349\u95ee\u9898\u3001\u60f3\u6cd5\u548c\u5f00\u53d1\u5de5\u4f5c\u3002\u5982\u6709\u7591\u95ee\u8bf7\u63d0\u4ea4\u4e00\u4e2a\u95ee\u9898\uff0c\u4e00\u540d Jenkins X \u56e2\u961f\u6210\u5458\u5c06\u8003\u8651\u5c3d\u5feb\u7ed9\u5b83\u5206\u7c7b\u3002\n\n\u7531\u4e8e Jenkins X \u4f7f\u7528\u6765\u81ea Kubernetes \u751f\u6001\u7684 [prow](/https://www.cloudbees.com/blog/serverless-jenkins-jenkins-x)\uff0c\u6211\u4eec\u8ba4\u4e3a\uff0c\u6211\u4eec\u5e94\u8be5\u5e26\u9886\u4ed6\u4eec\u53c2\u4e0e\u5904\u7406\u5206\u7c7b\u5927\u91cf\u95ee\u9898\uff0c\u4ee5\u5e2e\u52a9\u548c\u9f13\u52b1\u8d21\u732e\u8005\u3002\u6211\u4eec\u6b63\u5728\u91cd\u7528\u6807\u7b7e\u7684\u6837\u5f0f\uff0c\u5305\u62ec\u989c\u8272\uff0c\u4ee5\u5c1d\u8bd5\u5728\u8de8\u5f00\u6e90\u9879\u76ee\u65f6\u521b\u5efa\u719f\u6089\u5ea6\uff0c\u5e76\u51cf\u5c11\u8d21\u732e\u7684\u969c\u788d\u3002\n\n# \u5206\u7c7b\u95ee\u9898\n\n\u6240\u6709\u53ef\u7528\u6807\u7b7e\u5217\u8868\u8bf7\u53c2\u8003\uff1ahttps://github.com/jenkins-x/jx/labels\n\n\u5f53\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u7c7b\u65f6\uff0c\u6765\u81ea Jenkins X \u56e2\u961f\u7684\u67d0\u4e2a\u6210\u5458\u5c06\u5206\u914d\u6807\u7b7e\u7528\u6765\u63cf\u8ff0\u95ee\u9898\u7684 __area__ \u548c __kind__ \u3002\u6709\u53ef\u80fd\uff0c\u4ed6\u4eec\u8fd8\u5c06\u589e\u52a0\u4e00\u4e2a priority \uff0c\u4f46\u662f\uff0c\u5728\u8fdb\u4e00\u6b65\u5206\u6790\u6216\u66f4\u5e7f\u6cdb\u7684\u53ef\u89c1\u6027\u4e4b\u540e\uff0c\u8fd9\u4e9b priority \u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n\n\u6807\u7b7e\u901a\u8fc7 prow [label](https://prow.k8s.io/plugins) \u63d2\u4ef6\u4f7f\u7528 GitHub \u8bc4\u8bba\u88ab\u6dfb\u52a0\u3002\u4f8b\u5982\uff1a\n```text\n/kind bug\n/area prow\n/priority important-soon\n```\n![Triage](/images/contribute/triage.png)\n\n# \u5206\u914d\u95ee\u9898\n\n\u5f53\u8fdb\u884c\u5206\u7c7b\u65f6\u6211\u4eec\u5c1d\u8bd5\u5c06\u95ee\u9898\u5206\u914d\u7ed9\u67d0\u4e2a\u4eba\u3002\u8fd9\u53ef\u80fd\u4f1a\u968f\u7740\u8c03\u67e5\u6216\u4eba\u5458\u7684\u53ef\u7528\u6027\u800c\u6539\u53d8\u3002\n\n# \u8c03\u67e5\u95ee\u9898\n\n\u5f53\u4efb\u4f55\u4eba\u5728\u5904\u7406\u4e00\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u7684\u76ee\u7684\u662f\u901a\u8fc7\u6dfb\u52a0\u6ce8\u91ca\u6765\u6355\u83b7\u4efb\u4f55\u5206\u6790\u3002\u8fd9\u6709\u52a9\u4e8e\u4eba\u4eec\u5b66\u4e60\u5982\u4f55\u8c03\u67e5\u7c7b\u4f3c\u95ee\u9898\u7684\u6280\u5de7\uff0c\u5e2e\u52a9\u4eba\u4eec\u7406\u89e3\u601d\u8003\u8fc7\u7a0b\uff0c\u5e76\u901a\u8fc7 pull request \u4e3a\u4efb\u4f55\u94fe\u63a5\u4fee\u590d\u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002\n\n# \u65b0\u5efa\u6807\u7b7e\n\n\u5982\u679c\u4f60\u60f3\u8981\u8bf7\u6c42\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6807\u7b7e\uff0c\u90a3\u4e48\u8bf7\u63d0\u4ea4\u4e00\u4e2a\u95ee\u9898\u5e76\u9644\u5e26\u5c3d\u53ef\u80fd\u591a\u7684\u5185\u5bb9\u3002\n\n# \u9648\u65e7\u7684\u95ee\u9898\n\n\u5f53\u6211\u4eec\u9f13\u52b1\u5e7f\u6cdb\u7684\u95ee\u9898\u7c7b\u578b\uff0c\u5982\u4e00\u822c\u7684\u60f3\u6cd5\u548c\u60f3\u6cd5\uff0c\u95ee\u9898\u8ddf\u8e2a\u5668\u53ef\u80fd\u589e\u957f\u5f97\u76f8\u5f53\u9ad8\u3002\u6211\u4eec\u5c06\u542f\u7528 prow [lifecycle](https://prow.k8s.io/plugins) \u63d2\u4ef6\u6765\u5e2e\u52a9\u7ba1\u7406\u9648\u65e7\u7684\u95ee\u9898\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5177\u6709\u4fb5\u5165\u6027\uff0c\u800c\u662f\u5141\u8bb8\u6211\u4eec\u4e0d\u65ad\u5730\u91cd\u65b0\u601d\u8003\u95ee\u9898\uff0c\u5e76\u4fdd\u6301\u8de8\u95ee\u9898\u7684\u52bf\u5934\u3002",
            "content/zh/docs/contributing/components/_index.md": "---\ntitle: \"Components in Jenkins X\"\nlinkTitle: \"Components in Jenkins X\"\nweight: 2\ndescription: >\n  What Jenkins X is made of.\n---\n",
            "content/zh/docs/contributing/components/custom-resources.md": "---\ntitle: \u81ea\u5b9a\u4e49\u8d44\u6e90\nlinktitle: \u81ea\u5b9a\u4e49\u8d44\u6e90\ndescription: \u7531 Jenkins X \u81ea\u5b9a\u7684\u8d44\u6e90\n---\n\nKubernetes \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb\u505a[\u81ea\u5b9a\u4e49\u8d44\u6e90](https://kubernetes.io/docs/concepts/api-extension/custom-resources/)\u7684\u6269\u5c55\u673a\u5236\uff0c\u5b83\u5141\u8bb8\u5fae\u670d\u52a1\u6269\u5c55 Kubernetes \u5e73\u53f0\u6765\u89e3\u51b3\u66f4\u9ad8\u7ea7\u7684\u95ee\u9898\u3002\n\n\u56e0\u6b64\uff0c\u5728 Jenkins X \u4e2d\u5b9a\u4e49\u4e86\u82e5\u5e72\u4e2a\u81ea\u5b9a\u4e49\u8d44\u6e90\u6765\u6269\u5c55 Kubernetes \u652f\u6301 CI/CD\uff1a\n\n### \u73af\u5883\n\nJenkins X \u539f\u751f\u5730\u652f\u6301[\u73af\u5883](/zh/about/concepts/features/#environments)\uff0c\u5141\u8bb8\u4e3a\u4f60\u4eec\u56e2\u961f\u5b9a\u4e49\u73af\u5883\uff0c\u5e76\u901a\u8fc7 [jx get environments](/commands/jx_get_environments/) \u67e5\u8be2\uff1a\n\n```sh\njx get environments\n```\n\n\u4ee5\u4e0b\u7684\u547d\u4ee4\u90fd\u4f7f\u7528 Kubernetes \u81ea\u5b9a\u4e49\u8d44\u6e90`\u73af\u5883`\u3002\n\n\u56e0\u6b64\uff0c\u4f60\u8fd8\u53ef\u4ee5\u901a\u8fc7 [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) \u67e5\u8be2\u73af\u5883\uff1a\n\n```sh\nkubectl get environments\n```\n\n\u6216\u8005\u4f60\u60f3\u8981\u901a\u8fc7 `YAML` \u76f4\u63a5\u7f16\u8f91\u5b83\u4eec\u7684\u8bdd\uff1a\n\n```sh\nkubectl edit env staging\n```\n\n\u5c3d\u7ba1\uff0c\u4f60\u4f7f\u7528\u547d\u4ee4 [jx edit environment](/commands/jx_edit_environment/) \u4f1a\u66f4\u5bb9\u6613\u3002\n\n### \u53d1\u7248\n\nJenkins X \u6d41\u6c34\u7ebf\u751f\u6210\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u8d44\u6e90 `\u53d1\u7248`\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6765\u8ddf\u8e2a\uff1a\n\n* \u7248\u672c\u3001git \u6807\u7b7e\u3001git \u5730\u5740\u6620\u5c04\u5230 Kubernetes/Helm \u4e2d\u7684\u53d1\u7248\n* Jenkins \u6d41\u6c34\u7ebf\u5730\u5740\u548c\u6267\u884c\u65e5\u5fd7\u7528\u4e8e\u6267\u884c\u53d1\u5e03\n* \u63d0\u4ea4\u65e5\u5fd7\u3001\u95ee\u9898\u548c Pull Requests \u662f\u6bcf\u6b21\u53d1\u7248\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0[\u5728 Staging/\u751f\u4ea7\u73af\u5883\u4e2d\u4fee\u590d\u7684\u95ee\u9898\u53cd\u9988](/zh/about/concepts/features/#feedback)\n\n\n### \u6d41\u6c34\u7ebf\u6d3b\u52a8\n\n\u8be5\u8d44\u6e90\u4fdd\u5b58\u4e86\u57fa\u4e8e Jenkins \u6d41\u6c34\u7ebf\u9636\u6bb5\u4ee5\u53ca [\u5347\u7ea7\u6d3b\u52a8](/about/concepts/features/#promotion) \u7684\u6d41\u6c34\u7ebf\u72b6\u6001\n\n\u8be5\u8d44\u6e90\u8fd8\u4f1a\u88ab\u547d\u4ee4 [jx get activities](/commands/jx_get_activities/) \u7528\u5230\n",
            "content/zh/docs/contributing/components/source.md": "---\ntitle: \u6e90\u7801\nlinktitle: \u6e90\u7801\ndescription: \u591a\u4e2a\u6e90\u7801\u4ed3\u5e93\u7684\u4f4d\u7f6e\n---\n\nJenkins X \u5efa\u7acb\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u5e76\u4e14\u62e5\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u6e90\u7801\u4ed3\u5e93\uff0c\u4ece CLI \u5de5\u5177\u3001Docker \u955c\u50cf\u3001Helm \u56fe\u8868\u5230[\u63d2\u4ef6\u5e94\u7528](/docs/contributing/addons/)\u6765\u505a\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\u3002\n\n\u8fd9\u4e2a\u9875\u9762\u5217\u51fa\u4e86\u4e3b\u8981\u7684\u7ec4\u7ec7\u548c\u4ed3\u5e93\u3002\n\n## \u7ec4\u7ec7\n\n* [jenkins-x](https://github.com/jenkins-x) \u6e90\u7801\u7684\u4e3b\u8981\u7ec4\u7ec7\n* [jenkins-x-apps](https://github.com/jenkins-x-apps) \u5305\u62ec Jenkins X \u7684\u6807\u51c6[\u63d2\u4ef6\u5e94\u7528](/docs/contributing/addons/)\n* [jenkins-x-buildpacks](https://github.com/jenkins-x-buildpacks) \u5305\u62ec\u53ef\u7528\u7684[\u6784\u5efa\u6253\u5305](/docs/resources/guides/managing-jx/common-tasks/build-packs/)\n* [jenkins-x-charts](https://github.com/jenkins-x-charts) \u6211\u4eec\u5206\u53d1\u7684\u4e3b\u8981 helm \u56fe\u8868\n* [jenkins-x-images](https://github.com/jenkins-x-images) \u5305\u62ec\u4e00\u4e9b\u81ea\u5b9a\u4e49\u7684 docker \u955c\u50cf\u6784\u5efa\n* [jenkins-x-quickstarts](https://github.com/jenkins-x-quickstarts) \u901a\u8fc7[\u521b\u5efa\u5feb\u901f\u5f00\u59cb](/docs/getting-started/first-project/create-quickstart/)\u4f7f\u7528\u7684\u5feb\u901f\u5f00\u59cb\u9879\u76ee\n* [jenkins-x-test-projects](https://github.com/jenkins-x-test-projects) \u6211\u4eec\u5728\u6d4b\u8bd5\u7528\u4f8b\u4e2d\u4f7f\u7528\u7684\u9879\u76ee\n\n## \u4ed3\u5e93\n\n\u5728\u8fd9\u91cc\u6211\u4eec\u5217\u51fa\u4e0a\u9762\u7ec4\u7ec7\u7684\u4e00\u4e9b\u4e3b\u8981\u4ed3\u5e93\n\n* [jenkins-x/jx](https://github.com/jenkins-x/jx) \u521b\u5efa `jx` CLI \u548c\u53ef\u91cd\u7528\u7684\u6d41\u6c34\u7ebf\u6b65\u9aa4\u7684\u4e3b\u8981\u4ed3\u5e93\n* [jenkins-x/jx-docs](https://github.com/jenkins-x/jx-docs) \u57fa\u4e8e Hugo \u7684\u6587\u6863\uff0c\u7528\u6765\u751f\u6210\u7f51\u7ad9\n* [jenkins-x/bdd-jx](https://github.com/jenkins-x/bdd-jx)  \u6211\u4eec\u7528\u6765\u9a8c\u8bc1\u5e73\u53f0\u53d8\u66f4\u4ee5\u53ca\u7528\u6765\u9a8c\u8bc1 [jenkins-x/jx](https://github.com/jenkins-x/jx) \u4e0a PR \u7684 BDD \u6d4b\u8bd5\n* [jenkins-x/jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform) Jenkins X \u5e73\u53f0\u4e3b\u8981\u5408\u6210\u7269\u7684 helm \u56fe\u8868\n* [jenkins-x/jenkins-x-versions](https://github.com/jenkins-x/jenkins-x-versions) \u5305\u62ec[\u7248\u672c\u6d41](/about/concepts/version-stream/) - \u6240\u6709 _\u56fe\u8868_ \u548c CLI _\u5305_ \u7684\u7a33\u5b9a\u7248\u672c\n* [jenkins-x/cloud-environments](https://github.com/jenkins-x/cloud-environments) \u4e0d\u540c cloud providers \u7684 helm \u914d\u7f6e\n \n### \u6784\u5efa pods \u548c \u955c\u50cf\n\n* [jenkins-x/jenkins-x-builders](https://github.com/jenkins-x/jenkins-x-builders) \u751f\u6210\u9759\u6001 jenkins \u670d\u52a1\u7684\u6784\u5efa pod \u548c docker \u955c\u50cf\n* [jenkins-x/jenkins-x-image](https://github.com/jenkins-x/jenkins-x-image) \u4e3a\u6211\u4eec\u9ed8\u8ba4\u4f7f\u7528\u7684\u9759\u6001 jenkins \u670d\u52a1\u5668\u751f\u6210 docker \u955c\u50cf\n* [jenkins-x/jenkins-x-serverless](https://github.com/jenkins-x/jenkins-x-serverless) \u5f53\u4f7f\u7528 [prow](/architecture/prow/) \u65f6\u751f\u6210 [serverless jenkins](/news/serverless-jenkins/) docker \u955c\u50cf\n\n### \u5de5\u5177\n\n* [jenkins-x/exposecontroller](https://github.com/jenkins-x/exposecontroller) \u7528\u6765\u751f\u6210\u6216\u66f4\u65b0 `Ingress` \u8d44\u6e90\uff08\u6216 OpenShift \u4e2d\u7684 `Route` \uff09\u7684 `Deployment` \u6216 `Job`\u3002\u5982\u679c\u4f60\u4fee\u6539\u4e86\u4f60\u7684 DNS \u57df\u6216\u5f00\u542f\u4e86 TLS \uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7 `ConfigMap` \u6ce8\u5165\u7528\u6765\u6ce8\u5165\u5916\u90e8 URLs \u5230\u4f60\u7684\u5e94\u7528\u4e2d\u3002\n* [jenkins-x/updatebot](https://github.com/jenkins-x/updatebot) \u4e00\u4e2a\u6211\u4eec\u7528\u6765\u4e3a\u5e93\u3001\u53ef\u6267\u884c\u6587\u4ef6\u3001\u56fe\u8868\u548c\u955c\u50cf\u6267\u884c\u6301\u7eed\u4ea4\u4ed8\u7684\u547d\u4ee4\u884c\u673a\u5668\u4eba\u3002\u4f8b\u5982\uff1a\u5f53\u4e00\u4e2a\u65b0\u7684\u4e0a\u6e38\u53d1\u5e03\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u5728\u4e0b\u6e38\u4f9d\u8d56\u7684 git \u4ed3\u5e93\u4e2d\u751f\u6210 Pull Requests\u3002\n",
            "content/zh/docs/contributing/documentation/_index.md": "---\ntitle: \u6587\u6863\u8d21\u732e\nlinktitle: \u6587\u6863\ndescription: \u5982\u4f55\u5b8c\u5584 Jenkins X \u6587\u6863\n---\n\n## \u521b\u5efa\u6d3e\u751f\u5e93\n\n\u6700\u597d\u5728\u4f60\u672c\u5730\u7684\u673a\u5668\u4e0a\u4fee\u6539 Jenkins X \u6587\u6863\uff0c\u68c0\u67e5\u89c6\u89c9\u98ce\u683c\u4e00\u81f4\u3002\u786e\u4fdd\u4f60\u5df2\u7ecf\u5728 GitHub \u4e0a\u6d3e\u751f\u4e86 [jx-docs](https://github.com/jenkins-x/jx-docs)\uff0c\u5e76\u5728\u4f60\u7684\u673a\u5668\u4e0a\u514b\u9686\u4e86\u8fd9\u4e2a\u5e93\u3002\u66f4\u591a\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b [GitHub \u7684\"\u6d3e\u751f\"\u6587\u6863][ghforking] \u6216\u8005\u6309\u7167 [Jenkins X \u5f00\u53d1\u8d21\u732e\u6307\u5bfc][hugodev]\u3002\n\n\u7136\u540e\uff0c\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u5206\u652f\u3002\u4e00\u5b9a\u8981\u9009\u62e9\u7b26\u5408\u5185\u5bb9\u7c7b\u578b\u7684\u63cf\u8ff0\u6027\u5206\u652f\u540d\u79f0\u3002\u4e0b\u9762\u7684\u4e00\u4e2a\u793a\u4f8b\u5206\u652f\u7684\u540d\u79f0\uff0c\u4f60\u53ef\u4ee5\u7528\u4e8e\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u7f51\u7ad9\u7528\u4e8e\u5c55\u793a\uff1a\n\n```sh\ngit checkout -b jon-doe-showcase-addition\n```\n\n## \u6dfb\u52a0\u65b0\u7684\u5185\u5bb9\n\nJenkins X \u6587\u6863\u91cd\u7528 Jenkins X \u7684[\u9aa8\u67b6][archetypes]\u7279\u70b9\u3002\u5728 Jenkins X \u6587\u6863\u4e2d\u6240\u6709\u5185\u5bb9\u7ae0\u8282\u90fd\u5206\u914d\u4e86\u9aa8\u67b6\u3002\n\n\u5411 Jenkins X \u4e2d\u6dfb\u52a0\u65b0\u7684\u5185\u5bb9\u9075\u5faa\u4e0b\u9762\u76f8\u4f3c\u7684\u6a21\u5f0f\uff0c\u4e0d\u7528\u8003\u8651\u5185\u5bb9\u7ae0\u8282\uff1a\n\n```sh\nhugo new <DOCS-SECTION>/<new-content-lowercase>.md\n```\n\n### \u8bed\u6cd5\u6807\u51c6\n\nJenkins X \u6587\u6863\u4e2d\u6240\u6709\u7684\u9875\u9762\uff0c\u4f7f\u7528\u5178\u578b\u7684\u4e09\u4e2a\u53cd\u5f15\u53f7\u8fd9\u6837\u7684\u8bed\u6cd5\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u82b1\u989d\u5916\u7684\u65f6\u95f4\u6765\u9075\u5faa\u4e0b\u9762\u7684\u4ee3\u7801\u5757\u7b80\u7801\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 GitHub \u98ce\u683c\u7684 markdown\u3002Jenkins X \u4f7f\u7528 [highlight.js](https://highlightjs.org/) \u7684\u4e00\u7ec4\u8bed\u8a00\u3002\n\n\u4f60\u53ef\u9009\u7684\u8bed\u8a00\u662f `xml`/`html`, `go`/`golang`, `md`/`markdown`/`mkd`, `handlebars`, `apache`, `toml`, `yaml`, `json`, `css`, `asciidoc`, `ruby`, `powershell`/`ps`, `scss`, `sh`/`zsh`/`bash`/`git`, `http`/`https`, \u548c `javascript`/`js`.\n\n```html\n<h1>Hello world!</h1>\n```\n\n## \u5757\u5f15\u7528\n\n\u5757\u5f15\u7528\u53ef\u4ee5\u901a\u8fc7 [\u5178\u578b\u7684 Markdown \u5757\u5f15\u7528\u8bed\u6cd5][bqsyntax] \u6dfb\u52a0\u5230 Jenkins X \u6587\u6863\u4e2d\uff1a\n\n```txt\n> Without the threat of punishment, there is no joy in flight.\n```\n\n\u4e0a\u9762\u7684\u5757\u5f15\u7528\u4f1a\u5728 Jenkins X \u6587\u6863\u4e2d\u6e32\u67d3\u4e3a\uff1a\n\n> Without the threat of punishment, there is no joy in flight.\n\n\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u6dfb\u52a0\u4e00\u4e2a `<cite>` \u5143\u7d20\uff08\u901a\u8fc7 JavaScript \u5728\u5ba2\u6237\u7aef\u6dfb\u52a0\uff09\uff0c\u901a\u8fc7\u5728\u8fde\u5b57\u7b26\u4e24\u8fb9\u6dfb\u52a0\u7a7a\u683c\u6765\u533a\u5206\u4f60\u7684\u5757\u5f15\u7528\u548c\u53c2\u8003\u3002\n\n```txt\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe](https://en.wikipedia.org/wiki/Kobo_Abe)\n```\n\n\u8fd9\u6837\u4f1a\u5728 Jenkins X \u6587\u6863\u4e2d\u6e32\u67d3\u4e3a\uff1a\n\n> Without the threat of punishment, there is no joy in flight. - [Kobo Abe][abe]\n\n[abe]: https://en.wikipedia.org/wiki/Kobo_Abe\n[bqsyntax]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#blockquotes\n[charcount]: http://www.lettercount.com/\n[`docs/static/images/showcase/`]: https://github.com/jenkins-x/jx/tree/master/docs/static/images/showcase/\n[ghforking]: https://help.github.com/articles/fork-a-repo/\n[hugodev]: /community/code/\n[shortcodeparams]: content-management/shortcodes/#shortcodes-without-markdown\n[sourceforge]: http://docutils.sourceforge.net/docs/ref/rst/directives.html#admonitions\n[templating function]: /functions/\n",
            "content/zh/docs/contributing/documentation/apidocs.md": "---\ntitle: \u7ed9 API \u6587\u6863\u505a\u8d21\u732e\nlinktitle: API \u6587\u6863\ndescription: \u5982\u4f55\u5e2e\u52a9\u6539\u5584 Jenkins X \u7684 API \u6587\u6863\n---\n\nJenkins X \u6709\u4e24\u79cd\u7c7b\u578b\u7684 API \u6587\u6863\uff1a[Kubernetes Custom Resource Documentation](/apidocs/) \u548c [Godoc](https://godoc.org/github.com/jenkins-x/jx)\u3002\u8fd9\u4e24\u79cd\u7c7b\u578b\u90fd\u662f\u7531 [jx](https://github.com/jenkins-x/jx) \u7684\u4ee3\u7801\u751f\u6210\u3002\n\n\n## \u8bbe\u7f6e\u4f60\u7684\u5f00\u53d1\u73af\u5883\n\n\u6700\u597d\u5728\u4f60\u7684\u672c\u5730\u7535\u8111\u4e0a\u5bf9 Jenkinx X \u7684\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u3002\u6309\u7167 [\u5f00\u53d1](/development) \u6307\u5bfc\u6587\u6863\u8fdb\u884c\u914d\u7f6e\u3002\n\n## \u7f16\u5199\u81ea\u5b9a\u4e49\u8d44\u6e90\u6587\u6863\n\n\u81ea\u5b9a\u4e49\u8d44\u6e90\u7684\u6587\u6863\u5927\u90e8\u5206\u662f\u7531 [go structs that define the custom\nresources](https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1) \u4e0a\u7684\u6ce8\u91ca\u4ee5\u53ca\u878d\u5408\u4e86 [introductory content](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes) \u548c [structure](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml) \u800c\u751f\u6210\u7684\u3002\n\n### \u5de5\u5177\u94fe\n\n\u81ea\u5b9a\u4e49\u8d44\u6e90\u6587\u6863\u662f\u7531\u4e0e Kubernetes [\u540c\u6837\u7684\u5de5\u5177\u94fe](https://kubernetes.io/docs/contribute/generate-ref-docs/kubernetes-api/)\u800c\u751f\u6210\u7684\uff0c\u4f46\u662f\u4e00\u7cfb\u5217\u7684 `jx` \u7684\u547d\u4ee4\u5c06\u5176\u5305\u88c5\u4e86\u8d77\u6765\uff0c\u56e0\u6b64\u4f60\u4e0d\u9700\u8981\u4e0b\u8f7d\u4ee5\u53ca\u914d\u7f6e\u8fd9\u4e9b\u4e0d\u540c\u7684\u5de5\u5177\u3002\n\nHTML \u6587\u6863\u662f\u7531 [OpenAPI \u8bf4\u660e](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/openapi-spec) \u751f\u6210\u7684\uff0c\u4f9d\u6b21\u7684\u7531 [Go \u7ed3\u6784\u4f53](https://github.com/jenkins-x/jx/tree/master/pkg/client/openapi) \u751f\u6210\uff0c\u800c\u8fd9\u4e9b\u7ed3\u6784\u4f53\u662f\u7531\u4ee3\u7801\u7684\u6ce8\u91ca\u751f\u6210\u7684\u3002\u60f3\u8981\u751f\u6210\u7ed3\u6784\u4f53\u548c OpenAPI \u8bf4\u660e\u6267\u884c\u547d\u4ee4\uff1a\n ```sh\n make generate-openapi\n ```\n\n {{< alert >}}\n `make generate-openapi` \u4ec5\u4ec5\u662f\u5bf9 `jx create client openapi` \u8fdb\u884c\u4e86\u5305\u88c5\uff0c\u901a\u8fc7\u4f20\u5165\u53c2\u6570\uff1a\u4ece\u54ea\u4e2a\u5305\u6765\u751f\u6210\u3001\u751f\u6210\u7684\u76ee\u6807\u5305\u7684\u540d\u79f0\u548c\u7ec4\uff08`jenkins.io`\uff09\u4ee5\u53ca\u7248\u672c(`v1`)\u6765\u751f\u6210\u6700\u7ec8\u7684\u6587\u4ef6\u3002\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\u3002\n {{< /alert >}}\n\n \u751f\u6210 HTML \u8fd0\u884c\uff1a\n\n ```sh\n make generate-docs\n ```\n\n{{< alert >}}\n`make generate-docs` \u4ec5\u4ec5\u662f\u5bf9 `jx create client docs` \u8fdb\u884c\u4e86\u5305\u88c5\u3002 Y\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u8fd9\u4e2a\u547d\u4ee4\u3002\n{{< /alert >}}\n\n\u5f53\u4f60\u5bf9\u81ea\u5b9a\u4e49\u8d44\u6e90\u8fdb\u884c\u4e86\u4fee\u6539\u7684\u8bdd\uff0c\u5e94\u8be5\u8fd0\u884c `make generate-openapi`\uff0c\u5e76\u786e\u8ba4\u5c06\u6240\u751f\u6210\u7684\u4fee\u6539\u6dfb\u52a0\u5230\u7248\u672c\u63a7\u5236\u5f53\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u5176\u4ed6\u4eba\uff0c\u5728\u4efb\u610f\u65f6\u523b\u90fd\u4f1a\u6709\u6807\u8bb0\u4e86\u7248\u672c\u7684 OpenAPI \u8bf4\u660e\u53ef\u4f9b\u4f7f\u7528\u3002\n\n{{< alert >}}\n\u4f60\u4e5f\u53ef\u4ee5\u8fd0\u884c `make generate` \u5b83\u4f1a\u8fdb\u884c\u6240\u6709 Jenins X\uff08mocks\u3001client \u4ee5\u53ca OpenAPI\uff09\u6240\u9700\u8981\u7684\u4ee3\u7801\u751f\u6210\u5de5\u4f5c\u3002\n{{< /alert >}}\n\n\u6784\u5efa\u7248\u672c\u65f6\u4f1a\u8fd0\u884c `make generate-docs`\uff0c\u5e76\u4e14\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7248\u672c\uff0c\u66f4\u65b0\u90fd\u4f1a\u81ea\u52a8\u7684\u4e0a\u4f20\u5230 Jenkins X \u7684\u7f51\u7ad9\u4e0a\u3002\u5728\u7248\u672c\u6784\u5efa\u7ed3\u675f\u7684\u51e0\u5206\u949f\u540e\u4f1a\u751f\u6548\u3002\n\n### \u5bf9\u6587\u6863\u8fdb\u884c\u4fee\u6539\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f60\u60f3\u8981\u751f\u6210\u6587\u6863\u7684\u6587\u4ef6\u5fc5\u987b\u8981\u5728 [jenkins.io/v1](https://github.com/jenkins-x/jx/tree/master/pkg/apis/jenkins.io/v1) \u76ee\u5f55\u4e2d\uff0c\u5e76\u4e14\u5728\u6587\u4ef6\u7684\u5934\u90e8\u5fc5\u987b\u6709\u4e0b\u9762\u7684\u6ce8\u91ca\uff1a\n\n```go\n// +k8s:openapi-gen=true\n```\n\n\u60f3\u8981\u79fb\u9664\u4e00\u4e2a\u7c7b\u578b\u6216\u8005\u6210\u5458\u7684\u8bdd\uff0c\u6dfb\u52a0\uff1a\n\n```go\n// +k8s:openapi-gen=false\n```\n\n\u5bf9\u7c7b\u578b\u7684\u6ce8\u91ca\u4f1a\u88ab\u5ffd\u7565\u3002\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u7684\u6ce8\u91ca\u4f1a\u88ab\u4f5c\u4e3a\u5176\u63cf\u8ff0\u4fe1\u606f\u3002\n\u5de6\u4fa7\u7684\u83dc\u5355\u680f\u662f\u7531 [config.yaml](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/config.yaml) \u4e2d\u7684 `resource_categories` \u800c\u751f\u6210\u3002\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u79cd\u7c7b\u7684\u4ecb\u7ecd\u6587\u672c\u4fe1\u606f\u7531 [html](https://github.com/jenkins-x/jx/tree/master/docs/apidocs/static_includes) \u7f16\u5199\u3002\n\n\u6837\u5f0f\u98ce\u683c\u4e5f\u53ef\u4ee5 [\u5b9a\u5236\u5316](https://github.com/jenkins-x/jx/blob/master/docs/apidocs/static/stylesheet.css)\u3002\n\n### OpenAPI\n\nOpenAPI \u8bf4\u660e\u662f\u7531\u4ee3\u7801\u751f\u6210\u7684\u3002\u5176\u7ed3\u6784\u7531\u7ed3\u6784\u4f53\u4ee5\u53ca\u5b57\u6bb5\u751f\u6210\u3002`json` [tags](https://golang.org/pkg/encoding/json/#Marshal) \u88ab\u7528\u4e8e\u63d0\u4f9b\u989d\u5916\u7684\u4fe1\u606f\u5305\u62ec\uff1a\n\n* `name` \u7531 `key` \u751f\u6210\n* \u5982\u679c\u6ca1\u6709\u8bbe\u7f6e `omitempty` \u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c5e\u6027\u5c06\u662f `\u5fc5\u9700\u7684`\n* \u5982\u679c `key` \u662f `-` \u7684\u8bdd\uff0c\u90a3\u4e48\u5c06\u4f1a\u8df3\u8fc7\u8fd9\u4e2a\u5b57\u6bb5\n* \u5982\u679c\u8bbe\u7f6e\u4e86 `inline` \u7684\u8bdd\uff0c\u8fd9\u4e9b\u5c5e\u6027\u5c06\u4f1a\u5d4c\u5165\u5230\u7236\u5bf9\u8c61\u5f53\u4e2d\n\n\u6b64\u5916\uff0c\u6ce8\u91ca\u53ef\u4ee5\u7528\u4e8e\u963b\u6b62\u67d0\u4e00\u5c5e\u6027\u88ab\u8bbe\u7f6e\u4e3a `\u5fc5\u9700\u9879`\n\n```go\n// +optional\n```\n\n\u4f8b\u5982\uff1a\n\n```go\n  metav1.TypeMeta `json:\",inline\"\n\t// +optional\n\tmetav1.ObjectMeta `json:\"metadata,omitempty\" protobuf:\"bytes,1,opt,name=metadata\"`\n  Spec BuildPackSpec `json:\"spec,omitempty\" protobuf:\"bytes,2,opt,name=spec\"`\n```\n\n#### OpenAPI \u6269\u5c55\n\n\u5728\u7c7b\u578b\u4e0a\uff0c OpenAPI \u8bf4\u660e\u4e5f\u53ef\u4ee5\u6709\u6269\u5c55\u3002\u60f3\u8981\u5728\u4e00\u4e2a\u7c7b\u578b\u6216\u8005\u6210\u5458\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u6216\u591a\u4e2a\u6269\u5c55\u7684\u8bdd\uff0c\u5728\u7c7b\u578b/\u6210\u5458\u7684\u6ce8\u91ca\u884c\u4e0a\u6dfb\u52a0 `+k8s:openapi-gen=x-kubernetes-$NAME:$VALUE`\u3002\u4e00\u4e2a\u7c7b\u578b/\u6210\u5458\u53ef\u4ee5\u6709\u591a\u4e2a\u6269\u5c55\u3002\u5728\u6ce8\u91ca\u4e2d\u7684\u7684\u5176\u5b83\u7684\u884c\u4f1a\u88ab\u4f5c\u4e3a $VALUE \u56e0\u6b64\u4e0d\u9700\u8981\u8eb2\u907f\u6216\u8005\u5b57\u7b26\u4e32\u52a0\u4e0a\u5f15\u53f7\u3002\u6269\u5c55\u53ef\u4ee5\u7528\u4e8e\u5411\u5ba2\u6237\u7aef\u6216\u8005\u6587\u6863\u751f\u6210\u5668\u4f20\u5165\u66f4\u591a\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7c7b\u578b\u5728\u6587\u6863\u4e2d\u53ef\u4ee5\u6709\u53cb\u597d\u7684\u540d\u79f0\u7528\u4e8e\u5c55\u793a\u6216\u8005\u7528\u4e8e\u5ba2\u6237\u7aef\u6d41\u7545\u7684\u63a5\u53e3\u3002\n\n#### \u81ea\u5b9a\u4e49 OpenAPI \u7c7b\u578b\u5b9a\u4e49\n\n\u81ea\u5b9a\u4e49\u7c7b\u578b\u4e0d\u4f1a\u76f4\u63a5\u7684\u6620\u5c04\u5230 OpenAPI \u5f53\u4e2d\uff0c\u800c\u662f\u4f1a\u901a\u8fc7\u5b9e\u73b0\u540d\u4e3a \"OpenAPIDefinition\" \u7684\u65b9\u6cd5\u5982\u4e0b\u9762\u6240\u793a\uff0c\u6765\u8986\u76d6\u4ed6\u4eec\u7684 OpenAPI \u8bf4\u660e\uff1a\n\n```go\n\timport openapi \"k8s.io/kube-openapi/pkg/common\"\n\n\t// ...\n\n\ttype Time struct {\n\t\ttime.Time\n\t}\n\n\tfunc (_ Time) OpenAPIDefinition() openapi.OpenAPIDefinition {\n\t\treturn openapi.OpenAPIDefinition{\n\t\t\tSchema: spec.Schema{\n\t\t\t\tSchemaProps: spec.SchemaProps{\n\t\t\t\t\tType:   []string{\"string\"},\n\t\t\t\t\tFormat: \"date-time\",\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n```\n\u6b64\u5916\uff0c\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49\u4e0b\u9762\u7684\u65b9\u6cd5\u6765\u907f\u514d\u5f15\u7528 \"openapi\"\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u4f1a\u548c\u4e0a\u9762\u7684\u4f8b\u5b50\u4ea7\u751f\u76f8\u540c\u7684 OpenAPI \u8bf4\u660e\uff1a\n\n```go\n    func (_ Time) OpenAPISchemaType() []string { return []string{\"string\"} }\n    func (_ Time) OpenAPISchemaFormat() string { return \"date-time\" }\n```\n\n## \u7f16\u5199 Godoc\n\nJenkins X \u4f7f\u7528\u6807\u51c6\u7684\u65b9\u6cd5\u6765\u751f\u6210 Godoc\uff0c\u800c\u4e14\u4f1a\u7531 [godoc.org](http://godoc.org) \u81ea\u52a8\u751f\u6210\u3002\u8fd9\u4e00[\u535a\u5ba2](https://blog.golang.org/godoc-documenting-go-code) \u4e3a\u7f16\u5199 Godoc \u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u4ecb\u7ecd\u3002\n",
            "content/zh/docs/getting-started/_index.md": "---\ntitle: \"\u5165\u95e8\u6307\u5357\"\nlinkTitle: \"\u5165\u95e8\u6307\u5357\"\nweight: 2\ndescription: \u65b0\u624b\u4e0a\u8def\u7684\u5165\u95e8\u6307\u5357 - \u5982\u4f55\u5feb\u901f\u5b89\u88c5\uff0c\u8fd0\u884c\u65b0\u4e00\u4ee3\u7684Jenkins X\n---\n\n\u9996\u5148\uff0c\u9700\u8981\u5728\u4f60\u672c\u5730\u7684\u673a\u5668\u4e0a[\u5b89\u88c5 jx \u547d\u4ee4\u884c\u5de5\u5177](install) \u3002\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx \u547d\u4ee4](/commands/jx/#jx) \u6765[\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 kubernetes \u96c6\u7fa4](/zh/docs/getting-started/setup/create-cluster/) \uff0c\u7136\u540e Jenkins X \u5c31\u4f1a\u81ea\u52a8\u5b89\u88c5\u3002\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a kubernetes \u96c6\u7fa4\uff0c\u90a3\u4e48\u53ef\u4ee5[\u5728\u4f60\u7684 kubernetes \u96c6\u7fa4\u4e0a\u5b89\u88c5 Jenkins X](install-on-cluster)\u3002\n\n",
            "content/zh/docs/getting-started/demos-talks-posts/_index.md": "---\ntitle: \u793a\u4f8b\nlinktitle: \u793a\u4f8b\ndescription: \u89c2\u770b Jenkins X \u793a\u4f8b\u89c6\u9891\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\ncategories: [fundamentals, \u57fa\u7840]\nweight: 3\n---\n\n\n\n\n                    \n",
            "content/zh/docs/getting-started/demos-talks-posts/create_cluster.md": "---\ntitle: \u521b\u5efa\u96c6\u7fa4\nlinktitle: \u521b\u5efa\u96c6\u7fa4\ndescription: \u5982\u4f55\u521b\u5efa Kubernetes \u96c6\u7fa4\u5e76\u5b89\u88c5 Jenkins X\n---\n\n\u8be5 [\u793a\u4f8b](https://www.youtube.com/watch?v=ELA4tytdFeA) \u4f7f\u7528\u547d\u4ee4\u5e76\u884c\u5730 [\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 Kubernetes \u96c6\u7fa4](/docs/getting-started/setup/create-cluster/) \uff1a\n\n* [jx create cluster gke](/commands/jx_create_cluster_gke/)\n* [jx create cluster aks](/commands/jx_create_cluster_aks/)\n* [jx create cluster minikube](/commands/deprecation/)\n\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ELA4tytdFeA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/zh/docs/getting-started/demos-talks-posts/create_cluster_gke.md": "---\ntitle: \u521b\u5efa GKE \u96c6\u7fa4\nlinktitle: \u521b\u5efa GKE \u96c6\u7fa4\ndescription: \u5982\u4f55\u5728 GKE \u4e0a\u521b\u5efa Kubernetes \u96c6\u7fa4\u5e76\u5b89\u88c5 Jenkins X\n---\n\n\u8be5 [\u793a\u4f8b](https://www.youtube.com/watch?v=r8-J9Qg-p9U) \u4f7f\u7528\u547d\u4ee4 [jx create cluster gke](/commands/jx_create_cluster_gke/) \u6765 [\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Kubernetes \u96c6\u7fa4](/docs/getting-started/setup/create-cluster/)\uff1a\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/r8-J9Qg-p9U\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/zh/docs/getting-started/demos-talks-posts/create_spring.md": "---\ntitle: \u521b\u5efa Spring\nlinktitle: \u521b\u5efa Spring\ndescription: \u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e26\u6709\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u90e8\u7f72\u7684 Spring Boot \u5e94\u7528\u4ee5\u53ca GitOps \u63d0\u5347\n---\n\n\u8be5 [\u793a\u4f8b](https://www.youtube.com/watch?v=kPes3rvT1UM) \u4f7f\u7528\u547d\u4ee4 [jx create spring](/commands/deprecation/) \u6765 [\u521b\u5efa\u5e26\u6709\u6301\u7eed\u96c6\u6210\u3001\u90e8\u7f72\u6d41\u6c34\u7ebf\u7684 Spring Boot \u5e94\u7528](/developing/create-spring/) \u5e76\u4f7f\u7528 [GitOps \u63d0\u5347](/about/concepts/features/#promotion)\uff1a\n\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/kPes3rvT1UM\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>",
            "content/zh/docs/getting-started/first-project/_index.md": "---\ntitle: \"Create your first project\"\ndate: 2017-01-05\nweight: 2\ndescription: >\n  Now that you've setup the platform, let's create your first project.\n---\n",
            "content/zh/docs/getting-started/first-project/create-quickstart.md": "---\ntitle: \u5feb\u901f\u5f00\u59cb\nlinktitle: \u5feb\u901f\u5f00\u59cb\ndescription: \u5982\u4f55\u521b\u5efa\u5feb\u901f\u5f00\u59cb\u5e94\u7528\u5e76\u5bfc\u5165 Jenkins X\n---\n\n\u4f60\u53ef\u4ee5\u7531\u9884\u5236\u7684\u5e94\u7528\u5f00\u59cb\u4e00\u4e2a\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u4ece\u5934\u5f00\u59cb\u3002\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 [jx create quickstart](/commands/jx_create_quickstart/) \uff0c\u4ece\u6211\u4eec\u9884\u5236\u7684\u5feb\u901f\u5e94\u7528\u5217\u8868\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e94\u7528\u3002\n\n```sh\njx create quickstart\n```\n\n\u7136\u540e\uff0c\u6839\u636e\u5217\u8868\u9009\u62e9\u4e00\u4e2a\u3002\n\n\u5982\u679c\u4f60\u6e05\u695a\u5217\u8868\u4e2d\u4f60\u6240\u9700\u8981\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u8fc7\u6ee4\uff1a\n\n```sh\njx create quickstart  -l go\n```\n\n\u6216\u8005\u4f7f\u7528\u6587\u672c\u8fc7\u6ee4\u5668\u5bf9\u9879\u76ee\u540d\u79f0\u505a\u8fc7\u6ee4\uff1a\n\n```sh\njx create quickstart  -f http\n```\n\n### \u5f53\u4f60\u9009\u62e9\u5feb\u901f\u5f00\u59cb\u65f6\u7684\u7ec6\u8282\n\n\u4e00\u65e6\u4f60\u9009\u62e9\u9879\u76ee\u5e76\u547d\u540d\u540e\uff0c\u4e0b\u9762\u7684\u6b65\u9aa4\u4f1a\u81ea\u52a8\u5b8c\u6210\uff1a\n\n* \u5728\u5b50\u76ee\u5f55\u4e2d\u521b\u5efa\u5e94\u7528\n* \u628a\u4f60\u7684\u4ee3\u7801\u6dfb\u52a0\u5230 git \u5e93\u4e2d\n* \u5728 git \u670d\u52a1\u4e0a\u6dfb\u52a0\u8fdc\u7a0b\u5e93\uff0c\u4f8b\u5982\uff1a [GitHub](https://github.com)\n* \u63a8\u9001\u4ee3\u7801\u5230\u8fdc\u7a0b\u5e93\n* \u6dfb\u52a0\u9ed8\u8ba4\u6587\u4ef6\uff1a\n  * `Dockerfile` to build your application as a docker image\n  * `Dockerfile` \u628a\u4f60\u7684\u5e94\u7528\u6784\u5efa\u4e3a docker \u955c\u50cf\n  * `Jenkinsfile` to implement the CI / CD pipeline\n  * `Jenkinsfile` \u5b9e\u73b0 CI / CD \u6d41\u6c34\u7ebf\n  * \u5728 Kubernetes \u4e2d\u901a\u8fc7 helm chart \u8fd0\u884c\u4f60\u7684\u5e94\u7528\n* \u4e3a\u4f60\u7684 Jenkins \u5728 git \u8fdc\u7a0b\u5e93\u4e0a\u6ce8\u518c webhook\n* \u4e3a\u4f60\u7684 Jenkins \u6dfb\u52a0 git \u5e93\n* \u9996\u6b21\u89e6\u53d1\u6d41\u6c34\u7ebf\n\n### \u5feb\u901f\u5f00\u59cb\u7684\u539f\u7406\uff1f\n\n\u5feb\u901f\u5f00\u59cb\u7684\u6e90\u7801\u6258\u7ba1\u5728 [the jenkins-quickstarts GitHub organisation](https://github.com/jenkins-x-quickstarts)\u3002\n\n\u5f53\u4f60\u521b\u5efa\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u6839\u636e\u5de5\u7a0b\u6e90\u7801\u7684\u8bed\u8a00\uff0c\u4f7f\u7528 [Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) \u6765\u5339\u914d\u6700\u5408\u9002\u7684\u6784\u5efa\u3002\n\n\u5f53\u4f60\u4f7f\u7528 [jx create](/zh/docs/getting-started/setup/create-cluster/)\uff0c [jx install](/docs/resources/guides/managing-jx/common-tasks/install-on-cluster/) \u6216\u8005 [jx init](/commands/deprecation/) \u65f6\uff0c[Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) \u4f1a\u514b\u9686\u5230\u76ee\u5f55 `~/.jx/draft/packs` \u4e2d\u3002\n\n\u4f8b\u5982\uff1a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u547d\u4ee4\u67e5\u770b\u652f\u6301\u7684\u6240\u6709\u8bed\u8a00\uff1a\n\n```sh\nls -al ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs\n```\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx create spring](/zh/docs/resources/guides/using-jx/common-tasks/create-spring/) \u6216 [jx import](developing/import/) \u6765\u5feb\u901f\u521b\u5efa\uff0c\u8fd9\u65f6 [Jenkins X build packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) \u4f1a\u8fdb\u884c\u4e0b\u9762\u7684\u6b65\u9aa4\uff1a\n\n* \u627e\u5230\u5bf9\u5e94\u7684\u8bed\u8a00\u5305\u3002\u5f53\u524d\u5305\u62ec [list of language packs](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs)\u3002\n* \u5f53\u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\uff0c\u8bed\u8a00\u5305\u4f1a\u5b9e\u73b0\u9ed8\u8ba4\u7684\uff1a\n  * `Dockerfile` \u5c06\u7a0b\u5e8f\u6253\u5305\u4e3a docker \u955c\u50cf\n  * `Jenkinsfile` \u4f7f\u7528\u7533\u660e\u5f0f\u6d41\u6c34\u7ebf\uff08pipeline\uff09\u5b9e\u73b0\u6301\u7eed\u6784\u5efa\u3001\u6301\u7eed\u90e8\u7f72\n  * Helm Charts \u5728 Kubernetes \u4e0a\u90e8\u7f72\u7a0b\u5e8f\uff0c\u5e76\u4e14\u5b9e\u73b0 [\u9884\u53d1\u73af\u5883](/about/concepts/features/#preview-environments)\n\n## \u6dfb\u52a0\u4f60\u81ea\u5df1\u7684\u5feb\u901f\u5f00\u59cb\n\n\u5982\u679c\u4f60\u60f3\u8981\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684\u5feb\u901f\u5f00\u59cb\u7ed9 Jenkins X\uff0c\u8bf7\u628a\u4f60 GitHub\u4e2d\u7684\u94fe\u63a5[\u63d0\u4ea4\u95ee\u9898](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:) \u5230[\u5feb\u901f\u5f00\u59cb\u7ec4\u7ec7](https://github.com/jenkins-x-quickstarts)\uff0c\u7136\u540e\u5b83\u5c31\u4f1a\u51fa\u73b0\u5728\u83dc\u5355 `jx create quickstart` \u4e2d\u3002\n\n\u6216\u8005\uff0c\u4f60\u662f\u5f00\u6e90\u9879\u76ee\u7684\u4e00\u4efd\u5b50\uff0c\u5e0c\u671b\u7ba1\u7406\u4e00\u5957\u4f60\u4eec\u9879\u76ee\u7684\u5feb\u901f\u5f00\u59cb\uff1b\u4f60\u53ef\u4ee5[\u63d0\u4ea4\u95ee\u9898](https://github.com/jenkins-x/jx/issues/new?labels=quickstart&title=Add%20quickstart&body=Please%20add%20this%20github%20quickstart:)\uff0c\u628a\u4f60\u4eec\u7684GitHub\u7ec4\u7ec7\u8be6\u7ec6\u4fe1\u606f\u7ed9\u6211\u4eec\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u5b83\u4f5c\u4e3a\u9ed8\u8ba4\u7684\u7ec4\u7ec7\u6dfb\u52a0\u5230\u547d\u4ee4 [jx create quickstart](/commands/jx_create_quickstart/) \u4e2d\u3002\u5982\u679c\u4f60\u628a\u5feb\u901f\u5f00\u59cb\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684 GitHub \u7ec4\u7ec7\u6765\u7ef4\u62a4\u7684\u8bdd\uff0c\u5bf9\u4e8e [jx create quickstart](/commands/jx_create_quickstart/) \u4f1a\u66f4\u5bb9\u6613\u4e9b\u3002\n\n\u5728\u6211\u4eec\u5b8c\u6210\u8fd9\u4e9b\u4e8b\u60c5\u4e4b\u524d\uff0c\u4f60\u8fd8\u662f\u53ef\u4ee5\u5728\u547d\u4ee4 `jx create quickstart` \u4e2d\u901a\u8fc7\u53c2\u6570 `-g` or `--organisations` \u6765\u5b9e\u73b0\u3002\n\n```sh\njx create quickstart  -l go --organisations my-github-org\n```\n\n\u5728 `my-github-org`\u4e2d\u53ef\u4ee5\u627e\u5230\u6240\u6709 Jenkins X \u9700\u8981\u7684\u5feb\u901f\u5f00\u59cb\u3002\n",
            "content/zh/docs/getting-started/setup/_index.md": "---\ntitle: \"\u5b89\u88c5 Jenkins X\"\nlinkTitle: \"\u5b89\u88c5 Jenkins X\"\nweight: 1\ndate: 2017-01-04\ndescription: >\n  \u5982\u4f55\u5b89\u88c5 Jenkins X.\n---\n\n",
            "content/zh/docs/getting-started/setup/boot/_index.md": "---\ntitle: \u4f7f\u7528Jenkins X Boot\nlinktitle: \u4f7f\u7528Jenkins X Boot\ndescription: \u901a\u8fc7GitOps\u548cJenkins X Pipeline\u5b89\u88c5\uff0c\u914d\u7f6e\u6216\u5347\u7ea7Jenkins X\ncategories: [getting started]\nkeywords: [install]\nweight: 10\n---\n\n\n\n## \u6982\u8ff0\n\n_Jenkins X Boot_\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\n* \u6839\u636e\u4f60\u7684\u5b9e\u9645\u60c5\u51b5\u521b\u5efakubernetes\u96c6\u7fa4\uff1a\n  * \u4f7f\u7528Terraform\u521b\u5efa\u60a8\u7684kubernetes\u96c6\u7fa4+\u76f8\u5173\u7684\u4e91\u8d44\u6e90\n  * \u4f7f\u7528\u60a8\u7684\u4e91\u63d0\u4f9b\u5546Web\u63a7\u5236\u53f0\u521b\u5efa\u4e00\u4e2a\u65b0\u7684kubernetes\u96c6\u7fa4\n  * \u4f7f\u7528 jx \u547d\u4ee4\u884c\u4f8b\u5982\n```\njx create cluster gke --skip-installation\n```\n\n  * \u4f7f\u7528\u9009\u62e9\u7684\u4e00\u4e9b\u4f60\u4eec\u56e2\u961f\u81ea\u5b9a\u4e49\u5de5\u5177\uff0c\u6216\u8005\u7531\u60a8\u7684\u8fd0\u8425\u56e2\u961f\u63d0\u4f9b\u7ed9\u60a8\u7684\u5de5\u5177\n\n* \u5b89\u88c5\u6210\u529f\u4ee5\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u9a8c\u8bc1\u662f\u5426\u53ef\u4ee5\u4e0ekubernetes\u96c6\u7fa4\u6b63\u5e38\u6c9f\u901a\uff1a\n```\nkubectl get ns\n```\n\n* \u8fd0\u884c [jx boot](/commands/jx_boot/) \u547d\u4ee4\u884c:\n```\njx boot\n```\n\n\u7a0b\u5e8f\u4f1a\u63d0\u793a\u60a8\u5b89\u88c5\u6240\u9700\u7684\u5176\u4ed6\u53c2\u6570\uff0c\u4f8b\u5982\u60a8\u7684\u7ba1\u7406\u5458\u7528\u6237/\u5bc6\u7801\uff0cPipeline\u6240\u5728git\u7528\u6237\u548c\u4ee4\u724c\u7b49\u3002\n\n\u6700\u540eJenkins X\u4f1a\u5728kubernetes\u96c6\u7fa4\u4e0a\u5b89\u88c5\u5e76\u8bbe\u7f6e\u5b8c\u3002\n\n### \u5173\u4e8e 'jx boot'\n\n[jx boot](/commands/jx_boot/) \u4f7f\u7528\u672c\u5730`jx`\u547d\u4ee4\u884c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6765\u89e3\u6790boot pipeline\u6d41\u6c34\u7ebf\u5b9a\u4e49\uff0c\u63a5\u7740\u901a\u8fc7\u5728kubernetes\u4e2d\u7684Tekton\u8fd0\u884c\u8fd9\u4e2a\u6d41\u6c34\u7ebf\u6765\u5b89\u88c5\u542f\u52a8Jenkins X\u3002 \u5982\u679cJenkin X\u5b89\u88c5\u540e\u4e86\u51fa\u4e86\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u968f\u65f6\u518d\u6b21\u6267\u884c`jx boot`\u6765\u6062\u590d\u8fd0\u884c\u72b6\u6001\uff08\u4f8b\u5982\uff0c\u5982\u679c\u6709\u4eba\u4e0d\u5c0f\u5fc3\u5220\u9664\u4e86\u60a8\u7684\u96c6\u7fa4\uff09\u3002\n\n\n#### \u5b89\u88c5\u524d\u540e\u9a8c\u8bc1\u65b9\u6cd5\n\n\u5728\u5c1d\u8bd5\u8fdb\u884c\u4efb\u4f55\u5b89\u88c5\u4e4b\u524d\uff0cjx \u4f1a\u8fd0\u884c[jx step verify preinstall](/commands/jx_step_verify_preinstall/)\u547d\u4ee4\u4ee5\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u3002 \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fTerraform\uff08\u60a8\u7684\u201cjx-requirements.yml\u201d\u6587\u4ef6\u4f1a\u6709\u201cterraform\uff1atrue\u201d\uff09\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019Terraform\u6ca1\u6709\u521b\u5efa\u6240\u9700\u7684\u4e91\u8d44\u6e90\u7684\u60c5\u51b5\u4e0b\uff0c jx \u5b89\u88c5\u5c06\u4f1a\u5931\u8d25\u3002\n\n\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u5c06\u8fd0\u884c[jx step verify install](/commands/jx_step_verify_install/) \u547d\u4ee4\u4ee5\u9a8c\u8bc1\u60a8\u7684\u5b89\u88c5\u6210\u529f.\n\n## \u66f4\u6539\u5df2\u6709\u5b89\u88c5\n\n\u60a8\u53ef\u4ee5\u968f\u65f6\u91cd\u65b0\u8fd0\u884c [jx boot](/commands/jx_boot/) \u4ee5\u66f4\u6539\u5df2\u6709\u7684\u5e94\u7528\u914d\u7f6e.  \n\n\u56e0\u6b64\uff0c\u53ea\u9700\u7f16\u8f91\u6240\u9700\u914d\u7f6e\u4e2d\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c [jx boot](/commands/jx_boot/) -\u5c31\u53ef\u4ee5\u6dfb\u52a0\u6216\u5220\u9664Apps\uff0c\u66f4\u6539\u53c2\u6570\u6216\u914d\u7f6e\uff0c\u5347\u7ea7\u6216\u964d\u7ea7\u4f9d\u8d56\u9879\u7684\u7248\u672c\u53f7\u3002\n\n## \u9700\u6c42\n\n\u6709\u4e00\u4e2a\u540d\u4e3a[jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) \u7684\u6587\u4ef6\uff0c\u7528\u4e8e\u6307\u5b9a\u5b89\u88c5\u903b\u8f91\u8981\u6c42\uff0c\u5982\uff1a\n\n* \u4f7f\u7528\u4ec0\u4e48kubernetes\u670d\u52a1\u63d0\u4f9b\u5546\n* \u662f\u5426\u5c06\u673a\u5bc6\u5b58\u50a8\u5728\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u6216\u4fdd\u7ba1\u5e93\u4e2d\n* \u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528Terraform\u6765\u7ba1\u7406\u60a8\u7684\u4e91\u8d44\u6e90\n* \u5982\u679c\u60a8\u5e0c\u671b\u4f7f\u7528kaniko\u8fdb\u884c\u5bb9\u5668\u6620\u50cf\u6784\u5efa\n\n\u8fd9\u662f`jx boot`\u7684\u4e3b\u8981\u914d\u7f6e\u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u8fdb\u884c\u5927\u90e8\u5206\u66f4\u6539\u3002 \u60a8\u53ef\u80fd\u9700\u8981\u67e5\u770b[jx-requirements.yml]\uff08https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml\uff09\u6587\u4ef6\u5e76\u8fdb\u884c\u4efb\u4f55\u9700\u8981\u66f4\u6539\u3002\n\n## Secrets\n\nBoot \u5f53\u524d\u652f\u6301\u4ee5\u4e0b\u7528\u4e8e\u7ba1\u7406\u654f\u611f\u4fe1\u606fSecrets\u7684\u9009\u9879:\n\n### \u672c\u5730\u5b58\u50a8\n\n\u672c\u5730\u5b58\u50a8\u65f6\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u6539\u53d8\u5b58\u50a8\u914d\u7f6e `secretStorage: local`:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nsecretStorage: local\nwebhook: prow\n```\n\n\u5982\u679cSecrets\u542f\u7528\u540e\u662f\u52a0\u8f7d/\u4fdd\u5b58\u5230\u6587\u4ef6\u5939\u4e2d `~/.jx/localSecrets/$clusterName`\u7684\u8bdd\uff0c \u4f60\u53ef\u4ee5\u901a\u8fc7 `$JX_HOME` \u6765\u6539\u53d8 `~/.jx`\u7684\u8def\u5f84.\n\n### Vault\n\n\u4f7f\u7528\u6211\u4eec\u63a8\u8350\u7684GKE\u6216EKS\u63d0\u4f9b\u7684Kubernetes\u670d\u52a1\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u914d\u7f6e `secretStorage: vault`:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nsecretStorage: vault\nwebhook: prow\n```\n\n\u8fd9\u79cd\u914d\u7f6e\u4f1a\u8ba9 `jx boot` \u7684\u6d41\u6c34\u7ebf\u4f7f\u7528KMS\u548c\u4e91\u5b58\u50a8\u5b89\u88c5\u7684Vault\u6765\u52a0\u8f7d/\u4fdd\u5b58\u673a\u5bc6\u3002\n\nVault\u7684\u6700\u5927\u4f18\u52bf\u5728\u4e8e\u540c\u4e00\u4e2a\u56e2\u961f\u7684\u4eba\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u540c\u4e00\u7fa4\u96c6\u4e0a\u8fd0\u884c `jx boot`\u3002\u5373\u4f7f\u67d0\u4eba\u4e0d\u5c0f\u5fc3\u5220\u9664\u4e86kubernetes\u96c6\u7fa4\uff0c\u56e2\u961f\u4e2d\u5176\u4ed6\u4eba\u4e5f\u5f88\u5bb9\u6613\u4eceKMS+\u4e91\u5b58\u50a8\u4e2d\u8fd8\u539f\u4e4b\u524d\u7684\u5b89\u88c5\u3002\n\n## Webhook\n\nJenkins X \u652f\u6301\u8bb8\u591a\u7528\u4e8e\u5904\u7406Webhook\u7684\u5f15\u64ce\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u652f\u6301[ChatOps](/docs/resources/faq/using/chatops/).\n\n[Prow](/docs/reference/components/prow/) \u548c [Lighthouse](/architecture/lighthouse/) \u53ef\u4ee5\u652f\u6301webhooks\u7684\u65b9\u5f0f\u548c [ChatOps](/docs/resources/faq/using/chatops/)\u3002 \u4f46\u662fJenkins\u53ea\u80fd\u652f\u6301 webhooks.\n\n### Prow\n\n\u5f53\u7528\u6237\u9009\u62e9 [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) \u7684\u5b89\u88c5\u65b9\u5f0f\uff0c\u5b89\u88c5\u540eJenkins X\u670d\u52a1\u4f1a\u4f7f\u7528 [Tekton](https://tekton.dev/)\u7684\u6d41\u6c34\u7ebf\u5f15\u64ce\u548cGitHub\u7684git\u670d\u52a1\u3002 [Prow](/docs/reference/components/prow/) \u662f\u9ed8\u8ba4\u7684webhook\u548c[ChatOps](/docs/resources/faq/using/chatops/)\u7684\u5f15\u64ce\u3002 \n \n\u5b83\u7684\u914d\u7f6e\u65b9\u5f0f\u5728 `jx-requirements.yml` \u91cc `webhook: prow` \n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n### Lighthouse\n\n \u5f53\u7528\u6237\u9009\u62e9 [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) \u548c [Tekton](https://tekton.dev/) \u7684\u5b89\u88c5\u65b9\u5f0f\uff0c\u4f46\u662f\u6ca1\u6709\u91c7\u7528 github\u7684\u670d\u52a1\u800c\u662f\u5176\u4ed6git\u670d\u52a1\u7684\u65f6\u5019\uff0c [Lighthouse](/architecture/lighthouse/) \u53d8\u6210\u4e86\u9ed8\u8ba4\u7684webhook\u548c[ChatOps](/docs/resources/faq/using/chatops/)\u5f15\u64ce\u3002\u73b0\u5728Prow\u7684\u5f00\u6e90\u8f6f\u4ef6\u53ea\u652f\u6301github\u7684Git\u670d\u52a1\u3002\n\n\u4ee5\u540e\u5982\u679cLighthouse\u5f00\u6e90\u8f6f\u4ef6\u7ecf\u8fc7\u4e86\u5145\u5206\u7684\u6d4b\u8bd5\u540e\u66f4\u52a0\u7a33\u5b9a\uff0c\u6211\u4eec\u4f1a\u5c06\u5b83\u8bbe\u4e3a\u9ed8\u8ba4 [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/)\u3002\n\nIts configured via the `webhook: lighthouse` in `jx-requirements.yml`\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: lighthouse\n```\n\n### Jenkins\n\n\u8981\u4f7f\u7528Jenkins\u670d\u52a1\u5668\u6765\u5904\u7406Webhook\u548cpipeline\uff0c\u8bf7\u6539\u52a8`jx-requirements.yml`\u4e2d\u7684`webhook: jenkins`\u3002\n\n## Git\n\nJenkins X\u652f\u6301\u8bb8\u591a\u4e0d\u540c\u7684git\u670d\u52a1\u3002 \u60a8\u53ef\u4ee5\u5728[jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) \u6587\u4ef6\u91cc\u4e3a\u6bcf\u4e2a\u73af\u5883\u6307\u5b9a\u76f8\u5e94\u7684git\u670d\u52a1\u4f9b\u5e94\u5546\u53cagit\u5b9a\u4e49\u7684\u7ec4\u7ec7 - organization\u3002\n\n### GitHub\n\n\u5982\u679c\u60a8\u6ca1\u505a\u4efb\u4f55\u6539\u52a8\uff0c\u8fd9\u4e9b\u662f\u9ed8\u8ba4\u8bbe\u7f6e\u3002\n\n\n```yaml\ncluster:\n  environmentGitOwner: myorg\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n### GitHub Enterprise\n\n\u914d\u7f6e\u4e0e\u4e0a\u9762\u7c7b\u4f3c\uff0c\u4f46\u662f\u60a8\u9700\u8981\u6307\u5b9a `gitServer` \u7684URL (\u5982\u679c\u60a8\u7528\u7684git\u670d\u52a1\u4e0d\u662fhttps://github.com) \u548c `gitKind: github`\n\n```yaml   \ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: ghe\n  gitServer: https://github.myserver.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n### Bitbucket Server\n\n\u60a8\u8981\u6307\u5b9a `gitServer` \u548c `gitKind: bitbucketserver`. \u5982\u679c\u60a8\u5b89\u88c5\u7684\u662f [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) \u548c [Tekton](https://tekton.dev/)\uff0c \u60a8\u9700\u8981\u901a\u8fc7\u6307\u5b9a `webhook: lighthouse` \u6765\u4f7f\u7528[lighthouse webhook](#webhook)\u3002   \n\n```yaml   \ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketserver\n  gitName: bs\n  gitServer: https://bitbucket.myserver.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n### Bitbucket Cloud\n\n\u60a8\u8981\u6307\u5b9a `gitKind: bitbucketcloud`. \u5982\u679c\u60a8\u5b89\u88c5\u7684\u662f [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) \u548c [Tekton](https://tekton.dev/)\uff0c \u60a8\u9700\u8981\u901a\u8fc7\u6307\u5b9a `webhook: lighthouse` \u6765\u4f7f\u7528[lighthouse webhook](#webhook)\u3002\n\n```yaml   \ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: bitbucketcloud\n  gitName: bc\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n\n### Gitlab\n\n\u60a8\u8981\u6307\u5b9a `gitServer` \u7684URL \u548c `gitKind: gitlab`. \u5982\u679c\u60a8\u5b89\u88c5\u7684\u662f [Serverless Jenkins X Pipelines](/about/concepts/jenkins-x-pipelines/) \u548c [Tekton](https://tekton.dev/)\uff0c \u60a8\u9700\u8981\u901a\u8fc7\u6307\u5b9a `webhook: lighthouse` \u6765\u4f7f\u7528[lighthouse webhook](#webhook)\u3002\n\n```yaml   \ncluster:\n  provider: gke\n  environmentGitOwner: myorg\n  gitKind: gitlab\n  gitName: gl\n  gitServer: https://gitlab.com\nenvironments:\n  - key: dev\n  - key: staging\n  - key: production\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: true\n    url: \"gs://jx-logs\"\n  reports:\n    enabled: true\n    url: \"gs://jx-logs\"\n  repository:\n    enabled: true\n    url: \"gs://jx-logs\"\nwebhook: lighthouse\n```\n\n## Storage\n\n\u6587\u4ef6 [jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml)  \u53ef\u4ee5\u914d\u7f6e\u60a8\u662f\u5426\u8981\u5bf9\u65e5\u5fd7\u548c\u62a5\u544a\u4f7f\u7528\u957f\u671f\u5b58\u50a8\uff0c\u548c\u9009\u62e9\u7528\u4e8e\u5b58\u50a8\u6570\u636e\u7684\u4e91\u5b58\u50a8\u3002\n\n\u4e0b\u9762\u8fd9\u4e2a `jx-requirements.yml` \u6587\u4ef6\u662f\u4f7f\u7528\u957f\u671f\u5b58\u50a8\u7684\u4f8b\u5b50:\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: true\n  reports:\n    enabled: false\n  repository:\n    enabled: false\n```\n\n\n\u60a8\u8fd8\u53ef\u4ee5\u5728`storage`\u90e8\u5206\u4e2d\u6307\u5b9a\u5b58\u50a8\u5206\u533a\u7684URL\u3002\u652f\u6301\u4ee5\u4e0bURL\u8bed\u6cd5\uff1a\n\n* `gs://anotherBucket/mydir/something.txt` : \u4f7f\u7528\u8c37\u6b4c\u4e91\u7684GCS bucket\n* `s3://nameOfBucket/mydir/something.txt` : \u4f7f\u7528\u4e9a\u9a6c\u900aAWS\u7684 S3 bucket\n* `azblob://thatBucket/mydir/something.txt` : \u4f7f\u7528\u5fae\u8f6f\u7684Azure bucket\n* `http://foo/bar` : \u4e0d\u4f7f\u7528HTTPS\u65b9\u5f0f\u5b58\u50a8\u5728git\u4e2d\u7684\u6587\u4ef6\n* `https://foo/bar` : \u4f7f\u7528HTTPS\u65b9\u5f0f\u5b58\u50a8\u5728git\u4e2d\u7684\u6587\u4ef6\n\ne.g.\n\n```yaml\ncluster:\n  provider: gke\nenvironments:\n- key: dev\n- key: staging\n- key: production\nkaniko: true\nstorage:\n  logs:\n    enabled: false\n    url: gs://my-logs\n  reports:\n    enabled: false\n    url: gs://my-logs\n  repository:\n    enabled: false\n    url: gs://my-repo\n```\n\nFor more details see the [Storage Guide](/docs/guides/managing-jx/common-tasks/storage/).\n\n## Ingress\n\n\u5982\u679c\u60a8\u91c7\u7528[jx-requirements.yml](https://github.com/jenkins-x/jenkins-x-boot-config/blob/master/jx-requirements.yml) \u9ed8\u8ba4\u8bbe\u7f6e\uff0c jx boot \u4f1a\u4f7f\u7528HTTP \u800c\u4e0d\u662f HTTPS\uff0c\u540c\u65f6\u4e5f\u4f1a\u4f7f\u7528 [nip.io](https://nip.io/) \u4f5c\u4e3aDNS\u673a\u5236\u3002\n\n\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd0\u884cboot\u540e\uff0c `jx-requirements.yml` \u914d\u7f6e\u5982\u4e0b\uff1a  \n\n```yaml\ncluster:\n  provider: gke\n  clusterName: my-cluster-name\n  environmentGitOwner: my-git-org\n  project: my-gke-project\n  zone: europe-west1-d\nenvironments:\n- key: dev\n- key: staging\n- key: production\ningress:\n  domain: 1.2.3.4.nip.io\n  externalDNS: false\n  tls:\n    email: \"\"\n    enabled: false\n    production: false\nkaniko: true\nsecretStorage: local\nstorage:\n  logs:\n    enabled: false\n  reports:\n    enabled: false\n  repository:\n    enabled: false\nwebhook: prow\n```\n\n\u5982\u679c\u60a8\u5e0c\u671b\u542f\u7528\u5916\u90e8DNS\uff08\u4e3a\u6240\u6709\u5bfc\u51fa\u7684\u670d\u52a1\u81ea\u52a8\u6ce8\u518cDNS\u540d\u79f0\uff09\u4f7f\u7528DNS\u57df\u540d\u6216\u8005TLS\uff0c\u8bf7\u4fee\u6539\u60a8\u7684 `ingress` \u90e8\u5206\uff0c\u53ef\u4ee5\u5728`jx-requirements.yml`\u6587\u4ef6\u4e2d\u6dfb\u52a0 `ingress.domain` \u548c `ingress.externalDNS = true` \uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c`jx boot`\u3002  \n\n\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7`ingress.tls.enabled = true`\u66f4\u65b0\u914d\u7f6e\u4ee5\u542f\u7528TLS\u3002\u4e0b\u9762\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\u3002\n\n```yaml\ncluster:\n  clusterName: mycluster\n  environmentGitOwner: myorg\n  gitKind: github\n  gitName: github\n  gitServer: https://github.com\n  namespace: jx\n  provider: gke\n  vaultName: jx-vault-myname\nenvironments:\n- key: dev\n- key: staging\n- key: production\ngitops: true\ningress:\n  domain: my.domain.com\n  externalDNS: true\n  namespaceSubDomain: -jx.\n  tls:\n    email: someone@acme.com\n    enabled: true\n    production: true\nkaniko: true\nsecretStorage: vault\nstorage:\n  logs:\n    enabled: true\n    url: gs://jx-prod-logs\n  reports:\n    enabled: false\n    url: \"\"\n  repository:\n    enabled: false\n    url: \"\"\nwebhook: prow\n```\n",
            "content/zh/docs/getting-started/setup/create-cluster/_index.md": "---\ntitle: \u521b\u5efa\u65b0\u96c6\u7fa4\nlinktitle: \u521b\u5efa\u65b0\u96c6\u7fa4\ndescription: \u5982\u4f55\u901a\u8fc7 Jenkins X \u521b\u5efa\u65b0\u7684 Kubernetes \u96c6\u7fa4\ndate: 2018-04-21\npublishdate: 2018-04-21\ncategories: [getting started]\nkeywords: [install]\nweight: 1\n---\n\nJenkins X \u53ef\u4ee5\u901a\u8fc7jx\u7684\u547d\u4ee4\u884c\u754c\u9762CLI\u5b89\u88c5\u5230Kubernetes\u96c6\u7fa4\u91cc\u3002\n\n\u521b\u5efaKubernetes\u96c6\u7fa4\u7684\u65b9\u6cd5\u6709\u5f88\u591a\u79cd\u3002\n\n\u6211\u4eec\u63a8\u8350\u7684\u65b9\u6cd5\u662f\u4f7f\u7528Terraform\u8bbe\u7f6e\u6240\u6709\u4e91\u57fa\u7840\u67b6\u6784\uff08kubernetes\u96c6\u7fa4\uff0c\u670d\u52a1\u5e10\u6237\uff0c\u5b58\u50a8\u6876\uff0c\u65e5\u5fd7\u8bb0\u5f55\u7b49\uff09\uff0c\u5e76\u4f7f\u7528\u4e91\u63d0\u4f9b\u5546\u6765\u521b\u5efa\u548c\u7ba1\u7406kubernetes\u96c6\u7fa4\u3002\n\n---\n\n\u6216\u8005\u60a8\u53ef\u4ee5\u4f7f\u7528kubernetes\u63d0\u4f9b\u7a0b\u5e8f\u7279\u5b9a\u7684\u65b9\u6cd5\uff1a\n                \n\u901a\u8fc7\u5df2\u7ecf\u5b89\u88c5\u7684 Jenkins X \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u96c6\u7fa4\uff0c\u4f7f\u7528\u547d\u4ee4  [jx create cluster](/commands/jx_create_cluster/) \u3002\n\n\u5982\u4e0b\u6240\u793a\uff0c\u652f\u6301\u5f88\u591a\u4e0d\u540c\u7684\u516c\u6709\u4e91\u63d0\u4f9b\u5546\u3002\n\n__\u4e3a\u4e86\u6700\u597d\u7684\u5165\u95e8\u4f53\u9a8c\uff0c\u6211\u4eec\u76ee\u524d\u63a8\u8350\u4f7f\u7528 Google Container Engine (GKE)__\u3002\u5982\u679c\u4f60\u6ca1\u6709\u8c37\u6b4c\u4e91\u8d26\u53f7\u7684\u8bdd\uff0c\u8c37\u6b4c\u4e91\u5e73\u53f0\u63d0\u4f9b\u4e09\u767e\u7f8e\u5143\u7684\u989d\u5ea6\u3002\u67e5\u770b https://console.cloud.google.com/freetrial\n\n\u8fd9\u6709\u4e00\u4e2a\u5c0f\u7684\u6f14\u793a\uff0c\u540c\u65f6\u5c55\u793a GKE\u3001AKS \u548c Minikube\u3002\u5728\u4e0d\u540c\u7684\u8bbe\u5907\uff08\u4e91\uff09\u4e0a\u542f\u52a8\u9700\u8981\u82b1\u70b9\u65f6\u95f4\uff0c\u8bf7\u8010\u5fc3\u7b49\u5f85\uff01\n\n<iframe width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/ELA4tytdFeA\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n\n### \u4f7f\u7528\u8c37\u6b4c\u4e91 (GKE)\n\n\u4f7f\u7528\u547d\u4ee4 [jx create cluster gke](/commands/jx_create_cluster_gke/) \uff1a\n\n    jx create cluster gke\n\n\u8be5\u547d\u4ee4\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u8c37\u6b4c\u8d26\u6237\uff0c\u5e76\u4e14\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u9879\u76ee\uff0c\u53ef\u4ee5\u518d\u91cc\u9762\u521b\u5efa Kubernetes \u96c6\u7fa4\u3002\n\n\u73b0\u5728 **[\u4f7f\u7528 Jenkins X \u66f4\u5feb\u901f\u5730\u5f00\u53d1\u5e94\u7528](/zh/docs/getting-started/)**\u3002\n\n### \u4f7f\u7528\u4e9a\u9a6c\u900a (AWS)\n\n\u4f7f\u7528\u547d\u4ee4 [jx create cluster aws](/commands/x_create_cluster_aws) \uff1a\n\n```sh\njx create cluster aws\n```\n\n\u8fd9\u4f1a\u901a\u8fc7\u4f60\u7684\u4e9a\u9a6c\u900a\u8d26\u6237\uff0c\u4f7f\u7528\u547d\u4ee4 [kops](https://github.com/kubernetes/kops) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Kubernetes \u96c6\u7fa4\u5e76\u5b89\u88c5 Jenkins X\u3002\n\n\u6765\u8bd5\u8bd5\u8fd9\u4e2a\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u53c2\u7167 [AWS Workshop for Kubernetes](https://github.com/aws-samples/aws-workshop-for-kubernetes/tree/master/01-path-basics/101-start-here#create-aws-cloud9-environment)  \u8bbe\u7f6e AWS Cloud9 IDE\u3002\n\n\u7136\u540e\uff0c\u5728 Cloud9 \u4e2d\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u7ec8\u7aef\uff0c\u8bd5\u8bd5\u8fd9\u4e9b\u547d\u4ee4\uff1a\n\n```sh\ncurl -L https://github.com/jenkins-x/jx/releases/download/v{{.Site.Params.release}}/jx-linux-amd64.tar.gz | tar xzv\nsudo mv jx /usr/local/bin\njx create cluster aws\n```\n\n\u73b0\u5728 **[\u4f7f\u7528 Jenkins X \u66f4\u5feb\u901f\u5730\u5f00\u53d1\u5e94\u7528](/zh/docs/getting-started/)**\u3002\n\n\n### \u4f7f\u7528 Azure (AKS)\n\n\u4f7f\u7528\u547d\u4ee4 [jx create cluster aks](/commands/jx_create_cluster_aks/) \uff1a\n\n```sh\njx create cluster aks\n```\n\n\u73b0\u5728 **[\u4f7f\u7528 Jenkins X \u66f4\u5feb\u901f\u5730\u5f00\u53d1\u5e94\u7528](/zh/docs/getting-started/)**\u3002\n\n### \u4f7f\u7528 Minikube (local)\n\n\u6709\u4e9b\u4eba\u5728\u5f00\u59cb\u4f7f\u7528 minikube \u65f6\u9047\u5230\u95ee\u9898\uff0c\u53ef\u80fd\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n\n* minikube \u9700\u8981\u66f4\u65b0\u4f60\u7684\u673a\u5668\u4ee5\u53ca\u865a\u62df\u5316\u8f6f\u4ef6\n* \u4f60\u53ef\u80fd\u5df2\u7ecf\u5b89\u88c5\u4e86\u65e7\u7248\u672c\u7684 Docker \u6216\u8005 minikube\u3001kubectl\u3001helm\u7b49\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec**\u5f3a\u70c8**\u5efa\u8bae\u4f7f\u7528\u4e0a\u9762\u7684\u516c\u6709\u4e91\u6765\u5c1d\u8bd5 Jenkins X\u3002\u4ed6\u4eec\u90fd\u6709\u514d\u8d39\u4f53\u9a8c\uff0c\u6240\u4ee5\u5e94\u8be5\u4e0d\u4f1a\u82b1\u8d39\u4f60\u7684\u4efb\u4f55\u73b0\u91d1\uff0c\u800c\u4e14\u8fd8\u7ed9\u4e86\u4f60\u4f53\u9a8c\u4e91\u7684\u673a\u4f1a\u3002\n\n\u5982\u679c\u4f60\u8fd8\u662f\u60f3\u5c1d\u8bd5 minikube\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5efa\u8bae\u4ece\u5934\u5f00\u59cb\uff0c\u5e76\u8ba9 jx \u5e2e\u4f60\u521b\u5efa\n\n```sh\njx create cluster minikube\n```\n\n\u73b0\u5728 **[\u4f7f\u7528 Jenkins X \u66f4\u5feb\u901f\u5730\u5f00\u53d1\u5e94\u7528](/zh/docs/getting-started/)**\u3002\n\n### \u6545\u969c\u6392\u9664\n\n\u5982\u679c\u4f60\u5728\u5b89\u88c5 Jenkins X \u65f6\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u68c0\u67e5\u6211\u4eec\u7684 [\u6545\u969c\u6392\u9664](/zh/troubleshooting/faq/) \u6216\u8005 [\u8ba9\u6211\u4eec\u77e5\u9053](/zh/community/)\uff0c\u6211\u4eec\u4f1a\u5c3d\u529b\u7ed9\u4e88\u5e2e\u52a9\u3002\n\n",
            "content/zh/docs/getting-started/setup/install/_index.md": "---\ntitle: \u5b89\u88c5 jx\nlinktitle: \u5b89\u88c5 jx\ndescription: \u5982\u4f55\u5728\u4f60\u7684\u673a\u5668\u4e0a\u5b89\u88c5jx\u4e8c\u8fdb\u5236\u5305\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2017-02-01\ncategories: [getting started]\nkeywords: [install]\nweight: 2\n---\n\n\u6839\u636e\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u9009\u62e9\u6700\u9002\u5408\u7684\u6307\u4ee4\uff1a\n\n### macOS\n\n\u5728 Mac \u4e0a\u4f60\u53ef\u4ee5\u4f7f\u7528 [brew](https://brew.sh/)\uff1a\n\n```sh\nbrew install jenkins-x/jx/jx\n```\n\n\u6216\u8005\uff0c\u5982\u679c\u60a8\u5c1a\u672a\u5b89\u88c5 [brew](https://brew.sh/) \uff0c\u5e76\u4e14\u559c\u6b22\u624b\u52a8\u5b89\u88c5\u7684\u8bdd\uff0c\u8bf7\u6267\u884c\u5982\u4e0b\u6307\u4ee4\u5b89\u88c5:\n\n1.  Download the `jx` binary archive using `curl` and pipe (`|`) the compressed archive to\n    the `tar` command:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r '.tag_name')/jx-darwin-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n    or, if you don't have `jq` installed:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-darwin-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n\n2.  Install the `jx` binary by moving it to a location which should be on your environments PATH, using\n    the `mv` command:\n\n```sh\nsudo mv jx /usr/local/bin\n```\n\n3. Run `jx version` to make sure you're on the latest stable version\n\n```sh\njx version\n```\n\n### Linux\n\nTo install Jenkins X on Linux, download the `.tar` file, and unarchive it in a directory where you can run the `jx` command.\n\n1.  Download the `jx` binary archive using `curl` and pipe (`|`) the compressed archive to\n    the `tar` command:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent https://api.github.com/repos/jenkins-x/jx/releases/latest | jq -r '.tag_name')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n    or, if you don't have `jq` installed:\n\n```sh\ncurl -L \"https://github.com/jenkins-x/jx/releases/download/$(curl --silent \"https://github.com/jenkins-x/jx/releases/latest\" | sed 's#.*tag/\\(.*\\)\\\".*#\\1#')/jx-linux-amd64.tar.gz\" | tar xzv \"jx\"\n```\n\n2.  Install the `jx` binary by moving it to a location which should be on your environments PATH, using\n    the `mv` command:\n\n```sh\nsudo mv jx /usr/local/bin\n```\n\n3. Run `jx version` to make sure you're on the latest stable version\n\n```sh\njx version\n```\n\n### Windows\n\n- \u5982\u679c\u4f60\u4f7f\u7528 [Chocolatey](https://chocolatey.org/)\uff0c\u90a3\u4e48\u8fd9\u91cc\u6709\u4e00\u4e2a [\u53ef\u7528\u7684\u5305](https://chocolatey.org/packages/jenkins-x)\u3002\n\n  \u8981\u5b89\u88c5 `jx` \u4e8c\u8fdb\u5236\u8bf7\u8fd0\u884c\uff1a\n\n```sh\nchoco install jenkins-x\n```\n\n  \u8981\u5347\u7ea7 `jx` \u4e8c\u8fdb\u5236\u8bf7\u8fd0\u884c\uff1a\n\n```sh\nchoco upgrade jenkins-x\n```\n\n- \u5982\u679c\u4f60\u4f7f\u7528 [scoop](https://scoop.sh)\uff0c\u90a3\u4e48\u8fd9\u91cc\u6709\u4e00\u4e2a [\u53ef\u7528\u7684\u6e05\u5355](https://github.com/lukesampson/scoop/blob/master/bucket/jx.json)\u3002\n\n  \u8981\u5b89\u88c5 `jx` \u4e8c\u8fdb\u5236\u8bf7\u8fd0\u884c\uff1a\n\n```sh\nscoop install jx\n```\n\n  \u8981\u5347\u7ea7 `jx` \u4e8c\u8fdb\u5236\u8bf7\u8fd0\u884c\uff1a\n\n```sh\nscoop update jx\n```\n\n### \u5176\u4ed6\u5e73\u53f0\n\n[\u4e0b\u8f7d\u4e8c\u8fdb\u5236\u5305](https://github.com/jenkins-x/jx/releases) `jx` \u7136\u540e\u52a0\u5230\u73af\u5883\u53d8\u91cf `$PATH` \u4e2d\n\n\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5 [\u81ea\u884c\u6784\u5efa](https://github.com/jenkins-x/jx/blob/master/docs/contributing/hacking.md)\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u8981\u81ea\u884c\u6784\u5efa\u7684\u8bdd\uff0c\u8bf7\u6ce8\u610f\u79fb\u9664\u6240\u6709\u65e7\u7248\u672c\u7684 `jx` \u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd9\u6837\u4f60\u7684\u672c\u5730\u6784\u5efa\u624d\u4f1a\u51fa\u73b0\u5728\u73af\u5883\u53d8\u91cf `$PATH` \u7684\u7b2c\u4e00\u4f4d :)\n\n## \u83b7\u5f97\u5e2e\u52a9\n\n\u67e5\u627e\u53ef\u7528\u7684\u547d\u4ee4\u7c7b\u578b\uff1a\n\n```sh\njx\n```\n\n\u6216\u8005\uff0c\u83b7\u53d6\u6307\u5b9a\u547d\u4ee4\u7684\u5e2e\u52a9\uff0c\u4f8b\u5982\uff1a `create` \u547d\u4ee4\uff0c\u53ef\u4ee5\u8f93\u5165\uff1a\n\n```sh\njx help create\n```\n\n\u4f60\u4e5f\u53ef\u4ee5\u6d4f\u89c8 [jx \u547d\u4ee4\u53c2\u8003\u6587\u6863](/commands/jx/)\n",
            "content/zh/docs/managing-jx/_index.md": "---\ntitle: \"Managing Jenkins X\"\nlinkTitle: \"Managing Jenkins X\"\nweight: 3\ndescription: >\n  Learn how to manage Jenkins X.\n---\n",
            "content/zh/docs/managing-jx/common-tasks/_index.md": "---\ntitle: \"Core Tasks\"\nlinkTitle: \"Core Tasks\"\nweight: 6\ndescription: >\n  The core tasks to help you manage the Jenkins X platform.\n---\n",
            "content/zh/docs/managing-jx/common-tasks/build-packs.md": "---\ntitle: \u6784\u5efa\u6253\u5305\nlinktitle: \u6784\u5efa\u6253\u5305\ndescription: \u6253\u5305\u6e90\u7801\u4e3a kubernetes \u5e94\u7528\n---\n\n\u6211\u4eec\u4f7f\u7528 [draft](https://draft.sh/) \u98ce\u683c\u4e3a\u4e0d\u540c\u7684\u8bed\u8a00_\u6784\u5efa\u6253\u5305_ \uff0c\u6211\u4eec\u901a\u8fc7[\u5bfc\u5165](/zh/docs/resources/guides/using-jx/common-tasks/import/)\u6216\u8005[\u521b\u5efa](/zh/docs/resources/guides/using-jx/common-tasks/create-spring/)[\u4ed6\u4eec](/zh/docs/getting-started/first-project/create-quickstart/)\uff0c\u8fd0\u884c\u65f6\u548c\u6784\u5efa\u5de5\u5177\u6dfb\u52a0\u5fc5\u8981\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728 Kubernetes \u4e2d\u6784\u5efa\u548c\u90e8\u7f72\u4ed6\u4eec\u3002\n\n\u5982\u679c\u7531\u4e8e\u5de5\u7a0b\u6ca1\u6709\u88ab\u521b\u5efa\u6216\u5bfc\u5165\u800c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u6784\u5efa\u5305\u4f1a\u9ed8\u8ba4\u4f7f\u7528\u4e0b\u9762\u7684\u6587\u4ef6\uff1a\n\n* `Dockerfile` \u628a\u4ee3\u7801\u6784\u5efa\u4e3a\u4e0d\u53ef\u53d8\u7684 docker \u955c\u50cf\uff0c\u51c6\u5907\u5728 Kubernetes \u4e2d\u8fd0\u884c\n* `Jenkinsfile` \u4e3a\u5e94\u7528\u4f7f\u7528\u7533\u660e\u5f0f Jenkins \u6d41\u6c34\u7ebf\u5b9a\u4e49 CI/CD \u6b65\u9aa4\n* helm chart \u5728\u6587\u4ef6\u5939 `charts` \u4e2d\u751f\u6210\u53ef\u4ee5\u5728 Kubernetes \u4e2d\u8fd0\u884c\u7684 Kubernetes \u8d44\u6e90\n* \u5728 `charts/preview` \u6587\u4ef6\u5939\u4e2d\u7684 _preview chart_ \u5b9a\u4e49\u4e86\u57fa\u4e8e Pull Request \u90e8\u7f72\u4e00\u4e2a[\u9884\u89c8\u73af\u5883](/zh/about/concepts/features/#preview-environments)\u7684\u6240\u6709\u4f9d\u8d56\n\n\u9ed8\u8ba4\u7684\u6784\u5efa\u5305\u5728 [https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes)\uff0c\u6bcf\u4e2a\u8bed\u8a00\u6216\u8005\u6784\u5efa\u5de5\u5177\u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002\n\n `jx` \u547d\u4ee4\u884c\u514b\u9686\u6784\u5efa\u5305\u5230\u4f60\u7684\u6587\u4ef6\u5939 `.~/.jx/draft/packs/` \uff0c\u5e76\u5728\u4f60\u6bcf\u6b21\u5c1d\u8bd5\u521b\u5efa\u6216\u8005\u5230\u4e00\u4e2a\u5de5\u7a0b\u65f6\u901a\u8fc7 `git pull` \u6765\u66f4\u65b0\u4ed6\u4eec\u3002\n\n## \u521b\u5efa\u65b0\u7684\u6784\u5efa\n\n\u6211\u4eec\u6b22\u8fce[\u8d21\u732e](/zh/community/)\uff0c\u56e0\u6b64\uff0c\u8bf7\u8003\u8651\u589e\u52a0\u65b0\u7684\u6784\u5efa\u5305\u548c [pod \u6a21\u677f](/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/)\u3002\n\n\u8fd9\u91cc\u6709\u5982\u4f55\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6784\u5efa\u5305\u7684\u6307\u5bfc \u2014\u2014 \u5982\u679c\u6709\u4efb\u4f55\u4e0d\u6e05\u695a\u7684\u8bf7[\u52a0\u5165\u793e\u533a\u5e76\u63d0\u95ee](/zh/community/)\uff0c\u6211\u4eec\u5f88\u4e50\u610f\u5e2e\u52a9\uff01\n\n\u6700\u597d\u7684\u5f00\u59cb\u5c31\u662f _\u5feb\u901f\u5f00\u59cb_ \u5e94\u7528\u3002\u4f60\u53ef\u4ee5\u5f53\u4f5c\u4e00\u4e2a\u6d4b\u8bd5\u7684\u6837\u4f8b\u5de5\u7a0b\u3002\u56e0\u6b64\uff0c\u521b\u5efa\u6216\u67e5\u627e\u4e00\u4e2a\u5408\u9002\u7684\u4f8b\u5b50\u5de5\u7a0b\uff0c\u7136\u540e[\u5bfc\u5165](/zh/developing/import)\u3002\n\n\u7136\u540e\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u624b\u52a8\u6dfb\u52a0 `Dockerfile` \u548c `Jenkinsfile` \u3002\u4f60\u53ef\u4ee5\u4ece[\u5f53\u524d\u6784\u5efa\u5305\u6587\u4ef6\u5939](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/tree/master/packs)\u5f00\u59cb \u2014\u2014 \u4f7f\u7528\u76f8\u4f3c\u7684\u8bed\u8a00\u6216\u6846\u67b6\u3002\n\n\u5982\u679c\u4f60\u7684\u6784\u5efa\u5305\u4f7f\u7528\u4e86 [pod \u6a21\u677f](/zh/architecture/pod-templates) \u4e2d\u4e0d\u5b58\u5728\u7684\u6784\u5efa\u5de5\u5177\uff0c\u4f60\u9700\u8981[\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684 pod \u6a21\u677f](/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/#submitting-new-pod-templates)\uff0c\u8fd8\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u65b0\u7684\u6784\u5efa\u5bb9\u5668\u666f\u8c61\u3002\n\n\u4e00\u65e6\u4f60\u6709\u4e86 pod \u6a21\u677f\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f8b\u5982\u4f60\u7684 `Jenkinsfile` \u4e2d\u5f15\u7528\u5230\u7684 `jenkins-foo` \uff1a\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-foo\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('foo') {\n            sh \"foo deploy\"\n          }\n```\n\n\u4e00\u65e6\u4f60\u7684 `Jenkinsfile` \u53ef\u4ee5\u5728\u4f60\u7684\u793a\u4f8b\u5de5\u7a0b\u4e3a\u4f60\u7684\u8bed\u8a00\u5b9e\u73b0 CI/CD \u7684\u8bdd\uff0c\u6211\u4eec\u56e0\u8be5\u628a `Dockerfile`, `Jenkinsfile` \u548c charts \u6587\u4ef6\u5939\u62f7\u8d1d\u5230\u4f60\u7684\u6d3e\u751f [jenkins-x/draft-packs \u4ed3\u5e93](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes) \u4e2d\u3002\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u628a\u4ed6\u4eec\u6dfb\u52a0\u5230\u6784\u5efa\u5305\u7684\u672c\u5730\u5e93 ` ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs` \u4e2d\u6765\u5c1d\u8bd5\u3002\n\n\u4f8b\u5982\uff1a\n\n```sh\nexport PACK=\"foo\"\nmkdir ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\ncp Dockerfile Jenkinsfile  ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK\n\n# the charts will be in some folder charts/somefoo\ncp -r charts/somefoo ~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/$PACK/charts\n```\n\n\u5f53\u4f60\u7684\u6784\u5efa\u5305\u5728 `~/.jx/draft/packs/github.com/jenkins-x/draft-packs/packs/` \u6587\u4ef6\u5939\u4e2d\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 [jx import](/commands/jx_import/) \u6765\u5bfc\u5165\u5de5\u7a0b\uff0c\u4f7f\u7528\u7f16\u7a0b\u8bed\u8a00\u6765\u68c0\u6d4b\u5e76\u67e5\u627e\u6700\u5408\u9002\u7684\u6784\u5efa\u5305\u3002\u5982\u679c\u4f60\u7684\u6784\u5efa\u5305\u81ea\u5b9a\u4e49\u68c0\u6d4b\u903b\u8f91\u7684\u8bdd\uff0c\u8bf7\u8ba9\u6211\u4eec\u6307\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5e2e\u52a9\u6539\u8fdb [jx import](/commands/jx_import/) \u4f7f\u5f97\u5728\u4f60\u7684\u6784\u5efa\u5305\u4e0a\u505a\u7684\u66f4\u597d\u3002\u4f8b\u5982\uff1a\u6211\u4eec\u6709\u4e00\u4e9b\u81ea\u5b9a\u4e49\u903b\u8f91\u66f4\u597d\u5730\u5904\u7406 [maven \u548c Gradle](https://github.com/jenkins-x/jx/blob/master/pkg/jx/cmd/import.go#L383-L397)\u3002\n\n\u5982\u679c\u4f60\u9700\u8981\u4efb\u4f55\u5e2e\u52a9 [\u8bf7\u52a0\u5165\u793e\u533a](/zh/community/) \u3002",
            "content/zh/docs/managing-jx/common-tasks/config.md": "---\ntitle: \u914d\u7f6e\nlinktitle: \u914d\u7f6e\ndescription: \u81ea\u5b9a\u4e49\u4f60\u7684 Jenkins X \u5b89\u88c5\ndate: 2018-07-20\npublishdate: 2018-07-20\nlastmod: 2018-07-20\ncategories: [getting started]\nkeywords: [install,kubernetes]\n---\n\nJenkins X \u5e94\u8be5\u4e3a\u4f60\u7684\u4e91\u670d\u52a1\u5546\u63d0\u4f9b\u9ed8\u8ba4\u53ef\u7528\u7684\u914d\u7f6e\u3002\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u4f7f\u7528 AWS \u6216 EKS\uff0cJenkins X \u81ea\u52a8\u5730\u4f7f\u7528 ECR\u3002\n\n\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539 Jenkins X \u4f7f\u7528\u7684 helm charts \u7684\u914d\u7f6e\u3002\n\n\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u9700\u8981\u5728\u8fd0\u884c\u547d\u4ee4 [jx create cluster](/commands/jx_create_cluster/) \u6216 [jx install](/commands/deprecation/) \u7684\u76ee\u5f55\u4e0b\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6 `myvalues.yaml` \u3002\n\n\u7136\u540e\uff0c\u8fd9\u4e2a YAML \u6587\u4ef6\u53ef\u4ee5\u8986\u76d6 Jenkins X \u4e2d\u7684\u4efb\u4f55 charts \u4e2d\u7684 `values.yaml` \u6587\u4ef6\u3002\n\n## Nexus\n\n\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u5e0c\u671b\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u7981\u7528 Nexus\uff0c\u800c\u4f7f\u7528\u4e0d\u540c\u4e3b\u673a\u4e0a\u7684\u4e00\u4e2a\u72ec\u7acb\u7684 Nexus\uff0c\u90a3\u4e48\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `myvalues.yaml` \u4e2d\u7684\u670d\u52a1\u94fe\u63a5\u6765\u66ff\u4ee3\uff1a\n\n```yaml\nnexus:\n  enabled: false\nnexusServiceLink:\n  enabled: true\n  externalName: \"nexus.jx.svc.cluster.local\"\n```\n\n\u8981\u7981\u7528\u5e76\u4f7f\u7528 chart museum \u7684\u670d\u52a1\u94fe\u63a5\u7684\u8bdd\u6dfb\u52a0\uff1a\n\n```yaml\nchartmuseum:\n  enabled: false\nchartmuseumServiceLink:\n  enabled: true\n  externalName: \"jenkins-x-chartmuseum.jx.svc.cluster.local\"\n```\n\n## Jenkins \u955c\u50cf\n\nJenkins X \u4e2d\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u7684 Jenkins docker \u955c\u50cf [jenkinsxio/jenkinsx](https://hub.docker.com/r/jenkinsxio/jenkinsx/)\uff0c\u628a\u6211\u4eec\u6240\u9700\u8981\u7684\u6240\u6709\u63d2\u4ef6\u5305\u542b\u5728\u91cc\u9762\u3002\n\n\u5982\u679c\u4f60\u60f3\u6dfb\u52a0\u81ea\u5df1\u7684\u63d2\u4ef6\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6211\u4eec\u7684\u57fa\u7840\u955c\u50cf\u521b\u5efa\u4e00\u4e2a\u4f60\u81ea\u5df1\u7684 Dockerfile \u548c\u955c\u50cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n```dockerfile\n# Dockerfile for adding plugins to Jenkins X\nFROM jenkinsxio/jenkinsx:latest\n\nCOPY plugins.txt /usr/share/jenkins/ref/openshift-plugins.txt\nRUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/openshift-plugins.txt\n```\n\u7136\u540e\u4ee5\u4e0b\u9762\u7684\u5f62\u5f0f\u5c06\u4f60\u6240\u6709\u81ea\u5b9a\u4e49\u63d2\u4ef6\u653e\u5230 `plugins.txt`\uff1a\n\n```text\nmyplugin:1.2.3\nanotherplugin:4.5.6\n```\n\n\u4e00\u65e6\u4f60\u901a\u8fc7 CI/CD \u6784\u5efa\u548c\u53d1\u5e03\u4e86\u4f60\u7684\u955c\u50cf\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u5b89\u88c5 Jenkins X \u65f6\u4f7f\u7528\u5b83\uff1a\n\n\u4e3a\u4e86\u7528\u4f60\u81ea\u5b9a\u4e49\u7684\u955c\u50cf\u914d\u7f6e Jenkins X \uff0c\u4f60\u53ef\u4ee5\u5728 `myvalues.yaml` \u6587\u4ef6\u4e2d\u6307\u5b9a\u4f60\u7684 Jenkins \u955c\u50cf\uff1a\n\n```yaml\njenkins:\n  Master:\n    Image: \"acme/my-jenkinsx\"\n    ImageTag: \"1.2.3\"\n```\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\u7684\u4f8b\u5b50 [jenkins-x/jenkins-x-openshift-image](https://github.com/jenkins-x/jenkins-x-openshift-image)\uff0c\u4f60\u53ef\u4ee5\u4ee5\u5b83\u4e3a\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Jenkins \u955c\u50cf\u7528\u6765\u5728 OpenShift \u4e0a\u4f7f\u7528 Jenkins X \u65f6\u589e\u52a0 OpenShift \u7279\u5b9a\u7684\u63d2\u4ef6\u548c\u914d\u7f6e\u3002\n\n## Docker Registry\n\nWe try and use the best defaults for each platform for the Docker Registry; e.g. using ECR on AWS.\n\n\u7136\u800c\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u6267\u884c\u547d\u4ee4 [jx create cluster](/commands/jx_create_cluster/) \u6216 [jx install](/commands/deprecation/) \u65f6\uff0c\u901a\u8fc7\u9009\u9879 `--docker-registry` \u6765\u6307\u5b9a\u3002\n\n\u4f8b\u5982\uff1a\n\n```sh\njx create cluster gke --docker-registry eu.gcr.io\n```\n\n\u4f46\u662f\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e0d\u540c\u7684 Docker Registry \u7684\u8bdd\uff0c\u4f60\u53ef\u80fd\u9700\u8981[\u4fee\u6539 secret \u624d\u80fd\u8fde\u63a5\u5230 docker](/docs/reference/components/docker-registry/#update-the-config-json-secret)\u3002",
            "content/zh/docs/managing-jx/common-tasks/create-custom-builder.md": "---\ntitle: \u521b\u5efa\u81ea\u5b9a\u4e49 Builder\nlinktitle: \u521b\u5efa\u81ea\u5b9a\u4e49 Builder\ndescription: \u5982\u4f55\u4e3a Jenkins X \u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49 Builder\ndate: 2018-09-22\npublishdate: 2018-09-22\ncategories: [getting started]\nkeywords: [install,builder]\n---\n\n\u5728 Jenkins X \u4e2d\uff0c\u53ef\u4ee5\u521b\u5efa\u5b57\u6bb5\u81ea\u5b9a\u4e49\u7684 Builder \uff08\u4e5f\u5c31\u662f [POD templates](https://github.com/jenkinsci/kubernetes-plugin)\uff09\u6216\u8986\u76d6\u5df2\u6709\u7684\u3002\u4f60\u53ea\u9700\u8981\u57fa\u4e8e [builder-base](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common)\u3002\n\n## \u4ece\u96f6\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49 Builder\n\n### Builder \u955c\u50cf\n\n\u9996\u5148\uff0c\u60a8\u9700\u8981\u4e3a Builder \u521b\u5efa\u4e00\u4e2a docker \u955c\u50cf\u3002\u4ece `Dockerfile` \u5f00\u59cb\u7684\u4e00\u4e2a\u5b9e\u4f8b\u53ef\u80fd\u7c7b\u4f3c\u4e8e\uff1a\n\n```dockerfile\nFROM jenkinsxio/builder-base:latest\n\n# Install your tools and libraries\nRUN yum install -y gcc openssl-devel\n\nCMD [\"gcc\"]\n```\n\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u5e76\u53d1\u5e03\u8fd9\u4e2a\u955c\u50cf\u5230\u60a8\u7684 registry\uff1a\n\n```sh\nexport BUILDER_IMAGE=<YOUR_REGISTRY>/<YOUR_BUILDER_IMAGE>:<VERSION>\ndocker build -t ${BUILDER_IMAGE} .\ndocker push ${BUILDER_IMAGE}\n```\n\n\u522b\u62c5\u5fc3\uff0c\u5f53\u65b0\u7684\u955c\u50cf\u9700\u8981\u6784\u5efa\u65f6\uff0c\u60a8\u65e0\u9700\u6bcf\u6b21\u624b\u52a8\u6267\u884c\u8fd9\u4e9b\u6b65\u9aa4\u3002Jenkins X \u53ef\u4ee5\u4e3a\u60a8\u7ba1\u7406\u8fd9\u4e9b\u3002\u60a8\u53ea\u9700\u8981\u628a `Dockerfile` \u63a8\u9001\u5230\u7c7b\u4f3c\u4e8e[\u8fd9\u4e2a](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-go)\u4ee3\u7801\u4ed3\u5e93\u4e2d\u3002\u7136\u540e\uff0c\u6839\u636e\u60a8\u7684\u7ec4\u7ec7\u540d\u79f0\u6765\u8c03\u6574 `Jenkinsfile` \uff0c\u5e76\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5bfc\u5165 Jenkins X \u5e73\u53f0\uff1a\n\n```sh\njx import --url <REPOSITORY_URL>\n```\n\n\u4e4b\u540e\uff0c\u60a8\u6bcf\u6b21\u63a8\u9001\u4e00\u4e2a\u53d8\u66f4\uff0cJenkins X \u5c06\u4f1a\u81ea\u52a8\u5730\u6784\u5efa\u548c\u53d1\u5e03\u955c\u50cf\u3002\n\n### \u5b89\u88c5 Builder\n\n\u5f53\u60a8\u5b89\u88c5\u6216\u8005\u5347\u7ea7 Jenkins X \u65f6\u5c31\u53ef\u4ee5\u5b89\u88c5\u60a8\u7684 Builder \u4e86\u3002\n\n\u5728\u60a8\u7684 `~/.jx/` \u76ee\u5f55\u4e0b\u521b\u5efa\u6587\u4ef6  `myvalues.yaml` \u5e76\u5199\u5165\u4e0b\u9762\u5185\u5bb9\uff1a\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      MyBuilder:\n        Name: mybuilder\n        Label: jenkins-mybuilder\n        volumes:\n        - type: Secret\n          secretName: jenkins-docker-cfg\n          mountPath: /home/jenkins/.docker\n        EnvVars:\n          JENKINS_URL: http://jenkins:8080\n          GIT_COMMITTER_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_EMAIL: jenkins-x@googlegroups.com\n          GIT_AUTHOR_NAME: jenkins-x-bot\n          GIT_COMMITTER_NAME: jenkins-x-bot\n          XDG_CONFIG_HOME: /home/jenkins\n          DOCKER_CONFIG: /home/jenkins/.docker/\n        ServiceAccount: jenkins\n        Containers:\n          Jnlp:\n            Image: jenkinsci/jnlp-slave:3.14-1\n            RequestCpu: \"100m\"\n            RequestMemory: \"128Mi\"\n            Args: '${computer.jnlpmac} ${computer.name}'\n          Dlang:\n            Image: <YOUR_BUILDER_IMAGE>\n            Privileged: true\n            RequestCpu: \"400m\"\n            RequestMemory: \"512Mi\"\n            LimitCpu: \"1\"\n            LimitMemory: \"1024Mi\"\n            Command: \"/bin/sh -c\"\n            Args: \"cat\"\n            Tty: true\n```\n\n\u6839\u636e\u9700\u8981\u66ff\u6362 Builder \u540d\u79f0\u548c\u955c\u50cf\u3002\n\n\u60a8\u53ef\u4ee5\u7ee7\u7eed\u5b89\u88c5 Jenkins X \uff0c\u7136\u540e Builder \u5c06\u4f1a\u81ea\u52a8\u6dfb\u52a0\u5230\u5e73\u53f0\u3002\n\n### \u4f7f\u7528 Builder\n\n\u73b0\u5728\uff0c\u60a8\u7684 Builder \u5df2\u7ecf\u5728 Jenkins \u4e2d\u5b89\u88c5\u4e86\uff0c\u60a8\u53ef\u4ee5\u5728 `Jenkinsfile` \u4e2d\u8f7b\u677e\u5730\u5f15\u7528\uff1a\n\n```Groovy\npipeline {\n    agent {\n        label \"jenkins-mybuilder\"\n    }\n    stages {\n      stage('Build') {\n        when {\n          branch 'master'\n        }\n        steps {\n          container('mybuilder') {\n              // your steps\n          }\n        }\n      }\n    }\n    post {\n        always {\n            cleanWs()\n        }\n    }\n}\n```\n\n## \u8986\u76d6\u5df2\u6709\u7684 Builder\n\nJenkins X \u81ea\u5e26\u4e86\u5f88\u591a[\u9884\u5b89\u88c5\u7684 Builder](https://raw.githubusercontent.com/jenkins-x/jenkins-x-platform/master/values.yaml)\uff0c\u5728\u5b89\u88c5\u6216\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8986\u76d6\u3002\n\n\u60a8\u53ea\u9700\u8981\u57fa\u4e8e[\u57fa\u7840 Builder](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common) \u955c\u50cf\u6216\u8005[Builder \u955c\u50cf](https://hub.docker.com/u/jenkinsxio/) \u81ea\u5b9a\u4e49\u3002\u5728\u4e0a\u9762\u67e5\u770b\u7ec6\u8282\u3002\n\n\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u76ee\u5f55 `~/.jx/` \u4e2d\u521b\u5efa\u6587\u4ef6 `myvalues.yaml` \uff0c\u5e76\u5199\u5165\u4e00\u4e0b\u5185\u5bb9\uff1a\n\n```yaml\njenkins:\n  Agent:\n    PodTemplates:\n      Maven:\n        Containers:\n          Maven:\n            Image: <YOUR_REGISTRY>/<YOUR_MAVEN_BUILDER_IMAGE>:<VERSION>\n      Nodejs:\n        Containers:\n          Nodejs:\n            Image: <YOUR_REGISTRY>/<YOUR_NODEJS_BUILDER_IMAGE>:<VERSION>\n      Go:\n        Containers:\n          Go:\n            Image: <YOUR_REGISTRY>/<YOUR_GO_BUILDER_IMAGE>:<VERSION>\n```\n\n\u60a8\u53ef\u4ee5\u7ee7\u7eed\u5b89\u88c5 Jenkins X\uff0c\u8fd9\u4e9b Builder \u5c06\u4f1a\u81ea\u52a8\u5730\u6dfb\u52a0\u5230\u5e73\u53f0\u3002\n",
            "content/zh/docs/managing-jx/common-tasks/docker-registry.md": "---\ntitle: Docker Registry\nlinktitle: Docker Registry\ndescription: \u914d\u7f6e\u4f60\u7684 docker registry\n---\n\n\u4e3a\u4e86\u80fd\u591f\u521b\u5efa\u548c\u53d1\u5e03 docker \u955c\u50cf\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528 Docker Registry\u3002\n\n\u9ed8\u8ba4\uff0cJenkins X \u4f1a\u5728\u7cfb\u7edf\u547d\u540d\u7a7a\u95f4\u4e2d\u5e26\u4e00\u4e2a Docker Registry\uff0c\u4ee5\u53ca Jenkins \u548c Nexus\u3002\u5f53 Docker Registry \u8fd0\u884c\u5728\u4f60\u7684 Kubernetes \u96c6\u7fa4\u4e2d\uff0c\u5b83\u4f1a\u5728\u96c6\u7fa4\u5185\u90e8\u4f7f\u7528\uff0c\u5b83\u5f88\u96be\u901a\u8fc7\u5e26\u6709\u81ea\u7b7e\u540d\u8bc1\u4e66\u7684 HTTPS \u66b4\u9732 \u2014\u2014 \u56e0\u6b64\uff0c\u5728\u4f60\u7684 Kubernetes \u96c6\u7fa4\u670d\u52a1\u4e2d\uff0c\u6211\u4eec\u9ed8\u8ba4\u4f7f\u7528 insecure \u7684 Docker Registry\u3002\n\n## \u4f7f\u7528\u4e0d\u540c\u7684 Docker Registry\n\n\u5982\u679c\u4f60\u4f7f\u7528\u516c\u6709\u4e91\u7684\u8bdd\uff0c\u53ef\u80fd\u5e0c\u671b\u5229\u7528\u4f60\u7684\u4e91\u670d\u52a1\u5546\u7684 Docker Registry\uff1b\u6216\u8005\u590d\u7528\u4f60\u5df2\u6709\u7684 Docker Registry\u3002\n\n\u4e3a\u4e86\u6307\u5b9a Docker Registry \u7684\u4e3b\u673a\u3001\u7aef\u53e3\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 Jenkins \u63a7\u5236\u53f0\uff1a\n\n```sh\njx console\n```\n\n\u7136\u540e\uff0c\u5b9a\u4f4d\u5230 `\u7ba1\u7406 Jenkins -> \u7cfb\u7edf\u914d\u7f6e`\uff0c\u5e76\u4fee\u6539\u73af\u5883\u53d8\u91cf `DOCKER_REGISTRY` \u6307\u5411\u4f60\u9009\u62e9\u7684 Docker Registry\u3002\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u628a\u4e0b\u9762\u7684\u5185\u5bb9\u6dfb\u52a0\u5230\u4f60\u7684\u81ea\u5b9a\u4e49 Jenkins X \u5e73\u53f0 helm charts \u7684`values.yaml` \u6587\u4ef6\u4e2d\uff1a\n\n```yaml\njenkins:\n  Servers:\n    Global:\n      EnvVars:\n        DOCKER_REGISTRY: \"gcr.io\"\n```\n\n## \u66f4\u65b0 config.json\n\n\u4e0b\u4e00\u6b65\uff0c\u4f60\u9700\u8981\u4e3a docker \u66f4\u65b0 `config.json` \u4e2d\u7684\u8ba4\u8bc1\u3002\n\n\u5982\u679c\u4e3a\u4f60\u7684 Docker Registry \u521b\u5efa\u4e00\u4e2a `config.json` \u6587\u4ef6\uff0c\u4f8b\u5982\uff1aGoogle \u4e91\u7684 GCR\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\uff1a\n\n```json\n{\n    \"credHelpers\": {\n        \"gcr.io\": \"gcloud\",\n        \"us.gcr.io\": \"gcloud\",\n        \"eu.gcr.io\": \"gcloud\",\n        \"asia.gcr.io\": \"gcloud\",\n        \"staging-k8s.gcr.io\": \"gcloud\"\n    }\n}\n```\n\n\u5bf9\u4e8e AWS \u5219\u50cf\uff1a\n\n```json\n{\n\t\"credsStore\": \"ecr-login\"\n}\n```\n\n\u7136\u540e\u9700\u8981\u66f4\u65b0\u51ed\u636e `jenkins-docker-cfg` \uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c:\n\n```sh\nkubectl delete secret jenkins-docker-cfg\nkubectl create secret generic jenkins-docker-cfg --from-file=./config.json\n```\n\n## \u4f7f\u7528 Docker Hub\n\n\u5982\u679c\u4f60\u60f3\u8981\u53d1\u5e03\u4f60\u7684\u955c\u50cf\u5230 Docker Hub \u5f53\u4e2d \uff0c\u5219\u9700\u8981\u4fee\u6539\u4f60\u7684 `config.json` \u50cf\u4e0b\u9762\u90a3\u6837:\n\n```json\n{\n    \"auths\": {\n        \"https://index.docker.io/v1/\": {\n            \"auth\": \"MyDockerHubToken\",\n            \"email\": \"myemail@acme.com\"\n        }\n    }\n}\n```\n\n### \u4e3a\u4f60\u7684 registry \u6302\u8f7d\u51ed\u8bc1\n\n\u4f60\u7684 docker registry \u9700\u8981\u5c06\u51ed\u8bc1\u6302\u8f7d\u5230 [Pod \u6a21\u677f](/zh/docs/resources/guides/managing-jx/common-tasks/pod-templates/)\u5f53\u4e2d\u3002\n\n",
            "content/zh/docs/managing-jx/common-tasks/git.md": "---\ntitle: Git \u670d\u52a1\u5668\nlinktitle: Git \u670d\u52a1\u5668\ndescription: \u4f7f\u7528\u4e0d\u540c\u7684 Git \u670d\u52a1\u5668\n---\n\n\nJenkins X \u9ed8\u8ba4\u4f7f\u7528 [GitHub](https://github.com/)\uff0c\u7528\u4e8e\u5f00\u6e90\u9879\u76ee\u7684\u514d\u8d39\u516c\u5171 git \u6258\u7ba1\u65b9\u6848\u3002\n\n\u7136\u800c\uff0c\u5728\u4f01\u4e1a\u4e2d\u5de5\u4f5c\u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528\u4e0d\u540c\u7684 git \u670d\u52a1\u5668\u3002\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7 [jx get git](/commands/jx_get_git/) \u5217\u51fa\u914d\u7f6e\u597d\u7684 git \u670d\u52a1\u5668\u3002\n\n```sh\njx get git\n```\n\n## \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684 git \u670d\u52a1\u5546\n\n\u5982\u679c\u4f60\u5728\u67d0\u4e2a\u5730\u65b9\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a git \u670d\u52a1\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 [jx create git server](/commands/jx_create_git_server/) \u628a\u5b83\u6dfb\u52a0\u5230 Jenkins X\u4e2d\uff1a\n\n```sh\njx create git server gitKind someURL\n```\n\n\u8fd9\u91cc `gitKind` \u662f\u67d0\u4e2a git \u670d\u52a1\u5546\uff0c\u50cf `github, gitea, gitlab, bitbucket`\n\n## \u4f01\u4e1a GitHub\n\n\u8981\u6dfb\u52a0\u4e00\u4e2a\u4f01\u4e1a GitHub \u670d\u52a1\uff0c\u5c1d\u8bd5\uff1a\n\n```sh\njx create git server github https://github.foo.com -n GHE\n```\n\n\u8fd9\u91cc `-n` \u662f git \u670d\u52a1\u7684\u540d\u79f0\u3002\n\n## BitBucket\n\n\u8981\u6dfb\u52a0 BitBucket \uff0c\u5c1d\u8bd5\uff1a\n\n```sh\njx create git server bitbucket -n BitBucket https://bitbucket.org\n```\n\n### \u6dfb\u52a0\u7528\u6237 tokens\n\n\u4e3a\u4e86\u6dfb\u52a0\u4e00\u4e2a git \u670d\u52a1\uff0c\u4f60\u9700\u8981\u901a\u8fc7 [jx create git token](/commands/jx_create_git_token/) \u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u540d\u548c API token\uff1a\n\n```sh\njx create git token -n myProviderName myUserName\n```\n\n\u7136\u540e\uff0c\u5c31\u4f1a\u63d0\u793a\u4f60\u8f93\u5165 API token\n\n### Kubernetes \u6258\u7ba1\u7684 git \u670d\u52a1\n\n\u4f60\u53ef\u4ee5\u5b89\u88c5 git \u670d\u52a1\u5230\u8fd0\u884c Jenkins X \u7684 Kubernetes \u96c6\u7fa4\u4e2d\u3002\n\n\u4f8b\u5982\uff1a\u6709\u4e00\u4e2a [gitea](https://gitea.io/en-us/) \u7684\u63d2\u4ef6\uff0c\u53ef\u4ee5\u8ba9\u4f60\u628a gitea \u4f5c\u4e3a Jenkins X \u5b89\u88c5\u7684\u4e00\u90e8\u5206\u3002\n\n\u8981\u5728 Jenkins X \u4e2d\u4f7f\u7528 [gitea](https://gitea.io/en-us/)\uff0c\u4f60\u9700\u8981\u5728\u5b89\u88c5 Jenkins X \u4e4b\u524d\u542f\u7528 `gitea` \u63d2\u4ef6\uff1a\n\n```sh\njx edit addon gitea -e true\n```\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7 [jx get addons](/commands/jx_get_addons/) \u67e5\u770b\u542f\u7528\u7684\u63d2\u4ef6\uff1a\n\n```sh\njx get addons\n```\n\n\u73b0\u5728\uff0c\u5f53\u4f60 [\u5b89\u88c5 Jenkins X](/zh/docs/getting-started/) \u65f6\uff0c\u4e5f\u4f1a\u5b89\u88c5 `gitea` \u63d2\u4ef6\u3002\n\n\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\uff0cJenkins X \u9700\u8981\u4e3a\u4e00\u4e2a\u73af\u5883\u6216\u8005\u65b0\u9879\u76ee\u521b\u5efa\u4e00\u4e2a git \u5e93\u65f6\uff0cgitea \u670d\u52a1\u90fd\u4f1a\u51fa\u73b0\u5728\u9009\u62e9\u5217\u8868\u4e2d\u3002\n\n#### gitea \u5df2\u77e5\u7684\u9650\u5236\n\n\u5728\u5199\u672c\u6587\u65f6\uff0c[gitea plugin for Jenkins](https://issues.jenkins-ci.org/browse/JENKINS-50459)\u4e0d\u80fd\u591f\u6b63\u786e\u5730\u66f4\u65b0 Pull Request \u548c git \u63d0\u4ea4\u6784\u5efa\u72b6\u6001\uff0c\u8fd9\u4f1a\u6253\u65ad GitOps \u5347\u7ea7\u6d41\u6c34\u7ebf\u3002\u53ef\u4ee5\u624b\u5de5\u5ba1\u6838\u6765\u5347\u7ea7\uff1b\u4f46\u662f\uff0c\u6d41\u6c34\u7ebf\u4f1a\u62a5\u544a\u5931\u8d25\u3002\n\n\u53e6\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7531 `jx` \u5728 `gitea` \u521b\u5efa\u7684\u65b0\u9879\u76ee\uff0c\u65e0\u6cd5\u4f7f\u5f97 [\u5728 Pull Requests \u4e2d\u5408\u5e76\u6309\u94ae\u53ef\u7528](https://github.com/go-gitea/go-sdk/issues/100)\u3002\u8981\u4f7f\u5f97\u53ef\u7528\u7684\u8bdd\uff0c\u5f53\u4e00\u4e2a\u9879\u76ee\u5728 GitHub \u4e2d\u521b\u5efa\u540e\uff0c\u4f60\u5230\u4ed3\u5e93\u7684 `Settings` \u9875\u9762\uff0c\u5728 `gitea` \u7684 web \u63a7\u5236\u53f0\u4e2d\uff0c\u542f\u7528\u5408\u5e76\u6309\u94ae\u3002\n\n",
            "content/zh/docs/managing-jx/common-tasks/install-on-cluster-what-happens.md": "---\ntitle: \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\nlinktitle: \u5b89\u88c5\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\ndescription: \u5b89\u88c5 Jenkins X \u65f6\u7a76\u7adf\u505a\u4e86\u4ec0\u4e48\ndate: 2018-07-10\npublishdate: 2018-07-10\nlastmod: 2018-07-10\ncategories: [getting started]\nkeywords: [install,kubernetes]\n---\n\nJenkins X \u547d\u4ee4\u884c\u5728\u5b89\u88c5 Jenkins X \u5e73\u53f0\u65f6\u4f1a\u505a\u5982\u4e0b\u4e8b\u60c5\uff1a\n\n## \u5b89\u88c5\u4e8c\u8fdb\u5236\u5ba2\u6237\u7aef\u6765\u7ba1\u7406\u4f60\u7684\u96c6\u7fa4\n\n{{< alert >}}\n\u5982\u679c\u60a8\u8fd0\u884c\u5728 Mac OS X \u4e0a\uff0cJenkins X \u4f1a\u4f7f\u7528 `Homebrew` \u6765\u5b89\u88c5\u4e0d\u540c\u7684\u547d\u4ee4\u884c\u3002\u4e0d\u5b58\u5728\u5c31\u4f1a\u5b89\u88c5\u3002\n{{< /alert >}}\n\n### \u5b89\u88c5 kubectl\n\n[kubectl](https://kubernetes.io/docs/reference/kubectl/kubectl/) \u662f Kubernetes \u7684\u547d\u4ee4\u884c\u3002\u5b83\u5141\u8bb8\u60a8\u548c\u60a8\u7684 Kubernetes \u96c6\u7fa4\u901a\u8fc7 API server \u4ea4\u4e92\u3002\n\n### \u5b89\u88c5 Helm\n\nJenkins X \u5c06\u4f1a\u5b89\u88c5 [helm](https://github.com/kubernetes/helm) \u5ba2\u6237\u7aef - (\u53ef\u80fd\u662f  helm *2.x* \u6216 helm *3*)\uff0c\u5982\u679c\u5b83\u4e0d\u5728\u60a8\u7684\u73af\u5883\u53d8\u91cf\u91cc\u7684\u8bdd\u3002Helm \u662f\u7528\u4e8e\u6253\u5305 Kubernetes \u4e2d\u7684\u5e94\u7528\u6216\u8d44\u6e90\uff08\u4e5f\u53eb\u505a charts\uff09\uff0c\u5e76\u8fc5\u901f\u5730\u6210\u4e3a\u6807\u51c6\u3002\n\n### \u5b89\u88c5\u4e91\u63d0\u4f9b\u5546\u7684\u547d\u4ee4\u884c\n\n\u5982\u679c\u60a8\u5728\u4f7f\u7528\u516c\u6709\u4e91\uff0c\u4f1a\u6709\u76f8\u5173\u7684\u547d\u4ee4\u884c\u6765\u4e0e\u4e4b\u4ea4\u4e92\u3002\u5f53\u901a\u8fc7 [jx create cluster](/docs/getting-started/setup/create-cluster/) \u547d\u4ee4\u6765\u5b89\u88c5\u65f6\uff0c\u60a8\u7684\u4e91\u63d0\u4f9b\u5546\u76f8\u5173\u7684\u4e8c\u8fdb\u5236\u5982\u679c\u4e0d\u5728\u73af\u5883\u53d8\u91cf\u91cc\u7684\u8bdd\uff0c\u4e5f\u4f1a\u88ab\u5b89\u88c5\u3002\n\n- AKS \u96c6\u7fa4\uff08Azure\uff09\u7684 `az`\n- GKE \u96c6\u7fa4 (Google Cloud) \u7684 `gcloud` for GKE cluster (Google Cloud)\n- AWS \u96c6\u7fa4 (Amazon Web Services) \u7684 `kops`\n- [AWS EKS](https://aws.amazon.com/eks/) \u96c6\u7fa4\u7684 `eksctl`\n- OKS \u96c6\u7fa4 (Oracle Cloud) \u7684 `oci`\n\n\u5982\u679c\u60a8\u60f3\u8981\u5728\u672c\u5730\u901a\u8fc7 minikube \u6216 minishift \u8fd0\u884c Jenkins X \u7684\u8bdd\uff0c\u4e0b\u9762\u7684\u4e8c\u8fdb\u5236\u4f1a\u88ab\u6dfb\u52a0\uff1a\n\n- \u672c\u5730 minishift (OpenShift) \u96c6\u7fa4 \u7684 `oc` (OpenShift CLI) \u548c `minishift`\n- \u672c\u5730 minikube \u96c6\u7fa4\u7684 `minikube`\n\n\u6700\u540e\uff0cJenkins X \u5c06\u4f1a\u6839\u636e\u9700\u8981\u5b89\u88c5 VM \u9a71\u52a8\uff0c\u901a\u5e38 Mac OS X \u4e0a\u662f `xhyve` \u6216 Windows \u4e0a\u662f `hyperv` \u3002\u5176\u4ed6\u9a71\u52a8\u5219\u9700\u8981\u624b\u52a8\u5b89\u88c5\u3002\n\n## \u521b\u5efa Kubernetes \u96c6\u7fa4\n\n\u4e4b\u540e\uff0c\u96c6\u7fa4\u4f1a\u901a\u8fc7\u4e91\u63d0\u4f9b\u5546\u7684\u547d\u4ee4\u6765\u521b\u5efa\uff08\u4f8b\u5982\uff1aAzure \u7684 `az aks create` \u547d\u4ee4\uff09\u3002\n\n## \u8bbe\u7f6e Jenkins X \u5e73\u53f0\n\n### \u521b\u5efa Jenkins X \u547d\u540d\u7a7a\u95f4\n\n\u7136\u540e\uff0c\u4f1a\u4e3a Jenkins X \u5e73\u53f0\u521b\u5efa\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u653e Jenkins X \u57fa\u7840\u7ec4\u4ef6\u3002\u9ed8\u8ba4\u4e3a\uff1a*jx*\u3002\n\n### \u5b89\u88c5 Tiller\uff08\u53ef\u9009\uff0c\u53ea\u6709 Helm 2 \u9700\u8981\uff09\n\nTiller\uff0c\u4e5f\u5c31\u662f Helm \u7684\u670d\u52a1\u5668\u7aef\uff0c\u4f1a\u90e8\u7f72\u5230\u547d\u540d\u7a7a\u95f4 *kube-system* \u4e2d\u3002[Helm](https://www.helm.sh/) \u662f Kubernetes \u7684\u5305\u7ba1\u7406\u5668\uff0c\u4e5f\u7528\u4e8e\u90e8\u7f72 Jenkins X \u7684\u5176\u4ed6\u7ec4\u4ef6\u3002\n\n### \u8bbe\u7f6e Ingress \u63a7\u5236\u5668\n\n\u5728 Kubernetes \u96c6\u7fa4\u4e2d\uff0cService \u548c Pod \u7684 IP \u53ea\u80fd\u5728\u96c6\u7fa4\u7f51\u7edc\u4e2d\u8bbf\u95ee\u3002\u4e3a\u4e86\u80fd\u591f\u8bbf\u95ee\u96c6\u7fa4\uff0c\u5fc5\u987b\u8981\u521b\u5efa\u4e00\u4e2a Ingress\u3002Ingress \u662f\u8def\u7531\u5230\u96c6\u7fa4\u5185\u7684 Service \u7684\u89c4\u5219\u96c6\u3002Ingress \u89c4\u5219\u662f\u7531 Kubernetes API \u914d\u7f6e\u5728 Ingress \u8d44\u6e90\u4e2d\uff0c\u800c Ingress Controller \u662f\u5fc5\u8981\u7684\u3002\u6240\u6709\u7684\u8fd9\u4e9b Jenkins X \u90fd\u4f1a\u66ff\u60a8\u505a\u2014\u2014\u4e3a\u4e0b\u9762\u7684 Service \u8bbe\u7f6e\u4e00\u4e2a Ingress Controller \u548c\u76f8\u5173\u8054\u7684\u540e\u7aef Ingress \u89c4\u5219\uff08\u4e00\u65e6\u90e8\u7f72\u5b8c\u540e\uff09\uff1a\n\n- chartmuseum\n- docker-registry\n- jenkins\n- monocular\n- nexus\n\n{{< alert >}}\n\u9ed8\u8ba4\uff0cJenkins X \u5c06\u4f1a\u901a\u8fc7\u57df\u540d *nip.io* \u66b4\u9732 Ingress\uff0c\u5e76\u751f\u6210\u81ea\u7b7e\u540d\u7684\u8bc1\u4e66\u3002\u5f53\u6309\u7167\u5b8c\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4 `jx upgrade ingress --cluster` \u8f7b\u677e\u5730\u4fee\u6539\u4e3a\u60a8\u81ea\u5df1\u7684\u57df\u540d\u548c\u7b7e\u540d\u3002\n{{< /alert >}}\n\n### \u914d\u7f6e git \u4ed3\u5e93\n\nJenkins X \u9700\u8981\u4e00\u4e2a Git \u4ed3\u5e93\u63d0\u4f9b\u5546\uff0c\u4ee5\u4fbf\u80fd\u591f\u63d2\u4ef6\u73af\u5883\u4ed3\u5e93\u3002\u5982\u679c\u60a8\u6ca1\u6709\u63d0\u4f9b\u53c2\u6570 *git-provider-url* \u7684\u5212\uff0c\u9ed8\u8ba4\u4f7f\u7528 GitHub\u3002\u60a8\u9700\u8981\u63d0\u4f9b\u7528\u6237\u540d\u548c Token \u6765\u548c Git \u4ea4\u4e92\uff0c\u5c24\u5176\u662f Jenkins\u3002\n\n## \u521b\u5efa\u7ba1\u7406\u5458\u51ed\u636e\n\nJenkins X \u4e3a Monocular/Nexus/Jenkins \u751f\u6210\u7ba1\u7406\u5458\u5bc6\u7801\u5e76\u4fdd\u5b58\u5230 Secret \u4e2d\u3002\u5f53\u5728 helm \u5b89\u88c5\u7684\u65f6\u5019\u5c31\u4f1a\u53d6\u51fa\u6765\u4f7f\u7528\uff08\u56e0\u6b64\uff0c\u5bc6\u7801\u53ef\u4ee5\u7528\u5728\u6d41\u6c34\u7ebf\u4e2d\uff09\u3002\n\n### \u68c0\u51fa\u4e91\u73af\u5883\u4ed3\u5e93\n\n[\u4e91\u73af\u5883\u4ed3\u5e93](https://github.com/jenkins-x/cloud-environments)\u4fdd\u5b58\u6240\u6709\u7279\u5b9a\u7684\u914d\u7f6e\u4ee5\u53ca\u52a0\u5bc6\u7684 Secret\uff0c\u8fd9\u4e9b\u5c06\u4f1a\u5e94\u7528\u5728\u60a8\u7684 Kubernetes \u96c6\u7fa4\u4e2d\u7684 Jenkins \u5e73\u53f0\u3002\u8fd9\u4e9b Secret \u5c06\u4f1a\u7531 Helm \u5305\u7ba1\u7406\u5668\u6765\u52a0\u89e3\u5bc6\u3002\n\n## \u5b89\u88c5 Jenkins X \u5e73\u53f0\n\n[Jenkins X \u5e73\u53f0](https://github.com/jenkins-x/jenkins-x-platform)\u4fdd\u5b58\u5b89\u88c5\u4e86\u7684\u7ec4\u4ef6\u7684 Helm Chart\uff0c\u7528\u4e8e\u63d0\u4f9b Jenins X \u771f\u6b63\u7684 CD \u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u5305\u62ec\uff1a\n\n- [Jenkins](https://github.com/jenkinsci/jenkins) \u4e00\u4e2a CI/CD \u6d41\u6c34\u7ebf\u65b9\u6848\n- [Nexus](https://www.sonatype.com/nexus-repository-oss) \u4e00\u4e2a\u5236\u54c1\u4ed3\u5e93\n- [ChartMuseum](https://github.com/kubernetes-helm/chartmuseum) \u4e00\u4e2a Helm Chart \u4ed3\u5e93\n- [Monocular](https://github.com/kubernetes-helm/monocular) \u63d0\u4f9b\u4e86\u4e00\u4e2a Web UI \u7528\u4e8e\u641c\u7d22\u548c\u53d1\u73b0\u901a\u8fc7 Jenkins X \u90e8\u7f72\u5230\u60a8\u7684\u96c6\u7fa4\u4e2d\u7684 Chart\u3002\n",
            "content/zh/docs/managing-jx/common-tasks/install-on-cluster.md": "---\ntitle: \u5728 Kubernetes \u4e0a\u5b89\u88c5\nlinktitle: \u5728 Kubernetes \u4e0a\u5b89\u88c5\ndescription: \u5982\u4f55\u5728\u5df2\u6709\u7684 Kubernetes \u96c6\u7fa4\u4e0a\u5b89\u88c5 Jenkins X\ndate: 2018-04-21\npublishdate: 2018-04-21\nlastmod: 2018-04-21\ncategories: [getting started]\nkeywords: [install,kubernetes]\n---\n\nJenkins X \u53ef\u4ee5\u5728 Kubernetes 1.8 \u4ee5\u53ca\u66f4\u9ad8\u7248\u672c\u4e0a\u5b89\u88c5\u3002\u9700\u8981\u7684\u4f9d\u8d56\u6709\uff1a\n\n* RBAC \u662f\u53ef\u7528\u7684\n* \u542f\u7528 docker \u79c1\u6709\u4ed3\u5e93\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u6d41\u6c34\u7ebf\u53ef\u4ee5\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u4f7f\u7528 docker \u4ed3\u5e93\uff08\u901a\u5e38\u4e0d\u662f\u516c\u5171\u7684\u56e0\u6b64\u4e0d\u652f\u6301 https\uff09\u3002\u540e\u7eed\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u4f60\u7684\u6d41\u6c34\u7ebf\u6765\u4f7f\u7528\u5176\u4ed6\u4ed3\u5e93\u3002\n\n### \u901a\u8fc7 kops \u542f\u7528\u79c1\u6709\u4ed3\u5e93\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u662f\u5728 AWS \u73af\u5883\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u4f7f\u7528 [jx create aws](/zh/docs/getting-started/setup/create-cluster/) \u547d\u4ee4\u6765\u5e2e\u4f60\u81ea\u52a8\u5316\u5b8c\u6210\u6240\u6709\u6b65\u9aa4\uff01\n\n\u5982\u679c\u4f60\u662f\u901a\u8fc7 [kops](https://github.com/kubernetes/kops) \u521b\u5efa\u7684 kubernetes \u96c6\u7fa4\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8fd9\u4e48\u505a\uff1a\n\n```sh\nkops edit cluster\n```\n\n\u7136\u540e\uff0c\u786e\u4fdd\u5728 YAML \u6587\u4ef6\u7684\u7ae0\u8282 `spec` \u4e2d\u6709 `docker` \u914d\u7f6e\uff1a\n\n```yaml\n...\nspec:\n  docker:\n    insecureRegistry: 100.64.0.0/10\n    logDriver: \"\"\n```\n\n\u4e0a\u9762\u7684 IP \u8303\u56f4 `100.64.0.0/10` \u662f AWS \u4e0a\u7684\uff0c\u4f46\u4f60\u9700\u8981\u4fee\u6539\u4e3a\u5176\u4ed6 Kubernetes \u96c6\u7fa4\u7684\uff1b\u5b83\u4f9d\u8d56\u4e8e Kubernetes \u670d\u52a1\u7684 IP \u8303\u56f4\u3002\n\n\u4fdd\u5b58\u540e\uff0c\u4f60\u53ef\u4ee5\u53c2\u8003\u4e0b\u9762\u7684\u547d\u4ee4\u8fdb\u884c\u9a8c\u8bc1\uff1a\n\n```sh\nkops get cluster -oyaml\n```\n\n\u7136\u540e\u67e5\u627e `insecureRegistry` \u7ae0\u8282\u3002\n\n\u73b0\u5728\uff0c\u786e\u4fdd\u8fd9\u4e9b\u4fee\u6539\u5728\u4f60\u7684\u96c6\u7fa4\u7c7b\u578b\u4e0a\u662f\u6fc0\u6d3b\u7684\uff1a\n\n```sh\nkops update cluster --yes\nkops rolling-update cluster --yes\n```\n\n\u4f60\u73b0\u5728\u53ef\u4ee5\u7ee7\u7eed\u4e86\uff01\n\n### \u5b89\u88c5 Jenkins X\n\n\u4e3a\u4e86\u5728\u5df2\u6709\u7684 kubernetes \u96c6\u7fa4\u4e0a\u5b89\u88c5 Jenkins X \u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 [jx install](/commands/deprecation/) \uff1a\n\n    jx install\n\n\u5982\u679c\u4f60\u77e5\u9053\u63d0\u4f9b\u5546\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u6765\u6307\u5b9a\u3002\u4f8b\u5982\uff1a\n\n    jx install --provider=aws\n\n",
            "content/zh/docs/managing-jx/common-tasks/manage-via-gitops.md": "---\ntitle: \u901a\u8fc7 GitOps \u7ba1\u7406\nlinktitle: \u901a\u8fc7 GitOps \u7ba1\u7406\ndescription: \u4f7f\u7528 GitOps \u914d\u7f6e\u548c\u5347\u7ea7\u4f60\u7684 Jenkins X \u8bbe\u65bd\ndate: 2016-11-01\npublishdate: 2016-11-01\nlastmod: 2018-04-04\ncategories: [getting started]\nkeywords: [install,kubernetes]\n---\n\n\u6211\u4eec\u63a8\u8350\u4f60\u4f7f\u7528 GitOps \u7ba1\u7406\u4f60\u7684 Jenkins X \u8bbe\u65bd\uff0c\u5347\u7ea7\u5b83\u3001\u914d\u7f6e\u5b83\u3001\u4ee5\u53ca\u6dfb\u52a0\u6216\u79fb\u9664\u6269\u5c55[\u5e94\u7528](/docs/contributing/addons/)\uff0c\u8fd9\u6837\u5bb9\u6613\u5ba1\u8ba1\u8c01\u5728\u4f60\u7684\u8bbe\u65bd\u4e0a\u505a\u4e86\u4ec0\u4e48\u53d8\u66f4\u5e76\u4e14\u5bb9\u6613\u6062\u590d\u574f\u7684\u53d8\u66f4\u3002\n\n\u5f53\u524d\u8fd9\u4ec5\u5728 AWS \u548c Google \u4e91\u53ef\u7528\uff0c\u56e0\u4e3a\u5b83\u8981\u6c42\u6211\u4eec\u7684 vault \u64cd\u4f5c\u5458\uff08\u9700\u8981\u4e91\u5b58\u50a8\u548c KMS \uff09\u5b58\u50a8\u51ed\u636e\uff0c\u800c\u6240\u6709\u5176\u4ed6\u914d\u7f6e\u90fd\u5b58\u50a8\u5728\u5f00\u53d1\u73af\u5883 git \u4ed3\u5e93\u4e2d\u3002\n\n## \u4f7f\u7528 GitOps \u7ba1\u7406 Jenkins X\n\n\u5982\u679c\u4f60\u6b63\u5728\u521b\u5efa\u4e00\u4e2a\u96c6\u7fa4\u6216\u8005\u5728\u5df2\u7ecf\u5b58\u5728\u7684\u96c6\u7fa4\u5b89\u88c5\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u5feb\u901f\u7b80\u4fbf\u7684\u65b9\u6cd5\u6765\u4f7f\u7528 GitOps \u6765\u7ba1\u7406 Jenkins X \u672c\u8eab\u3002\u5b83\u662f `\u2014ng` \uff0c\u4e3a\u4e0b\u4e00\u4ee3 Jenkins X \u800c\u6765\u3002\u5728\u6211\u4eec\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u53d1\u5e03 Jenkins X 2.x \u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u6b64\u529f\u80fd\u6807\u8bb0\u8bbe\u4e3a\u9ed8\u8ba4\u9009\u9879\u3002\n\n\n`\u2014ng` \u6807\u8bb0\u662f\u8fd9\u4e9b\u6807\u8bb0\u7684\u4e00\u4e2a\u522b\u540d\uff1a`\u2014gitops \u2014vault \u2014no-tiller \u2014tekton` \u3002\u6240\u4ee5\u5b83\u8fd8\u9644\u5e26\u4e86\u5bf9 [Jenkins X \u6d41\u6c34\u7ebf](/about/concepts/jenkins-x-pipelines/) - \u57fa\u4e8e Tekton \u7684\u65b0\u5f0f\u4e91\u539f\u751f\u6d41\u6c34\u7ebf\u5f15\u64ce\u7684\u652f\u6301\u3002\n\n\u5982\u679c\u4f60\u4ecd\u7136\u60f3\u8981\u4f7f\u7528Jenkins\u670d\u52a1\u5668\u4f5c\u4e3a Jenkins X \u4e2d\u81ea\u52a8\u5316 CI/CD \u6d41\u6c34\u7ebf\u7684\u6267\u884c\u5f15\u64ce\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 `\u2014gitops \u2014vault` \u4ee3\u66ff\u3002\u4ecd\u8981\u6ce8\u610f\u662f\u7684\u5373\u4f7f\u4f7f\u7528\u4e86 `\u2014ng` \u4ee5\u53ca\u4f7f\u7528\u4e86\u7531 Tekton \u9a71\u52a8\u7684 [Jenkins X \u6d41\u6c34\u7ebf](/about/concepts/jenkins-x-pipelines/),\u4f60\u4ecd\u7136\u9700\u8981\u521b\u5efa\u4f60\u81ea\u5df1\u7684[\u81ea\u5b9a\u4e49 Jenkins \u670d\u52a1\u5668](/docs/resources/guides/managing-jx/common-tasks/custom-jenkins/)\u6765\u8fd0\u884c\u4f20\u7edf\u7684 Jenkins \u4efb\u52a1\u548c\u6d41\u6c34\u7ebf\u3002\n\n\u4e00\u65e6\u4f60\u4f7f\u7528 GitOps \u5b89\u88c5\u4e86 Jenkins X \u6765\u7ba1\u7406\u5f00\u53d1\u73af\u5883\uff0c\u90a3\u4e48\u8868\u660e\u5b89\u88c5\u4e86 Jenkins X \u548c\u5b83\u7684\u9644\u52a0\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f60\u5c06\u4e3a Dev\uff0cStaging\uff0cProduction \u73af\u5883\u83b7\u5f97\u4e00\u4e2a\u989d\u5916\u7684 git \u4ed3\u5e93\u3002\u5b83\u4e5f\u610f\u5473\u7740\u5982\u679c\u4f60\u7528\u4e00\u4e2a\u66f4\u65b0\u547d\u4ee4\u5982 [jx upgrade platform](/commands/deprecation/) \u6216\u901a\u8fc7 [jx add app](http://localhost:1313/commands/jx_add_app/) \u6dfb\u52a0\u3001\u66f4\u65b0\u3001\u5220\u9664\u5e94\u7528\uff0c\u90a3\u4e48\u90a3\u4e9b\u547d\u4ee4\u5c06\u5728\u5f00\u53d1\u73af\u5883\u7684 git \u5b58\u50a8\u5e93\u751f\u6210 Pull Request \uff0c\u5c31\u50cf\u5f53\u4f60\u53d1\u5e03\u65b0\u7248\u672c\u7684\u5fae\u670d\u52a1\u65f6\uff0c promotion \u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\n\n## \u5982\u679c\u51fa\u73b0\u95ee\u9898\n\n\u4e00\u822c\u6765\u8bf4\uff0c\u5f53\u4f7f\u7528 Tekton \u65f6\uff0cJenkins X \u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u81ea\u6211\u5347\u7ea7\u3002\u4f46\u662f\uff0c\u5982\u679c\u5347\u7ea7\u8ba9 Jenkins X \u65e0\u6cd5\u5b9e\u65bd CI/CD \uff0c\u90a3\u4e48\u4f7f\u7528 GitOps \u56de\u9000\u66f4\u6539\u5c06\u4e0d\u8d77\u4f5c\u7528\uff1b\uff09\n\n\u5982\u679c\u4f60\u5728\u5347\u7ea7 Jenkins X \u8fc7\u7a0b\u4e2d\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8fd9\u91cc\u6709\u4e00\u79cd\u624b\u52a8\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u5f00\u53d1\u73af\u5883\u7684 git \u5b58\u50a8\u5e93\u7684\u5185\u5bb9\uff1a\n\n```sh\ngit clone $MY_DEV_GIT_CLONE_URL jenkins-x-dev-env\ncd jenkins-x-dev-env/env\njx step env apply\n```\n",
            "content/zh/docs/managing-jx/common-tasks/pod-templates.md": "---\ntitle: Pod \u6a21\u677f\nlinktitle: Pod \u6a21\u677f\ndescription: \u7528\u4e8e\u5b9e\u73b0 Jenkins \u6d41\u6c34\u7ebf\u7684 Pods\n---\n\n\u6211\u4eec\u4f7f\u7528\u7533\u660e\u5f0f\uff08declarative\uff09Jenkins \u6d41\u6c34\u7ebf\u5b9e\u73b0 CI/CD \uff0c\u6bcf\u4e2a\u5e94\u7528\u6216\u8005\u73af\u5883\u7684 git \u5e93\u6e90\u7801\u4e2d\u6709 `Jenkinsfile`\u3002\n\n\u6211\u4eec\u4f7f\u7528 Jenkins \u7684 [kubernetes \u63d2\u4ef6](https://github.com/jenkinsci/kubernetes-plugin)\uff0c\u4f7f\u5f97\u5728 Kubernetes \u4e2d\u4e3a\u6bcf\u6b21\u6784\u5efa\u542f\u52a8\u4e00\u4e2a\u65b0\u7684 pod \u2014\u2014 \u611f\u8c22 Kubernetes \u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7528\u4e8e\u8fd0\u884c\u6d41\u6c34\u7ebf\u7684\u4f38\u7f29\u7684\u4ee3\u7406\u6c60\u3002\n\nKubernetes \u63d2\u4ef6\u4f7f\u7528 _pod templates_ \u5b9a\u4e49\u7528\u4e8e\u8fd0\u884c CI/CD \u6d41\u6c34\u7ebf\u7684 pod\uff0c\u5305\u62ec\uff1a\n\n* \u4e00\u4e2a\u6216\u591a\u4e2a\u6784\u5efa\u5bb9\u5668\uff0c\u7528\u4e8e\u8fd0\u884c\u547d\u4ee4\uff08\u4f8b\u5982\uff1a\u4f60\u7684\u6784\u5efa\u5de5\u5177\uff0c\u50cf `mvn` \u6216 `npm` \uff0c\u8fd8\u6709\u6d41\u6c34\u7ebf\u7684\u5176\u5b83\u90e8\u5206\u7684\u5de5\u5177\uff0c\u50cf `git, jx, helm, kubectl` \u7b49\u7b49\n* \u6c38\u4e45\u5b58\u50a8\u5377\n* \u73af\u5883\u53d8\u91cf\n* \u53ef\u4ee5\u5199\u5230 git \u4ed3\u5e93\u3001docker \u6ce8\u518c\u8868\u3001maven/npm/helm \u4ed3\u5e93\u7b49\u7b49\u7684 secret\n\n## \u53c2\u8003 Pod Templates\n\nJenkins X \u5e26\u6709\u4e00\u5957\u7ed9\u652f\u6301\u7684\u8bed\u8a00\u548c\u8fd0\u884c\u65f6\u7684\u9ed8\u8ba4 pod \u6a21\u677f\uff0c\u5728\u4f60\u7684 [build packs](/zh/architecture/build-packs)\u4e2d\uff0c\u547d\u540d\u7c7b\u4f3c\u4e8e\uff1a`jenkins-$PACKNAME`\u3002\n\n\u4f8b\u5982 [maven build pack](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/) \u4f7f\u7528\u7684 pod \u6a21\u677f\u65f6\u662f `jenkins-maven`\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5 [\u5728 Jenkinsfile \u4e2d\u5f15\u7528 pod \u6a21\u677f\u540d\u79f0](https://github.com/jenkins-x-buildpacks/jenkins-x-kubernetes/blob/master/packs/maven/Jenkinsfile#L1-L4)\uff0c\u5728\u7533\u660e\u5f0f\u6d41\u6c34\u7ebf\u4e2d\u4f7f\u7528\u8fd9\u6837\u7684\u8bed\u6cd5 `agent { label \"jenkins-$PACKNAME }` \uff0c\u4f8b\u5982\uff1a\n\n```groovy\n// my declarative Jenkinsfile\n\npipeline {\n    agent {\n      label \"jenkins-maven\"\n    }\n    environment {\n      ...\n    }\n    stages {\n      stage('CI Build and push snapshot') {\n        steps {\n          container('maven') {\n            sh \"mvn deploy\"\n          }\n          ...\n```\n\n## \u63d0\u4ea4\u65b0\u7684 Pod \u6a21\u677f\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u4e00\u4e2a\u65b0\u7684 [build pack](/zh/architecture/build-packs)\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u6b22\u8fce\u4f60 [\u63d0\u4ea4](/zh/docs/contributing/) \u4e00\u4e2a\u65b0\u7684 pod \u6a21\u677f\uff0c\u800c\u4e14\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u5305\u542b\u5728 Jenkins X \u7684\u53d1\u884c\u7248\u4e2d\uff01\n\n\u73b0\u5728\u9075\u5faa\u5982\u4f55\u8fd9\u4e2a\u7684\u6307\u793a \u2014\u2014 \u5982\u679c\u6709\u4efb\u4f55\u4e0d\u6e05\u695a\u7684\u8bdd\u8bf7[\u52a0\u5165\u793e\u533a\u5e76\u63d0\u95ee](/zh/community/)\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5e2e\u52a9\u4f60\uff01\n\n\u4e3a\u4e86\u63d0\u4ea4\u4e00\u4e2a\u65b0\u7684 build pack\uff1a\n\n* \u6d3e\u751f [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/) \u5e93\n* \u589e\u52a0\u4f60\u7684 build pack \u5230 [jenkins-x-platform \u5e93\u4e2d\u7684 values.yaml \u6587\u4ef6\u91cc](https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431) \u5728 YAML \u6587\u4ef6\u7684 `jenkins.Agent.PodTemplates` \u8fd9\u4e2a\u533a\u57df\n* \u4f60\u5543\u6839\u60f3\u8981\u4ece\u590d\u5236\u3001\u7c98\u8d34\u5f00\u59cb\u5927\u591a\u6570\u76f8\u4f3c\u5df2\u7ecf\u5b58\u5728 pod \u6a21\u677f\uff08\u4f8b\u5982\uff1a\u62f7\u8d1d `Maven`\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u57fa\u4e8e Java \u7684\u6784\u5efapod\uff09\uff0c\u5e76\u4e14\uff0c\u53ea\u662f\u914d\u7f6e\u540d\u79f0\u3001\u6807\u7b7e\u548c `Image` \u7b49\u7b49\u3002\n* \u73b0\u5728\u5230 [jenkins-x-platform](https://github.com/jenkins-x/jenkins-x-platform/) \u5e93\u4e3a\u4f60\u7684 pod \u6a21\u677f\u63d0\u4ea4\u4e00\u4e2a Pull Request\n\n### \u6784\u5efa\u5bb9\u5668\n\n\u5f53\u4f7f\u7528 pod \u6a21\u677f\u548c Jenkins \u6d41\u6c34\u7ebf\u65f6\uff0c\u6bcf\u4e2a\u5de5\u5177\u4f60\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a `maven` \u5bb9\u5668\u548c `git` \u7b49\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5728\u4e00\u4e2a\u6784\u5efa\u5bb9\u5668\u91cc\u6709\u6240\u6709\u901a\u7528\u7684\u5de5\u5177\u4f1a\u6bd4\u8f83\u7b80\u5355\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u4f7f\u7528 `kubectl exec` \u6216 [jx rsh](/commands/jx_rsh/) \u6253\u5f00\u4e00\u4e2a\u6784\u5efa pod \u7684 shell\uff0c\u5f53\u4f60\u8c03\u8bd5\u3001\u8bca\u65ad\u6709\u95ee\u9898\u7684\u6d41\u6c34\u7ebf\u65f6\u91cc\u9762\u6709\u6240\u6709\u9700\u8981\u7684\u5de5\u5177\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u4e00\u4e2a [builder-base](https://github.com/jenkins-x/builder-base) \u7684 docker \u955c\u50cf\uff0c[\u5305\u542b\u6240\u6709\u4e0d\u540c\u7684\u5de5\u5177](https://github.com/jenkins-x/jenkins-x-builders-base/blob/master/Dockerfile.common#L4-L15) \uff0c\u6211\u4eec\u503e\u5411\u4e8e\u5728 CI/CD \u6d41\u6c34\u7ebf\u4e2d\u4f7f\u7528\u50cf `jx, skaffold, helm, git, updatebot` \u7684\u5de5\u5177\u3002\n\n\u5982\u679c\u60f3\u8981\u5728\u4f60\u65b0\u7684 pod \u6a21\u677f\u4e2d\u4f7f\u7528\u5355\u4e00\u7684\u6784\u5efa\u60ca\u559c\u90a3\u4e2a\uff0c\u90a3\u4e48\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 builder base \u4f5c\u4e3a\u57fa\u7840\u589e\u52a0\u4f60\u81ea\u5b9a\u4e49\u7684\u5de5\u5177\u3002\n\n\u4f8b\u5982\uff1a[builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven) \u4f7f\u7528\u4e00\u4e2a [Dockerfile](https://github.com/jenkins-x/jenkins-x-builders/blob/master/builder-maven/Dockerfile#L1) \u5f15\u7528\u57fa\u7840\u6784\u5efa\u3002\n\n\u56e0\u6b64\uff0c\u6700\u7b80\u5355\u7684\u5c31\u662f\u62f7\u8d1d\u4e00\u4e2a\u7b80\u5355\u7684 builder \u2014\u2014 \u50cf [builder-maven](https://github.com/jenkins-x/jenkins-x-builders/tree/master/builder-maven)\uff0c\u7136\u540e\u7f16\u8f91 `Dockerfile` \u589e\u52a0\u4f60\u9700\u8981\u7684\u6784\u5efa\u5de5\u5177\u3002\n\n\u6211\u4eec\u6b22\u8fce Pull Requests \u548c[\u8d21\u732e](/zh/docs/contributing/)\uff0c\u56e0\u6b64\uff0c\u8bf7\u628a\u4f60\u65b0\u7684\u6784\u5efa\u5bb9\u5668\u548c Pod \u6a21\u677f\u63d0\u4ea4\uff0c\u6211\u4eec\u5f88\u4e50\u610f[\u5e2e\u52a9](/zh/docs/contributing/)\uff01\n\n## \u589e\u52a0\u4f60\u81ea\u5df1\u7684 Pod \u6a21\u677f\n\n\u4e3a\u4e86\u4fdd\u6301\u7b80\u5355\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u5728 Jenkins \u914d\u7f6e\u4e2d\u5b9a\u4e49 pod \u6a21\u677f\uff0c\u7136\u540e\u5728 `Jenkinsfile` \u4e2d\u901a\u8fc7\u540d\u79f0\u6765\u5f15\u7528\u3002\n\n\u5c3d\u7ba1\u4e00\u4e2a pod \u6a21\u677f\u503e\u5411\u4e8e\u6709\u5f88\u591a\u5f00\u53d1\u73af\u5883\u5b9a\u4e49\u5728\u91cc\u9762\uff0c\u50cf secrets\uff1b\u5982\u679c\u9700\u8981\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728 `Jenkinsfile` \u4e2d\u7528\u5185\u8054\u7684\u5f62\u5f0f\u5b9a\u4e49 pod \u6a21\u677f\uff0c\u4f7f\u53d8\u5f97\u7b80\u5355\u3002\u4f46\u6211\u4eec\u66f4\u559c\u6b22\u628a\u5927\u591a\u6570 pod \u6a21\u677f\u4fdd\u7559\u5728\u4f60\u7684\u5f00\u53d1\u73af\u5883\u6e90\u7801\u4e2d\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u5e94\u7528\u4e2d\u62f7\u8d1d\u3001\u7c98\u8d34\u3002\n\n\u73b0\u5728\uff0c\u6dfb\u52a0\u65b0\u7684 Pod \u6a21\u677f\u6700\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7 Jenkins \u63a7\u5236\u53f0\u3002\u4f8b\u5982\uff1a\n\n```sh\njx console\n```\n\n\u8fd9\u6837\u5c31\u4f1a\u6253\u5f00 Jenkins \u63a7\u5236\u53f0\u3002\u7136\u540e\uff0c\u5bfc\u822a\u5230`\u7ba1\u7406 Jenkins`\uff08\u5728\u5de6\u4fa7\u83dc\u5355\uff09\uff0c\u7136\u540e`\u7cfb\u7edf\u914d\u7f6e`\u3002\n\n\u4f60\u5c06\u4f1a\u9762\u4e34\u5927\u91cf\u7684\u9875\u9762\u914d\u7f6e\u9009\u9879\uff0cPod \u6a21\u677f\u901a\u5e38\u5728\u5e95\u90e8\uff1b\u4f60\u5e94\u8be5\u770b\u5230\u4e86\u5f53\u524d\u6240\u6709\u7684 pod \u6a21\u677f\uff0c\u50cf maven\u3001NodeJS \u7b49\u7b49\u3002\n\n\u4f60\u53ef\u4ee5\u5728\u90a3\u4e2a\u9875\u9762\u7f16\u8f91\u3001\u589e\u52a0\u3001\u79fb\u9664 pod \u6a21\u677f\u5e76\u70b9\u51fb\u4fdd\u5b58\u3002\n\n\u6ce8\u610f\uff0c\u957f\u671f\u6765\u8bf4\uff0c\u5c3d\u7ba1\u6211\u4eec\u5e0c\u671b[\u901a\u8fc7 GitOps \u7ef4\u62a4\u4f60\u7684\u5f00\u53d1\u73af\u5883\uff0c\u5c31\u50cf\u662f\u6211\u4eec\u505a\u7684 Staging \u548c Production](https://github.com/jenkins-x/jx/issues/604) \u2014\u2014 \u4e5f\u5c31\u610f\u5473\u7740\u5f53\u4f60[\u5347\u7ea7\u4f60\u7684\u5f00\u53d1\u73af\u5883](/commands/deprecation/)\u901a\u8fc7 Jenkins \u754c\u9762\u505a\u7684\u4fee\u6539\u53ef\u80fd\u4f1a\u4e22\u5931\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u628a Pod \u6a21\u677f\u6dfb\u52a0\u5230\u4f60\u7684\u5f00\u53d1\u73af\u5883 git \u5e93\u7684 `values.yaml` \u6587\u4ef6\u4e2d\uff0c\u5c31\u50cf\u6211\u4eec\u5728 [jenkins-x-platform chart](https://github.com/jenkins-x/jenkins-x-platform/blob/master/values.yaml#L194-L431) \u505a\u7684\u4e00\u6837\u3002\n\n\u5982\u679c\u4f60\u6b63\u5728\u4f7f\u7528\u5f00\u6e90\u5de5\u5177\u521b\u5efa pod \u6a21\u677f\uff0c\u90a3\u4e48[\u5728 Pull Request \u4e2d\u63d0\u4ea4\u4f60\u7684 pod \u6a21\u677f](#submitting-new-pod-templates)\u4f1a\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u6dfb\u52a0\u5230 Jenkins X \u672a\u6765\u7684\u53d1\u884c\u7248\u4e2d\uff1f\n",
            "content/zh/docs/managing-jx/faq.md": "---\ntitle: \u5f00\u53d1\u95ee\u9898\nlinktitle: \u5f00\u53d1\u95ee\u9898\ndescription: \u6709\u5173\u5982\u4f55\u4f7f\u7528 Kubernetes\uff0c Helm \u548c Jenkins X \u6784\u5efa\u4e91\u539f\u751f\u5e94\u7528\n---\n\n## \u5982\u4f55\u6ce8\u5165\u7279\u5b9a\u7684\u73af\u5883\u914d\u7f6e\n\nJenkins X \u4e2d\u7684\u6bcf\u4e2a\u73af\u5883\u90fd\u5728 git \u5b58\u50a8\u5e93\u4e2d\u5b9a\u4e49; \u6211\u4eec\u4f7f\u7528 GitOps \u6765\u7ba1\u7406\u6bcf\u4e2a\u73af\u5883\u4e2d\u7684\u6240\u6709\u66f4\u6539\uff0c\u4f8b\u5982\uff1a\n\n* \u6dfb\u52a0/\u5220\u9664\u5e94\u7528\n* \u66f4\u6539\u5e94\u7528\u7a0b\u5e8f\u7684\u7248\u672c\uff08\u66f4\u65b0\u6216\u56de\u6eda\uff09\n* \u4f7f\u7528\u73af\u5883\u7279\u5b9a\u503c\u914d\u7f6e\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\n\n\u524d\u4e24\u4e2a\u9879\u5728\u60a8\u73af\u5883\u7684 git \u5b58\u50a8\u5e93\u7684 `env/requirements.yaml` \u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002 \u540e\u8005\u5728 `env/values.yaml` \u6587\u4ef6\u4e2d\u5b9a\u4e49\u3002\n\nHelm charts \u4f7f\u7528 [values.yaml\u6587\u4ef6](https://github.com/helm/helm/blob/master/docs/chart_template_guide/values_files.md)\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8986\u76d6 charts \u4e2d\u7684\u4efb\u4f55\u914d\u7f6e\u4ee5\u4fee\u6539\u8bbe\u7f6e\uff0c\u4f8b\u5982\u4efb\u4f55\u8d44\u6e90\u6216\u8d44\u6e90\u914d\u7f6e\u4e0a\u7684\u6807\u7b7e\u6216\u6ce8\u91ca\uff08\u4f8b\u5982 `replicaCount` \uff09\u6216\u5c06\u73af\u5883\u53d8\u91cf\u7b49\u5185\u5bb9\u4f20\u9012\u7ed9 `Deployment` \u3002\n\n\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u60f3\u6539\u53d8 `staging` \u73af\u5883\u4e2d\u5e94\u7528 `foo` \u7684 `replicaCount` \uff0c\u90a3\u4e48\u901a\u8fc7 [jx get env](/commands/jx_get_environments/) \u67e5\u627e `staging` \u73af\u5883\u7684 git \u5b58\u50a8\u5e93\uff0c\u627e\u5230 git URL \u3002\n\n\u5bfc\u822a\u5230 `env/values.yaml` \u6587\u4ef6\u5e76\u6dfb\u52a0/\u7f16\u8f91\u4e00\u4e9b YAML \uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\n```yaml\nfoo:\n  replicaCount: 5\n```\n\n\u5c06\u8be5\u66f4\u6539\u4f5c\u4e3a Pull Request \u63d0\u4ea4\uff0c\u4ee5\u4fbf\u5b83\u53ef\u4ee5\u901a\u8fc7 CI \u6d4b\u8bd5\u5e76\u4e14\u8fdb\u884c\u4efb\u4f55\u540c\u884c\u8bc4\u5ba1/\u6279\u51c6; \u7136\u540e\u5f53\u5b83\u5408\u5e76\u5230\u5b83\u7684 master \u5206\u652f\u5b83\u5c06\u4fee\u6539 `foo` \u5e94\u7528\u7a0b\u5e8f\u7684 `replicaCount`\uff08\u5047\u8bbe\u5728 `env/requirements.yaml` \u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a\u540d\u4e3a `foo` \u7684 chart \uff09\n\n\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u4f7f\u7528 vanilla helm \u6765\u6267\u884c\u6ce8\u5165\u5f53\u524d\u547d\u540d\u7a7a\u95f4\u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\n\n\u8981\u67e5\u770b\u5982\u4f55\u4f7f\u7528 `values.yaml` \u6587\u4ef6\u6ce8\u5165 chart \u7684\u66f4\u590d\u6742\u793a\u4f8b\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u6587\u4ef6[\u914d\u7f6e Jenkins X \u672c\u8eab](/zh/docs/resources/guides/managing-jx/common-tasks/config/)\n\n\n## \u5982\u4f55\u7ba1\u7406\u6bcf\u4e2a\u73af\u5883\u4e2d\u7684 Secret \uff1f\n\n\u6211\u4eec\u81ea\u5df1\u4f7f\u7528\u5c01\u95ed Secrets \u6765\u7ba1\u7406\u6211\u4eec\u6240\u6709 CI/CD \u7684 Jenkins X \u5b89\u88c5 - \u6240\u4ee5 Secret \u88ab\u52a0\u5bc6\u5e76\u68c0\u51fa\u5230\u6bcf\u4e2a\u73af\u5883\u7684 git \u4ed3\u5e93\u3002 \u6211\u4eec\u4f7f\u7528 [helm-secrets](https://github.com/futuresimple/helm-secrets) \u63d2\u4ef6\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\n\n\u867d\u7136\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u6211\u4eec\u6b63\u5728\u8c03\u7814\u7684 Vault Operator - \u5b83\u53ef\u4ee5\u901a\u8fc7 Vault \u83b7\u53d6\u548c\u586b\u5145\u5bc6\u7801\uff08\u5e76\u56de\u6536\u5b83\u4eec\u7b49\uff09\u3002\n",
            "content/zh/docs/managing-jx/issues.md": "---\ntitle: \u5e38\u89c1\u95ee\u9898\u89e3\u7b54\nlinktitle: Issues\ndescription: Issues using Jenkins X \u5e38\u89c1\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002\n---\n\n\u6211\u4eec\u5df2\u7ecf\u8bd5\u56fe\u628a\u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898\u6574\u7406\u5230\u8fd9\u91cc\u3002\u5982\u679c\u4f60\u9047\u5230\u7684\u95ee\u9898\u6ca1\u6709\u5728\u8fd9\u91cc\u5217\u51fa\u6765\uff0c\u8bf7[\u8ba9\u6211\u4eec\u77e5\u9053](https://github.com/jenkins-x/jx/issues/new)\u3002\n\n\n### \u65e0\u6cd5\u521b\u5efa minikube \u96c6\u7fa4\n\n\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Mac\uff0c\u90a3\u4e48\uff0c `hyperkit` \u662f\u6700\u597d\u7684\u865a\u62df\u673a\u9a71\u52a8\u2014\u2014\u4f46\u9996\u5148\u9700\u8981\u4f60\u5b89\u88c5\u6700\u65b0\u7684[Docker for Mac](https://docs.docker.com/docker-for-mac/install/)\u3002\u4e4b\u540e\uff0c\u5c1d\u8bd5 `jx create cluster minikube`\u3002\n\n\u5982\u679c\uff0c\u4f60\u7684 minikube \u542f\u52a8\u5931\u8d25\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5c1d\u8bd5\uff1a\n\n    minikube delete\n    rm -rf ~/.minikube\n\n\u5982\u679c\u8fd0\u884c `rm` \u5931\u8d25\uff0c\u4f60\u53ef\u80fd\u9700\u8981\uff1a\n\n    sudo rm -rf ~/.minikube\n\n\u73b0\u5728\uff0c\u518d\u8bd5\u4e00\u6b21 `jx create cluster minikube` \uff0c\u8fd9\u6837\u6709\u5e2e\u52a9\u5417\uff1f\u6709\u65f6\u5019\uff0c\u4ece\u5b89\u88c5\u7684\u65e7\u7248\u672c\u4e2d\u4e00\u4e9b\u8fc7\u65f6\u7684\u8bc1\u4e66\u6216\u8005\u6587\u4ef6\u4f1a\u5bfc\u81f4 minikube \u5931\u8d25\u3002\n\n\u6709\u65f6\u5019\uff0c\u5f53\u865a\u62df\u673a\u51fa\u9519\u65f6\uff0c\u91cd\u542f\u53ef\u80fd\u4f1a\u6709\u5e2e\u52a9\u3002\n\n\u53e6\u5916\uff0c\u4f60\u8fd8\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u9762\u7684 minikube \u6307\u4ee4\n\n* [\u5b89\u88c5 minikube](https://github.com/kubernetes/minikube#installation)\n* [\u8fd0\u884c minikube start](https://github.com/kubernetes/minikube#quickstart)\n\n### Minkube \u548c hyperkit: \u65e0\u6cd5\u627e\u5230 IP \u5730\u5740\n\n\u5982\u679c\u4f60\u5728 Mac \u4e0a\u901a\u8fc7 hyperkit \u4f7f\u7528 minikube\uff0c\u5e76\u53d1\u73b0 minikube \u542f\u52a8\u5931\u8d25\u7684\u65e5\u5fd7\u5982\u4e0b\uff1a\n\n```sh\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\nTemporary Error: Could not find an IP address for 46:0:41:86:41:6e\n```\n\n\u8fd9\u91cc\u53ef\u80fd\u4f1a\u7ed9\u4f60\u63d0\u793a\uff0c[minikube \u548c hyperkit \u76f8\u5173\u95ee\u9898](https://github.com/kubernetes/minikube/issues/1926#issuecomment-356378525)\u3002\n\n\u89e3\u51b3\u7684\u529e\u6cd5\u662f\u8bf7\u5c1d\u8bd5\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a\n\n```sh\nrm ~/.minikube/machines/minikube/hyperkit.pid\n```\n\n\u7136\u540e\uff0c\u518d\u8bd5\u4e00\u6b21\u3002\u5e0c\u671b\u8fd9\u6b21\u80fd\u591f\u6210\u529f\uff01\n\n### \u65e0\u6cd5\u8bbf\u95ee minikube \u4e0a\u7684\u670d\u52a1\n\n\u5f53\u8fd0\u884c minikube\uff0c\u672c\u5730 `jx` \u9ed8\u8ba4\u4f7f\u7528 [nip.io](http://nip.io/) \u4f5c\u4e3a\u670d\u52a1\u7684\u57df\u540d\u89e3\u6790\uff0c\u5e76\u89e3\u51b3\u4e86\u5927\u591a\u6570\u7b14\u8bb0\u672c\u65e0\u6cd5\u4f7f\u7528\u901a\u914d\u7684 DNS\u3002\u7136\u800c\uff0c\u6709\u65f6\u5019\uff0c[nip.io](http://nip.io/) \u4f1a\u51fa\u95ee\u9898\u800c\u65e0\u6cd5\u5de5\u4f5c\u3002\n\n\u4e3a\u4e86\u907f\u514d\u4f7f\u7528 [nip.io](http://nip.io/) \u4f60\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\n\u7f16\u8f91\u6587\u4ef6 `~/.jx/cloud-environments/env-minikube/myvalues.yaml`\uff0c\u5e76\u6dfb\u52a0\u4e0b\u9762\u7684\u5185\u5bb9\uff1a\n\n```yaml\nexpose:\n  Args:\n    - --exposer\n    - NodePort\n    - --http\n    - \"true\"\n```\n\n\u7136\u540e\uff0c\u518d\u6b21\u8fd0\u884c `jx install` \uff0c\u8fd9\u5c06\u4f1a\u628a\u628a\u670d\u52a1\u66b4\u9732\u5728 `node ports`\uff0c\u4e0d\u518d\u4f7f\u7528 ingress \u548c DNS\u3002\n\n\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u8f93\u5165\uff1a\n\n```sh\njx open\n```\n\n\u4f60\u5c06\u4f1a\u770b\u5230\u6240\u6709\u7684 UR \u683c\u5f0f `http://$(minikube ip):somePortNumber`\uff0c\u4e0d\u518d\u901a\u8fc7 [nip.io](http://nip.io/)\u3002\u8fd9\u5c31\u610f\u5473\u7740 URL \u4f7f\u7528\u96be\u8bb0\u5fc6\u7684\u6570\u5b57\u683c\u5f0f\u800c\u4e0d\u662f\u7b80\u5355\u7684\u4e3b\u673a\u540d\u3002\n\n### \u5176\u4ed6\u95ee\u9898\n\n\u8bf7[\u8ba9\u6211\u4eec\u77e5\u9053](https://github.com/jenkins-x/jx/issues/new) \uff0c\u770b\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\uff1f\u795d\u4f60\u597d\u8fd0\uff01\n",
            "content/zh/docs/managing-jx/jenkins.md": "---\ntitle: Jenkins \u76f8\u5173\u95ee\u9898\nlinktitle: Jenkins \u76f8\u5173\u95ee\u9898\ndescription: Jenkins \u76f8\u5173\u95ee\u9898\u3002\n---\n\n# \u5bc6\u7801\n\n\u5b89\u88c5\u5728 Jenkins X \u4e2d\u7684 Jenkins \u6ca1\u6709\u63d0\u4f9b\u4fee\u6539\u7ba1\u7406\u5458\u5bc6\u7801\u7684\u9875\u9762\uff0c\u4f46\u662f\u4f60\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6 `~/.jx/jenkinsAuth.yaml` \u6765\u83b7\u53d6\u5bc6\u7801\u3002\n",
            "content/zh/docs/managing-jx/setup.md": "---\ntitle: \u5b89\u88c5\u95ee\u9898\nlinktitle: \u5b89\u88c5\u95ee\u9898\ndescription: Jenkins X \u7684\u5b89\u88c5\u548c\u914d\u7f6e\u95ee\u9898\n---\n\n## \u5982\u4f55\u5728 Jenkins X \u7684\u5b89\u88c5\u5f53\u4e2d\u6dfb\u52a0\u7528\u6237\uff1f\n\nJenkins X \u5047\u8bbe\u6bcf\u4e2a\u7528\u6237\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8fd0\u884c Jenkins X \u7684 kubernetes \u5f00\u53d1\u96c6\u7fa4\u3002\n\n\u5982\u679c\u60a8\u7684\u7528\u6237\u65e0\u6743\u8bbf\u95ee kubernetes \u96c6\u7fa4\uff0c\u6211\u4eec\u9700\u8981\u8bbe\u7f6e\u4ed6\u4eec\u7684 `~/.kube/config` \u6587\u4ef6\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5b83\u3002\n\n\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528 Google \u7684 GKE \uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u6d4f\u89c8 [GKE Console](https://console.cloud.google.com) \u4ee5\u67e5\u770b\u6240\u6709\u96c6\u7fa4\uff0c\u7136\u540e\u5355\u51fb\u5f00\u53d1\u96c6\u7fa4\u65c1\u8fb9\u7684 `Connect` \u6309\u94ae\uff0c\u7136\u540e\u53ef\u4ee5\u8fd0\u884c\u590d\u5236/\u7c98\u8d34\u547d\u4ee4\u4ee5\u8fde\u63a5\u5230\u96c6\u7fa4\u3002\n\n\u5bf9\u4e8e\u5176\u4ed6\u96c6\u7fa4\uff0c\u6211\u4eec\u8ba1\u5212\u7f16\u5199\u4e00\u4e9b [CLI \u547d\u4ee4\u6765\u5bfc\u51fa\u548c\u5bfc\u5165kube\u914d\u7f6e](https://github.com/jenkins-x/jx/issues/1406)\u3002\n\n### \u5f53\u7528\u6237\u62e5\u6709\u4e86 kubernetes \u96c6\u7fa4\u7684\u8bbf\u95ee\u6743\u9650\n\n\u5f53\u7528\u6237\u62e5\u6709\u4e86 kubernetes \u96c6\u7fa4\u7684\u8bbf\u95ee\u6743\u9650\uff1a\n\n* [\u5b89\u88c5 jx \u4e8c\u8fdb\u5236\u6587\u4ef6](/zh/getting-started/setup/install/)\n\n\u5982\u679c Jenkins X \u5b89\u88c5\u5728\u547d\u540d\u7a7a\u95f4 `jx` \u4e2d\uff0c\u90a3\u4e48\u5e94\u8be5 [\u5207\u6362\u4f60\u7684\u4e0a\u4e0b\u6587](/zh/docs/resources/guides/using-jx/common-tasks/kube-context/) \u5230\u547d\u540d\u7a7a\u95f4 `jx` \u5f53\u4e2d\uff1a\n\n    jx ns jx\n\n\u6d4b\u8bd5\u5b89\u88c5\u6210\u529f\u53ef\u4ee5\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\uff1a\n\n    jx get env\n    jx open\n\n\u67e5\u770b\u73af\u5883\u548c\u4efb\u4f55\u5f00\u53d1\u5de5\u5177\uff0c\u5982 Jenkins \u6216 Nexus \u63a7\u5236\u53f0\u3002\n\n",
            "content/zh/docs/using-jx/common-tasks/_index.md": "---\ntitle: \"Core Tasks\"\nlinkTitle: \"Core Tasks\"\nweight: 6\ndescription: >\n  What can you do with Jenkins X?\n---",
            "content/zh/docs/using-jx/common-tasks/browsing.md": "---\ntitle: \u6d4f\u89c8\nlinktitle: \u6d4f\u89c8\ndescription: \u6d4f\u89c8 Jenkins X \u4e2d\u7684\u8d44\u6e90\n---\n\n\n\u5982\u679c\u4f60\u4e4b\u524d\u7528\u8fc7 Kubernetes\uff0c\u4f60\u53ef\u80fd\u4f7f\u7528\u8fc7 [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) \u547d\u4ee4\u67e5\u770b Kubernetes \u8d44\u6e90\uff1a\n\n```sh\nkubectl get pods\n```\n\nJenkins X \u7684\u547d\u4ee4\u884c\u5de5\u5177\uff0c[jx](/commands/jx/)\uff0c\u548c [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) \u770b\u8d77\u6765\u76f8\u4f3c\uff0c\u5e76\u4e14\u53ef\u4ee5\u8ba9\u4f60\u770b\u5230\u6240\u6709\u7684 Jenkins X \u8d44\u6e90\u3002\n\n### \u67e5\u770b Jenkins \u63a7\u5236\u53f0\n\n\u5982\u679c\u4f60\u719f\u6089 Jenkins \u63a7\u5236\u53f0\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx console](/commands/deprecation/) \uff1a\n\n```sh\njx console\n```\n\n\u5c31\u4f1a\u6253\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\u3002\n\n### \u6d41\u6c34\u7ebf\n\n\u8981\u67e5\u770b\u5f53\u524d\u6d41\u6c34\u7ebf\u4f7f\u7528 [jx get pipelines](/commands/jx_get_pipelines/):\n\n```sh\njx get pipelines\n```\n\n### \u6d41\u6c34\u7ebf\u6784\u5efa\u65e5\u5fd7\n\n\u901a\u8fc7 [jx get build logs](/commands/jx_get_build_log/) \u67e5\u770b\u5f53\u524d\u6d41\u6c34\u7ebf\u6784\u5efa\u65e5\u5fd7\uff1a\n\n```sh\njx get build logs\n```\n\n\u4f60\u5f53\u524d\u770b\u5230\u7684\u662f\u6240\u6709\u80fd\u770b\u5230\u7684\u6d41\u6c34\u7ebf\u3002\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u5feb\u901f\u8fc7\u6ee4\n\n```sh\njx get build logs -f myapp\n```\n\n\u6216\u8005\uff0c\u4f60\u5e0c\u671b\u6307\u5b9a\n\n```sh\njx get build logs myorg/myapp/master\n```\n\n### \u6d41\u6c34\u7ebf\u6d3b\u52a8\n\n\u4e3a\u4e86\u67e5\u770b\u5f53\u524d\u6d41\u6c34\u7ebf\u7684\u6d3b\u52a8 [jx get activities](/commands/jx_get_activities/)\uff1a\n\n```sh\njx get activities\n```\n\n\u5982\u679c\u4f60\u60f3\u8981\u89c2\u5bdf\u4f60\u7684\u5e94\u7528 `myapp`\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a\n\n```sh\njx get activities -f myapp -w\n```\n\n\u8fd9\u6837\u5c06\u4f1a\u89c2\u5bdf\u6d41\u6c34\u7ebf\u7684\u6d3b\u52a8\uff0c\u5e76\u65e0\u8bba\u4efb\u4f55\u91cd\u8981\u7684\u6539\u53d8\u53d1\u751f\uff08\u4f8b\u5982\uff1a\u53d1\u7248\u5b8c\u6210\uff0c\u4e00\u4e2a PR \u88ab\u521b\u5efa\u5f00\u59cb[\u5347\u7ea7](/zh/developing/promote) \u7b49\u7b49\uff09\u90fd\u4f1a\u66f4\u65b0\u5c4f\u5e55\u3002\n\n### \u5e94\u7528\u7a0b\u5e8f\n\n\u4e3a\u4e86\u67e5\u770b\u4f60\u7684\u56e2\u961f\u6240\u6709\u73af\u5883\u7684\u6240\u6709\u5e94\u7528\u7684URL\u548c pod \u6570\u91cf\uff0c\u4f7f\u7528 [jx get applications](/commands/jx_get_applications/)\uff1a\n\n\n```sh\njx get applications\n```\n\n\u5982\u679c\u4f60\u60f3\u8981\u9690\u85cf URL \u6216\u8005 pod \u6570\u91cf\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `u` \u6216 `-p`\u3002\u4f8b\u5982\uff1a\u4e3a\u4e86\u9690\u85cf URL\uff1a\n\n```sh\njx get applications -u\n```\n\n\u6216\u8005\u9690\u85cf pod \u6570\u91cf\uff1a\n\n```sh\njx get applications -p\n```\n\n\u4f60\u8fd8\u53ef\u4ee5\u6839\u636e\u73af\u5883\u6765\u8fc7\u6ee4\u5e94\u7528\uff1a\n\n```sh\njx get applications -e staging\n```\n\n\n\n### \u73af\u5883\n\n\u4e3a\u4e86\u67e5\u770b\u4f60\u4eec\u56e2\u961f\u4e2d\u7684 [\u73af\u5883](/zh/about/concepts/features/#environments)\uff0c\u4f7f\u7528 [jx get environments](/commands/jx_get_environments/)\uff1a\n\n```sh\njx get environments\n```\n\n\u4f60\u8fd8\u53ef\u4ee5\n\n* \u901a\u8fc7 [jx create environment](/commands/jx_create_environment/) \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u73af\u5883\n* \u901a\u8fc7 [jx edit environment](/commands/jx_edit_environment/) \u7f16\u8f91\u73af\u5883\n* \u901a\u8fc7 [jx delete environment](/commands/jx_delete_environment/) \u5220\u9664\u73af\u5883\n",
            "content/zh/docs/using-jx/common-tasks/create-spring.md": "---\ntitle: \u521b\u5efa Spring Boot\nlinktitle: \u521b\u5efa Spring Boot\ndescription: \u5982\u4f55\u521b\u5efaSpring Boot\u5e94\u7528\u5e76\u5bfc\u5165Jenkins X\n---\n\n\n\u5982\u679c\u4f60\u5728\u5f00\u53d1\u57fa\u4e8eJava\u7684\u5fae\u670d\u52a1\uff0c\u90a3\u4e48\uff0c\u4f60\u53ef\u80fd\u6b63\u5728\u7528\u6d41\u884c\u7684[Spring Boot](https://projects.spring.io/spring-boot/)\u3002\n\n\u4f60\u53ef\u4ee5\u5229\u7528[Spring Boot Initializr](http://start.spring.io/)\u521b\u5efaSpring Boot\u5e94\u7528\uff0c\u7136\u540e\u901a\u8fc7\u6267\u884c\u547d\u4ee4 [jx import](/commands/jx_import/) \u6765[\u5bfc\u5165Jenkins X](/developing/import/)\u3002\n\n\u7136\u800c\uff0c\u53e6\u5916\u4e00\u4e2a\u5feb\u901f\u81ea\u52a8\u5316\u7684\u65b9\u5f0f\uff0c\u662f\u901a\u8fc7\u6267\u884c [jx create spring](/commands/deprecation/) \u547d\u4ee4\u5b9e\u73b0\uff1a\n\n```sh\njx create spring -d web -d actuator\n```\n\n\u53c2\u6570 `-d` \u5141\u8bb8\u4f60\u6307\u5b9a\u5e0c\u671b\u6dfb\u52a0\u5230 Spring Boot \u5e94\u7528\u4e2d\u7684\u4f9d\u8d56\u3002\n\n\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u4f60\u603b\u662f\u5305\u62ec\u4f9d\u8d56 **actuator** \u5230\u4f60\u7684 Spring Boot \u5e94\u7528\u4e2d\uff0c\u5b83\u53ef\u4ee5\u4e3a [Liveness and Readiness probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/) \u63d0\u4f9b\u5065\u5eb7\u68c0\u67e5\u3002\n\n\u547d\u4ee4 [jx create spring](/commands/deprecation/) \u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n* \u5728\u5b50\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 Spring Boot \u5e94\u7528\n* \u628a\u4f60\u7684\u6e90\u7801\u52a0\u5165\u5230git\u5e93\u4e2d\n* \u5728 git \u670d\u52a1\uff0c\u4f8b\u5982 [GitHub](https://github.com),\u6dfb\u52a0 git \u8fdc\u7a0b\u5e93\n* \u63a8\u9001\u4ee3\u7801\u5230 git \u8fdc\u7a0b\u5e93\n* \u6dfb\u52a0\u9ed8\u8ba4\u7684\u6587\u4ef6\uff1a\n  * `Dockerfile` \u628a\u4f60\u7684\u5e94\u7528\u6784\u5efa\u4e3a docker \u955c\u50cf\n  * `Jenkinsfile` \u5b9e\u73b0 CI / CD \u6d41\u6c34\u7ebf\n  * \u5728 Kubernetes \u4e2d\u901a\u8fc7 helm chart \u8fd0\u884c\u4f60\u7684\u5e94\u7528\n* \u4e3a\u4f60\u7684 Jenkins \u5728 git \u8fdc\u7a0b\u5e93\u4e0a\u6ce8\u518c webhook\n* \u4e3a\u4f60\u7684 Jenkins \u6dfb\u52a0 git \u5e93\n* \u9996\u6b21\u89e6\u53d1\u6d41\u6c34\u7ebf\n\n",
            "content/zh/docs/using-jx/common-tasks/devpods.md": "---\ntitle: \u7814\u53d1\nlinktitle: \u7814\u53d1\ndescription: \u4f7f\u7528 Jenkins X \u7ed9\u60a8\u7684\u5ba2\u6237\u4ea7\u751f\u6301\u7eed\u4ea4\u4ed8\u4ef7\u503c\n---\n\n\u5982\u4f55\u4f7f\u7528 Jenkins X \u4ea7\u751f\u6301\u7eed\u4ea4\u4ed8\u4ef7\u503c\u3002\n                    \n",
            "content/zh/docs/using-jx/common-tasks/ide.md": "---\ntitle: IDE\nlinktitle: IDE\ndescription: \u5728\u4f60\u7684 IDE \u4e2d\u4f7f\u7528 Jenkins X\n---\n\n\n\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u4eec\u7ecf\u5e38\u5728 IDE \u4e0a\u82b1\u5927\u91cf\u7684\u65f6\u95f4\u6765\u7f16\u7801\u3002Jenkins X \u5b8c\u5168\u662f\u4e3a\u4e86\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5feb\u901f\u4ea4\u4ed8\u5546\u4e1a\u4ef7\u503c\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u4f7f\u5f97 Jenkins X \u5728\u4f60\u7684 IDE \u4e2d\u66f4\u52a0\u5bb9\u6613\u4f7f\u7528\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u6709 IDE \u63d2\u4ef6\u6765\u65b9\u4fbf\u4f7f\u7528 Jenkins X\u3002\n\n## VS Code\n\n[VS Code](https://code.visualstudio.com/) \u662f\u4e00\u4e2a\u6d41\u884c\u7684\u6765\u81ea\u5fae\u8f6f\u7684\u5f00\u6e90 IDE\u3002\n\n\u6211\u4eec\u5df2\u7ecf\u4e3a VS Code \u7814\u53d1\u4e86\u63d2\u4ef6 [vscode-jx-tools](https://github.com/jenkins-x/vscode-jx-tools)\u3002\n\n\u4f60\u53ef\u4ee5\u5728 `\u6269\u5c55` \u7a97\u53e3\u628a\u63d2\u4ef6\u5b89\u88c5\u5230 VS Code\uff0c\u641c\u7d22 `jx` \u5e94\u8be5\u80fd\u67e5\u5230\u8fd9\u4e2a\u6269\u5c55\u3002\n\n\u5b89\u88c5\u5b8c\u540e\u70b9\u51fb `\u91cd\u65b0\u52a0\u8f7d`\uff0c\u4f60\u5e94\u8be5\u5c31\u80fd\u4f7f\u7528\u4e86\u3002\n\n\u5982\u679c\u4f60\u5c55\u5f00 `JENKINS X` \u5bfc\u822a\u7a97\u53e3\uff0c\u5e94\u8be5\u80fd\u770b\u5230\u4f60\u521b\u5efa\u5de5\u7a0b\u7684\u5b9e\u65f6\u66f4\u65b0\u754c\u9762\uff0c\u8fd8\u6709 Pull Request \u88ab\u521b\u5efa\u6216\u8005\u4ee3\u7801\u88ab\u5408\u5e76\u5230\u4e86 master\u3002\n\n<img src=\"/images/vscode.png\">\n\n### \u7279\u8272\n\n* \u6d4f\u89c8\u4f60\u6240\u5728\u56e2\u961f\u7684\u6240\u6709\u6d41\u6c34\u7ebf\u7684\u5b9e\u65f6\u66f4\u65b0\uff0c\u5305\u62ec\u53d1\u5e03\u6216\u8005 Pull Request \u6d41\u6c34\u7ebf\u7684\u5f00\u59cb\u548c\u7ed3\u675f\n* \u5728 VS Code \u7ec8\u7aef\u5185\u6253\u5f00\u6d41\u6c34\u7ebf\u6784\u5efa\u65e5\u5fd7\n* \u8f7b\u677e\u5730\u6d4f\u89c8 Jenkins \u6d41\u6c34\u7ebf\u9875\u9762\u3001git \u4ed3\u5e93\u3001\u6784\u5efa\u65e5\u5fd7\u6216\u8005\u5e94\u7528\n  * Jenkins X \u6d4f\u89c8\u5668\u7684\u53f3\u952e\u70b9\u51fb\n  * \u8fd8\u6709\u542f\u52a8\uff08\u505c\u6b62\uff09\u6d41\u6c34\u7ebf\uff01\n* \u901a\u8fc7\u4e00\u4e2a\u547d\u4ee4\u6253\u5f00 [DevPods](/zh/docs/reference/devpods/) \uff0c\u4fdd\u6301\u6e90\u7801\u4e0e\u4e91\u4e0a\u7684\u76f8\u540c\u5bb9\u5668\u955c\u50cf\u548c pod \u6a21\u677f\u540c\u6b65\n\n\n\n\n",
            "content/zh/docs/using-jx/common-tasks/import.md": "---\ntitle: \u5bfc\u5165\nlinktitle: \u5bfc\u5165\ndescription: \u5982\u4f55\u628a\u5df2\u7ecf\u5b58\u5728\u7684\u9879\u76ee\u5bfc\u5165 Jenkins X\n---\n\n\n\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e00\u4e9b\u6e90\u7801\uff0c\u5e0c\u671b\u5bfc\u5165 Jenkins X\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx import](/commands/jx_import/) \u547d\u4ee4\u3002\n\n```sh\ncd my-cool-app\njx import\n```\n\n\u5bfc\u5165\u5c06\u4f1a\u6267\u884c\u4e0b\u9762\u7684\u52a8\u4f5c\uff08\u63d0\u793a\u4f60\u6309\u7167\u8fd9\u4e2a\u65b9\u6cd5\u6765\uff09\uff1a\n\n* \u5982\u679c\u4f60\u7684\u6e90\u7801\u8fd8\u4e0d\u5728 git \u5e93\u4e2d\uff0c\u6dfb\u52a0\u8fdb\u53bb\n* \u5728\u7ed9\u5b9a\u7684 git \u670d\u52a1\u4e0a\u521b\u5efa\u4e00\u4e2a\u8fdc\u7a0b\u5e93\uff0c\u4f8b\u5982 [GitHub](https://github.com)\n* \u628a\u4f60\u7684\u4ee3\u7801\u63a8\u9001\u5230\u8fdc\u7a0b git \u670d\u52a1\n* \u6dfb\u52a0\u4efb\u4f55\u9700\u8981\u7684\u6587\u4ef6\u5230\u4f60\u7684\u5de5\u7a0b\u4e2d\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u7684\u8bdd\uff1a\n  * `Dockerfile` \u628a\u4f60\u7684\u5e94\u7528\u4f5c\u4e3a docker \u955c\u50cf\u8fdb\u884c\u6784\u5efa\n  * `Jenkinsfile` \u5b9e\u73b0\u6301\u7eed\u96c6\u6210\u3001\u6301\u7eed\u6784\u5efa\u6d41\u6c34\u7ebf\n  * helm chart \u8ba9\u4f60\u7684\u5e94\u7528\u5728 Kubernetes \u4e2d\u8fd0\u884c\n* \u4e3a\u4f60\u4eec\u56e2\u961f\u7684 Jenkins \u6ce8\u518c\u4e00\u4e2a webhook \u5230\u8fdc\u7a0b git \u4ed3\u5e93\n* \u4e3a\u4f60\u4eec\u56e2\u961f\u7684 Jenkins \u6dfb\u52a0\u8fd9\u4e2a git \u4ed3\u5e93\n* \u9996\u6b21\u89e6\u53d1\u6d41\u6c34\u7ebf\n\n### \u907f\u514d docker + helm\n\n\u5982\u679c\u4f60\u6b63\u5728\u5bfc\u5165\u7684\u4ed3\u5e93\u800c\u4e0d\u9700\u8981\u521b\u5efa docker \u955c\u50cf\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u53c2\u6570 `--no-draft` \uff0c\u5c31\u4e0d\u4f1a\u4f7f\u7528 Draft \u9ed8\u8ba4\u7684 Dockerfile \u548c helm chart\u3002\n\n### \u901a\u8fc7 URL \u5bfc\u5165\n\n\u5982\u679c\u4f60\u5e0c\u671b\u5bfc\u5165\u7684\u5de5\u7a0b\u5df2\u7ecf\u5728 git \u8fdc\u7a0b\u5e93\u4e2d\uff0c\u90a3\u4e48\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 `--url`\uff1a\n\n```sh\njx import --url https://github.com/jenkins-x/spring-boot-web-example.git\n```\n\n### \u5bfc\u5165 GitHub \u9879\u76ee\n\n\u5982\u679c\u4f60\u5e0c\u671b\u4ece GitHub \u7ec4\u7ec7\u4e2d\u5bfc\u5165\uff0c\u53ef\u4ee5\u4f7f\u7528\uff1a\n\n```sh\njx import --github --org myname\n```\n\n\u5c06\u4f1a\u63d0\u793a\u4f60\u9700\u8981\u5bfc\u5165\u7684\u5e93\u3002\u4f7f\u7528\u5149\u6807\u548c\u7a7a\u683c\u952e\u6765\u9009\u62e9\uff08\u53d6\u6d88\uff09\u8981\u5bfc\u5165\u7684\u5e93\u3002\n\n\u5982\u679c\u4f60\u5e0c\u671b\u9ed8\u8ba4\u5bfc\u5165\u6240\u6709\u7684\u5e93\uff08\u90a3\u4e48\u53cd\u9009\u4f60\u4e0d\u60f3\u8981\u7684\uff09\u6dfb\u52a0 `--all`\uff1a\n\n```sh\njx import --github --org myname --all\n```\n\n\u4e3a\u4e86\u8fc7\u6ee4\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u6dfb\u52a0\u53c2\u6570 `--filter`\n\n```sh\njx import --github --org myname --all --filter foo\n```\n\n",
            "content/zh/docs/using-jx/common-tasks/issues.md": "---\ntitle: \u95ee\u9898\nlinktitle: \u95ee\u9898\ndescription: \u95ee\u9898\u5904\u7406\n---\n\n\nJenkins X \u9ed8\u8ba4\u4f7f\u7528\u4f60\u7684 git \u63d0\u4f9b\u5546\u4e2d\u7684\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u6765\u521b\u5efa\u548c\u6d4f\u89c8\u95ee\u9898\u3002\n\n\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u5728 GitHub \u9879\u76ee\u4e2d\u7684\u6e90\u7801\u4e2d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u8f93\u5165 [jx create issue](/commands/jx_create_issue/)\uff1a\n\n```sh\njx create issue -t \"lets make things more awesome\"\n```\n\n\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\u5c31\u4f1a\u5728 GitHub \u4e0a\u88ab\u521b\u5efa\u3002\n\n\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u9879\u76ee\u4e0a\u901a\u8fc7 [jx get issues](/commands/jx_get_issues/) \u5217\u51fa\u6253\u5f00\u7684\u95ee\u9898\uff1a\n\n```sh\njx get issues\n```\n\n### \u4f7f\u7528\u4e0d\u540c\u7684\u95ee\u9898\u8ddf\u8e2a\n\n\u5982\u679c\u4f60\u5e0c\u671b\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 JIRA\uff0c\u4f60\u9996\u5148\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a JIRA \u670d\u52a1\u3002\n\n\u4f60\u53ef\u4ee5\u901a\u8fc7 [jx create tracker server](/commands/jx_create_tracker_server/) \u6ce8\u518c\u4f60\u7684 JIRA\u670d\u52a1\uff1a\n\n```sh\njx create tracker server jira https://mycompany.atlassian.net/\n```\n\n\u7136\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 [jx get tracker](/commands/jx_get_tracker/) \u6765\u67e5\u770b\u4f60\u7684\u95ee\u9898\u8ffd\u8e2a\u4e86\uff1a\n\n```sh\njx get tracker\n```\n\n\u7136\u540e\uff0c\u901a\u8fc7\u4e0b\u9762\u6dfb\u52a0\u4e00\u4e2a\u7528\u6237\u548c token\uff1a\n\n```sh\njx create tracker token -n jira  myEmailAddress\n```\n\n### \u914d\u7f6e\u9879\u76ee\u7684\u95ee\u9898\u8ddf\u8e2a\n\n\u5728\u4f60\u9879\u76ee\u7684\u6e90\u7801\u4e2d\u4f7f\u7528 [jx edit config](/commands/jx_edit_config/):\n\n```sh\njx edit config -k issues\n```\n\n\u7136\u540e\n\n* \u5982\u679c\u4f60\u6709\u591a\u4e2a\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\uff0c\u9009\u62e9\u4e00\u4e2a\u7528\u4e8e\u5f53\u524d\u9879\u76ee\n* \u5728\u95ee\u9898\u8ddf\u8e2a\u7cfb\u7edf\u4e2d\u8f93\u5165\u9879\u76ee\u540d\u79f0\uff08\u4f8b\u5982\uff1a\u5927\u5199\u7684 JIRA \u9879\u76ee\u540d\u79f0\uff09\n\n\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u4e00\u4e2a\u53eb\u505a `jenkins-x.xml` \u7684\u6587\u4ef6\u4f1a\u88ab\u4fee\u6539\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5e94\u8be5\u88ab\u52a0\u5230\u4f60\u7684 git \u5e93\u4e2d\u3002\n\n\n\n\n\n\n\n",
            "content/zh/docs/using-jx/common-tasks/kube-context.md": "---\ntitle: Kubernetes \u4e0a\u4e0b\u6587\nlinktitle: Kubernetes \u4e0a\u4e0b\u6587\ndescription: \u5904\u7406 Kubernetes \u4e0a\u4e0b\u6587\n---\n\n\nKubernetes \u547d\u4ee4\u884c\u5de5\u5177 [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) \u901a\u8fc7\u672c\u5730\u6587\u4ef6 `~/.kube/config`\uff08\u4f1a\u5728 `$KUBECONFIG` \u7684\u6587\u4ef6\uff09 \u8bb0\u5f55\u4f60\u4f7f\u7528\u7684 Kubernetes \u96c6\u7fa4\u548c\u547d\u540d\u7a7a\u95f4\u3002\n\n\u5982\u679c\u4f60\u60f3\u8981\u6539\u53d8\u547d\u540d\u7a7a\u95f4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 kubectl \u547d\u4ee4\u884c\uff1a\n\n```sh\nkubectl config set-context`kubectl config current-context` --namespace=foo\n```\n\n\u7136\u800c [jx](/commands/jx/) \u8fd8\u63d0\u4f9b\u4e86\u5f88\u591a\u6709\u7528\u7684\u547d\u4ee4\uff0c\u7528\u6765\u6539\u53d8\u96c6\u7fa4\u3001\u547d\u540d\u7a7a\u95f4\u6216\u73af\u5883\uff1a\n\n### \u5207\u6362\u73af\u5883\n\n\u4f7f\u7528 [jx environment](/commands/jx_environment/) \u6765\u5207\u6362 [\u73af\u5883](/zh/about/concepts/features/#environments)\n\n```sh\njx environment\n```\n\n\u4f60\u5c06\u4f1a\u770b\u5230\u5f53\u524d\u56e2\u961f\u7684\u73af\u5883\u5217\u8868\u3002\u4f7f\u7528\u65b9\u5411\u952e\u548c\u56de\u8f66\u6765\u9009\u62e9\u4f60\u60f3\u8981\u5207\u6362\u7684\u73af\u5883\u3002\u6216\u8005\u6309\u4e0b `Ctrl+C` \u7ec8\u6b62\uff0c\u4e0d\u5207\u6362\u73af\u5883\u3002\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u77e5\u9053\u60f3\u8981\u5207\u6362\u7684\u73af\u5883\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\uff1a\n\n```sh\njx env staging\n```\n\n### \u5207\u6362\u547d\u540d\u7a7a\u95f4\n\n\u4f7f\u7528 [jx namespace](/commands/jx_namespace/) \u5728 Kubernetes \u4e0d\u540c\u7684\u547d\u540d\u7a7a\u95f4\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u3002\n\n\n```sh\njx namespace\n```\n\n\u4f60\u4f1a\u770b\u5230 Kubernetes \u96c6\u7fa4\u4e2d\u6240\u6709\u547d\u540d\u7a7a\u95f4\u7684\u5217\u8868\u3002\u4f7f\u7528\u65b9\u5411\u952e\u548c\u56de\u8f66\u9009\u62e9\u4f60\u60f3\u8981\u5207\u6362\u7684\u3002\u6216\u8005\uff0c\u6309\u4e0b `Ctrl+C` \u4e2d\u65ad\uff0c\u4e0d\u5207\u6362\u547d\u540d\u7a7a\u95f4\u3002\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u77e5\u9053\u60f3\u8981\u5207\u6362\u7684 Kubernetes \u547d\u540d\u7a7a\u95f4\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\uff1a\n\n```sh\njx ns jx-production\n```\n\n### \u5207\u6362\u96c6\u7fa4\n\n\u4f7f\u7528 [jx context](/commands/jx_context/) \u5728\u4e0d\u540c\u7684 Kubernetes \u96c6\u7fa4\uff08\u6216\u8005\u4e0a\u4e0b\u6587\uff09\u4e4b\u95f4\u5207\u6362\u3002\n\n```sh\njx context\n```\n\n\u4f60\u4f1a\u5f97\u5230\u5f53\u524d\u673a\u5668\u4e0a\u6240\u6709\u4e0a\u4e0b\u6587\u7684\u5217\u8868\u3002\u4f7f\u7528\u65b9\u5411\u952e\u6216\u8005\u56de\u8f66\u9009\u62e9\u4f60\u60f3\u8981\u5207\u6362\u7684\u3002\u6216\u8005\uff0c\u6309\u4e0b `Ctrl+C` \u4e2d\u65ad\uff0c\u4e0d\u5207\u6362\u96c6\u7fa4\u3002\n\n\u6216\u8005\uff0c\u5982\u679c\u4f60\u77e5\u9053\u60f3\u8981\u5207\u6362\u7684 Kubernetes \u96c6\u7fa4\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u4f5c\u4e3a\u53c2\u6570\uff1a\n\n```sh\njx ctx gke_jenkinsx-dev_europe-west2-a_myuserid-foo\njx ctx minikube\n```\n\n### \u672c\u5730\u53d8\u5316\n\n\u5f53\u524d\u4f60\u901a\u8fc7 [kubectl](https://kubernetes.io/docs/reference/kubectl/overview/) \u5207\u6362 Kubernetes \u7684\u547d\u540d\u7a7a\u95f4\u6216\u4e0a\u4e0b\u6587\uff0c\u6216\u4e0a\u9762\u63d0\u5230\u7684\u547d\u4ee4\uff0c\u90a3\u4e48 Kubernetes \u4f1a\u628a **\u4f60\u6240\u6709\u7684\u7ec8\u7aef** \u90fd\u8fdb\u884c\u5207\u6362\uff0c\u56e0\u4e3a\u5b83\u66f4\u65b0\u7684\u662f\u5171\u4eab\u6587\u4ef6 (`~/.kube/config` \u6216 `$KUBECONFIG`)\u3002\n\n\u8fd9\u6837\u5f88\u65b9\u4fbf\u2014\u2014\u4f46\u6709\u65f6\u5019\u4f1a\u6709\u5371\u9669\u3002\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u60f3\u8981\u5728\u751f\u4ea7\u96c6\u7fa4\u4e0a\u505a\u4e00\u4e9b\u4e8b\u60c5\uff1b\u4f46\u662f\uff0c\u5fd8\u8bb0\u4e86\uff0c\u7136\u540e\u5728\u53e6\u5916\u4e00\u4e2a\u7ec8\u7aef\u4e0a\u6267\u884c\u547d\u4ee4\u8981\u5220\u9664\u4f60\u7684\u5f00\u53d1\u547d\u540d\u7a7a\u95f4\u4e0a\u6240\u6709\u7684 pod\u2014\u2014\u4f46\u662f\u4f60\u5fd8\u8bb0\u6765\u521a\u521a\u5207\u6362\u5230\u6765\u751f\u4ea7\u547d\u540d\u7a7a\u95f4\u4e0a\uff01\n\n\u56e0\u6b64\uff0c\u5982\u679c\u901a\u8fc7\u4e00\u4e2a shell \u547d\u4ee4\u6765\u5207\u6362 Kubernetes \u4e0a\u4e0b\u6587\u6216\u547d\u540d\u7a7a\u95f4\uff0c\u6709\u65f6\u5019\u662f\u5f88\u6709\u5e2e\u52a9\u7684\u3002\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u603b\u662f\u60f3\u8981\u770b\u4e00\u4e0b\u96c6\u7fa4\u4e2d\u7684\u751f\u4ea7\u73af\u5883\uff0c\u5c31\u53ea\u5728\u90a3\u4e2a shell \u4e2d\u4f7f\u7528\u90a3\u4e2a\u96c6\u7fa4\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u4e8b\u6545\u3002\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 [jx shell](/commands/jx_shell/) \u63d0\u793a\u4f60\u9009\u62e9\u4e0d\u540c\u7684 Kubernetes \u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\uff1a[jx context](/commands/jx_context/) \u547d\u4ee4\u3002\u7136\u800c\uff0c\u8fd9\u6837\u5207\u6362\u547d\u540d\u7a7a\u95f4\u6216\u96c6\u7fa4\u5c31\u53ea\u80fd\u5728\u5f53\u524d shell \u4e2d\u6709\u6548\uff01\n\n\u8fd8\u6709 [jx shell](/commands/jx_shell/) \u901a\u8fc7 [jx prompt](/commands/jx_prompt/) \u81ea\u52a8\u66f4\u65b0\u4f60\u7684\u547d\u4ee4\u63d0\u793a\u7b26\uff0c\u8fd9\u6837\u4f7f\u5f97\u4f60\u7684 shell \u5f88\u6e05\u695a\u4e0a\u4e0b\u6587\u6216\u547d\u540d\u7a7a\u95f4\u7684\u4fee\u6539\u3002\n\n### \u5b9a\u5236\u4f60\u7684 shell\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528 [jx prompt](/commands/jx_prompt/) \u628a\u5f53\u524d Kubernetes \u96c6\u7fa4\u548c\u547d\u540d\u7a7a\u95f4\u6dfb\u52a0\u5230\u4f60\u7684\u7ec8\u7aef\u63d0\u793a\u7b26\u4e2d\u3002\n\n\u8981\u4e3a [jx \u547d\u4ee4](/commands/jx/) \u6dfb\u52a0\u547d\u4ee4\u81ea\u52a8\u8865\u5145\uff0c\u5c1d\u8bd5 [jx \u81ea\u52a8\u8865\u5145](/commands/jx_completion/) \u3002\n\n\n\n",
            "content/zh/docs/using-jx/common-tasks/promote.md": "---\ntitle: \u5347\u7ea7\nlinktitle: \u5347\u7ea7\ndescription: \u5347\u7ea7\u4f60\u7684\u5e94\u7528\u65b0\u7248\u672c\u5230\u73af\u5883\n---\n\n\nJenkins X \u7684\u5347\u7ea7\u7b56\u7565\u914d\u7f6e\u4e3a `Auto` \u65f6\uff0c\u6301\u7eed\u90e8\u7f72\u6d41\u6c34\u7ebf\u901a\u8fc7\u914d\u7f6e\u597d\u7684[\u73af\u5883](/zh/about/concepts/features/#promotion)\u6765\u81ea\u52a8\u5316[\u5347\u7ea7](/zh/about/concepts/features/#promotion)\u7248\u672c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c`Staging` \u73af\u5883\u4f7f\u7528\u81ea\u52a8\u5347\u7ea7\uff0c`\u751f\u4ea7`\u73af\u5883\u4f7f\u7528`\u624b\u52a8`\u5347\u7ea7\u3002\n\n\n\u8981\u624b\u52a8\u5347\u7ea7\u5e94\u7528\u7684\u4e00\u4e2a\u7248\u672c\u5230\u7279\u5b9a\u73af\u5883\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 [jx promote](/commands/jx_promote/)\u3002\n\n```sh\njx promote myapp --version 1.2.3 --env production\n```\n\n\u8be5\u547d\u4ee4\u4f1a\u7b49\u5f85\u5347\u7ea7\u5b8c\u6210\uff0c\u5e76\u8bb0\u5f55\u8fc7\u7a0b\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 `--timeeout` \u4e3a\u5347\u7ea7\u7b49\u5f85\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\u3002\n\n\u4f8b\u5982\uff1a\u7b49\u5f855\u5c0f\u65f6\n\n\n```sh\njx promote myapp --version 1.2.3 --env production --timeout 5h\n```\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c `20m` \u6216 `10h30m` \u8fd9\u6837\u7684\u65f6\u95f4\u8868\u8fbe\u5f0f\u3002\n\n<img src=\"/images/overview.png\" class=\"img-thumbnail\">\n\n\n### \u53cd\u9988\n\n\u5982\u679c\u63d0\u4ea4\u6ce8\u91ca\u4e2d\u5f15\u7528\u4e86\u95ee\u9898\uff08\u4f8b\u5982\uff1a\u901a\u8fc7\u6587\u672c `fixes #123`\uff09\uff0c\u90a3\u4e48\uff0cJenkins X \u6d41\u6c34\u7ebf\u4f1a\u81ea\u52a8\u751f\u6210\u7c7b\u4f3c [jx \u53d1\u5e03](https://github.com/jenkins-x/jx/releases) \u7684\u53d1\u5e03\u8bb0\u5f55\u3002\n\n\u540c\u6837\u7684\uff0c\u5347\u7ea7\u5230 `Staging` \u6216 `\u751f\u4ea7` \u73af\u5883\u4e2d\u7684\u63d0\u4ea4\u65e5\u5fd7\u4e2d\u4e5f\u4f1a\u81ea\u52a8\u5173\u8054\u6bcf\u4e2a\u4fee\u590d\u7684\u95ee\u9898\uff0c\u5305\u62ec\u6709\u53d1\u5e03\u65e5\u5fd7\u548c\u5e94\u7528\u6240\u8fd0\u884c\u73af\u5883\u7684\u94fe\u63a5\u3002\n\n<img src=\"/images/issue-comment.png\" class=\"img-thumbnail\">\n\n\n\n\n\n\n\n",
            "content/zh/v3/admin/_index.md": "---\ntitle: \u7ba1\u7406\u5458\u6307\u5357\nlinktitle: \u7ba1\u7406\u5458\u6307\u5357\ntype: docs\ndescription: \u5b89\u88c5\u3001\u914d\u7f6e\u4ee5\u53ca\u5347\u7ea7\u60a8\u7684 Jenkins X\ndate: 2017-02-01\npublishdate: 2017-02-01\nlastmod: 2020-02-21\nweight: 200\naliases:\n  - /v3/admin/platform/\n---\n\n{{< admincards >}}\n",
            "content/zh/v3/admin/troubleshooting/_index.md": "---\ntitle: \u6545\u969c\u6392\u9664\nlinktitle: \u6545\u969c\u6392\u9664\ntype: docs\ndescription: \u5982\u4f55\u4fee\u590d\u60a8\u53ef\u80fd\u9047\u5230\u7684\u5e38\u89c1\u95ee\u9898\nweight: 350\n---\n\n\u8be5\u6307\u5357\u53ef\u4ee5\u5e2e\u52a9\u60a8\u4fee\u590d\u4e00\u4e9b\u5e38\u89c1\u95ee\u9898\uff1a",
            "content/zh/v3/admin/troubleshooting/webhooks.md": "---\ntitle: Webhooks\nlinktitle: Webhooks\ntype: docs\ndescription: \u5982\u4f55\u5bf9 webhooks \u95ee\u9898\u8fdb\u884c\u8bca\u65ad\u4ee5\u53ca\u4fee\u590d\nweight: 200\n---\n\n\u5f53\u4f60\u505a\u5982\u4e0b\u64cd\u4f5c\u65f6\uff0cWebhooks \u53ef\u4ee5\u89e6\u53d1 [lighthouse](https://github.com/jenkins-x/lighthouse)\uff1a\n\n* \u5408\u5e76\u63d0\u4ea4\u8bb0\u5f55\u5230\u4f60\u7684\u9ed8\u8ba4\u5206\u652f\n* \u521b\u5efa Pull Request\n* \u63a8\u9001\u4ee3\u7801\u5230 Pull Request \u5bf9\u5e94\u7684\u5206\u652f\n* \u5728 Pull Request \u4e0a\u6dfb\u52a0\u8bc4\u8bba\u6765\u89e6\u53d1 ChatOps\n\n\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u4e2d\u7684 webhooks \u65e0\u6548\u65f6\uff0cChatOps \u6216\u8005\u6d41\u6c34\u7ebf\u5c06\u4e0d\u4f1a\u88ab\u89e6\u53d1\u3002\n\n### \u524d\u7f6e\u6761\u4ef6\n\n`Ingress` \u4e2d `hook` \u5173\u4e8e [lighthouse](https://github.com/jenkins-x/lighthouse) \u914d\u7f6e\u6b63\u786e\u662f webhooks \u6709\u6548\u7684\u524d\u63d0\u3002\n\nIngress \u9ed8\u8ba4\u4f1a\u91c7\u7528\u6587\u4ef6 `jx-requirements.yml` \u4e2d `ingress.domain` \u6307\u5b9a\u7684\u57df\u540d\u3002\n\n### \u95ee\u9898\u8bca\u65ad\n        \n\u4f60\u53ef\u4ee5\u6839\u636e[\u5065\u5eb7\u6027\u6307\u5357](/v3/admin/setup/health/)\u6765\u68c0\u67e5\u4f60\u7cfb\u7edf\u4ee5\u53ca webhooks \u662f\u5426\u5065\u5eb7\u3002\n\n\u9996\u5148\uff0c\u8bf7\u786e\u4fdd ingress \u6b63\u5e38\n\n```bash \nkubectl get ing\n```\n\n\u4f60\u4f1a\u770b\u5230 `hook` \u7684\u5408\u6cd5\u57df\u540d\u5730\u5740\u3002\u7136\u540e\uff0c\u4f7f\u7528 curl \u547d\u4ee4\u505a\u4e00\u4e0b\u6d4b\u8bd5\uff1a\n\n```bash\ncurl -v http://hook-jx.1.2.3.4.nip.io/hook\n```\n\n\u68c0\u67e5\u4f60\u7684\u673a\u5668\u662f\u5426\u53ef\u4ee5\u8bbf\u95ee\u90a3\u4e2a\u5730\u5740\u3002\u53e6\u5916\uff0c\u68c0\u67e5\u662f\u5426\u6709\u4e00\u4e2a\u8fd0\u884c\u4e2d\u7684 Pod `lighthouse-webhook-*`\uff1f\n\n```bash\nkubectl get pod -l app=lighthouse-webhooks\n```\n\n\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7 `jx ui` \u67e5\u770b\u4ed6\u4eec\u7684\u72b6\u6001\u3001\u4e8b\u4ef6\u3001\u65e5\u5fd7\u7b49\u3002\n\n\u5982\u679c\u770b\u8d77\u6765\u90fd\u6b63\u5e38\u7684\u8bdd\uff0c\u7136\u540e\u6253\u5f00\u4f60\u96c6\u7fa4\u7684 git \u4ed3\u5e93\n\n```bash\nkubectl get environments\n```\n\n\u7136\u540e\uff0c\u70b9\u51fb\u94fe\u63a5 `GIT URL`\u3002\n\n\u6253\u5f00\u4f60\u7684 git \u63d0\u4f9b\u5546\u7684 **Webbooks** \u9875\u9762\uff0c \u67e5\u770b\u53d1\u9001\u5230 hook \u5730\u5740\u7684\u8bf7\u6c42\u662f\u5426\u6210\u529f\u3002\u5bf9\u4e8e GitHub\uff0c\u4f60\u53ef\u4ee5\u5728 **Settings** ->  **Webhooks** \u8fd9\u91cc\u627e\u5230\u3002\n\n\u5982\u679c\u4f60\u7684 git \u65e0\u6cd5\u8bbf\u95ee ingress \u5730\u5740\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u8f6c\u53d1\u901a\u9053\u3002\u8bf7\u67e5\u770b[\u501f\u52a9 ngrok \u4f7f\u7528 webhooks](/v3/admin/platforms/on-premises/#enable-webhooks) \n\n### AWS \u76f8\u5173\u7684\u95ee\u9898\n\n\u5982\u679c\u4f60\u5728\u4f7f\u7528 AWS\uff0c\u4f60\u53ef\u4ee5\u67e5\u770b [AWS \u5173\u4e8e\u4f7f\u7528 ELB](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-elb-load-balancer.html) \u7684\u6587\u6863\u3002",
            "content/zh/v3/develop/create-project/_index.md": "---\ntitle: \"\u521b\u5efa\u9879\u76ee\"\ndate: 2017-01-05\nweight: 30\ntype: docs\ndescription: >\n  \u73b0\u5728\uff0c\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\u5e73\u53f0\uff0c\u5f00\u59cb\u521b\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\u3002\n---\n\n\u60f3\u8981\u521b\u5efa\u6216\u8005\u5bfc\u5165\u9879\u76ee\u7684\u8bdd\uff0c\u4f60\u9700\u8981\u4e0b\u8f7d [jx 3.x \u4e8c\u8fdb\u5236\u6587\u4ef6](/v3/guides/jx3/)\uff0c\u5e76\u79fb\u52a8\u5230\u4f60\u7684\u73af\u5883\u53d8\u91cf `$PATH` \u4e0b\u3002\n\n\n## \u57fa\u4e8e\u5feb\u901f\u5165\u95e8\u521b\u5efa\u4e00\u4e2a\u65b0\u9879\u76ee\n\n\u901a\u8fc7\u547d\u4ee4 [jx project quickstart](https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_quickstart.md) \u6765\u6839\u636e\u5feb\u901f\u5165\u95e8\u7684\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u9879\u76ee:\n\n```bash \njx project quickstart\n``` \n\n\u6ce8\u610f\uff0c\u65e7\u7248\u672c Jenkins X 2.x \u7684\u522b\u540d `jx quickstart` \u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u6700\u7ec8\u4f1a\u88ab\u5f03\u7528\u3002\n\n\u67e5\u770b[\u5feb\u901f\u5165\u95e8\u6587\u6863](/docs/create-project/creating/)\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\n\n## \u5bfc\u5165\u5df2\u5b58\u5728\u7684\u9879\u76ee\n\n\u901a\u8fc7\u547d\u4ee4 [jx project import](https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project_import.md) \u53ef\u4ee5\u5bfc\u5165\u5df2\u6709\u9879\u76ee\uff1a\n\n```bash\njx project import\n```\n\n\u67e5\u770b[\u5bfc\u5165\u6587\u6863](/docs/create-project/creating/import/)\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\n\n\u6ce8\u610f\uff0c\u65e7\u7248\u672c\u7684 Jenkins X 2.x \u522b\u540d `jx import` \u4ecd\u7136\u652f\u6301\uff0c\u4f46\u6700\u7ec8\u4f1a\u88ab\u5f03\u7528\u3002\n\n### \u901a\u8fc7 Jenkinfiles \u5bfc\u5165\u9879\u76ee\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4f60\u5c1d\u8bd5\u5c06 Jenkins \u548c Tekton \u96c6\u6210\u5728 Jenkins X \u4e2d\uff0cJenkins X 3.x \u5305\u542b[\u6700\u65b0\u5bf9\u5bfc\u5165 Jenkinsfiles \u7684\u652f\u6301](jenkinsfile)\u3002\n\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u5feb\u901f\u5165\u95e8\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u754c\u9762\u5bfc\u5165\u9879\u76ee\uff0c\u590d\u7528\u5df2\u6709\u7684 `Jenkinsfile`\uff08\u751a\u81f3\u5728\u540c\u4e00\u4e2a\u9879\u76ee\u4e2d\u5c06\u4e8c\u8005\u7ed3\u5408\uff09\n\n## \u9876\u5c42\u5411\u5bfc\n               \n\u5982\u679c\u4f60\u53ea\u662f\u8fd0\u884c [jx project](https://github.com/jenkins-x/jx-project/blob/master/docs/cmd/project.md) \u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u9876\u5c42\u7684\u5411\u5bfc\uff0c\u4f1a\u63d0\u793a\u4f60\u9009\u62e9\u54ea\u79cd\u65b9\u5f0f\uff08\u4f8b\u5982\uff1aquickstart\u3001 import \u7b49\uff09\n\n## v3 \u5e26\u6765\u7684\u6539\u8fdb\n\n\u6211\u4eec\u5df2\u7ecf\u5728 2.x \u7248\u672c\u7684[jx import](https://jenkins-x.io/commands/jx_import/)\u57fa\u7840\u4e0a\u505a\u4e86\u5f88\u591a\u6539\u8fdb\uff1a\n\n* \u5f53\u5bfc\u5165 Jenkins X \u65f6\uff0c\u4f1a\u63d0\u793a\u4f60\u60f3\u8981\u4f7f\u7528\u54ea\u4e2a pipeline catalog \u7136\u540e[\u53ef\u4ee5\u7b80\u5355\u5730\u914d\u7f6e](/v3/about/extending/#pipeline-catalog)\n* \u8fd9\u4e2a\u5411\u5bfc\u4f1a\u6839\u636e\u8bed\u8a00\u7684\u68c0\u6d4b\u63d0\u793a\u4f60\u3002\u901a\u5e38\uff0c\u68c0\u6d4b\u662f\u53ef\u7528\u7684\uff0c\u4f8b\u5982\uff1a\u68c0\u6d4b\u5230 `maven` \u4f46\u662f\u4f60\u53ef\u80fd\u60f3\u8981\u9009\u62e9\u7279\u5b9a\u7248\u672c\uff08\u4f8b\u5982\uff1a`maven-java11`\uff09\n* \u5f53\u4f60\u5bfc\u5165\u7684\u9879\u76ee\u4e2d\u5305\u542b\u4e86 `Jenkinfiles` \u65f6\uff0c\u53ef\u4ee5\u6709\u5982\u4e0b\u7684\u9009\u62e9\uff1a\n  * \u5ffd\u7565 `Jenkinsfile` \u5e76\u8ba9 Jenkins X \u901a\u8fc7 Tekton \u81ea\u52a8\u5316 CI/CD \n  * \u4f7f\u7528 Jenkins X \u5df2\u7ecf\u914d\u7f6e\u597d\u7684\u4e00\u4e2a Jenkins \u670d\u52a1\u6765\u5b9e\u73b0 CI\n  * \u5728 Jenkins X \u4e2d\u589e\u52a0\u4e00\u4e2a\u7531 GitOps \u7ba1\u7406\u7684\u65b0\u7684 Jenkins \u670d\u52a1\n  * \u901a\u8fc7 Tekton \u4f7f\u7528 Jenkinfile Runner\n  \n\n### 2.x \u7684\u53d8\u66f4\uff1a\n\n\u5bf9\u4e8e\u5df2\u7ecf\u77e5\u9053 [Jenkins X](https://jenkins-x.io/) \u5e76\u4e14\u4e4b\u524d\u4f7f\u7528\u8fc7 [jx import](https://jenkins-x.io/commands/jx_import/)\uff0c\u90a3\u4e48\u521b\u5efa\u9879\u76ee\u7684\u5411\u5bfc\u6709\u4e00\u4e9b\u4e0d\u540c\uff1a\n\n* \u4ee5\u4e0b\u547d\u4ee4\u4f1a\u6709\u4e9b\u4e0d\u540c\uff1a\n\n  * `jx create import` \u53d8\u4e3a `jx project import`\n  * `jx create quickstart` \u53d8\u4e3a `jx project quickstart`\n  * `jx create project` \u53d8\u4e3a `jx project`\n  * `jx create spring` \u53d8\u4e3a `jx project spring`\n"
        }
    },
    "project_structure": {
        "files": [
            ".gitignore",
            ".gitmodules",
            ".gitpod.Dockerfile",
            ".gitpod.yml",
            ".pre-commit-config.yaml",
            ".spelling",
            "CONTRIBUTING.md",
            "Dockerfile",
            "LICENSE",
            "Localization_Chinese.md",
            "Makefile",
            "OWNERS",
            "OWNERS_ALIASES",
            "README.md",
            "README_CN.md",
            "config.toml",
            "docker-compose.yml",
            "go.mod",
            "go.sum",
            "package-lock.json",
            "package.json",
            "regen-plugins.sh"
        ],
        "folders": [
            ".github",
            ".lighthouse",
            "assets",
            "charts",
            "content",
            "dependency-matrix",
            "layouts",
            "scripts",
            "static"
        ]
    }
}