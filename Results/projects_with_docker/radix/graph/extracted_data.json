{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"graph\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Radix Graph API\",\n  \"main\": \"src/index.js\",\n  \"repository\": \"https://github.com/cygnusb2/radix-graph\",\n  \"author\": \"solocommand\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"yarn; ./node_modules/.bin/gulp\"\n  },\n  \"dependencies\": {\n    \"@limit0/graphql-custom-types\": \"^1.0.1\",\n    \"@limit0/mongoose-graphql-pagination\": \"^1.1.3\",\n    \"@sendgrid/mail\": \"^6.3.1\",\n    \"apollo-server-express\": \"^1.3.6\",\n    \"bcrypt\": \"^1.0.3\",\n    \"bluebird\": \"^3.5.1\",\n    \"body-parser\": \"^1.18.2\",\n    \"cors\": \"^2.8.4\",\n    \"deep-assign\": \"^2.0.0\",\n    \"deepmerge\": \"^2.1.0\",\n    \"elasticsearch\": \"^15.0.0\",\n    \"envalid\": \"^4.1.4\",\n    \"express\": \"^4.16.2\",\n    \"express-http-proxy\": \"^1.2.0\",\n    \"graphql\": \"^0.13.2\",\n    \"graphql-import\": \"^0.4.3\",\n    \"graphql-tools\": \"^2.21.0\",\n    \"graphql-type-json\": \"^0.2.1\",\n    \"helmet\": \"^3.11.0\",\n    \"http-errors\": \"^1.6.2\",\n    \"jsonwebtoken\": \"^8.3.0\",\n    \"lodash\": \"^4.17.5\",\n    \"moment\": \"^2.20.1\",\n    \"mongoose\": \"^5.1.2\",\n    \"mongoose-elasticsearch-xp\": \"^5.4.1\",\n    \"object-hash\": \"^1.2.0\",\n    \"object-path\": \"^0.11.4\",\n    \"shortid\": \"^2.2.8\",\n    \"slug\": \"^0.9.1\",\n    \"unique-push-id\": \"^1.0.2\",\n    \"uuid\": \"^3.2.1\",\n    \"uuid-parse\": \"^1.0.0\",\n    \"validator\": \"^9.4.0\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.2\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"eslint\": \"^4.16.0\",\n    \"eslint-config-airbnb-base\": \"^12.1.0\",\n    \"eslint-plugin-import\": \"^2.8.0\",\n    \"gulp\": \"^3.9.1\",\n    \"mocha\": \"^5.0.0\",\n    \"mocha-junit-reporter\": \"^1.17.0\",\n    \"nyc\": \"^11.4.1\",\n    \"sinon\": \"^4.2.2\",\n    \"supertest\": \"^3.0.0\"\n  }\n}\n"
        },
        "database": "MongoDB",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: '3'\nservices:\n  graph:\n    tty: true\n    image: node:8\n    entrypoint: yarn start\n    working_dir: /app\n    volumes:\n      - ./graph:/app:cached\n      - graph_node_modules:/app/node_modules:cached\n    depends_on:\n      - mongo\n      - server\n    ports:\n      - \"${PORT-8700}:${PORT-8700}\"\n    environment:\n      PORT: ${PORT-8700}\n      APP_HOST: \"${APP_HOST-server}:80\"\n      MONGO_DSN: ${MONGO_DSN-mongodb://mongo/radix}\n\n  server_install:\n    image: radix_server:latest\n    entrypoint: /app/entrypoint.sh\n    volumes:\n      - ./server:/var/www/html:cached\n      - server_vendor:/var/www/html/vendor:cached\n      - server_cache:/var/www/html/var/cache:cached\n      - server_composer:/var/www/.composer/cache:cached\n    environment:\n      APP: ${APP-cygnus:ofcr}\n      COMPOSER_ALLOW_SUPERUSER: 1\n      COMPOSER_NO_INTERACTION: 1\n    networks:\n      - default\n\n  server:\n    tty: true\n    build:\n      context: server/\n      dockerfile: docker/Dockerfile\n    image: radix_server:latest\n    ports:\n      - \"${RADIX_APP_PORT-8710}:80\"\n    volumes:\n      - ./server:/var/www/html:cached\n      - server_vendor:/var/www/html/vendor:cached\n      - server_cache:/var/www/html/var/cache:cached\n    environment:\n      APP: ${APP-cygnus:ofcr}\n    depends_on:\n      - server_install\n      - redis\n      - mongo\n    networks:\n      - default\n\n  mongo:\n    image: mongo:3.4\n    volumes:\n      - mongo:/data/db:cached\n    ports:\n      - \"${RADIX_DB_PORT-8701}:27017\"\n    networks:\n      default:\n        aliases:\n          - \"${RADIX_MONGO_HOST-mongo}\"\n  redis:\n    image: redis:alpine\n    ports:\n      - \"${RADIX_REDIS_PORT-8702}:6379\"\n    networks:\n      default:\n        aliases:\n          - \"${RADIX_REDIS_HOST-redis}\"\n\n  admin_install:\n    tty: true\n    image: danlynn/ember-cli:3.1.2\n    volumes:\n      - ./admin:/myapp:cached\n      - ember_node_modules:/myapp/node_modules:cached\n      - ember_tmp:/myapp/tmp\n    restart: on-failure\n    working_dir: /myapp\n    entrypoint: yarn\n\n  admin:\n    tty: true\n    image: danlynn/ember-cli:3.1.2\n    ports:\n      - \"${EMBER_SERVE_PORT-8705}:${EMBER_SERVE_PORT-8705}\"\n      - \"${EMBER_LIVER_PORT-8706}:${EMBER_LIVER_PORT-8706}\"\n      - \"${EMBER_TESTS_PORT-8707}:${EMBER_TESTS_PORT-8707}\"\n    depends_on:\n      - admin_install\n    networks:\n      - default\n    volumes:\n      - ./admin:/myapp:cached\n      - ember_node_modules:/myapp/node_modules:cached\n      - ember_tmp:/myapp/tmp\n    restart: on-failure\n    entrypoint: \"./node_modules/.bin/ember server --port ${EMBER_SERVE_PORT-8705} --live-reload-port ${EMBER_LIVER_PORT-8706} --proxy ${EMBER_PROXY-http://docker.for.mac.host.internal:8700}\"\n\nvolumes:\n  server_cache:\n    driver_opts:\n      type: tmpfs\n      device: tmpfs\n  server_vendor: {}\n  server_composer: {}\n  mongo: {}\n  ember_node_modules: {}\n  graph_node_modules: {}\n  ember_tmp:\n    driver_opts:\n      type: tmpfs\n      device: tmpfs\nnetworks:\n  default: ~\n",
            "graph/Dockerfile": "FROM node:8\n\nWORKDIR /app\nCOPY . /app\n\nEXPOSE 8100\n\nENV NODE_ENV production\nENTRYPOINT [\"node\", \"src/index.js\"]\n",
            "Jenkinsfile": "node {\n  def phpBuilder = docker.image(\"scomm/php5.6:latest\")\n  def nodeBuilder = docker.image(\"scomm/node-build:latest\")\n  phpBuilder.pull()\n  nodeBuilder.pull()\n\n  // Test\n  try {\n    stage('Checkout') {\n      checkout scm\n    }\n\n    nodeBuilder.inside(\"-v ${env.WORKSPACE}/admin:/var/www/html -u 0:0 --entrypoint=''\") {\n      stage('Build App') {\n        sh \"cd /var/www/html && yarn install --silent\"\n      }\n      stage('Test App') {\n        sh \"cd /var/www/html && ember build\"\n      }\n    }\n\n    phpBuilder.inside(\"-v ${env.WORKSPACE}/server:/var/www/html -u 0:0 --entrypoint=''\") {\n      withEnv(['SYMFONY_ENV=test', 'APP_ENV=test']) {\n        stage('Build Server') {\n          withCredentials([usernamePassword(credentialsId: 'github-login-scommbot', passwordVariable: 'TOKEN', usernameVariable: 'USER')]) {\n            sh \"cd /var/www/html && bin/composer config -g github-oauth.github.com $TOKEN\"\n          }\n          sh \"cd /var/www/html && bin/composer install --no-interaction\"\n        }\n        stage('Test Server') {\n          sh \"cd /var/www/html && bin/phpunit --log-junit unitTestReport.xml\"\n          junit \"server/unitTestReport.xml\"\n        }\n      }\n    }\n  } catch (e) {\n    slackSend color: 'bad', message: \"Failed testing ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|View>)\"\n    throw e\n  }\n}\n",
            ".circleci/config.yml": "# This configuration was automatically generated from a CircleCI 1.0 config.\n# It should include any build commands you had along with commands that CircleCI\n# inferred from your project structure. We strongly recommend you read all the\n# comments in this file to understand the structure of CircleCI 2.0, as the idiom\n# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather\n# than the prescribed lifecycle of 1.0. In general, we recommend using this generated\n# configuration as a reference rather than using it in production, though in most\n# cases it should duplicate the execution of your original 1.0 config.\nversion: 2\njobs:\n  build:\n    working_directory: /var/www/html\n    parallelism: 1\n    shell: /bin/bash --login\n    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.\n    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .\n    environment:\n      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts\n      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results\n      APP_ENV: test\n    # In CircleCI 1.0 we used a pre-configured image with a large number of languages and other packages.\n    # In CircleCI 2.0 you can now specify your own image, or use one of our pre-configured images.\n    # The following configuration line tells CircleCI to use the specified docker image as the runtime environment for you job.\n    # We have selected a pre-built image that mirrors the build environment we use on\n    # the 1.0 platform, but we recommend you choose an image more tailored to the needs\n    # of each job. For more information on choosing an image (or alternatively using a\n    # VM instead of a container) see https://circleci.com/docs/2.0/executor-types/\n    # To see the list of pre-built images that CircleCI provides for most common languages see\n    # https://circleci.com/docs/2.0/circleci-images/\n    docker:\n    - image: scomm/php5.6-apache\n    - image: circleci/mongo:3.4-ram\n    - image: redis:alpine\n    - image: elasticsearch:1.4.5\n    steps:\n    - checkout\n    - run: mv /var/www/html/server /var/www/ ; rm -rf /var/www/html ; mv /var/www/server /var/www/html\n    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS\n    - run: echo \"127.0.0.1 mongo.platform.as3.io\" >> /etc/hosts\n    - run: echo \"127.0.0.1 mongo.legacy.as3.io\" >> /etc/hosts\n    - run: echo \"127.0.0.1 mongo.analytics.as3.io\" >> /etc/hosts\n    - run: echo \"127.0.0.1 redis.platform.as3.io\" >> /etc/hosts\n    - run: echo \"127.0.0.1 redis.analytics.as3.io\" >> /etc/hosts\n    - restore_cache:\n        keys:\n        - v1-dep-{{ .Branch }}-\n        - v1-dep-master-\n        - v1-dep-\n    - run: bin/composer install --no-interaction\n    - save_cache:\n        key: v1-dep-{{ .Branch }}-{{ epoch }}\n        paths:\n        - vendor/\n        - ~/.composer/cache\n    - run: bin/phpunit --log-junit $CIRCLE_TEST_REPORTS/phpunit/junit.xml\n    - store_test_results:\n        path: /tmp/circleci-test-results\n    - store_artifacts:\n        path: /tmp/circleci-artifacts\n    - store_artifacts:\n        path: /tmp/circleci-test-results\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "gulpfile.js",
            "package.json",
            "yarn.lock"
        ],
        "folders": [
            "src"
        ]
    }
}