{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "requirements.txt": "# Packages required to build DAOS.\n-r requirements-build.txt\n# Packages required to run ftest.\n-r requirements-ftest.txt\n# Packages required to run unit testing.\n-r requirements-utest.txt\n# Packages used for linting.\n-r utils/cq/requirements.txt\n"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "utils/docker/examples/.env": "# Copyright 2021-2023 Intel Corporation\n# All rights reserved.\n#\n# Configuration file for DAOS docker compose\n\n# XXX Arguments which must be defined XXX\n# DAOS_CLIENT_UNAME=\"foo\"\n# DAOS_CLIENT_UID=\"1001\"\n# DAOS_CLIENT_GNAME=\"bar\"\n# DAOS_CLIENT_GID=\"1001\"\n\n# DAOS client runtime variables\nDAOS_AGENT_RUNTIME_DIR=\"/var/run/daos_agent\"\n\n# DAOS Authentication runtime variables\nDAOS_SERVER_CERTS_TXZ=\"secrets/daos_server-certs.txz\"\nDAOS_ADMIN_CERTS_TXZ=\"secrets/daos_admin-certs.txz\"\nDAOS_AGENT_CERTS_TXZ=\"secrets/daos_agent-certs.txz\"\n\n# Optional Arguments which should not be updated\nBUST_CACHE=\"\"\nLINUX_DISTRO=\"el8\"\nLINUX_IMAGE_NAME=\"rockylinux/rockylinux\"\nLINUX_IMAGE_TAG=\"8.9\"\nDAOS_REPOS=\"https://packages.daos.io/v2.4.1/EL8/packages/x86_64/\"\nDAOS_GPG_KEYS=\"https://packages.daos.io/v2.4.1/RPM-GPG-KEY-2023\"\nDAOS_REPOS_NOAUTH=\"\"\nDAOS_VERSION=\"2.4.1-2.el8\"\nDAOS_DOCKER_IMAGE_NSP=\"daos\"\nDAOS_DOCKER_IMAGE_TAG=\"v2.4.1\"\n",
            "utils/docker/examples/daos-client/el8/Dockerfile": "# Copyright 2021-2024 Intel Corporation\n# All rights reserved.\n#\n# 'recipe' for building a base RHEL DAOS client docker image\n#\n# This Dockerfile accept the following input build arguments:\n# - LINUX_DISTRO             Linux distribution identifier (mandatory)\n# - DAOS_DOCKER_IMAGE_NSP    Namespace identifier of the base DAOS docker image (mandatory)\n# - DAOS_DOCKER_IMAGE_TAG    Tag identifier of the DAOS client docker image (mandatory)\n# - DAOS_VERSION             Version of DAOS to use (mandatory)\n\n# Pull base image\nARG\tLINUX_DISTRO=\"\"\nARG\tDAOS_DOCKER_IMAGE_NSP=\"\"\nARG\tDAOS_DOCKER_IMAGE_TAG=\"\"\nFROM\t\"$DAOS_DOCKER_IMAGE_NSP/daos-base-$LINUX_DISTRO:$DAOS_DOCKER_IMAGE_TAG\"\nLABEL\tmaintainer=\"daos@daos.groups.io\"\n\n# Install base DAOS package\nARG\tDAOS_VERSION=\"\"\nRUN\tfor it in DAOS_VERSION ; do                                                                \\\n\t\tif eval \"[[ -z \\$$it ]]\" ; then                                                    \\\n\t\t\techo \"[ERROR] Docker build argument $it is not defined\" ;                  \\\n\t\t\texit 1 ;                                                                   \\\n\t\tfi ;                                                                               \\\n\tdone &&                                                                                    \\\n\techo \"[INFO] Installing DAOS\" ;                                                            \\\n\tdnf install                                                                                \\\n\t\tdaos-client-${DAOS_VERSION} &&                                                     \\\n\tdnf clean all\n\n# Install minimal DAOS agent configuration file\nCOPY\tdaos_agent.yml /etc/daos/daos_agent.yml\n\n# Define entrypoint and cmd:\n# - ENTRYPOINT for the command to run\n# - CMD for the default arguments\nENTRYPOINT [\"/usr/bin/bash\"]\nCMD [\"-i\"]\n",
            "Jenkinsfile": "#!/usr/bin/groovy\n/* groovylint-disable-next-line LineLength */\n/* groovylint-disable DuplicateMapLiteral, DuplicateNumberLiteral */\n/* groovylint-disable DuplicateStringLiteral, NestedBlockDepth, VariableName */\n/* Copyright 2019-2024 Intel Corporation\n * Copyright 2025 Hewlett Packard Enterprise Development LP\n * All rights reserved.\n *\n * This file is part of the DAOS Project. It is subject to the license terms\n * in the LICENSE file found in the top-level directory of this distribution\n * and at https://img.shields.io/badge/License-BSD--2--Clause--Patent-blue.svg.\n * No part of the DAOS Project, including this file, may be copied, modified,\n * propagated, or distributed except according to the terms contained in the\n * LICENSE file.\n */\n\n// To use a test branch (i.e. PR) until it lands to master\n// I.e. for testing library changes\n//@Library(value='pipeline-lib@your_branch') _\n\n/* groovylint-disable-next-line CompileStatic */\njob_status_internal = [:]\n\n// groovylint-disable-next-line MethodParameterTypeRequired, NoDef\nvoid job_status_update(String name=env.STAGE_NAME, def value=currentBuild.currentResult) {\n    jobStatusUpdate(job_status_internal, name, value)\n}\n\n// groovylint-disable-next-line MethodParameterTypeRequired, NoDef\nvoid job_step_update(def value=currentBuild.currentResult) {\n    // job_status_update(env.STAGE_NAME, value)\n    jobStatusUpdate(job_status_internal, env.STAGE_NAME, value)\n}\n\nMap nlt_test() {\n    // groovylint-disable-next-line NoJavaUtilDate\n    Date startDate = new Date()\n    try {\n        unstash('nltr')\n    } catch (e) {\n        print 'Unstash failed, results from NLT stage will not be included'\n    }\n    sh label: 'Fault injection testing using NLT',\n       script: './ci/docker_nlt.sh --class-name el8.fault-injection fi'\n    List filesList = []\n    filesList.addAll(findFiles(glob: '*.memcheck.xml'))\n    int vgfail = 0\n    int vgerr = 0\n    if (filesList) {\n        String rcs = sh label: 'Check for Valgrind errors',\n               script: \"grep -E '<error( |>)' ${filesList.join(' ')} || true\",\n               returnStdout: true\n        if (rcs) {\n            vfail = 1\n        }\n        String suite = sanitizedStageName()\n        junitSimpleReport suite: suite,\n                          file: suite + '_valgrind_results.xml',\n                          fails: vgfail,\n                          errors: vgerr,\n                          name: 'Valgrind_Memcheck',\n                          class: 'Valgrind',\n                          message: 'Valgrind Memcheck error detected',\n                          testdata: rcs\n    }\n    int runTime = durationSeconds(startDate)\n    Map runData = ['nlttest_time': runTime]\n    return runData\n}\n\n// For master, this is just some wildly high number\nString next_version = '1000'\n\n// Don't define this as a type or it loses it's global scope\ntarget_branch = env.CHANGE_TARGET ? env.CHANGE_TARGET : env.BRANCH_NAME\nString sanitized_JOB_NAME = JOB_NAME.toLowerCase().replaceAll('/', '-').replaceAll('%2f', '-')\n\n// bail out of branch builds that are not on a whitelist\nif (!env.CHANGE_ID &&\n    (!env.BRANCH_NAME.startsWith('weekly-testing') &&\n     !env.BRANCH_NAME.startsWith('release/') &&\n     !env.BRANCH_NAME.startsWith('feature/') &&\n     !env.BRANCH_NAME.startsWith('ci-') &&\n     env.BRANCH_NAME != 'master')) {\n    currentBuild.result = 'SUCCESS'\n    return\n}\n\n// The docker agent setup and the provisionNodes step need to know the\n// UID that the build agent is running under.\ncached_uid = 0\nInteger getuid() {\n    if (cached_uid == 0) {\n        cached_uid = sh(label: 'getuid()',\n                        script: 'id -u',\n                        returnStdout: true).trim()\n    }\n    return cached_uid\n}\n\nvoid fixup_rpmlintrc() {\n    if (env.SCONS_FAULTS_ARGS != 'BUILD_TYPE=dev') {\n        return\n    }\n\n    List go_bins = ['/usr/bin/dmg',\n                    '/usr/bin/daos',\n                    '/usr/bin/daos_agent',\n                    '/usr/bin/hello_drpc',\n                    '/usr/bin/daos_firmware',\n                    '/usr/bin/daos_admin',\n                    '/usr/bin/daos_server',\n                    '/usr/bin/ddb']\n\n    String content = readFile(file: 'utils/rpms/daos.rpmlintrc') + '\\n\\n' +\n                     '# https://daosio.atlassian.net/browse/DAOS-11534\\n'\n\n    go_bins.each { bin ->\n        content += 'addFilter(\"W: position-independent-executable-suggested ' + bin + '\")\\n'\n    }\n\n    writeFile(file: 'utils/rpms/daos.rpmlintrc', text: content)\n}\n\nString vm9_label(String distro) {\n    return cachedCommitPragma(pragma: distro + '-VM9-label',\n                              def_val: cachedCommitPragma(pragma: 'VM9-label',\n                                                          def_val: params.FUNCTIONAL_VM_LABEL))\n}\n\nvoid rpm_test_post(String stage_name, String node) {\n    sh label: 'Fetch and stage artifacts',\n       script: 'hostname; ssh -i ci_key jenkins@' + node + ' ls -ltar /tmp; mkdir -p \"' +  env.STAGE_NAME + '/\" && ' +\n               'scp -i ci_key jenkins@' + node + ':/tmp/{{suite_dmg,daos_{server_helper,{control,agent}}}.log,daos_server.log.*} \"' +\n               env.STAGE_NAME + '/\"'\n    archiveArtifacts artifacts: env.STAGE_NAME + '/**'\n    job_status_update()\n}\n\n/**\n * Update default commit pragmas based on files modified.\n */\nMap update_default_commit_pragmas() {\n    String default_pragmas_str = sh(script: 'ci/gen_commit_pragmas.py --target origin/' + target_branch,\n                                    returnStdout: true).trim()\n    println(\"pragmas from gen_commit_pragmas.py:\")\n    println(default_pragmas_str)\n    if (default_pragmas_str) {\n        updatePragmas(default_pragmas_str, false)\n    }\n}\n\npipeline {\n    agent { label 'lightweight' }\n\n    environment {\n        BULLSEYE = credentials('bullseye_license_key')\n        GITHUB_USER = credentials('daos-jenkins-review-posting')\n        SSH_KEY_ARGS = '-ici_key'\n        CLUSH_ARGS = \"-o$SSH_KEY_ARGS\"\n        TEST_RPMS = cachedCommitPragma(pragma: 'RPM-test', def_val: 'true')\n        COVFN_DISABLED = cachedCommitPragma(pragma: 'Skip-fnbullseye', def_val: 'true')\n        REPO_FILE_URL = repoFileUrl(env.REPO_FILE_URL)\n        SCONS_FAULTS_ARGS = sconsFaultsArgs()\n    }\n\n    options {\n        // preserve stashes so that jobs can be started at the test stage\n        preserveStashes(buildCount: 5)\n        ansiColor('xterm')\n        buildDiscarder(logRotator(artifactDaysToKeepStr: '100', daysToKeepStr: '730'))\n    }\n\n    parameters {\n        string(name: 'BuildPriority',\n               /* groovylint-disable-next-line UnnecessaryGetter */\n               defaultValue: getPriority(),\n               description: 'Priority of this build.  DO NOT USE WITHOUT PERMISSION.')\n        string(name: 'TestTag',\n               defaultValue: '',\n               description: 'Test-tag to use for this run (i.e. pr, daily_regression, full_regression, etc.)')\n        // string(name: 'TestNvme',\n        //        defaultValue: '',\n        //        description: 'The launch.py --nvme argument to use for the Functional test ' +\n        //                     'stages of this run (i.e. auto, auto_md_on_ssd, auto:-3DNAND, ' +\n        //                     '0000:81:00.0, etc.).  Does not apply to MD on SSD stages.')\n        string(name: 'BuildType',\n               defaultValue: '',\n               description: 'Type of build.  Passed to scons as BUILD_TYPE.  (I.e. dev, release, debug, etc.).  ' +\n                            'Defaults to release on an RC or dev otherwise.')\n        string(name: 'TestRepeat',\n               defaultValue: '',\n               description: 'Test-repeat to use for this run.  Specifies the ' +\n                            'number of times to repeat each functional test. ' +\n                            'CAUTION: only use in combination with a reduced ' +\n                            'number of tests specified with the TestTag ' +\n                            'parameter.')\n        string(name: 'TestProvider',\n               defaultValue: '',\n               description: 'Test-provider to use for the non-Provider Functional Hardware test ' +\n                            'stages.  Specifies the default provider to use the daos_server ' +\n                            'config file when running functional tests (the launch.py ' +\n                            '--provider argument; i.e. \"ucx+dc_x\", \"ofi+verbs\", \"ofi+tcp\")')\n        booleanParam(name: 'CI_BUILD_PACKAGES_ONLY',\n                     defaultValue: false,\n                     description: 'Only build RPM and DEB packages, Skip unit tests.')\n        string(name: 'CI_RPM_TEST_VERSION',\n               defaultValue: '',\n               description: 'Package version to use instead of building. example: 1.3.103-1, 1.2-2')\n        // TODO: add parameter support for per-distro CI_PR_REPOS\n        string(name: 'CI_PR_REPOS',\n               defaultValue: '',\n               description: 'Additional repository used for locating packages for the build and ' +\n                            'test nodes, in the project@PR-number[:build] format.')\n        string(name: 'CI_HARDWARE_DISTRO',\n               defaultValue: '',\n               description: 'Distribution to use for CI Hardware Tests')\n        string(name: 'CI_EL8_TARGET',\n               defaultValue: '',\n               description: 'Image to used for EL 8 CI tests.  I.e. el8, el8.3, etc.')\n        string(name: 'CI_EL9_TARGET',\n               defaultValue: '',\n               description: 'Image to used for EL 9 CI tests.  I.e. el9, el9.1, etc.')\n        string(name: 'CI_LEAP15_TARGET',\n               defaultValue: '',\n               description: 'Image to use for OpenSUSE Leap CI tests.  I.e. leap15, leap15.2, etc.')\n        string(name: 'CI_UBUNTU20.04_TARGET',\n               defaultValue: '',\n               description: 'Image to used for Ubuntu 20 CI tests.  I.e. ubuntu20.04, etc.')\n        booleanParam(name: 'CI_RPM_el8_NOBUILD',\n                     defaultValue: false,\n                     description: 'Do not build RPM packages for EL 8')\n        booleanParam(name: 'CI_RPM_el9_NOBUILD',\n                     defaultValue: false,\n                     description: 'Do not build RPM packages for EL 9')\n        booleanParam(name: 'CI_RPM_leap15_NOBUILD',\n                     defaultValue: false,\n                     description: 'Do not build RPM packages for Leap 15')\n        booleanParam(name: 'CI_DEB_Ubuntu20_NOBUILD',\n                     defaultValue: false,\n                     description: 'Do not build DEB packages for Ubuntu 20')\n        booleanParam(name: 'CI_ALLOW_UNSTABLE_TEST',\n                     defaultValue: false,\n                     description: 'Continue testing if a previous stage is Unstable')\n        booleanParam(name: 'CI_UNIT_TEST',\n                     defaultValue: true,\n                     description: 'Run the Unit Test on EL 8 test stage')\n        booleanParam(name: 'CI_UNIT_TEST_MEMCHECK',\n                     defaultValue: true,\n                     description: 'Run the Unit Test with memcheck on EL 8 test stage')\n        booleanParam(name: 'CI_FI_el8_TEST',\n                     defaultValue: true,\n                     description: 'Run the Fault injection testing on EL 8 test stage')\n        booleanParam(name: 'CI_MORE_FUNCTIONAL_PR_TESTS',\n                     defaultValue: false,\n                     description: 'Enable more distros for functional CI tests')\n        booleanParam(name: 'CI_FUNCTIONAL_el8_VALGRIND_TEST',\n                     defaultValue: false,\n                     description: 'Run the Functional on EL 8 with Valgrind test stage')\n        booleanParam(name: 'CI_FUNCTIONAL_el8_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional on EL 8 test stage')\n        booleanParam(name: 'CI_FUNCTIONAL_el9_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional on EL 9 test stage')\n        booleanParam(name: 'CI_FUNCTIONAL_leap15_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional on Leap 15 test stage' +\n                                  '  Requires CI_MORE_FUNCTIONAL_PR_TESTS')\n        booleanParam(name: 'CI_FUNCTIONAL_ubuntu20_TEST',\n                     defaultValue: false,\n                     description: 'Run the Functional on Ubuntu 20.04 test stage' +\n                                  '  Requires CI_MORE_FUNCTIONAL_PR_TESTS')\n        booleanParam(name: 'CI_medium_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium test stage')\n        booleanParam(name: 'CI_medium_md_on_ssd_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium MD on SSD test stage')\n        booleanParam(name: 'CI_medium_vmd_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium VMD test stage')\n        booleanParam(name: 'CI_medium_verbs_provider_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium Verbs Provider test stage')\n        booleanParam(name: 'CI_medium_verbs_provider_md_on_ssd_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium Verbs Provider MD on SSD test stage')\n        booleanParam(name: 'CI_medium_ucx_provider_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Medium UCX Provider test stage')\n        booleanParam(name: 'CI_large_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Large test stage')\n        booleanParam(name: 'CI_large_md_on_ssd_TEST',\n                     defaultValue: true,\n                     description: 'Run the Functional Hardware Large MD on SSD test stage')\n        string(name: 'CI_UNIT_VM1_LABEL',\n               defaultValue: 'ci_vm1',\n               description: 'Label to use for 1 VM node unit and RPM tests')\n        string(name: 'CI_UNIT_VM1_NVME_LABEL',\n               defaultValue: 'ci_ssd_vm1',\n               description: 'Label to use for 1 VM node unit tests that need NVMe')\n        string(name: 'FUNCTIONAL_VM_LABEL',\n               defaultValue: 'ci_vm9',\n               description: 'Label to use for 9 VM functional tests')\n        string(name: 'CI_NLT_1_LABEL',\n               defaultValue: 'ci_nlt_1',\n               description: 'Label to use for NLT tests')\n        string(name: 'FUNCTIONAL_HARDWARE_MEDIUM_LABEL',\n               defaultValue: 'ci_nvme5',\n               description: 'Label to use for the Functional Hardware Medium (MD on SSD) stages')\n        string(name: 'FUNCTIONAL_HARDWARE_MEDIUM_VERBS_PROVIDER_LABEL',\n               defaultValue: 'ci_nvme5',\n               description: 'Label to use for 5 node Functional Hardware Medium Verbs Provider (MD on SSD) stages')\n        string(name: 'FUNCTIONAL_HARDWARE_MEDIUM_VMD_LABEL',\n               defaultValue: 'ci_vmd5',\n               description: 'Label to use for the Functional Hardware Medium VMD stage')\n        string(name: 'FUNCTIONAL_HARDWARE_MEDIUM_UCX_PROVIDER_LABEL',\n               defaultValue: 'ci_ofed5',\n               description: 'Label to use for 5 node Functional Hardware Medium UCX Provider stage')\n        string(name: 'FUNCTIONAL_HARDWARE_LARGE_LABEL',\n               defaultValue: 'ci_nvme9',\n               description: 'Label to use for 9 node Functional Hardware Large (MD on SSD) stages')\n        string(name: 'CI_STORAGE_PREP_LABEL',\n               defaultValue: '',\n               description: 'Label for cluster to do a DAOS Storage Preparation')\n        string(name: 'CI_PROVISIONING_POOL',\n               defaultValue: '',\n               description: 'The pool of images to provision test nodes from')\n        string(name: 'CI_BUILD_DESCRIPTION',\n               defaultValue: '',\n               description: 'A description of the build')\n    }\n\n    stages {\n        stage('Set Description') {\n            steps {\n                script {\n                    if (params.CI_BUILD_DESCRIPTION) {\n                        buildDescription params.CI_BUILD_DESCRIPTION\n                    }\n                }\n            }\n        }\n        stage('Prepare Environment Variables') {\n            // TODO: Could/should these be moved to the environment block?\n            parallel {\n                stage('Get Commit Message') {\n                    steps {\n                        pragmasToEnv()\n                        update_default_commit_pragmas()\n                    }\n                }\n                stage('Determine Release Branch') {\n                    steps {\n                        script {\n                            env.RELEASE_BRANCH = releaseBranch()\n                            echo 'Release branch == ' + env.RELEASE_BRANCH\n                        }\n                    }\n                }\n            }\n        }\n        stage('Check PR') {\n            when { changeRequest() }\n            parallel {\n                stage('Branch name check') {\n                    when { changeRequest() }\n                    steps {\n                        script {\n                            if (env.CHANGE_ID.toInteger() > 9742 && !env.CHANGE_BRANCH.contains('/')) {\n                                error('Your PR branch name does not follow the rules. Please rename it ' +\n                                      'according to the rules described here: ' +\n                                      'https://daosio.atlassian.net/l/cp/UP1sPTvc#branch_names.  ' +\n                                      'Once you have renamed your branch locally to match the ' +\n                                      'format, close this PR and open a new one using the newly renamed ' +\n                                      'local branch.')\n                            }\n                        }\n                    }\n                }\n            } // parallel\n        } // stage('Check PR')\n        stage('Cancel Previous Builds') {\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            steps {\n                cancelPreviousBuilds()\n            }\n        }\n        stage('Pre-build') {\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            parallel {\n                stage('Python Bandit check') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'Dockerfile.code_scanning'\n                            dir 'utils/docker'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(add_repos: false)\n                        }\n                    }\n                    steps {\n                        job_step_update(pythonBanditCheck())\n                    }\n                    post {\n                        always {\n                            // Bandit will have empty results if it does not\n                            // find any issues.\n                            junit testResults: 'bandit.xml',\n                                  allowEmptyResults: true\n                            job_status_update()\n                        }\n                    }\n                } // stage('Python Bandit check')\n            }\n        }\n        stage('Build') {\n            /* Don't use failFast here as whilst it avoids using extra resources\n             * and gives faster results for PRs it's also on for master where we\n             * do want complete results in the case of partial failure\n             */\n            //failFast true\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            parallel {\n                stage('Build RPM on EL 8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'packaging/Dockerfile.mockbuild'\n                            dir 'utils/rpms'\n                            label 'docker_runner'\n                            args '--group-add mock'     +\n                                 ' --cap-add=SYS_ADMIN' +\n                                 ' -v /scratch:/scratch'\n                            additionalBuildArgs dockerBuildArgs()\n\n                        }\n                    }\n                    steps {\n                        job_step_update(buildRpm())\n                    }\n                    post {\n                        success {\n                            fixup_rpmlintrc()\n                            buildRpmPost condition: 'success', rpmlint: true\n                        }\n                        unstable {\n                            buildRpmPost condition: 'unstable'\n                        }\n                        failure {\n                            buildRpmPost condition: 'failure'\n                        }\n                        unsuccessful {\n                            buildRpmPost condition: 'unsuccessful'\n                        }\n                        cleanup {\n                            buildRpmPost condition: 'cleanup'\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build RPM on EL 9') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'packaging/Dockerfile.mockbuild'\n                            dir 'utils/rpms'\n                            label 'docker_runner'\n                            args '--group-add mock'     +\n                                 ' --cap-add=SYS_ADMIN' +\n                                 ' -v /scratch:/scratch'\n                            additionalBuildArgs dockerBuildArgs()\n                        }\n                    }\n                    steps {\n                        job_step_update(buildRpm())\n                    }\n                    post {\n                        success {\n                            fixup_rpmlintrc()\n                            buildRpmPost condition: 'success', rpmlint: true\n                        }\n                        unstable {\n                            buildRpmPost condition: 'unstable'\n                        }\n                        failure {\n                            buildRpmPost condition: 'failure'\n                        }\n                        unsuccessful {\n                            buildRpmPost condition: 'unsuccessful'\n                        }\n                        cleanup {\n                            buildRpmPost condition: 'cleanup'\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build RPM on Leap 15.5') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'packaging/Dockerfile.mockbuild'\n                            dir 'utils/rpms'\n                            label 'docker_runner'\n                            args '--group-add mock'     +\n                                 ' --cap-add=SYS_ADMIN' +\n                                 ' -v /scratch:/scratch'\n                            additionalBuildArgs dockerBuildArgs()\n                        }\n                    }\n                    steps {\n                        job_step_update(buildRpm())\n                    }\n                    post {\n                        success {\n                            fixup_rpmlintrc()\n                            buildRpmPost condition: 'success', rpmlint: true\n                        }\n                        unstable {\n                            buildRpmPost condition: 'unstable'\n                        }\n                        failure {\n                            buildRpmPost condition: 'failure'\n                        }\n                        unsuccessful {\n                            buildRpmPost condition: 'unsuccessful'\n                        }\n                        cleanup {\n                            buildRpmPost condition: 'cleanup'\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build DEB on Ubuntu 20.04') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'packaging/Dockerfile.ubuntu.20.04'\n                            dir 'utils/rpms'\n                            label 'docker_runner'\n                            args '--cap-add=SYS_ADMIN'\n                            additionalBuildArgs dockerBuildArgs()\n                        }\n                    }\n                    steps {\n                        job_step_update(buildRpm())\n                    }\n                    post {\n                        success {\n                            buildRpmPost condition: 'success'\n                        }\n                        unstable {\n                            buildRpmPost condition: 'unstable'\n                        }\n                        failure {\n                            buildRpmPost condition: 'failure'\n                        }\n                        unsuccessful {\n                            buildRpmPost condition: 'unsuccessful'\n                        }\n                        cleanup {\n                            buildRpmPost condition: 'cleanup'\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build on EL 8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'utils/docker/Dockerfile.el.8'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(repo_type: 'stable',\n                                                                deps_build: true,\n                                                                parallel_build: true) +\n                                                \" -t ${sanitized_JOB_NAME}-el8 \" +\n                                                ' --build-arg REPOS=\"' + prRepos() + '\"'\n                        }\n                    }\n                    steps {\n                        job_step_update(\n                            sconsBuild(parallel_build: true,\n                                       stash_files: 'ci/test_files_to_stash.txt',\n                                       build_deps: 'no',\n                                       stash_opt: true,\n                                       scons_args: sconsFaultsArgs() +\n                                                  ' PREFIX=/opt/daos TARGET_TYPE=release'))\n                    }\n                    post {\n                        unsuccessful {\n                            sh '''if [ -f config.log ]; then\n                                      mv config.log config.log-el8-gcc\n                                  fi'''\n                            archiveArtifacts artifacts: 'config.log-el8-gcc',\n                                             allowEmptyArchive: true\n                        }\n                        cleanup {\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build on EL 8 Bullseye') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'utils/docker/Dockerfile.el.8'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(repo_type: 'stable',\n                                                                deps_build: true,\n                                                                parallel_build: true) +\n                                                \" -t ${sanitized_JOB_NAME}-el8 \" +\n                                                ' --build-arg BULLSEYE=' + env.BULLSEYE +\n                                                ' --build-arg REPOS=\"' + prRepos() + '\"'\n                        }\n                    }\n                    steps {\n                        job_step_update(\n                            sconsBuild(parallel_build: true,\n                                       stash_files: 'ci/test_files_to_stash.txt',\n                                       build_deps: 'yes',\n                                       stash_opt: true,\n                                       scons_args: sconsFaultsArgs() +\n                                                   ' PREFIX=/opt/daos TARGET_TYPE=release'))\n                    }\n                    post {\n                        unsuccessful {\n                            sh label: 'Save failed Bullseye logs',\n                               script: '''if [ -f config.log ]; then\n                                          mv config.log config.log-el8-covc\n                                       fi'''\n                            archiveArtifacts artifacts: 'config.log-el8-covc',\n                                             allowEmptyArchive: true\n                        }\n                        cleanup {\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Build on Leap 15.5 with Intel-C and TARGET_PREFIX') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'utils/docker/Dockerfile.leap.15'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(repo_type: 'stable',\n                                                                parallel_build: true,\n                                                                deps_build: true) +\n                                                \" -t ${sanitized_JOB_NAME}-leap15\" +\n                                                ' --build-arg COMPILER=icc'\n                        }\n                    }\n                    steps {\n                        job_step_update(\n                            sconsBuild(parallel_build: true,\n                                       scons_args: sconsFaultsArgs() +\n                                                   ' PREFIX=/opt/daos TARGET_TYPE=release',\n                                       build_deps: 'no'))\n                    }\n                    post {\n                        unsuccessful {\n                            sh '''if [ -f config.log ]; then\n                                      mv config.log config.log-leap15-intelc\n                                  fi'''\n                            archiveArtifacts artifacts: 'config.log-leap15-intelc',\n                                             allowEmptyArchive: true\n                        }\n                        cleanup {\n                            job_status_update()\n                        }\n                    }\n                }\n            }\n        }\n        stage('Unit Tests') {\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            parallel {\n                stage('Unit Test on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label cachedCommitPragma(pragma: 'VM1-label', def_val: params.CI_UNIT_VM1_LABEL)\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 60,\n                                     unstash_opt: true,\n                                     inst_repos: prRepos(),\n                                     inst_rpms: unitPackages()))\n                    }\n                    post {\n                        always {\n                            unitTestPost artifacts: ['unit_test_logs/']\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Unit Test bdev on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label params.CI_UNIT_VM1_NVME_LABEL\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 60,\n                                     unstash_opt: true,\n                                     inst_repos: prRepos(),\n                                     inst_rpms: unitPackages()))\n                    }\n                    post {\n                        always {\n                            unitTestPost artifacts: ['unit_test_bdev_logs/']\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('NLT on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label params.CI_NLT_1_LABEL\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 60,\n                                     inst_repos: prRepos(),\n                                     test_script: 'ci/unit/test_nlt.sh',\n                                     unstash_opt: true,\n                                     unstash_tests: false,\n                                     inst_rpms: unitPackages()))\n                        // recordCoverage(tools: [[parser: 'COBERTURA', pattern:'nltir.xml']],\n                        //                 skipPublishingChecks: true,\n                        //                 id: 'tlc', name: 'Fault Injection Interim Report')\n                        stash(name:'nltr', includes:'nltr.json', allowEmpty: true)\n                    }\n                    post {\n                        always {\n                            unitTestPost artifacts: ['nlt_logs/'],\n                                         testResults: 'nlt-junit.xml',\n                                         always_script: 'ci/unit/test_nlt_post.sh',\n                                         valgrind_stash: 'el8-gcc-nlt-memcheck'\n                            recordIssues enabledForFailure: true,\n                                         failOnError: false,\n                                         ignoreQualityGate: true,\n                                         name: 'NLT server leaks',\n                                         qualityGates: [[threshold: 1, type: 'TOTAL', unstable: true]],\n                                         tool: issues(pattern: 'nlt-server-leaks.json',\n                                           name: 'NLT server results',\n                                           id: 'NLT_server')\n                            job_status_update()\n                        }\n                    }\n                }\n                stage('Unit Test Bullseye on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label cachedCommitPragma(pragma: 'VM1-label', def_val: params.CI_UNIT_VM1_LABEL)\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 60,\n                                     unstash_opt: true,\n                                     ignore_failure: true,\n                                     inst_repos: prRepos(),\n                                     inst_rpms: unitPackages()))\n                    }\n                    post {\n                        always {\n                            // This is only set while dealing with issues\n                            // caused by code coverage instrumentation affecting\n                            // test results, and while code coverage is being\n                            // added.\n                            unitTestPost ignore_failure: true,\n                                         artifacts: ['covc_test_logs/', 'covc_vm_test/**']\n                            job_status_update()\n                        }\n                    }\n                } // stage('Unit test Bullseye on EL 8.8')\n                stage('Unit Test with memcheck on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label cachedCommitPragma(pragma: 'VM1-label', def_val: params.CI_UNIT_VM1_LABEL)\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 160,\n                                     unstash_opt: true,\n                                     ignore_failure: true,\n                                     inst_repos: prRepos(),\n                                     inst_rpms: unitPackages()))\n                    }\n                    post {\n                        always {\n                            unitTestPost artifacts: ['unit_test_memcheck_logs.tar.gz',\n                                                     'unit_test_memcheck_logs/**/*.log'],\n                                         valgrind_stash: 'el8-gcc-unit-memcheck'\n                            job_status_update()\n                        }\n                    }\n                } // stage('Unit Test with memcheck on EL 8.8')\n                stage('Unit Test bdev with memcheck on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label params.CI_UNIT_VM1_NVME_LABEL\n                    }\n                    steps {\n                        job_step_update(\n                            unitTest(timeout_time: 180,\n                                     unstash_opt: true,\n                                     ignore_failure: true,\n                                     inst_repos: prRepos(),\n                                     inst_rpms: unitPackages()))\n                    }\n                    post {\n                        always {\n                            unitTestPost artifacts: ['unit_test_memcheck_bdev_logs.tar.gz',\n                                                     'unit_test_memcheck_bdev_logs/**/*.log'],\n                                         valgrind_stash: 'el8-gcc-unit-memcheck-bdev'\n                            job_status_update()\n                        }\n                    }\n                } // stage('Unit Test bdev with memcheck on EL 8')\n            }\n        }\n        stage('Test') {\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            parallel {\n                stage('Functional on EL 8.8 with Valgrind') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label params.CI_FUNCTIONAL_VM9_LABEL\n                    }\n                    steps {\n                        job_step_update(\n                            functionalTest(\n                                inst_repos: daosRepos(),\n                                inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                test_function: 'runTestFunctionalV2'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    }\n                } // stage('Functional on EL 8.8 with Valgrind')\n                stage('Functional on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label vm9_label('EL8')\n                    }\n                    steps {\n                        job_step_update(\n                            functionalTest(\n                                inst_repos: daosRepos(),\n                                    inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                    test_function: 'runTestFunctionalV2'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    }\n                } // stage('Functional on EL 8.8')\n                stage('Functional on EL 9') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label vm9_label('EL9')\n                    }\n                    steps {\n                        job_step_update(\n                            functionalTest(\n                                inst_repos: daosRepos(),\n                                    inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                    test_function: 'runTestFunctionalV2'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    }\n                } // stage('Functional on EL 9')\n                stage('Functional on Leap 15.6') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label vm9_label('Leap15')\n                    }\n                    steps {\n                        job_step_update(\n                            functionalTest(\n                                inst_repos: daosRepos(),\n                                inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                test_function: 'runTestFunctionalV2',\n                                image_version: 'leap15.6'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    } // post\n                } // stage('Functional on Leap 15.6')\n                stage('Functional on Ubuntu 20.04') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        label vm9_label('Ubuntu')\n                    }\n                    steps {\n                        job_step_update(\n                            functionalTest(\n                                inst_repos: daosRepos(),\n                                inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                test_function: 'runTestFunctionalV2'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    } // post\n                } // stage('Functional on Ubuntu 20.04')\n                stage('Fault injection testing on EL 8.8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'utils/docker/Dockerfile.el.8'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(repo_type: 'stable',\n                                                                parallel_build: true,\n                                                                deps_build: true)\n                            args '--tmpfs /mnt/daos_0'\n                        }\n                    }\n                    steps {\n                        job_step_update(\n                            sconsBuild(parallel_build: true,\n                                       scons_args: 'PREFIX=/opt/daos TARGET_TYPE=release BUILD_TYPE=debug',\n                                       build_deps: 'no'))\n                        job_step_update(nlt_test())\n                        // recordCoverage(tools: [[parser: 'COBERTURA', pattern:'nltr.xml']],\n                        //                skipPublishingChecks: true,\n                        //                id: 'fir', name: 'Fault Injection Report')\n                    }\n                    post {\n                        always {\n                            discoverGitReferenceBuild referenceJob: 'daos-stack/daos/master',\n                                                      scm: 'daos-stack/daos',\n                                                      requiredResult: hudson.model.Result.UNSTABLE\n                            recordIssues enabledForFailure: true,\n                                         failOnError: false,\n                                         ignoreQualityGate: true,\n                                         qualityGates: [[threshold: 1, type: 'TOTAL_ERROR'],\n                                                        [threshold: 1, type: 'TOTAL_HIGH'],\n                                                        [threshold: 1, type: 'NEW_NORMAL', unstable: true],\n                                                        [threshold: 1, type: 'NEW_LOW', unstable: true]],\n                                         tools: [issues(pattern: 'nlt-errors.json',\n                                                        name: 'Fault injection issues',\n                                                        id: 'Fault_Injection'),\n                                                 issues(pattern: 'nlt-client-leaks.json',\n                                                        name: 'Fault injection leaks',\n                                                        id: 'NLT_client')]\n                            junit testResults: 'nlt-junit.xml'\n                            stash name: 'fault-inject-valgrind',\n                                  includes: '*.memcheck.xml',\n                                  allowEmpty: true\n                            archiveArtifacts artifacts: 'nlt_logs/el8.fault-injection/',\n                                             allowEmptyArchive: true\n                            job_status_update()\n                        }\n                    }\n                } // stage('Fault injection testing on EL 8.8')\n                stage('Test RPMs on EL 8.6') {\n                    when {\n                        beforeAgent true\n                        expression { ! skipStage() }\n                    }\n                    agent {\n                        label params.CI_UNIT_VM1_LABEL\n                    }\n                    steps {\n                        job_step_update(\n                            testRpm(inst_repos: daosRepos(),\n                                    daos_pkg_version: daosPackagesVersion(next_version))\n                        )\n                    }\n                    post {\n                        always {\n                            rpm_test_post(env.STAGE_NAME, env.NODELIST)\n                        }\n                    }\n                } // stage('Test RPMs on EL 8.6')\n                stage('Test RPMs on Leap 15.5') {\n                    when {\n                        beforeAgent true\n                        expression { ! skipStage() }\n                    }\n                    agent {\n                        label params.CI_UNIT_VM1_LABEL\n                    }\n                    steps {\n                        /* neither of these work as FTest strips the first node\n                           out of the pool requiring 2 node clusters at minimum\n                         * additionally for this use-case, can't override\n                           ftest_arg with this :-(\n                        script {\n                            'Test RPMs on Leap 15.5': getFunctionalTestStage(\n                                name: 'Test RPMs on Leap 15.5',\n                                pragma_suffix: '',\n                                label: params.CI_UNIT_VM1_LABEL,\n                                next_version: next_version,\n                                stage_tags: '',\n                                default_tags: 'test_daos_management',\n                                nvme: 'auto',\n                                run_if_pr: true,\n                                run_if_landing: true,\n                                job_status: job_status_internal\n                            )\n                        }\n                           job_step_update(\n                            functionalTest(\n                                test_tag: 'test_daos_management',\n                                ftest_arg: '--yaml_extension single_host',\n                                inst_repos: daosRepos(),\n                                inst_rpms: functionalPackages(1, next_version, 'tests-internal'),\n                                test_function: 'runTestFunctionalV2'))\n                    }\n                    post {\n                        always {\n                            functionalTestPostV2()\n                            job_status_update()\n                        }\n                    } */\n                        job_step_update(\n                            testRpm(inst_repos: daosRepos(),\n                                    daos_pkg_version: daosPackagesVersion(next_version))\n                        )\n                    }\n                    post {\n                        always {\n                            rpm_test_post(env.STAGE_NAME, env.NODELIST)\n                        }\n                    }\n                } // stage('Test RPMs on Leap 15.5')\n            } // parallel\n        } // stage('Test')\n        stage('Test Storage Prep on EL 8.8') {\n            when {\n                beforeAgent true\n                expression { params.CI_STORAGE_PREP_LABEL != '' }\n            }\n            agent {\n                label params.CI_STORAGE_PREP_LABEL\n            }\n            steps {\n                job_step_update(\n                    storagePrepTest(\n                        inst_repos: daosRepos(),\n                        inst_rpms: functionalPackages(1, next_version, 'tests-internal')))\n            }\n            post {\n                cleanup {\n                    job_status_update()\n                }\n            }\n        } // stage('Test Storage Prep')\n        stage('Test Hardware') {\n            when {\n                beforeAgent true\n                expression { !skipStage() }\n            }\n            steps {\n                script {\n                    parallel(\n                        'Functional Hardware Medium': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium',\n                            pragma_suffix: '-hw-medium',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,medium,-provider',\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            nvme: 'auto',\n                            run_if_pr: true,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Medium MD on SSD': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium MD on SSD',\n                            pragma_suffix: '-hw-medium-md-on-ssd',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,medium,-provider',\n                            default_tags: startedByTimer() ?\n                                'pr,md_on_ssd daily_regression,md_on_ssd' : 'pr,md_on_ssd',\n                            nvme: 'auto_md_on_ssd',\n                            run_if_pr: false,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Medium VMD': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium VMD',\n                            pragma_suffix: '-hw-medium-vmd',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_VMD_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw_vmd,medium',\n                            /* groovylint-disable-next-line UnnecessaryGetter */\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            nvme: 'auto',\n                            run_if_pr: false,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Medium Verbs Provider': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium Verbs Provider',\n                            pragma_suffix: '-hw-medium-verbs-provider',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_VERBS_PROVIDER_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,medium,provider',\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            default_nvme: 'auto',\n                            provider: 'ofi+verbs;ofi_rxm',\n                            run_if_pr: true,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Medium Verbs Provider MD on SSD': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium Verbs Provider MD on SSD',\n                            pragma_suffix: '-hw-medium-verbs-provider-md-on-ssd',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_VERBS_PROVIDER_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,medium,provider',\n                            default_tags: startedByTimer() ?\n                                'pr,md_on_ssd daily_regression,md_on_ssd' : 'pr,md_on_ssd',\n                            default_nvme: 'auto_md_on_ssd',\n                            provider: 'ofi+verbs;ofi_rxm',\n                            run_if_pr: false,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Medium UCX Provider': getFunctionalTestStage(\n                            name: 'Functional Hardware Medium UCX Provider',\n                            pragma_suffix: '-hw-medium-ucx-provider',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_MEDIUM_UCX_PROVIDER_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,medium,provider',\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            default_nvme: 'auto',\n                            provider: cachedCommitPragma('Test-provider-ucx', 'ucx+ud_x'),\n                            run_if_pr: false,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Large': getFunctionalTestStage(\n                            name: 'Functional Hardware Large',\n                            pragma_suffix: '-hw-large',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_LARGE_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,large',\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            default_nvme: 'auto',\n                            run_if_pr: true,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                        'Functional Hardware Large MD on SSD': getFunctionalTestStage(\n                            name: 'Functional Hardware Large MD on SSD',\n                            pragma_suffix: '-hw-large-md-on-ssd',\n                            base_branch: 'master',\n                            label: params.FUNCTIONAL_HARDWARE_LARGE_LABEL,\n                            next_version: next_version,\n                            stage_tags: 'hw,large',\n                            default_tags: startedByTimer() ? 'pr daily_regression' : 'pr',\n                            default_nvme: 'auto_md_on_ssd',\n                            run_if_pr: false,\n                            run_if_landing: false,\n                            job_status: job_status_internal\n                        ),\n                    )\n                }\n            }\n        } // stage('Test Hardware')\n        stage('Test Report') {\n            parallel {\n                stage('Bullseye Report on EL 8') {\n                    when {\n                        beforeAgent true\n                        expression { !skipStage() }\n                    }\n                    agent {\n                        dockerfile {\n                            filename 'utils/docker/Dockerfile.el.8'\n                            label 'docker_runner'\n                            additionalBuildArgs dockerBuildArgs(repo_type: 'stable') +\n                                \" -t ${sanitized_JOB_NAME}-el8 \" +\n                                ' --build-arg BULLSEYE=' + env.BULLSEYE +\n                                ' --build-arg REPOS=\"' + prRepos() + '\"'\n                        }\n                    }\n                    steps {\n                        // The coverage_healthy is primarily set here\n                        // while the code coverage feature is being implemented.\n                        job_step_update(\n                            cloverReportPublish(\n                                coverage_stashes: ['el8-covc-unit-cov',\n                                                   'func-vm-cov',\n                                                   'func-hw-medium-cov',\n                                                   'func-hw-large-cov'],\n                                coverage_healthy: [methodCoverage: 0,\n                                                   conditionalCoverage: 0,\n                                                   statementCoverage: 0],\n                                ignore_failure: true))\n                    }\n                    post {\n                        cleanup {\n                            job_status_update()\n                        }\n                    }\n                } // stage('Bullseye Report on EL 8')\n            } // parallel\n        } // stage ('Test Report')\n    } // stages\n    post {\n        always {\n            valgrindReportPublish valgrind_stashes: ['el8-gcc-nlt-memcheck',\n                                                     'el8-gcc-unit-memcheck',\n                                                     'fault-inject-valgrind']\n            job_status_update('final_status')\n            jobStatusWrite(job_status_internal)\n        }\n        unsuccessful {\n            notifyBrokenBranch branches: target_branch\n        }\n    } // post\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            "Dockerfile",
            "daos-bash.sh"
        ],
        "folders": []
    }
}