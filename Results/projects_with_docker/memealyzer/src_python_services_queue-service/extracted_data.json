{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "requirements.txt": "azure-identity==1.4.0b5\nazure-storage-queue==12.1.2\nazure-ai-formrecognizer==1.0.0b3\nazure-ai-textanalytics==1.0.0\nazure-cosmos==4.0.0\npython-dotenv==0.13.0\ndotmap==1.3.17\nsmart-getenv==1.1.0\nazure-keyvault-secrets==4.2.0b1"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            ".env": "BASENAME=${BASENAME}\nREGION=westus2\nFAILOVER_REGION=eastus2\n\n# SET TO AUTO SELECT AZURE SUB\n#AZURE_SUBSCRIPTION_ID=\n\n# SCRIPT VARS\nAZURE_FUNCTION_APP_NAME=${BASENAME}function\nAZURE_CONTAINER_REGISTRY_SERVER=${BASENAME}acr.azurecr.io\n\n# Use the following if you want to run with local k8s cluster\n#K8S_CONTEXT=docker-desktop\n\nK8S_CONTEXT=${BASENAME}aks\n\n# Update the following to force a new image creation\nCONTAINER_TAG=1.0.13\n\n# APP VARS\n\n# FOR LOCAL DEV WITH DOCKER\n#FUNCTIONS_ENDPOINT=http://localhost:3080\n#API_ENDPOINT=http://localhost:2080\n\nIMAGE_ENDPOINT=https://meme-api.herokuapp.com/gimme/wholesomememes\n# === AZURE_STORAGE_TYPE (Default=COSMOS_SQL)\n#AZURE_STORAGE_TYPE=STORAGE_TABLE\n#AZURE_STORAGE_TYPE=COSMOS_SQL\n\n# === AZURE_MESSAGING_TYPE (Default=SERVICE_BUS_QUEUE)\n#AZURE_MESSAGING_TYPE=SERVICE_BUS_QUEUE\n#AZURE_MESSAGING_TYPE=STORAGE_QUEUE\n\n# This will determine how quickly the Storage Queue function polls for new messages.  It defaults to 10 seconds when using Azurite because we were seeing throttling with Ngrok.\n# AZURE_STORAGE_QUEUE_MAX_POLLING_INTERVAL=\"00:00:10\"\n\n# COSMO EMULATOR\n#USE_COSMOS_EMULATOR=true\n# You only need to uncomment the following values if you need them to be different that the defaults.\n#AZURE_COSMOS_ENDPOINT=https://localhost:8081/\n#AZURE_COSMOS_KEY=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\n\n# AZURITE\n# If you set USE_AZURITE* to true, then the ML components that extract text from images\n# will use Azurite instead of Azure services.\n#USE_AZURITE=true\n#USE_AZURITE_BLOB=true\n#USE_AZURITE_QUEUE=true\n#USE_AZURITE_TABLE=true\n# You only need to uncomment the following values if you need them to be different that the defaults.\n#AZURE_STORAGE_ACCOUNT_NAME=devstoreaccount1\n#AZURE_STORAGE_BLOB_ENDPOINT=https://127.0.0.1:10000/devstoreaccount1\n#AZURE_STORAGE_QUEUE_ENDPOINT=https://127.0.0.1:10001/devstoreaccount1\n#AZURE_STORAGE_TABLE_ENDPOINT=https://127.0.0.1:10002/devstoreaccount1\n#AZURITE_ACCOUNT_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==\n\n# === TUNNEL_TYPE (Default=NGROK)\n# Tunnel type setting indicates which tunnel you'd like to use for Azurite.\n#TUNNEL_TYPE=NGROK\n#NGROK_AUTHTOKEN=\"--authtoken\"\n\n",
            "src/python/docker-compose.yml": "# Please refer https://aka.ms/HTTPSinContainer on how to setup an https developer certificate for your ASP .NET Core service.\n\n# Issue: The python version will use the .NET Api and WebApp projects until the python versions are done.\nversion: \"3.8\"\n\nservices:\n  memealyzernetwebapp:\n    image: ${AZURE_CONTAINER_REGISTRY_SERVER}/memealyzernetwebapp:${CONTAINER_TAG}\n    build:\n      context: ../net\n      dockerfile: WebApp/Dockerfile\n    depends_on:\n      - memealyzernetapi\n    ports:\n      - 1080:80\n      - 1443:443\n  memealyzernetapi:\n    image: ${AZURE_CONTAINER_REGISTRY_SERVER}/memealyzernetapi:${CONTAINER_TAG}\n    env_file: ../../.env\n    volumes: \n        - \"~/.azure:/root/.azure\"\n    build:\n      context: ../net\n      dockerfile: Api/Dockerfile\n    ports:\n      - 2080:80\n      - 2443:443\n  memealyzernetqueueservice:\n    image: ${AZURE_CONTAINER_REGISTRY_SERVER}/memealyzernetqueueservice:${CONTAINER_TAG}\n    env_file: ../../.env\n    volumes: \n        - \"~/.azure:/root/.azure\"\n    build:\n      context: .\n      dockerfile: services/queue-service/Dockerfile\n  # memealyzernetfunctions:\n  #   image: ${AZURE_CONTAINER_REGISTRY_SERVER}/memealyzernetfunctions:${CONTAINER_TAG}\n  #   env_file: ../../.env\n  #   volumes: \n  #       - \"~/.azure:/root/.azure\"\n  #   build:\n  #     context: .\n  #     dockerfile: Services/Functions/Dockerfile\n  #   ports:\n  #     - 3080:80\n  #     - 3443:443\n  azurite:\n    image: mcr.microsoft.com/azure-storage/azurite\n    ports:\n      - 10000:10000\n      - 10001:10001\n",
            "src/python/services/queue-service/Dockerfile": "# For more information, please refer to https://aka.ms/vscode-docker-python\nFROM python:3.8-slim-buster\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE 1\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED 1\n\n# Install pip requirements\nADD services/queue-service/requirements.txt .\nRUN python -m pip install -r requirements.txt\n\nRUN apt-get update && apt-get install -y curl\nRUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash\n\nWORKDIR /app\nADD services/queue-service/. /app\n\n# Switching to a non-root user, please refer to https://aka.ms/vscode-docker-python-user-rights\n#RUN useradd appuser && chown -R appuser /app\n#USER appuser\n\n# During debugging, this entry point will be overridden. For more information, please refer to https://aka.ms/vscode-docker-python-debug\nCMD [\"python\", \"app.py\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "app.py",
            "requirements.txt"
        ],
        "folders": [
            ".vscode"
        ]
    }
}