{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "# IMPORTANT: It is recommended to generate requirements.txt using \"pdm export --dev --without-hashes > requirements.txt\"\n# Since we are using pdm for dependency management.\n\n# Update instructions:\n# 1. Delete the virtual environment\n# 2. Create a new clean virtual environment\n# 3. Remove all unnecessary indirect dependencies in this file (\"Indirect dependencies (these can be blown away at any time)\")\n# 4. Update the relevant packages\n# 5. Run `pip install -r requirements.txt`\n# 6. Run `pip freeze -r requirements.txt > requirements.new.txt`\n# 7. Run `mv requirements.new.txt requirements.txt`\n# 8. Run tests\n#\n# Direct dependencies (at least one import requires it)\nAPScheduler==3.10.1\nalembic==1.11.1\nbleach==6.0.0\ncachetools==5.3.1\nFlask==2.3.2\nFlask-Cors==4.0.0\nFlask-HTTPAuth==4.8.0\nFlask-Migrate==4.0.4\nFlask-Mail==0.9.1\nFlask-RESTful==0.3.10\nFlask-SQLAlchemy==3.0.5\nflask-swagger==0.2.14\nGeoAlchemy2==0.14.1\ngeojson==3.0.1\nitsdangerous==2.1.2\nMarkdown==3.4.4\noauthlib==3.2.2\npandas>=2.0.2\nscikit-learn>=1.2.2\npsycopg2==2.9.6\npython-dateutil==2.8.2\npython-dotenv==1.0.0\npython-slugify==8.0.1\nrequests==2.31.0\nrequests-oauthlib==1.3.1\nschematics==2.1.1\nsentry-sdk[flask]==1.26.0\nshapely==2.0.1\nSQLAlchemy==2.0.19\nWerkzeug==2.3.6\n# Dev dependencies (stuff useful for development)\nblack==23.7.0\ncoverage==7.2.7\nflake8==6.1.0\npsycopg2-binary>=2.9.6\npytest==7.4.0\n# Indirect, but required dependencies (often required for efficient deployments)\ngevent==22.10.2\ngreenlet==2.0.2\ngunicorn==20.1.0\nimportlib-metadata==6.8.0 # See https://github.com/hotosm/tasking-manager/issues/5395\n"
        },
        "database": "PostgreSQL",
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "name: tasking-manager-main\n\nvolumes:\n  tm_db_data:\n    name: tm-db-data-main\n\nnetworks:\n  tm-net:\n    name: tm-net\n\nservices:\n  tm-db:\n    image: \"postgis/postgis:${POSTGIS_TAG:-14-3.3}\"\n    volumes:\n      - tm_db_data:/var/lib/postgresql/data/\n    env_file:\n      - tasking-manager.env\n    restart: unless-stopped\n    healthcheck:\n      test: psql -h 0.0.0.0 -U ${POSTGRES_USER:-tm} -d ${POSTGRES_DB:-tasking-manager} -c 'SELECT 1;'\n      start_period: 5s\n      interval: 10s\n      timeout: 5s\n      retries: 3\n    networks:\n      - tm-net\n\n  tm-backend:\n    image: ghcr.io/hotosm/tasking-manager/backend:main\n    build:\n      context: .\n    depends_on:\n      tm-db:\n        condition: service_healthy\n      tm-migration:\n        condition: service_completed_successfully\n    env_file:\n      - tasking-manager.env\n    volumes:\n      - ./pyproject.toml:/usr/src/app/pyproject.toml:ro\n      - ./backend:/usr/src/app/backend:ro\n      - ./tests:/usr/src/app/tests:ro\n      - ./migrations:/src/migrations\n    restart: unless-stopped\n    healthcheck:\n      test: curl --fail http://localhost:5000 || exit 1\n      interval: 10s\n      retries: 5\n      timeout: 3s\n    deploy:\n      replicas: ${API_REPLICAS:-1}\n      resources:\n        limits:\n          cpus: \"1\"\n          memory: 1500M\n        reservations:\n          cpus: \"1\"\n          memory: 100M\n    labels:\n      - traefik.http.routers.backend.rule=(Host(`127.0.0.1`) || Host(`localhost`)) && PathPrefix(`/api/`)\n      - traefik.http.services.backend.loadbalancer.server.port=5000\n    networks:\n      - tm-net\n\n  tm-migration:\n    image: ghcr.io/hotosm/tasking-manager/backend:main\n    build:\n      context: .\n    entrypoint: [\"python\", \"manage.py\", \"db\"]\n    command: \"upgrade\"\n    depends_on:\n      tm-db:\n        condition: service_healthy\n    env_file:\n      - tasking-manager.env\n    volumes:\n      - ./pyproject.toml:/usr/src/app/pyproject.toml:ro\n      - ./backend:/usr/src/app/backend:ro\n      - ./migrations:/usr/src/app/migrations:ro\n    deploy:\n      resources:\n        limits:\n          cpus: \"1\"\n          memory: 1500M\n        reservations:\n          cpus: \"1\"\n          memory: 100M\n    networks:\n      - tm-net\n\n  swagger:\n    image: swaggerapi/swagger-ui:v5.11.10\n    restart: always\n    environment:\n      - BASE_URL=/docs\n      - SWAGGER_JSON_URL=http://127.0.0.1:${TM_DEV_PORT:-3000}/api/v2/system/docs/json/\n    labels:\n      - traefik.http.routers.swagger.rule=(Host(`127.0.0.1`) || Host(`localhost`)) && PathPrefix(`/docs/`)\n      - traefik.http.services.swagger.loadbalancer.server.port=8080\n    networks:\n      - tm-net\n\n  traefik:\n    image: traefik:v2.10\n    restart: always\n    ports:\n      - \"${TM_DEV_PORT:-3000}:80\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    command:\n      - --entrypoints.web.address=:80\n      - --providers.docker=true\n    networks:\n      - tm-net\n\n  tm-frontend:\n    image: ghcr.io/hotosm/tasking-manager/frontend:main\n    build:\n      context: .\n      dockerfile: \"./scripts/docker/Dockerfile.frontend_development\"\n    env_file:\n      - tasking-manager.env\n    labels:\n      - traefik.http.routers.frontend.rule=Host(`127.0.0.1`) || Host(`localhost`)\n      - traefik.http.services.frontend.loadbalancer.server.port=3000\n    networks:\n      - tm-net\n",
            "Dockerfile": "ARG DEBIAN_IMG_TAG=slim-bookworm\nARG PYTHON_IMG_TAG=3.10\n\n\n\nFROM docker.io/python:${PYTHON_IMG_TAG}-${DEBIAN_IMG_TAG} as base\nARG APP_VERSION=0.1.0\nARG DOCKERFILE_VERSION=0.5.0\nARG ALPINE_IMG_TAG\nARG DEBIAN_IMG_TAG\nARG PYTHON_IMG_TAG\nARG MAINTAINER=sysadmin@hotosm.org\nLABEL org.hotosm.tasks.app-version=\"${APP_VERSION}\" \\\n      org.hotosm.tasks.debian-img-tag=\"${DEBIAN_IMG_TAG}\" \\\n      org.hotosm.tasks.python-img-tag=\"${PYTHON_IMG_TAG}\" \\\n      org.hotosm.tasks.dockerfile-version=\"${DOCKERFILE_VERSION}\" \\\n      org.hotosm.tasks.maintainer=\"${MAINTAINER}\" \\\n      org.hotosm.tasks.api-port=\"5000\"\n# Fix timezone (do not change - see issue #3638)\nENV TZ UTC\n# Add non-root user, permissions, init log dir\nRUN useradd --uid 9000 --create-home --home /home/appuser --shell /bin/false appuser\n\n\n\n\nFROM base as extract-deps\nRUN pip install --no-cache-dir --upgrade pip\nWORKDIR /opt/python\nCOPY pyproject.toml pdm.lock README.md /opt/python/\nRUN pip install --no-cache-dir pdm==2.18.1\nRUN pdm export --prod --without-hashes > requirements.txt\n\n\n\nFROM base as build\nRUN pip install --no-cache-dir --upgrade pip\nWORKDIR /opt/python\n# Setup backend build-time dependencies\nRUN apt-get update && apt-get install --no-install-recommends -y \\\n        build-essential \\\n        libffi-dev \\\n        libgeos-dev \\\n        postgresql-server-dev-15 \\\n        python3-dev \\\n    && rm -rf /var/lib/apt/lists/*\n# Setup backend Python dependencies\nCOPY --from=extract-deps \\\n    /opt/python/requirements.txt /opt/python/\nUSER appuser:appuser\nRUN pip install --user --no-warn-script-location \\\n    --no-cache-dir -r /opt/python/requirements.txt\n\n\n\nFROM base as runtime\nARG PYTHON_IMG_TAG\nWORKDIR /usr/src/app\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONFAULTHANDLER=1 \\\n    PATH=\"/home/appuser/.local/bin:$PATH\" \\\n    PYTHONPATH=\"/usr/src/app:$PYTHONPATH\" \\\n    PYTHON_LIB=\"/home/appuser/.local/lib/python$PYTHON_IMG_TAG/site-packages\" \\\n    SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \\\n    REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt\n# Setup backend runtime dependencies\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y \\\n        libgeos3.11.1 postgresql-client proj-bin && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY --from=build \\\n    /home/appuser/.local \\\n    /home/appuser/.local\nUSER appuser:appuser\nCOPY backend backend/\nCOPY migrations migrations/\nCOPY scripts/world scripts/world/\nCOPY scripts/database scripts/database/\nCOPY manage.py .\n\n\n\nFROM runtime as debug\nRUN pip install --user --no-warn-script-location \\\n    --no-cache-dir debugpy==1.8.5\nEXPOSE 5678/tcp\nCMD [\"python\", \"-m\", \"debugpy\", \"--wait-for-client\", \"--listen\", \"0.0.0.0:5678\", \\\n    \"-m\", \"gunicorn\", \"-c\", \"python:backend.gunicorn\", \"manage:application\", \\\n    \"--reload\", \"--log-level\", \"error\"]\n\n\n\nFROM runtime as prod\nUSER root\nRUN apt-get update && \\\n\tapt-get install -y curl && \\\n\trm -rf /var/lib/apt/lists/*\n# Pre-compile packages to .pyc (init speed gains)\nRUN python -c \"import compileall; compileall.compile_path(maxlevels=10, quiet=1)\"\nRUN python -m compileall .\nEXPOSE 5000/tcp\nUSER appuser:appuser\n# Default gunicorn worker count is 1\n# For prod the WEB_CONCURRENCY env var can be used to set this\nCMD [\"gunicorn\", \"-c\", \"python:backend.gunicorn\", \"manage:application\", \\\n    \"--log-level\", \"error\"]\n",
            ".circleci/config.yml": "version: 2.1\n\norbs:\n  aws-cli: circleci/aws-cli@4.1.1\n  aws-ecs: circleci/aws-ecs@4.0.0\n  opsgenie: opsgenie/opsgenie@1.0.8\n\n\njobs:\n  frontend-code-test:\n    resource_class: large\n    docker:\n      - image: cimg/node:22.13.0\n    working_directory: /home/circleci/tasking-manager\n    steps:\n      - checkout\n      - restore_cache:\n          keys:\n            - yarn-deps-{{ checksum \"frontend/yarn.lock\" }}\n      - run:\n          name: Install node dependencies\n          command: |\n            yarn --version\n            cd ${CIRCLE_WORKING_DIRECTORY}/frontend\n            yarn install\n      - save_cache:\n          key: yarn-deps-{{ checksum \"frontend/yarn.lock\" }}\n          paths:\n            - frontend/node_modules\n            - env\n      - run:\n          name: Run yarn test\n          no_output_timeout: 20m\n          command: |\n            cd ${CIRCLE_WORKING_DIRECTORY}/frontend/\n            CI=true yarn test -w 1 --silent\n            CI=true GENERATE_SOURCEMAP=false yarn build\n\n  backend-code-check-PEP8:\n    docker:\n      - image: cimg/python:3.10\n    steps:\n      - checkout\n      - run:\n          name: flake8 tests\n          command: |\n            pip install flake8\n            flake8 manage.py backend tests migrations\n\n  backend-code-check-Black:\n    docker:\n      - image: cimg/python:3.10\n    steps:\n      - checkout\n      - run:\n          name: black tests\n          command: |\n            pip install 'black==23.12.1' ## TODO: Update to version 24\n            black --check manage.py backend tests migrations\n\n  backend-functional-tests:\n    resource_class: large\n    docker:\n\n      - image: cimg/python:3.10\n        environment:\n          SQLALCHEMY_DATABASE_URI: postgresql://taskingmanager@localhost/test_tm\n          POSTGRES_TEST_DB: test_tm\n          POSTGRES_USER: taskingmanager\n          POSTGRES_ENDPOINT: localhost\n          TM_ORG_CODE: \"CICode\"\n          TM_ORG_NAME: \"CircleCI Test Organisation\"\n\n      - image: cimg/postgres:14.9-postgis\n        environment:\n          POSTGRES_USER: taskingmanager\n          POSTGRES_DB: test_tm\n\n    working_directory: /home/circleci/tasking_manager\n    steps:\n      - checkout\n      - run: sudo apt-get update\n      - run: sudo apt-get -y install libgeos-dev # Required for shapely\n      - run: sudo apt-get -y install proj-bin libproj-dev\n      - run: pip install --upgrade pip pdm==2.18.1\n      - run: pdm export --dev --without-hashes > requirements.txt\n      - run: pip install -r requirements.txt\n      - run: mkdir --mode 766 -p /tmp/logs\n      - run: mkdir ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results\n      - run: find ./tests/backend -name \"test*.py\" -exec chmod -x {} \\;\n      - run: echo \"export TM_LOG_DIR=/tmp/logs\" >> $BASH_ENV\n      - run: coverage erase\n      - run:\n          name: Run backend functional tests\n          command: |\n            coverage run --source ./backend -m pytest \\\n              --rootdir ./tests/backend \\\n              --junit-xml ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results/unitresults.xml\n      - run: coverage xml -o ${CIRCLE_WORKING_DIRECTORY}/tests/backend/results/coverage.xml\n      - store_test_results:\n          path: tests/backend/results/unitresults.xml\n      - store_artifacts:\n          path: tests/backend/results\n\n  database-backup:\n    resource_class: large\n    parameters:\n      stack_name:\n        description: \"Cloudformation stack name\"\n        type: string\n    docker:\n      - image: cimg/postgres:15.4-postgis\n    steps:\n      - aws-cli/setup:\n          role_arn: \"arn:aws:iam::$ORG_AWS_ACCOUNT_ID:role/CircleCI-OIDC-Connect\"\n          profile_name: \"OIDC-Profile\"\n          role_session_name: \"database-snapshot\"\n          session_duration: \"2700\"\n      - run:\n          name: Find the instance ID of the database in the stack to backup\n          command: |\n            RDS_ID=$(aws rds describe-db-instances \\\n              --query 'DBInstances[?contains(TagList[].Key, `aws:cloudformation:stack-name`) && contains(TagList[].Value, `tasking-manager-<< parameters.stack_name >>`)].[DBInstanceIdentifier]' \\\n              --output text)\n            echo \"export RDS_ID=$RDS_ID\" >> $BASH_ENV\n            echo \"RDS ID is: $RDS_ID\"\n      - run:\n          name: Find Snapshot creation timestamp\n          command: |\n            # Given instance ID, find the timestamp of the latest snapshot\n            SNAPSHOT_TIMESTAMP=$(aws rds describe-db-snapshots \\\n              --db-instance-identifier=${RDS_ID} \\\n              --query=\"max_by(DBSnapshots, &SnapshotCreateTime).OriginalSnapshotCreateTime\" \\\n              --output text)\n      - run:\n          name: Make Database Backup\n          command: |\n            aws rds wait db-instance-available \\\n                --db-instance-identifier ${RDS_ID}\n            # create new aws rds snapshot\n            printf -v time_now '%(%Y-%m-%d-%H-%M)T' -1\n            aws rds create-db-snapshot \\\n                --db-snapshot-identifier tm4-<< parameters.stack_name >>-${RDS_ID}-${time_now} \\\n                --db-instance-identifier ${RDS_ID}\n            aws rds wait db-snapshot-completed \\\n                --db-snapshot-identifier tm4-<< parameters.stack_name >>-${RDS_ID}-${time_now} \\\n                --db-instance-identifier ${RDS_ID}\n            if [[ $? -eq 255 ]]; then\n              echo \"Production snapshot creation failed. Exiting with exit-code 125\"\n              exit 125\n            fi\n      - run:\n          name: Check / validate backup\n          command: |\n            echo \"TODO: BACKUP VALIDATION NOT IMPLEMENTED\"\n\n  backend_deploy:\n    parameters:\n      stack_name:\n        description: \"the name of the stack for cfn-config\"\n        type: string\n      gitsha:\n        description: \"The 40 char hash of the git commit\"\n        type: string\n      host_ami:\n        description: \"AMI of the host instance\"\n        type: string\n      pg_version:\n        description: \"Engine version of PostgreSQL database\"\n        type: string\n        default: \"11.19\"\n      pg_param_group:\n        description: \"Parameter group for RDS PostgreSQL server\"\n        type: string\n        default: \"tm3-logging-postgres11\"\n      db_instance_type:\n        description: \"RDS DB Instance class for the backend database\"\n        type: string\n        default: \"db.t3.xlarge\"\n      backend_instance_type:\n        description: \"Backend EC2 Instance type\"\n        type: string\n        default: \"c6a.large\"\n    working_directory: /home/circleci/tasking-manager\n    resource_class: medium\n    docker:\n      - image: cimg/node:22.13.0\n    steps:\n      - checkout\n      - aws-cli/setup:\n          role_arn: \"arn:aws:iam::$ORG_AWS_ACCOUNT_ID:role/CircleCI-OIDC-Connect\"\n          profile_name: \"OIDC-Profile\"\n          role_session_name: \"backend-deploy\"\n          session_duration: \"2700\"\n      - run: sudo apt-get update\n      - run: sudo apt-get -y install libgeos-dev jq\n      - run: sudo yarn global add @mapbox/cfn-config @mapbox/cloudfriend\n      - run:\n          name: Download and patch Cloudformation parameter JSON file\n          command: |\n            tmpfile=$(mktemp)\n            aws s3 cp s3://hot-cfn-config/tasking-manager/tasking-manager-<< parameters.stack_name >>-${AWS_REGION}.cfn.json /tmp/tasking-manager.cfn.json\n            jq --compact-output \\\n              --arg GITSHA \"<< parameters.gitsha >>\" \\\n              --arg AMI \"<< parameters.host_ami >>\" \\\n              --arg PGVERSION \"<< parameters.pg_version >>\" \\\n              --arg DBTYPE \"<< parameters.db_instance_type >>\" \\\n              --arg EC2TYPE \"<< parameters.backend_instance_type >>\" \\\n              --arg DBPARAMG \"<< parameters.pg_param_group >>\" \\\n              '.GitSha = $GITSHA | .TaskingManagerBackendAMI = $AMI | .DatabaseEngineVersion = $PGVERSION | .DatabaseInstanceType = $DBTYPE | .DatabaseParameterGroupName = $DBPARAMG | .TaskingManagerBackendInstanceType = $EC2TYPE' \\\n              /tmp/tasking-manager.cfn.json > \"$tmpfile\" && mv \"$tmpfile\" $CIRCLE_WORKING_DIRECTORY/cfn-config-<< parameters.stack_name >>.json\n      - run:\n          name: Deploy to << parameters.stack_name >>\n          command: |\n            export NODE_PATH=/usr/local/share/.config/yarn/global/node_modules/\n            validate-template $CIRCLE_WORKING_DIRECTORY/scripts/aws/cloudformation/tasking-manager.template.js\n            export JSON_CONFIG=\"$(< $CIRCLE_WORKING_DIRECTORY/cfn-config-<< parameters.stack_name >>.json)\"\n            cfn-config update << parameters.stack_name >> $CIRCLE_WORKING_DIRECTORY/scripts/aws/cloudformation/tasking-manager.template.js -f -c hot-cfn-config -t hot-cfn-config -r $AWS_REGION -p \"$JSON_CONFIG\"\n\n  backend_deploy_containers:\n    working_directory: /home/circleci/tasking-manager\n    docker:\n      - image: cimg/python:3.10.7\n    steps:\n      - checkout\n      - aws-cli/setup:\n          role_arn: \"arn:aws:iam::$ORG_AWS_ACCOUNT_ID:role/CircleCI-OIDC-Connect\"\n          profile_name: \"OIDC-Profile\"\n          role_session_name: \"backend-deploy-containers\"\n          session_duration: \"2700\"\n      - run: sudo apt-get update\n      - run: sudo apt-get -y install curl\n      - run: echo \"Run AWS Fargate\"\n\n  frontend_deploy:\n    working_directory: /home/circleci/tasking-manager\n    resource_class: large\n    docker:\n      - image: cimg/node:22.13.0\n    parameters:\n      stack_name:\n        description: \"the name of the stack for cfn-config\"\n        type: string\n    steps:\n      - checkout\n      - aws-cli/setup:\n          role_arn: \"arn:aws:iam::$ORG_AWS_ACCOUNT_ID:role/CircleCI-OIDC-Connect\"\n          profile_name: \"OIDC-Profile\"\n          role_session_name: \"frontend-deploy\"\n          session_duration: \"1800\"\n      - run:\n          name: Deploy Frontend to S3\n          command: |\n            cd ${CIRCLE_WORKING_DIRECTORY}/frontend/\n            export TM_ENVIRONMENT=<< parameters.stack_name >>\n            yarn\n            CI=true GENERATE_SOURCEMAP=true yarn build\n            aws s3 sync build/ s3://tasking-manager-<< parameters.stack_name >>-react-app --delete --cache-control max-age=31536000\n            aws s3 cp s3://tasking-manager-<< parameters.stack_name >>-react-app s3://tasking-manager-<< parameters.stack_name >>-react-app --recursive --exclude \"*\" --include \"*.html\" --metadata-directive REPLACE --cache-control no-cache --content-type text/html\n            export DISTRIBUTION_ID=`aws cloudformation list-exports --output=text --query \"Exports[?Name=='tasking-manager-<< parameters.stack_name >>-cloudfront-id-${AWS_REGION}'].Value\"`\n            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths \"/*\"\n\nworkflows:\n  version: 2\n\n  production-all:\n    when:\n      and:\n        - equal: [ deployment/hot-tasking-manager, << pipeline.git.branch >> ]\n    jobs:\n      - database-backup:\n          name: Backup production database\n          stack_name: \"tm4-production\"\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n      - frontend-code-test\n      - frontend_wait_for_approval:\n          type: approval\n          requires:\n            - frontend-code-test\n      - backend-functional-tests\n      - backend-code-check-PEP8\n      - backend-code-check-Black\n      - backend_wait_for_approval:\n          type: approval\n          requires:\n            - Backup production database\n            - backend-functional-tests\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n      - backend_deploy:\n          name: Deploy backend production\n          gitsha: $CIRCLE_SHA1\n          stack_name: \"tm4-production\"\n          host_ami: \"/aws/service/debian/release/11/20240813-1838/amd64\"\n          backend_instance_type: c6a.large\n          pg_version: \"13.10\"\n          pg_param_group: \"default.postgres13\"\n          db_instance_type: \"db.t4g.2xlarge\"\n          requires:\n            - backend_wait_for_approval\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n      - frontend_deploy:\n          name: Deploy frontend production\n          stack_name: \"tm4-production\"\n          requires:\n            - frontend_wait_for_approval\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n\n  production-frontend-only:\n    when:\n      and:\n        - equal: [ deployment/hot-tasking-manager-frontend, << pipeline.git.branch >> ]\n    jobs:\n      - frontend-code-test\n      - frontend_wait_for_approval:\n          type: approval\n          requires:\n            - frontend-code-test\n      - frontend_deploy:\n          name: Deploy frontend production\n          stack_name: \"tm4-production\"\n          requires:\n            - frontend_wait_for_approval\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n\n  production-backend-only:\n    when:\n      and:\n        - equal: [ deployment/hot-tasking-manager-backend, << pipeline.git.branch >> ]\n    jobs:\n      - database-backup:\n          name: Backup production database\n          stack_name: \"tm4-production\"\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n      - backend-functional-tests\n      - backend-code-check-PEP8\n      - backend-code-check-Black\n      - backend_wait_for_approval:\n          type: approval\n          requires:\n            - Backup production database\n            - backend-functional-tests\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n      - backend_deploy:\n          name: Deploy backend production\n          gitsha: $CIRCLE_SHA1\n          stack_name: \"tm4-production\"\n          host_ami: \"/aws/service/debian/release/11/20240813-1838/amd64\"\n          backend_instance_type: c6a.large\n          pg_version: \"13.10\"\n          pg_param_group: \"default.postgres13\"\n          db_instance_type: \"db.t4g.2xlarge\"\n          requires:\n            - backend_wait_for_approval\n          context:\n            - org-global\n            - tasking-manager-tm4-production\n\n  teachosm-all:\n    when:\n      and:\n        - equal: [ deployment/teachosm-tasking-manager, << pipeline.git.branch >> ]\n    jobs:\n      - database-backup:\n          name: Backup TeachOSM database\n          stack_name: \"teachosm\"\n          context:\n            - org-global\n            - tasking-manager-teachosm\n      - backend-functional-tests\n      - backend_deploy:\n          name: Deploy TeachOSM Backend\n          gitsha: $CIRCLECI_SHA1\n          stack_name: \"teachosm\"\n          host_ami: \"/aws/service/debian/release/11/20240813-1838/amd64\"\n          requires:\n            - backend-functional-tests\n          context: tasking-manager-teachosm\n      - frontend_deploy:\n          name: Deploy TeachOSM Frontend\n          stack_name: \"teachosm\"\n          requires:\n            - backend-functional-tests\n          context: tasking-manager-teachosm\n\n  staging-all:\n    when:\n      and:\n        - not:\n            matches:\n              pattern: \"^deployment/.*\"\n              value: << pipeline.git.branch >>\n        - equal: [ main, << pipeline.git.branch >> ]\n    jobs:\n      - database-backup:\n          name: Backup staging database\n          stack_name: \"staging\"\n          requires:\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n            - backend-functional-tests\n          context:\n            - org-global\n            - tasking-manager-staging\n      - frontend-code-test\n      - backend-code-check-PEP8\n      - backend-code-check-Black\n      - backend-functional-tests\n      - backend_deploy:\n          name: Deploy staging backend\n          gitsha: $CIRCLE_SHA1\n          stack_name: \"staging\"\n          host_ami: \"/aws/service/debian/release/11/20240813-1838/amd64\"\n          pg_version: \"14.8\"\n          pg_param_group: \"default.postgres14\"\n          db_instance_type: \"db.t4g.small\"\n          backend_instance_type: \"t3.medium\"\n          requires:\n            - Backup staging database\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n            - backend-functional-tests\n          context:\n            - org-global\n            - tasking-manager-staging\n      - frontend_deploy:\n          name: Deploy staging frontend\n          stack_name: \"staging\"\n          requires:\n            - frontend-code-test\n          context:\n            - org-global\n            - tasking-manager-staging\n\n  development-all:\n    when:\n      and:\n        - not:\n            matches:\n              pattern: \"^deployment/.*\"\n              value: << pipeline.git.branch >>\n        - or:\n          ## - equal: [ develop, << pipeline.git.branch >> ] # Disabled while we use dev setup for e2e testing\n          - equal: [ dev-switch-to-sandbox, << pipeline.git.branch >> ]\n    jobs:\n      - database-backup:\n          name: Backup development database\n          stack_name: \"dev\"\n          requires:\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n            - backend-functional-tests\n          context:\n            - org-global\n            - tasking-manager-dev\n      - frontend-code-test\n      - backend-code-check-PEP8\n      - backend-code-check-Black\n      - backend-functional-tests\n      - backend_deploy:\n          name: Deploy development backend\n          gitsha: $CIRCLE_SHA1\n          stack_name: \"dev\"\n          host_ami: \"/aws/service/debian/release/11/20240813-1838/amd64\"\n          pg_version: \"14.10\"\n          pg_param_group: \"default.postgres14\"\n          db_instance_type: \"db.t4g.small\"\n          backend_instance_type: \"t3.medium\"\n          requires:\n            - Backup development database\n            - backend-code-check-PEP8\n            - backend-code-check-Black\n            - backend-functional-tests\n          context:\n            - org-global\n            - tasking-manager-dev\n      - frontend_deploy:\n          name: Deploy development frontend\n          stack_name: \"dev\"\n          requires:\n            - frontend-code-test\n          context:\n            - org-global\n            - tasking-manager-dev\n\n  build-only-all:\n    when:\n      not:\n        or: # don't run this workflow for deployment branches\n          - matches:\n              pattern: \"^deployment/.*\"\n              value: << pipeline.git.branch >>\n          - equal: [ develop, << pipeline.git.branch >> ]\n          - equal: [ main, << pipeline.git.branch >> ]\n    jobs:\n      - frontend-code-test\n      - backend-code-check-PEP8\n      - backend-code-check-Black\n      - backend-functional-tests\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".coveragerc",
            ".dockerignore",
            ".flake8",
            ".flaskenv",
            ".gitignore",
            ".pre-commit-config.yaml",
            "Dockerfile",
            "LICENSE.md",
            "Makefile",
            "README.md",
            "docker-compose.override.sample.yml",
            "docker-compose.yml",
            "example.env",
            "manage.py",
            "mkdocs.yml",
            "pdm.lock",
            "pyproject.toml",
            "requirements.txt",
            "tasking-manager.service"
        ],
        "folders": [
            ".circleci",
            ".github",
            ".tx",
            "backend",
            "docs-old",
            "docs",
            "frontend",
            "migrations",
            "scripts",
            "tests"
        ]
    }
}