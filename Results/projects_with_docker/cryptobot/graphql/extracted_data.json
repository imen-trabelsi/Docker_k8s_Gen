{
    "source_code_info": {
        "language": "Java",
        "framework": "Micronaut",
        "dependencies": {
            "build.gradle": "plugins {\n    id \"org.jetbrains.kotlin.jvm\" version \"1.3.72\"\n    id \"org.jetbrains.kotlin.kapt\" version \"1.3.72\"\n    id \"org.jetbrains.kotlin.plugin.allopen\" version \"1.3.72\"\n    id \"com.github.johnrengelman.shadow\" version \"6.0.0\"\n    id \"application\"\n}\n\nmainClassName = 'me.pysquad.cryptobot.graphql.Application'\n\nversion \"0.1\"\ngroup \"me.pysquad.cryptobot.graphql\"\n\nrepositories {\n    mavenCentral()\n    jcenter()\n}\n\nconfigurations {\n    // for dependencies that are needed for development only\n    developmentOnly\n}\n\ndependencies {\n    // Kotlin\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}\")\n    implementation(\"io.micronaut.kotlin:micronaut-kotlin-runtime\")\n\n    // Micronaut\n    kapt(platform(\"io.micronaut:micronaut-bom:$micronautVersion\"))\n    kapt(\"io.micronaut:micronaut-inject-java\")\n    kapt(\"io.micronaut:micronaut-validation\")\n    implementation(platform(\"io.micronaut:micronaut-bom:$micronautVersion\"))\n    implementation(\"io.micronaut:micronaut-inject\")\n    implementation(\"io.micronaut:micronaut-validation\")\n    implementation(\"io.micronaut:micronaut-runtime\")\n    implementation(\"io.micronaut:micronaut-http-server-netty\")\n    implementation(\"io.micronaut:micronaut-http-client\")\n    implementation(\"io.micronaut:micronaut-management\")\n    developmentOnly(\"io.micronaut:micronaut-runtime-osx:$micronautVersion\")\n\n    // RethinkDB\n    implementation(\"com.rethinkdb:rethinkdb-driver:$rethinkdbVersion\")\n\n    // Graphql\n    implementation(\"io.micronaut.graphql:micronaut-graphql:$micronautGraphQLVersion\")\n    implementation(\"io.gqljf:graphql-java-federation:$graphqlJavaFederationVersion\")\n\n    // Logback\n    runtimeOnly(\"com.fasterxml.jackson.module:jackson-module-kotlin\")\n\n    // Logback\n    runtimeOnly(\"ch.qos.logback:logback-classic\")\n\n    // Test\n    kaptTest(platform(\"io.micronaut:micronaut-bom:$micronautVersion\"))\n    kaptTest(\"io.micronaut:micronaut-inject-java\")\n    testImplementation(platform(\"io.micronaut:micronaut-bom:$micronautVersion\"))\n    testImplementation(\"org.junit.jupiter:junit-jupiter-api\")\n    testImplementation(\"io.micronaut.test:micronaut-test-junit5\")\n    testRuntimeOnly(\"org.junit.jupiter:junit-jupiter-engine\")\n}\n\ntest.classpath += configurations.developmentOnly\n\n// use JUnit 5 platform\ntest {\n    useJUnitPlatform()\n}\n\njava {\n    sourceCompatibility = JavaVersion.toVersion('11')\n}\n\nallOpen {\n    annotation(\"io.micronaut.aop.Around\")\n}\ncompileKotlin {\n    kotlinOptions {\n        jvmTarget = '11'\n        //Will retain parameter names for Java reflection\n        javaParameters = true\n    }\n}\ncompileTestKotlin {\n    kotlinOptions {\n        jvmTarget = '11'\n        javaParameters = true\n    }\n}\nkapt {\n    arguments {\n        arg(\"micronaut.processing.incremental\", true)\n        arg(\"micronaut.processing.annotations\", \"me.pysquad.cryptobot.*\")\n        arg(\"micronaut.processing.group\", \"me.pysquad.cryptobot\")\n        arg(\"micronaut.processing.module\", \"graphql\")\n    }\n}\n\nshadowJar {\n    mergeServiceFiles()\n}\n\ntasks.withType(JavaExec) {\n    classpath += configurations.developmentOnly\n    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')\n    if (gradle.startParameter.continuous) {\n        systemProperties(\n            'micronaut.io.watch.restart':'true',\n            'micronaut.io.watch.enabled':'true',\n            \"micronaut.io.watch.paths\":\"src/main\"\n        )\n    }\n}\n\n\n\n"
        },
        "database": null,
        "build_system": "Gradle",
        "config_files": {
            "docker-compose.yml": "version: \"3.4\"\n\nservices:\n  nginx:\n    image: nginx:1.19.6-alpine\n    container_name: gateway\n    hostname: gateway\n    ports:\n      - \"${GATEWAY_PORT}:80\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n      - coinbase-subscriber\n      - coinbase-adapter\n      - graphql\n  rethinkdb:\n    image: rethinkdb:2.4.0\n    container_name: rethinkdb\n    hostname: rethinkdb\n    ports:\n      - \"${RETHINKDB_PORT}:8080\"\n#      - \"28015:28015\"\n    restart: always\n  db-initializer:\n    build: ./db-initializer\n    depends_on:\n      - rethinkdb\n    environment:\n      RETHINKDB_HOST: rethinkdb\n    container_name: db-initializer\n  graphql:\n    image: ghcr.io/pagidas/graphql\n    container_name: graphql\n    hostname: graphql\n    ports:\n      - \"${GRAPHQL_PORT}:8080\"\n    environment:\n      RETHINK_HOST: rethinkdb\n    depends_on:\n      - rethinkdb\n    restart: always\n    healthcheck:\n      test: curl -f http://localhost:8080/health || exit 1\n      interval: 3s\n      timeout: 10s\n      retries: 3\n      start_period: 5s\n  coinbase-subscriber:\n    image: ghcr.io/pagidas/coinbase-subscriber\n    container_name: coinbase-subscriber\n    hostname: coinbase-subscriber\n    ports:\n      - \"${CB_SUBSCRIBER_PORT}:8080\"\n    environment:\n      RETHINKDB_HOST: rethinkdb\n    depends_on:\n      - rethinkdb\n    restart: always\n    healthcheck:\n      test: curl -f http://localhost:8080/health || exit 1\n      interval: 3s\n      timeout: 10s\n      retries: 3\n      start_period: 5s\n  coinbase-adapter:\n    image: ghcr.io/pagidas/coinbase-adapter\n    container_name: coinbase-adapter\n    hostname: coinbase-adapter\n    ports:\n      - \"${CB_ADAPTER_PORT}:8080\"\n    environment:\n      CB_SANDBOX_API_KEY: ${CB_SANDBOX_API_KEY}\n      CB_SANDBOX_API_SECRET: ${CB_SANDBOX_API_SECRET}\n      CB_SANDBOX_API_PASSPHRASE: ${CB_SANDBOX_API_PASSPHRASE}\n    restart: always\n    healthcheck:\n      test: curl -f http://localhost:8080/health || exit 1\n      interval: 3s\n      timeout: 10s\n      retries: 3\n      start_period: 5s\n  crypto-analyzer:\n    image: ghcr.io/pagidas/crypto-analyzer\n    container_name: crypto-analyzer\n    hostname: crypto-analyzer\n    environment:\n      GATEWAY_HOST: gateway\n      GATEWAY_PORT: 80\n    depends_on:\n      - rethinkdb\n      - coinbase-adapter\n    restart: always",
            "graphql/Dockerfile": "ARG VERSION=14\nFROM openjdk:${VERSION}-alpine\nRUN apk --no-cache add curl\nCOPY build/libs/*-all.jar /bin/app.jar\nCMD [\"java\", \"-Dcom.sun.management.jmxremote\", \"-Xmx128m\", \"-jar\", \"/bin/app.jar\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "init_db.py"
        ],
        "folders": []
    }
}