{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "build.gradle": "/*\n * Copyright 2019 Netflix, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nbuildscript {\n    repositories {\n        gradlePluginPortal()\n        mavenCentral()\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n        maven { url 'https://artifacts-oss.netflix.net/maven-oss-releases' }\n    }\n    dependencies {\n        classpath 'com.netflix.nebula:gradle-netflixoss-project-plugin:11.5.0'\n        classpath 'com.netflix.nebula:nebula-dependency-recommender:11.+'\n        classpath 'io.mantisrx:mantis-gradle-plugin:1.2.7'\n        classpath \"io.freefair.gradle:lombok-plugin:6.+\"\n        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'\n        classpath(\"com.github.johnrengelman:shadow:8.1.1\")\n        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'\n        // todo: baseline is disabled due to no working version on java 8\n        // classpath 'com.palantir.baseline:gradle-baseline-java:4.+'\n        classpath 'com.bmuschko:gradle-docker-plugin:6.7.0'\n        classpath \"com.palantir.gradle.gitversion:gradle-git-version:3.0.0\"\n    }\n}\n\next.versions = [\n        commons  : \"3.5\",\n        flink    : \"1.14.2\",\n        hadoop   : \"2.7.7\",\n        jsr305   : \"3.0.1\",\n        junit4   : \"4.11\",\n        junit5   : \"5.4.+\",\n        mockito  : \"2.0.+\",\n        mockito3 : \"3.+\",\n        spectator: \"1.3.+\",\n        slf4j    : \"1.7.0\",\n        vavr     : \"0.9.2\",\n]\n\next.libraries = [\n        asyncHttpClient: \"org.asynchttpclient:async-http-client:2.12.3\",\n        commonsIo      : \"commons-io:commons-io:2.11.0\",\n        commonsLang3   : \"org.apache.commons:commons-lang3:${versions.commons}\",\n        commonsMath3   : \"org.apache.commons:commons-math3:${versions.commons}\",\n        flinkCore      : \"org.apache.flink:flink-core:${versions.flink}\",\n        flinkRpcApi    : [\n                \"org.apache.flink:flink-rpc-core:${versions.flink}\",\n        ],\n        flinkRpcImpl   : [\n                \"org.apache.flink:flink-rpc-akka:${versions.flink}\",\n        ],\n        junit4         : [\n                \"junit:junit:${versions.junit4}\",\n                \"junit:junit-dep:${versions.junit4}\",\n        ],\n        hadoopCommon   : \"org.apache.hadoop:hadoop-common:${versions.hadoop}\",\n        hadoopS3       : \"org.apache.hadoop:hadoop-aws:${versions.hadoop}\",\n        httpClient     : \"org.apache.httpcomponents:httpclient:4.5.14\",\n        jsr305         : \"com.google.code.findbugs:jsr305:${versions.jsr305}\", // For Nonnull annotation\n        junitJupiter   : [\n                \"org.junit.jupiter:junit-jupiter-api:${versions.junit5}\",\n                \"org.junit.jupiter:junit-jupiter-engine:${versions.junit5}\",\n                \"org.junit.jupiter:junit-jupiter-params:${versions.junit5}\",\n        ],\n        mantisShaded   : \"io.mantisrx:mantis-shaded:2.0.97\",\n        mockitoAll     : \"org.mockito:mockito-all:${versions.mockito}\",\n        mockitoCore    : \"org.mockito:mockito-core:${versions.mockito}\",\n        mockitoCore3   : \"org.mockito:mockito-core:${versions.mockito3}\",\n        mockneat       : \"net.andreinc:mockneat:0.4.8\",\n        rxJava         : \"io.reactivex:rxjava:1.3.8\",\n        rxNettyShaded  : \"com.netflix:mantis-rxnetty:0.4.19.1\",\n        slf4jApi       : \"org.slf4j:slf4j-api:${versions.slf4j}\",\n        slf4jLog4j12   : \"org.slf4j:slf4j-log4j12:${versions.slf4j}\",\n        spectatorApi   : \"com.netflix.spectator:spectator-api:${versions.spectator}\",\n        spectatorExtIpc: \"com.netflix.spectator:spectator-ext-ipc:${versions.spectator}\",\n        spectatorNflxPlugin: \"com.netflix.spectator:spectator-nflx-plugin:${versions.spectator}\",\n        spotifyFutures : \"com.spotify:completable-futures:0.3.1\",\n        vavr           : \"io.vavr:vavr:${versions.vavr}\",\n        vavrJackson    : \"io.vavr:vavr-jackson:${versions.vavr}\",\n        vavrTest       : \"io.vavr:vavr-test:${versions.vavr}\",\n        zip4j          : \"net.lingala.zip4j:zip4j:2.9.0\"\n]\n\nallprojects {\n    apply plugin: 'nebula.netflixoss'\n}\n\ndef printAllReleasedArtifacts = project.tasks.create('printAllReleasedArtifacts')\nproject.snapshot.configure { finalizedBy printAllReleasedArtifacts }\nsubprojects {\n    apply plugin: 'java-library'\n\n    // Apply lombok plugin.\n    apply plugin: \"io.freefair.lombok\"\n    lombok {\n        version = \"1.18.20\"\n    }\n\n    group = 'io.mantisrx'\n\n    sourceCompatibility = JavaVersion.VERSION_1_8\n    targetCompatibility = JavaVersion.VERSION_1_8\n\n    if (project.hasProperty('useMavenLocal')) {\n        repositories {\n            mavenLocal()\n        }\n    }\n\n    configurations.compileClasspath {\n        if (!\"mantis-shaded\".equals(project.name)) {\n            exclude group: 'com.fasterxml.jackson.core'\n            exclude group: 'com.fasterxml.jackson.datatype'\n            exclude group: 'com.fasterxml.jackson.module'\n            exclude group: 'com.fasterxml.jackson.dataformat'\n            exclude group: 'com.google.guava', module: 'guava'\n            exclude group: 'io.netty', module: 'netty'\n            exclude group: 'io.vavr', module: 'vavr-jackson'\n            exclude group: 'jline', module: 'jline'\n            exclude group: 'org.apache.curator'\n            exclude group: 'org.apache.zookeeper'\n            exclude group: 'org.apache.jute'\n        }\n        exclude group: 'ch.qos.logback', module: 'logback-classic'\n    }\n\n    repositories {\n        mavenCentral()\n        maven {\n            url \"https://netflixoss.jfrog.io/artifactory/maven-oss-candidates\"\n        }\n    }\n\n    tasks.withType(Javadoc).all {\n        enabled = false\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs << \"-Xlint:deprecation\"\n    }\n\n    project.plugins.withType(MavenPublishPlugin) {\n        def printReleasedArtifact = project.tasks.create('printReleasedArtifact')\n        printReleasedArtifact.doLast {\n            def file1 = file(\"${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/maven-metadata.xml\")\n            def file2 = file(\"${buildDir}/tmp/publishNebulaPublicationToNetflixOSSRepository/snapshot-maven-metadata.xml\")\n            def xmlText = file1.exists() ? file1.text : (file2.exists() ? file2.text : \"file not found\")\n            def xml = new XmlParser(false, false).parseText(xmlText)\n            def snapshotVersion = xml.versioning.snapshotVersions.snapshotVersion[0].'value'.text()\n            logger.lifecycle(\"${project.group}:${project.name}:${snapshotVersion}\")\n            file(\"${project.rootProject.buildDir}/versions.txt\").append(\"${project.group}:${project.name}:${snapshotVersion}\" + '\\n')\n        }\n\n        printReleasedArtifact.dependsOn(project.rootProject.snapshot)\n        printAllReleasedArtifacts.dependsOn(\"${project.path}:printReleasedArtifact\")\n    }\n\n    task akkaTest(type: Test) {\n        maxParallelForks = 1\n        filter {\n            includeTestsMatching \"*AkkaTest\"\n            setFailOnNoMatchingTests(false)\n        }\n    }\n\n    test {\n        filter {\n            excludeTestsMatching \"*AkkaTest\"\n            setFailOnNoMatchingTests(false)\n        }\n    }\n}\n\n// apply from: file('baseline.gradle')\n"
        },
        "database": null,
        "build_system": "Gradle",
        "config_files": {
            "mantis-examples/mantis-examples-mantis-publish-web-sample/Dockerfile": "FROM docker-hub.netflix.net/tomcat:9.0-alpine\n\nLABEL maintainer=\"mantis-oss-dev@netflix.com\"\n\nADD build/libs/mantis-examples-mantis-publish-web-sample-0.1.0-SNAPSHOT.war /usr/local/tomcat/webapps/\n\nEXPOSE 8080\n\nCMD [\"catalina.sh\", \"run\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "build.gradle",
            "buildDockerImage.sh"
        ],
        "folders": [
            "src"
        ]
    }
}