{
    "source_code_info": {
        "language": "Rust",
        "framework": "Rust",
        "dependencies": {
            "Cargo.toml": "[workspace]\nmembers = [\n  \"bin-shared\",\n  \"connlib/clients/android\",\n  \"connlib/clients/apple\",\n  \"connlib/clients/shared\",\n  \"connlib/l4-tcp-dns-server\",\n  \"connlib/l4-udp-dns-server\",\n  \"connlib/model\",\n  \"connlib/snownet\",\n  \"connlib/tunnel\",\n  \"dns-over-tcp\",\n  \"dns-types\",\n  \"gateway\",\n  \"gui-client/src-common\",\n  \"gui-client/src-tauri\",\n  \"headless-client\",\n  \"ip-packet\",\n  \"logging\",\n  \"phoenix-channel\",\n  \"relay\",\n  \"socket-factory\",\n  \"telemetry\",\n  \"tests/gui-smoke-test\",\n  \"tests/http-test-server\",\n  \"tun\",\n]\n\nresolver = \"2\"\n\n[workspace.package]\nlicense = \"Apache-2.0\"\nedition = \"2021\"\n\n[workspace.dependencies]\nanyhow = \"1.0.97\"\narboard = { version = \"3.4.0\", default-features = false }\nasync-trait = { version = \"0.1\", default-features = false }\natomicwrites = \"0.4.4\"\naxum = { version = \"0.7.7\", default-features = false }\nbackoff = { version = \"0.4\", features = [\"tokio\"] }\nbase64 = { version = \"0.22.1\", default-features = false }\nbimap = \"0.6\"\nboringtun = { version = \"0.6\", default-features = false }\nbytecodec = \"0.4.15\"\nbytes = { version = \"1.9.0\", default-features = false }\nchrono = { version = \"0.4\", default-features = false, features = [\"std\", \"clock\", \"oldtime\", \"serde\"] }\nclap = \"4.5.28\"\nderive_more = \"1.0.0\"\ndifference = \"2.0.0\"\ndirs = \"5.0.1\"\ndivan = \"0.1.17\"\ndns-lookup = \"2.0\"\neither = \"1\"\nenv_logger = \"0.11.6\"\netherparse = \"0.16\"\nfutures = { version = \"0.3.31\" }\nfutures-bounded = \"0.2.1\"\nglob = \"0.3.2\"\nhex = \"0.4.3\"\nhex-display = \"0.3.0\"\nhex-literal = \"0.4.1\"\ncaps = \"0.5.5\"\nhumantime = \"2.1\"\nip_network = { version = \"0.4\", default-features = false }\nip_network_table = { version = \"0.2\", default-features = false }\nitertools = \"0.13\"\njni = \"0.21.1\"\nsupports-color = \"3.0.2\"\nkeyring = \"3.6.1\"\nknown-folders = \"1.2.0\"\nlibc = \"0.2.150\"\nlog = \"0.4\"\nlru = \"0.12.5\"\nmio = \"1.0.3\"\nmoka = \"0.12.10\"\nnative-dialog = \"0.7.0\"\nnix = \"0.29.0\"\nnu-ansi-term = \"0.50\"\nonce_cell = \"1.17.1\"\nringbuffer = \"0.15.0\"\nopentelemetry = \"0.26.0\"\nopentelemetry-otlp = \"0.26.0\"\nopentelemetry_sdk = \"0.26.0\"\nos_info = { version = \"3\", default-features = false }\noutput_vt100 = \"0.1\"\npng = \"0.17.16\"\nproptest = \"1.6.0\"\nparking_lot = \"0.12.3\"\nproptest-state-machine = \"0.3.1\"\nquinn-udp = { version = \"0.5.8\", features = [\"fast-apple-datapath\"] }\nrand = \"0.8.5\"\nrand_core = \"0.6.4\"\nrangemap = \"1.5.1\"\nrayon = \"1.10.0\"\nreqwest = { version = \"0.12.9\", default-features = false }\nresolv-conf = \"0.7.0\"\nrtnetlink = { version = \"0.14.1\", default-features = false, features = [\"tokio_socket\"] }\nrustls = { version = \"0.23.21\", default-features = false, features = [\"ring\"] }\nsadness-generator = \"0.6.0\"\nsecrecy = \"0.8\"\nsemver = \"1.0.25\"\nsentry = { version = \"0.36.0\", default-features = false }\nsentry-tracing = \"0.36.0\"\nserde = \"1.0.217\"\nserde_json = \"1.0.135\"\nserde_variant = \"0.1.3\"\nsha2 = \"0.10.8\"\nsmallvec = \"1.13.2\"\nsmbios-lib = \"0.9.2\"\nsmoltcp = { version = \"0.12\", default-features = false }\nstatic_assertions = \"1.1.0\"\nstr0m = { version = \"0.7.0\", default-features = false, features = [\"sha1\"] }\nstrum = { version = \"0.27.1\", features = [\"derive\"] }\nstun_codec = \"0.3.4\"\nsubprocess = \"0.2.9\"\nsubtle = \"2.5.0\"\nswift-bridge = \"0.1.57\"\nswift-bridge-build = \"0.1.57\"\nlockfree-object-pool = \"0.1.6\"\ntauri = \"2.2.5\"\ntauri-build = \"2.0.1\"\ntauri-plugin-dialog = \"2.2.0\"\ntauri-plugin-notification = \"2.2.0\"\ntauri-plugin-shell = \"2.2.0\"\ntauri-plugin-opener = \"2.2.0\"\ntauri-runtime = \"2.3.0\"\ntauri-utils = \"2.1.1\"\ntempfile = \"3.13.0\"\ntest-case = \"3.3.1\"\ntest-strategy = \"0.4.0\"\nthiserror = \"1.0.68\"\ntime = \"0.3.37\"\ntokio = \"1.43\"\ntokio-stream = \"0.1.17\"\nflume = { version = \"0.11.1\", features = [\"async\"] }\ntokio-tungstenite = \"0.23.1\"\ntokio-util = \"0.7.11\"\ntracing = { version = \"0.1.40\" }\ntracing-appender = \"0.2.3\"\ntracing-core = \"0.1.31\"\ntracing-log = \"0.2.0\"\ntracing-macros = { git = \"https://github.com/tokio-rs/tracing\", branch = \"v0.1.x\" } # Contains `dbg!` but for `tracing`.\ntracing-opentelemetry = \"0.27.0\"\ntracing-stackdriver = \"0.11.0\"\ntracing-journald = \"0.3.1\"\ntracing-subscriber = { version = \"0.3.19\", features = [\"parking_lot\"] }\ntrackable = \"1.3.0\"\nurl = \"2.5.2\"\nuuid = \"1.14.0\"\nwindows = \"0.58.0\"\nwinreg = \"0.52.0\"\nzip = { version = \"2\", default-features = false }\n\nconnlib-client-android = { path = \"connlib/clients/android\" }\nconnlib-client-apple = { path = \"connlib/clients/apple\" }\nconnlib-client-shared = { path = \"connlib/clients/shared\" }\nfirezone-bin-shared = { path = \"bin-shared\" }\nfirezone-logging = { path = \"logging\" }\nfirezone-telemetry = { path = \"telemetry\" }\nfirezone-headless-client = { path = \"headless-client\" }\nfirezone-gui-client-common = { path = \"gui-client/src-common\" }\nsnownet = { path = \"connlib/snownet\" }\nl4-udp-dns-server = { path = \"connlib/l4-udp-dns-server\" }\nl4-tcp-dns-server = { path = \"connlib/l4-tcp-dns-server\" }\ndns-over-tcp = { path = \"dns-over-tcp\" }\ndns-types = { path = \"dns-types\" }\nfirezone-relay = { path = \"relay\" }\nconnlib-model = { path = \"connlib/model\" }\nfirezone-tunnel = { path = \"connlib/tunnel\" }\nphoenix-channel = { path = \"phoenix-channel\" }\nip-packet = { path = \"ip-packet\" }\nsocket-factory = { path = \"socket-factory\" }\ntun = { path = \"tun\" }\nsocket2 = { version = \"0.5\" }\n\n[workspace.lints.clippy]\ndbg_macro = \"warn\"\nprint_stdout = \"warn\"\nprint_stderr = \"warn\"\nunnecessary_wraps = \"warn\"\nunused_async = \"warn\"\nwildcard_enum_match_arm = \"warn\" # Ensures we match on all combinations of `Poll`, preventing erroneous suspensions.\nredundant_else = \"warn\"\nredundant_clone = \"warn\"\nunwrap_in_result = \"warn\"\nunwrap_used = \"warn\"\n\n[workspace.lints.rustdoc]\nprivate-intra-doc-links = \"allow\" # We don't publish any of our docs but want to catch dead links.\n\n[patch.crates-io]\nboringtun = { git = \"https://github.com/firezone/boringtun\", branch = \"master\" }\nip_network = { git = \"https://github.com/JakubOnderka/ip_network\", branch = \"master\" } # Waiting for release.\nip_network_table = { git = \"https://github.com/edmonds/ip_network_table\", branch = \"some-useful-traits\" } # For `Debug` and `Clone`\ntracing-stackdriver = { git = \"https://github.com/thomaseizinger/tracing-stackdriver\", branch = \"bump-otel-0.26\" } # Waiting for release.\n\n# Enforce `tracing-macros` to have released `tracing` version.\n[patch.'https://github.com/tokio-rs/tracing']\ntracing = \"0.1.41\"\n\n[profile.release]\n# Full link-time optimization. Reduces binaries by up to 3x on some platforms.\nlto = \"fat\"\n\n# Increases the compiler's ability to produce smaller, optimized code\n# at the expense of compilation time\ncodegen-units = 1\n\n# Override build settings just for the GUI client, so we get a pdb/dwp\n# Cargo ignores profile settings if they're not in the workspace's Cargo.toml\n[profile.dev.package.firezone-gui-client]\ndebug = \"full\"\nsplit-debuginfo = \"packed\"\n\n[profile.release.package.firezone-gui-client]\ndebug = \"full\"\nsplit-debuginfo = \"packed\"\n"
        },
        "database": null,
        "build_system": "Cargo",
        "config_files": {
            "docker-compose.yml": "services:\n  # Dependencies\n  postgres:\n    image: postgres:15\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: firezone_dev\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      start_period: 20s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    ports:\n      - 5432:5432/tcp\n    networks:\n      - app\n\n  vault:\n    image: vault:1.13.3\n    environment:\n      VAULT_ADDR: \"http://127.0.0.1:8200\"\n      VAULT_DEV_ROOT_TOKEN_ID: \"firezone\"\n      VAULT_LOG_LEVEL: \"debug\"\n    ports:\n      - 8200:8200/tcp\n    cap_add:\n      - IPC_LOCK\n    networks:\n      - app\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"wget\",\n          \"--spider\",\n          \"--proxy\",\n          \"off\",\n          \"http://127.0.0.1:8200/v1/sys/health?standbyok=true\",\n        ]\n      interval: 10s\n      timeout: 3s\n      retries: 10\n      start_period: 5s\n\n  # Firezone Components\n  web:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/web:main\n      args:\n        APPLICATION_NAME: web\n    image: ${WEB_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/web}:${WEB_TAG:-main}\n    hostname: web.cluster.local\n    ports:\n      - 8080:8080/tcp\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      PHOENIX_HTTP_WEB_PORT: \"8080\"\n      PHOENIX_HTTP_API_PORT: \"8081\"\n      PHOENIX_SECURE_COOKIES: \"false\"\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"web.cluster.local\"\n      RELEASE_NAME: \"web\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:8080/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  api:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/api:main\n      args:\n        APPLICATION_NAME: api\n    image: ${API_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/api}:${API_TAG:-main}\n    hostname: api.cluster.local\n    ports:\n      - 8081:8081/tcp\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      PHOENIX_HTTP_WEB_PORT: \"8080\"\n      PHOENIX_HTTP_API_PORT: \"8081\"\n      PHOENIX_SECURE_COOKIES: \"false\"\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"api.cluster.local\"\n      RELEASE_NAME: \"api\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:8081/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    networks:\n      - app\n\n  domain:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/domain:main\n      args:\n        APPLICATION_NAME: domain\n    image: ${DOMAIN_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/domain}:${DOMAIN_TAG:-main}\n    hostname: domain.cluster.local\n    environment:\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"domain.cluster.local\"\n      RELEASE_NAME: \"domain\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:4000/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  # This is a service container which allows to run mix tasks for local development\n  # without having to install Elixir and Erlang on the host machine.\n  elixir:\n    build:\n      context: elixir\n      target: compiler\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/elixir:main\n      args:\n        APPLICATION_NAME: api\n    image: ${ELIXIR_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/elixir}:${ELIXIR_TAG:-main}\n    hostname: elixir\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"mix.cluster.local\"\n      RELEASE_NAME: \"mix\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Higher log level not to make seeds output too verbose\n      LOG_LEVEL: \"info\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Mix env should be set to prod to use secrets declared above,\n      # otherwise seeds will generate invalid tokens\n      MIX_ENV: \"prod\"\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    depends_on:\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  client:\n    environment:\n      FIREZONE_DNS_CONTROL: \"${FIREZONE_DNS_CONTROL:-etc-resolv-conf}\"\n      FIREZONE_TOKEN: \"n.SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkN2RhN2QxY2QtMTExYy00NGE3LWI1YWMtNDAyN2I5ZDIzMGU1bQAAACtBaUl5XzZwQmstV0xlUkFQenprQ0ZYTnFJWktXQnMyRGR3XzJ2Z0lRdkZnbgYAR_ywiZQBYgABUYA.PLNlzyqMSgZlbQb1QX5EzZgYNuY9oeOddP0qDkTwtGg\"\n      RUST_LOG: ${RUST_LOG:-firezone_linux_client=trace,wire=trace,connlib_client_shared=trace,firezone_tunnel=trace,connlib_shared=trace,boringtun=debug,snownet=debug,str0m=debug,phoenix_channel=debug,info}\n      FIREZONE_API_URL: ws://api:8081\n    init: true\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/client:main\n      args:\n        PACKAGE: firezone-headless-client\n    image: ${CLIENT_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/client}:${CLIENT_TAG:-main}\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=0\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: 172.28.0.100\n\n  gateway:\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ip link | grep tun-firezone\"]\n    environment:\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkMjI3NDU2MGItZTk3Yi00NWU0LThiMzQtNjc5Yzc2MTdlOThkbQAAADhPMDJMN1VTMkozVklOT01QUjlKNklMODhRSVFQNlVPOEFRVk82VTVJUEwwVkpDMjJKR0gwPT09PW4GAAH8sImUAWIAAVGA.tAm2O9FcyF67VAF3rZdwQpeADrYOIs3S2l2K51G26OM\"\n      RUST_LOG: ${RUST_LOG:-phoenix_channel=trace,firezone_gateway=trace,wire=trace,connlib_gateway_shared=trace,firezone_tunnel=trace,connlib_shared=trace,phoenix_channel=debug,boringtun=debug,snownet=debug,str0m=debug,info}\n      FIREZONE_ENABLE_MASQUERADE: 1 # FIXME: NOOP in latest version. Remove after next release.\n      FIREZONE_API_URL: ws://api:8081\n      FIREZONE_ID: 4694E56C-7643-4A15-9DF3-638E5B05F570\n    init: true\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/gateway:main\n      args:\n        PACKAGE: firezone-gateway\n    image: ${GATEWAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/gateway}:${GATEWAY_TAG:-main}\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n      - net.ipv6.conf.all.disable_ipv6=0\n      - net.ipv6.conf.all.forwarding=1\n      - net.ipv6.conf.default.forwarding=1\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: 172.28.0.105\n      dns_resources:\n      resources:\n\n  httpbin:\n    image: kennethreitz/httpbin\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ps -C gunicorn\"]\n    networks:\n      resources:\n        ipv4_address: 172.20.0.100\n\n  download.httpbin: # Named after `httpbin` because that is how DNS resources are configured for the test setup.\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/http-test-server:main\n      args:\n        PACKAGE: http-test-server\n    image: ${HTTP_TEST_SERVER_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/http-test-server}:${HTTP_TEST_SERVER_TAG:-main}\n    environment:\n      PORT: 80\n    networks:\n      dns_resources:\n        ipv4_address: 172.21.0.101\n\n  dns.httpbin:\n    image: kennethreitz/httpbin\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ps -C gunicorn\"]\n    networks:\n      dns_resources:\n        ipv4_address: 172.21.0.100\n\n  iperf3:\n    image: mlabbe/iperf3\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"(cat /proc/net/tcp | grep 5201) && (cat /proc/net/udp | grep 5201)\",\n        ]\n    command: -s -V\n    networks:\n      resources:\n        ipv4_address: 172.20.0.110\n\n  relay-1:\n    environment:\n      PUBLIC_IP4_ADDR: ${RELAY_1_PUBLIC_IP4_ADDR:-172.28.0.101}\n      # PUBLIC_IP6_ADDR: fcff:3990:3990::101\n      # LOWEST_PORT: 55555\n      # HIGHEST_PORT: 55666\n      # Token for self-hosted Relay\n      # FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkNTQ5YzQxMDctMTQ5Mi00ZjhmLWE0ZWMtYTlkMmE2NmQ4YWE5bQAAADhQVTVBSVRFMU84VkRWTk1ITU9BQzc3RElLTU9HVERJQTY3MlM2RzFBQjAyT1MzNEg1TUUwPT09PW4GAEngLBONAWIAAVGA.E-f2MFdGMX7JTL2jwoHBdWcUd2G3UNz2JRZLbQrlf0k\"\n      # Token for global Relay\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaAN3A25pbG0AAAAkZTgyZmNkYzEtMDU3YS00MDE1LWI5MGItM2IxOGYwZjI4MDUzbQAAADhDMTROR0E4N0VKUlIwM0c0UVBSMDdBOUM2Rzc4NFRTU1RIU0Y0VEk1VDBHRDhENkwwVlJHPT09PW4GAOb7sImUAWIAAVGA.e_k2YXxBOSmqVSu5RRscjZJBkZ7OAGzkpr5X2ge1MNo\"\n      RUST_LOG: ${RUST_LOG:-debug}\n      RUST_BACKTRACE: 1\n      FIREZONE_API_URL: ws://api:8081\n      OTLP_GRPC_ENDPOINT: otel:4317\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/relay:main\n      args:\n        PACKAGE: firezone-relay\n    image: ${RELAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/relay}:${RELAY_TAG:-main}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"lsof -i UDP | grep firezone-relay\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    # ports:\n    # NOTE: Only 111 ports are used for local dev / testing because Docker Desktop\n    # allocates a userland proxy process for each forwarded port X_X.\n    #\n    # Large ranges here will bring your machine to its knees.\n    # - \"55555-55666:55555-55666/udp\"\n    # - 3478:3478/udp\n    networks:\n      app:\n        ipv4_address: ${RELAY_1_PUBLIC_IP4_ADDR:-172.28.0.101}\n\n  relay-2:\n    environment:\n      PUBLIC_IP4_ADDR: ${RELAY_2_PUBLIC_IP4_ADDR:-172.28.0.201}\n      # PUBLIC_IP6_ADDR: fcff:3990:3990::101\n      # Token for self-hosted Relay\n      # FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkNTQ5YzQxMDctMTQ5Mi00ZjhmLWE0ZWMtYTlkMmE2NmQ4YWE5bQAAADhQVTVBSVRFMU84VkRWTk1ITU9BQzc3RElLTU9HVERJQTY3MlM2RzFBQjAyT1MzNEg1TUUwPT09PW4GAEngLBONAWIAAVGA.E-f2MFdGMX7JTL2jwoHBdWcUd2G3UNz2JRZLbQrlf0k\"\n      # Token for global Relay\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaAN3A25pbG0AAAAkZTgyZmNkYzEtMDU3YS00MDE1LWI5MGItM2IxOGYwZjI4MDUzbQAAADhDMTROR0E4N0VKUlIwM0c0UVBSMDdBOUM2Rzc4NFRTU1RIU0Y0VEk1VDBHRDhENkwwVlJHPT09PW4GAOb7sImUAWIAAVGA.e_k2YXxBOSmqVSu5RRscjZJBkZ7OAGzkpr5X2ge1MNo\"\n      RUST_LOG: ${RUST_LOG:-debug}\n      RUST_BACKTRACE: 1\n      FIREZONE_API_URL: ws://api:8081\n      OTLP_GRPC_ENDPOINT: otel:4317\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/relay:main\n      args:\n        PACKAGE: firezone-relay\n    image: ${RELAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/relay}:${RELAY_TAG:-main}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"lsof -i UDP | grep firezone-relay\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: ${RELAY_2_PUBLIC_IP4_ADDR:-172.28.0.201}\n\n  otel:\n    image: otel/opentelemetry-collector:latest\n    networks:\n      app:\n\n# IPv6 is currently causing flakiness with GH actions and on our testbed.\n# Disabling until there's more time to debug.\nnetworks:\n  # Using a separate subnet here so that the CIDR resource for 172.20.0.0 won't catch DNS resources\n  dns_resources:\n    ipam:\n      config:\n        - subnet: 172.21.0.0/24\n  resources:\n    # enable_ipv6: true\n    ipam:\n      config:\n        - subnet: 172.20.0.0/24\n          # - subnet: fc00:ff:1::/48\n  app:\n    # enable_ipv6: true\n    ipam:\n      config:\n        - subnet: 172.28.0.0/24\n    # Currently not working on testbed\n    # - subnet: fc00:ff:2::/48\n\nvolumes:\n  postgres-data:\n  elixir-build-cache:\n  assets-build-cache:\n",
            "rust/Dockerfile": "# Keep synced with `rust-toolchain.toml`\nARG RUST_VERSION=\"1.84.0\"\nARG ALPINE_VERSION=\"3.20\"\nARG CARGO_CHEF_VERSION=\"0.1.67\"\n\nARG PACKAGE\n\n# This image is used to prepare Cargo Chef which is used to cache dependencies\n# Keep the Rust version synced with `rust-toolchain.toml`\nFROM rust:${RUST_VERSION}-alpine${ALPINE_VERSION} AS chef\n\nARG CARGO_CHEF_VERSION\nRUN set -xe \\\n    && apk add --no-cache musl-dev \\\n    && cargo install cargo-chef --locked --version=${CARGO_CHEF_VERSION} \\\n    && rm -rf $CARGO_HOME/registry/\n\n## See https://github.com/LukeMathWalker/cargo-chef/issues/231.\nCOPY rust-toolchain.toml rust-toolchain.toml\n\nRUN rustup show\n\nWORKDIR /build\n\n# Create a cache recipe for dependencies, which allows\n# to leverage Docker layer caching in a later build stage\nFROM chef AS planner\n\nCOPY . .\n\nRUN cargo chef prepare --recipe-path recipe.json\n\n# Build dependencies and application application\nFROM chef AS builder\n\nCOPY --from=planner /build/recipe.json .\n\nARG PACKAGE\nRUN set -xe \\\n    && cargo chef cook --recipe-path recipe.json --bin ${PACKAGE}\n\nCOPY . .\n\nARG TARGET\nRUN cargo build -p ${PACKAGE} $([ -n \"${TARGET}\" ] && \"--target ${TARGET}\")\n\n# Base image which is used to run the application binary\nFROM alpine:${ALPINE_VERSION} AS runtime_base\n\nENV LANG=C.UTF-8 \\\n    TERM=xterm \\\n    RUST_BACKTRACE=1 \\\n    RUST_LOG=info\n\nWORKDIR /bin\n\n## curl is needed to run tests (`main` runs CI against `release` images) and `firezone-relay` needs `curl` in its entry script.\nRUN apk add --no-cache curl\n\n# Gateway specific runtime base image\nFROM runtime_base AS runtime_firezone-gateway\n## iptables are needed only by gateway for masquerading\nRUN apk add --no-cache iptables ip6tables\nCOPY ./docker-init-gateway.sh ./docker-init.sh\n\n# Relay specific runtime base image\nFROM runtime_base AS runtime_firezone-relay\nCOPY ./docker-init-relay.sh ./docker-init.sh\n\n# Headless-client specific runtime base image\nFROM runtime_base AS runtime_firezone-headless-client\nCOPY ./docker-init.sh ./docker-init.sh\n\n# HTTP test server specific runtime base image\nFROM runtime_base AS runtime_http-test-server\nCOPY ./docker-init.sh ./docker-init.sh\n\n# Funnel package specific base image back into `runtime`\nARG PACKAGE\nFROM runtime_${PACKAGE} AS runtime\n\nARG PACKAGE\nENTRYPOINT [\"docker-init.sh\"]\nENV PACKAGE=${PACKAGE}\n\nCMD ${PACKAGE}\n\n# used as a base for dev and test\nFROM runtime AS test\n\nRUN apk add --no-cache iperf3 bind-tools iproute2 jq procps\n\n# used for local development\nFROM test AS dev\nARG TARGET\nARG PACKAGE\nCOPY --from=builder /build/target/${TARGET}/debug/${PACKAGE} .\n\n# Build an image for GitHub Actions which includes debug asserts and more test utilities\nFROM test AS debug\n\n## Build first with `cross build --target ${TARGET} -p ${PACKAGE} && mv /target/${TARGET}/release/${PACKAGE} .`\nARG PACKAGE\nCOPY ${PACKAGE} .\n\n# Build a production image from including a binary compiled on the host\nFROM runtime AS release\n\n## Build first with `cross build --target ${TARGET} -p ${PACKAGE} --release && mv /target/${TARGET}/release/${PACKAGE} .`\nARG PACKAGE\nCOPY ${PACKAGE} .\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            "Cargo.lock",
            "Cargo.toml",
            "Cross.toml",
            "Dockerfile",
            "Dockerfile-rpm",
            "README.md",
            "clippy.toml",
            "deny.toml",
            "docker-compose-dev.yml",
            "docker-init-gateway.sh",
            "docker-init-relay.sh",
            "docker-init.sh",
            "rust-toolchain.toml"
        ],
        "folders": [
            ".cargo",
            "bin-shared",
            "connlib",
            "dns-over-tcp",
            "dns-types",
            "gateway",
            "gui-client",
            "headless-client",
            "ip-packet",
            "logging",
            "phoenix-channel",
            "relay",
            "socket-factory",
            "telemetry",
            "tests",
            "tun"
        ]
    }
}