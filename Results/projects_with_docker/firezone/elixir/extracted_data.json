{
    "source_code_info": {
        "language": "Elixir",
        "framework": null,
        "dependencies": {
            "mix.exs": "defmodule Firezone.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      name: :firezone,\n      apps_path: \"apps\",\n      version: version(),\n      start_permanent: Mix.env() == :prod,\n      test_coverage: [tool: ExCoveralls],\n      preferred_cli_env: [\n        coveralls: :test,\n        \"coveralls.detail\": :test,\n        \"coveralls.post\": :test,\n        \"coveralls.html\": :test\n      ],\n      docs: [\n        logo: \"apps/web/assets/static/images/logo.svg\",\n        extras: [\"docs/README.md\", \"docs/SECURITY.md\", \"docs/CONTRIBUTING.md\"]\n      ],\n      deps: deps(),\n      dialyzer: [\n        plt_file: {:no_warn, \"priv/plts/dialyzer.plt\"}\n      ],\n      aliases: aliases(),\n      releases: releases()\n    ]\n  end\n\n  # Dependencies listed here are available only for this\n  # project and cannot be accessed from applications inside\n  # the apps folder.\n  #\n  # Run \"mix help deps\" for examples and options.\n  defp deps do\n    [\n      # Shared deps\n      {:jason, \"~> 1.2\"},\n\n      # Shared test deps\n      {:credo, \"~> 1.5\", only: [:dev, :test], runtime: false},\n      {:dialyxir, \"~> 1.1\", only: [:dev, :test], runtime: false},\n      {:junit_formatter, \"~> 3.3\", only: [:test]},\n      {:mix_audit, \"~> 2.1\", only: [:dev, :test]},\n      {:sobelow, \"~> 0.12\", only: [:dev, :test]},\n\n      # Formatter doesn't track dependencies of children applications\n      {:phoenix, \"~> 1.7.0\"},\n      {:phoenix_live_view, \"~> 1.0.0-rc.0\"},\n      {:floki, \"~> 0.37.0\"}\n    ]\n  end\n\n  defp aliases do\n    [\n      \"ecto.seed\": [\"ecto.create\", \"ecto.migrate\", \"run apps/domain/priv/repo/seeds.exs\"],\n      \"ecto.setup\": [\"ecto.create\", \"ecto.migrate\"],\n      \"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"],\n      sobelow: [\"cmd mix sobelow\"],\n      test: [\"ecto.create --quiet\", \"ecto.migrate\", \"test\"],\n      start: [\"compile --no-validate-compile-env\", \"phx.server\", \"run --no-halt\"]\n    ]\n  end\n\n  defp releases do\n    [\n      domain: [\n        include_executables_for: [:unix],\n        validate_compile_env: true,\n        applications: [\n          domain: :permanent,\n          opentelemetry_exporter: :permanent,\n          opentelemetry: :temporary\n        ]\n      ],\n      web: [\n        include_executables_for: [:unix],\n        validate_compile_env: true,\n        applications: [\n          web: :permanent,\n          opentelemetry_exporter: :permanent,\n          opentelemetry: :temporary\n        ]\n      ],\n      api: [\n        include_executables_for: [:unix],\n        validate_compile_env: true,\n        applications: [\n          api: :permanent,\n          opentelemetry_exporter: :permanent,\n          opentelemetry: :temporary\n        ]\n      ]\n    ]\n  end\n\n  defp version do\n    sha = System.get_env(\"GIT_SHA\", \"dev\") |> String.trim()\n    \"0.1.0+#{sha}\"\n  end\nend\n"
        },
        "database": null,
        "build_system": "Mix",
        "config_files": {
            "docker-compose.yml": "services:\n  # Dependencies\n  postgres:\n    image: postgres:15\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: firezone_dev\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      start_period: 20s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    ports:\n      - 5432:5432/tcp\n    networks:\n      - app\n\n  vault:\n    image: vault:1.13.3\n    environment:\n      VAULT_ADDR: \"http://127.0.0.1:8200\"\n      VAULT_DEV_ROOT_TOKEN_ID: \"firezone\"\n      VAULT_LOG_LEVEL: \"debug\"\n    ports:\n      - 8200:8200/tcp\n    cap_add:\n      - IPC_LOCK\n    networks:\n      - app\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"wget\",\n          \"--spider\",\n          \"--proxy\",\n          \"off\",\n          \"http://127.0.0.1:8200/v1/sys/health?standbyok=true\",\n        ]\n      interval: 10s\n      timeout: 3s\n      retries: 10\n      start_period: 5s\n\n  # Firezone Components\n  web:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/web:main\n      args:\n        APPLICATION_NAME: web\n    image: ${WEB_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/web}:${WEB_TAG:-main}\n    hostname: web.cluster.local\n    ports:\n      - 8080:8080/tcp\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      PHOENIX_HTTP_WEB_PORT: \"8080\"\n      PHOENIX_HTTP_API_PORT: \"8081\"\n      PHOENIX_SECURE_COOKIES: \"false\"\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"web.cluster.local\"\n      RELEASE_NAME: \"web\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:8080/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  api:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/api:main\n      args:\n        APPLICATION_NAME: api\n    image: ${API_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/api}:${API_TAG:-main}\n    hostname: api.cluster.local\n    ports:\n      - 8081:8081/tcp\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      PHOENIX_HTTP_WEB_PORT: \"8080\"\n      PHOENIX_HTTP_API_PORT: \"8081\"\n      PHOENIX_SECURE_COOKIES: \"false\"\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"api.cluster.local\"\n      RELEASE_NAME: \"api\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:8081/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    networks:\n      - app\n\n  domain:\n    build:\n      context: elixir\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/domain:main\n      args:\n        APPLICATION_NAME: domain\n    image: ${DOMAIN_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/domain}:${DOMAIN_TAG:-main}\n    hostname: domain.cluster.local\n    environment:\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      ERLANG_CLUSTER_ADAPTER: \"Elixir.Cluster.Strategy.Epmd\"\n      ERLANG_CLUSTER_ADAPTER_CONFIG: '{\"hosts\":[\"api@api.cluster.local\",\"web@web.cluster.local\",\"domain@domain.cluster.local\"]}'\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"domain.cluster.local\"\n      RELEASE_NAME: \"domain\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Debugging\n      LOG_LEVEL: \"debug\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"curl -f localhost:4000/healthz\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      vault:\n        condition: \"service_healthy\"\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  # This is a service container which allows to run mix tasks for local development\n  # without having to install Elixir and Erlang on the host machine.\n  elixir:\n    build:\n      context: elixir\n      target: compiler\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/elixir:main\n      args:\n        APPLICATION_NAME: api\n    image: ${ELIXIR_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/elixir}:${ELIXIR_TAG:-main}\n    hostname: elixir\n    environment:\n      # Web Server\n      WEB_EXTERNAL_URL: http://localhost:8080/\n      API_EXTERNAL_URL: http://localhost:8081/\n      # Erlang\n      ERLANG_DISTRIBUTION_PORT: 9000\n      RELEASE_COOKIE: \"NksuBhJFBhjHD1uUa9mDOHV\"\n      RELEASE_HOSTNAME: \"mix.cluster.local\"\n      RELEASE_NAME: \"mix\"\n      # Database\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_NAME: firezone_dev\n      DATABASE_USER: postgres\n      DATABASE_PASSWORD: postgres\n      # Auth\n      AUTH_PROVIDER_ADAPTERS: \"email,openid_connect,userpass,token,google_workspace,microsoft_entra,okta,jumpcloud,mock\"\n      # Secrets\n      TOKENS_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      TOKENS_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      SECRET_KEY_BASE: \"5OVYJ83AcoQcPmdKNksuBhJFBhjHD1uUa9mDOHV/6EIdBQ6pXksIhkVeWIzFk5S2\"\n      LIVE_VIEW_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_SIGNING_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      COOKIE_ENCRYPTION_SALT: \"t01wa0K4lUd7mKa0HAtZdE+jFOPDDej2\"\n      # Higher log level not to make seeds output too verbose\n      LOG_LEVEL: \"info\"\n      # Emails\n      OUTBOUND_EMAIL_FROM: \"public-noreply@firez.one\"\n      OUTBOUND_EMAIL_ADAPTER: \"Elixir.Swoosh.Adapters.Postmark\"\n      ## Warning: The token is for the blackhole Postmark server created in a separate isolated account,\n      ## that WILL NOT send any actual emails, but you can see and debug them in the Postmark dashboard.\n      OUTBOUND_EMAIL_ADAPTER_OPTS: '{\"api_key\":\"7da7d1cd-111c-44a7-b5ac-4027b9d230e5\"}'\n      # Mix env should be set to prod to use secrets declared above,\n      # otherwise seeds will generate invalid tokens\n      MIX_ENV: \"prod\"\n      # Seeds\n      STATIC_SEEDS: \"true\"\n      # Feature flags\n      FEATURE_FLOW_ACTIVITIES_ENABLED: \"true\"\n      FEATURE_POLICY_CONDITIONS_ENABLED: \"true\"\n      FEATURE_MULTI_SITE_RESOURCES_ENABLED: \"true\"\n      FEATURE_SELF_HOSTED_RELAYS_ENABLED: \"true\"\n      FEATURE_IDP_SYNC_ENABLED: \"true\"\n      FEATURE_REST_API_ENABLED: \"true\"\n      FEATURE_INTERNET_RESOURCE_ENABLED: \"true\"\n    depends_on:\n      postgres:\n        condition: \"service_healthy\"\n    networks:\n      - app\n\n  client:\n    environment:\n      FIREZONE_DNS_CONTROL: \"${FIREZONE_DNS_CONTROL:-etc-resolv-conf}\"\n      FIREZONE_TOKEN: \"n.SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkN2RhN2QxY2QtMTExYy00NGE3LWI1YWMtNDAyN2I5ZDIzMGU1bQAAACtBaUl5XzZwQmstV0xlUkFQenprQ0ZYTnFJWktXQnMyRGR3XzJ2Z0lRdkZnbgYAR_ywiZQBYgABUYA.PLNlzyqMSgZlbQb1QX5EzZgYNuY9oeOddP0qDkTwtGg\"\n      RUST_LOG: ${RUST_LOG:-firezone_linux_client=trace,wire=trace,connlib_client_shared=trace,firezone_tunnel=trace,connlib_shared=trace,boringtun=debug,snownet=debug,str0m=debug,phoenix_channel=debug,info}\n      FIREZONE_API_URL: ws://api:8081\n    init: true\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/client:main\n      args:\n        PACKAGE: firezone-headless-client\n    image: ${CLIENT_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/client}:${CLIENT_TAG:-main}\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv6.conf.all.disable_ipv6=0\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: 172.28.0.100\n\n  gateway:\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ip link | grep tun-firezone\"]\n    environment:\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkMjI3NDU2MGItZTk3Yi00NWU0LThiMzQtNjc5Yzc2MTdlOThkbQAAADhPMDJMN1VTMkozVklOT01QUjlKNklMODhRSVFQNlVPOEFRVk82VTVJUEwwVkpDMjJKR0gwPT09PW4GAAH8sImUAWIAAVGA.tAm2O9FcyF67VAF3rZdwQpeADrYOIs3S2l2K51G26OM\"\n      RUST_LOG: ${RUST_LOG:-phoenix_channel=trace,firezone_gateway=trace,wire=trace,connlib_gateway_shared=trace,firezone_tunnel=trace,connlib_shared=trace,phoenix_channel=debug,boringtun=debug,snownet=debug,str0m=debug,info}\n      FIREZONE_ENABLE_MASQUERADE: 1 # FIXME: NOOP in latest version. Remove after next release.\n      FIREZONE_API_URL: ws://api:8081\n      FIREZONE_ID: 4694E56C-7643-4A15-9DF3-638E5B05F570\n    init: true\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/gateway:main\n      args:\n        PACKAGE: firezone-gateway\n    image: ${GATEWAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/gateway}:${GATEWAY_TAG:-main}\n    cap_add:\n      - NET_ADMIN\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n      - net.ipv6.conf.all.disable_ipv6=0\n      - net.ipv6.conf.all.forwarding=1\n      - net.ipv6.conf.default.forwarding=1\n    devices:\n      - \"/dev/net/tun:/dev/net/tun\"\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: 172.28.0.105\n      dns_resources:\n      resources:\n\n  httpbin:\n    image: kennethreitz/httpbin\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ps -C gunicorn\"]\n    networks:\n      resources:\n        ipv4_address: 172.20.0.100\n\n  download.httpbin: # Named after `httpbin` because that is how DNS resources are configured for the test setup.\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/http-test-server:main\n      args:\n        PACKAGE: http-test-server\n    image: ${HTTP_TEST_SERVER_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/http-test-server}:${HTTP_TEST_SERVER_TAG:-main}\n    environment:\n      PORT: 80\n    networks:\n      dns_resources:\n        ipv4_address: 172.21.0.101\n\n  dns.httpbin:\n    image: kennethreitz/httpbin\n    healthcheck:\n      test: [\"CMD-SHELL\", \"ps -C gunicorn\"]\n    networks:\n      dns_resources:\n        ipv4_address: 172.21.0.100\n\n  iperf3:\n    image: mlabbe/iperf3\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"(cat /proc/net/tcp | grep 5201) && (cat /proc/net/udp | grep 5201)\",\n        ]\n    command: -s -V\n    networks:\n      resources:\n        ipv4_address: 172.20.0.110\n\n  relay-1:\n    environment:\n      PUBLIC_IP4_ADDR: ${RELAY_1_PUBLIC_IP4_ADDR:-172.28.0.101}\n      # PUBLIC_IP6_ADDR: fcff:3990:3990::101\n      # LOWEST_PORT: 55555\n      # HIGHEST_PORT: 55666\n      # Token for self-hosted Relay\n      # FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkNTQ5YzQxMDctMTQ5Mi00ZjhmLWE0ZWMtYTlkMmE2NmQ4YWE5bQAAADhQVTVBSVRFMU84VkRWTk1ITU9BQzc3RElLTU9HVERJQTY3MlM2RzFBQjAyT1MzNEg1TUUwPT09PW4GAEngLBONAWIAAVGA.E-f2MFdGMX7JTL2jwoHBdWcUd2G3UNz2JRZLbQrlf0k\"\n      # Token for global Relay\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaAN3A25pbG0AAAAkZTgyZmNkYzEtMDU3YS00MDE1LWI5MGItM2IxOGYwZjI4MDUzbQAAADhDMTROR0E4N0VKUlIwM0c0UVBSMDdBOUM2Rzc4NFRTU1RIU0Y0VEk1VDBHRDhENkwwVlJHPT09PW4GAOb7sImUAWIAAVGA.e_k2YXxBOSmqVSu5RRscjZJBkZ7OAGzkpr5X2ge1MNo\"\n      RUST_LOG: ${RUST_LOG:-debug}\n      RUST_BACKTRACE: 1\n      FIREZONE_API_URL: ws://api:8081\n      OTLP_GRPC_ENDPOINT: otel:4317\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/relay:main\n      args:\n        PACKAGE: firezone-relay\n    image: ${RELAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/relay}:${RELAY_TAG:-main}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"lsof -i UDP | grep firezone-relay\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    # ports:\n    # NOTE: Only 111 ports are used for local dev / testing because Docker Desktop\n    # allocates a userland proxy process for each forwarded port X_X.\n    #\n    # Large ranges here will bring your machine to its knees.\n    # - \"55555-55666:55555-55666/udp\"\n    # - 3478:3478/udp\n    networks:\n      app:\n        ipv4_address: ${RELAY_1_PUBLIC_IP4_ADDR:-172.28.0.101}\n\n  relay-2:\n    environment:\n      PUBLIC_IP4_ADDR: ${RELAY_2_PUBLIC_IP4_ADDR:-172.28.0.201}\n      # PUBLIC_IP6_ADDR: fcff:3990:3990::101\n      # Token for self-hosted Relay\n      # FIREZONE_TOKEN: \".SFMyNTY.g2gDaANtAAAAJGM4OWJjYzhjLTkzOTItNGRhZS1hNDBkLTg4OGFlZjZkMjhlMG0AAAAkNTQ5YzQxMDctMTQ5Mi00ZjhmLWE0ZWMtYTlkMmE2NmQ4YWE5bQAAADhQVTVBSVRFMU84VkRWTk1ITU9BQzc3RElLTU9HVERJQTY3MlM2RzFBQjAyT1MzNEg1TUUwPT09PW4GAEngLBONAWIAAVGA.E-f2MFdGMX7JTL2jwoHBdWcUd2G3UNz2JRZLbQrlf0k\"\n      # Token for global Relay\n      FIREZONE_TOKEN: \".SFMyNTY.g2gDaAN3A25pbG0AAAAkZTgyZmNkYzEtMDU3YS00MDE1LWI5MGItM2IxOGYwZjI4MDUzbQAAADhDMTROR0E4N0VKUlIwM0c0UVBSMDdBOUM2Rzc4NFRTU1RIU0Y0VEk1VDBHRDhENkwwVlJHPT09PW4GAOb7sImUAWIAAVGA.e_k2YXxBOSmqVSu5RRscjZJBkZ7OAGzkpr5X2ge1MNo\"\n      RUST_LOG: ${RUST_LOG:-debug}\n      RUST_BACKTRACE: 1\n      FIREZONE_API_URL: ws://api:8081\n      OTLP_GRPC_ENDPOINT: otel:4317\n    build:\n      target: dev\n      context: rust\n      dockerfile: Dockerfile\n      cache_from:\n        - type=registry,ref=us-east1-docker.pkg.dev/firezone-staging/cache/relay:main\n      args:\n        PACKAGE: firezone-relay\n    image: ${RELAY_IMAGE:-us-east1-docker.pkg.dev/firezone-staging/firezone/debug/relay}:${RELAY_TAG:-main}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"lsof -i UDP | grep firezone-relay\"]\n      start_period: 10s\n      interval: 30s\n      retries: 5\n      timeout: 5s\n    depends_on:\n      api:\n        condition: \"service_healthy\"\n    networks:\n      app:\n        ipv4_address: ${RELAY_2_PUBLIC_IP4_ADDR:-172.28.0.201}\n\n  otel:\n    image: otel/opentelemetry-collector:latest\n    networks:\n      app:\n\n# IPv6 is currently causing flakiness with GH actions and on our testbed.\n# Disabling until there's more time to debug.\nnetworks:\n  # Using a separate subnet here so that the CIDR resource for 172.20.0.0 won't catch DNS resources\n  dns_resources:\n    ipam:\n      config:\n        - subnet: 172.21.0.0/24\n  resources:\n    # enable_ipv6: true\n    ipam:\n      config:\n        - subnet: 172.20.0.0/24\n          # - subnet: fc00:ff:1::/48\n  app:\n    # enable_ipv6: true\n    ipam:\n      config:\n        - subnet: 172.28.0.0/24\n    # Currently not working on testbed\n    # - subnet: fc00:ff:2::/48\n\nvolumes:\n  postgres-data:\n  elixir-build-cache:\n  assets-build-cache:\n",
            "elixir/Dockerfile": "ARG ALPINE_VERSION=\"3.20.5\"\nARG ERLANG_VERSION=\"27.2.1\"\nARG ERLANG_DOWNLOAD_SHA256=\"07982134e10637dde57cf9cdc6dda6f65425810229986136d184766d4db9eda3\"\nARG ELIXIR_VERSION=\"1.18.2\"\nARG ELIXIR_DOWNLOAD_SHA256=\"efc8d0660b56dd3f0c7536725a95f4d8b6be9f11ca9779d824ad79377753e916\"\n\nFROM alpine:${ALPINE_VERSION} AS base\n\n# Important!  Update this no-op ENV variable when this Dockerfile\n# is updated with the current date. It will force refresh of all\n# of the base images and things like `apk add` won't be using\n# old cached versions when the Dockerfile is built.\nENV REFRESHED_AT=2023-10-05 \\\n    LANG=C.UTF-8 \\\n    HOME=/app/ \\\n    TERM=xterm\n\n# Add tagged repos as well as the edge repo so that we can selectively install edge packages\nARG ALPINE_VERSION\nRUN set -xe \\\n    && ALPINE_MINOR_VERSION=$(echo ${ALPINE_VERSION} | cut -d'.' -f1,2) \\\n    && echo \"@main http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_MINOR_VERSION}/main\" >> /etc/apk/repositories \\\n    && echo \"@community http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_MINOR_VERSION}/community\" >> /etc/apk/repositories \\\n    && echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories\n\nRUN set -xe \\\n    # Upgrade Alpine and base packages\n    && apk --no-cache --update-cache --available upgrade \\\n    # Install bash, Erlang/OTP and Elixir runtime dependencies\n    && apk add --no-cache --update-cache \\\n    bash \\\n    libstdc++ \\\n    ca-certificates \\\n    ncurses \\\n    openssl \\\n    pcre \\\n    unixodbc \\\n    zlib \\\n    # Update ca certificates\n    && update-ca-certificates --fresh\n\nFROM base AS build_erlang\n\n# Install bash and Erlang/OTP deps\nRUN set -xe \\\n    && apk add --no-cache --update-cache --virtual .fetch-deps \\\n    curl \\\n    libgcc \\\n    lksctp-tools \\\n    zlib-dev\n\n# Install Erlang/OTP build deps\nRUN set -xe \\\n    && apk add --no-cache --virtual .build-deps \\\n    dpkg-dev \\\n    dpkg \\\n    gcc \\\n    g++ \\\n    libc-dev \\\n    linux-headers \\\n    make \\\n    autoconf \\\n    ncurses-dev \\\n    openssl-dev \\\n    unixodbc-dev \\\n    lksctp-tools-dev \\\n    tar\n\n# Download OTP\nARG ERLANG_VERSION\nARG ERLANG_DOWNLOAD_SHA256\nWORKDIR /tmp/erlang-build\nRUN set -xe \\\n    && curl -fSL -o otp-src.tar.gz \"https://github.com/erlang/otp/releases/download/OTP-${ERLANG_VERSION}/otp_src_${ERLANG_VERSION}.tar.gz\" \\\n    && tar -xzf otp-src.tar.gz -C /tmp/erlang-build --strip-components=1 \\\n    # && sha256sum otp-src.tar.gz && exit 1 \\\n    && echo \"${ERLANG_DOWNLOAD_SHA256}  otp-src.tar.gz\" | sha256sum -c -\n\n# Configure & Build\nRUN set -xe \\\n    && export ERL_TOP=/tmp/erlang-build \\\n    && export CPPFLAGS=\"-D_BSD_SOURCE $CPPFLAGS\" \\\n    && export gnuArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\" \\\n    && ./configure \\\n    --build=\"$gnuArch\" \\\n    --prefix=/usr/local \\\n    --sysconfdir=/etc \\\n    --mandir=/usr/share/man \\\n    --infodir=/usr/share/info \\\n    --without-javac \\\n    --without-jinterface \\\n    --without-wx \\\n    --without-debugger \\\n    --without-observer \\\n    --without-cosEvent \\\n    --without-cosEventDomain \\\n    --without-cosFileTransfer \\\n    --without-cosNotification \\\n    --without-cosProperty \\\n    --without-cosTime \\\n    --without-cosTransactions \\\n    --without-et \\\n    --without-gs \\\n    --without-ic \\\n    --without-megaco \\\n    --without-orber \\\n    --without-percept \\\n    --without-odbc \\\n    --without-typer \\\n    --enable-threads \\\n    --enable-shared-zlib \\\n    --enable-dynamic-ssl-lib \\\n    --enable-ssl=dynamic-ssl-lib \\\n    $(if [[ \"${TARGET}\" != *\"amd64\"* ]]; then echo \"--disable-jit\"; fi) \\\n    && $( \\\n    if [[ \"${TARGETARCH}\" == *\"amd64\"* ]]; \\\n    then export CFLAGS=\"-g -O2 -fstack-clash-protection -fcf-protection=full\"; \\\n    else export CFLAGS=\"-g -O2 -fstack-clash-protection\"; fi \\\n    ) \\\n    && make -j$(getconf _NPROCESSORS_ONLN)\n\n# Install to temporary location, strip the install, install runtime deps and copy to the final location\nRUN set -xe \\\n    && make DESTDIR=/tmp install \\\n    && cd /tmp && rm -rf /tmp/erlang-build \\\n    && find /tmp/usr/local -regex '/tmp/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)' | xargs rm -rf \\\n    && find /tmp/usr/local -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true \\\n    && find /tmp/usr/local -name src | xargs -r find | xargs rmdir -vp || true \\\n    # Strip install to reduce size\n    && scanelf --nobanner -E ET_EXEC -BF '%F' --recursive /tmp/usr/local | xargs -r strip --strip-all \\\n    && scanelf --nobanner -E ET_DYN -BF '%F' --recursive /tmp/usr/local | xargs -r strip --strip-unneeded \\\n    && runDeps=\"$( \\\n    scanelf --needed --nobanner --format '%n#p' --recursive /tmp/usr/local \\\n    | tr ',' '\\n' \\\n    | sort -u \\\n    | awk 'system(\"[ -e /tmp/usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n    )\" \\\n    && ln -s /tmp/usr/local/lib/erlang /usr/local/lib/erlang \\\n    && /tmp/usr/local/bin/erl -eval \"beam_lib:strip_release('/tmp/usr/local/lib/erlang/lib')\" -s init stop > /dev/null \\\n    && (/usr/bin/strip /tmp/usr/local/lib/erlang/erts-*/bin/* || true) \\\n    && apk add --no-cache --virtual .erlang-runtime-deps $runDeps lksctp-tools ca-certificates\n\n# Cleanup after Erlang install\nRUN set -xe \\\n    && apk del .fetch-deps .build-deps \\\n    && rm -rf /var/cache/apk/*\n\nWORKDIR ${HOME}\n\nCMD [\"erl\"]\n\nFROM base AS build_elixir\n\n# Install Elixir build deps\nRUN set -xe \\\n    && apk add --no-cache --virtual .build-deps \\\n    make \\\n    curl \\\n    tar \\\n    git\n\n# Download Elixir\nARG ELIXIR_VERSION\nARG ELIXIR_DOWNLOAD_SHA256\nWORKDIR /tmp/elixir-build\nRUN set -xe \\\n    && curl -fSL -o elixir-src.tar.gz \"https://github.com/elixir-lang/elixir/archive/refs/tags/v${ELIXIR_VERSION}.tar.gz\" \\\n    && mkdir -p /tmp/usr/local/src/elixir \\\n    && tar -xzC /tmp/usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz \\\n    # && sha256sum elixir-src.tar.gz && exit 1 \\\n    && echo \"${ELIXIR_DOWNLOAD_SHA256}  elixir-src.tar.gz\" | sha256sum -c - \\\n    && rm elixir-src.tar.gz\n\nCOPY --from=build_erlang /tmp/usr/local /usr/local\n\n# Compile Elixir\nRUN set -xe \\\n    && cd /tmp/usr/local/src/elixir \\\n    && make DESTDIR=/tmp install clean \\\n    && find /tmp/usr/local/src/elixir/ -type f -not -regex \"/tmp/usr/local/src/elixir/lib/[^\\/]*/lib.*\" -exec rm -rf {} + \\\n    && find /tmp/usr/local/src/elixir/ -type d -depth -empty -delete \\\n    && rm -rf /tmp/elixir-build \\\n    && apk del .build-deps\n\n# Cleanup apk cache\nRUN rm -rf /var/cache/apk/*\n\nWORKDIR ${HOME}\n\nCMD [\"iex\"]\n\nFROM base AS elixir\n\nWORKDIR ${HOME}\n\n# Copy Erlang/OTP and Elixir installations\nCOPY --from=build_erlang /tmp/usr/local /usr/local\nCOPY --from=build_elixir /tmp/usr/local /usr/local\n\n# Install hex + rebar\nRUN set -xe \\\n    && mix local.hex --force \\\n    && mix local.rebar --force\n\nCMD [\"bash\"]\n\nFROM elixir AS compiler\n\nWORKDIR /app\n\n# Install build deps\nRUN apk add --update --no-cache \\\n    make \\\n    git \\\n    nodejs \\\n    npm \\\n    build-base\n\n# Add pnpm\nRUN npm i -g pnpm\n\n# Copy only the files needed to fetch the dependencies,\n# to leverage Docker layer cache for them\nCOPY mix.exs mix.lock ./\nCOPY apps/domain/mix.exs ./apps/domain/mix.exs\nCOPY apps/web/mix.exs ./apps/web/mix.exs\nCOPY apps/api/mix.exs ./apps/api/mix.exs\nCOPY config config\n\n# Fetch and compile the dependencies\nARG MIX_ENV=\"prod\"\nARG GIT_SHA\nRUN mix deps.get --only ${MIX_ENV}\nRUN mix deps.compile --skip-umbrella-children\n\n# Copy the files needed to fetch asset deps\nCOPY apps/web/assets/package.json ./apps/web/assets/\nCOPY apps/web/assets/pnpm-lock.yaml ./apps/web/assets/\n\n# Install npm deps and assets pipeline\nRUN cd apps/web \\\n    && mix assets.setup\n\n# Tailwind needs assets and app directories to look for used classes,\n# so we can't optimize further at this stage\nCOPY priv priv\nCOPY apps apps\n\n# Install pipeline and compile assets for Web app\nRUN cd apps/web \\\n    && mix assets.deploy\n\n# Copy the rest of the application files and compile them\n# mix doesn't know when GIT_SHA changes, so --force is needed to avoid\n# pulling in a cached version.\nRUN mix compile --force\n\nFROM elixir AS builder\n\n# Install build deps\nRUN apk add --update --no-cache \\\n    git\n\nWORKDIR /app\n\n# Copy the compiled dependencies from the previous step\n# leveraging the possible layer cache\nCOPY --from=compiler /app /app\n\nCOPY rel rel\n\nARG APPLICATION_NAME\nARG MIX_ENV=\"prod\"\nARG GIT_SHA\nRUN mix release ${APPLICATION_NAME}\nRUN mix sentry.package_source_code\n\n# start a new build stage so that the final image will only contain\n# the compiled release and other runtime necessities\n\nFROM base AS runtime\n\nRUN set -xe \\\n    # Install Firezone runtime deps\n    && apk add --no-cache --update-cache \\\n    curl \\\n    jq \\\n    tini\n\n# Create default user and home directory, set owner to default\nRUN set -xe \\\n    && mkdir -p /app \\\n    && adduser -s /bin/sh -u 1001 -G root -h /app -S -D default \\\n    && chown -R 1001:0 /app\n\nWORKDIR /app\n\nARG APPLICATION_NAME\nENV APPLICATION_NAME=$APPLICATION_NAME\n\n# Only copy the final release from the build stage\nARG MIX_ENV=\"prod\"\nCOPY --from=builder /app/_build/${MIX_ENV}/rel/${APPLICATION_NAME} ./\n\n# Allow the default user to write to the priv directory of some libraries\nRUN chmod -R ugo+rw /app/lib/tzdata-*/priv\n\n# Change user to \"default\" to limit runtime privileges\nUSER default\n\n# This is critical when you run this container in containers where\n# running process would get a PID 1.\n#\n# BEAM is usually not started by itself but via some shell script (eg. the one generated by\n# Elixir 1.9 releases or Distillery) and this script is not designed to become an init script\n# for a Docker container and it DOES NOT reap zombie processes.\n#\n# So whenever a child process runs and terminates inside the same container it would result in memory and\n# PID leak to a point where host VM would get unresponsive.\n#\n# A good example why you would start a process within container is the `ping` command for liveness probes.\n# It starts a VM to issue an RPC command to a live node and then terminates, but would never be reaped.\n#\n# Tini would become an entrypoin script and would take care of zombie reaping no matter how you start the VM.\nENTRYPOINT [\"/sbin/tini\", \"--\"]\n\nCMD bin/server\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            "Cargo.lock",
            "Cargo.toml",
            "Cross.toml",
            "Dockerfile",
            "Dockerfile-rpm",
            "README.md",
            "clippy.toml",
            "deny.toml",
            "docker-compose-dev.yml",
            "docker-init-gateway.sh",
            "docker-init-relay.sh",
            "docker-init.sh",
            "rust-toolchain.toml"
        ],
        "folders": [
            ".cargo",
            "bin-shared",
            "connlib",
            "dns-over-tcp",
            "dns-types",
            "gateway",
            "gui-client",
            "headless-client",
            "ip-packet",
            "logging",
            "phoenix-channel",
            "relay",
            "socket-factory",
            "telemetry",
            "tests",
            "tun"
        ]
    }
}