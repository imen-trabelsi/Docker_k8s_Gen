{
    "docker_info": {
        "base_image": "elixir",
        "multi_stage_build": true,
        "exposed_ports": [],
        "user": [
            "default"
        ],
        "labels": [],
        "health_checks": [],
        "build_args": [
            "ALPINE_VERSION=\"3.20.5\"",
            "ERLANG_VERSION=\"27.2.1\"",
            "ERLANG_DOWNLOAD_SHA256=\"07982134e10637dde57cf9cdc6dda6f65425810229986136d184766d4db9eda3\"",
            "ELIXIR_VERSION=\"1.18.2\"",
            "ELIXIR_DOWNLOAD_SHA256=\"efc8d0660b56dd3f0c7536725a95f4d8b6be9f11ca9779d824ad79377753e916\"",
            "ALPINE_VERSION",
            "ERLANG_VERSION",
            "ERLANG_DOWNLOAD_SHA256",
            "ELIXIR_VERSION",
            "ELIXIR_DOWNLOAD_SHA256",
            "MIX_ENV=\"prod\"",
            "GIT_SHA",
            "APPLICATION_NAME",
            "MIX_ENV=\"prod\"",
            "GIT_SHA",
            "APPLICATION_NAME",
            "MIX_ENV=\"prod\""
        ],
        "envs": [
            "ENV REFRESHED_AT=2023-10-05 \\",
            "ENV APPLICATION_NAME=$APPLICATION_NAME"
        ],
        "copy_instructions": [
            "WORKDIR /tmp/erlang-build",
            "WORKDIR ${HOME}",
            "WORKDIR /tmp/elixir-build",
            "COPY --from=build_erlang /tmp/usr/local /usr/local",
            "WORKDIR ${HOME}",
            "WORKDIR ${HOME}",
            "COPY --from=build_erlang /tmp/usr/local /usr/local",
            "COPY --from=build_elixir /tmp/usr/local /usr/local",
            "WORKDIR /app",
            "COPY mix.exs mix.lock ./",
            "COPY apps/domain/mix.exs ./apps/domain/mix.exs",
            "COPY apps/web/mix.exs ./apps/web/mix.exs",
            "COPY apps/api/mix.exs ./apps/api/mix.exs",
            "COPY config config",
            "COPY apps/web/assets/package.json ./apps/web/assets/",
            "COPY apps/web/assets/pnpm-lock.yaml ./apps/web/assets/",
            "COPY priv priv",
            "COPY apps apps",
            "WORKDIR /app",
            "COPY --from=compiler /app /app",
            "COPY rel rel",
            "WORKDIR /app",
            "COPY --from=builder /app/_build/${MIX_ENV}/rel/${APPLICATION_NAME} ./"
        ],
        "execution": [
            {
                "command": "cmd",
                "arguments": [
                    "[\"erl\"]"
                ]
            },
            {
                "command": "cmd",
                "arguments": [
                    "[\"iex\"]"
                ]
            },
            {
                "command": "cmd",
                "arguments": [
                    "[\"bash\"]"
                ]
            },
            {
                "command": "entrypoint",
                "arguments": [
                    "[\"/sbin/tini\",",
                    "\"--\"]"
                ]
            },
            {
                "command": "cmd",
                "arguments": [
                    "bin/server"
                ]
            }
        ],
        "run": [
            [
                "set -xe \\",
                "&& ALPINE_MINOR_VERSION=$(echo ${ALPINE_VERSION} | cut -d'.' -f1,2)",
                "&& echo \"@main http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_MINOR_VERSION}/main\" >> /etc/apk/repositories",
                "&& echo \"@community http://dl-cdn.alpinelinux.org/alpine/v${ALPINE_MINOR_VERSION}/community\" >> /etc/apk/repositories",
                "&& echo \"@edge http://dl-cdn.alpinelinux.org/alpine/edge/main\" >> /etc/apk/repositories"
            ],
            [
                "set -xe \\",
                "# Upgrade Alpine and base packages"
            ],
            [
                "set -xe \\",
                "&& apk add --no-cache --update-cache --virtual .fetch-deps",
                "curl",
                "libgcc",
                "lksctp-tools",
                "zlib-dev"
            ],
            [
                "set -xe \\",
                "&& apk add --no-cache --virtual .build-deps",
                "dpkg-dev",
                "dpkg",
                "gcc",
                "g++",
                "libc-dev",
                "linux-headers",
                "make",
                "autoconf",
                "ncurses-dev",
                "openssl-dev",
                "unixodbc-dev",
                "lksctp-tools-dev",
                "tar"
            ],
            [
                "set -xe \\",
                "&& curl -fSL -o otp-src.tar.gz \"https://github.com/erlang/otp/releases/download/OTP-${ERLANG_VERSION}/otp_src_${ERLANG_VERSION}.tar.gz\"",
                "&& tar -xzf otp-src.tar.gz -C /tmp/erlang-build --strip-components=1",
                "# && sha256sum otp-src.tar.gz && exit 1",
                "&& echo \"${ERLANG_DOWNLOAD_SHA256}  otp-src.tar.gz\" | sha256sum -c -"
            ],
            [
                "set -xe \\",
                "&& export ERL_TOP=/tmp/erlang-build",
                "&& export CPPFLAGS=\"-D_BSD_SOURCE $CPPFLAGS\"",
                "&& export gnuArch=\"$(dpkg-architecture --query DEB_HOST_GNU_TYPE)\"",
                "&& ./configure",
                "--build=\"$gnuArch\"",
                "--prefix=/usr/local",
                "--sysconfdir=/etc",
                "--mandir=/usr/share/man",
                "--infodir=/usr/share/info",
                "--without-javac",
                "--without-jinterface",
                "--without-wx",
                "--without-debugger",
                "--without-observer",
                "--without-cosEvent",
                "--without-cosEventDomain",
                "--without-cosFileTransfer",
                "--without-cosNotification",
                "--without-cosProperty",
                "--without-cosTime",
                "--without-cosTransactions",
                "--without-et",
                "--without-gs",
                "--without-ic",
                "--without-megaco",
                "--without-orber",
                "--without-percept",
                "--without-odbc",
                "--without-typer",
                "--enable-threads",
                "--enable-shared-zlib",
                "--enable-dynamic-ssl-lib",
                "--enable-ssl=dynamic-ssl-lib",
                "$(if [[ \"${TARGET}\" != *\"amd64\"* ]]; then echo \"--disable-jit\"; fi)",
                "&& $(",
                "if [[ \"${TARGETARCH}\" == *\"amd64\"* ]];",
                "then export CFLAGS=\"-g -O2 -fstack-clash-protection -fcf-protection=full\";",
                "else export CFLAGS=\"-g -O2 -fstack-clash-protection\"; fi",
                ")",
                "&& make -j$(getconf _NPROCESSORS_ONLN)"
            ],
            [
                "set -xe \\",
                "&& make DESTDIR=/tmp install",
                "&& cd /tmp && rm -rf /tmp/erlang-build",
                "&& find /tmp/usr/local -regex '/tmp/usr/local/lib/erlang/\\(lib/\\|erts-\\).*/\\(man\\|doc\\|obj\\|c_src\\|emacs\\|info\\|examples\\)' | xargs rm -rf",
                "&& find /tmp/usr/local -name src | xargs -r find | grep -v '\\.hrl$' | xargs rm -v || true",
                "&& find /tmp/usr/local -name src | xargs -r find | xargs rmdir -vp || true",
                "# Strip install to reduce size"
            ],
            [
                "set -xe \\",
                "&& apk del .fetch-deps .build-deps",
                "&& rm -rf /var/cache/apk/*"
            ],
            [
                "set -xe \\",
                "&& apk add --no-cache --virtual .build-deps",
                "make",
                "curl",
                "tar",
                "git"
            ],
            [
                "set -xe \\",
                "&& curl -fSL -o elixir-src.tar.gz \"https://github.com/elixir-lang/elixir/archive/refs/tags/v${ELIXIR_VERSION}.tar.gz\"",
                "&& mkdir -p /tmp/usr/local/src/elixir",
                "&& tar -xzC /tmp/usr/local/src/elixir --strip-components=1 -f elixir-src.tar.gz",
                "# && sha256sum elixir-src.tar.gz && exit 1",
                "&& echo \"${ELIXIR_DOWNLOAD_SHA256}  elixir-src.tar.gz\" | sha256sum -c -",
                "&& rm elixir-src.tar.gz"
            ],
            [
                "set -xe \\",
                "&& cd /tmp/usr/local/src/elixir",
                "&& make DESTDIR=/tmp install clean",
                "&& find /tmp/usr/local/src/elixir/ -type f -not -regex \"/tmp/usr/local/src/elixir/lib/[^\\/]*/lib.*\" -exec rm -rf {} +",
                "&& find /tmp/usr/local/src/elixir/ -type d -depth -empty -delete",
                "&& rm -rf /tmp/elixir-build",
                "&& apk del .build-deps"
            ],
            [
                "rm -rf /var/cache/apk/*",
                ""
            ],
            [
                "set -xe \\",
                "&& mix local.hex --force",
                "&& mix local.rebar --force"
            ],
            [
                "apk add --update --no-cache \\",
                "make",
                "git",
                "nodejs",
                "npm",
                "build-base"
            ],
            [
                "npm i -g pnpm",
                ""
            ],
            [
                "mix deps.get --only ${MIX_ENV}",
                "RUN mix deps.compile --skip-umbrella-children"
            ],
            [
                "cd apps/web \\",
                "&& mix assets.setup"
            ],
            [
                "cd apps/web \\",
                "&& mix assets.deploy"
            ],
            [
                "mix compile --force",
                ""
            ],
            [
                "apk add --update --no-cache \\",
                "git"
            ],
            [
                "mix release ${APPLICATION_NAME}",
                "RUN mix sentry.package_source_code"
            ],
            [
                "set -xe \\",
                "# Install Firezone runtime deps"
            ],
            [
                "set -xe \\",
                "&& mkdir -p /app",
                "&& adduser -s /bin/sh -u 1001 -G root -h /app -S -D default",
                "&& chown -R 1001:0 /app"
            ],
            [
                "chmod -R ugo+rw /app/lib/tzdata-*/priv",
                ""
            ]
        ]
    }
}