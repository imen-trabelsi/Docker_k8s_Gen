{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"angular\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^19.0.5\",\n    \"@angular/common\": \"^19.0.5\",\n    \"@angular/compiler\": \"^19.0.5\",\n    \"@angular/core\": \"^19.0.5\",\n    \"@angular/forms\": \"^19.0.5\",\n    \"@angular/platform-browser\": \"^19.0.5\",\n    \"@angular/platform-browser-dynamic\": \"^19.0.5\",\n    \"@angular/router\": \"^19.0.5\",\n    \"@microsoft/signalr\": \"^8.0.7\",\n    \"@ngrx/effects\": \"^19.0.0\",\n    \"@ngrx/operators\": \"^19.0.0\",\n    \"@ngrx/store\": \"^19.0.0\",\n    \"@ngrx/store-devtools\": \"^19.0.0\",\n    \"bootstrap\": \"^5.3.3\",\n    \"font-awesome\": \"^4.7.0\",\n    \"ngx-bootstrap\": \"^19.0.1\",\n    \"ngx-toastr\": \"^19.0.0\",\n    \"oidc-client\": \"^1.11.5\",\n    \"oidc-client-ts\": \"^3.1.0\",\n    \"rxjs\": \"^7.8.0\",\n    \"tslib\": \"^2.6.3\",\n    \"zone.js\": \"^0.15.0\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^19.0.6\",\n    \"@angular/cli\": \"^19.0.6\",\n    \"@angular/compiler-cli\": \"^19.0.5\",\n    \"@angular/language-service\": \"^19.0.5\",\n    \"@types/jasmine\": \"^5.1.5\",\n    \"@types/jasminewd2\": \"^2.0.13\",\n    \"@types/node\": \"^22.10.2\",\n    \"codelyzer\": \"^6.0.2\",\n    \"jasmine-core\": \"~5.5.0\",\n    \"jasmine-spec-reporter\": \"~7.0.0\",\n    \"karma\": \"^6.4.4\",\n    \"karma-chrome-launcher\": \"^3.1.1\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"^5.1.0\",\n    \"karma-jasmine-html-reporter\": \"^2.0.0\",\n    \"prettier\": \"3.4.2\",\n    \"ts-node\": \"~10.9.2\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.6.3\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "src/ModularMonolith/.env": "ASPNETCORE_ENVIRONMENT=\"Development\"\nDOTNET_ENVIRONMENT=\"Development\"\nMessageBroker__Provider=\"RabbitMQ\"\nMessageBroker__RabbitMQ__HostName=\"rabbitmq\"\nStorage__Provider=\"Local\"\nStorage__Local__Path=\"/files\"\nModules__AuditLog__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.AuditLog;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nModules__Configuration__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.Configuration;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nModules__Identity__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.Identity;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nModules__Notification__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nModules__Product__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.Product;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nModules__Storage__ConnectionStrings__Default=\"Server=db;Database=ClassifiedAds.ModularMonolith.Storage;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"",
            "src/ModularMonolith/ClassifiedAds.WebAPI/appsettings.json": "{\n  \"Authentication\": {\n    \"Provider\": \"IdentityServer\",\n    \"IdentityServer\": {\n      \"Authority\": \"https://localhost:44367\",\n      \"Audience\": \"ClassifiedAds.WebAPI\",\n      \"RequireHttpsMetadata\": \"true\"\n    },\n    \"Jwt\": {\n      \"IssuerUri\": \"https://localhost:44367/\",\n      \"Audience\": \"ClassifiedAds.WebAPI\",\n      \"TokenDecryptionCertificate\": {\n        \"Thumbprint\": null,\n        \"Path\": \"Certs/classifiedads.identityserver.pfx\",\n        \"Password\": \"password1234\"\n      },\n      \"IssuerSigningCertificate\": {\n        \"Thumbprint\": null,\n        \"Path\": \"Certs/classifiedads.identityserver.pub.cer\"\n      }\n    }\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"System\": \"Warning\",\n      \"Microsoft\": \"Warning\"\n    },\n    \"File\": {\n      \"MinimumLogEventLevel\": \"Information\"\n    },\n    \"EventLog\": {\n      \"IsEnabled\": false,\n      \"LogName\": \"Application\",\n      \"SourceName\": \"ClassifiedAds.WebAPI\"\n    },\n    \"OpenTelemetry\": {\n      \"IsEnabled\": false,\n      \"ServiceName\": \"ClassifiedAds.WebAPI\",\n      \"Otlp\": {\n        \"IsEnabled\": false,\n        \"Endpoint\": \"http://localhost:4317\"\n      }\n    }\n  },\n  \"Caching\": {\n    \"InMemory\": {\n      \"SizeLimit\": null\n    },\n    \"Distributed\": {\n      \"Provider\": \"InMemory\",\n      \"InMemory\": {\n        \"SizeLimit\": null\n      },\n      \"Redis\": {\n        \"Configuration\": \"\",\n        \"InstanceName\": \"\"\n      },\n      \"SqlServer\": {\n        \"ConnectionString\": \"\",\n        \"SchemaName\": \"\",\n        \"TableName\": \"\"\n      }\n    }\n  },\n  \"Monitoring\": {\n    \"MiniProfiler\": {\n      \"IsEnabled\": true\n      //\"SqlServerStorage\": {\n      //  \"ConectionString\": \"Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\",\n      //  \"ProfilersTable\": \"MiniProfilers\",\n      //  \"TimingsTable\": \"MiniProfilerTimings\",\n      //  \"ClientTimingsTable\": \"MiniProfilerClientTimings\"\n      //}\n    },\n    \"AzureApplicationInsights\": {\n      \"IsEnabled\": false,\n      \"InstrumentationKey\": \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n      \"EnableSqlCommandTextInstrumentation\": true\n    },\n    \"OpenTelemetry\": {\n      \"IsEnabled\": false,\n      \"ServiceName\": \"ClassifiedAds.WebAPI\",\n      \"TraceEnabled\": true,\n      \"MetricEnabled\": true,\n      \"Otlp\": {\n        \"IsEnabled\": false,\n        \"Endpoint\": \"http://localhost:4317\"\n      }\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"CORS\": {\n    \"AllowAnyOrigin\": false,\n    \"AllowedOrigins\": [ \"http://localhost:4200\", \"http://localhost:3000\", \"http://localhost:8080\", \"https://localhost:44348\" ]\n  },\n  \"SecurityHeaders\": {\n    \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n    \"Pragma\": \"no-cache\",\n    \"Expires\": \"0\"\n  },\n  \"Interceptors\": {\n    \"LoggingInterceptor\": true,\n    \"ErrorCatchingInterceptor\": true\n  },\n  \"Modules\": {\n    \"AuditLog\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.AuditLog;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      }\n    },\n    \"Configuration\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.Configuration;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      },\n      \"Certificates\": {\n        \"SettingsEncryption\": {\n          \"Thumbprint\": null,\n          \"Path\": \"Certs/classifiedads.secretsencryption.pfx\",\n          \"Password\": \"password1234\",\n          \"X509KeyStorageFlags\": \"EphemeralKeySet\"\n        }\n      }\n    },\n    \"Identity\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.Identity;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      },\n      \"IdentityServer\": {\n        \"Authority\": \"https://localhost:44367\",\n        \"ApiName\": \"ClassifiedAds.WebAPI\",\n        \"RequireHttpsMetadata\": \"true\"\n      }\n    },\n    \"Notification\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      },\n      \"Email\": {\n        \"Provider\": \"Fake\",\n        \"SmtpClient\": {\n          \"Host\": \"localhost\",\n          \"Port\": \"\",\n          \"UserName\": \"\",\n          \"Password\": \"\",\n          \"EnableSsl\": \"\"\n        },\n        \"SendGrid\": {\n          \"ApiKey\": \"\",\n          \"OverrideFrom\": \"\",\n          \"OverrideTos\": \"\"\n        }\n      },\n      \"Sms\": {\n        \"Provider\": \"Fake\",\n        \"Twilio\": {\n          \"AccountSId\": \"\",\n          \"AuthToken\": \"\",\n          \"FromNumber\": \"\"\n        },\n        \"Azure\": {\n          \"ConnectionString\": \"\",\n          \"FromNumber\": \"\"\n        }\n      },\n      \"Web\": {\n        \"Provider\": \"Fake\",\n        \"SignalR\": {\n          \"Endpoint\": \"https://localhost:44364\",\n          \"Hubs\": {\n            \"SendTaskStatusMessage\": \"SimulatedLongRunningTaskHub\"\n          },\n          \"MethodNames\": {\n            \"SendTaskStatusMessage\": \"SendTaskStatus\"\n          }\n        }\n      }\n    },\n    \"Product\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.Product;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      }\n    },\n    \"Storage\": {\n      \"ConnectionStrings\": {\n        \"Default\": \"Server=127.0.0.1;Database=ClassifiedAds.ModularMonolith.Storage;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n      },\n      \"Provider\": \"Local\",\n      \"MasterEncryptionKey\": \"+2ZC9wrwlvPswPxCND0BjrKJ3CfOpImGtn4hloVwo2I=\",\n      \"Local\": {\n        \"Path\": \"C:\\\\Data\\\\files\"\n      },\n      \"Azure\": {\n        \"ConnectionString\": \"DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net\",\n        \"Container\": \"classifiedadds\"\n      },\n      \"Amazon\": {\n        \"AccessKeyID\": \"xxx\",\n        \"SecretAccessKey\": \"xxx\",\n        \"BucketName\": \"classifiedadds\",\n        \"RegionEndpoint\": \"ap-southeast-1\"\n      }\n    }\n  }\n}\n",
            "src/ModularMonolith/docker-compose.yml": "version: \"3.6\"\nservices:\n    db:\n        image: \"mcr.microsoft.com/mssql/server:2017-latest\"\n        ports:\n            - \"1433:1433\"\n        environment:\n            SA_PASSWORD: \"sqladmin123!@#\"\n            MSSQL_PID: \"Developer\"\n            ACCEPT_EULA: \"Y\"\n    rabbitmq:\n        image: \"rabbitmq:3-management\"\n        ports:\n          - \"5672:5672\"\n          - \"15672:15672\"\n    mailhog:\n        image: mailhog/mailhog\n        ports: \n          - 1025:1025 # smtp server\n          - 8025:8025 # web ui\n    migrator:\n        image: classifiedads.modularmonolith.migrator\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.Migrator/Dockerfile\n        depends_on:\n          - db\n        environment:\n          DOTNET_ENVIRONMENT: ${DOTNET_ENVIRONMENT}\n          Modules__AuditLog__ConnectionStrings__Default: ${Modules__AuditLog__ConnectionStrings__Default}\n          Modules__Configuration__ConnectionStrings__Default: ${Modules__Configuration_ConnectionStrings__Default}\n          Modules__Identity__ConnectionStrings__Default: ${Modules__Identity__ConnectionStrings__Default}\n          Modules__Notification__ConnectionStrings__Default: ${Modules__Notification__ConnectionStrings__Default}\n          Modules__Product__ConnectionStrings__Default: ${Modules__Product__ConnectionStrings__Default}\n          Modules__Storage__ConnectionStrings__Default: ${Modules__Storage__ConnectionStrings__Default}\n          CheckDependency__Enabled: \"true\"\n          CheckDependency__Host: \"db:1433\"\n    identityserver:\n        image: classifiedads.modularmonolith.identityserver\n        build:\n          context: ../IdentityServer/OpenIddict\n          dockerfile: ./ClassifiedAds.IdentityServer/Dockerfile\n        ports:\n            - \"9000:80\"\n        depends_on:\n          - db\n          - migrator\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${Modules__Identity__ConnectionStrings__Default}\n          CookiePolicyOptions__IsEnabled: \"true\"\n          CookiePolicyOptions__MinimumSameSitePolicy: \"Lax\"\n          CookiePolicyOptions__Secure: \"None\"\n    webapi:\n        image: classifiedads.modularmonolith.webapi\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.WebAPI/Dockerfile\n        ports:\n            - \"9002:8080\"\n        depends_on:\n          - db\n          - migrator\n          - rabbitmq\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Modules__AuditLog__ConnectionStrings__Default: ${Modules__AuditLog__ConnectionStrings__Default}\n          Modules__Configuration__ConnectionStrings__Default: ${Modules__Configuration__ConnectionStrings__Default}\n          Modules__Identity__ConnectionStrings__Default: ${Modules__Identity__ConnectionStrings__Default}\n          Modules__Identity__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Modules__Identity__IdentityServer__RequireHttpsMetadata: \"false\"\n          Modules__Notification__ConnectionStrings__Default: ${Modules__Notification__ConnectionStrings__Default}\n          Modules__Product__ConnectionStrings__Default: ${Modules__Product__ConnectionStrings__Default}\n          Modules__Storage__ConnectionStrings__Default: ${Modules__Storage__ConnectionStrings__Default}\n          Modules__Storage__Provider: ${Storage__Provider}\n          Modules__Storage__Local__Path: ${Storage__Local__Path}\n    background:\n        image: classifiedads.modularmonolith.background\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.Background/Dockerfile\n        depends_on:\n          - db\n          - migrator\n          - rabbitmq\n          - mailhog\n        environment:\n          DOTNET_ENVIRONMENT: ${DOTNET_ENVIRONMENT}\n          CheckDependency__Enabled: \"true\"\n          CheckDependency__Host: \"rabbitmq:5672\"\n          MessageBroker__Provider: ${MessageBroker__Provider}\n          MessageBroker__RabbitMQ__HostName: ${MessageBroker__RabbitMQ__HostName}\n          Modules__AuditLog__ConnectionStrings__Default: ${Modules__AuditLog__ConnectionStrings__Default}\n          Modules__Configuration__ConnectionStrings__Default: ${Modules__Configuration__ConnectionStrings__Default}\n          Modules__Identity__ConnectionStrings__Default: ${Modules__Identity__ConnectionStrings__Default}\n          Modules__Notification__ConnectionStrings__Default: ${Modules__Notification__ConnectionStrings__Default}\n          Modules__Notification__Email__Provider: \"SmtpClient\"\n          Modules__Notification__Email__SmtpClient__Host: \"mailhog\"\n          Modules__Notification__Email__SmtpClient__Port: \"1025\"\n          Modules__Notification__Sms__Provider: \"Fake\"\n          Modules__Notification__Sms__Twilio__AccountSId: \"\"\n          Modules__Notification__Sms__Twilio__AuthToken: \"\"\n          Modules__Notification__Sms__Twilio__FromNumber: \"\"\n          Modules__Notification__Web__Provider: \"Fake\"\n          Modules__Notification__Web__SignalR__Endpoint: \"http://notificationserver\"\n          Modules__Product__ConnectionStrings__Default: ${Modules__Product__ConnectionStrings__Default}\n          Modules__Storage__ConnectionStrings__Default: ${Modules__Storage__ConnectionStrings__Default}\n          Modules__Storage__Provider: ${Storage__Provider}\n          Modules__Storage__Local__Path: ${Storage__Local__Path}\n",
            "src/ModularMonolith/ClassifiedAds.WebAPI/Dockerfile": "FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build-env\nWORKDIR /ClassifiedAds.ModularMonolith\n\n# Copy csproj and restore as distinct layers\nCOPY ./ClassifiedAds.Application/*.csproj ./ClassifiedAds.Application/\nCOPY ./ClassifiedAds.CrossCuttingConcerns/*.csproj ./ClassifiedAds.CrossCuttingConcerns/\nCOPY ./ClassifiedAds.Domain/*.csproj ./ClassifiedAds.Domain/\nCOPY ./ClassifiedAds.Infrastructure/*.csproj ./ClassifiedAds.Infrastructure/\n\nRUN dotnet restore ./ClassifiedAds.Application/ClassifiedAds.Application.csproj\nRUN dotnet restore ./ClassifiedAds.Infrastructure/ClassifiedAds.Infrastructure.csproj\n\nCOPY ./ClassifiedAds.Contracts/*.csproj ./ClassifiedAds.Contracts/\nCOPY ./ClassifiedAds.Modules.AuditLog/*.csproj ./ClassifiedAds.Modules.AuditLog/\nCOPY ./ClassifiedAds.Modules.Configuration/*.csproj ./ClassifiedAds.Modules.Configuration/\nCOPY ./ClassifiedAds.Modules.Identity/*.csproj ./ClassifiedAds.Modules.Identity/\nCOPY ./ClassifiedAds.Modules.Notification/*.csproj ./ClassifiedAds.Modules.Notification/\nCOPY ./ClassifiedAds.Modules.Product/*.csproj ./ClassifiedAds.Modules.Product/\nCOPY ./ClassifiedAds.Modules.Storage/*.csproj ./ClassifiedAds.Modules.Storage/\n\nCOPY ./ClassifiedAds.WebAPI/*.csproj ./ClassifiedAds.WebAPI/\n\nRUN dotnet restore ./ClassifiedAds.WebAPI/ClassifiedAds.WebAPI.csproj\n\n# Copy everything else and build\nCOPY . ./\nRUN dotnet publish ./ClassifiedAds.WebAPI/ClassifiedAds.WebAPI.csproj -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:9.0\nWORKDIR /ClassifiedAds.ModularMonolith\nCOPY --from=build-env /ClassifiedAds.ModularMonolith/out .\n\nENTRYPOINT [\"dotnet\", \"ClassifiedAds.WebAPI.dll\"]",
            "src/ModularMonolith/Jenkinsfile": "pipeline {\n  agent any\n  environment {\n    VERSION = \"1.0.0.${BUILD_NUMBER}\"\n  }\n  stages {\n    stage('Git Checkout') {\n      steps {\n        git branch: 'master', url: 'https://github.com/phongnguyend/Practical.CleanArchitecture'\n      }\n    }\n    stage('Build') {\n      steps {\n        sh 'dotnet --info'\n\t\techo \"BUILD_NUMBER: ${BUILD_NUMBER}\"\n\t\techo \"VERSION: ${VERSION}\"\n        dir('src/ModularMonolith') {\n          sh 'dotnet clean'\n          sh \"dotnet build -p:Version=${VERSION} --configuration Release\"\n        }\n      }\n    }\n    stage('Publish') {\n      steps {\n        dir('src/ModularMonolith') {\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.Background/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.Migrator/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.WebAPI/*.csproj --configuration Release\"\n        }\n      }\n    }\n  }\n}",
            "src/ModularMonolith/azure-pipelines.yml": "# Docker\n# Build and push an image to Azure Container Registry\n# https://docs.microsoft.com/azure/devops/pipelines/languages/docker\n\ntrigger:\n  branches:\n    include:\n    - main\n  paths:\n    include:\n    - src/ModularMonolith\n\nresources:\n- repo: self\n\nvariables:\n  # Container registry service connection established during pipeline creation\n  dockerRegistryEndpoint: 'classifiedads'\n  dockerComposeFile: 'src/ModularMonolith/docker-compose.yml'\n  tag: '$(Build.BuildId)'\n  \n  # Agent VM image name\n  vmImageName: 'ubuntu-latest'\n\nstages:\n- stage: SonarCloud\n  displayName: SonarCloud\n  jobs:  \n  - job: SonarCloud\n    displayName: SonarCloud\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: SonarCloudPrepare@1\n      inputs:\n        SonarCloud: 'SonarCloud'\n        organization: 'phongnguyend'\n        scannerMode: 'MSBuild'\n        projectKey: 'Practical.CleanArchitecture'\n        projectName: 'Practical.CleanArchitecture'\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/ModularMonolith/ClassifiedAds.ModularMonolith.sln'\n    - task: SonarCloudAnalyze@1\n    - task: SonarCloudPublish@1\n      inputs:\n        pollingTimeoutSec: '300'\n\n- stage: WhiteSourceBolt\n  displayName: Build and Run WhiteSource Bolt\n  jobs:  \n  - job: WhiteSourceBolt\n    displayName: Build and Run WhiteSource Bolt\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/ModularMonolith/ClassifiedAds.ModularMonolith.sln'\n    - task: WhiteSource Bolt@20\n      inputs:\n        cwd: 'src/ModularMonolith/'\n\n- stage: DotNetBuild\n  displayName: .Net Build\n  jobs:\n  - job: Build\n    displayName: Build\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n      - task: DotNetCoreCLI@2\n        displayName: Build\n        inputs:\n          command: 'build'\n          arguments: '--configuration Release'\n          workingDirectory: 'src/ModularMonolith'\n      - task: DotNetCoreCLI@2\n        displayName: Publish\n        inputs:\n          command: 'publish'\n          publishWebProjects: false\n          projects: |\n            src/ModularMonolith/ClassifiedAds.Background/*.csproj\n            src/ModularMonolith/ClassifiedAds.Migrator/*.csproj\n            src/ModularMonolith/ClassifiedAds.NotificationServer/*.csproj\n            src/ModularMonolith/ClassifiedAds.WebAPI/*.csproj\n            src/ModularMonolith/ClassifiedAds.IdentityServer/*.csproj\n          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'\n      - task: PublishBuildArtifacts@1\n        inputs:\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n          ArtifactName: 'ModularMonolith'\n          publishLocation: 'Container'\n\n- stage: DockerBuild\n  displayName: Build and Push Docker Images\n  jobs:  \n  - job: Build\n    displayName: Build and Push\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DockerCompose@0\n      displayName: Build services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Build services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)\n    - task: DockerCompose@0\n      displayName: Push services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Push services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "ClassifiedAds.Services.Notification.Grpc.csproj",
            "Dockerfile",
            "Program.cs",
            "appsettings.Development.json",
            "appsettings.json"
        ],
        "folders": [
            "Properties",
            "Services"
        ]
    }
}