{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"angular\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^19.0.5\",\n    \"@angular/common\": \"^19.0.5\",\n    \"@angular/compiler\": \"^19.0.5\",\n    \"@angular/core\": \"^19.0.5\",\n    \"@angular/forms\": \"^19.0.5\",\n    \"@angular/platform-browser\": \"^19.0.5\",\n    \"@angular/platform-browser-dynamic\": \"^19.0.5\",\n    \"@angular/router\": \"^19.0.5\",\n    \"@microsoft/signalr\": \"^8.0.7\",\n    \"@ngrx/effects\": \"^19.0.0\",\n    \"@ngrx/operators\": \"^19.0.0\",\n    \"@ngrx/store\": \"^19.0.0\",\n    \"@ngrx/store-devtools\": \"^19.0.0\",\n    \"bootstrap\": \"^5.3.3\",\n    \"font-awesome\": \"^4.7.0\",\n    \"ngx-bootstrap\": \"^19.0.1\",\n    \"ngx-toastr\": \"^19.0.0\",\n    \"oidc-client\": \"^1.11.5\",\n    \"oidc-client-ts\": \"^3.1.0\",\n    \"rxjs\": \"^7.8.0\",\n    \"tslib\": \"^2.6.3\",\n    \"zone.js\": \"^0.15.0\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^19.0.6\",\n    \"@angular/cli\": \"^19.0.6\",\n    \"@angular/compiler-cli\": \"^19.0.5\",\n    \"@angular/language-service\": \"^19.0.5\",\n    \"@types/jasmine\": \"^5.1.5\",\n    \"@types/jasminewd2\": \"^2.0.13\",\n    \"@types/node\": \"^22.10.2\",\n    \"codelyzer\": \"^6.0.2\",\n    \"jasmine-core\": \"~5.5.0\",\n    \"jasmine-spec-reporter\": \"~7.0.0\",\n    \"karma\": \"^6.4.4\",\n    \"karma-chrome-launcher\": \"^3.1.1\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"^5.1.0\",\n    \"karma-jasmine-html-reporter\": \"^2.0.0\",\n    \"prettier\": \"3.4.2\",\n    \"ts-node\": \"~10.9.2\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.6.3\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "src/Microservices/.env": "ASPNETCORE_ENVIRONMENT=\"Development\"\nDOTNET_ENVIRONMENT=\"Development\"\nServices__AuditLog__Grpc=\"https://auditlog-grpc\"\nServices__Identity__Grpc=\"https://identity-grpc\"\nServices__Notification__Grpc=\"https://notification-grpc\"",
            "src/Microservices/Services.Notification/ClassifiedAds.Services.Notification.Api/appsettings.json": "{\n  \"ConnectionStrings\": {\n    \"ClassifiedAds\": \"Server=127.0.0.1;Database=ClassifiedAds.Microservices.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n  },\n  \"Authentication\": {\n    \"Provider\": \"IdentityServer\",\n    \"IdentityServer\": {\n      \"Authority\": \"https://localhost:44367\",\n      \"Audience\": \"ClassifiedAds.WebAPI\",\n      \"RequireHttpsMetadata\": \"true\"\n    },\n    \"Jwt\": {\n      \"IssuerUri\": \"https://localhost:44367/\",\n      \"Audience\": \"ClassifiedAds.WebAPI\",\n      \"TokenDecryptionCertificate\": {\n        \"Thumbprint\": null,\n        \"Path\": \"Certs/classifiedads.identityserver.pfx\",\n        \"Password\": \"password1234\"\n      },\n      \"IssuerSigningCertificate\": {\n        \"Thumbprint\": null,\n        \"Path\": \"Certs/classifiedads.identityserver.pub.cer\"\n      }\n    }\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"Monitoring\": {\n    \"OpenTelemetry\": {\n      \"IsEnabled\": false,\n      \"ServiceName\": \"notification-api\",\n      \"TraceEnabled\": true,\n      \"MetricEnabled\": true,\n      \"Otlp\": {\n        \"IsEnabled\": false,\n        \"Endpoint\": \"http://localhost:4317\"\n      }\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"Notification\": {\n    \"Email\": {\n      \"Provider\": \"Fake\",\n      \"SmtpClient\": {\n        \"Host\": \"localhost\",\n        \"Port\": \"\",\n        \"UserName\": \"\",\n        \"Password\": \"\",\n        \"EnableSsl\": \"\"\n      }\n    },\n    \"Sms\": {\n      \"Provider\": \"Fake\",\n      \"Twilio\": {\n        \"AccountSId\": \"\",\n        \"AuthToken\": \"\",\n        \"FromNumber\": \"\"\n      }\n    },\n    \"Web\": {\n      \"Provider\": \"Fake\",\n      \"SignalR\": {\n\n      }\n    }\n  },\n  \"Services\": {\n    \"AuditLog\": {\n      \"Grpc\": \"https://localhost:5002\"\n    },\n    \"Notification\": {\n      \"Grpc\": \"https://localhost:5003\"\n    },\n    \"Identity\": {\n      \"Grpc\": \"https://localhost:5001\"\n    }\n  }\n}\n",
            "src/Microservices/docker-compose.yml": "version: \"3.6\"\nservices:\n    db:\n        image: \"mcr.microsoft.com/mssql/server:2017-latest\"\n        ports:\n            - \"1434:1433\"\n        environment:\n            SA_PASSWORD: \"sqladmin123!@#\"\n            MSSQL_PID: \"Developer\"\n            ACCEPT_EULA: \"Y\"\n    rabbitmq:\n        image: \"rabbitmq:3-management\"\n        ports:\n          - \"5672:5672\"\n          - \"15672:15672\"\n    mailhog:\n        image: mailhog/mailhog\n        ports: \n          - 1025:1025 # smtp server\n          - 8025:8025 # web ui\n    auditlog-api:\n        image: classifiedads.services.auditlog.api\n        build:\n          context: .\n          dockerfile: ./Services.AuditLog/ClassifiedAds.Services.AuditLog.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.AuditLog;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    auditlog-grpc:\n        image: classifiedads.services.auditlog.grpc\n        build:\n          context: .\n          dockerfile: ./Services.AuditLog/ClassifiedAds.Services.AuditLog.Grpc/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ASPNETCORE_URLS: \"https://+\"\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.AuditLog;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    configuration-api:\n        image: classifiedads.services.configuration.api\n        build:\n          context: .\n          dockerfile: ./Services.Configuration/ClassifiedAds.Services.Configuration.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Configuration;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    identity-api:\n        image: classifiedads.services.identity.api\n        build:\n          context: .\n          dockerfile: ./Services.Identity/ClassifiedAds.Services.Identity.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Identity;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    identity-authserver:\n        image: classifiedads.services.identity.authserver\n        build:\n          context: ../IdentityServer/OpenIddict\n          dockerfile: ./ClassifiedAds.IdentityServer/Dockerfile\n        ports:\n          - \"9000:80\"\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Identity;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          CookiePolicyOptions__IsEnabled: \"true\"\n          CookiePolicyOptions__MinimumSameSitePolicy: \"Lax\"\n          CookiePolicyOptions__Secure: \"None\"\n    identity-grpc:\n        image: classifiedads.services.identity.grpc\n        build:\n          context: .\n          dockerfile: ./Services.Identity/ClassifiedAds.Services.Identity.Grpc/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ASPNETCORE_URLS: \"https://+\"\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Identity;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    notification-api:\n        image: classifiedads.services.notification.api\n        build:\n          context: .\n          dockerfile: ./Services.Notification/ClassifiedAds.Services.Notification.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          MessageBroker__Provider: \"RabbitMQ\"\n          MessageBroker__RabbitMQ__HostName: \"rabbitmq\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    notification-background:\n        image: classifiedads.services.notification.background\n        build:\n          context: .\n          dockerfile: ./Services.Notification/ClassifiedAds.Services.Notification.Background/Dockerfile\n        depends_on:\n          - db\n        environment:\n          DOTNET_ENVIRONMENT: ${DOTNET_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          MessageBroker__Provider: \"RabbitMQ\"\n          MessageBroker__RabbitMQ__HostName: \"rabbitmq\"\n          Notification__Email__Provider: \"SmtpClient\"\n          Notification__Email__SmtpClient__Host: \"mailhog\"\n          Notification__Email__SmtpClient__Port: \"1025\"\n          Notification__Sms__Provider: \"Fake\"\n          Notification__Sms__Twilio__AccountSId: \"\"\n          Notification__Sms__Twilio__AuthToken: \"\"\n          Notification__Sms__Twilio__FromNumber: \"\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    notification-grpc:\n        image: classifiedads.services.notification.grpc\n        build:\n          context: .\n          dockerfile: ./Services.Notification/ClassifiedAds.Services.Notification.Grpc/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ASPNETCORE_URLS: \"https://+\"\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Notification;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          MessageBroker__Provider: \"RabbitMQ\"\n          MessageBroker__RabbitMQ__HostName: \"rabbitmq\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    product-api:\n        image: classifiedads.services.product.api\n        build:\n          context: .\n          dockerfile: ./Services.Product/ClassifiedAds.Services.Product.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Product;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    storage-api:\n        image: classifiedads.services.storage.api\n        build:\n          context: .\n          dockerfile: ./Services.Storage/ClassifiedAds.Services.Storage.Api/Dockerfile\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: \"Server=db;Database=ClassifiedAds.Microservices.Storage;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          MessageBroker__Provider: \"RabbitMQ\"\n          MessageBroker__RabbitMQ__HostName: \"rabbitmq\"\n          Storage__Provider: \"Local\"\n          Storage__Local__Path: \"/files\"\n          Services__AuditLog__Grpc: ${Services__AuditLog__Grpc}\n          Services__Identity__Grpc: ${Services__Identity__Grpc}\n          Services__Notification__Grpc: ${Services__Notification__Grpc}\n    webapi:\n        image: classifiedads.gateways.webapi\n        build:\n          context: .\n          dockerfile: ./Gateways.WebAPI/ClassifiedAds.Gateways.WebAPI/Dockerfile\n        ports:\n            - \"9002:8080\"\n        depends_on:\n          - db\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ProxyProvider: \"Ocelot\"\n          Ocelot__DefaultDownstreamScheme: \"http\"\n          Ocelot__Routes__Products__Downstream: \"http://product-api:8080\"\n          Ocelot__Routes__Files__Downstream: \"http://storage-api:8080\"\n          Ocelot__Routes__AuditLogs__Downstream: \"http://auditlog-api:8080\"\n          Ocelot__Routes__Users__Downstream: \"http://identity-api:8080\"\n          Ocelot__Routes__Configurations__Downstream: \"http://configuration-api:8080\"\n          Ocelot__Routes__Hubs__Downstream: \"ws://notification-api:8080\"\n          Yarp__Clusters__Products__Destinations__destination1__Address: \"http://product-api:8080\"\n          Yarp__Clusters__Files__Destinations__destination1__Address: \"http://storage-api:8080\"\n          Yarp__Clusters__AuditLogs__Destinations__destination1__Address: \"http://auditlog-api:8080\"\n          Yarp__Clusters__Users__Destinations__destination1__Address: \"http://identity-api:8080\"\n          Yarp__Clusters__Configurations__Destinations__destination1__Address: \"http://configuration-api:8080\"\n          Yarp__Clusters__Hubs__Destinations__destination1__Address: \"http://notification-api:8080\"\n",
            "src/Microservices/Services.Notification/ClassifiedAds.Services.Notification.Api/Dockerfile": "FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build-env\nWORKDIR /ClassifiedAds.Microservices\n\n# Copy csproj and restore as distinct layers\nCOPY ./Common/ClassifiedAds.Application/*.csproj ./Common/ClassifiedAds.Application/\nCOPY ./Common/ClassifiedAds.CrossCuttingConcerns/*.csproj ./Common/ClassifiedAds.CrossCuttingConcerns/\nCOPY ./Common/ClassifiedAds.Domain/*.csproj ./Common/ClassifiedAds.Domain/\nCOPY ./Common/ClassifiedAds.Infrastructure/*.csproj ./Common/ClassifiedAds.Infrastructure/\nRUN dotnet restore ./Common/ClassifiedAds.Application/ClassifiedAds.Application.csproj\nRUN dotnet restore ./Common/ClassifiedAds.Infrastructure/ClassifiedAds.Infrastructure.csproj\n\nCOPY ./Services.Notification/ClassifiedAds.Services.Notification/*.csproj ./Services.Notification/ClassifiedAds.Services.Notification/\nRUN dotnet restore ./Services.Notification/ClassifiedAds.Services.Notification/ClassifiedAds.Services.Notification.csproj\n\nCOPY ./Services.Notification/ClassifiedAds.Services.Notification.Api/*.csproj ./Services.Notification/ClassifiedAds.Services.Notification.Api/\nRUN dotnet restore ./Services.Notification/ClassifiedAds.Services.Notification.Api/ClassifiedAds.Services.Notification.Api.csproj\n\n# Copy everything else and build ClassifiedAds\nCOPY . ./\nRUN dotnet publish ./Services.Notification/ClassifiedAds.Services.Notification.Api/ClassifiedAds.Services.Notification.Api.csproj -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:9.0\nWORKDIR /ClassifiedAds.Microservices\nCOPY --from=build-env /ClassifiedAds.Microservices/out .\n\nENTRYPOINT [\"dotnet\", \"ClassifiedAds.Services.Notification.Api.dll\"]",
            "src/Microservices/Jenkinsfile": "pipeline {\n  agent any\n  environment {\n    VERSION = \"1.0.0.${BUILD_NUMBER}\"\n  }\n  stages {\n    stage('Git Checkout') {\n      steps {\n        git branch: 'master', url: 'https://github.com/phongnguyend/Practical.CleanArchitecture'\n      }\n    }\n    stage('Build') {\n      steps {\n        sh 'dotnet --info'\n\t\techo \"BUILD_NUMBER: ${BUILD_NUMBER}\"\n\t\techo \"VERSION: ${VERSION}\"\n        dir('src/Microservices') {\n          sh 'dotnet clean'\n          sh \"dotnet build -p:Version=${VERSION} --configuration Release\"\n        }\n      }\n    }\n    stage('Publish') {\n      steps {\n        dir('src/Microservices') {\n          sh \"dotnet publish -p:Version=${VERSION} Gateways.WebAPI/ClassifiedAds.Gateways.WebAPI/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.AuditLog/ClassifiedAds.Services.AuditLog.Api/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.AuditLog/ClassifiedAds.Services.AuditLog.Grpc/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Configuration/ClassifiedAds.Services.Configuration.Api/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Identity/ClassifiedAds.Services.Identity.Api/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Identity/ClassifiedAds.Services.Identity.Grpc/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Notification/ClassifiedAds.Services.Notification.Api/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Notification/ClassifiedAds.Services.Notification.Background/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Notification/ClassifiedAds.Services.Notification.Grpc/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Product/ClassifiedAds.Services.Product.Api/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} Services.Storage/ClassifiedAds.Services.Storage.Api/*.csproj --configuration Release\"\n        }\n      }\n    }\n  }\n}",
            "src/Microservices/azure-pipelines.yml": "# Docker\n# Build and push an image to Azure Container Registry\n# https://docs.microsoft.com/azure/devops/pipelines/languages/docker\n\ntrigger:\n  branches:\n    include:\n    - main\n  paths:\n    include:\n    - src/Microservices\n\nresources:\n- repo: self\n\nvariables:\n  # Container registry service connection established during pipeline creation\n  dockerRegistryEndpoint: 'classifiedads'\n  dockerComposeFile: 'src/Microservices/docker-compose.yml'\n  tag: '$(Build.BuildId)'\n  \n  # Agent VM image name\n  vmImageName: 'ubuntu-latest'\n\nstages:\n- stage: SonarCloud\n  displayName: SonarCloud\n  jobs:  \n  - job: SonarCloud\n    displayName: SonarCloud\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: SonarCloudPrepare@1\n      inputs:\n        SonarCloud: 'SonarCloud'\n        organization: 'phongnguyend'\n        scannerMode: 'MSBuild'\n        projectKey: 'Practical.CleanArchitecture'\n        projectName: 'Practical.CleanArchitecture'\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/Microservices/ClassifiedAds.Microservices.sln'\n    - task: SonarCloudAnalyze@1\n    - task: SonarCloudPublish@1\n      inputs:\n        pollingTimeoutSec: '300'\n\n- stage: WhiteSourceBolt\n  displayName: Build and Run WhiteSource Bolt\n  jobs:  \n  - job: WhiteSourceBolt\n    displayName: Build and Run WhiteSource Bolt\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/Microservices/ClassifiedAds.Microservices.sln'\n    - task: WhiteSource Bolt@20\n      inputs:\n        cwd: 'src/Microservices/'\n\n- stage: DotNetBuild\n  displayName: .Net Build\n  jobs:\n  - job: Build\n    displayName: Build\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n      - task: DotNetCoreCLI@2\n        displayName: Build\n        inputs:\n          command: 'build'\n          arguments: '--configuration Release'\n          workingDirectory: 'src/Microservices'\n      - task: DotNetCoreCLI@2\n        displayName: Publish\n        inputs:\n          command: 'publish'\n          publishWebProjects: false\n          projects: |\n            src/Microservices/Gateways.WebAPI/**/*.csproj\n            src/Microservices/Gateways.GraphQL/**/*.csproj\n            src/Microservices/Services.AuditLog/**/*.csproj\n            src/Microservices/Services.Configuration/**/*.csproj\n            src/Microservices/Services.Identity/**/*.csproj\n            src/Microservices/Services.Notification/**/*.csproj\n            src/Microservices/Services.Product/**/*.csproj\n            src/Microservices/Services.Storage/**/*.csproj\n          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'\n      - task: PublishBuildArtifacts@1\n        inputs:\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n          ArtifactName: 'Microservices'\n          publishLocation: 'Container'\n\n- stage: DockerBuild\n  displayName: Build and Push Docker Images\n  jobs:  \n  - job: Build\n    displayName: Build and Push\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DockerCompose@0\n      displayName: Build services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Build services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)\n    - task: DockerCompose@0\n      displayName: Push services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Push services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "ClassifiedAds.Services.Notification.Grpc.csproj",
            "Dockerfile",
            "Program.cs",
            "appsettings.Development.json",
            "appsettings.json"
        ],
        "folders": [
            "Properties",
            "Services"
        ]
    }
}