{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"angular\",\n  \"version\": \"0.0.0\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve\",\n    \"build\": \"ng build\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\"\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular/animations\": \"^19.0.5\",\n    \"@angular/common\": \"^19.0.5\",\n    \"@angular/compiler\": \"^19.0.5\",\n    \"@angular/core\": \"^19.0.5\",\n    \"@angular/forms\": \"^19.0.5\",\n    \"@angular/platform-browser\": \"^19.0.5\",\n    \"@angular/platform-browser-dynamic\": \"^19.0.5\",\n    \"@angular/router\": \"^19.0.5\",\n    \"@microsoft/signalr\": \"^8.0.7\",\n    \"@ngrx/effects\": \"^19.0.0\",\n    \"@ngrx/operators\": \"^19.0.0\",\n    \"@ngrx/store\": \"^19.0.0\",\n    \"@ngrx/store-devtools\": \"^19.0.0\",\n    \"bootstrap\": \"^5.3.3\",\n    \"font-awesome\": \"^4.7.0\",\n    \"ngx-bootstrap\": \"^19.0.1\",\n    \"ngx-toastr\": \"^19.0.0\",\n    \"oidc-client\": \"^1.11.5\",\n    \"oidc-client-ts\": \"^3.1.0\",\n    \"rxjs\": \"^7.8.0\",\n    \"tslib\": \"^2.6.3\",\n    \"zone.js\": \"^0.15.0\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"^19.0.6\",\n    \"@angular/cli\": \"^19.0.6\",\n    \"@angular/compiler-cli\": \"^19.0.5\",\n    \"@angular/language-service\": \"^19.0.5\",\n    \"@types/jasmine\": \"^5.1.5\",\n    \"@types/jasminewd2\": \"^2.0.13\",\n    \"@types/node\": \"^22.10.2\",\n    \"codelyzer\": \"^6.0.2\",\n    \"jasmine-core\": \"~5.5.0\",\n    \"jasmine-spec-reporter\": \"~7.0.0\",\n    \"karma\": \"^6.4.4\",\n    \"karma-chrome-launcher\": \"^3.1.1\",\n    \"karma-coverage-istanbul-reporter\": \"~3.0.2\",\n    \"karma-jasmine\": \"^5.1.0\",\n    \"karma-jasmine-html-reporter\": \"^2.0.0\",\n    \"prettier\": \"3.4.2\",\n    \"ts-node\": \"~10.9.2\",\n    \"tslint\": \"~6.1.0\",\n    \"typescript\": \"~5.6.3\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "src/Monolith/.env": "ASPNETCORE_ENVIRONMENT=\"Development\"\nDOTNET_ENVIRONMENT=\"Development\"\nConnectionStrings__ClassifiedAds=\"Server=db;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nConnectionStrings__IdentityServer_OpenIddict=\"Server=db;Database=ClassifiedAds.IdentityServer.OpenIddict;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\nMessageBroker__Provider=\"RabbitMQ\"\nMessageBroker__RabbitMQ__HostName=\"rabbitmq\"\nMessageBroker__Kafka__BootstrapServers=\"kafka:9092\"\nMessageBroker__AzureQueue__ConnectionString=\"DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net\"\nStorage__Provider=\"Local\"\nStorage__Local__Path=\"/files\"\nStorage__Azure__ConnectionString=\"DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net\"\nStorage__Azure__Container=\"classifiedadds\"\nStorage__Amazon__AccessKeyID=\"xxx\"\nStorage__Amazon__SecretAccessKey=\"xxx\"\nStorage__Amazon__BucketName=\"classifiedadds\"\nStorage__Amazon__RegionEndpoint=\"ap-southeast-1\"\nResourceServer__Endpoint=\"http://webapi:8080\"\nResourceServer__PublicEndpoint=\"http://host.docker.internal:9002\"",
            "src/Monolith/ClassifiedAds.Background/appsettings.json": "{\n  \"ConnectionStrings\": {\n    \"ClassifiedAds\": \"Server=127.0.0.1;Database=ClassifiedAds;User Id=sa;Password=sqladmin123!@#;MultipleActiveResultSets=true;Encrypt=False\"\n  },\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    },\n    \"EventLog\": {\n      \"LogLevel\": {\n        \"Default\": \"Warning\"\n      }\n    },\n    \"File\": {\n      \"MinimumLogEventLevel\": \"Information\"\n    }\n  },\n  \"Monitoring\": {\n    \"OpenTelemetry\": {\n      \"IsEnabled\": false,\n      \"ServiceName\": \"ClassifiedAds.Background\",\n      \"TraceEnabled\": true,\n      \"MetricEnabled\": true,\n      \"Otlp\": {\n        \"IsEnabled\": false,\n        \"Endpoint\": \"http://localhost:4317\"\n      }\n    }\n  },\n  \"MessageBroker\": {\n    \"Provider\": \"RabbitMQ\",\n    \"RabbitMQ\": {\n      \"HostName\": \"localhost\",\n      \"UserName\": \"guest\",\n      \"Password\": \"guest\",\n      \"ExchangeName\": \"amq.direct\",\n      \"RoutingKeys\": {\n        \"FileUploadedEvent\": \"classifiedadds_fileuploaded\",\n        \"FileDeletedEvent\": \"classifiedadds_filedeleted\"\n      },\n      \"Consumers\": {\n        \"WebhookConsumer\": {\n          \"FileUploadedEvent\": \"classifiedadds_fileuploaded\",\n          \"FileDeletedEvent\": \"classifiedadds_filedeleted\"\n        }\n      }\n    },\n    \"Kafka\": {\n      \"BootstrapServers\": \"localhost:9092\",\n      \"Topics\": {\n        \"FileUploadedEvent\": \"classifiedadds_fileuploaded\",\n        \"FileDeletedEvent\": \"classifiedadds_filedeleted\",\n        \"EmailMessageCreatedEvent\": \"classifiedadds_emailcreated\",\n        \"SmsMessageCreatedEvent\": \"classifiedadds_smscreated\"\n      },\n      \"GroupId\": \"classified\"\n    },\n    \"AzureQueue\": {\n      \"ConnectionString\": \"DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net\",\n      \"QueueNames\": {\n        \"FileUploadedEvent\": \"classifiedadds-fileuploaded\",\n        \"FileDeletedEvent\": \"classifiedadds-filedeleted\",\n        \"EmailMessageCreatedEvent\": \"classifiedadds-emailcreated\",\n        \"SmsMessageCreatedEvent\": \"classifiedadds-smscreated\"\n      }\n    },\n    \"AzureServiceBus\": {\n      \"ConnectionString\": \"Endpoint=sb://xxx.servicebus.windows.net/;SharedAccessKeyName=xxx;SharedAccessKey=xxx\",\n      \"QueueNames\": {\n        \"FileUploadedEvent\": \"classifiedadds_fileuploaded\",\n        \"FileDeletedEvent\": \"classifiedadds_filedeleted\",\n        \"EmailMessageCreatedEvent\": \"classifiedadds_emailcreated\",\n        \"SmsMessageCreatedEvent\": \"classifiedadds_smscreated\"\n      }\n    },\n    \"AzureEventHub\": {\n      \"ConnectionString\": \"Endpoint=sb://xxx.servicebus.windows.net/;SharedAccessKeyName=xxx;SharedAccessKey=xxx\",\n      \"Hubs\": {\n        \"FileUploadedEvent\": \"classifiedadds_fileuploaded\",\n        \"FileDeletedEvent\": \"classifiedadds_filedeleted\",\n        \"EmailMessageCreatedEvent\": \"classifiedadds_emailcreated\",\n        \"SmsMessageCreatedEvent\": \"classifiedadds_smscreated\"\n      },\n      \"StorageConnectionString\": \"DefaultEndpointsProtocol=https;AccountName=xxx;AccountKey=xxx;EndpointSuffix=core.windows.net\",\n      \"StorageContainerNames\": {\n        \"FileUploadedEvent\": \"eventhub-fileuploaded\",\n        \"FileDeletedEvent\": \"eventhub-filedeleted\",\n        \"EmailMessageCreatedEvent\": \"eventhub-emailcreated\",\n        \"SmsMessageCreatedEvent\": \"eventhub-smscreated\"\n      }\n    }\n  },\n  \"Notification\": {\n    \"Email\": {\n      \"Provider\": \"Fake\",\n      \"SmtpClient\": {\n        \"Host\": \"localhost\",\n        \"Port\": \"\",\n        \"UserName\": \"\",\n        \"Password\": \"\",\n        \"EnableSsl\": \"\"\n      },\n      \"SendGrid\": {\n        \"ApiKey\": \"\",\n        \"OverrideFrom\": \"\",\n        \"OverrideTos\": \"\"\n      }\n    },\n    \"Sms\": {\n      \"Provider\": \"Fake\",\n      \"Twilio\": {\n        \"AccountSId\": \"\",\n        \"AuthToken\": \"\",\n        \"FromNumber\": \"\"\n      },\n      \"Azure\": {\n        \"ConnectionString\": \"\",\n        \"FromNumber\": \"\"\n      }\n    },\n    \"Web\": {\n      \"Provider\": \"Fake\",\n      \"SignalR\": {\n        \"Endpoint\": \"https://localhost:44364\",\n        \"Hubs\": {\n          \"SendTaskStatusMessage\": \"SimulatedLongRunningTaskHub\"\n        },\n        \"MethodNames\": {\n          \"SendTaskStatusMessage\": \"SendTaskStatus\"\n        }\n      }\n    }\n  },\n  \"IdentityProviders\": {\n    \"Auth0\": {\n      \"Enabled\": false,\n      \"TokenUrl\": \"https://{xxx}.{xx}.auth0.com/oauth/token\",\n      \"ClientId\": \"xxx\",\n      \"ClientSecret\": \"xxx\",\n      \"Audience\": \"https://{xxx}.{xx}.auth0.com/api/v2/\"\n    },\n    \"AzureActiveDirectoryB2C\": {\n      \"Enabled\": false,\n      \"TenantId\": \"xxx\",\n      \"TenantDomain\": \"xxx\",\n      \"AppId\": \"xxx\",\n      \"ClientSecret\": \"xxx\"\n    }\n  },\n  \"Webhooks\": {\n    \"FileUploadedEvent\": {\n      \"PayloadUrl\": \"https://ddddotnet-webhook-server.azurewebsites.net/test\",\n      \"Secret\": \"\"\n    },\n    \"FileDeletedEvent\": {\n      \"PayloadUrl\": \"https://ddddotnet-webhook-server.azurewebsites.net/test\",\n      \"Secret\": \"\"\n    }\n  }\n}\n",
            "src/Monolith/docker-compose.yml": "version: \"3.6\"\nservices:\n    db:\n        image: \"mcr.microsoft.com/mssql/server:2017-latest\"\n        ports:\n            - \"1433:1433\"\n        environment:\n            SA_PASSWORD: \"sqladmin123!@#\"\n            MSSQL_PID: \"Developer\"\n            ACCEPT_EULA: \"Y\"\n    rabbitmq:\n        image: \"rabbitmq:3-management\"\n        ports:\n          - \"5672:5672\"\n          - \"15672:15672\"\n    mailhog:\n        image: mailhog/mailhog\n        ports: \n          - 1025:1025 # smtp server\n          - 8025:8025 # web ui\n    kafka:\n        image: confluentinc/cp-kafka:latest\n        ports:\n          - 9092:9092\n        environment:\n          KAFKA_NODE_ID: 1\n          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'\n          KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'\n          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0\n          KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1\n          KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1\n          KAFKA_JMX_PORT: 9101\n          KAFKA_JMX_HOSTNAME: localhost\n          KAFKA_PROCESS_ROLES: 'broker,controller'\n          KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'\n          KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'\n          KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'\n          KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n          CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'\n    migrator:\n        image: classifiedads.migrator\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.Migrator/Dockerfile\n        depends_on:\n          - db\n        environment:\n          DOTNET_ENVIRONMENT: ${DOTNET_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${ConnectionStrings__ClassifiedAds}\n          CheckDependency__Enabled: \"true\"\n          CheckDependency__Host: \"db:1433\"\n    identityserver:\n        image: classifiedads.identityserver\n        build:\n          context: ../IdentityServer/OpenIddict\n          dockerfile: ./ClassifiedAds.IdentityServer/Dockerfile\n        ports:\n            - \"9000:80\"\n        depends_on:\n          - db\n          - migrator\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${ConnectionStrings__ClassifiedAds}\n          ConnectionStrings__IdentityServer: ${ConnectionStrings__IdentityServer_OpenIddict}\n          CookiePolicyOptions__IsEnabled: \"true\"\n          CookiePolicyOptions__MinimumSameSitePolicy: \"Lax\"\n          CookiePolicyOptions__Secure: \"None\"\n    webapi:\n        image: classifiedads.webapi\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.WebAPI/Dockerfile\n        ports:\n            - \"9002:8080\"\n        depends_on:\n          - db\n          - migrator\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${ConnectionStrings__ClassifiedAds}\n          Authentication__IdentityServer__Authority: \"http://host.docker.internal:9000\"\n          Authentication__IdentityServer__RequireHttpsMetadata: \"false\"\n          Storage__Provider: ${Storage__Provider}\n          Storage__Local__Path: ${Storage__Local__Path}\n          Storage__Azure__ConnectionString: ${Storage__Azure__ConnectionString}\n          Storage__Azure__Container: ${Storage__Azure__Container}\n          Storage__Amazon__AccessKeyID: ${Storage__Amazon__AccessKeyID}\n          Storage__Amazon__SecretAccessKey: ${Storage__Amazon__SecretAccessKey}\n          Storage__Amazon__BucketName: ${Storage__Amazon__BucketName}\n          Storage__Amazon__RegionEndpoint: ${Storage__Amazon__RegionEndpoint}\n    webmvc:\n        image: classifiedads.webmvc\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.WebMVC/Dockerfile\n        ports:\n            - \"9003:8080\"\n        depends_on:\n          - db\n          - migrator\n          - rabbitmq\n          - kafka\n          - identityserver\n          - webapi\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${ConnectionStrings__ClassifiedAds}\n          CookiePolicyOptions__IsEnabled: \"true\"\n          CookiePolicyOptions__MinimumSameSitePolicy: \"Lax\"\n          CookiePolicyOptions__Secure: \"None\"          \n          CheckDependency__Enabled: \"true\"\n          CheckDependency__Host: \"webapi:8080\"\n          OpenIdConnect__Authority: \"http://host.docker.internal:9000\"\n          OpenIdConnect__RequireHttpsMetadata: \"false\"\n          ResourceServer__Endpoint: ${ResourceServer__Endpoint}\n          ResourceServer__PublicEndpoint: ${ResourceServer__PublicEndpoint}\n          CurrentUrl: \"http://host.docker.internal:9003\"\n          Storage__Provider: ${Storage__Provider}\n          Storage__Local__Path: ${Storage__Local__Path}\n          Storage__Azure__ConnectionString: ${Storage__Azure__ConnectionString}\n          Storage__Azure__Container: ${Storage__Azure__Container}\n          Storage__Amazon__AccessKeyID: ${Storage__Amazon__AccessKeyID}\n          Storage__Amazon__SecretAccessKey: ${Storage__Amazon__SecretAccessKey}\n          Storage__Amazon__BucketName: ${Storage__Amazon__BucketName}\n          Storage__Amazon__RegionEndpoint: ${Storage__Amazon__RegionEndpoint}\n    blazor:\n        image: classifiedads.blazor\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.BlazorServerSide/Dockerfile\n        ports:\n            - \"9008:8080\"\n        depends_on:\n          - identityserver\n          - webapi\n        environment:\n          ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}\n          OpenIdConnect__Authority: \"http://host.docker.internal:9000\"\n          OpenIdConnect__RequireHttpsMetadata: \"false\"\n          ResourceServer__Endpoint: ${ResourceServer__Endpoint}\n          ResourceServer__PublicEndpoint: ${ResourceServer__PublicEndpoint}\n          CookiePolicyOptions__IsEnabled: \"true\"\n          CookiePolicyOptions__MinimumSameSitePolicy: \"Lax\"\n          CookiePolicyOptions__Secure: \"None\" \n    background:\n        image: classifiedads.background\n        build:\n          context: .\n          dockerfile: ./ClassifiedAds.Background/Dockerfile\n        depends_on:\n          - db\n          - migrator\n          - rabbitmq\n          - mailhog\n        environment:\n          DOTNET_ENVIRONMENT: ${DOTNET_ENVIRONMENT}\n          ConnectionStrings__ClassifiedAds: ${ConnectionStrings__ClassifiedAds}\n          CheckDependency__Enabled: \"true\"\n          CheckDependency__Host: \"rabbitmq:5672\"\n          MessageBroker__Provider: ${MessageBroker__Provider}\n          MessageBroker__RabbitMQ__HostName: ${MessageBroker__RabbitMQ__HostName}\n          MessageBroker__Kafka__BootstrapServers: ${MessageBroker__Kafka__BootstrapServers}\n          MessageBroker__AzureQueue__ConnectionString: ${MessageBroker__AzureQueue__ConnectionString}\n          Notification__Email__Provider: \"SmtpClient\"\n          Notification__Email__SmtpClient__Host: \"mailhog\"\n          Notification__Email__SmtpClient__Port: \"1025\"\n          Notification__Sms__Provider: \"Fake\"\n          Notification__Sms__Twilio__AccountSId: \"\"\n          Notification__Sms__Twilio__AuthToken: \"\"\n          Notification__Sms__Twilio__FromNumber: \"\"\n          Notification__Web__Provider: \"Fake\"\n          Notification__Web__SignalR__Endpoint: \"http://webmvc\"\n",
            "src/Monolith/ClassifiedAds.Background/Dockerfile": "FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build-env\nWORKDIR /ClassifiedAds.Monolith\n\n# Copy csproj and restore as distinct layers\nCOPY ./ClassifiedAds.Application/*.csproj ./ClassifiedAds.Application/\nCOPY ./ClassifiedAds.CrossCuttingConcerns/*.csproj ./ClassifiedAds.CrossCuttingConcerns/\nCOPY ./ClassifiedAds.Domain/*.csproj ./ClassifiedAds.Domain/\nCOPY ./ClassifiedAds.Infrastructure/*.csproj ./ClassifiedAds.Infrastructure/\nCOPY ./ClassifiedAds.Persistence/*.csproj ./ClassifiedAds.Persistence/\n\nRUN dotnet restore ./ClassifiedAds.Application/ClassifiedAds.Application.csproj\nRUN dotnet restore ./ClassifiedAds.Infrastructure/ClassifiedAds.Infrastructure.csproj\n\nCOPY ./ClassifiedAds.Background/*.csproj ./ClassifiedAds.Background/\nRUN dotnet restore ./ClassifiedAds.Background/ClassifiedAds.Background.csproj\n\n# Copy everything else and build\nCOPY . ./\nRUN dotnet publish ./ClassifiedAds.Background/ClassifiedAds.Background.csproj -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:9.0\nWORKDIR /ClassifiedAds.Monolith\nCOPY --from=build-env /ClassifiedAds.Monolith/out .\n\nENTRYPOINT [\"dotnet\", \"ClassifiedAds.Background.dll\"]",
            "src/Monolith/Jenkinsfile": "pipeline {\n  agent any\n  environment {\n    VERSION = \"1.0.0.${BUILD_NUMBER}\"\n  }\n  stages {\n    stage('Git Checkout') {\n      steps {\n        git branch: 'master', url: 'https://github.com/phongnguyend/Practical.CleanArchitecture'\n      }\n    }\n    stage('Build') {\n      steps {\n        sh 'dotnet --info'\n\t\techo \"BUILD_NUMBER: ${BUILD_NUMBER}\"\n\t\techo \"VERSION: ${VERSION}\"\n        dir('src/Monolith') {\n          sh 'dotnet clean'\n          sh \"dotnet build -p:Version=${VERSION} --configuration Release\"\n        }\n      }\n    }\n    stage('Publish') {\n      steps {\n        dir('src/Monolith') {\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.Background/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.Migrator/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.WebAPI/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.WebMVC/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.BlazorServerSide/*.csproj --configuration Release\"\n          sh \"dotnet publish -p:Version=${VERSION} ClassifiedAds.BlazorWebAssembly/*.csproj --configuration Release\"\n        }\n      }\n    }\n  }\n}",
            "src/Monolith/azure-pipelines.yml": "# Docker\n# Build and push an image to Azure Container Registry\n# https://docs.microsoft.com/azure/devops/pipelines/languages/docker\n\ntrigger:\n  branches:\n    include:\n    - main\n  paths:\n    include:\n    - src/Monolith\n\nresources:\n- repo: self\n\nvariables:\n  # Container registry service connection established during pipeline creation\n  dockerRegistryEndpoint: 'classifiedads'\n  dockerComposeFile: 'src/Monolith/docker-compose.yml'\n  tag: '$(Build.BuildId)'\n  \n  # Agent VM image name\n  vmImageName: 'ubuntu-latest'\n\nstages:\n- stage: SonarCloud\n  displayName: SonarCloud\n  jobs:  \n  - job: SonarCloud\n    displayName: SonarCloud\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: SonarCloudPrepare@1\n      inputs:\n        SonarCloud: 'SonarCloud'\n        organization: 'phongnguyend'\n        scannerMode: 'MSBuild'\n        projectKey: 'Practical.CleanArchitecture'\n        projectName: 'Practical.CleanArchitecture'\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/Monolith/ClassifiedAds.Monolith.sln'\n    - task: SonarCloudAnalyze@1\n    - task: SonarCloudPublish@1\n      inputs:\n        pollingTimeoutSec: '300'\n\n- stage: WhiteSourceBolt\n  displayName: Build and Run WhiteSource Bolt\n  jobs:  \n  - job: WhiteSourceBolt\n    displayName: Build and Run WhiteSource Bolt\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DotNetCoreCLI@2\n      inputs:\n        command: 'build'\n        projects: 'src/Monolith/ClassifiedAds.Monolith.sln'\n    - task: WhiteSource Bolt@20\n      inputs:\n        cwd: 'src/Monolith/'\n\n- stage: DotNetBuild\n  displayName: .Net Build\n  jobs:\n  - job: Build\n    displayName: Build\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n      - task: UseDotNet@2\n        displayName: Use .Net 6.0.x\n        inputs:\n          packageType: 'sdk'\n          version: '6.0.x'\n      - task: DotNetCoreCLI@2\n        displayName: dotnet restore\n        inputs:\n          command: 'restore'\n          projects: 'src/Monolith/ClassifiedAds.Monolith.sln'\n          feedsToUse: 'select'\n      - task: DotNetCoreCLI@2\n        displayName: dotnet list package --vulnerable\n        inputs:\n          command: 'custom'\n          custom: 'list'\n          arguments: 'package --vulnerable'\n          workingDirectory: 'src/Monolith'\n      - task: DotNetCoreCLI@2\n        displayName: Build\n        inputs:\n          command: 'build'\n          arguments: '--configuration Release'\n          workingDirectory: 'src/Monolith'\n      - task: DotNetCoreCLI@2\n        displayName: Test\n        inputs:\n          command: 'test'\n          projects: |\n            src/Monolith/ClassifiedAds.ArchTests/*.csproj\n            src/Monolith/ClassifiedAds.ContractTests/*.csproj\n            src/Monolith/ClassifiedAds.UnitTests/*.csproj\n          arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'\n      - task: reportgenerator@4\n        displayName: Generate Test Report\n        inputs:\n          reports: '$(Build.SourcesDirectory)/**/*.cobertura.xml'\n          targetdir: '$(Build.SourcesDirectory)/CoverageResults'\n          assemblyfilters: '+ClassifiedAds.Application;+ClassifiedAds.Domain'\n      - task: PublishCodeCoverageResults@1\n        displayName: 'Publish Code Coverage'\n        inputs:\n          codeCoverageTool: Cobertura\n          summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'\n      - task: DotNetCoreCLI@2\n        displayName: Publish\n        inputs:\n          command: 'publish'\n          publishWebProjects: false\n          projects: |\n            src/Monolith/ClassifiedAds.Background/*.csproj\n            src/Monolith/ClassifiedAds.Migrator/*.csproj\n            src/Monolith/ClassifiedAds.WebAPI/*.csproj\n            src/Monolith/ClassifiedAds.IdentityServer/*.csproj\n            src/Monolith/ClassifiedAds.WebMVC/*.csproj\n            src/Monolith/ClassifiedAds.BlazorServerSide/*.csproj\n            src/Monolith/ClassifiedAds.BlazorWebAssembly/*.csproj\n          arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'\n      - task: PublishBuildArtifacts@1\n        inputs:\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n          ArtifactName: 'Monolith'\n          publishLocation: 'Container'\n\n- stage: DockerBuild\n  displayName: Build and Push Docker Images\n  jobs:  \n  - job: Build\n    displayName: Build and Push\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: DockerCompose@0\n      displayName: Build services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Build services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)\n    - task: DockerCompose@0\n      displayName: Push services\n      inputs:\n        containerregistrytype: 'Container Registry'\n        dockerRegistryEndpoint: $(dockerRegistryEndpoint)\n        dockerComposeFile: $(dockerComposeFile)\n        action: 'Push services'\n        projectName: $(Build.Repository.Name)\n        qualifyImageNames: true\n        additionalImageTags: $(Build.BuildId)\n\n- stage: Octopus\n  displayName: 'Octopus: Pack and Push Nuget Packages'\n  jobs:  \n  - job: Build\n    displayName: Build and Push\n    pool:\n      vmImage: $(vmImageName)\n    steps:\n    - task: CmdLine@2\n      displayName: dotnet tool install Octopus.DotNet.Cli --global\n      inputs:\n        script: 'dotnet tool install Octopus.DotNet.Cli --global'\n    - task: DotNetCoreCLI@2\n      displayName: dotnet restore\n      inputs:\n        command: 'restore'\n        projects: 'src/Monolith/ClassifiedAds.Monolith.sln'\n        feedsToUse: 'select'\n    - task: DotNetCoreCLI@2\n      displayName: dotnet build\n      inputs:\n        command: 'build'\n        arguments: '--configuration Release'\n        workingDirectory: 'src/Monolith'\n    - task: DotNetCoreCLI@2\n      displayName: dotnet publish\n      inputs:\n        command: 'publish'\n        publishWebProjects: false\n        projects: |\n          src/Monolith/ClassifiedAds.Background/*.csproj\n          src/Monolith/ClassifiedAds.Migrator/*.csproj\n          src/Monolith/ClassifiedAds.WebAPI/*.csproj\n          src/Monolith/ClassifiedAds.IdentityServer/*.csproj\n          src/Monolith/ClassifiedAds.WebMVC/*.csproj\n          src/Monolith/ClassifiedAds.BlazorServerSide/*.csproj\n          src/Monolith/ClassifiedAds.BlazorWebAssembly/*.csproj\n        arguments: '--configuration Release -p:Version=1.0.0-$(Build.BuildNumber) --output $(Build.ArtifactStagingDirectory)'\n        zipAfterPublish: false\n\n    - task: CmdLine@2\n      displayName: dotnet octo pack\n      inputs:\n        script: |\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.Background --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.Background\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.Migrator --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.Migrator\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.WebAPI --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.WebAPI\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.BlazorServerSide --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.BlazorServerSide\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.BlazorWebAssembly --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.BlazorWebAssembly\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.IdentityServer --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.IdentityServer\n          dotnet octo pack --version=1.0.0-$(Build.BuildNumber) --outFolder=$(Build.ArtifactStagingDirectory) --overwrite --id=ClassifiedAds.WebMVC --basePath=$(Build.ArtifactStagingDirectory)/ClassifiedAds.WebMVC\n    - task: DotNetCoreCLI@2\n      displayName: dotnet nuget push\n      inputs:\n        command: 'push'\n        packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'\n        nuGetFeedType: 'internal'\n        publishVstsFeed: '649b11e9-9f40-41ae-bf73-6d93e3161e2c/24cbed38-cd60-4d56-bad6-7c5d18f75a60'"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "ClassifiedAds.Services.Notification.Grpc.csproj",
            "Dockerfile",
            "Program.cs",
            "appsettings.Development.json",
            "appsettings.json"
        ],
        "folders": [
            "Properties",
            "Services"
        ]
    }
}