{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"@oada/server\",\n  \"private\": true,\n  \"workspaces\": [\n    \"services/*\",\n    \"libs/*\"\n  ],\n  \"scripts\": {\n    \"g:eslint\": \"eslint $INIT_CWD\",\n    \"build\": \"yarn workspaces foreach -Apt run build\",\n    \"clean\": \"yarn build --clean\",\n    \"g:tsc\": \"cd $INIT_CWD && tsc -b\",\n    \"g:pino-pretty\": \"pino-pretty\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.7.1\",\n    \"@commitlint/config-conventional\": \"^19.7.1\",\n    \"@eslint/compat\": \"^1.2.7\",\n    \"@eslint/config-inspector\": \"^1.0.2\",\n    \"@eslint/eslintrc\": \"^3.3.0\",\n    \"@eslint/js\": \"^9.21.0\",\n    \"@tsconfig/node20\": \"^20.1.4\",\n    \"@tsconfig/node22\": \"^22.0.0\",\n    \"@types/eslint\": \"^9.6.1\",\n    \"@types/mocha\": \"^10.0.10\",\n    \"@types/node\": \"^22.13.9\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.26.0\",\n    \"@typescript-eslint/parser\": \"^8.26.0\",\n    \"@yarnpkg/sdks\": \"^3.2.1\",\n    \"browserslist\": \"^4.24.4\",\n    \"c8\": \"^10.1.3\",\n    \"eslint\": \"^9.21.0\",\n    \"eslint-config-prettier\": \"^10.0.2\",\n    \"eslint-config-xo\": \"^0.46.0\",\n    \"eslint-config-xo-typescript\": \"^7.0.0\",\n    \"eslint-formatter-pretty\": \"^6.0.1\",\n    \"eslint-import-resolver-node\": \"^0.3.9\",\n    \"eslint-import-resolver-typescript\": \"^3.8.3\",\n    \"eslint-plugin-array-func\": \"^5.0.2\",\n    \"eslint-plugin-ava\": \"^15.0.1\",\n    \"eslint-plugin-escompat\": \"^3.11.4\",\n    \"eslint-plugin-eslint-comments\": \"^3.2.0\",\n    \"eslint-plugin-filenames\": \"^1.3.2\",\n    \"eslint-plugin-github\": \"^5.1.8\",\n    \"eslint-plugin-i18n-text\": \"^1.0.1\",\n    \"eslint-plugin-import\": \"^2.31.0\",\n    \"eslint-plugin-n\": \"^17.16.2\",\n    \"eslint-plugin-no-constructor-bind\": \"^2.0.4\",\n    \"eslint-plugin-no-only-tests\": \"^3.3.0\",\n    \"eslint-plugin-no-secrets\": \"^2.2.1\",\n    \"eslint-plugin-notice\": \"^1.0.0\",\n    \"eslint-plugin-optimize-regex\": \"^1.2.1\",\n    \"eslint-plugin-prettier\": \"^5.2.3\",\n    \"eslint-plugin-promise\": \"^7.2.1\",\n    \"eslint-plugin-regexp\": \"^2.7.0\",\n    \"eslint-plugin-security\": \"^3.0.1\",\n    \"eslint-plugin-sonarjs\": \"^3.0.2\",\n    \"eslint-plugin-unicorn\": \"^57.0.0\",\n    \"eslint_d\": \"^14.3.0\",\n    \"get-port\": \"^7.1.0\",\n    \"prettier\": \"^3.5.3\",\n    \"tslib\": \"2.8.1\",\n    \"typescript\": \"5.8.2\",\n    \"typescript-eslint\": \"^8.26.0\",\n    \"update-browserslist-db\": \"^1.1.3\",\n    \"zx\": \"^8.4.0\"\n  },\n  \"dependencies\": {\n    \"pino-pretty\": \"^13.0.0\"\n  },\n  \"resolutions\": {\n    \"cross-spawn\": \"^7.0.5\",\n    \"eslint-config-prettier\": \"https://github.com/abrahamguo/eslint-config-prettier.git\",\n    \"fastify-plugin\": \"^5.0.1\",\n    \"tslib\": \"2.7.0\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\"\n  },\n  \"volta\": {\n    \"node\": \"22.5.1\"\n  },\n  \"packageManager\": \"yarn@4.7.0\"\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "services:\n  startup:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/startup:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: startup\n    depends_on:\n      - redpanda\n      - arangodb\n    expose:\n      # expose only internally, not on host\n      - '8080'\n    environment:\n      # set RESETDATABASE to \"yes\" if you want to drop database on startup and recreate\n      RESETDATABASE: ${RESETDATABASE-no}\n\n  auth:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/auth:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: auth\n    depends_on:\n      - startup\n    networks:\n      http_net: {}\n    expose:\n      # expose only internally, not on host\n      - '8080'\n\n  # http-handler is in charge of maintaining connectiongs to clients and starting\n  # the first message for a request into Kafka\n  http-handler:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/http-handler:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: http-handler\n    healthcheck:\n      test: [ CMD, yarn, healthcheck ]\n    depends_on:\n      - startup\n    networks:\n      http_net: {}\n    expose:\n      # expose only internally, not on host\n      - '8080'\n    ports:\n      # Expose node inspect port\n      - 9230:9229\n    environment:\n      IGNORE_SCOPE:\n    volumes:\n      # Storage for non-JSON resources\n      - binary_data:/oada/binary\n\n  sync-handler:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/sync-handler:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: sync-handler\n    depends_on:\n      - startup\n      - proxy\n    networks:\n      http_net: {}\n    environment:\n      IGNORE_SCOPE:\n\n\n  write-handler:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/write-handler:${OADA_VERSION-build}\n    ports:\n      # Expose node inspect port\n      - 9231:9229\n    build:\n      args:\n        OADA_SERVICE: write-handler\n    depends_on:\n      - startup\n\n  users:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/users:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: users\n    depends_on:\n      - startup\n\n  rev-graph-update:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/rev-graph-update:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: rev-graph-update\n    depends_on:\n      - startup\n\n  well-known:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/well-known:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: well-known\n    depends_on:\n      - startup\n    networks:\n      http_net: {}\n    expose:\n      # expose only internally, not on host\n      - '8080'\n\n  webhooks:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/webhooks:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: webhooks\n    depends_on:\n      - startup\n      - proxy\n    networks:\n      http_net: {}\n\n  shares:\n    extends:\n      file: common.yml\n      service: oada-uservice\n    image: oada/shares:${OADA_VERSION-build}\n    build:\n      args:\n        OADA_SERVICE: shares\n    depends_on:\n      - startup\n\n  # swag with configs for auth, well-known, and http-handler\n  proxy:\n    build: ./support/proxy\n    image: oada/support-proxy:${OADA_VERSION-build}\n    cap_add:\n      - NET_ADMIN\n    networks:\n      http_net: {}\n    environment:\n      PUID: 1000\n      PGID: 1000\n      TZ: America/New_york\n      URL: ${DOMAIN:-localhost}\n      SUBDOMAINS: #e.g., www\n      VALIDATION: http\n      CERTPROVIDER: #optional\n      DNSPLUGIN: #optional\n      PROPAGATION: #optional\n      DUCKDNSTOKEN: #optional\n      EMAIL: #optional\n      ONLY_SUBDOMAINS: 'false' #optional\n      EXTRA_DOMAINS: #optional\n      STAGING: 'true' #optional (set false for release)\n      MAXMINDDB_LICENSE_KEY: #optional\n    volumes:\n      - proxy_config:/config\n      # Hack in self-signed ssl for localhost\n      - ./support/proxy/selfsigned:/config/keys/letsencrypt:ro\n    ports:\n      - '${BIND:-0.0.0.0}:${PORT_HTTPS:-443}:443'\n      - '${BIND:-0.0.0.0}:${PORT_HTTP:-80}:80'\n    restart: unless-stopped\n\n  # Arango is the main backend where core data and graph is stored\n  arangodb:\n    image: arangodb:3.9.3\n    restart: unless-stopped\n    networks:\n      arango_net: {}\n    volumes:\n      - arangodb_data:/var/lib/arangodb3\n      - arangodb_apps_data:/var/lib/arangodb3-apps\n    expose:\n      # expose only internally, not on host\n      - '8529'\n    environment:\n      # - ARANGO_RANDOM_ROOT_PASSWORD=1\n      ARANGO_NO_AUTH: 1\n      ARANGO_STORAGE_ENGINE: rocksdb\n    command: [ arangod, --server.statistics=false ]\n\n  # Redpanda is API compatible with kafka.\n  redpanda:\n    image: vectorized/redpanda:v22.2.5\n    restart: unless-stopped\n    networks:\n      kafka_net:\n        aliases:\n          - kafka\n    volumes:\n      - redpanda_data:/var/lib/redpanda/data\n      - redpanda_config:/etc/redpanda/\n    environment:\n      REDPANDA_MODE: ${REDPANDA_MODE-development}\n    entrypoint:\n      - /bin/sh\n      - -c\n      # Configure then run redpanda?\n      - |\n        rpk redpanda mode $$REDPANDA_MODE &&\n        rpk $$@\n      - rpk\n    command:\n      - redpanda\n      - start\n      - --smp\n      - '1'\n      - --reserve-memory\n      - 0M\n      - --overprovisioned\n      - --kafka-addr\n      - PLAINTEXT://kafka:9092\n      - --rpc-addr\n      - 0.0.0.0:33145\n      - --node-id\n      - '0'\n      - --advertise-kafka-addr\n      - PLAINTEXT://kafka:9092\n    expose:\n      # Kafka API port\n      - '9092'\n      # Internal RPC port\n      - '33145'\n      # Prometheus/HTTP Admin port\n      - '9644'\n\n  pino-pretty:\n    deploy:\n      replicas: 0\n    image: oada/startup:${OADA_VERSION-build}\n    restart: never\n    command: g:pino-pretty -C /.pino-prettyrc\n    volumes:\n      - ./.pino-prettyrc:/.pino-prettyrc\n\n  prometheus:\n    image: prom/prometheus\n    profiles:\n      - dashboard\n      - debug\n    depends_on:\n      - rpk-prometheus-conf\n      - redpanda\n    restart: unless-stopped\n    networks:\n      grafana_net: {}\n      kafka_net: {}\n    expose:\n      - '9090'\n    #ports:\n    #  - '9090:9090'\n    volumes:\n      - prometheus_data:/prometheus\n      - prometheus_config:/etc/prometheus\n\n  # Generate redpanda config for prometheus\n  rpk-prometheus-conf:\n    extends:\n      service: redpanda\n    profiles:\n      - dashboard\n      - debug\n    restart: on-failure\n    volumes:\n      - prometheus_config:/etc/prometheus\n    user: root\n    entrypoint:\n      - /bin/sh\n      - -c\n    command:\n      - |\n        echo -n \"scrape_configs:\" > /etc/prometheus/prometheus.yml &&\n        rpk generate --seed-addr=redpanda prometheus-config >> /etc/prometheus/prometheus.yml\n\n  grafana:\n    image: grafana/grafana\n    profiles:\n      - dashboard\n      - debug\n    depends_on:\n      - prometheus\n      - grafana-provision-prometheus\n      - grafana-provision-dashboards\n    restart: unless-stopped\n    networks:\n      grafana_net:\n    ports:\n      - 3000:3000\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - grafana_prov:/etc/grafana/provisioning\n\n  # Provision a grafana dashboard provider.\n  #\n  # Loads all dashboards in /var/lib/grafana/dashboards\n  grafana-provision-dashboards:\n    image: grafana/grafana\n    profiles:\n      - dashboard\n      - debug\n    depends_on:\n      - rpk-grafana-dashboard\n    restart: on-failure\n    volumes:\n      - grafana_prov:/etc/grafana/provisioning\n    entrypoint:\n      - /bin/sh\n      - -c\n    command:\n      - |\n        echo '\n        apiVersion: 1\n        providers:\n          - name: \"dashboard provider\"\n            type: file\n            options:\n              path: /var/lib/grafana/dashboards\n              foldersFromFileStructure: true\n        ' > /etc/grafana/provisioning/dashboards/dashboards.yml\n\n  # Provision our prometheus instance as a grafana datasource\n  grafana-provision-prometheus:\n    image: grafana/grafana\n    profiles:\n      - dashboard\n      - debug\n    restart: on-failure\n    volumes:\n      - grafana_prov:/etc/grafana/provisioning\n    entrypoint:\n      - /bin/sh\n      - -c\n    command:\n      - |\n        echo '\n        apiVersion: 1\n        deleteDatasources:\n          - name: Prometheus\n        datasources:\n          - name: Prometheus\n            type: prometheus\n            access: proxy\n            url: http://prometheus:9090\n        ' > /etc/grafana/provisioning/datasources/prometheus.yml\n\n  # Generate dashboard for our redpanda with our prometheus instance\n  rpk-grafana-dashboard:\n    extends:\n      service: redpanda\n    profiles:\n      - dashboard\n      - debug\n    restart: on-failure\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - grafana_prov:/etc/grafana/provisioning\n    entrypoint:\n      - /bin/sh\n      - -c\n    command:\n      - |\n        mkdir -p /var/lib/grafana/dashboards/\n        rpk generate grafana-dashboard \\\n          --datasource Prometheus \\\n          --prometheus-url redpanda:9644/metrics \\\n          > /var/lib/grafana/dashboards/redpanda.json\n\nvolumes:\n  arangodb_data:\n  arangodb_apps_data:\n  binary_data:\n  redpanda_data:\n  redpanda_config:\n  proxy_config:\n  prometheus_data:\n  prometheus_config:\n  grafana_data:\n  grafana_prov:\n\n\nnetworks:\n  arango_net: {}\n  kafka_net: {}\n  http_net: {}\n  startup_net: {}\n  grafana_net: {}\n\n# Set up Mutagen forwards\nx-mutagen:\n  forward:\n    agrango:\n      source: tcp:localhost:8529\n      destination: network://arango_net:tcp:arangodb:8529\n    kafka:\n      source: tcp:localhost:9092\n      destination: network://kafka_net:tcp:kafka:9092\n    prometheus:\n      source: tcp:localhost:9090\n      destination: network://grafana_net:tcp:prometheus:9090\n    grafana:\n      source: tcp:localhost:3000\n      destination: network://grafana_net:tcp:grafana:3000\n",
            "oada/Dockerfile": "# syntax=docker/dockerfile:1\nARG NODE_VER=22-alpine\n\n# Copy in package files and any needed apt packages?\nFROM node:${NODE_VER} AS packages\n\nWORKDIR /oada\n\n# Need to list out every package.json we need from monorepo for caching stuff...\nCOPY --link ./yarn.lock ./.yarnrc.yml /oada/\n# TODO: How to COPY all package.json files with glob?\nCOPY ./package.json /oada/package.json\nCOPY ./libs/models/package.json /oada/libs/models/package.json\nCOPY ./libs/lib-arangodb/package.json /oada/libs/lib-arangodb/package.json\nCOPY ./libs/lib-config/package.json /oada/libs/lib-config/package.json\nCOPY ./libs/lib-kafka/package.json /oada/libs/lib-kafka/package.json\nCOPY ./libs/lib-prom/package.json /oada/libs/lib-prom/package.json\nCOPY ./libs/pino-debug/package.json /oada/libs/pino-debug/package.json\nCOPY ./services/auth/package.json /oada/services/auth/package.json\nCOPY ./services/http-handler/package.json /oada/services/http-handler/package.json\nCOPY ./services/permissions-handler/package.json /oada/services/permissions-handler/package.json\nCOPY ./services/rev-graph-update/package.json /oada/services/rev-graph-update/package.json\nCOPY ./services/shares/package.json /oada/services/shares/package.json\nCOPY ./services/startup/package.json /oada/services/startup/package.json\nCOPY ./services/sync-handler/package.json /oada/services/sync-handler/package.json\nCOPY ./services/users/package.json /oada/services/users/package.json\nCOPY ./services/webhooks/package.json /oada/services/webhooks/package.json\nCOPY ./services/well-known/package.json /oada/services/well-known/package.json\nCOPY ./services/write-handler/package.json /oada/services/write-handler/package.json\nRUN corepack yarn workspaces focus --all --production\n\n# Install just production deps\nFROM packages AS yarn\n\n# Copy in actual code\nCOPY --link . /oada/\n\n# Run again to be safe?\nRUN corepack yarn workspaces focus --all --production\n\n# Install all deps and run build step\n# Allows for workspaces to have build step (e.g., for TypeScript)\nFROM packages AS dev\n\n# Install _all_ dependencies for build\nRUN corepack yarn install --immutable\n\n# Copy in actual code\nCOPY --link . /oada/\n\n# Run again to be safe?\nRUN corepack yarn install --immutable\n\nRUN corepack yarn sdks vscode vim\n\nFROM dev AS build\n\n# Build and then remove yarn stuff\nRUN corepack yarn build --verbose && rm -rfv .yarn .pnp.*\n\nFROM node:${NODE_VER} AS code\n\n# Copy in service code and production dependencies\nCOPY --from=yarn /oada/ /oada/\n# Copy in built code\nCOPY --from=build /oada/ /oada/\n\n# Assemble \"production\" image\nFROM node:$NODE_VER AS production\n\nWORKDIR /oada\n\n# Install needed packages\nRUN apk add --no-cache \\\n  dumb-init \\\n  libc6-compat\n\n# Copy in entrypoint script\nCOPY ./utils/entrypoint.sh /entrypoint.sh\nRUN chmod u+x /entrypoint.sh\nRUN chown node:node /entrypoint.sh\n\n# Get wait-for script\nARG WAIT_FOR_VER=v2.2.3\nRUN wget https://raw.githubusercontent.com/eficode/wait-for/${WAIT_FOR_VER}/wait-for -O /wait-for\nRUN chmod u+x /wait-for\nRUN chown node:node /wait-for\n\n# Copy in config file?\nCOPY ./oada.config.mjs /oada.config.mjs\n\n# Launch entrypoint with dumb-init\n# Remap SIGTERM to SIGINT https://github.com/Yelp/dumb-init#signal-rewriting\nENTRYPOINT [\"/usr/bin/dumb-init\", \"--rewrite\", \"15:2\", \"--\", \"/entrypoint.sh\"]\n# Run start script of package\nCMD [\"start\"]\n\n# Add volume for Binary data and chown to node?\nRUN mkdir -p /oada/binary && chown node:node /oada/binary\n#VOLUME /oada/binary\n\n# Copy in the code\nCOPY --from=code /oada/ /oada/\n\nARG OADA_SERVICE\nENV OADA_SERVICE=${OADA_SERVICE}\nENV INSPECT=\n\n# Have corepack download yarn\nENV COREPACK_HOME=/oada/.cache/node/corepack\nRUN corepack enable\nRUN corepack install\n\nWORKDIR /oada/services/${OADA_SERVICE}\n\n# Do not run services as root\nUSER node\nENV PORT=8080\n\nFROM production AS debug\n\nUSER root\n\nCOPY --from=dev /oada/ /oada/\n\n\n# Default to a production target\nFROM production"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "default",
            "nginx.conf"
        ],
        "folders": [
            "http.d",
            "proxy-confs",
            "selfsigned"
        ]
    }
}