{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[tool.black]\nline-length = 100\ntarget-version = ['py36']\ninclude = '''\n    exec.py\n  | /import_data/tasks/\n'''\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            "kartotherian/config.yaml": "# Number of worker processes to spawn.\n# Set to 0 to run everything in a single process without clustering.\n# Use 'ncpu' to run as many workers as there are CPU units\nnum_workers: '{env(KARTOTHERIAN_NUM_WORKERS,ncpu)}'\n\n# Log error messages and gracefully restart a worker if v8 reports that it\n# uses more heap (note: not RSS) than this many mb.\nworker_heap_limit_mb: 250\n\n# Logger info\nlogging:\n  level: info\n\n\n# Statsd metrics reporter\nmetrics:\n  name: kartotherian\n  type: debug\n  host: '{env(KARTOTHERIAN_TELEGRAF_HOST,)}'\n  port: '{env(KARTOTHERIAN_TELEGRAF_PORT,8125)}'\n\nservices:\n  - name: kartotherian\n    module: kartotherian\n\n    conf:\n      port: '{env(KARTOTHERIAN_PORT, 6533)}'\n      cors: '{env(KARTOTHERIAN_CORS_ORIGIN,*)}'\n\n      # Comment this out to allow connections from everywhere\n      # interface: localhost\n\n      # Show the the X-Powered-By header (default: true)\n      expose_version: false\n\n      sources: /etc/kartotherian/sources.yaml\n      modules:\n        - \"@kartotherian/cassandra\"\n        - \"@kartotherian/overzoom\"\n\n      # Secondary request handlers\n      requestHandlers: []\n\n      # Allow to reload sources when calling a disabled source\n      reloadSourcesOnGetTile: true\n      # Source will be disabled on unavailability\n      # (eg: Cassandra error) to close obsolete connections\n      disableSourceOnError: true\n\n      # Expose leaflet UI and statics (default: true)\n      exposeMapUi: false\n\n      # Expose source 'info.json' (default: true)\n      exposeSourceInfo: false\n\n      # Catch and log statsd errors (default: false)\n      catchMetricsErrors: true\n",
            "docker-compose.yml": "version: '3'\n\nservices:\n  postgres:\n    # Custom image maintained by openmaptiles in https://github.com/openmaptiles/openmaptiles-tools\n    # Based on postgres:9.6 and includes PostGIS and osml10n extensions\n    image: openmaptiles/postgis:latest@sha256:dc9eb0a534366197b5f187771846aab3dae1368d44d77378cdd5f4412007f31c\n    volumes:\n      - \"pgdata:/var/lib/postgresql/data\"\n    ports:\n      - \"5632:5432\"\n    environment:\n     - POSTGRES_DB=gis\n     - POSTGRES_USER=gis\n     - POSTGRES_PASSWORD=gis\n\n  cassandra:\n    image: cassandra:3\n    volumes:\n     - \"cassandra_data:/var/lib/cassandra\"\n\n  tilerator:\n    build:\n      context: .\n      dockerfile: tilerator/Dockerfile\n    depends_on:\n      - cassandra\n      - postgres\n      - redis\n    environment:\n      - TILERATOR_MODE=api # This service will not process tiles\n    volumes:\n      - update_tiles_data:/data/update_tiles_data\n\n  tilerator-worker:\n    build:\n      context: .\n      dockerfile: tilerator/Dockerfile\n    environment:\n      - TILERATOR_NUM_WORKERS=ncpu # Number of workers (or ncpu by default)\n    depends_on:\n      - cassandra\n      - postgres\n      - redis\n\n  redis:\n    image: redis:latest\n    command: redis-server --appendonly yes # to enable persistence\n    volumes:\n      - \"redisdata:/data\"\n\n  load_db:\n    build:\n      context: .\n      dockerfile: load_db/Dockerfile\n    read_only: true\n    environment:\n      - INVOKE_GENERATED_FILES_DIR=/data/generated\n      - INVOKE_DATA_DIR=/data/input\n      - INVOKE_UPDATE_TILES_DIR=/data/update_tiles_data\n    tmpfs:\n      - /tmp\n    volumes:\n      - input_data:/data/input\n      - imposm_generated_data:/data/generated\n      - update_tiles_data:/data/update_tiles_data\n    depends_on:\n      - postgres\n\n  kartotherian:\n    build:\n      context: .\n      dockerfile: kartotherian/Dockerfile\n\n  telegraf:\n    build:\n      context: .\n      dockerfile: telegraf/Dockerfile\n\nvolumes:\n  pgdata:\n  cassandra_data:\n  redisdata:\n  input_data:\n  imposm_generated_data:\n  update_tiles_data:\n",
            "kartotherian/Dockerfile": "FROM node:14-buster-slim\n\nRUN apt-get update \\\n        && DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes --quiet --no-install-recommends \\\n            git python3.6 build-essential \\\n        && apt-get clean\n\nENV NODE_ENV=production\n\n# Upgrade npm\nRUN npm i npm@8.5.0 -g \\\n    && mkdir -p /etc/kartotherian \\\n    && chown node /etc/kartotherian \\\n    && chown node /opt\n\nUSER node\n\nRUN git clone https://github.com/Qwant/kartotherian.git /opt/kartotherian \\\n    && cd /opt/kartotherian \\\n    && git checkout 46dedb6d0c46d0f1dbf6ad4e029d676c63fc5eab \\\n    && npm ci --production\n\nCOPY kartotherian/config.yaml /etc/kartotherian\nCOPY kartotherian/sources.yaml /etc/kartotherian\n\nENV KARTOTHERIAN_PORT=6533\nENV KARTOTHERIAN_CASSANDRA_SERVERS=cassandra\nENV KARTOTHERIAN_CASSANDRA_USER=gis\nENV KARTOTHERIAN_CASSANDRA_PSWD=\n\n# Set KARTOTHERIAN_TELEGRAF_HOST to empty string to disable stats metrics reporter\nENV KARTOTHERIAN_TELEGRAF_HOST=telegraf\nENV KARTOTHERIAN_TELEGRAF_PORT=8125\n\n\nCMD node /opt/kartotherian/packages/kartotherian/server.js -c /etc/kartotherian/config.yaml\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "config.api.yaml",
            "config.worker.yaml",
            "gen_tiles.sh",
            "runserver.sh",
            "sources.yaml"
        ],
        "folders": []
    }
}