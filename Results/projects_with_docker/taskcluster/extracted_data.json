{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"taskcluster\",\n  \"version\": \"83.2.4\",\n  \"private\": true,\n  \"engine-strict\": true,\n  \"type\": \"module\",\n  \"engines\": {\n    \"node\": \"22.13.1\"\n  },\n  \"packageManager\": \"yarn@4.6.0\",\n  \"workspaces\": [\n    \"libraries/*\",\n    \"services/*\",\n    \"db\"\n  ],\n  \"dependencies\": {\n    \"@apollo/client\": \"^3.12.8\",\n    \"@apollo/server\": \"^4.11.3\",\n    \"@aws-sdk/client-ec2\": \"^3.738.0\",\n    \"@aws-sdk/client-s3\": \"3.645.0\",\n    \"@aws-sdk/client-ses\": \"^3.738.0\",\n    \"@aws-sdk/client-sts\": \"^3.738.0\",\n    \"@aws-sdk/middleware-endpoint\": \"^3.374.0\",\n    \"@aws-sdk/s3-request-presigner\": \"^3.740.0\",\n    \"@azure/arm-compute\": \"^16.0.0\",\n    \"@azure/arm-network\": \"^24.0.0\",\n    \"@azure/ms-rest-azure-js\": \"^2.0.1\",\n    \"@azure/ms-rest-js\": \"^2.6.6\",\n    \"@azure/ms-rest-nodeauth\": \"^3.0.5\",\n    \"@googleapis/compute\": \"^10.0.0\",\n    \"@googleapis/iam\": \"^16.0.0\",\n    \"@googleapis/iamcredentials\": \"^3.0.0\",\n    \"@graphql-tools/schema\": \"^10.0.16\",\n    \"@octokit/auth-app\": \"^4.0.7\",\n    \"@octokit/core\": \"^3.0.0\",\n    \"@octokit/plugin-retry\": \"^7.1.3\",\n    \"@octokit/rest\": \"^18.0.0\",\n    \"@sentry/node\": \"^6.0.0\",\n    \"@slack/web-api\": \"^6.11.0\",\n    \"ajv\": \"^8.17.1\",\n    \"ajv-formats\": \"^2.1.1\",\n    \"amqplib\": \"^0.10.5\",\n    \"body-parser\": \"1.20.3\",\n    \"body-parser-graphql\": \"^1.0.0\",\n    \"chalk\": \"^4.0.0\",\n    \"compression\": \"^1.7.5\",\n    \"content-security-policy\": \"^0.3.0\",\n    \"content-type\": \"^1.0.4\",\n    \"cors\": \"^2.8.4\",\n    \"cron-parser\": \"4.9.0\",\n    \"dataloader\": \"^2.2.3\",\n    \"debug\": \"^4.4.0\",\n    \"deepmerge\": \"^4.3.1\",\n    \"ejs\": \"^3.1.10\",\n    \"email-templates\": \"^10.0.1\",\n    \"express\": \"4.21.2\",\n    \"express-session\": \"^1.18.1\",\n    \"express-sslify\": \"1.2.0\",\n    \"fast-azure-storage\": \"^4.0.0\",\n    \"fast-json-stable-stringify\": \"^2.0.0\",\n    \"generate-password\": \"^1.5.0\",\n    \"got\": \"^14.4.5\",\n    \"graphql\": \"^16.10.0\",\n    \"graphql-depth-limit\": \"^1.1.0\",\n    \"graphql-playground-middleware-express\": \"^1.7.23\",\n    \"graphql-query-count-limit\": \"^1.0.0\",\n    \"graphql-scalars\": \"^1.24.1\",\n    \"graphql-type-json\": \"^0.3.2\",\n    \"graphql-validation-complexity\": \"^0.4.2\",\n    \"hashids\": \"^2.0.0\",\n    \"hawk\": \"9.0.2\",\n    \"hsts\": \"^2.1.0\",\n    \"immutable\": \"^4.3.7\",\n    \"iterall\": \"^1.2.2\",\n    \"js-yaml\": \"^4.0.0\",\n    \"json-e\": \"^4.8.0\",\n    \"json-parameterization\": \"^2.0.1\",\n    \"jsonwebtoken\": \"^9.0.0\",\n    \"jwks-rsa\": \"^2.1.5\",\n    \"lodash\": \"4.17.21\",\n    \"loglevel\": \"^1.9.2\",\n    \"marked\": \"^4.1.1\",\n    \"matrix-js-sdk\": \"^34.13.0\",\n    \"memorystore\": \"^1.6.1\",\n    \"mkdirp\": \"^1.0.0\",\n    \"netmask\": \"^2.0.0\",\n    \"newrelic\": \"^7.0.0\",\n    \"node-forge\": \"^1.0.0\",\n    \"nodemailer\": \"^6.10.0\",\n    \"oauth2orize\": \"^1.11.0\",\n    \"p-queue\": \"^6.6.2\",\n    \"p-synchronize\": \"^1.0.0\",\n    \"parseurl\": \"^1.3.3\",\n    \"passport\": \"^0.7.0\",\n    \"passport-auth0\": \"^1.4.3\",\n    \"passport-github\": \"^1.1.0\",\n    \"pg\": \"^8.13.1\",\n    \"pg-connection-string\": \"^2.7.0\",\n    \"qs\": \"^6.14.0\",\n    \"quick-lru\": \"^5.0.0\",\n    \"regex-escape\": \"^3.4.8\",\n    \"request-ip\": \"^3.3.0\",\n    \"rimraf\": \"^5.0.7\",\n    \"sanitize-html\": \"^2.14.0\",\n    \"sentry-api\": \"^0.2.0\",\n    \"sift\": \"^17.1.3\",\n    \"slugid\": \"^3.2.0\",\n    \"subscriptions-transport-ws\": \"^0.11.0\",\n    \"superagent\": \"^6.0.0\",\n    \"taskcluster-client\": \"link:clients/client\",\n    \"taskcluster-db\": \"link:db\",\n    \"taskcluster-lib-api\": \"link:libraries/api\",\n    \"taskcluster-lib-app\": \"link:libraries/app\",\n    \"taskcluster-lib-config\": \"link:libraries/config\",\n    \"taskcluster-lib-iterate\": \"link:libraries/iterate\",\n    \"taskcluster-lib-loader\": \"link:libraries/loader\",\n    \"taskcluster-lib-monitor\": \"link:libraries/monitor\",\n    \"taskcluster-lib-postgres\": \"link:libraries/postgres\",\n    \"taskcluster-lib-pulse\": \"link:libraries/pulse\",\n    \"taskcluster-lib-references\": \"link:libraries/references\",\n    \"taskcluster-lib-scopes\": \"^11.0.0\",\n    \"taskcluster-lib-urls\": \"^13.0.0\",\n    \"taskcluster-lib-validate\": \"link:libraries/validate\",\n    \"topo-sort\": \"^1.0.0\",\n    \"type-is\": \"^1.6.15\",\n    \"uuid\": \"^9.0.0\",\n    \"walk\": \"^2.3.9\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/client-iam\": \"^3.738.0\",\n    \"@aws-sdk/client-sns\": \"^3.738.0\",\n    \"@aws-sdk/client-sqs\": \"^3.738.0\",\n    \"@types/pg\": \"^8.11.11\",\n    \"acorn-loose\": \"^8.0.1\",\n    \"acorn-walk\": \"^8.3.4\",\n    \"apollo-link-ws\": \"^1.0.20\",\n    \"app-root-dir\": \"^1.0.2\",\n    \"assume\": \"^2.1.0\",\n    \"aws-sdk-client-mock\": \"^3.0.1\",\n    \"builtin-modules\": \"^3.1.0\",\n    \"c8\": \"^8.0.1\",\n    \"commander\": \"^9.4.1\",\n    \"console-taskgraph\": \"^1.7.2\",\n    \"cronstrue\": \"^2.54.0\",\n    \"cross-env\": \"^7.0.2\",\n    \"dockerode\": \"^3.3.4\",\n    \"error-stack-parser\": \"^2.0.2\",\n    \"eslint\": \"^8.57.0\",\n    \"github-slugger\": \"^2.0.0\",\n    \"glob\": \"^8.0.3\",\n    \"graphql-tag\": \"^2.12.6\",\n    \"inquirer\": \"^8.0.0\",\n    \"is-uuid\": \"^1.0.2\",\n    \"json-stable-stringify\": \"^1.2.1\",\n    \"markdown-table\": \"^3.0.4\",\n    \"md-directory\": \"^1.0.2\",\n    \"mocha\": \"^10.8.2\",\n    \"mock-fs\": \"^4.8.0\",\n    \"mockdate\": \"^3.0.2\",\n    \"moment\": \"^2.30.1\",\n    \"nock\": \"13.5.6\",\n    \"open-editor\": \"^3.0.0\",\n    \"qlobber\": \"^8.0.1\",\n    \"semver\": \"^7.7.0\",\n    \"sinon\": \"^13.0.0\",\n    \"snake-case\": \"^3.0.3\",\n    \"taskcluster-lib-testing\": \"link:libraries/testing\",\n    \"typescript\": \"^5.7.3\",\n    \"ws\": \"^7.5.10\",\n    \"yarn-minify\": \"^1.0.1\",\n    \"zen-observable\": \"^0.10.0\",\n    \"zurvan\": \"^0.8.0\"\n  },\n  \"resolutions\": {\n    \"mocha/mkdirp\": \"^1.0.0\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --ext js --ignore-pattern clients/client-rust --ignore-pattern clients/client-web/build --ignore-pattern clients/client-py libraries services infrastructure clients test db workers/docker-worker\",\n    \"lint:fix\": \"eslint --fix --cache --ext js --ignore-pattern clients/client-rust --ignore-pattern clients/client-web/build --ignore-pattern clients/client-py libraries services infrastructure clients test db workers/docker-worker\",\n    \"lint:go\": \"bash test/go-lint.sh\",\n    \"lint:py\": \"bash test/py-lint.sh\",\n    \"test\": \"yarn workspaces foreach -A run test\",\n    \"fetch-coverage\": \"node test/fetch-coverage.js\",\n    \"build\": \"node infrastructure/tooling/src/main.js build\",\n    \"release\": \"node infrastructure/tooling/src/main.js release\",\n    \"staging-release\": \"node infrastructure/tooling/src/main.js staging-release\",\n    \"release:publish\": \"node infrastructure/tooling/src/main.js release:publish\",\n    \"generate\": \"NODE_OPTIONS=--dns-result-order=ipv4first node infrastructure/tooling/src/main.js generate\",\n    \"minify\": \"node infrastructure/tooling/src/main.js minify\",\n    \"changelog\": \"node infrastructure/tooling/src/main.js changelog\",\n    \"changelog:show\": \"node infrastructure/tooling/src/main.js changelog:show\",\n    \"changelog:check\": \"node infrastructure/tooling/src/main.js changelog:check\",\n    \"start\": \"docker compose up -d\",\n    \"stop\": \"docker compose down --remove-orphans\",\n    \"dev:start\": \"sh -c \\\"docker compose -f docker-compose.yml -f docker-compose.dev.yml `if [ -e ./docker-compose.override.yml ]; then echo '-f docker-compose.override.yml'; fi` up -d\\\"\",\n    \"dev:stop\": \"sh -c \\\"docker compose -f docker-compose.yml -f docker-compose.dev.yml `if [ -e ./docker-compose.override.yml ]; then echo '-f docker-compose.override.yml'; fi` down --remove-orphans\\\"\",\n    \"prod:start\": \"docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d\",\n    \"prod:stop\": \"docker compose -f docker-compose.yml -f docker-compose.prod.yml down --remove-orphans\",\n    \"dev:init\": \"node infrastructure/tooling/src/main.js dev:init\",\n    \"dev:db:upgrade\": \"node infrastructure/tooling/src/main.js dev:db:upgrade\",\n    \"dev:db:downgrade\": \"node infrastructure/tooling/src/main.js dev:db:downgrade\",\n    \"dev:apply\": \"node infrastructure/tooling/src/main.js dev:apply\",\n    \"dev:delete\": \"node infrastructure/tooling/src/main.js dev:delete\",\n    \"dev:verify\": \"node infrastructure/tooling/src/main.js dev:verify\",\n    \"dev:templates\": \"node infrastructure/tooling/src/main.js dev:templates\",\n    \"dev:ensure:db\": \"node infrastructure/tooling/src/main.js dev:ensure:db\",\n    \"dev:ensure:rabbit\": \"node infrastructure/tooling/src/main.js dev:ensure:rabbit\",\n    \"smoketest\": \"node infrastructure/tooling/src/main.js smoketest\",\n    \"test:meta\": \"node infrastructure/tooling/src/main.js test:meta\",\n    \"db:upgrade\": \"node db/src/main.js upgrade\",\n    \"db:downgrade\": \"node db/src/main.js downgrade\",\n    \"db:renumber\": \"node db/src/main.js renumber\",\n    \"db:new\": \"node db/src/main.js new\",\n    \"preinstall\": \"[ -d clients/client ] && cd clients/client && yarn --immutable || exit 0\",\n    \"types\": \"tsc --noEmit\"\n  },\n  \"metatests\": {\n    \"specialImports\": [\n      \"eslint\",\n      \"c8\",\n      \"cross-env\",\n      \"ejs\",\n      \"@octokit/core\",\n      \"@apollo/client\",\n      \"typescript\",\n      \"@types/pg\"\n    ]\n  },\n  \"eslintIgnore\": [\n    \"**/node_modules/**\",\n    \"services/web-server/build\"\n  ],\n  \"heroku-run-build-script\": true\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "npm",
        "config_files": {
            ".env": "IMAGE=taskcluster/taskcluster:v83.2.4\nIMAGE_DEV=taskcluster/taskcluster:v83.2.4-devel\nIMAGE_GENERIC_WORKER=taskcluster/generic-worker:v83.2.4\n",
            "docker-compose.yml": "x-autogenerated: This file is autogenerated\nvolumes:\n  db-data: {}\nnetworks:\n  local:\n    driver: bridge\nservices:\n  rabbitmq:\n    image: rabbitmq:3.12.1-management\n    networks:\n      - local\n    healthcheck:\n      test: rabbitmq-diagnostics ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '5672:5672'\n      - '15672:15672'\n    environment:\n      RABBITMQ_DEFAULT_USER: admin\n      RABBITMQ_DEFAULT_PASS: admin\n      RABBITMQ_DEFAULT_VHOST: local\n  postgres:\n    image: postgres:15\n    networks:\n      - local\n    volumes:\n      - db-data:/var/lib/postgresql/data\n      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - '5432:5432'\n    environment:\n      POSTGRES_DB: taskcluster\n      POSTGRES_HOST_AUTH_METHOD: trust\n      LC_COLLATE: en_US.UTF8\n      LC_CTYPE: en_US.UTF8\n    healthcheck:\n      test: pg_isready -U postgres\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n  pg_init_db:\n    image: ${IMAGE}\n    networks:\n      - local\n    x-info: Run this first to bring database up to date\n    command:\n      - script/db:upgrade\n    depends_on:\n      postgres:\n        condition: service_healthy\n    environment:\n      USERNAME_PREFIX: taskcluster\n      ADMIN_DB_URL: postgresql://postgres@postgres:5432/taskcluster\n  s3:\n    image: minio/minio:RELEASE.2023-07-11T21-29-34Z\n    networks:\n      - local\n    command: server /data --console-address :9001\n    ports:\n      - '3090:9000'\n      - '3091:9001'\n    volumes:\n      - ./docker/buckets:/data\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: miniopassword\n    healthcheck:\n      test: curl -I http://localhost:9000/minio/health/cluster\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n  s3_init_buckets:\n    image: minio/mc:RELEASE.2023-07-11T23-30-44Z\n    networks:\n      - local\n    depends_on:\n      s3:\n        condition: service_healthy\n    entrypoint: |-\n      /bin/sh -c \"\n      /usr/bin/mc config host rm local;\n      /usr/bin/mc config host add --quiet --api s3v4 local http://s3:9000 minioadmin miniopassword;\n      (/usr/bin/mc ls local/public-bucket/ || /usr/bin/mc mb --quiet local/public-bucket/);\n      (/usr/bin/mc ls local/private-bucket/ || /usr/bin/mc mb --quiet local/private-bucket/);\n      /usr/bin/mc anonymous set public local/public-bucket;\n      \"\n    environment:\n      MINIO_ENDPOINT: http://s3:9000\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: miniopassword\n  ui:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.ui\n    command: ui/web\n    volumes:\n      - ./docker/nginx-ui-local-dev-only.conf:/app/ui/web-ui-nginx-site.conf\n    ports:\n      - '3022:80'\n  references:\n    image: ${IMAGE}\n    networks:\n      - local\n    command: references/web\n    environment:\n      TASKCLUSTER_ROOT_URL: http://taskcluster\n    ports:\n      - '3023:80'\n  taskcluster:\n    image: nginx:1.21.6\n    networks:\n      - local\n    depends_on:\n      - ui\n      - web-server-web\n    volumes:\n      - ./docker/nginx.conf:/etc/nginx/nginx.conf\n    healthcheck:\n      test: curl -I http://localhost/\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '80:80'\n  tc_admin_init:\n    image: taskcluster/tc-admin:4.0.0\n    networks:\n      - local\n    volumes:\n      - ./docker/tc-admin:/app\n    working_dir: /app\n    x-info: This script provisions taskcluster configuration. See docker/tc-admin for details\n    environment:\n      TASKCLUSTER_ROOT_URL: http://taskcluster\n      TASKCLUSTER_CLIENT_ID: static/taskcluster/root\n      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA\n    entrypoint: |-\n      /bin/sh -c \"\n      echo 'Applying config'; tc-admin apply ||true;\n      \"\n    depends_on:\n      auth-web:\n        condition: service_healthy\n      hooks-web:\n        condition: service_healthy\n      queue-web:\n        condition: service_healthy\n      worker-manager-web:\n        condition: service_healthy\n      secrets-web:\n        condition: service_healthy\n      taskcluster:\n        condition: service_healthy\n  generic-worker-standalone:\n    image: ${IMAGE_GENERIC_WORKER}\n    networks:\n      - local\n    restart: unless-stopped\n    volumes:\n      - ./docker/generic-worker-config.json:/etc/generic-worker/config.json\n      - ./docker/worker-runner-config.json:/etc/generic-worker/worker-runner.json\n    command: standalone\n    environment:\n      TASKCLUSTER_ROOT_URL: http://taskcluster\n      TASKCLUSTER_CLIENT_ID: static/generic-worker-compose-client\n      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      auth-web:\n        condition: service_healthy\n      queue-web:\n        condition: service_healthy\n      taskcluster:\n        condition: service_started\n      tc_admin_init:\n        condition: service_completed_successfully\n    ports:\n      - '59999:59999'\n  generic-worker-static:\n    image: ${IMAGE_GENERIC_WORKER}\n    networks:\n      - local\n    restart: unless-stopped\n    volumes:\n      - ./docker/generic-worker-config.json:/etc/generic-worker/config.json\n      - ./docker/worker-runner-config.json:/etc/generic-worker/worker-runner.json\n    command: static\n    environment:\n      TASKCLUSTER_ROOT_URL: http://taskcluster\n      TASKCLUSTER_CLIENT_ID: static/generic-worker-compose-client\n      TASKCLUSTER_ACCESS_TOKEN: j2Z6zW2QSLehailBXlosdw9e2Ti8R_Qh2M4buAEQfsMA\n    profiles:\n      - workers\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      auth-web:\n        condition: service_healthy\n      queue-web:\n        condition: service_healthy\n      taskcluster:\n        condition: service_started\n      tc_admin_init:\n        condition: service_completed_successfully\n    ports:\n      - '59999:59999'\n  auth-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.auth\n    command:\n      - auth/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/auth/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3011:80'\n  auth-cron-purgeExpiredClients:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.auth\n    command:\n      - auth/purgeExpiredClients\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - auth\n      - auth-cron\n  auth-cron-purgeAuditHistory:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.auth\n    command:\n      - auth/purgeAuditHistory\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - auth\n      - auth-cron\n  built-in-workers-server:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.built-in-workers\n    command:\n      - built-in-workers/server\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      queue-web:\n        condition: service_healthy\n  github-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.github\n    command:\n      - github/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/github/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3012:80'\n  github-background-worker:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.github\n    command:\n      - github/worker\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - github\n      - github-background\n  github-cron-sync:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.github\n    command:\n      - github/sync\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - github\n      - github-cron\n  hooks-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.hooks\n    command:\n      - hooks/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/hooks/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3013:80'\n  hooks-background-scheduler:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.hooks\n    command:\n      - hooks/scheduler\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - hooks\n      - hooks-background\n  hooks-background-listeners:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.hooks\n    command:\n      - hooks/listeners\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - hooks\n      - hooks-background\n  hooks-cron-expires:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.hooks\n    command:\n      - hooks/expires\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - hooks\n      - hooks-cron\n  index-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.index\n    command:\n      - index/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/index/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3014:80'\n  index-background-handlers:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.index\n    command:\n      - index/handlers\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - index\n      - index-background\n  index-cron-expire:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.index\n    command:\n      - index/expire\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - index\n      - index-cron\n  notify-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.notify\n    command:\n      - notify/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/notify/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3015:80'\n  notify-background-handler:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.notify\n    command:\n      - notify/handler\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - notify\n      - notify-background\n  object-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.object\n    command:\n      - object/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/object/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3016:80'\n  object-cron-expire:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.object\n    command:\n      - object/expire\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - object\n      - object-cron\n  purge-cache-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.purge-cache\n    command:\n      - purge-cache/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/purge-cache/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3017:80'\n  purge-cache-cron-expireCachePurges:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.purge-cache\n    command:\n      - purge-cache/expireCachePurges\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - purge-cache\n      - purge-cache-cron\n  queue-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/queue/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3018:80'\n  queue-background-claimResolver:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/claimResolver\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - background\n      - queue\n      - queue-background\n  queue-background-deadlineResolver:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/deadlineResolver\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - background\n      - queue\n      - queue-background\n  queue-background-dependencyResolver:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/dependencyResolver\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - background\n      - queue\n      - queue-background\n  queue-cron-expireArtifacts:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireArtifacts\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  queue-cron-expireTask:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireTask\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  queue-cron-expireTaskGroups:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireTaskGroups\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  queue-cron-expireTaskDependency:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireTaskDependency\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  queue-cron-expireQueueMessages:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireQueueMessages\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  queue-cron-expireWorkerInfo:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.queue\n    command:\n      - queue/expireWorkerInfo\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n      s3_init_buckets:\n        condition: service_completed_successfully\n    profiles:\n      - cron\n      - queue\n      - queue-cron\n  secrets-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.secrets\n    command:\n      - secrets/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/secrets/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3019:80'\n  secrets-cron-expire:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.secrets\n    command:\n      - secrets/expire\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - secrets\n      - secrets-cron\n  web-server-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.web-server\n    command:\n      - web-server/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:3050/api/web-server/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3050:3050'\n  web-server-cron-scanner:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.web-server\n    command:\n      - web-server/scanner\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - web-server\n      - web-server-cron\n  web-server-cron-cleanup-expire-auth-codes:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.web-server\n    command:\n      - web-server/cleanup-expire-auth-codes\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - web-server\n      - web-server-cron\n  web-server-cron-cleanup-expire-access-tokens:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.web-server\n    command:\n      - web-server/cleanup-expire-access-tokens\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - web-server\n      - web-server-cron\n  worker-manager-web:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/web\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    healthcheck:\n      test: wget -q --spider http://localhost:80/api/worker-manager/v1/ping\n      interval: 3s\n      timeout: 4s\n      retries: 100\n      start_period: 3s\n    ports:\n      - '3020:80'\n  worker-manager-background-provisioner:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/provisioner\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - worker-manager\n      - worker-manager-background\n  worker-manager-background-workerscanner:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/workerscanner\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - worker-manager\n      - worker-manager-background\n  worker-manager-background-workerscanner-azure:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/workerscanner-azure\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - background\n      - worker-manager\n      - worker-manager-background\n  worker-manager-cron-expire-workers:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/expire-workers\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - worker-manager\n      - worker-manager-cron\n  worker-manager-cron-expire-worker-pools:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/expire-worker-pools\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - worker-manager\n      - worker-manager-cron\n  worker-manager-cron-expire-launch-configs:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/expire-launch-configs\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - worker-manager\n      - worker-manager-cron\n  worker-manager-cron-expire-errors:\n    image: ${IMAGE}\n    networks:\n      - local\n    env_file: ./docker/env/.worker-manager\n    command:\n      - worker-manager/expire-errors\n    depends_on:\n      rabbitmq:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    profiles:\n      - cron\n      - worker-manager\n      - worker-manager-cron\n",
            "Dockerfile": "##\n# Build /app\n\nFROM node:22.13.1 AS build\n\nRUN mkdir -p /base/cache\nENV YARN_CACHE_FOLDER=/base/cache\n\n# prepare top level dependencies\nRUN mkdir -p /base/yarn\nCOPY /yarn.lock /.yarnrc.yml /package.json /base/yarn/\nCOPY /.yarn /base/yarn/.yarn/\n# prepare ui dependencies\nRUN mkdir -p /base/yarn-ui\nCOPY /ui/yarn.lock /.yarnrc.yml /ui/package.json /base/yarn-ui/\nCOPY /.yarn /base/yarn-ui/.yarn/\n# prepare clients/client dependencies\nRUN mkdir -p /base/yarn-client\nCOPY /clients/client/yarn.lock /.yarnrc.yml /clients/client/package.json /base/yarn-client/\nCOPY /.yarn /base/yarn-client/.yarn/\n\n# install all dependencies\nWORKDIR /base/yarn-client\nRUN corepack enable && \\\n    yarn workspaces focus --all --production\nWORKDIR /base/yarn\nRUN yarn workspaces focus --all --production\nWORKDIR /base/yarn-ui\nRUN yarn install --immutable && \\\n    mkdir -p /base/app/ui /base/app/clients/client && \\\n    cp -r /base/yarn/node_modules /base/app/ && \\\n    cp -r /base/yarn-ui/node_modules /base/app/ui/ && \\\n    cp -r /base/yarn-client/node_modules /base/app/clients/client/\n\n# copy the repository into the image, including the entrypoint\nWORKDIR /base/app\nCOPY . /base/app\nRUN chmod +x entrypoint\n\n# Write out the DockerFlow-compatible version.json file\nARG DOCKER_FLOW_VERSION\nRUN if [ -n \"${DOCKER_FLOW_VERSION}\" ]; then \\\n    echo \"${DOCKER_FLOW_VERSION}\" > version.json; \\\nelse \\\n    echo \\{\\\"version\\\": \\\"83.2.4\\\", \\\"commit\\\": \\\"local\\\", \\\"source\\\": \\\"https://github.com/taskcluster/taskcluster\\\", \\\"build\\\": \\\"NONE\\\"\\} > version.json; \\\nfi\n\n# Build the UI and discard everything else in that directory\nWORKDIR /base/app/ui\nRUN yarn build\nWORKDIR /base/app\n\n# clean up some unnecessary and potentially large stuff\nRUN /bin/bash -c \"\\\n    rm -rf .git; \\\n    rm -rf clients/client-{go,py,web,test}; \\\n    rm -rf {services,libraries}/*/test; \\\n    rm -rf db/test db/versions; \\\n    rm -rf ui/node_modules ui/src ui/test; \\\n    \"\n\n##\n# build the final image\n\nFROM node:22.13.1-alpine AS image\nRUN apk --no-cache add --update nginx bash\nCOPY --from=build /base/app /app\nENV HOME=/app\nWORKDIR /app\nENTRYPOINT [\"/app/entrypoint\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".eslintignore",
            ".eslintrc.js",
            ".gitignore",
            ".mocharc.yml",
            ".neutrinorc.js",
            "Dockerfile",
            "README.md",
            "generate-env-js.js",
            "jest.config.js",
            "jest.setup.js",
            "package.json",
            "web-ui-nginx-site.conf",
            "webpack.config.js",
            "yarn.lock"
        ],
        "folders": [
            "docs",
            "src",
            "test"
        ]
    }
}