{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"lagoon\",\n  \"author\": \"amazee.io <hello@amazee.io> (http://www.amazee.io)\",\n  \"contributors\": [\n    \"Patrick Stapfer <patrick@amazee.io>\",\n    \"Karl Horky <karl.horky@gmail.com>\",\n    \"Michael Schmid <michael@amazee.io> (https://amazee.io)\"\n  ],\n  \"private\": true,\n  \"workspaces\": [\n    \"node-packages/*\",\n    \"services/*\"\n  ],\n  \"devDependencies\": {\n    \"prettier\": \"^3.2.5\",\n    \"yarn-audit-fix\": \"^10.1.0\"\n  },\n  \"scripts\": {\n    \"glow\": \"glow check\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "local-dev/api-data-watcher-pusher/Dockerfile": "FROM ${UPSTREAM_REPO:-uselagoon}/commons:${UPSTREAM_TAG:-latest}\n\nRUN apk add --no-cache \\\n      bash \\\n      curl \\\n      gettext \\\n      minio-client \\\n      moreutils \\\n      py3-jwt \\\n      wget\n\nENV JWTSECRET=super-secret-string \\\n    JWTAUDIENCE=api.dev \\\n    GIT_HOST=\"172.17.0.1\" \\\n    GIT_PORT=\"2222\" \\\n    CONSOLE_URL=\"https://172.17.0.1:16643/\" \\\n    INGRESS_IP=\"172.17.0.1\" \\\n    TOKEN=\"eyJhbGciOiJSUzI1NiIsImtpZCI6IjZWamZLTzEzZ2lPSGFtc0d6QXVkWXpDYi1fcmlfLWVBd3JtbEEydGItTHcifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJsYWdvb24iLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoia3ViZXJuZXRlc2J1aWxkZGVwbG95LXRva2VuLXJxNDg1Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6Imt1YmVybmV0ZXNidWlsZGRlcGxveSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjA3YzViODAxLTI5ZDgtNDU5Ni1hODBlLTZlMmU3MmY3YmMwMCIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpsYWdvb246a3ViZXJuZXRlc2J1aWxkZGVwbG95In0.srj-zZguNXCQbeTIS5GtJw7Jl61k_miC8hXED70NQULm6OAMkImHrURRCfD4kjKPy-jbwEI88m5TNLFP8_0sMfdwj2vr2Gv8fTC55qoAJ589ff_dwv8THSKdKNj6VaHynzEzQ4IfZscd3ogP4HYF9alt-X4mMcJ2BApBt4F13Hg-bE2-4uzO0b_u13pJhzn0XrH8JGXWP0_oMPtE7M0zJL9BfOrBph_MgSb2djSbVBNbhPJ0fs9-eIB5aAu0NmqPhpxj6WL4UOAKX178IsDAq4vtRZrScZwvZxRcaDUxZ-MgwewWI8Ll0yg7UCxtZTdkLglkCgpjTK33Ei0PXWdE4A\"\n\nCOPY api-data /home/api-data\nCOPY minio-data /home/minio-data\nCOPY data-init-push.sh create_jwt.py /home/\n\nCMD [\"/sbin/tini\", \"--\", \"/home/data-init-push.sh\"]",
            "Jenkinsfile": "def skipRemainingStages = false\n\npipeline {\n  agent { label 'lagoon' }\n  environment {\n    // configure build params\n    SAFEBRANCH_NAME = env.BRANCH_NAME.replaceAll('%2F','-').replaceAll('[^A-Za-z0-9]+', '-').toLowerCase()\n    SAFEBRANCH_AND_BUILDNUMBER = (env.SAFEBRANCH_NAME+env.BUILD_NUMBER).replaceAll('%2f','').replaceAll('[^A-Za-z0-9]+', '').toLowerCase();\n    CI_BUILD_TAG = 'lagoon'.concat(env.SAFEBRANCH_AND_BUILDNUMBER.drop(env.SAFEBRANCH_AND_BUILDNUMBER.length()-26));\n    NPROC = \"${sh(script:'getconf _NPROCESSORS_ONLN', returnStdout: true).trim()}\"\n    SKIP_IMAGE_PUBLISH = credentials('SKIP_IMAGE_PUBLISH')\n  }\n\n  stages {\n    stage ('notify started') {\n      steps {\n        notifySlack('STARTED')\n      }\n    }\n    stage ('env') {\n      steps {\n        sh 'env'\n      }\n    }\n    stage ('skip on docs commit') {\n      when {\n        anyOf {\n          changeRequest branch: 'docs\\\\/.*', comparator: 'REGEXP'\n          branch pattern: \"docs\\\\/.*\", comparator: \"REGEXP\"\n        }\n      }\n      steps {\n        script {\n          skipRemainingStages = true\n          echo \"Docs only update, no build needed.\"\n        }\n      }\n    }\n    // in order to have the newest images from upstream (with all the security\n    // updates) we clean our local docker cache on tag deployments\n    // we don't do this all the time to still profit from image layer caching\n    // but we want this on tag deployments in order to ensure that we publish\n    // images always with the newest possible images.\n    stage ('clean docker image cache') {\n      when {\n        buildingTag()\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: \"docker image prune -af\", label: \"Pruning images\"\n      }\n    }\n    stage ('build and push images') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: \"make -j$NPROC -O build\", label: \"Building images\"\n        sh script: 'make go/test'\n        retry(3) {\n          timeout(time: 15, unit: 'MINUTES') {\n            sh script: \"make -j$NPROC -O build PLATFORM_ARCH=linux/arm64\", label: \"Building arm images\"\n          }\n        }\n        retry(3) {\n          sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n          sh script: \"make -O publish-testlagoon-images PUBLISH_PLATFORM_ARCH=linux/amd64 BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Publishing built amd64 images to testlagoon/*\"\n        }\n      }\n    }\n    stage ('show trivy scan results') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: \"cat scan.txt\", label: \"Display scan results\"\n      }\n    }\n    stage ('setup test cluster') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('0: setup test cluster') {\n          steps {\n            sh script: \"make local-dev-tools\", label: \"Configure k3d\"\n            sh script: \"./local-dev/k3d cluster delete --all\", label: \"Delete any remnant clusters\"\n            sh script: \"make k3d/stable-local-stack INSTALL_SEED_DATA=false BRANCH_NAME=${SAFEBRANCH_NAME} LAGOON_CORE_USE_HTTPS=false\", label: \"Setup stable cluster\"\n            sh script: \"make k3d/retest TESTS=[nginx] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Run nginx smoketest\"\n            sh script: \"make k3d/install-lagoon BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Run lagoon upgrade\"\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-0 log after test completion\"\n            // script {\n            //   skipRemainingStages = true\n            //   echo \"single test only, no further tests.\"\n            // }\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            sh script: \"while [ ! -f ./kubeconfig.k3d.${CI_BUILD_TAG} ]; do sleep 1; done\", label: \"Check for kubeconfig created\"\n            timeout(time: 45, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' -t > test-suite-0.txt || true\", label: \"Collecting test-suite-0 logs\"\n            }\n            sh script: \"cat test-suite-0.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-0.txt\"\n          }\n        }\n      }\n    }\n    stage ('run first test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('1: run first test suite') {\n          steps {\n            sh script: \"make -j$NPROC k3d/retest TESTS=[api,deploytarget,active-standby-kubernetes,features-kubernetes,features-kubernetes-2,features-variables] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running first test suite on k3d cluster\"\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-1 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-1.txt || true\", label: \"Collecting test-suite-1 logs\"\n            }\n            sh script: \"cat test-suite-1.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-1.txt\"\n          }\n        }\n        stage ('push all images to testlagoon/*') {\n          when {\n            not {\n              environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n            }\n          }\n          environment {\n            PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n          }\n          steps {\n            retry(3) {\n              sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n              sh script: \"timeout 12m make -O publish-testlagoon-images PUBLISH_PLATFORM_ARCH=linux/arm64,linux/amd64 BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Publishing built images\"\n            }\n          }\n        }\n      }\n    }\n    stage ('run second test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('2: run second test suite') {\n          steps {\n            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                sh script: \"make -j$NPROC k3d/retest TESTS=[bulk-deployment,image-cache,services,ssh-legacy,tasks,workflows] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running second test suite on k3d cluster\"\n            }\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-2 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-2.txt || true\", label: \"Collecting test-suite-2 logs\"\n            }\n            sh script: \"cat test-suite-2.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-2.txt\"\n          }\n        }\n      }\n    }\n    stage ('run third test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('3: run third test suite') {\n          steps {\n            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                sh script: \"make -j$NPROC k3d/retest TESTS=[gitlab,github,bitbucket,python,drush] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running third test suite on k3d cluster\"\n            }\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-3 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-3.txt || true\", label: \"Collecting test-suite-3 logs\"\n            }\n            sh script: \"cat test-suite-3.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-3.txt\"\n          }\n        }\n      }\n    }\n    stage ('push images to testlagoon/* with :latest tag') {\n       when {\n        branch 'main'\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n        sh script: \"make -O publish-testlagoon-images BRANCH_NAME=latest\", label: \"Publishing built images with :latest tag\"\n      }\n    }\n    stage ('deploy to test environment') {\n      when {\n        branch 'main'\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        TOKEN = credentials('git-amazeeio-helmfile-ci-trigger')\n      }\n      steps {\n        sh script: \"curl -X POST -F token=$TOKEN -F ref=main https://git.amazeeio.cloud/api/v4/projects/86/trigger/pipeline\", label: \"Trigger lagoon-core helmfile sync on amazeeio-test6\"\n      }\n    }\n    stage ('push images to uselagoon/*') {\n      when {\n        buildingTag()\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n        sh script: \"make -O publish-uselagoon-images\", label: \"Publishing built images to uselagoon\"\n      }\n    }\n    stage ('scan built images') {\n      when {\n        anyOf {\n          branch 'testing/scans'\n          buildingTag()\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: 'make scan-images', label: \"perform scan routines\"\n        sh script:  'find ./scans/*trivy* -type f | xargs tail -n +1', label: \"Show Trivy vulnerability scan results\"\n        sh script:  'find ./scans/*grype* -type f | xargs tail -n +1', label: \"Show Grype vulnerability scan results\"\n        sh script:  'find ./scans/*syft* -type f | xargs tail -n +1', label: \"Show Syft SBOM results\"\n      }\n    }\n  }\n\n  post {\n    always {\n      sh \"make docker_buildx_clean k3d/clean\"\n    }\n    success {\n      notifySlack('SUCCESS')\n      deleteDir()\n    }\n    failure {\n      notifySlack('FAILURE')\n    }\n    aborted {\n      notifySlack('ABORTED')\n    }\n  }\n}\n\ndef notifySlack(String status) {\n  slackSend(\n    color: ([STARTED: '#68A1D1', SUCCESS: '#BDFFC3', FAILURE: '#FF9FA1', ABORTED: '#949393'][status]),\n    message: \"${status}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\\n${env.BUILD_URL}\")\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "lagoon-realm-base-import.json"
        ],
        "folders": [
            "custom-mapper",
            "entrypoints",
            "javascript",
            "startup-scripts",
            "themes"
        ]
    }
}