{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"lagoon\",\n  \"author\": \"amazee.io <hello@amazee.io> (http://www.amazee.io)\",\n  \"contributors\": [\n    \"Patrick Stapfer <patrick@amazee.io>\",\n    \"Karl Horky <karl.horky@gmail.com>\",\n    \"Michael Schmid <michael@amazee.io> (https://amazee.io)\"\n  ],\n  \"private\": true,\n  \"workspaces\": [\n    \"node-packages/*\",\n    \"services/*\"\n  ],\n  \"devDependencies\": {\n    \"prettier\": \"^3.2.5\",\n    \"yarn-audit-fix\": \"^10.1.0\"\n  },\n  \"scripts\": {\n    \"glow\": \"glow check\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "services/ssh/Dockerfile": "ARG UPSTREAM_REPO\nARG UPSTREAM_TAG\nFROM ${UPSTREAM_REPO:-uselagoon}/commons:${UPSTREAM_TAG:-latest} AS commons\nFROM ubuntu:22.04\n\nARG LAGOON_VERSION\nENV LAGOON_VERSION=$LAGOON_VERSION\n\nLABEL maintainer=\"amazee.io\"\n\n# Copy commons files\nCOPY --from=commons /lagoon /lagoon\nCOPY --from=commons /bin/fix-permissions /bin/ep /bin/docker-sleep /bin/\nCOPY --from=commons /home /home\n\nRUN chmod g+w /etc/passwd \\\n    && mkdir -p /home\n\nENV TMPDIR=/tmp \\\n    TMP=/tmp \\\n    HOME=/home \\\n    # When Bash is invoked via `sh` it behaves like the old Bourne Shell and sources a file that is given in `ENV`\n    ENV=/home/.bashrc \\\n    # When Bash is invoked as non-interactive (like `bash -c command`) it sources a file that is given in `BASH_ENV`\n    BASH_ENV=/home/.bashrc\n\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y curl build-essential ssh curl vim jq python3-jwt\n\nENV LAGOON=ssh \\\n    KUBECTL_VERSION=v1.25.0 \\\n    TZ=UTC\n\nRUN architecture=$(case $(uname -m) in x86_64 | amd64) echo \"amd64\" ;; aarch64 | arm64 | armv8) echo \"arm64\" ;; *) echo \"amd64\" ;; esac) \\\n    && curl -Lo kubectl \"https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/${architecture}/kubectl\" \\\n    && chmod +x kubectl \\\n    && mv kubectl /usr/bin/kubectl\n\nRUN architecture=$(case $(uname -m) in x86_64 | amd64) echo \"amd64\" ;; aarch64 | arm64 | armv8) echo \"arm64\" ;; *) echo \"amd64\" ;; esac) \\\n    && curl -sL https://github.com/krallin/tini/releases/download/v0.19.0/tini-${architecture} -o /sbin/tini && chmod a+x /sbin/tini\n\nCOPY services/ssh/libnss-ato-master.tar.gz /tmp/libnss-ato-master.tar.gz\n\nRUN mkdir /tmp/libnss-ato \\\n    && tar -xzf /tmp/libnss-ato-master.tar.gz -C /tmp/libnss-ato --strip-components=1 \\\n    && cd /tmp/libnss-ato/ \\\n    && make \\\n    && make install \\\n    && rm -rf /tmp/libnss-ato-master.tar.gz /tmp/libnss-ato\n\nRUN apt-get remove --purge -y build-essential \\\n    && apt-get autoremove -y \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Reproduce behavior of Alpine: Run Bash as sh\nRUN rm -f /bin/sh && ln -s /bin/bash /bin/sh\n\nCOPY services/ssh/etc/ /etc/\nCOPY services/ssh/home/ /home/\n\n# token.sh needs some envplating, so we fix permissions\nRUN fix-permissions /home/token.sh\nRUN fix-permissions /home/grant.sh\n\nRUN fix-permissions /etc/ssh/ && \\\n    fix-permissions /run/\n\nRUN mkdir -p /var/run/sshd && chmod 700 /var/run/sshd\n\n# This is the authorized keys command, which will be defined as AuthorizedKeysCommand\nCOPY services/ssh/authorize.sh /authorize.sh\n\n# Files defined in AuthorizedKeysCommand need the specific permissions for\n# root to own and no write permission by group or others\nRUN chmod 755 /authorize.sh\n\n# create_60_sec_jwt to create a JWT Admin Token which is valid for 60 secs\nCOPY services/ssh/create_60_sec_jwt.py /create_60_sec_jwt.py\n\n# Create /authorize.env file and give api right to write it, it will be filled\n# within docker-entrypoint with all environment variables and then sourced\n# by /authorize.sh\nRUN touch /authorize.env && fix-permissions /authorize.env\n\n# Setup folder for oc to save it's credentials\nRUN mkdir -p /home/.kube && fix-permissions /home/.kube\n\n# This will set the username of the random generated user by openshift to 'api' (see 10-passwd.sh)\nENV USER_NAME lagoon\n\n# Entrypoint file which will replace some environment variables into\n# hardcoded values every time the container is started\nCOPY services/ssh/docker-entrypoint.sh /lagoon/entrypoints/99-envplate.sh\n\n# Global lagoon default environment variables\nCOPY .env.defaults .\n\nENV AUTH_SERVER=http://auth-server:3000 \\\n    API_HOST=http://api:3000\n\nEXPOSE 2020\n\nENTRYPOINT [\"/sbin/tini\", \"--\", \"/lagoon/entrypoints.sh\"]\nCMD [\"/usr/sbin/sshd\", \"-e\", \"-D\", \"-f\", \"/etc/ssh/sshd_config\"]\n",
            "Jenkinsfile": "def skipRemainingStages = false\n\npipeline {\n  agent { label 'lagoon' }\n  environment {\n    // configure build params\n    SAFEBRANCH_NAME = env.BRANCH_NAME.replaceAll('%2F','-').replaceAll('[^A-Za-z0-9]+', '-').toLowerCase()\n    SAFEBRANCH_AND_BUILDNUMBER = (env.SAFEBRANCH_NAME+env.BUILD_NUMBER).replaceAll('%2f','').replaceAll('[^A-Za-z0-9]+', '').toLowerCase();\n    CI_BUILD_TAG = 'lagoon'.concat(env.SAFEBRANCH_AND_BUILDNUMBER.drop(env.SAFEBRANCH_AND_BUILDNUMBER.length()-26));\n    NPROC = \"${sh(script:'getconf _NPROCESSORS_ONLN', returnStdout: true).trim()}\"\n    SKIP_IMAGE_PUBLISH = credentials('SKIP_IMAGE_PUBLISH')\n  }\n\n  stages {\n    stage ('notify started') {\n      steps {\n        notifySlack('STARTED')\n      }\n    }\n    stage ('env') {\n      steps {\n        sh 'env'\n      }\n    }\n    stage ('skip on docs commit') {\n      when {\n        anyOf {\n          changeRequest branch: 'docs\\\\/.*', comparator: 'REGEXP'\n          branch pattern: \"docs\\\\/.*\", comparator: \"REGEXP\"\n        }\n      }\n      steps {\n        script {\n          skipRemainingStages = true\n          echo \"Docs only update, no build needed.\"\n        }\n      }\n    }\n    // in order to have the newest images from upstream (with all the security\n    // updates) we clean our local docker cache on tag deployments\n    // we don't do this all the time to still profit from image layer caching\n    // but we want this on tag deployments in order to ensure that we publish\n    // images always with the newest possible images.\n    stage ('clean docker image cache') {\n      when {\n        buildingTag()\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: \"docker image prune -af\", label: \"Pruning images\"\n      }\n    }\n    stage ('build and push images') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: \"make -j$NPROC -O build\", label: \"Building images\"\n        sh script: 'make go/test'\n        retry(3) {\n          timeout(time: 15, unit: 'MINUTES') {\n            sh script: \"make -j$NPROC -O build PLATFORM_ARCH=linux/arm64\", label: \"Building arm images\"\n          }\n        }\n        retry(3) {\n          sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n          sh script: \"make -O publish-testlagoon-images PUBLISH_PLATFORM_ARCH=linux/amd64 BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Publishing built amd64 images to testlagoon/*\"\n        }\n      }\n    }\n    stage ('show trivy scan results') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: \"cat scan.txt\", label: \"Display scan results\"\n      }\n    }\n    stage ('setup test cluster') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('0: setup test cluster') {\n          steps {\n            sh script: \"make local-dev-tools\", label: \"Configure k3d\"\n            sh script: \"./local-dev/k3d cluster delete --all\", label: \"Delete any remnant clusters\"\n            sh script: \"make k3d/stable-local-stack INSTALL_SEED_DATA=false BRANCH_NAME=${SAFEBRANCH_NAME} LAGOON_CORE_USE_HTTPS=false\", label: \"Setup stable cluster\"\n            sh script: \"make k3d/retest TESTS=[nginx] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Run nginx smoketest\"\n            sh script: \"make k3d/install-lagoon BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Run lagoon upgrade\"\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-0 log after test completion\"\n            // script {\n            //   skipRemainingStages = true\n            //   echo \"single test only, no further tests.\"\n            // }\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            sh script: \"while [ ! -f ./kubeconfig.k3d.${CI_BUILD_TAG} ]; do sleep 1; done\", label: \"Check for kubeconfig created\"\n            timeout(time: 45, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' -t > test-suite-0.txt || true\", label: \"Collecting test-suite-0 logs\"\n            }\n            sh script: \"cat test-suite-0.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-0.txt\"\n          }\n        }\n      }\n    }\n    stage ('run first test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('1: run first test suite') {\n          steps {\n            sh script: \"make -j$NPROC k3d/retest TESTS=[api,deploytarget,active-standby-kubernetes,features-kubernetes,features-kubernetes-2,features-variables] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running first test suite on k3d cluster\"\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-1 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-1.txt || true\", label: \"Collecting test-suite-1 logs\"\n            }\n            sh script: \"cat test-suite-1.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-1.txt\"\n          }\n        }\n        stage ('push all images to testlagoon/*') {\n          when {\n            not {\n              environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n            }\n          }\n          environment {\n            PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n          }\n          steps {\n            retry(3) {\n              sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n              sh script: \"timeout 12m make -O publish-testlagoon-images PUBLISH_PLATFORM_ARCH=linux/arm64,linux/amd64 BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Publishing built images\"\n            }\n          }\n        }\n      }\n    }\n    stage ('run second test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('2: run second test suite') {\n          steps {\n            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                sh script: \"make -j$NPROC k3d/retest TESTS=[bulk-deployment,image-cache,services,ssh-legacy,tasks,workflows] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running second test suite on k3d cluster\"\n            }\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-2 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-2.txt || true\", label: \"Collecting test-suite-2 logs\"\n            }\n            sh script: \"cat test-suite-2.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-2.txt\"\n          }\n        }\n      }\n    }\n    stage ('run third test suite') {\n      when {\n        expression {\n            !skipRemainingStages\n        }\n      }\n      parallel {\n        stage ('3: run third test suite') {\n          steps {\n            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n                sh script: \"make -j$NPROC k3d/retest TESTS=[gitlab,github,bitbucket,python,drush] BRANCH_NAME=${SAFEBRANCH_NAME}\", label: \"Running third test suite on k3d cluster\"\n            }\n            sh script: \"pkill -f './local-dev/stern'\", label: \"Closing off test-suite-3 log after test completion\"\n          }\n        }\n        stage ('collect logs') {\n          steps {\n            timeout(time: 30, unit: 'MINUTES') {\n              sh script: \"./local-dev/stern --kubeconfig ./kubeconfig.k3d.${CI_BUILD_TAG} --all-namespaces '^[a-z]' --since 1s -t > test-suite-3.txt || true\", label: \"Collecting test-suite-3 logs\"\n            }\n            sh script: \"cat test-suite-3.txt\", label: \"View ${NODE_NAME}:${WORKSPACE}/test-suite-3.txt\"\n          }\n        }\n      }\n    }\n    stage ('push images to testlagoon/* with :latest tag') {\n       when {\n        branch 'main'\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n        sh script: \"make -O publish-testlagoon-images BRANCH_NAME=latest\", label: \"Publishing built images with :latest tag\"\n      }\n    }\n    stage ('deploy to test environment') {\n      when {\n        branch 'main'\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        TOKEN = credentials('git-amazeeio-helmfile-ci-trigger')\n      }\n      steps {\n        sh script: \"curl -X POST -F token=$TOKEN -F ref=main https://git.amazeeio.cloud/api/v4/projects/86/trigger/pipeline\", label: \"Trigger lagoon-core helmfile sync on amazeeio-test6\"\n      }\n    }\n    stage ('push images to uselagoon/*') {\n      when {\n        buildingTag()\n        not {\n          environment name: 'SKIP_IMAGE_PUBLISH', value: 'true'\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      environment {\n        PASSWORD = credentials('amazeeiojenkins-dockerhub-password')\n      }\n      steps {\n        sh script: 'docker login -u amazeeiojenkins -p $PASSWORD', label: \"Docker login\"\n        sh script: \"make -O publish-uselagoon-images\", label: \"Publishing built images to uselagoon\"\n      }\n    }\n    stage ('scan built images') {\n      when {\n        anyOf {\n          branch 'testing/scans'\n          buildingTag()\n        }\n        expression {\n            !skipRemainingStages\n        }\n      }\n      steps {\n        sh script: 'make scan-images', label: \"perform scan routines\"\n        sh script:  'find ./scans/*trivy* -type f | xargs tail -n +1', label: \"Show Trivy vulnerability scan results\"\n        sh script:  'find ./scans/*grype* -type f | xargs tail -n +1', label: \"Show Grype vulnerability scan results\"\n        sh script:  'find ./scans/*syft* -type f | xargs tail -n +1', label: \"Show Syft SBOM results\"\n      }\n    }\n  }\n\n  post {\n    always {\n      sh \"make docker_buildx_clean k3d/clean\"\n    }\n    success {\n      notifySlack('SUCCESS')\n      deleteDir()\n    }\n    failure {\n      notifySlack('FAILURE')\n    }\n    aborted {\n      notifySlack('ABORTED')\n    }\n  }\n}\n\ndef notifySlack(String status) {\n  slackSend(\n    color: ([STARTED: '#68A1D1', SUCCESS: '#BDFFC3', FAILURE: '#FF9FA1', ABORTED: '#949393'][status]),\n    message: \"${status}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\\n${env.BUILD_URL}\")\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "lagoon-realm-base-import.json"
        ],
        "folders": [
            "custom-mapper",
            "entrypoints",
            "javascript",
            "startup-scripts",
            "themes"
        ]
    }
}