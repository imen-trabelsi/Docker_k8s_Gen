{
    "source_code_info": {
        "language": "Scala",
        "framework": "Scala",
        "dependencies": {
            "build.sbt": "import Common._\nimport org.tmt.sbt.docs.{Settings => DocSettings}\nimport sbtcrossproject.CrossPlugin.autoImport.{CrossType, crossProject}\n\ninThisBuild(\n  CommonSettings\n)\n\nlazy val aggregatedProjects: Seq[ProjectReference] = Seq(\n  `csw-prefix`.jvm,\n  `csw-prefix`.js,\n  `csw-location`,\n  `csw-config`,\n  `csw-logging`,\n  `csw-params`.jvm,\n  `csw-params`.js,\n  `csw-framework`,\n  `csw-command`,\n  `csw-event`,\n  `csw-alarm`,\n  `csw-aas`,\n  `csw-time`,\n  `csw-database`,\n  `csw-network-utils`,\n  `csw-commons`,\n  `csw-testkit`,\n  `csw-benchmark`,\n  `romaine`,\n  `examples`,\n  `integration`,\n  `csw-contract`,\n  `csw-services`\n)\n\nlazy val unidocExclusions: Seq[ProjectReference] = Seq(\n  `csw-location-server`,\n  `csw-config-server`,\n  `csw-location-agent`,\n  `csw-config-cli`,\n  `csw-event-cli`,\n  `csw-alarm-cli`,\n  `csw-time-core`.js,\n  `csw-time-clock`.js,\n  `csw-logging-macros`,\n  `csw-logging-models`.js,\n  `csw-params`.js,\n  `csw-prefix`.js,\n  `csw-command-api`.js,\n  `csw-location-api`.js,\n  `csw-alarm-models`.js,\n  `csw-config-models`.js,\n  `csw-network-utils`,\n  `csw-commons`,\n  `csw-benchmark`,\n  `romaine`,\n  `examples`,\n  `integration`,\n  `csw-contract`,\n  `csw-services`\n)\n\nlazy val githubReleases: Seq[ProjectReference] = Seq(\n  `csw-location-server`,\n  `csw-location-agent`,\n  `csw-config-server`,\n  `csw-config-cli`,\n  `csw-event-cli`,\n  `csw-alarm-cli`\n)\n\nlazy val multiJvmProjects: Seq[ProjectReference] = Seq(\n  `integration`\n)\n\n/* ================= Root Project ============== */\nlazy val `csw` = project\n  .in(file(\".\"))\n  .enablePlugins(NoPublish, UnidocSitePlugin, GithubPublishPlugin, GitBranchPrompt, GithubRelease, ContractPlugin)\n  .aggregate(aggregatedProjects: _*)\n  .settings(DocSettings.makeSiteMappings(docs))\n  .settings(Settings.addAliases)\n  .settings(DocSettings.docExclusions(unidocExclusions))\n  .settings(Settings.multiJvmTestTask(multiJvmProjects))\n  .settings(GithubRelease.githubReleases)\n  .settings(\n    ghreleaseRepoOrg  := \"tmtsoftware\",\n    ghreleaseRepoName := \"csw\"\n  )\n  .settings(ghreleaseAssets := {\n    ghreleaseAssets.value ++ Seq(\n      Settings.addLoggingAggregator.value\n    )\n  })\n  .settings(\n    generateContract := ContractPlugin.generate(`csw-contract`).value\n  )\n\nlazy val `csw-contract` = project\n  .dependsOn(\n    `csw-location-api`.jvm,\n    `csw-command-api`.jvm,\n    `csw-config-models`.jvm,\n    `csw-command-client`,\n    `csw-params`.jvm\n  )\n  .settings(\n    libraryDependencies ++= Dependencies.Contract.value\n  )\n\nlazy val `csw-prefix` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Full)\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jsSettings(jsTestArg)\n  .settings(fork := false)\n  .settings(libraryDependencies ++= Dependencies.Prefix.value)\n\n/* ================= Location Service ============== */\n\nlazy val `csw-location` = project\n  .in(file(\"csw-location\"))\n  .aggregate(\n    `csw-location-api`.jvm,\n    `csw-location-api`.js,\n    `csw-location-server`,\n    `csw-location-client`,\n    `csw-location-agent`\n  )\n\nlazy val `csw-location-api` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Full)\n  .in(file(\"csw-location/csw-location-api\"))\n  .jvmConfigure(_.dependsOn(`csw-commons`))\n  .dependsOn(`csw-prefix`)\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jvmConfigure(_.dependsOn(`csw-logging-client`).enablePlugins(MaybeCoverage))\n  //  the following setting was required by IntelliJ as it can not handle cross-compiled Akka types\n  .jsSettings(SettingKey[Boolean](\"ide-skip-project\") := true)\n  .jsSettings(jsTestArg)\n  .settings(libraryDependencies ++= Dependencies.LocationApi.value)\n  .settings(fork := false)\n\nlazy val `csw-location-server` = project\n  .in(file(\"csw-location/csw-location-server\"))\n  .dependsOn(\n    `csw-location-api`.jvm,\n    `csw-logging-client` % \"compile->compile;test->test\",\n    `csw-aas-http`,\n    `csw-network-utils`,\n    `csw-location-client` % Test,\n    `csw-commons`         % \"compile->compile;test->test\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.LocationServer.value\n  )\n\nlazy val `csw-location-client` = project\n  .in(file(\"csw-location/csw-location-client\"))\n  .dependsOn(\n    `csw-location-api`.jvm,\n    `csw-network-utils`\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.LocationClient.value\n  )\n\nlazy val `csw-location-agent` = project\n  .in(file(\"csw-location/csw-location-agent\"))\n  .dependsOn(\n    `csw-location-client`,\n    `csw-commons` % \"test->test\",\n    `csw-testkit` % \"test->compile\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.LocationAgent.value\n  )\n\n/* ================= Config Service ============== */\nlazy val `csw-config` = project\n  .in(file(\"csw-config\"))\n  .aggregate(\n    `csw-config-models`.jvm,\n    `csw-config-models`.js,\n    `csw-config-api`,\n    `csw-config-server`,\n    `csw-config-client`,\n    `csw-config-cli`\n  )\n\nlazy val `csw-config-models` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Pure)\n  .in(file(\"csw-config/csw-config-models\"))\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jsSettings(jsTestArg)\n  .dependsOn(`csw-params`)\n  .settings(fork := false)\n  .settings(libraryDependencies ++= Dependencies.ConfigModels.value)\n\nlazy val `csw-config-api` = project\n  .in(file(\"csw-config/csw-config-api\"))\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .dependsOn(`csw-logging-api`, `csw-config-models`.jvm, `csw-commons` % \"test->test\")\n  .settings(\n    libraryDependencies ++= Dependencies.ConfigApi.value\n  )\n\nlazy val `csw-config-server` = project\n  .in(file(\"csw-config/csw-config-server\"))\n  .dependsOn(\n    `csw-config-api`,\n    `csw-location-client`,\n    `csw-aas-http`,\n    `csw-location-server` % \"test->test\",\n    `csw-commons`         % \"compile->compile;test->test\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.ConfigServer.value\n  )\n\nlazy val `csw-config-client` = project\n  .in(file(\"csw-config/csw-config-client\"))\n  .dependsOn(\n    `csw-config-api`,\n    `csw-location-api`.jvm,\n    `csw-commons`       % \"compile->compile;test->test\",\n    `csw-config-server` % \"test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.ConfigClient.value\n  )\n\nlazy val `csw-config-cli` = project\n  .in(file(\"csw-config/csw-config-cli\"))\n  .dependsOn(\n    `csw-config-client`,\n    `csw-location-client`,\n    `csw-aas-installed`,\n    `csw-config-server` % \"test->test\",\n    `csw-commons`       % \"test->test\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.ConfigCli.value\n  )\n\n/* ============ Logging service ============ */\n\nlazy val `csw-logging` = project\n  .in(file(\"csw-logging\"))\n  .aggregate(\n    `csw-logging-macros`,\n    `csw-logging-models`.jvm,\n    `csw-logging-models`.js,\n    `csw-logging-api`,\n    `csw-logging-client`\n  )\n\nlazy val `csw-logging-macros` = project\n  .in(file(\"csw-logging/csw-logging-macros\"))\n  .settings(\n    libraryDependencies += Libs.`scala-reflect`\n  )\n\nlazy val `csw-logging-models` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Pure)\n  .in(file(\"csw-logging/csw-logging-models\"))\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jsSettings(jsTestArg)\n  .settings(fork := false)\n  .settings(libraryDependencies ++= Dependencies.LoggingModels.value)\n\nlazy val `csw-logging-api` = project\n  .in(file(\"csw-logging/csw-logging-api\"))\n  .dependsOn(\n    `csw-logging-macros`,\n    `csw-logging-models`.jvm\n  )\n  .settings(\n    libraryDependencies += Libs.`enumeratum`.value\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n\nlazy val `csw-logging-client` = project\n  .in(file(\"csw-logging/csw-logging-client\"))\n  .dependsOn(`csw-commons` % \"compile->compile;test->test\", `csw-logging-macros`, `csw-logging-api`, `csw-prefix`.jvm)\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.LoggingClient.value\n  )\n\n/* ================= Params ================ */\nlazy val `csw-params` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Full)\n  .dependsOn(`csw-time-core`, `csw-prefix`)\n  .jvmConfigure(_.dependsOn(`csw-commons` % \"test->test\"))\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jsSettings(jsTestArg)\n  .settings(\n    libraryDependencies ++= Dependencies.Params.value,\n    fork := false\n  )\n  .jsSettings(\n    libraryDependencies += Libs.`scala-java-time`.value\n  )\n  .jvmSettings(\n    libraryDependencies ++= Dependencies.ParamsJvm.value\n  )\n\n/* ================= Framework Project ============== */\nlazy val `csw-framework` = project\n  .dependsOn(\n    `csw-params`.jvm,\n    `csw-config-client`,\n    `csw-logging-client`,\n    `csw-command-client`,\n    `csw-event-client`,\n    `csw-alarm-client`,\n    `csw-time-scheduler`,\n    `csw-location-client`,\n    `csw-event-client`    % \"test->test\",\n    `csw-location-server` % \"test->test\",\n    `csw-commons`         % \"test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, CswBuildInfo, MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.Framework.value\n  )\n\n/* ================= Command Service ============== */\nlazy val `csw-command` = project\n  .in(file(\"csw-command\"))\n  .aggregate(\n    `csw-command-api`.jvm,\n    `csw-command-api`.js,\n    `csw-command-client`\n  )\n\nlazy val `csw-command-api` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Full)\n  .in(file(\"csw-command/csw-command-api\"))\n  .dependsOn(\n    `csw-params`,\n    `csw-location-api`\n  )\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .settings(libraryDependencies ++= Dependencies.CommandApi.value)\n  //  the following setting was required by IntelliJ as it can not handle cross-compiled Akka types\n  .jsSettings(SettingKey[Boolean](\"ide-skip-project\") := true)\n  .jsSettings(jsTestArg)\n  .settings(fork := false)\n\nlazy val `csw-command-client` = project\n  .in(file(\"csw-command/csw-command-client\"))\n  .dependsOn(\n    `csw-command-api`.jvm,\n    `csw-logging-client`,\n    `csw-aas-http`,\n    `csw-location-api`.jvm,\n    `csw-location-client` % \"test->test\",\n    `csw-location-server` % \"test->test\",\n    `csw-commons`         % \"compile->compile;test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.CommandClient.value)\n\n/* ================= Event Service ============== */\n\nlazy val `csw-event` = project\n  .in(file(\"csw-event\"))\n  .aggregate(\n    `csw-event-api`,\n    `csw-event-client`,\n    `csw-event-cli`\n  )\n\nlazy val `csw-event-api` = project\n  .in(file(\"csw-event/csw-event-api\"))\n  .dependsOn(`csw-params`.jvm)\n  .enablePlugins(GenJavadocPlugin)\n  .settings(libraryDependencies ++= Dependencies.EventApi.value)\n\nlazy val `csw-event-client` = project\n  .in(file(\"csw-event/csw-event-client\"))\n  .dependsOn(\n    `csw-event-api`,\n    `csw-logging-client`,\n    `romaine`,\n    `csw-location-api`.jvm,\n    `csw-location-server` % \"test->test\",\n    `csw-commons`         % \"test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, AutoMultiJvm, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.EventClient.value)\n\nlazy val `csw-event-cli` = project\n  .in(file(\"csw-event/csw-event-cli\"))\n  .dependsOn(\n    `csw-location-client`,\n    `csw-event-client`  % \"compile->compile;test->test\",\n    `csw-commons`       % \"test->test\",\n    `csw-config-server` % \"test->test\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.EventCli.value)\n\n/* ================= Alarm Service ============== */\nlazy val `csw-alarm` = project\n  .in(file(\"csw-alarm\"))\n  .aggregate(\n    `csw-alarm-models`.jvm,\n    `csw-alarm-models`.js,\n    `csw-alarm-api`,\n    `csw-alarm-client`,\n    `csw-alarm-cli`\n  )\n\nlazy val `csw-alarm-models` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Pure)\n  .in(file(\"csw-alarm/csw-alarm-models\"))\n  .dependsOn(`csw-prefix`, `csw-time-core`)\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jvmConfigure(_.enablePlugins(MaybeCoverage))\n  .jsSettings(jsTestArg)\n  .settings(fork := false)\n  .settings(libraryDependencies ++= Dependencies.AlarmModels.value)\n\nlazy val `csw-alarm-api` = project\n  .in(file(\"csw-alarm/csw-alarm-api\"))\n  .dependsOn(`csw-alarm-models`.jvm)\n  .enablePlugins(GenJavadocPlugin)\n  .settings(libraryDependencies ++= Dependencies.AlarmApi.value)\n\nlazy val `csw-alarm-client` = project\n  .in(file(\"csw-alarm/csw-alarm-client\"))\n  .dependsOn(\n    `csw-alarm-api`,\n    `csw-location-api`.jvm,\n    `csw-logging-client`,\n    `romaine`,\n    `csw-logging-client`  % \"test->test\",\n    `csw-commons`         % \"test->test\",\n    `csw-location-server` % \"test->compile;test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.AlarmClient.value)\n\nlazy val `csw-alarm-cli` = project\n  .in(file(\"csw-alarm/csw-alarm-cli\"))\n  .dependsOn(\n    `csw-alarm-client`,\n    `csw-config-client`,\n    `csw-location-client`,\n    `csw-location-server` % \"test->test\",\n    `csw-config-server`   % \"test->test\",\n    `csw-commons`         % \"test->test\"\n  )\n  .enablePlugins(CswBuildInfo, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.AlarmCli.value)\n\n/* ================= Time Service ============== */\n\nlazy val `csw-time` = project\n  .in(file(\"csw-time\"))\n  .aggregate(\n    `csw-time-clock`.jvm,\n    `csw-time-clock`.js,\n    `csw-time-core`.jvm,\n    `csw-time-core`.js,\n    `csw-time-scheduler`\n  )\n  .settings(\n    test / aggregate := !sys.props.contains(\"disableTimeTests\")\n  )\n\nlazy val `csw-time-clock` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Dummy)\n  .in(file(\"csw-time/csw-time-clock\"))\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jvmSettings(libraryDependencies ++= Dependencies.TimeClockJvm.value)\n  .jsSettings(libraryDependencies += Libs.`scala-java-time`.value)\n  .jsSettings(jsTestArg)\n  .settings(fork := false)\n\nlazy val `csw-time-core` = crossProject(JSPlatform, JVMPlatform)\n  .crossType(CrossType.Full)\n  .in(file(\"csw-time/csw-time-core\"))\n  .dependsOn(`csw-time-clock`)\n  .jvmConfigure(_.enablePlugins(GenJavadocPlugin))\n  .jsSettings(jsTestArg)\n  .jvmSettings(libraryDependencies += Libs.`junit4-interface` % Test)\n  .settings(\n    libraryDependencies += Libs.`scalatest`.value % Test,\n    fork                                         := false\n  )\n\nlazy val `csw-time-scheduler` = project\n  .in(file(\"csw-time/csw-time-scheduler\"))\n  .dependsOn(\n    `csw-time-core`.jvm % \"compile->compile;test->test\",\n    `csw-logging-client`,\n    `csw-commons` % \"test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.TimeScheduler.value)\n\nlazy val `csw-testkit` = project\n  .dependsOn(\n    `csw-location-server`,\n    `csw-config-server`,\n    `csw-database`,\n    `csw-framework`,\n    `csw-commons` % \"test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin)\n  .settings(\n    libraryDependencies ++= Dependencies.Testkit.value\n  )\n\n/* ================= Database Service ============== */\n\nlazy val `csw-database` = project\n  .dependsOn(\n    `csw-location-api`.jvm,\n    `csw-commons`         % \"test->test\",\n    `csw-location-server` % \"test->compile;test->test\"\n  )\n  .enablePlugins(GenJavadocPlugin, MaybeCoverage)\n  .settings(libraryDependencies ++= Dependencies.DatabaseClient.value)\n\n/* =============== Common Utilities ============ */\nlazy val `csw-network-utils` = project\n  .enablePlugins(MaybeCoverage)\n  .settings(\n    libraryDependencies ++= Dependencies.NetworkUtils.value\n  )\n\nlazy val `csw-commons` = project\n  .settings(\n    libraryDependencies ++= Dependencies.Commons.value\n  )\n\n/* ==== Lettuce(Redis Driver) Scala Wrapper ==== */\nlazy val `romaine` = project\n  .settings(\n    libraryDependencies ++= Dependencies.Romaine.value\n  )\n\n/* ================= Paradox Docs ============== */\nlazy val docs = project\n  .enablePlugins(NoPublish, ParadoxMaterialSitePlugin)\n  .settings(\n    paradoxRoots := List(\n      \"index.html\",\n      \"services/aas/core-concepts-and-terms.html\",\n      \"migration_guide/migration_guide_1.0.0_to_2.0.0/prefix.html\",\n      \"migration_guide/migration_guide_1.0.0_to_2.0.0/commandService.html\",\n      \"services/aas/csw-aas-http.html\",\n      \"services/aas/csw-aas-installed.html\",\n      \"technical/aas/csw-aas-http.html\",\n      \"technical/aas/csw-aas-installed.html\",\n      \"technical/location/location-agent.html\",\n      \"technical/location/location-api.html\",\n      \"technical/location/location-client.html\",\n      \"technical/location/location-server.html\"\n    )\n  )\n/* =================== Examples ================ */\nlazy val examples = project\n  .dependsOn(\n    `csw-location-server`,\n    `csw-config-client`,\n    `csw-aas-http`,\n    `csw-logging-client` % \"compile->compile;test->test\",\n    `csw-params`.jvm,\n    `csw-database`,\n    `csw-framework`,\n    `csw-aas-installed`,\n    `csw-location-client`,\n    `csw-time-scheduler`,\n    `csw-time-core`.jvm,\n    `csw-testkit`       % \"test->compile\",\n    `csw-config-server` % \"test->test\"\n  )\n  .enablePlugins(CswBuildInfo)\n  .settings(\n    libraryDependencies ++= Dependencies.Examples.value,\n    scalacOptions ++= Seq(\"-Xlint:-unused,-inaccessible\", \"-Ywarn-dead-code:false\")\n  )\n\n/* ================ Jmh Benchmarks ============== */\nlazy val `csw-benchmark` = project\n  .dependsOn(\n    `csw-logging-client`,\n    `csw-params`.jvm,\n    `csw-command-client`,\n    `csw-time-scheduler`,\n    `csw-location-server` % \"compile->test\",\n    `csw-framework`       % \"compile->compile;test->test\"\n  )\n  .enablePlugins(NoPublish, JmhPlugin)\n  .settings(\n    libraryDependencies ++= Dependencies.Benchmark.value\n  )\n\n/* ================ Integration Tests ============= */\nlazy val integration = project\n  .dependsOn(\n    `csw-location-server`,\n    `csw-command-client`,\n    `csw-location-agent`,\n    `csw-network-utils`,\n    `csw-aas-installed`,\n    `csw-config-cli`,\n    `csw-event-api`,\n    `csw-event-cli`,\n    `csw-framework`     % \"multi-jvm->test\",\n    `csw-commons`       % \"multi-jvm->test\",\n    `csw-config-server` % \"multi-jvm->test\"\n  )\n  .enablePlugins(AutoMultiJvm, CswBuildInfo)\n  .settings(\n    libraryDependencies ++= Dependencies.Integration.value\n  )\n\n// ================================================\n/* ===================== Auth ================== */\n// ================================================\nlazy val `csw-aas` = project\n  .in(file(\"csw-aas\"))\n  .aggregate(\n    `csw-aas-core`,\n    `csw-aas-http`,\n    `csw-aas-installed`\n  )\n\nlazy val `csw-aas-core` = project\n  .in(file(\"csw-aas/csw-aas-core\"))\n  .dependsOn(`csw-logging-client`, `csw-location-api`.jvm)\n  .settings(\n    libraryDependencies ++= Dependencies.CswAasCore.value\n  )\n\nlazy val `csw-aas-http` = project\n  .in(file(\"csw-aas/csw-aas-http\"))\n  .dependsOn(\n    `csw-aas-core`,\n    `csw-commons` % \"test->test\"\n  )\n  .settings(\n    libraryDependencies ++= Dependencies.AuthAkkaHttpAdapter.value\n  )\n\nlazy val `csw-aas-installed` = project\n  .in(file(\"csw-aas/csw-aas-installed\"))\n  .dependsOn(`csw-aas-core`, `csw-location-client` % \"test->compile\")\n  .settings(\n    libraryDependencies ++= Dependencies.CswInstalledAdapter.value\n  )\n\nlazy val `csw-services` = project\n  .in(file(\"csw-services\"))\n  .enablePlugins(CswBuildInfo)\n  .dependsOn(`csw-location-server`, `csw-config-server`, `csw-location-agent`, `csw-commons`)\n  .settings(\n    libraryDependencies ++= Dependencies.CswServices.value\n  )\n"
        },
        "database": "Redis",
        "build_system": "sbt",
        "config_files": {
            ".env": "TAG_ID=0.1.0-SNAPSHOT\nSUBNET=172.28.0.0/16\nSEED_IP=172.28.1.1\n\nCLUSTER_PORT=5552\nLOCATION_SERVER_PORT=7654\nADMIN_PORT=7878\n\nCONFIG_PORT=5000\n\nEVENT_MASTER_PORT=6379\nEVENT_SLAVE_PORT=6378\nALARM_MASTER_PORT=7379\nALARM_SLAVE_PORT=7378\nSENTINEL_PORT=26379",
            "docker-compose.yml": "version: '3.3'\n\nnetworks:\n  csw_net:\n    ipam:\n      driver: default\n      config:\n      - subnet: ${SUBNET}\n\nservices:\n  # ========== CSW Services ==========\n  seed:\n    image: csw-location:${TAG_ID}\n    ports:\n      - ${CLUSTER_PORT}:${CLUSTER_PORT}\n      - ${LOCATION_SERVER_PORT}:${LOCATION_SERVER_PORT}\n      - ${ADMIN_PORT}:${ADMIN_PORT}\n    command:\n      - \"-DCLUSTER_SEEDS=${SEED_IP}:${CLUSTER_PORT}\"\n      - \"--clusterPort=${CLUSTER_PORT}\"\n    networks:\n      csw_net:\n        ipv4_address: ${SEED_IP}\n\n  config:\n    image: csw-config-server:${TAG_ID}\n    ports:\n      - ${CONFIG_PORT}:${CONFIG_PORT}\n    command:\n      - \"-DCLUSTER_SEEDS=${SEED_IP}:${CLUSTER_PORT}\"\n      - \"--initRepo\"\n    networks:\n      - csw_net\n    depends_on:\n      - seed\n\n  location-agent:\n    image: csw-location-agent:${TAG_ID}\n    command:\n      - \"-DCLUSTER_SEEDS=${SEED_IP}:${CLUSTER_PORT}\"\n      - \"--name=EventServer,AlarmServer\"\n      - \"--command=sleep 100000\"\n      - \"--port=${SENTINEL_PORT}\"\n    networks:\n      - csw_net\n    depends_on:\n      - sentinel\n\n  # ========== Sentinel Setup ==========\n  event_master:\n    image: redis:latest\n    ports:\n      - ${EVENT_MASTER_PORT}:${EVENT_MASTER_PORT}\n    command: [\"redis-server\", \"--port\", \"${EVENT_MASTER_PORT}\", \"--notify-keyspace-events\", \"K$$x\", \"--protected-mode\", \"no\"]\n    networks:\n      - csw_net\n\n  event_slave:\n    image: redis:latest\n    ports:\n      - ${EVENT_SLAVE_PORT}:${EVENT_SLAVE_PORT}\n    command: [\"redis-server\", \"--port\", \"${EVENT_SLAVE_PORT}\", \"--notify-keyspace-events\", \"K$$x\", \"--protected-mode\", \"no\"]\n    networks:\n      - csw_net\n    depends_on:\n      - event_master\n\n  alarm_master:\n    image: redis:latest\n    ports:\n      - ${ALARM_MASTER_PORT}:${ALARM_MASTER_PORT}\n    command: [\"redis-server\", \"--port\", \"${ALARM_MASTER_PORT}\", \"--notify-keyspace-events\", \"K$$x\", \"--protected-mode\", \"no\"]\n    networks:\n      - csw_net\n\n  alarm_slave:\n    image: redis:latest\n    ports:\n      - ${ALARM_SLAVE_PORT}:${ALARM_SLAVE_PORT}\n    command: [\"redis-server\", \"--port\", \"${ALARM_SLAVE_PORT}\", \"--notify-keyspace-events\", \"K$$x\", \"--protected-mode\", \"no\"]\n    networks:\n      - csw_net\n    depends_on:\n      - alarm_master\n\n  sentinel:\n    image: redis:latest\n    ports:\n      - ${SENTINEL_PORT}:${SENTINEL_PORT}\n    volumes:\n      - \"./scripts/conf:/data/conf\"\n    command: redis-sentinel /data/conf/redis_sentinel/sentinel.conf\n    networks:\n      - csw_net\n    depends_on:\n      - event_master\n      - alarm_master\n",
            "scripts/logging_aggregator/dev/logstash/Dockerfile": "ARG ELK_VERSION\n\n# https://github.com/elastic/logstash-docker\nFROM docker.elastic.co/logstash/logstash:${ELK_VERSION}\n\n# Add your logstash plugins setup here\n# Example: RUN logstash-plugin install logstash-filter-json\nRUN logstash-plugin install logstash-input-beats\nRUN logstash-plugin install logstash-filter-json\nRUN logstash-plugin install logstash-filter-kv\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": [
            "config"
        ]
    }
}