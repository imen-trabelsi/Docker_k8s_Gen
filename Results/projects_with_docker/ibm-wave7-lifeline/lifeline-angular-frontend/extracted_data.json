{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n\t<modelVersion>4.0.0</modelVersion>\n\t\n\t<groupId>com.stackroute</groupId>\n\t<artifactId>ibm-wave7-lifeline</artifactId>\n\t<version>1.0.0</version>\n\t<packaging>pom</packaging>\n\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.1.3.RELEASE</version>\n\t\t <relativePath/> <!--lookup parent from repository -->\n\t</parent>\n\n\t<properties>\n\t\t<spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<java.version>11</java.version>\n\t\t<maven.compiler.source>${java.version}</maven.compiler.source>\n\t\t<maven.compiler.target>${java.version}</maven.compiler.target>\n\t</properties>\n\n\t<modules>\n\t\t<module>config-server</module>\n\t\t<module>eureka-server</module>\n\t\t<module>zuul-api</module>\n\t\t<module>donor-profile-service</module>\n\t\t<module>login-service</module>\n\t\t<module>recepient-profile-service</module>\n\t\t<module>chat-service</module>\n\t\t<module>reportservice</module>\n\t\t<module>search-service</module>\n\t</modules>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.javassist</groupId>\n\t\t\t<artifactId>javassist</artifactId>\n\t\t\t<version>3.23.1-GA</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.9.8</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t<version>2.2.11</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.sun.xml.bind</groupId>\n\t\t\t<artifactId>jaxb-core</artifactId>\n\t\t\t<version>2.2.11</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.sun.xml.bind</groupId>\n\t\t\t<artifactId>jaxb-impl</artifactId>\n\t\t\t<version>2.2.11</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.activation</groupId>\n\t\t\t<artifactId>activation</artifactId>\n\t\t\t<version>1.1.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>4.12</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.kafka</groupId>\n\t\t\t<artifactId>spring-kafka</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t\t<version>3.8.1</version>\n\t\t</dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-autoconfigure</artifactId>\n        </dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-annotations</artifactId>\n\t\t\t<version>2.9.0</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.bouncycastle</groupId>\n\t\t\t<artifactId>bcprov-jdk15on</artifactId>\n\t\t\t<version>1.60</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.springfox</groupId>\n\t\t\t<artifactId>springfox-swagger2</artifactId>\n\t\t\t<version>2.9.2</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.persistence</groupId>\n\t\t\t<artifactId>javax.persistence-api</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.data</groupId>\n\t\t\t<artifactId>spring-data-mongodb</artifactId>\n\t\t\t<version>2.1.10.RELEASE</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>5.1.9.RELEASE</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.jetbrains</groupId>\n\t\t\t<artifactId>annotations</artifactId>\n\t\t\t<version>17.0.0</version>\n\t\t\t<scope>compile</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.validation</groupId>\n\t\t\t<artifactId>validation-api</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\n\t\t\t\t<version>${spring-cloud.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-clean-plugin</artifactId>\n\t\t\t\t<version>3.1.0</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>auto-clean</id>\n\t\t\t\t\t\t<phase>initialize</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>\n\t\t\t\t\t\t\t\tclean\n\t\t\t\t\t\t\t</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n\t\t\t\t<version>2.22.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<argLine>${surefireArgLine}</argLine>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-site-plugin</artifactId>\n\t\t\t\t<version>3.7.1</version>\n\t\t\t</plugin>\n\n\t\t\t<!--Maven Failsafe Plugin for Integration Tests-->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-failsafe-plugin</artifactId>\n\t\t\t\t<version>3.0.0-M2</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<argLine>${failsafeArgLine}</argLine>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>integration-test</goal>\n\t\t\t\t\t\t\t<goal>verify</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\n\n\t\t\t<!--\n            Code Coverage using Jacoco\n            ***\n            ***Refer https://www.petrikainulainen.net/programming/maven/creating-code-coverage-reports-for-unit-and-integration-tests-with-the-jacoco-maven-plugin/\n            ***\n            -->\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.jacoco</groupId>\n\t\t\t\t<artifactId>jacoco-maven-plugin</artifactId>\n\t\t\t\t<version>0.8.2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<!--\n                        Prepares the property pointing to the JaCoCo runtime agent which\n                        is passed as VM argument when Maven the Surefire plugin is executed.\n                    -->\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pre-unit-test</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>prepare-agent</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<!-- Sets the path to the file which contains the execution data. -->\n\t\t\t\t\t\t\t<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>\n\t\t\t\t\t\t\t<!--\n                                Sets the name of the property containing the settings\n                                for JaCoCo runtime agent.\n                            -->\n\t\t\t\t\t\t\t<propertyName>surefireArgLine</propertyName>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<!--\n                        Ensures that the code coverage report for unit tests is created after\n                        unit tests have been run.\n                    -->\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>post-unit-test</id>\n\t\t\t\t\t\t<phase>test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>report</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<!-- Sets the path to the file which contains the execution data. -->\n\t\t\t\t\t\t\t<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>\n\t\t\t\t\t\t\t<!-- Sets the output directory for the code coverage report. -->\n\t\t\t\t\t\t\t<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pre-integration-test</id>\n\t\t\t\t\t\t<phase>pre-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>prepare-agent</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<!-- Sets the path to the file which contains the execution data. -->\n\t\t\t\t\t\t\t<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>\n\t\t\t\t\t\t\t<!--\n                                Sets the name of the property containing the settings\n                                for JaCoCo runtime agent.\n                            -->\n\t\t\t\t\t\t\t<propertyName>failsafeArgLine</propertyName>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<!--\n                        Ensures that the code coverage report for integration tests after\n                        integration tests have been run.\n                    -->\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>post-integration-test</id>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>report</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<!-- Sets the path to the file which contains the execution data. -->\n\t\t\t\t\t\t\t<dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>\n\t\t\t\t\t\t\t<!-- Sets the output directory for the code coverage report. -->\n\t\t\t\t\t\t\t<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>com.github.spotbugs</groupId>\n\t\t\t\t<artifactId>spotbugs-maven-plugin</artifactId>\n\t\t\t\t<version>3.1.9</version>\n\t\t\t</plugin>\n\n\t\t</plugins>\n\t</build>\n\t<reporting>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-surefire-report-plugin</artifactId>\n\t\t\t\t<version>2.22.0</version>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>com.github.spotbugs</groupId>\n\t\t\t\t<artifactId>spotbugs-maven-plugin</artifactId>\n\t\t\t\t<version>3.1.9</version>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</reporting>\n\n</project>\n\n"
        },
        "database": "MongoDB",
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3'\n\nservices:\n  eureka-server:\n    build: eureka-server/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: eureka-server\n    ports:\n      - 8761:8761\n    healthcheck:\n      test: \"exit 0\"\n\n  config-service:\n    build: config-server/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: config-service\n    ports:\n      - 8888:8888\n    healthcheck:\n      test: \"exit 0\"\n\n  zuul-api:\n    build: zuul-api/\n    depends_on:\n      - eureka-server\n      - config-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: zuul-api\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: \"exit 0\"\n\n  zookeeper:\n    image: wurstmeister/zookeeper\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 8098:2181\n    healthcheck:\n      test: \"exit 0\"\n\n  kafka:\n    image: wurstmeister/kafka\n    network_mode: \"host\"\n    hostname: localhost\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_CREATE_TOPICS: \"DonorRegistration, RecepientRegistration,\"\n      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 50000\n    restart: always\n    ports:\n      - 8099:9092\n    healthcheck:\n      test: \"exit 0\"\n\n  mongo:\n    image: mongo:latest\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 27017:27017\n    volumes:\n      - /DB/mongo:/data/db\n    healthcheck:\n      test: \"exit 0\"\n\n  neo4j:\n    image: neo4j:latest\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    environment: \n      - NEO4J_AUTH=neo4j/lifeline\n    ports:\n      - 7474:7474\n      - 7687:7687\n    volumes:\n      - /DB/neo4j/data:/data\n      - /DB/neo4j/import:/import\n    healthcheck:\n      test: \"exit 0\"\n\n  mysql:\n    image: mysql:latest\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: Root@123\n      MYSQL_DATABASE: logindb\n      MYSQL_PASSWORD: Root@123\n      MYSQL_USER: root\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 8097:8097\n    volumes:\n      - /DB/mysql:/var/lib/mysql\n    healthcheck:\n      test: \"exit 0\"\n\n  donor-profile-service:\n    build: donor-profile-service/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    image: donor-profile-service\n    hostname: localhost\n    ports:\n      - 8081:8081\n    healthcheck:\n      test: \"exit 0\"\n\n  recepient-profile-service:\n    build: recepient-profile-service/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    image: recepient-profile-service\n    hostname: localhost\n    ports:\n      - 8083:8083\n    healthcheck:\n      test: \"exit 0\"\n\n  login-service:\n    build: login-service/\n    depends_on:\n      - mysql\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: login-service\n    ports:\n      - 8082:8082\n    healthcheck:\n      test: \"exit 0\"\n\n  report-service:\n    build: reportservice/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n      - recepient-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: report-service\n    ports:\n      - 8016:8016\n    healthcheck:\n      test: \"exit 0\"\n  \n  chat-service:\n    build: chat-service/\n    depends_on:\n      - neo4j\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n      - recepient-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: chat-service\n    ports:\n      - 8084:8084\n    healthcheck:\n      test: \"exit 0\"\n\n  search-service:\n    build: search-service/\n    depends_on:\n      - neo4j\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: search-service\n    ports:\n      - 8085:8085\n    healthcheck:\n      test: \"exit 0\"\n\n  lifeline-frontend:\n    build: lifeline-angular-frontend/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 4200:4200\n    healthcheck:\n      test: \"exit 0\"\n",
            "lifeline-angular-frontend/Dockerfile": "# base image\nFROM node:12.2.0\n\n# install chrome for protractor tests\nRUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\nRUN sh -c 'echo \"deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google.list'\nRUN apt-get update && apt-get install -yq google-chrome-stable\n\n# set working directory\nWORKDIR /app\n\n# add `/app/node_modules/.bin` to $PATH\nENV PATH /app/node_modules/.bin:$PATH\n\n# install and cache app dependencies\nCOPY /package.json /app/package.json\nRUN npm install\nRUN npm install -g @angular/cli@8.2.2\nRUN npm install jspdf --save\n\n# add app\nCOPY . /app\n\n# start app\nCMD ng serve --host 0.0.0.0 --publicHost lifeline.stackroute.io\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}