{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>com.stackroute</groupId>\n\t\t<artifactId>ibm-wave7-lifeline</artifactId>\n\t\t<version>1.0.0</version>\n\t</parent>\n\t<groupId>com.stackroute</groupId>\n\t<artifactId>config-server</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>config-server</name>\n\t<description>Config Server for services</description>\n\n\t<properties>\n\t\t<java.version>11</java.version>\n\t\t<spring-cloud.version>Greenwich.SR1</spring-cloud.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-config-server</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->\n\t\t<dependency>\n\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t<version>2.9.8</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n\t\t\t<version>2.1.1.RELEASE</version>\n\t\t</dependency>\n\n\t</dependencies>\n\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\n\t\t\t\t<version>${spring-cloud.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3'\n\nservices:\n  eureka-server:\n    build: eureka-server/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: eureka-server\n    ports:\n      - 8761:8761\n    healthcheck:\n      test: \"exit 0\"\n\n  config-service:\n    build: config-server/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: config-service\n    ports:\n      - 8888:8888\n    healthcheck:\n      test: \"exit 0\"\n\n  zuul-api:\n    build: zuul-api/\n    depends_on:\n      - eureka-server\n      - config-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: zuul-api\n    ports:\n      - 8080:8080\n    healthcheck:\n      test: \"exit 0\"\n\n  zookeeper:\n    image: wurstmeister/zookeeper\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 8098:2181\n    healthcheck:\n      test: \"exit 0\"\n\n  kafka:\n    image: wurstmeister/kafka\n    network_mode: \"host\"\n    hostname: localhost\n    depends_on:\n      - zookeeper\n    environment:\n      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_CREATE_TOPICS: \"DonorRegistration, RecepientRegistration,\"\n      KAFKA_ZOOKEEPER_CONNECTION_TIMEOUT_MS: 50000\n    restart: always\n    ports:\n      - 8099:9092\n    healthcheck:\n      test: \"exit 0\"\n\n  mongo:\n    image: mongo:latest\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 27017:27017\n    volumes:\n      - /DB/mongo:/data/db\n    healthcheck:\n      test: \"exit 0\"\n\n  neo4j:\n    image: neo4j:latest\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    environment: \n      - NEO4J_AUTH=neo4j/lifeline\n    ports:\n      - 7474:7474\n      - 7687:7687\n    volumes:\n      - /DB/neo4j/data:/data\n      - /DB/neo4j/import:/import\n    healthcheck:\n      test: \"exit 0\"\n\n  mysql:\n    image: mysql:latest\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: Root@123\n      MYSQL_DATABASE: logindb\n      MYSQL_PASSWORD: Root@123\n      MYSQL_USER: root\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 8097:8097\n    volumes:\n      - /DB/mysql:/var/lib/mysql\n    healthcheck:\n      test: \"exit 0\"\n\n  donor-profile-service:\n    build: donor-profile-service/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    image: donor-profile-service\n    hostname: localhost\n    ports:\n      - 8081:8081\n    healthcheck:\n      test: \"exit 0\"\n\n  recepient-profile-service:\n    build: recepient-profile-service/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    image: recepient-profile-service\n    hostname: localhost\n    ports:\n      - 8083:8083\n    healthcheck:\n      test: \"exit 0\"\n\n  login-service:\n    build: login-service/\n    depends_on:\n      - mysql\n      - eureka-server\n      - config-service\n      - zuul-api\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: login-service\n    ports:\n      - 8082:8082\n    healthcheck:\n      test: \"exit 0\"\n\n  report-service:\n    build: reportservice/\n    depends_on:\n      - mongo\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n      - recepient-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: report-service\n    ports:\n      - 8016:8016\n    healthcheck:\n      test: \"exit 0\"\n  \n  chat-service:\n    build: chat-service/\n    depends_on:\n      - neo4j\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n      - recepient-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: chat-service\n    ports:\n      - 8084:8084\n    healthcheck:\n      test: \"exit 0\"\n\n  search-service:\n    build: search-service/\n    depends_on:\n      - neo4j\n      - eureka-server\n      - config-service\n      - zuul-api\n      - donor-profile-service\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    image: search-service\n    ports:\n      - 8085:8085\n    healthcheck:\n      test: \"exit 0\"\n\n  lifeline-frontend:\n    build: lifeline-angular-frontend/\n    restart: always\n    network_mode: \"host\"\n    hostname: localhost\n    ports:\n      - 4200:4200\n    healthcheck:\n      test: \"exit 0\"\n",
            "config-server/Dockerfile": "FROM openjdk:11\n\nADD ./target/config-server-0.0.1-SNAPSHOT.jar /usr/src/config-server-0.0.1-SNAPSHOT.jar\n\nWORKDIR usr/src\n\nENTRYPOINT [\"java\",\"-jar\", \"config-server-0.0.1-SNAPSHOT.jar\"]"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}