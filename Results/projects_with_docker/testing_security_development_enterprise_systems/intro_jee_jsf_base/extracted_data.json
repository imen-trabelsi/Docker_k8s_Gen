{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <artifactId>jsf-base</artifactId>\n\n    <!-- Note that here we want to build a WAR and not a JAR file -->\n    <packaging>war</packaging>\n\n    <parent>\n        <groupId>org.tsdes.intro.jee.jsf</groupId>\n        <artifactId>jsf</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n\n\n    <build>\n        <finalName>base</finalName>\n    </build>\n\n</project>"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "intro/jee/jsf/base/Dockerfile": "# Specify which OS image to run.\n# In our case, we are using an OS image with WildFly started\n# as a daemon/service\nFROM jboss/wildfly:18.0.1.Final\n\n\n# Copy the generated WAR from \"target\" folder into the Docker image,\n# in the folder where Widlfly is expecting to find installed WAR files\nCOPY target/base.war /opt/jboss/wildfly/standalone/deployments/\n\n\n# No need of CMD here, as WidlFly is automatically started as a service"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}