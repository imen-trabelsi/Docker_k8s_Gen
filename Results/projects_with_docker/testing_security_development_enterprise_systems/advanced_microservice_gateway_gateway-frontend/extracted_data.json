{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>org.tsdes</groupId>\n    <artifactId>tsdes</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <packaging>pom</packaging>\n    <name>Root of TSDES</name>\n\n    <modules>\n        <module>misc</module>\n        <module>intro</module>\n        <module>advanced</module>\n    </modules>\n\n    <!--\n        Maven phases:\n        https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference\n\n        Main ones:\n\n        *clean*\n        compile\n        process-test-classes\n        test\n        package\n        pre-integration-test\n        integration-test\n        post-integration-test\n        verify\n        install\n        deploy\n\n        apart from *clean*, when executing one of those phases (eg \"mvn test\"), all previous\n        phases are executed as well.\n\n        clean: delete everything in the \"target\" folders\n    -->\n\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <fs>${file.separator}</fs>\n        <version.java>11</version.java>\n        <!-- FIXME: 2.3.6 breaks... but anyway jump directly to 2.4.x once Spring Cloud supports it-->\n        <version.springboot>2.3.5.RELEASE</version.springboot>\n        <version.junit>5.7.0</version.junit>\n        <version.junit.platform>1.5.2</version.junit.platform>\n        <version.jacoco>0.8.5</version.jacoco>\n        <!--  FIXME version 1.4.200 breaks tests, eg in JPA-JPQL  -->\n        <version.h2>1.4.197</version.h2>\n        <version.postgres>42.1.4</version.postgres>\n        <version.resteasy>3.1.3.Final</version.resteasy>\n        <version.testcontainers>1.15.1</version.testcontainers>\n        <version.selenium>3.141.59</version.selenium>\n        <!--\n            TODO: cannot update to 4.3+ as conflicts of major versioning\n            of Groovy runtime\n        -->\n        <version.restassured>4.2.0</version.restassured>\n        <version.surefire-failsafe>3.0.0-M4</version.surefire-failsafe>\n    </properties>\n\n\n    <dependencies>\n        <!--\n            With this code here, we are adding these dependencies automatically\n            to all sub-modules.\n            Note that <version> and <scope> are declared inside  <dependencyManagement>\n        -->\n        <!--\n            Adding Jupiter to all modules, because we practically always have test cases.\n            Plus, JUnit breaks name convention on dependencies, and future versions\n            after Jupiter will likely require changing the dependency\n        -->\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter</artifactId>\n        </dependency>\n    </dependencies>\n\n    <!--\n    Here we define all third-party dependencies we need in the sub-modules, so that we\n    do not have to copy&paste each time the <version> and <scope> tags\n\n    To check for new versions, use:\n\n    mvn versions:display-dependency-updates -DprocessDependencyManagement=false\n    -->\n    <dependencyManagement>\n        <dependencies>\n\n            <!-- Our own modules -->\n            <dependency>\n                <groupId>org.tsdes.misc</groupId>\n                <artifactId>test-utils</artifactId>\n                <version>${project.version}</version>\n                <scope>test</scope>\n            </dependency>\n\n            <!-- SpringBoot BOM -->\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-parent</artifactId>\n                <version>${version.springboot}</version>\n                <scope>import</scope>\n                <type>pom</type>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <version>${version.springboot}</version>\n                <scope>test</scope>\n                <!-- Exclude JUnit 4, which is added by default-->\n                <exclusions>\n                    <exclusion>\n                        <groupId>junit</groupId>\n                        <artifactId>junit</artifactId>\n                    </exclusion>\n                    <exclusion>\n                        <groupId>org.junit.vintage</groupId>\n                        <artifactId>junit-vintage-engine</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n\n            <!-- Database -->\n            <dependency>\n                <groupId>com.h2database</groupId>\n                <artifactId>h2</artifactId>\n                <version>${version.h2}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.postgresql</groupId>\n                <artifactId>postgresql</artifactId>\n                <version>${version.postgres}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.jooq</groupId>\n                <artifactId>jooq</artifactId>\n                <version>3.12.3</version>\n            </dependency>\n\n\n            <!-- test -->\n            <dependency>\n                <groupId>org.junit.jupiter</groupId>\n                <artifactId>junit-jupiter</artifactId>\n                <version>${version.junit}</version>\n                <scope>test</scope>\n            </dependency>\n            <!--\n                This is needed for some libraries that do not support\n                JUnit 5 yet, like Arquillian:\n                https://github.com/arquillian/arquillian-core/issues/137\n\n                TODO: remove once Arquillian is supported\n              -->\n            <dependency>\n                <groupId>org.junit.vintage</groupId>\n                <artifactId>junit-vintage-engine</artifactId>\n                <version>${version.junit}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- to test REST APIs -->\n                <groupId>io.rest-assured</groupId>\n                <artifactId>rest-assured</artifactId>\n                <version>${version.restassured}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.rest-assured</groupId>\n                <artifactId>json-path</artifactId>\n                <version>${version.restassured}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>io.rest-assured</groupId>\n                <artifactId>xml-path</artifactId>\n                <version>${version.restassured}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- to mock web services -->\n                <groupId>com.github.tomakehurst</groupId>\n                <artifactId>wiremock-standalone</artifactId>\n                <version>2.27.2</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- used to control a browser for system testing -->\n                <groupId>org.seleniumhq.selenium</groupId>\n                <artifactId>selenium-java</artifactId>\n                <version>${version.selenium}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- used to control a browser for system testing -->\n                <groupId>org.seleniumhq.selenium</groupId>\n                <artifactId>selenium-api</artifactId>\n                <version>${version.selenium}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- used to control a browser for system testing -->\n                <groupId>org.seleniumhq.selenium</groupId>\n                <artifactId>selenium-chrome-driver</artifactId>\n                <version>${version.selenium}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- used to control a browser for system testing -->\n                <groupId>org.seleniumhq.selenium</groupId>\n                <artifactId>selenium-remote-driver</artifactId>\n                <version>${version.selenium}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- used to control a browser for system testing -->\n                <groupId>org.seleniumhq.selenium</groupId>\n                <artifactId>selenium-support</artifactId>\n                <version>${version.selenium}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- for code coverage -->\n                <groupId>org.jacoco</groupId>\n                <artifactId>org.jacoco.core</artifactId>\n                <version>${version.jacoco}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- To use Docker from tests -->\n                <groupId>org.testcontainers</groupId>\n                <artifactId>testcontainers</artifactId>\n                <version>${version.testcontainers}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- To support JUnit 5  -->\n                <groupId>org.testcontainers</groupId>\n                <artifactId>junit-jupiter</artifactId>\n                <version>${version.testcontainers}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.testcontainers</groupId>\n                <artifactId>selenium</artifactId>\n                <version>${version.testcontainers}</version>\n                <scope>test</scope>\n                <exclusions>\n                    <exclusion>\n                        <groupId>org.seleniumhq.selenium</groupId>\n                        <artifactId>selenium-remote-driver</artifactId>\n                    </exclusion>\n                </exclusions>\n            </dependency>\n            <dependency>\n                <!-- For handling waiting of asynchronous events -->\n                <groupId>org.awaitility</groupId>\n                <artifactId>awaitility</artifactId>\n                <version>4.0.3</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <!-- To mock/stub objects -->\n                <groupId>org.mockito</groupId>\n                <artifactId>mockito-core</artifactId>\n                <version>3.2.0</version>\n                <scope>test</scope>\n            </dependency>\n\n\n            <!-- Misc -->\n            <dependency>\n                <groupId>ch.qos.logback</groupId>\n                <artifactId>logback-classic</artifactId>\n                <version>1.2.3</version>\n            </dependency>\n            <dependency>\n                <groupId>org.slf4j</groupId>\n                <artifactId>jcl-over-slf4j</artifactId>\n                <version>1.7.25</version>\n            </dependency>\n            <dependency>\n                <groupId>com.google.guava</groupId>\n                <artifactId>guava</artifactId>\n                <version>28.1-jre</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.datatype</groupId>\n                <artifactId>jackson-datatype-jsr310</artifactId>\n                <version>2.11.1</version>\n            </dependency>\n            <dependency>\n                <groupId>com.fasterxml.jackson.dataformat</groupId>\n                <artifactId>jackson-dataformat-xml</artifactId>\n                <version>2.8.9</version>\n            </dependency>\n            <dependency>\n                <groupId>com.google.code.gson</groupId>\n                <artifactId>gson</artifactId>\n                <version>2.8.6</version>\n            </dependency>\n            <dependency>\n                <groupId>javax.xml.bind</groupId>\n                <artifactId>jaxb-api</artifactId>\n                <version>2.3.1</version>\n            </dependency>\n            <dependency>\n                <groupId>org.glassfish.jaxb</groupId>\n                <artifactId>jaxb-runtime</artifactId>\n                <version>2.3.1</version>\n            </dependency>\n            <dependency>\n                <groupId>commons-codec</groupId>\n                <artifactId>commons-codec</artifactId>\n                <version>1.13</version>\n            </dependency>\n            <dependency>\n                <groupId>commons-logging</groupId>\n                <artifactId>commons-logging</artifactId>\n                <version>1.2</version>\n            </dependency>\n            <dependency>\n                <groupId>org.jboss.resteasy</groupId>\n                <artifactId>resteasy-client</artifactId>\n                <version>${version.resteasy}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.jboss.resteasy</groupId>\n                <artifactId>resteasy-jackson-provider</artifactId>\n                <version>${version.resteasy}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.jboss.resteasy</groupId>\n                <artifactId>resteasy-jaxb-provider</artifactId>\n                <version>${version.resteasy}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.ow2.asm</groupId>\n                <artifactId>asm</artifactId>\n                <version>7.2</version>\n            </dependency>\n\n\n            <!-- for caching -->\n            <dependency>\n                <groupId>net.sf.ehcache</groupId>\n                <artifactId>ehcache</artifactId>\n                <version>2.10.6</version>\n            </dependency>\n            <!-- Looks like we cannot use new version, as HttpClient still rely on 2.x-->\n            <!--<dependency>-->\n            <!--<groupId>org.ehcache</groupId>-->\n            <!--<artifactId>ehcache</artifactId>-->\n            <!--<version>3.5.2</version>-->\n            <!--</dependency>-->\n            <dependency>\n                <groupId>org.apache.httpcomponents</groupId>\n                <artifactId>httpclient-cache</artifactId>\n                <version>4.5.12</version>\n            </dependency>\n\n\n        </dependencies>\n    </dependencyManagement>\n\n    <!--\n        Profiles enable you to have custom configurations only in some special occasions.\n\n        You can use \"-P <id>\" to activate a profile with the given <id>, eg\n\n        mvn verify -P <id>\n\n        To see all available profiles in a project (which could be declared in sub-modules),\n        user:\n\n        mvn help:all-profiles | grep \"Profile Id\"\n    -->\n    <profiles>\n    </profiles>\n\n\n    <build>\n\n        <!--\n            like dependencyManagement, this only defines which (and how) plugins to use.\n            to actually activate them, they need to be directly under <plugins> (without\n            the need to reset all their configurations).\n            Note: some plugins are default in Maven, like the compiler.\n            To see what actually executed, you can look at the logs.\n\n            WARNING: make sure that in your projects you do have the <version> tags\n            for your plugins. If you do not, Maven might silently ignore it...\n            this is very different from forgetting a <version> in an imported library,\n            as that would usually end up in a compilation error (as some needed classes/methods\n            would not be found on the classpath)\n        -->\n        <pluginManagement>\n            <plugins>\n\n                <!-- Built-in plugin used to compile Java code -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>3.8.1</version>\n                    <inherited>true</inherited>\n                    <configuration>\n                        <release>${version.java}</release>\n                    </configuration>\n                </plugin>\n\n                <!-- Built-in plugin used to execute unit tests -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-surefire-plugin</artifactId>\n                    <version>${version.surefire-failsafe}</version>\n                    <configuration>\n                        <forkCount>1</forkCount>\n                        <redirectTestOutputToFile>true</redirectTestOutputToFile>\n                        <rerunFailingTestsCount>3</rerunFailingTestsCount>\n                        <argLine>-Xms512m -Xmx2048m</argLine>\n                    </configuration>\n                </plugin>\n\n                <!-- this is needed to run integration tests -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-failsafe-plugin</artifactId>\n                    <version>${version.surefire-failsafe}</version>\n                    <configuration>\n                        <forkCount>1</forkCount>\n                        <redirectTestOutputToFile>true</redirectTestOutputToFile>\n                        <rerunFailingTestsCount>3</rerunFailingTestsCount>\n                        <argLine>-Xms512m -Xmx4096m</argLine>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>integration-test</goal>\n                                <goal>verify</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n\n                <plugin>\n                    <!-- Need to create self-executable uber/fat jars for SpringBoot -->\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                    <version>${version.springboot}</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>repackage</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n\n\n                <!--\n                    Avoid failing War generation if web.xml is missing, as we ll not\n                    use it in some example modules\n                -->\n                <plugin>\n                    <artifactId>maven-war-plugin</artifactId>\n                    <version>3.0.0</version>\n                    <configuration>\n                        <failOnMissingWebXml>false</failOnMissingWebXml>\n                    </configuration>\n                </plugin>\n\n                <!-- For running ANT tasks, like renaming files/folders -->\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-antrun-plugin</artifactId>\n                    <version>1.8</version>\n                </plugin>\n\n                <!--\n                    Used to calculate code-coverage of the tests\n                -->\n                <plugin>\n                    <groupId>org.jacoco</groupId>\n                    <artifactId>jacoco-maven-plugin</artifactId>\n                    <version>${version.jacoco}</version>\n                    <executions>\n                        <execution>\n                            <id>default-prepare-agent</id>\n                            <phase>initialize</phase>\n                            <goals>\n                                <goal>prepare-agent</goal>\n                            </goals>\n                        </execution>\n                        <execution>\n                            <id>default-report</id>\n                            <phase>prepare-package</phase>\n                            <goals>\n                                <goal>report</goal>\n                            </goals>\n                        </execution>\n                        <execution>\n                            <id>default-prepare-agent-integration</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>prepare-agent-integration</goal>\n                            </goals>\n                        </execution>\n                        <execution>\n                            <id>default-report-integration</id>\n                            <phase>verify</phase>\n                            <goals>\n                                <goal>report-integration</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <!-- For cloud deployment on Heroku -->\n                <plugin>\n                    <groupId>com.heroku.sdk</groupId>\n                    <artifactId>heroku-maven-plugin</artifactId>\n                    <version>2.0.2</version>\n                </plugin>\n                <!-- For scanning dependencies for known security issues -->\n                <plugin>\n                    <groupId>org.owasp</groupId>\n                    <artifactId>dependency-check-maven</artifactId>\n                    <version>5.3.1</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>check</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <!--  To execute external commands, like YARN -->\n                    <groupId>org.codehaus.mojo</groupId>\n                    <artifactId>exec-maven-plugin</artifactId>\n                    <version>1.6.0</version>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n</project>"
        },
        "database": "PostgreSQL",
        "build_system": "Maven",
        "config_files": {
            "advanced/microservice/gateway/docker-compose.yml": "version: '3.3'\n\nservices:\n\n  # The Spring Cloud Gateway will be the ONLY Docker instance\n  # that does open a port accessible from outside the\n  # Docker network.\n\n  scg:\n    build:\n      context: ./gateway-scg\n      dockerfile: Dockerfile\n    ports:\n      - \"80:8080\"\n    depends_on:\n      - discovery\n\n  discovery:\n    image: \"consul:1.8\"\n    environment:\n      - CONSUL_LOCAL_CONFIG={\"log_level\":\"info\"}\n\n\n  frontend:\n    build:\n      context: ./gateway-frontend\n      dockerfile: Dockerfile\n\n\n  # Note that here I am using a real database.\n  # Cannot use embedded H2 as done so far, because\n  # all the different instances of the replicated services\n  # need to work on the same data.\n  #\n  # All these replicated instances of \"service\" will use the\n  # same database.\n  # However, if we had other kinds of APIs here, each kind will\n  # need to use their own database.\n  postgres:\n    image: \"postgres:10\"\n    environment:\n      - POSTGRES_HOST_AUTH_METHOD=trust\n\n  service_0:\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - TSDES_SERVICE_ID=A\n    depends_on:\n      - scg\n      - postgres\n\n\n  service_1:\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - TSDES_SERVICE_ID=B\n    depends_on:\n      - scg\n      - postgres\n\n\n  service_2:\n    build:\n      context: ./gateway-service\n      dockerfile: Dockerfile\n    environment:\n      - TSDES_SERVICE_ID=C\n    depends_on:\n      - scg\n      - postgres\n\n\n",
            "advanced/microservice/gateway/gateway-frontend/Dockerfile": "FROM httpd:2.4\n\n# This Docker images does start an Apache Server that will expose\n# all the given static resources that are under a specific folder\n\n\nCOPY ./public-html/ /usr/local/apache2/htdocs/"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}