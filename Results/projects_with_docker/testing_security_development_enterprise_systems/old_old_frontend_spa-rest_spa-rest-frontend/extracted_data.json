{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>spa-rest-frontend</artifactId>\n    <packaging>jar</packaging>\n\n    <parent>\n        <groupId>org.tsdes.advanced.frontend.sparest</groupId>\n        <artifactId>spa-rest</artifactId>\n        <version>0.0.1-SNAPSHOT</version>\n    </parent>\n\n\n    <build>\n        <plugins>\n            <!--\n               Call NPM for Maven to build the bundle.js\n             -->\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>exec-maven-plugin</artifactId>\n                <version>1.6.0</version>\n                <executions>\n                    <!--\n                        Make sure to call following:\n                        npm install\n                        npm run build\n                    -->\n                    <execution>\n                        <id>npm install</id>\n                        <goals>\n                            <goal>exec</goal>\n                        </goals>\n                        <phase>generate-resources</phase>\n                        <configuration>\n                            <executable>npm</executable>\n                            <arguments>\n                                <argument>install</argument>\n                            </arguments>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>npm run build</id>\n                        <goals>\n                            <goal>exec</goal>\n                        </goals>\n                        <phase>generate-resources</phase>\n                        <configuration>\n                            <executable>npm</executable>\n                            <arguments>\n                                <argument>run</argument>\n                                <argument>build</argument>\n                            </arguments>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!--\n                 Make sure that, when we run \"mvn clean\", all the\n                files generated/downloaded by NPM are deleted\n              -->\n            <plugin>\n                <artifactId>maven-clean-plugin</artifactId>\n                <version>3.0.0</version>\n                <!--\n                    Even if files are under Git, best to be careful\n                    about deleting files.\n                    So, the deletion settings are done here, and not\n                    in the root pom file, as specific to this project,\n                    and \"clean\" plugin is on by default on all modules,\n                    ie we do not want to override general settings\n                  -->\n                <configuration>\n                    <filesets>\n                        <fileset>\n                            <directory>target</directory>\n                        </fileset>\n                        <fileset>\n                            <directory>node_modules</directory>\n                        </fileset>\n                        <fileset>\n                            <directory>public</directory>\n                            <includes>\n                                <include>**/bundle.js</include>\n                            </includes>\n                        </fileset>\n                    </filesets>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "old/old_frontend/spa-rest/docker-compose.yml": "# Useful commands:\n# docker-compose build\n# docker-compose up\n# docker-compose ps\n# docker-compose down\n\nversion: '3.7'\n\nservices:\n\n  frontend:\n    build:\n      context: ./spa-rest-frontend\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:8080\"\n\n  # Note that here I am using a real database, and not\n  # an embedded one like H2\n  postgres:\n    image: \"postgres:10\"\n\n  backend:\n     build:\n        context: ./spa-rest-backend\n        dockerfile: Dockerfile\n     depends_on:\n        - postgres\n     ports:\n        - \"8081:8081\"\n\n# Only needed if then you have other images joining later this network.\n# Otherwise, if not overriding the name, it might have a random component\n# in the name.\nnetworks:\n  default:\n    name: spa-rest-network",
            "old/old_frontend/spa-rest/spa-rest-frontend/Dockerfile": "FROM node:10-alpine\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nRUN npm run build\n\nCMD npm run start"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}