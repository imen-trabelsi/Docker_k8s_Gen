{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[project]\nname    = \"HASH\"\nversion = \"0.0.0+private\"\n\n[tool.rye]\nvirtual = true\n\n# an empty key is here by no mistake, it enables workspaces\n# and enables automatic detection of workspace members\n# see: https://rye.astral.sh/guide/pyproject/#toolryeworkspace\n[tool.rye.workspace]\n\n[tool.ruff]\ntarget-version = \"py311\"\nfix            = true    # when linting always include safe fixes\n\n[tool.ruff.lint]\npreview = true\nselect = [\"ALL\"]\nignore = [\n    \"D203\",    # this conflicts with `D211`\n    \"D213\",    # this conflicts with `D212`\n    \"D401\",    # Relates to PEP-257 but also conflicts with Google Python Style Guide, generally gets in the way.\n    \"ANN101\",  # most type checkers infer the type of `self` automatically.\n    \"ANN102\",  # most type checkers infer the type of `cls` automatically.\n    \"FIX002\",  # TODOs should be fixed, not removed\n    \"TD002\",   # We don't add authors to TODO strings\n    \"PLC0414\", # Conflicts with `no_implicit_reexport = true`\n    \"COM812\",  # Conflicts with formatter\n    \"ISC001\",  # Conflicts with formatter\n]\n\n[tool.ruff.format]\npreview = true\n\ndocstring-code-format = true\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            ".env": "# Default environment variables are taken from this `.env` file\n# This base file is extended by the other `.env.*` files in this repository\n# Do not change this file unless you intend to change defaults for dev or testing\n# Locally override these variables by creating a `.env.local` or `.env.*.local` file\n\nDUMMY_EMAIL_TRANSPORTER_FILE_PATH=var/api/dummy-email-transporter/email-dumps.yml\nDUMMY_EMAIL_TRANSPORTER_USE_CLIPBOARD=true\n\nFRONTEND_URL=http://localhost:3000\nHASH_GRAPH_ALLOWED_URL_DOMAIN_PATTERN=\"(?:http://localhost:3000|https://hash\\\\.ai)/@(?P<shortname>[\\\\w-]+)/types/(?P<kind>(?:data-type)|(?:property-type)|(?:entity-type))/[\\\\w\\\\-_%]+/\"\n\nHASH_INTEGRATION_QUEUE_NAME=integration\nHASH_EMAIL_TRANSPORTER=dummy\n\nINTERNAL_API_KEY=development-api-key\n\nHASH_OPENSEARCH_ENABLED=false\nHASH_OPENSEARCH_HOST=localhost\nHASH_OPENSEARCH_PASSWORD=admin\nHASH_OPENSEARCH_PORT=9200\nHASH_OPENSEARCH_USERNAME=admin\n\nPOSTGRES_PORT=5432\n\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\n\nHASH_KRATOS_PG_USER=kratos\nHASH_KRATOS_PG_PASSWORD=kratos\nHASH_KRATOS_PG_DATABASE=kratos\nHASH_KRATOS_PUBLIC_URL=http://127.0.0.1:4433\nHASH_KRATOS_ADMIN_URL=http://127.0.0.1:4434\nKRATOS_API_KEY=secret\nKRATOS_COOKIE_DOMAIN=localhost\nKRATOS_SECRETS_COOKIE=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\nKRATOS_SECRETS_CIPHER=32-LONG-SECRET-NOT-SECURE-AT-ALL\n\nHASH_HYDRA_PUBLIC_URL=http://127.0.0.1:4444\nHASH_HYDRA_ADMIN_URL=http://127.0.0.1:4445\nHASH_HYDRA_PG_USER=hydra\nHASH_HYDRA_PG_PASSWORD=hydra\nHASH_HYDRA_PG_DATABASE=hydra\nHASH_HYDRA_SECRETS_SYSTEM=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\nHASH_HYDRA_SECRETS_COOKIE=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\n\nHASH_SPICEDB_VERSION=1.28.0\nHASH_SPICEDB_GRPC_PRESHARED_KEY=secret\nHASH_SPICEDB_HOST=http://127.0.0.1\nHASH_SPICEDB_HTTP_PORT=8443\nHASH_SPICEDB_GRPC_PORT=50051\nHASH_SPICEDB_PG_USER=spicedb\nHASH_SPICEDB_PG_PASSWORD=spicedb\nHASH_SPICEDB_PG_DATABASE=spicedb\n\nHASH_VAULT_HOST=http://127.0.0.1\nHASH_VAULT_PORT=8200\nHASH_VAULT_ROOT_TOKEN=dev_root_token\n\nHASH_TEMPORAL_VERSION=1.23.1.0\nHASH_TEMPORAL_UI_VERSION=2.27.2\nHASH_TEMPORAL_SERVER_HOST=http://localhost\nHASH_TEMPORAL_SERVER_PORT=7233\nHASH_TEMPORAL_UI_PORT=3100\n\nHASH_TEMPORAL_PG_USER=temporal\nHASH_TEMPORAL_PG_PASSWORD=temporal\nHASH_TEMPORAL_PG_DATABASE=temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=temporal_visibility\n\nHASH_GRAPH_PG_USER=graph\nHASH_GRAPH_PG_PASSWORD=graph\nHASH_GRAPH_PG_DATABASE=graph\nHASH_GRAPH_LOG_LEVEL=info\n\nHASH_GRAPH_TYPE_FETCHER_HOST=localhost\nHASH_GRAPH_TYPE_FETCHER_PORT=4455\n\nHASH_GRAPH_REALTIME_PG_USER=realtime\nHASH_GRAPH_REALTIME_PG_PASSWORD=realtime\n\nHASH_GRAPH_HTTP_HOST=127.0.0.1\nHASH_GRAPH_HTTP_PORT=4000\nHASH_GRAPH_RPC_HOST=127.0.0.1\nHASH_GRAPH_RPC_PORT=4002\nHASH_GRAPH_TEST_API_HOST=127.0.0.1\nHASH_GRAPH_TEST_API_PORT=4001\n\nHASH_REALTIME_PORT=3333\nHASH_REDIS_HOST=localhost\nHASH_REDIS_PORT=6379\n\nHASH_OTLP_ENDPOINT=http://localhost:4317\n\nHASH_SEARCH_LOADER_PORT=3838\nHASH_SEARCH_QUEUE_NAME=search\n\nLOG_LEVEL=info\n\nAPI_ORIGIN=http://localhost:5001\n\n# Whether or not the realtime service and things depending on it are enabled (e.g. integration 2-way sync)\nENABLE_REALTIME_SYNC=true\n\n# Optional usage telemetry for HASH\nHASH_TELEMETRY_ENABLED=false\n# Currently our endpoint doesn't have HTTPS so this is set to false\nHASH_TELEMETRY_HTTPS=false\n# DNS collector endpoint\nHASH_TELEMETRY_DESTINATION=REPLACE_ME.aws.com\n# Is used for differentiating different apps, can be any value\nHASH_TELEMETRY_APP_ID=hash-app\n\n###########################################\n# Disable telemetry from third-party dependencies who transmit IP addresses\n###########################################\n# Vercel Next.js\nNEXT_TELEMETRY_DISABLED=1\n# Vercel Turborepo\nTURBO_TELEMETRY_DISABLED=1\n# Yarn\nYARN_ENABLE_TELEMETRY=0\n# Artillery\nARTILLERY_DISABLE_TELEMETRY=true\n# Terraform and others\nCHECKPOINT_DISABLE=1\n\n###########################################\n## Aliases for dockerized external services\n###########################################\n##\n## These variables are consumed in apps/hash-external-services/docker-compose.yml \u2192 env_file.\n## Using `env` \u2192 POSTGRES_USER=${HASH_PG_USER} does not give access to values in this file.\n",
            ".env.production": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to production instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.production.local` file\n\nHASH_GRAPH_LOG_LEVEL=info\n",
            ".env.development": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to development instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.development.local` file\n\nHASH_KRATOS_PG_DATABASE=dev_kratos\nHASH_SPICEDB_PG_DATABASE=dev_spicedb\nHASH_TEMPORAL_PG_DATABASE=dev_temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=dev_temporal_visibility\nHASH_GRAPH_PG_DATABASE=dev_graph\n\nHASH_GRAPH_RPC_ENABLED=true\nHASH_RPC_ENABLED=true\n\n# For locally-running minio instance\nAWS_REGION=local\nAWS_S3_UPLOADS_ENDPOINT=http://localhost:9000\nAWS_S3_UPLOADS_BUCKET=\"dev-hash-bucket\"\nAWS_S3_UPLOADS_ACCESS_KEY_ID=\"dev-s3-access-key-id\"\nAWS_S3_UPLOADS_SECRET_ACCESS_KEY=\"dev-s3-secret-access-key\"\nAWS_S3_UPLOADS_FORCE_PATH_STYLE=true\nFILE_UPLOAD_PROVIDER=\"AWS_S3\"\n\n# Feature flags\nSHOW_WORKER_COST=true\n",
            ".env.test": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to test instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.test.local` file\n\nHASH_KRATOS_PG_DATABASE=test_kratos\nHASH_TEMPORAL_PG_DATABASE=test_temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=test_temporal_visibility\nHASH_GRAPH_PG_DATABASE=test_graph\nHASH_GRAPH_ALLOWED_URL_DOMAIN_PATTERN=\"(?:http://localhost:3000|https://hash\\\\.ai)/@(?P<shortname>[\\\\w-]+)/types/(?P<kind>(?:data-type)|(?:property-type)|(?:entity-type))/[\\\\w\\\\-_%]+/\"\n\n# For locally-running minio instance\nAWS_REGION=local\nAWS_S3_UPLOADS_ENDPOINT=http://localhost:9000\nAWS_S3_UPLOADS_BUCKET=\"dev-hash-bucket\"\nAWS_S3_UPLOADS_ACCESS_KEY_ID=\"dev-s3-access-key-id\"\nAWS_S3_UPLOADS_SECRET_ACCESS_KEY=\"dev-s3-secret-access-key\"\nAWS_S3_UPLOADS_FORCE_PATH_STYLE=true\nFILE_UPLOAD_PROVIDER=\"AWS_S3\"\n",
            "apps/hash-external-services/docker-compose.yml": "volumes:\n  hash-postgres-data:\n  hash-vault-data:\n  logs:\n\nservices:\n  postgres:\n    build:\n      context: ./postgres\n    deploy:\n      restart_policy:\n        condition: on-failure\n    environment:\n      POSTGRES_USER: \"${POSTGRES_USER}\"\n      POSTGRES_PASSWORD: \"${POSTGRES_PASSWORD}\"\n      HASH_HYDRA_PG_USER: \"${HASH_HYDRA_PG_USER}\"\n      HASH_HYDRA_PG_PASSWORD: \"${HASH_HYDRA_PG_PASSWORD}\"\n      HASH_HYDRA_PG_DATABASE: \"${HASH_HYDRA_PG_DATABASE}\"\n      HASH_KRATOS_PG_USER: \"${HASH_KRATOS_PG_USER}\"\n      HASH_KRATOS_PG_PASSWORD: \"${HASH_KRATOS_PG_PASSWORD}\"\n      HASH_KRATOS_PG_DATABASE: \"${HASH_KRATOS_PG_DATABASE}\"\n      HASH_TEMPORAL_PG_USER: \"${HASH_TEMPORAL_PG_USER}\"\n      HASH_TEMPORAL_PG_PASSWORD: \"${HASH_TEMPORAL_PG_PASSWORD}\"\n      HASH_TEMPORAL_PG_DATABASE: \"${HASH_TEMPORAL_PG_DATABASE}\"\n      HASH_TEMPORAL_VISIBILITY_PG_DATABASE: \"${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}\"\n      HASH_GRAPH_PG_USER: \"${HASH_GRAPH_PG_USER}\"\n      HASH_GRAPH_PG_PASSWORD: \"${HASH_GRAPH_PG_PASSWORD}\"\n      HASH_GRAPH_PG_DATABASE: \"${HASH_GRAPH_PG_DATABASE}\"\n      HASH_GRAPH_REALTIME_PG_USER: \"${HASH_GRAPH_REALTIME_PG_USER}\"\n      HASH_GRAPH_REALTIME_PG_PASSWORD: \"${HASH_GRAPH_REALTIME_PG_PASSWORD}\"\n    volumes:\n      - hash-postgres-data:/var/lib/postgresql/data\n      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro\n      - ./postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro\n    shm_size: 1GB\n    healthcheck:\n      test:\n        [\"CMD\", \"pg_isready\", \"-q\", \"-h\", \"postgres\", \"-U\", \"${POSTGRES_USER}\"]\n      interval: 2s\n      timeout: 2s\n      retries: 5\n    command: -c 'config_file=/etc/postgresql/postgresql.conf' --track_commit_timestamp=on\n\n  spicedb:\n    image: authzed/spicedb:v${HASH_SPICEDB_VERSION}\n    restart: on-failure\n    environment:\n      SPICEDB_HTTP_ENABLED: \"True\"\n      SPICEDB_HTTP_ADDR: \":${HASH_SPICEDB_HTTP_PORT}\"\n      HASH_SPICEDB_GRPC_PORT: \":${HASH_SPICEDB_GRPC_PORT}\"\n      SPICEDB_READONLY_GRPC_ENABLED: \"False\"\n      SPICEDB_SCHEMA_PREFIXES_REQUIRED: \"True\"\n      SPICEDB_TELEMETRY_ENDPOINT: \"\"\n      SPICEDB_LOG_FORMAT: \"console\"\n      SPICEDB_DATASTORE_CONN_POOL_READ_MAX_OPEN: \"100\"\n    command: serve\n    read_only: true\n    security_opt:\n      - no-new-privileges:true\n    healthcheck:\n      test: [\"CMD\", \"grpc_health_probe\", \"-addr=localhost:50051\"]\n      interval: 5s\n      timeout: 2s\n      retries: 10\n\n  kratos-migrate:\n    build:\n      context: ./kratos\n      args:\n        ENV: dev\n        SECRET: \"${KRATOS_API_KEY}\"\n        API_CALLBACK_URL: \"http://host.docker.internal:5001/kratos-after-registration\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n    read_only: true\n    security_opt:\n      - no-new-privileges:true\n    environment:\n      - DSN=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}\n    command: migrate sql -e --yes\n\n  kratos:\n    build:\n      context: ./kratos\n      args:\n        ENV: dev\n        SECRET: \"${KRATOS_API_KEY}\"\n        API_CALLBACK_URL: \"http://host.docker.internal:5001/kratos-after-registration\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      kratos-migrate:\n        condition: service_completed_successfully\n    restart: unless-stopped\n    environment:\n      SECRETS_COOKIE: \"${KRATOS_SECRETS_COOKIE}\"\n      SECRETS_CIPHER: \"${KRATOS_SECRETS_CIPHER}\"\n      COURIER_SMTP_CONNECTION_URI: \"smtps://test:test@mailslurper:1025/?skip_ssl_verify=true\"\n      DSN: \"postgres://${HASH_KRATOS_PG_USER}:${HASH_KRATOS_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_KRATOS_PG_DATABASE}\"\n    command: serve --dev --watch-courier\n    read_only: true\n    security_opt:\n      - no-new-privileges:true\n    extra_hosts:\n      - host.docker.internal:host-gateway\n\n  hydra-migrate:\n    build:\n      context: ./hydra\n      args:\n        ENV: dev\n    depends_on:\n      postgres:\n        condition: service_healthy\n    read_only: true\n    security_opt:\n      - no-new-privileges:true\n    environment:\n      DSN: \"postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_HYDRA_PG_DATABASE}\"\n\n    command: migrate sql -e --yes\n\n  hydra:\n    build:\n      context: ./hydra\n      args:\n        ENV: dev\n    depends_on:\n      postgres:\n        condition: service_healthy\n      hydra-migrate:\n        condition: service_completed_successfully\n    restart: unless-stopped\n    ports:\n      - \"4444:4444\" # public API\n      - \"4445:4445\" # admin API\n    environment:\n      DSN: \"postgres://${HASH_HYDRA_PG_USER}:${HASH_HYDRA_PG_PASSWORD}@postgres:${POSTGRES_PORT}/${HASH_HYDRA_PG_DATABASE}\"\n      SECRETS_COOKIE: \"${HASH_HYDRA_SECRETS_COOKIE}\"\n      SECRETS_SYSTEM: \"${HASH_HYDRA_SECRETS_SYSTEM}\"\n      URLS_CONSENT: \"${API_ORIGIN}/oauth2/consent\"\n      URLS_IDENTITY_PROVIDER_PUBLICURL: \"http://kratos:4433\"\n      URLS_IDENTITY_PROVIDER_URL: \"http://kratos:4434\"\n      URLS_LOGIN: \"${FRONTEND_URL}/signin\"\n      URLS_REGISTRATION: \"${FRONTEND_URL}/signup\"\n      URLS_POST_LOGOUT_REDIRECT: \"${FRONTEND_URL}\"\n      URLS_SELF_ISSUER: \"${API_ORIGIN}\"\n      URLS_SELF_PUBLIC: \"${API_ORIGIN}\"\n    command: serve all --dev\n    read_only: true\n    security_opt:\n      - no-new-privileges:true\n    extra_hosts:\n      - host.docker.internal:host-gateway\n\n  mailslurper:\n    image: oryd/mailslurper:latest-smtps\n    security_opt:\n      - no-new-privileges:true\n\n  redis:\n    image: redis:6.2\n    read_only: true\n    deploy:\n      restart_policy:\n        condition: on-failure\n    healthcheck:\n      test: [\"CMD-SHELL\", \"redis-cli ping | grep PONG\"]\n      interval: 2s\n      timeout: 2s\n      retries: 5\n    security_opt:\n      - no-new-privileges:true\n\n  temporal-migrate:\n    build:\n      context: ./temporal\n      dockerfile: migrate.Dockerfile\n      args:\n        TEMPORAL_VERSION: \"${HASH_TEMPORAL_VERSION}\"\n    read_only: true\n    depends_on:\n      postgres:\n        condition: service_healthy\n    environment:\n      # This sets configuration values in\n      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml\n      # posgres12 for v12+ of postgres.\n      DB: \"postgres12\"\n      DBNAME: \"${HASH_TEMPORAL_PG_DATABASE}\"\n      VISIBILITY_DBNAME: \"${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}\"\n      DB_PORT: \"5432\"\n      # Intentionally use the POSTGRES user as it's the \"superadmin\" which has access to schema\n      POSTGRES_USER: \"${POSTGRES_USER}\"\n      POSTGRES_PWD: \"${POSTGRES_PASSWORD}\"\n      POSTGRES_SEEDS: \"postgres\" # the hostname of the postgres container\n    security_opt:\n      - no-new-privileges:true\n\n  temporal:\n    container_name: temporal\n    image: \"temporalio/server:${HASH_TEMPORAL_VERSION}\"\n    deploy:\n      restart_policy:\n        condition: on-failure\n    depends_on:\n      postgres:\n        condition: service_healthy\n      temporal-migrate:\n        condition: service_completed_successfully\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"temporal\",\n          \"workflow\",\n          \"list\",\n          \"--namespace\",\n          \"HASH\",\n          \"--address\",\n          \"temporal:7233\",\n        ]\n      interval: 10s\n      timeout: 2s\n      retries: 10\n    environment:\n      # This sets configuration values in\n      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml\n      # posgres12 for v12+ of postgres.\n      DB: \"postgres12\"\n      DBNAME: \"${HASH_TEMPORAL_PG_DATABASE}\"\n      VISIBILITY_DBNAME: \"${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}\"\n      DB_PORT: \"5432\"\n      POSTGRES_USER: \"${HASH_TEMPORAL_PG_USER}\"\n      POSTGRES_PWD: \"${HASH_TEMPORAL_PG_PASSWORD}\"\n      POSTGRES_SEEDS: \"postgres\" # the hostname of the postgres container\n    security_opt:\n      - no-new-privileges:true\n    ports:\n      - \"${HASH_TEMPORAL_SERVER_PORT}:7233\"\n\n  temporal-setup:\n    build:\n      context: ./temporal\n      dockerfile: setup.Dockerfile\n      args:\n        TEMPORAL_VERSION: \"${HASH_TEMPORAL_VERSION}\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      temporal:\n        condition: service_started\n    environment:\n      # This sets configuration values in\n      # https://github.com/temporalio/temporal/blob/master/docker/config_template.yaml\n      # posgres12 for v12+ of postgres.\n      DB: \"postgres12\"\n      DBNAME: \"${HASH_TEMPORAL_PG_DATABASE}\"\n      VISIBILITY_DBNAME: \"${HASH_TEMPORAL_VISIBILITY_PG_DATABASE}\"\n      DB_PORT: \"5432\"\n      # Intentionally use the POSTGRES user as it's the \"superadmin\" which has access to schema\n      POSTGRES_USER: \"${POSTGRES_USER}\"\n      POSTGRES_PWD: \"${POSTGRES_PASSWORD}\"\n      POSTGRES_SEEDS: \"postgres\" # the hostname of the postgres container\n      TEMPORAL_ADDRESS: temporal:7233\n      SKIP_DEFAULT_NAMESPACE_CREATION: \"false\" # left as a convenience as most temporal tooling expects default namespace\n    security_opt:\n      - no-new-privileges:true\n\n  temporal-ui:\n    image: temporalio/ui:${HASH_TEMPORAL_UI_VERSION}\n    deploy:\n      restart_policy:\n        condition: on-failure\n    depends_on:\n      temporal:\n        condition: service_healthy\n      temporal-setup:\n        condition: service_completed_successfully\n    environment:\n      TEMPORAL_ADDRESS: temporal:7233\n      TEMPORAL_CORS_ORIGINS: http://localhost:3000\n    security_opt:\n      - no-new-privileges:true\n    ports:\n      - \"${HASH_TEMPORAL_UI_PORT}:8080\"\n    healthcheck:\n      test: [\"CMD\", \"/bin/sh\", \"-c\", \"nc -z $(hostname) 8080\"]\n      interval: 2s\n      timeout: 2s\n      retries: 10\n",
            "apps/hash-external-services/hydra/Dockerfile": "FROM oryd/hydra:v2.2.0\n\nUSER root\n\nRUN mkdir -p /home/ory/.postgresql\n\n# Add AWS certificate bundle for SSL connection\nADD https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem /home/ory/.postgresql/root.crt\nRUN chown -R ory:ory /home/ory && \\\n    chmod a+r /home/ory/.postgresql\n\nUSER ory\n\nENTRYPOINT [\"hydra\"]\n\nCMD [\"serve\", \"all\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}