{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[project]\nname    = \"HASH\"\nversion = \"0.0.0+private\"\n\n[tool.rye]\nvirtual = true\n\n# an empty key is here by no mistake, it enables workspaces\n# and enables automatic detection of workspace members\n# see: https://rye.astral.sh/guide/pyproject/#toolryeworkspace\n[tool.rye.workspace]\n\n[tool.ruff]\ntarget-version = \"py311\"\nfix            = true    # when linting always include safe fixes\n\n[tool.ruff.lint]\npreview = true\nselect = [\"ALL\"]\nignore = [\n    \"D203\",    # this conflicts with `D211`\n    \"D213\",    # this conflicts with `D212`\n    \"D401\",    # Relates to PEP-257 but also conflicts with Google Python Style Guide, generally gets in the way.\n    \"ANN101\",  # most type checkers infer the type of `self` automatically.\n    \"ANN102\",  # most type checkers infer the type of `cls` automatically.\n    \"FIX002\",  # TODOs should be fixed, not removed\n    \"TD002\",   # We don't add authors to TODO strings\n    \"PLC0414\", # Conflicts with `no_implicit_reexport = true`\n    \"COM812\",  # Conflicts with formatter\n    \"ISC001\",  # Conflicts with formatter\n]\n\n[tool.ruff.format]\npreview = true\n\ndocstring-code-format = true\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            ".env": "# Default environment variables are taken from this `.env` file\n# This base file is extended by the other `.env.*` files in this repository\n# Do not change this file unless you intend to change defaults for dev or testing\n# Locally override these variables by creating a `.env.local` or `.env.*.local` file\n\nDUMMY_EMAIL_TRANSPORTER_FILE_PATH=var/api/dummy-email-transporter/email-dumps.yml\nDUMMY_EMAIL_TRANSPORTER_USE_CLIPBOARD=true\n\nFRONTEND_URL=http://localhost:3000\nHASH_GRAPH_ALLOWED_URL_DOMAIN_PATTERN=\"(?:http://localhost:3000|https://hash\\\\.ai)/@(?P<shortname>[\\\\w-]+)/types/(?P<kind>(?:data-type)|(?:property-type)|(?:entity-type))/[\\\\w\\\\-_%]+/\"\n\nHASH_INTEGRATION_QUEUE_NAME=integration\nHASH_EMAIL_TRANSPORTER=dummy\n\nINTERNAL_API_KEY=development-api-key\n\nHASH_OPENSEARCH_ENABLED=false\nHASH_OPENSEARCH_HOST=localhost\nHASH_OPENSEARCH_PASSWORD=admin\nHASH_OPENSEARCH_PORT=9200\nHASH_OPENSEARCH_USERNAME=admin\n\nPOSTGRES_PORT=5432\n\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\n\nHASH_KRATOS_PG_USER=kratos\nHASH_KRATOS_PG_PASSWORD=kratos\nHASH_KRATOS_PG_DATABASE=kratos\nHASH_KRATOS_PUBLIC_URL=http://127.0.0.1:4433\nHASH_KRATOS_ADMIN_URL=http://127.0.0.1:4434\nKRATOS_API_KEY=secret\nKRATOS_COOKIE_DOMAIN=localhost\nKRATOS_SECRETS_COOKIE=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\nKRATOS_SECRETS_CIPHER=32-LONG-SECRET-NOT-SECURE-AT-ALL\n\nHASH_HYDRA_PUBLIC_URL=http://127.0.0.1:4444\nHASH_HYDRA_ADMIN_URL=http://127.0.0.1:4445\nHASH_HYDRA_PG_USER=hydra\nHASH_HYDRA_PG_PASSWORD=hydra\nHASH_HYDRA_PG_DATABASE=hydra\nHASH_HYDRA_SECRETS_SYSTEM=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\nHASH_HYDRA_SECRETS_COOKIE=VERY-INSECURE-AND-SHOULD-ONLY-BE-USED-IN-DEV\n\nHASH_SPICEDB_VERSION=1.28.0\nHASH_SPICEDB_GRPC_PRESHARED_KEY=secret\nHASH_SPICEDB_HOST=http://127.0.0.1\nHASH_SPICEDB_HTTP_PORT=8443\nHASH_SPICEDB_GRPC_PORT=50051\nHASH_SPICEDB_PG_USER=spicedb\nHASH_SPICEDB_PG_PASSWORD=spicedb\nHASH_SPICEDB_PG_DATABASE=spicedb\n\nHASH_VAULT_HOST=http://127.0.0.1\nHASH_VAULT_PORT=8200\nHASH_VAULT_ROOT_TOKEN=dev_root_token\n\nHASH_TEMPORAL_VERSION=1.23.1.0\nHASH_TEMPORAL_UI_VERSION=2.27.2\nHASH_TEMPORAL_SERVER_HOST=http://localhost\nHASH_TEMPORAL_SERVER_PORT=7233\nHASH_TEMPORAL_UI_PORT=3100\n\nHASH_TEMPORAL_PG_USER=temporal\nHASH_TEMPORAL_PG_PASSWORD=temporal\nHASH_TEMPORAL_PG_DATABASE=temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=temporal_visibility\n\nHASH_GRAPH_PG_USER=graph\nHASH_GRAPH_PG_PASSWORD=graph\nHASH_GRAPH_PG_DATABASE=graph\nHASH_GRAPH_LOG_LEVEL=info\n\nHASH_GRAPH_TYPE_FETCHER_HOST=localhost\nHASH_GRAPH_TYPE_FETCHER_PORT=4455\n\nHASH_GRAPH_REALTIME_PG_USER=realtime\nHASH_GRAPH_REALTIME_PG_PASSWORD=realtime\n\nHASH_GRAPH_HTTP_HOST=127.0.0.1\nHASH_GRAPH_HTTP_PORT=4000\nHASH_GRAPH_RPC_HOST=127.0.0.1\nHASH_GRAPH_RPC_PORT=4002\nHASH_GRAPH_TEST_API_HOST=127.0.0.1\nHASH_GRAPH_TEST_API_PORT=4001\n\nHASH_REALTIME_PORT=3333\nHASH_REDIS_HOST=localhost\nHASH_REDIS_PORT=6379\n\nHASH_OTLP_ENDPOINT=http://localhost:4317\n\nHASH_SEARCH_LOADER_PORT=3838\nHASH_SEARCH_QUEUE_NAME=search\n\nLOG_LEVEL=info\n\nAPI_ORIGIN=http://localhost:5001\n\n# Whether or not the realtime service and things depending on it are enabled (e.g. integration 2-way sync)\nENABLE_REALTIME_SYNC=true\n\n# Optional usage telemetry for HASH\nHASH_TELEMETRY_ENABLED=false\n# Currently our endpoint doesn't have HTTPS so this is set to false\nHASH_TELEMETRY_HTTPS=false\n# DNS collector endpoint\nHASH_TELEMETRY_DESTINATION=REPLACE_ME.aws.com\n# Is used for differentiating different apps, can be any value\nHASH_TELEMETRY_APP_ID=hash-app\n\n###########################################\n# Disable telemetry from third-party dependencies who transmit IP addresses\n###########################################\n# Vercel Next.js\nNEXT_TELEMETRY_DISABLED=1\n# Vercel Turborepo\nTURBO_TELEMETRY_DISABLED=1\n# Yarn\nYARN_ENABLE_TELEMETRY=0\n# Artillery\nARTILLERY_DISABLE_TELEMETRY=true\n# Terraform and others\nCHECKPOINT_DISABLE=1\n\n###########################################\n## Aliases for dockerized external services\n###########################################\n##\n## These variables are consumed in apps/hash-external-services/docker-compose.yml \u2192 env_file.\n## Using `env` \u2192 POSTGRES_USER=${HASH_PG_USER} does not give access to values in this file.\n",
            ".env.production": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to production instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.production.local` file\n\nHASH_GRAPH_LOG_LEVEL=info\n",
            ".env.development": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to development instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.development.local` file\n\nHASH_KRATOS_PG_DATABASE=dev_kratos\nHASH_SPICEDB_PG_DATABASE=dev_spicedb\nHASH_TEMPORAL_PG_DATABASE=dev_temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=dev_temporal_visibility\nHASH_GRAPH_PG_DATABASE=dev_graph\n\nHASH_GRAPH_RPC_ENABLED=true\nHASH_RPC_ENABLED=true\n\n# For locally-running minio instance\nAWS_REGION=local\nAWS_S3_UPLOADS_ENDPOINT=http://localhost:9000\nAWS_S3_UPLOADS_BUCKET=\"dev-hash-bucket\"\nAWS_S3_UPLOADS_ACCESS_KEY_ID=\"dev-s3-access-key-id\"\nAWS_S3_UPLOADS_SECRET_ACCESS_KEY=\"dev-s3-secret-access-key\"\nAWS_S3_UPLOADS_FORCE_PATH_STYLE=true\nFILE_UPLOAD_PROVIDER=\"AWS_S3\"\n\n# Feature flags\nSHOW_WORKER_COST=true\n",
            ".env.test": "# This file extends the base `.env` file and will override any shared values\n# The values contained within this dotfile are provided to test instances of HASH\n# These variables can be locally overridden by re-specifying them in a `.env.test.local` file\n\nHASH_KRATOS_PG_DATABASE=test_kratos\nHASH_TEMPORAL_PG_DATABASE=test_temporal\nHASH_TEMPORAL_VISIBILITY_PG_DATABASE=test_temporal_visibility\nHASH_GRAPH_PG_DATABASE=test_graph\nHASH_GRAPH_ALLOWED_URL_DOMAIN_PATTERN=\"(?:http://localhost:3000|https://hash\\\\.ai)/@(?P<shortname>[\\\\w-]+)/types/(?P<kind>(?:data-type)|(?:property-type)|(?:entity-type))/[\\\\w\\\\-_%]+/\"\n\n# For locally-running minio instance\nAWS_REGION=local\nAWS_S3_UPLOADS_ENDPOINT=http://localhost:9000\nAWS_S3_UPLOADS_BUCKET=\"dev-hash-bucket\"\nAWS_S3_UPLOADS_ACCESS_KEY_ID=\"dev-s3-access-key-id\"\nAWS_S3_UPLOADS_SECRET_ACCESS_KEY=\"dev-s3-secret-access-key\"\nAWS_S3_UPLOADS_FORCE_PATH_STYLE=true\nFILE_UPLOAD_PROVIDER=\"AWS_S3\"\n",
            "apps/hash-graph/docker/Dockerfile": "FROM debian:12.9-slim AS mise\n\nSHELL [\"/bin/bash\", \"-euo\", \"pipefail\", \"-c\"]\n\nENV MISE_DATA_DIR=\"/mise\"\nENV MISE_CACHE_DIR=\"/mise/cache\"\nENV MISE_INSTALL_PATH=\"/usr/local/bin/mise\"\nENV MISE_NODE_COREPACK=1\nENV PATH=\"/mise/shims:$PATH\"\n\nCOPY .config/mise /etc/mise\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends curl ca-certificates && \\\n    curl https://mise.run | sh && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    eval \"$(mise activate bash)\" && \\\n    mise install node\n\n\nFROM mise AS base\n\nWORKDIR /app\n\nRUN mise install npm:turbo && \\\n    mise use --global yq\n\nCOPY . .\n# `turbo prune` does not include Cargo workspaces, so we create dummy projects for each workspace member\nRUN turbo prune --scope='@apps/hash-graph' --docker && \\\n    find $(yq '.workspace.members' -o tsv Cargo.toml | tr '*' ' ') -maxdepth 2 -name Cargo.toml -exec sh -c ' \\\n    [ -f \"/app/out/full/$1\" ] || ( \\\n    mkdir -p \"/app/out/full/$(dirname \"$1\")/src\" &&  \\\n    echo > \"/app/out/full/$(dirname \"$1\")/src/lib.rs\" &&  \\\n    printf \"[package]\\nname = \\\"$(yq \".package.name\" -p toml -oy $1)\\\"\" > \"/app/out/full/$1\" \\\n    )' _ {} \\; && \\\n    cp -R .cargo Cargo.toml Cargo.lock /app/out/full/\n\n\nFROM mise AS rust\n\nWORKDIR /usr/local/\n\nENV MISE_CARGO_HOME=\"/usr/local/cargo\" \\\n    PATH=\"$PATH:/usr/local/cargo/bin\"\n\nCOPY rust-toolchain.toml .\nRUN mise use --global yq && \\\n    mise use --global rust[profile=minimal]@$(yq '.toolchain.channel' rust-toolchain.toml) && \\\n    rm rust-toolchain.toml\n\n\nFROM rust AS builder\n\nWORKDIR /usr/local/src/\n\nCOPY --from=base /app/out/json/ .\nCOPY --from=base /app/out/yarn.lock ./yarn.lock\nCOPY --from=base /app/out/full/.yarn .yarn\nCOPY --from=base /app/out/full/turbo.json turbo.json\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends build-essential musl-tools && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    mise install node npm:turbo protoc && \\\n    yarn install --immutable && \\\n    yarn cache clean\n\nCOPY --from=base /app/out/full/ .\n\nARG PROFILE=production\nARG ENABLE_TEST_SERVER=no\n\nRUN --mount=type=cache,target=/usr/local/cargo/registry,sharing=locked \\\n    --mount=type=cache,target=/usr/local/cargo/git,sharing=locked \\\n    --mount=type=cache,target=/usr/local/src/target,sharing=locked \\\n    FEATURES=() && \\\n    if [[ ${ENABLE_TEST_SERVER^^} == Y* || ${ENABLE_TEST_SERVER^^} == T* || $ENABLE_TEST_SERVER == 1 ]]; then \\\n    FEATURES+=(\"test-server\"); \\\n    fi && \\\n    if [[ ${PROFILE} == dev ]]; then \\\n    export RUSTFLAGS=\"-C debuginfo=line-tables-only\" && \\\n    export PROFILE=dev-llvm; \\\n    fi && \\\n    FEATURES=${FEATURES[@]} && \\\n    rustup target add \"$(uname -m)-unknown-linux-musl\" && \\\n    cargo install --target \"$(uname -m)-unknown-linux-musl\" --path apps/hash-graph --root /tmp --features \"${FEATURES// /,}\" --profile $PROFILE --locked && \\\n    mkdir -p /out/etc && \\\n    cp /tmp/bin/hash-graph /out/hash-graph && \\\n    echo 'graph:x:61000:60000:hash-graph:/:' > /out/etc/passwd && \\\n    echo 'hash:x:60000:' > /out/etc/group && \\\n    install -d -m 0775 -o 61000 -g 60000 /out/logs\n\n\nFROM scratch AS runner\n\nCOPY --from=builder /out/ /\n\nUSER graph:hash\n\nENTRYPOINT [\"/hash-graph\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}