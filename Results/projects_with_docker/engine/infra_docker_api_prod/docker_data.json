{
    "docker_info": {
        "base_image": "rust",
        "multi_stage_build": true,
        "exposed_ports": [],
        "user": [
            "api:hash"
        ],
        "labels": [],
        "health_checks": [
            "HEALTHCHECK --interval=5s --timeout=3s --start-period=10s --retries=3 CMD curl -f http://localhost:5001/health-check || exit 1"
        ],
        "build_args": [],
        "envs": [
            "ENV MISE_DATA_DIR=\"/mise\"",
            "ENV MISE_CACHE_DIR=\"/mise/cache\"",
            "ENV MISE_INSTALL_PATH=\"/usr/local/bin/mise\"",
            "ENV PATH=\"/mise/shims:$PATH\"",
            "ENV MISE_CARGO_HOME=\"/usr/local/cargo\" \\",
            "ENV COREPACK_HOME=/usr/local/src/var/corepack-cache",
            "ENV NODE_ENV=production"
        ],
        "copy_instructions": [
            "COPY .config/mise /etc/mise",
            "WORKDIR /app",
            "COPY . .",
            "WORKDIR /usr/local/",
            "COPY rust-toolchain.toml .",
            "WORKDIR /usr/local/src/",
            "COPY --from=base /app/out/json/ .",
            "COPY --from=base /app/out/yarn.lock ./yarn.lock",
            "COPY --from=base /app/out/full/.yarn .yarn",
            "COPY --from=base /app/out/full/turbo.json turbo.json",
            "COPY --from=base /app/out/full/ .",
            "COPY --from=builder /usr/local/src /usr/local/src",
            "WORKDIR /usr/local/src/apps/hash-api"
        ],
        "execution": [
            {
                "command": "entrypoint",
                "arguments": [
                    "[",
                    "\"yarn\"]"
                ]
            },
            {
                "command": "cmd",
                "arguments": [
                    "[\"start\"]"
                ]
            }
        ],
        "run": [
            [
                "apt-get update && \\",
                "apt-get install -y --no-install-recommends curl ca-certificates &&",
                "curl https://mise.run | sh &&",
                "apt-get clean &&",
                "rm -rf /var/lib/apt/lists/* &&",
                "eval \"$(mise activate bash)\" &&",
                "mise install node"
            ],
            [
                "mise install npm:turbo && \\",
                "mise use --global yq"
            ],
            [
                "turbo prune --scope='@apps/hash-api' --docker && \\",
                "find $(yq '.workspace.members' -o tsv Cargo.toml | tr '*' ' ') -maxdepth 2 -name Cargo.toml -exec sh -c '",
                "[ -f \"/app/out/full/$1\" ] || (",
                "mkdir -p \"/app/out/full/$(dirname \"$1\")/src\" &&",
                "echo > \"/app/out/full/$(dirname \"$1\")/src/lib.rs\" &&",
                "printf \"[package]\\nname = \\\"$(yq \".package.name\" $1)\\\"\" > \"/app/out/full/$1\"",
                ")' _ {} \\; &&",
                "cp -R .cargo Cargo.toml Cargo.lock /app/out/full/"
            ],
            [
                "mise use --global yq && \\",
                "mise use --global rust[profile=minimal]@$(yq '.toolchain.channel' rust-toolchain.toml) &&",
                "rm rust-toolchain.toml"
            ],
            [
                "apt-get update && \\",
                "apt-get install -y --no-install-recommends build-essential &&",
                "apt-get clean &&",
                "rm -rf /var/lib/apt/lists/* &&",
                "mise install node npm:turbo java biome npm:@redocly/cli cargo-binstall cargo:wasm-pack cargo:wasm-opt &&",
                "yarn install --immutable &&",
                "yarn cache clean"
            ],
            [
                "--mount=type=cache,target=/usr/local/cargo/registry,sharing=locked \\",
                "--mount=type=cache,target=/usr/local/cargo/git,sharing=locked",
                "--mount=type=cache,target=/usr/local/src/target,sharing=locked",
                "--mount=type=cache,target=/usr/local/src/.turbo/cache,sharing=locked",
                "turbo build --filter '@apps/hash-api' --env-mode=loose"
            ],
            [
                "groupadd --system --gid 60000 hash && \\",
                "useradd --system api -G hash &&",
                "install -d -m 0775 -o api -g hash /log /home/api officeParserTemp/tempfiles $COREPACK_HOME &&",
                "corepack prepare --activate"
            ]
        ]
    }
}