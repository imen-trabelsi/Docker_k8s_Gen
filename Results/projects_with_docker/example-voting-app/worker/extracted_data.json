{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "Flask\nRedis\ngunicorn\n"
        },
        "database": "Redis",
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "# version is now using \"compose spec\"\n# v2 and v3 are now combined!\n# docker-compose v1.27+ required\n\nservices:\n  vote:\n    build: \n      context: ./vote\n      target: dev\n    depends_on:\n      redis:\n        condition: service_healthy\n    healthcheck: \n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n      interval: 15s\n      timeout: 5s\n      retries: 3\n      start_period: 10s\n    volumes:\n     - ./vote:/usr/local/app\n    ports:\n      - \"8080:80\"\n    networks:\n      - front-tier\n      - back-tier\n\n  result:\n    build: ./result\n    # use nodemon rather than node for local dev\n    entrypoint: nodemon --inspect=0.0.0.0 server.js\n    depends_on:\n      db:\n        condition: service_healthy \n    volumes:\n      - ./result:/usr/local/app\n    ports:\n      - \"8081:80\"\n      - \"127.0.0.1:9229:9229\"\n    networks:\n      - front-tier\n      - back-tier\n\n  worker:\n    build:\n      context: ./worker\n    depends_on:\n      redis:\n        condition: service_healthy \n      db:\n        condition: service_healthy \n    networks:\n      - back-tier\n\n  redis:\n    image: redis:alpine\n    volumes:\n      - \"./healthchecks:/healthchecks\"\n    healthcheck:\n      test: /healthchecks/redis.sh\n      interval: \"5s\"\n    networks:\n      - back-tier\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_USER: \"postgres\"\n      POSTGRES_PASSWORD: \"postgres\"\n    volumes:\n      - \"db-data:/var/lib/postgresql/data\"\n      - \"./healthchecks:/healthchecks\"\n    healthcheck:\n      test: /healthchecks/postgres.sh\n      interval: \"5s\"\n    networks:\n      - back-tier\n\n  # this service runs once to seed the database with votes\n  # it won't run unless you specify the \"seed\" profile\n  # docker compose --profile seed up -d\n  seed:\n    build: ./seed-data\n    profiles: [\"seed\"]\n    depends_on:\n      vote:\n        condition: service_healthy \n    networks:\n      - front-tier\n    restart: \"no\"\n\nvolumes:\n  db-data:\n\nnetworks:\n  front-tier:\n  back-tier:\n",
            "worker/Dockerfile": "# because of dotnet, we always build on amd64, and target platforms in cli\n# dotnet doesn't support QEMU for building or running. \n# (errors common in arm/v7 32bit) https://github.com/dotnet/dotnet-docker/issues/1537\n# https://hub.docker.com/_/microsoft-dotnet\n# hadolint ignore=DL3029\n# to build for a different platform than your host, use --platform=<platform>\n# for example, if you were on Intel (amd64) and wanted to build for ARM, you would use:\n# docker buildx build --platform \"linux/arm64/v8\" .\n\n# build compiles the program for the builder's local platform\nFROM --platform=${BUILDPLATFORM} mcr.microsoft.com/dotnet/sdk:7.0 AS build\nARG TARGETPLATFORM\nARG TARGETARCH\nARG BUILDPLATFORM\nRUN echo \"I am running on $BUILDPLATFORM, building for $TARGETPLATFORM\"\n\nWORKDIR /source\nCOPY *.csproj .\nRUN dotnet restore -a $TARGETARCH\n\nCOPY . .\nRUN dotnet publish -c release -o /app -a $TARGETARCH --self-contained false --no-restore\n\n# app image\nFROM mcr.microsoft.com/dotnet/runtime:7.0\nWORKDIR /app\nCOPY --from=build /app .\nENTRYPOINT [\"dotnet\", \"Worker.dll\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            "Dockerfile",
            "docker-compose.test.yml",
            "package-lock.json",
            "package.json",
            "server.js"
        ],
        "folders": [
            "tests",
            "views"
        ]
    }
}