{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Express.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"result\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"async\": \"^3.1.0\",\n    \"cookie-parser\": \"^1.4.6\",\n    \"express\": \"^4.18.2\",\n    \"method-override\": \"^3.0.0\",\n    \"pg\": \"^8.8.0\",\n    \"socket.io\": \"^4.7.2\",\n    \"stoppable\": \"^1.1.0\"\n  }\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "# version is now using \"compose spec\"\n# v2 and v3 are now combined!\n# docker-compose v1.27+ required\n\nservices:\n  vote:\n    build: \n      context: ./vote\n      target: dev\n    depends_on:\n      redis:\n        condition: service_healthy\n    healthcheck: \n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n      interval: 15s\n      timeout: 5s\n      retries: 3\n      start_period: 10s\n    volumes:\n     - ./vote:/usr/local/app\n    ports:\n      - \"8080:80\"\n    networks:\n      - front-tier\n      - back-tier\n\n  result:\n    build: ./result\n    # use nodemon rather than node for local dev\n    entrypoint: nodemon --inspect=0.0.0.0 server.js\n    depends_on:\n      db:\n        condition: service_healthy \n    volumes:\n      - ./result:/usr/local/app\n    ports:\n      - \"8081:80\"\n      - \"127.0.0.1:9229:9229\"\n    networks:\n      - front-tier\n      - back-tier\n\n  worker:\n    build:\n      context: ./worker\n    depends_on:\n      redis:\n        condition: service_healthy \n      db:\n        condition: service_healthy \n    networks:\n      - back-tier\n\n  redis:\n    image: redis:alpine\n    volumes:\n      - \"./healthchecks:/healthchecks\"\n    healthcheck:\n      test: /healthchecks/redis.sh\n      interval: \"5s\"\n    networks:\n      - back-tier\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_USER: \"postgres\"\n      POSTGRES_PASSWORD: \"postgres\"\n    volumes:\n      - \"db-data:/var/lib/postgresql/data\"\n      - \"./healthchecks:/healthchecks\"\n    healthcheck:\n      test: /healthchecks/postgres.sh\n      interval: \"5s\"\n    networks:\n      - back-tier\n\n  # this service runs once to seed the database with votes\n  # it won't run unless you specify the \"seed\" profile\n  # docker compose --profile seed up -d\n  seed:\n    build: ./seed-data\n    profiles: [\"seed\"]\n    depends_on:\n      vote:\n        condition: service_healthy \n    networks:\n      - front-tier\n    restart: \"no\"\n\nvolumes:\n  db-data:\n\nnetworks:\n  front-tier:\n  back-tier:\n",
            "result/Dockerfile": "FROM node:18-slim\n\n# add curl for healthcheck\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends curl tini && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /usr/local/app\n\n# have nodemon available for local dev use (file watching)\nRUN npm install -g nodemon\n\nCOPY package*.json ./\n\nRUN npm ci && \\\n npm cache clean --force && \\\n mv /usr/local/app/node_modules /node_modules\n\nCOPY . .\n\nENV PORT=80\nEXPOSE 80\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nCMD [\"node\", \"server.js\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            "Dockerfile",
            "docker-compose.test.yml",
            "package-lock.json",
            "package.json",
            "server.js"
        ],
        "folders": [
            "tests",
            "views"
        ]
    }
}