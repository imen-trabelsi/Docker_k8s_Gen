{
    "docker_info": {
        "base_image": "debian:bookworm-slim",
        "multi_stage_build": false,
        "exposed_ports": [],
        "user": [],
        "labels": [],
        "health_checks": [],
        "build_args": [
            "TARGETARCH",
            "HATCH_VERSION=1.12.0"
        ],
        "envs": [
            "ENV LANG C.UTF-8",
            "ENV PYTHONUNBUFFERED=1",
            "ENV PYENV_ROOT=/root/.pyenv",
            "ENV CARGO_ROOT=/root/.cargo",
            "ENV PATH=${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${CARGO_ROOT}/bin:$PATH",
            "ENV PYTHON_CONFIGURE_OPTS=--enable-shared"
        ],
        "copy_instructions": [
            "COPY .python-version /root/"
        ],
        "execution": [
            {
                "command": "cmd",
                "arguments": [
                    "[\"/bin/bash\"]"
                ]
            }
        ],
        "run": [
            [
                "apt-get update \\",
                "&& apt-get install -y --no-install-recommends",
                "apt-transport-https",
                "build-essential",
                "ca-certificates",
                "clang-format",
                "curl",
                "gdb",
                "git",
                "gnupg",
                "jq",
                "libbz2-dev",
                "libffi-dev",
                "liblzma-dev",
                "libmemcached-dev",
                "libmemcached-dev",
                "libncurses5-dev",
                "libncursesw5-dev",
                "libpq-dev",
                "libreadline-dev",
                "libsasl2-dev",
                "libsqlite3-dev",
                "libsqliteodbc",
                "libssh-dev",
                "patch",
                "unixodbc-dev",
                "wget",
                "zlib1g-dev",
                "awscli"
            ],
            [
                "apt-get install -y --no-install-recommends nodejs npm \\",
                "&& npm install -g @datadog/datadog-ci"
            ],
            [
                "curl https://mariadb.org/mariadb_release_signing_key.pgp | gpg --dearmor > /etc/apt/trusted.gpg.d/mariadb.gpg \\",
                "&& echo \"deb [arch=amd64,arm64] https://mirror.mariadb.org/repo/11.rolling/debian/ bookworm main\" > /etc/apt/sources.list.d/mariadb.list",
                "&& apt-get update",
                "&& apt-get install -y --no-install-recommends libmariadb-dev libmariadb-dev-compat"
            ],
            [
                "if [ \"$TARGETARCH\" = \"amd64\" ]; \\",
                "then",
                "curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg",
                "&& mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg",
                "&& echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-bookworm-prod bookworm main\" > /etc/apt/sources.list.d/dotnetdev.list",
                "&& apt-get update",
                "&& apt-get install -y --no-install-recommends azure-functions-core-tools-4=4.0.6280-1;",
                "fi"
            ],
            [
                "if [ \"$TARGETARCH\" = \"amd64\" ]; \\",
                "then",
                "curl https://dl.google.com/linux/linux_signing_key.pub |gpg --dearmor > /etc/apt/trusted.gpg.d/google.gpg",
                "&& echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' > /etc/apt/sources.list.d/google-chrome.list",
                "&& apt-get update",
                "&& apt-get install -y --no-install-recommends google-chrome-stable ;",
                "fi"
            ],
            [
                "rm -rf /var/lib/apt/lists/*",
                ""
            ],
            [
                "curl https://sh.rustup.rs -sSf | \\",
                "sh -s -- --default-toolchain stable -y"
            ],
            [
                "git clone --depth 1 --branch v2.4.22 https://github.com/pyenv/pyenv \"${PYENV_ROOT}\" \\",
                "&& cd /root",
                "&& pyenv local | xargs -L 1 pyenv install",
                "&& cd -"
            ],
            [
                "if [ \"$TARGETARCH\" = \"amd64\" ]; \\",
                "then curl -L https://github.com/pypa/hatch/releases/download/hatch-v${HATCH_VERSION}/hatch-x86_64-unknown-linux-gnu.tar.gz | tar zx;",
                "else curl -L https://github.com/pypa/hatch/releases/download/hatch-v${HATCH_VERSION}/hatch-aarch64-unknown-linux-gnu.tar.gz | tar zx;",
                "fi",
                "&& install -t /usr/local/bin hatch",
                "&& hatch -q"
            ]
        ]
    }
}