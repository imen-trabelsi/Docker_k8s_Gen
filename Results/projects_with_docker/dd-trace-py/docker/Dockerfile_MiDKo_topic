# Step 1: Use the user provided base image
FROM debian:bookworm-slim

# Step 2: Set environment variables
ENV LANG=C.UTF-8 \
    PYTHONUNBUFFERED=1 \
    PYENV_ROOT=/root/.pyenv \
    CARGO_ROOT=/root/.cargo \
    PATH=${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${CARGO_ROOT}/bin:$PATH \

# Step 4: Copy necessary files
COPY .python-version /root/

# Installing system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    apt-transport-https \
    build-essential \
    ca-certificates \
    clang-format \
    curl \
    gdb \
    git \
    gnupg \
    jq \
    libbz2-dev \
    libffi-dev \
    liblzma-dev \
    libmemcached-dev \
    libmemcached-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libpq-dev \
    libreadline-dev \
    libsasl2-dev \
    libsqlite3-dev \
    libsqliteodbc \
    libssh-dev \
    patch \
    unixodbc-dev \
    wget \
    zlib1g-dev \
    awscli \
    && curl https://mariadb.org/mariadb_release_signing_key.pgp | gpg --dearmor > /etc/apt/trusted.gpg.d/mariadb.gpg \
    && echo "deb [arch=amd64,arm64] https://mirror.mariadb.org/repo/11.rolling/debian/ bookworm main" > /etc/apt/sources.list.d/mariadb.list \
    && apt-get update \

# Applying Condition for TARGETARCH=amd64
ARG TARGETARCH
ARG HATCH_VERSION=1.12.0
RUN if [ "$TARGETARCH" = "amd64" ]; then \
    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg \
    && mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg \
    && echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-bookworm-prod bookworm main" \
    > /etc/apt/sources.list.d/dotnetdev.list \
    && apt-get update \

RUN if [ "$TARGETARCH" = "amd64" ]; then \
    curl https://dl.google.com/linux/linux_signing_key.pub |gpg --dearmor \
    > /etc/apt/trusted.gpg.d/google.gpg \
    && echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' \
    > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \

# Clean up unnecessary files
RUN rm -rf /var/lib/apt/lists/*

# Install Rust
RUN curl https://sh.rustup.rs -sSf | \

# Install Python
RUN git clone --depth 1 --branch v2.4.22 https://github.com/pyenv/pyenv "${PYENV_ROOT}" \
    && cd /root \
    && pyenv local | xargs -L 1 pyenv install \

# Install hatch
RUN if [ "$TARGETARCH" = "amd64" ]; then \
    curl -L https://github.com/pypa/hatch/releases/download/hatch-v${HATCH_VERSION}/hatch-x86_64-unknown-linux-gnu.tar.gz | tar zx; \
    else curl -L https://github.com/pypa/hatch/releases/download/hatch-v${HATCH_VERSION}/hatch-aarch64-unknown-linux-gnu.tar.gz | tar zx; fi \
    && install -t /usr/local/bin hatch \

# Step 7: Specify the final command
CMD ["/bin/bash"]
