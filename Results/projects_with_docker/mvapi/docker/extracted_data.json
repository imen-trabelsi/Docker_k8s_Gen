{
    "source_code_info": {
        "language": "Python",
        "framework": "FastAPI",
        "dependencies": {
            "requirements.txt": "uvicorn[standard]==0.19.0\nfastapi==0.86.0\nsqlalchemy==2.0.0b3\npydantic==1.10.2\npsycopg2==2.9.5\ngit+https://github.com/MieuxVoter/majority-judgment-library-python\npython-jose==3.3.0\npython-dateutil==2.8.2\n"
        },
        "database": "PostgreSQL",
        "build_system": "pip",
        "config_files": {
            ".env": "SECRET=\n\nDB_NAME=mj\nDB_HOST=mj_db\nDB_PORT=5433\nDB_USER=mj\nDB_PASS=\n\nDOMAIN=\nEMAIL=\nTIMEZONE=\n\n# This is used by restic's backup\nSMTP_HOST=\nSMTP_USER=\nSMTP_PASS=\n\nRESTIC_REPOSITORY=s3:s3.amazonaws.com/your-bucket\nRESTIC_PASSWORD=\nRESTIC_SEND_MAIL=\nRESTIC_DEST_MAIL=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\n",
            "docker-compose.yml": "version: '3.9'\n\nservices:\n  mj_db:\n    image: postgres:15.1\n    restart: unless-stopped\n    hostname: mj_db\n    healthcheck:\n      start_period: 10s\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"postgres\"]\n      interval: 30s\n    environment:\n      - POSTGRES_USER=${DB_USER:-mj}\n      - POSTGRES_PASSWORD=$DB_PASS\n      - POSTGRES_DB=${DB_NAME:-mj}\n      - TZ=${TIMEZONE:-Europe/Paris}\n    networks:\n      - lan\n    volumes:\n      - db:/var/lib/mysql\n\n  mj_api:\n    build:\n      context: .\n      dockerfile: docker/Dockerfile\n    image: majority-judgment/api-python:latest\n    restart: unless-stopped\n      # TODO remove reload\n    command: uvicorn app.main:app --host 0.0.0.0 --port 8877 --proxy-headers --env-file ${ENV_FILE:-.env.local} --reload\n    healthcheck:\n      start_period: 30s\n      test: ['CMD-SHELL', 'curl localhost:8877/liveness -s -f -o /dev/null || exit 1']\n      interval: 30s\n      retries: 5\n    depends_on:\n      mj_db:\n          condition: service_healthy\n    volumes:\n      - .:/code\n    networks:\n      - lan\n      - traefik_network\n    environment:\n      POSTGRES_USER: ${DB_USER:-mj}\n      POSTGRES_PASSWORD: $DB_PASS\n      POSTGRES_DB: ${DB_NAME:-mj}\n      POSTGRES_HOST: mj_db\n      TZ: ${TIMEZONE:-Europe/Paris}\n      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-[\"*\"]}\n      SECRET: $SECRET\n    ports:\n      - 8877:8877\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=traefik_network\"\n      - \"traefik.http.routers.mj.entrypoints=web,websecure\"\n      - \"traefik.http.routers.mj.rule=Host(`${API_PREFIX:-api}.${DOMAIN}`)\"\n      - \"traefik.http.services.mj.loadbalancer.server.port=8877\"\n      - \"traefik.http.routers.mj.tls=true\"\n      - \"traefik.http.routers.mj.tls.certresolver=leresolver\"\n\n  mj_restic:\n    profiles:\n      - backup\n      - all\n    depends_on:\n      - mj_db\n    image: restic\n    networks:\n      - lan\n    build:\n      context: ./docker/restic\n      dockerfile: Dockerfile\n      args:\n        RESTIC_INIT_ARGS: $RESTIC_INIT_ARGS\n        RESTIC_PASSWORD: $RESTIC_PASSWORD\n    restart: unless-stopped\n    volumes:\n      - db:/data/db\n      - imgpush:/data/images\n    environment:\n      - TZ=${TIMEZONE:-Europe/Paris}\n      - RESTIC_REPOSITORY=$RESTIC_REPOSITORY\n      - BACKUP_CRON=${RESTIC_BACKUP_CRON:-0 0 * * *}\n      - RESTIC_FORGET_ARGS=--prune --keep-last 1 --keep-daily 1\n      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\n      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\n      - MAILX_ARGS=-r '${RESTIC_SEND_MAIL}' -s 'Result of the last restic backup run' -S smtp='${SMTP_HOST}:${SMTP_PORT;-587}' -S smtp-use-starttls -S smtp-auth=login -S smtp-auth-user='${SMTP_USER}' -S smtp-auth-password='${SMTP_PASS}' '${RESTIC_DEST_MAIL}'\n\n  mj_imgpush:\n    profiles:\n      - image\n      - all\n    image: hauxir/imgpush:latest\n    restart: unless-stopped\n    environment:\n      PUID: $PUID\n      PGID: $PUID\n      TZ: ${TIMEZONE:-Europe/Paris}\n      IMAGES_DIR: /images\n      MAX_SIZE_MB: 16\n      MAX_UPLOADS_PER_DAY: 100\n      MAX_UPLOADS_PER_HOUR: 100\n      MAX_UPLOADS_PER_MINUTE: 10\n      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-[\"*\"]}\n      VALID_SIZES: ${VALID_SIZES:-\"[100,200,300]\"}\n      NAME_STRATEGY: \"uuidv4\"\n    healthcheck:\n      start_period: 0s\n      test: ['CMD-SHELL', 'curl localhost:5000/liveness -s -f -o /dev/null || exit 1']\n      interval: 30s\n    networks:\n      - lan\n      - traefik_network\n    volumes:\n      - imgpush:/images\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=traefik_network\"\n      - \"traefik.http.routers.imgpush.entrypoints=web,websecure\"\n      - \"traefik.http.routers.imgpush.rule=Host(`${IMGPUSH_PREFIX:-imgpush}.${DOMAIN}`)\"\n      - \"traefik.http.services.imgpush.loadbalancer.server.port=5000\"\n      - \"traefik.http.routers.imgpush.tls=true\"\n      - \"traefik.http.routers.imgpush.tls.certresolver=leresolver\"\n\n  mj_metabase:\n    image: metabase/metabase\n    restart: unless-stopped\n    profiles:\n      - dashboard\n      - all\n    depends_on:\n      - mj_db\n    networks:\n      - lan\n      - traefik_network\n    environment:\n      MB_DB_TYPE: postgres\n      MB_DB_DBNAME: ${DB_NAME:-mj}\n      MB_DB_PORT: ${DB_PORT:-5432}\n      MB_DB_USER: ${DB_USER:-mj}\n      MB_DB_PASS: $DB_PASS\n      MB_DB_HOST: mj_db\n      TZ: ${TIMEZONE:-Europe/Paris}\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=traefik_network\"\n      - \"traefik.http.routers.metabase.entrypoints=web,websecure\"\n      - \"traefik.http.routers.metabase.rule=Host(`${METABASE_PREFIX:-metabase}.${DOMAIN}`)\"\n      - \"traefik.http.services.metabase.loadbalancer.server.port=3000\"\n      - \"traefik.http.routers.metabase.tls=true\"\n      - \"traefik.http.routers.metabase.tls.certresolver=leresolver\"\n\n  mj_pgadmin:\n    image: dpage/pgadmin4\n    environment:\n      PGADMIN_DEFAULT_EMAIL: ${EMAIL:-pgadmin4@pgadmin.org}\n      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}\n      PGADMIN_CONFIG_SERVER_MODE: 'False'\n    restart: unless-stopped\n    profiles:\n      - admin\n      - all\n    healthcheck: \n      test: [\"CMD\", \"wget\", \"-q\", \"-O\", \"-\", \"http://localhost:5050\"]\n      interval: 1m30s\n      timeout: 10s\n      retries: 3\n    volumes:\n      - pgadmin:/var/lib/pgadmin\n    ports:\n      - \"${PGADMIN_PORT:-5050}:80\"\n    networks:\n      - lan\n      - traefik_network\n    restart: unless-stopped\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.docker.network=traefik_network\"\n      - \"traefik.http.routers.pgadmin.entrypoints=web,websecure\"\n      - \"traefik.http.routers.pgadmin.rule=Host(`${PGADMIN:-pgadmin}.${DOMAIN}`)\"\n      - \"traefik.http.services.pgadmin.loadbalancer.server.port=80\"\n      - \"traefik.http.routers.pgadmin.tls=true\"\n      - \"traefik.http.routers.pgadmin.tls.certresolver=leresolver\"\n\n\nvolumes:\n  imgpush:\n  db:\n  pgadmin:\n  redis_data:\n    driver: local\n\nnetworks:\n  lan:\n  traefik_network:\n    external: true \n",
            "docker/Dockerfile": "FROM python:3.11\n\nRUN apt-get update && \\\n    apt-get install -y postgresql-client && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /code\n\nCOPY ./requirements.txt .\n\nRUN pip install --no-cache-dir -U pip && \\\n    pip install --no-cache-dir -r requirements.txt\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8877\"]\n",
            ".circleci/config.yml": "version: 2\njobs:\n  build:\n    # We need a machine executor to mount volumes\n    machine:\n      image: ubuntu-1604:201903-01\n\n    environment:\n      TEST_RESULTS: /tmp/test-results\n\n    steps:\n      - checkout\n      - run:\n          name: Add a secret key\n          command: echo \"DJANGO_SECRET_KEY=ersldnfnfkfhfhefhfadhfadsklfhaskdlfhdvn\" >> .env.local\n      - run:\n          name: Start container\n          command: |\n            set -x\n            docker-compose up -d\n            # docker-compose start 3 services\n            # - project_web_1\n            # - project_dash_1\n            # - project_db_1\n\n            # Recover service name for web\n            WEB=$(docker ps --format \"{{.Names}}\" -f name=web)\n\n            # we start another container with curl in the same network\n            docker run --network container:$WEB \\\n              circleci/buildpack-deps:curl-dind --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8000/api/\n      \n            mkdir -p $TEST_RESULTS\n            \n            # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails\n            # without this option, script returns success regardless of testing result due to pipe after test command\n            set -ou pipefail\n            \n            docker exec -it $WEB python manage.py test | tee ${TEST_RESULTS}/django-test.out\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "backup.sh",
            "entry.sh"
        ],
        "folders": []
    }
}