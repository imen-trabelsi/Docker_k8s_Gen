{
    "source_code_info": {
        "language": "PHP",
        "framework": "PHP",
        "dependencies": {
            "composer.json": "{\n\t\"name\": \"smr/smr\",\n\t\"description\": \"SMR\",\n\t\"license\": \"AGPL-3.0\",\n\t\"require\": {\n\t\t\"abraham/twitteroauth\": \"7.0.0\",\n\t\t\"doctrine/dbal\": \"4.2.2\",\n\t\t\"ext-curl\": \"*\",\n\t\t\"ext-json\": \"*\",\n\t\t\"ext-pdo_mysql\": \"*\",\n\t\t\"google/recaptcha\": \"1.3.0\",\n\t\t\"league/oauth2-facebook\": \"2.2.0\",\n\t\t\"league/oauth2-google\": \"4.0.1\",\n\t\t\"php\": \"^8.2\",\n\t\t\"php-di/php-di\": \"7.0.8\",\n\t\t\"phpmailer/phpmailer\": \"6.9.3\",\n\t\t\"team-reflex/discord-php\": \"10.3.8\",\n\t\t\"vanilla/nbbc\": \"2.6.0\"\n\t},\n\t\"autoload\": {\n\t\t\"psr-4\": {\n\t\t\t\"Smr\\\\\": \"src/lib/Smr/\",\n\t\t\t\"Smr\\\\Irc\\\\\": \"src/tools/irc/\",\n\t\t\t\"Smr\\\\Npc\\\\\": \"src/tools/npc/\",\n\t\t\t\"Smr\\\\Pages\\\\\": \"src/pages/\"\n\t\t}\n\t},\n\t\"scripts\": {\n\t\t\"start:dev\": [\n\t\t\t\"docker compose up -d traefik smr-dev\"\n\t\t],\n\t\t\"rebuild:dev\": [\n\t\t\t\"docker compose up --build -d smr-dev\"\n\t\t],\n\t\t\"start:test-services\": [\n\t\t\t\"docker compose --env-file test/env up -d mysql-test\",\n\t\t\t\"@rebuild:test-services\"\n\t\t],\n\t\t\"reset:test-services\": [\n\t\t\t\"docker compose --env-file test/env stop mysql-test\",\n\t\t\t\"docker compose --env-file test/env rm -f -v mysql-test\",\n\t\t\t\"@start:test-services\"\n\t\t],\n\t\t\"rebuild:test-services\": [\n\t\t\t\"docker compose --env-file test/env build phpunit\",\n\t\t\t\"docker compose --env-file test/env run --rm flyway-test\"\n\t\t],\n\t\t\"test\": [\n\t\t\t\"@phpstan\",\n\t\t\t\"@phpunit\",\n\t\t\t\"@phpcs\",\n\t\t\t\"@rector\"\n\t\t],\n\t\t\"phpunit\": [\n\t\t\t\"docker compose --env-file test/env run --rm phpunit\"\n\t\t],\n\t\t\"phpcs\": [\n\t\t\t\"docker compose --env-file test/env run --rm phpcs\"\n\t\t],\n\t\t\"phpcbf\": [\n\t\t\t\"docker compose --env-file test/env run --rm phpcbf\"\n\t\t],\n\t\t\"phpstan\": [\n\t\t\t\"docker compose --env-file test/env run --rm phpstan\"\n\t\t],\n\t\t\"rector\": [\n\t\t\t\"docker compose --env-file test/env run --rm rector --dry-run\"\n\t\t],\n\t\t\"stop\": [\n\t\t\t\"docker compose stop\",\n\t\t\t\"docker compose rm --force\"\n\t\t]\n\t},\n\t\"config\": {\n\t\t\"allow-plugins\": {\n\t\t\t\"dealerdirect/phpcodesniffer-composer-installer\": false\n\t\t},\n\t\t\"process-timeout\": 0\n\t},\n\t\"autoload-dev\": {\n\t\t\"psr-4\": {\n\t\t\t\"SmrTest\\\\\": \"test/SmrTest/\"\n\t\t}\n\t},\n\t\"require-dev\": {\n\t\t\"fig-r/psr2r-sniffer\": \"2.1.2\",\n\t\t\"overtrue/phplint\": \"9.5.5\",\n\t\t\"phpstan/phpstan\": \"2.1.4\",\n\t\t\"phpunit/phpunit\": \"11.5.2\",\n\t\t\"phpunit/php-code-coverage\": \"11.0.8\",\n\t\t\"rector/rector\": \"2.0.6\",\n\t\t\"squizlabs/php_codesniffer\": \"3.11.3\"\n\t}\n}\n"
        },
        "database": "MySQL",
        "build_system": "Composer",
        "config_files": {
            "docker-compose.yml": "networks:\n    frontend:\n        name: frontend\n        external: false\n    backend:\n        name: backend\n        external: false\n    backend-test:\n        name: backend-test\n        external: false\n\n# Base configuration for services that use the local smr image\nx-smr-base: &smr-base\n    build:\n        context: .\n        args:\n            - NO_DEV\n    image: local/smr\n    pull_policy: never\n    environment: &smr-base-env\n        MYSQL_HOST:\n        MYSQL_USER:\n        MYSQL_DATABASE:\n        MYSQL_PASSWORD_FILE: /run/secrets/mysql-password\n    secrets:\n        - source: mysql-password\n          mode: 0444\n\n# Web configuration for `smr` (production) and `smr-dev` (testing).\nx-smr-web: &smr-web\n    <<: *smr-base\n    container_name: ${SMR_HOST}\n    networks:\n        - frontend\n        - backend\n    labels:\n        - \"traefik.enable=true\"\n        - \"traefik.http.routers.${SMR_HOST}.rule=${SMR_RULE:-PathPrefix(`/`)}\"\n    depends_on:\n        - mysql\n        - smtp\n    environment:\n        <<: *smr-base-env\n        XDEBUG_MODE:\n        DISABLE_PHPDI_COMPILATION:\n    # Allow the process to be interruptible with SIGINT.\n    # For tests, this may corrupt the test database and require a reset.\n    # CLI programs may not be cleaned up properly if interrupted.\n    # (see https://github.com/docker-library/php/issues/505)\n    init: true\n\n# Base configuration for the SMR command line tools\nx-smr-cli: &smr-cli\n    <<: *smr-base\n    networks:\n        - backend\n    depends_on:\n        - mysql\n        - smtp\n    volumes:\n        - ./config:/smr/config:ro\n        # Mount the source code instead of copying it.\n        - ./src:/smr/src:ro\n\n# Base configuration for SMR testing tools\nx-smr-test: &smr-test\n    <<: *smr-base\n    environment:\n        <<: *smr-base-env\n        XDEBUG_MODE: \"off\"\n    volumes:\n        - ./config/config.specific.sample.php:/smr/config/config.specific.php:ro\n        - ./phpunit.xml:/smr/phpunit.xml:ro\n        - ./phpstan.neon.dist:/smr/phpstan.neon.dist:ro\n        - ./phpcs.xml:/smr/phpcs.xml:ro\n        - ./rector.php:/smr/rector.php:ro\n        # Mount the source code instead of copying it.\n        - ./src:/smr/src:rw\n        - ./test:/smr/test:rw\n\nx-mysql-common: &mysql-common\n    image: mysql:8.1\n    container_name: ${MYSQL_HOST}\n    environment:\n        - MYSQL_USER\n        - MYSQL_DATABASE\n        - MYSQL_PASSWORD_FILE=/run/secrets/mysql-password\n        - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root-password\n    secrets:\n        - mysql-password\n        - mysql-root-password\n    command: [ \"mysqld\",\n               \"--character-set-server=utf8\",\n               \"--collation-server=utf8_general_ci\" ]\n    healthcheck:\n        test: mysql -uroot -p$$(cat $$MYSQL_ROOT_PASSWORD_FILE) -e 'SHOW DATABASES'\n        interval: 5s\n        timeout: 20s\n\nservices:\n    smr:\n        <<: *smr-web\n        volumes:\n            - ./vol_upload:/smr/src/htdocs/upload:rw\n            - ./config:/smr/config:ro\n\n    smr-dev:\n        <<: *smr-web\n        volumes:\n            - ./vol_upload:/smr/src/htdocs/upload:rw\n            - ./config:/smr/config:ro\n            # Mount the source code instead of copying it.\n            - ./src:/smr/src:ro\n            # Directory for Xdebug profiler output\n            - ./vol_xdebug:/tmp/xdebug:rw\n\n    smtp:\n        image: mwader/postfix-relay\n        networks:\n            - backend\n        environment:\n            - POSTFIX_myhostname=hostname.local\n            - OPENDKIM_DOMAINS=smrealms.de=key1\n        volumes:\n            - ./opendkim:/etc/opendkim/keys/smrealms.de:rw\n\n    flyway: &flyway-common\n        image: flyway/flyway:10.14.0-alpine\n        # Allow retries in case the mysql service is still spinning up\n        command: migrate\n        environment:\n            FLYWAY_CONNECT_RETRIES: 20\n            FLYWAY_PASSWORD: ${MYSQL_PASSWORD}\n            FLYWAY_URL: \"jdbc:mysql://${MYSQL_HOST}/${MYSQL_DATABASE}?allowPublicKeyRetrieval=true&useSSL=false\"\n            FLYWAY_USER: ${MYSQL_USER}\n        networks:\n            - backend\n        depends_on:\n            - mysql\n        volumes:\n            - ./db/patches:/flyway/sql:ro\n\n    flyway-test:\n        <<: *flyway-common\n        networks:\n            - backend-test\n        depends_on:\n            - mysql-test\n\n    mysql:\n        <<: *mysql-common\n        networks:\n            - backend\n        volumes:\n            - ./vol_db:/var/lib/mysql:rw\n\n    # MySQL container with no volumes mounted for testing\n    mysql-test:\n        <<: *mysql-common\n        networks:\n            - backend-test\n\n    phpunit:\n        <<: *smr-test\n        entrypoint: vendor/bin/phpunit\n        networks:\n            - backend-test\n        environment:\n            <<: *smr-base-env\n            XDEBUG_MODE: coverage\n        depends_on:\n            mysql-test:\n                condition: service_healthy\n\n    phpstan:\n        <<: *smr-test\n        entrypoint: vendor/bin/phpstan --memory-limit=4G --ansi analyse -v\n\n    phpcs:\n        <<: *smr-test\n        entrypoint: vendor/bin/phpcs --report-code --report-source\n\n    phpcbf:\n        <<: *smr-test\n        entrypoint: vendor/bin/phpcbf\n\n    rector:\n        <<: *smr-test\n        entrypoint: vendor/bin/rector process\n\n    pma:\n        image: phpmyadmin/phpmyadmin\n        networks:\n            - frontend\n            - backend\n        environment:\n            PMA_HOST: ${MYSQL_HOST}\n            PMA_ABSOLUTE_URI: /pma/\n        labels:\n            - \"traefik.enable=true\"\n            - \"traefik.http.routers.pma-${MYSQL_HOST}.rule=${SMR_RULE:-PathPrefix(`/`)} && PathPrefix(`/pma`)\"\n            - \"traefik.http.routers.pma-${MYSQL_HOST}.middlewares=slash-then-strip@file\"\n        depends_on:\n            - mysql\n\n    discord:\n        command: php src/tools/discord/bot.php\n        <<: *smr-cli\n\n    irc:\n        command: php src/tools/irc/irc.php\n        <<: *smr-cli\n\n    npc:\n        command: php src/tools/npc/npc.php\n        <<: *smr-cli\n\n    traefik:\n        image: traefik:3.3\n        networks:\n            - frontend\n        volumes:\n            - /var/run/docker.sock:/var/run/docker.sock:ro\n            - ./traefik:/etc/traefik:ro\n        labels:\n            - \"traefik.enable=true\"\n            - \"traefik.http.routers.traefik.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)\"\n            - \"traefik.http.routers.traefik.service=api@internal\"\n            - \"traefik.http.routers.traefik.middlewares=add-slash@file\"\n        ports:\n            - \"80:80\"\n            - \"443:443\"\n\n    # Generate rich API documentation of the SMR source code.\n    api-docs:\n        build:\n            context: .\n            dockerfile: ./api-docs/Dockerfile\n        networks:\n            - frontend\n        labels:\n            - \"traefik.enable=true\"\n            - \"traefik.http.routers.api-docs.rule=PathPrefix(`/docs`)\"\n            - \"traefik.http.routers.api-docs.middlewares=slash-then-strip@file\"\n\n    # Web interface for managing Docker services\n    portainer:\n        image: portainer/portainer-ce\n        networks:\n            - frontend\n        labels:\n            - \"traefik.enable=true\"\n            - \"traefik.http.routers.portainer.rule=PathPrefix(`/docker`)\"\n            - \"traefik.http.routers.portainer.middlewares=slash-then-strip@file\"\n            - \"traefik.http.services.portainer.loadbalancer.server.port=9000\"\n        command: -H unix:///var/run/docker.sock\n        volumes:\n            - /var/run/docker.sock:/var/run/docker.sock:ro\n            - ./vol_portainer:/data:rw\n\n    # Web interface to display Xdebug profiler results\n    webgrind:\n        image: jokkedk/webgrind\n        networks:\n            - frontend\n        labels:\n            - \"traefik.enable=true\"\n            - \"traefik.http.routers.webgrind.rule=PathPrefix(`/webgrind`)\"\n            - \"traefik.http.routers.webgrind.middlewares=slash-then-strip@file\"\n        volumes:\n            # Webgrind looks for Xdebug profiler files in /tmp by default\n            - ./vol_xdebug:/tmp:rw\n            # Files mapped under /host will be available for code lookup\n            - ./src:/host/smr/src:ro\n\nsecrets:\n    mysql-password:\n        environment: \"MYSQL_PASSWORD\"\n    mysql-root-password:\n        environment: \"MYSQL_ROOT_PASSWORD\"\n",
            ".github/actions/api-docs/Dockerfile": "FROM php:8.3.8-cli-alpine\n\nRUN curl -L -O https://github.com/phpDocumentor/phpDocumentor/releases/download/v3.7.1/phpDocumentor.phar\nRUN chmod +x phpDocumentor.phar\nRUN mv phpDocumentor.phar /usr/local/bin/phpdoc\n\nENTRYPOINT [\"phpdoc\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}