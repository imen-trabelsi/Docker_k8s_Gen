# Based on the Node.js alpine image.
FROM node:alpine as builder

# Set environment variables
ENV NO_DEV=1

# Set Workdirectory
WORKDIR /smr/

# Install dependencies
RUN apt-get --quiet=2 update \ 
 && apt-get --quiet=2 install zip unzip \
 && rm -rf /var/lib/apt/lists/* \ 

# Check Environment
RUN MODE=$([ "$NO_DEV" = "0" ] && echo "development" || echo "production") \
 && echo "Using $MODE php.ini" \

# Install dev tools
RUN if [ "$NO_DEV" = "0" ]; then \
    docker-php-ext-install pcntl \
    && pecl install xdebug > /dev/null \
    && docker-php-ext-enable xdebug \
    && echo "xdebug.output_dir = /tmp/xdebug" > "$PHP_INI_DIR/conf.d/xdebug.ini" \
    && mkdir /tmp/xdebug; \

# Disable apache logs
RUN sed -i 's|CustomLog.*|CustomLog /dev/null common|' /etc/apache2/sites-enabled/000-default.conf

# Security Considerations
RUN sed -i 's/AllowOverride All/AllowOverride None/g' /etc/apache2/conf-enabled/docker-php.conf

# Install composer locally and run composer install, no-dev
RUN curl -sS https://getcomposer.org/installer \
  | php -- --install-dir=/usr/local/bin --filename=composer --version=2.8.4 \

# Node setup
RUN npm i --save grunt grunt-contrib-uglify grunt-contrib-cssmin grunt-cache-bust

# Build js and css files
RUN npx grunt

RUN rm -rf node_modules /var/www/html/ && ln -s "$(pwd)/htdocs" /var/www/html

# Change owner of upload folder
RUN chown www-data ./src/htdocs/upload

RUN a2enmod headers

COPY src src
COPY Gruntfile.js .
COPY composer.json .
COPY .git/HEAD .git/HEAD
COPY .git/refs .git/refs
COPY apache/cache-static.conf /etc/apache2/conf-enabled/cache-static.conf

# Get commit hash
RUN REF="ref: HEAD" \
 && while [ -n "$(echo $REF | grep ref:)" ]; do REF=$(cat ".git/$(echo $REF | awk '{print $2}')"); done \
