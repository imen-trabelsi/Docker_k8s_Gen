{
    "source_code_info": {
        "language": "Elixir",
        "framework": null,
        "dependencies": {
            "mix.exs": "#\n# This file is part of Astarte.\n#\n# Copyright 2020-2021 Ispirata Srl\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\ndefmodule AstarteE2E.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :astarte_e2e,\n      version: \"1.3.0-dev\",\n      elixir: \"~> 1.15\",\n      start_permanent: Mix.env() == :prod,\n      dialyzer_cache_directory: dialyzer_cache_directory(Mix.env()),\n      deps: deps()\n    ]\n  end\n\n  # Run \"mix help compile.app\" to learn about applications.\n  def application do\n    [\n      mod: {AstarteE2E.Application, []},\n      extra_applications: [:logger]\n    ]\n  end\n\n  defp dialyzer_cache_directory(:ci) do\n    \"dialyzer_cache\"\n  end\n\n  defp dialyzer_cache_directory(_) do\n    nil\n  end\n\n  # Run \"mix help deps\" to learn about dependencies.\n  defp deps do\n    [\n      {:astarte_device, github: \"astarte-platform/astarte-device-sdk-elixir\"},\n      {:phoenix_gen_socket_client, \"~> 4.0\"},\n      {:websocket_client, \"~> 1.5\"},\n      {:jason, \"~> 1.0\"},\n      {:plug_cowboy, \"~> 2.0\"},\n      {:skogsra, \"~> 2.3\"},\n      {:telemetry, \"~> 0.4\"},\n      {:telemetry_metrics_prometheus_core, \"~> 0.4\"},\n      {:telemetry_metrics, \"~> 0.4\"},\n      {:telemetry_poller, \"~> 0.4\"},\n      {:logfmt, \"~> 3.3\"},\n      {:pretty_log, \"~> 0.1\"},\n      {:observer_cli, \"~> 1.5\"},\n      {:bamboo, \"~> 1.6\"},\n      {:bamboo_config_adapter, \"~> 1.0\"},\n      {:hukai, \"~> 0.3\"},\n      {:dialyzex, github: \"Comcast/dialyzex\", only: [:dev, :ci]},\n      # Workaround for Elixir 1.15 / ssl_verify_fun issue\n      # See also: https://github.com/deadtrickster/ssl_verify_fun.erl/pull/27\n      {:ssl_verify_fun, \"~> 1.1.0\", manager: :rebar3, override: true}\n    ]\n  end\nend\n"
        },
        "database": null,
        "build_system": "Mix",
        "config_files": {
            ".env": "# The top level domain of your astarte instance.\n# In case you want to make Astarte visible in your LAN, consider setting the variable\n# to <HOST_IP>.nip.io\nDOCKER_COMPOSE_ASTARTE_BASE_DOMAIN=astarte.localhost\n\n# This is the URL Pairing API will return for connecting to the broker\nPAIRING_BROKER_URL=mqtts://broker.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}:8883/\n\nRPC_AMQP_CONNECTION_HOST=rabbitmq\nCASSANDRA_NODES=scylla:9042\n\n# Read documentation to find out how to configure VerneMQ according to your setup.\n# Default configuration uses a self-signed certificate.\nVERNEMQ_ENABLE_SSL_LISTENER=true\n#USE_LETSENCRYPT=true\n#LETSENCRYPT_DOMAINS=broker.example.com\n#LETSENCRYPT_EMAIL=info@example.com\n#LETSENCRYPT_STAGING=false\n",
            "docker-compose.yml": "services:\n  astarte-housekeeping:\n    image: astarte/astarte_housekeeping:snapshot\n    env_file:\n      - ./.env\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"scylla\"\n\n  astarte-housekeeping-api:\n    image: astarte/astarte_housekeeping_api:snapshot\n    env_file:\n      - ./.env\n    environment:\n      HOUSEKEEPING_API_JWT_PUBLIC_KEY_PATH: \"/keys/housekeeping_public.pem\"\n    volumes:\n      - type: bind\n        source: ./compose/astarte-keys/housekeeping_public.pem\n        target: /keys/housekeeping_public.pem\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"traefik\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-housekeeping-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-housekeeping-api.rule=PathPrefix(`/housekeeping`)\"\n      - \"traefik.http.routers.astarte-housekeeping-api.entrypoints=web\"\n      - \"traefik.http.routers.astarte-housekeeping-api.middlewares=astarte-housekeeping-api\"\n      - \"traefik.http.routers.astarte-housekeeping-api.service=astarte-housekeeping-api\"\n      - \"traefik.http.middlewares.astarte-housekeeping-api.stripprefix.prefixes=/housekeeping\"\n      - \"traefik.http.middlewares.astarte-housekeeping-api.stripprefix.forceSlash=false\"\n      - \"traefik.http.services.astarte-housekeeping-api.loadbalancer.server.port=4001\"\n\n  astarte-realm-management:\n    image: astarte/astarte_realm_management:snapshot\n    env_file:\n      - ./.env\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"scylla\"\n\n  astarte-realm-management-api:\n    image: astarte/astarte_realm_management_api:snapshot\n    env_file:\n      - ./.env\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"traefik\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-realm-management-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-realm-management-api.rule=PathPrefix(`/realmmanagement`)\"\n      - \"traefik.http.routers.astarte-realm-management-api.entrypoints=web\"\n      - \"traefik.http.routers.astarte-realm-management-api.middlewares=astarte-realm-management-api\"\n      - \"traefik.http.routers.astarte-realm-management-api.service=astarte-realm-management-api\"\n      - \"traefik.http.middlewares.astarte-realm-management-api.stripprefix.prefixes=/realmmanagement\"\n      - \"traefik.http.middlewares.astarte-realm-management-api.stripprefix.forceSlash=false\"\n      - \"traefik.http.services.astarte-realm-management-api.loadbalancer.server.port=4000\"\n\n  astarte-pairing:\n    image: astarte/astarte_pairing:snapshot\n    env_file:\n      - ./.env\n    environment:\n      PAIRING_CFSSL_URL: \"http://cfssl:8080\"\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"scylla\"\n\n  astarte-pairing-api:\n    image: astarte/astarte_pairing_api:snapshot\n    env_file:\n      - ./.env\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"traefik\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-pairing-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-pairing-api.rule=PathPrefix(`/pairing`)\"\n      - \"traefik.http.routers.astarte-pairing-api.entrypoints=web\"\n      - \"traefik.http.routers.astarte-pairing-api.middlewares=astarte-pairing-api\"\n      - \"traefik.http.routers.astarte-pairing-api.service=astarte-pairing-api\"\n      - \"traefik.http.middlewares.astarte-pairing-api.stripprefix.prefixes=/pairing\"\n      - \"traefik.http.middlewares.astarte-pairing-api.stripprefix.forceSlash=false\"\n      - \"traefik.http.services.astarte-pairing-api.loadbalancer.server.port=4003\"\n\n  astarte-appengine-api:\n    image: astarte/astarte_appengine_api:snapshot\n    env_file:\n      - ./.env\n    environment:\n      APPENGINE_API_ROOMS_AMQP_CLIENT_HOST: rabbitmq\n    restart: on-failure\n    depends_on:\n      - rabbitmq\n      - scylla\n      - traefik\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-appengine-api.rule=Host(`api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-appengine-api.rule=PathPrefix(`/appengine`)\"\n      - \"traefik.http.routers.astarte-appengine-api.entrypoints=web\"\n      - \"traefik.http.routers.astarte-appengine-api.middlewares=astarte-appengine-api\"\n      - \"traefik.http.routers.astarte-appengine-api.service=astarte-appengine-api\"\n      - \"traefik.http.middlewares.astarte-appengine-api.stripprefix.prefixes=/appengine\"\n      - \"traefik.http.middlewares.astarte-appengine-api.stripprefix.forceSlash=false\"\n      - \"traefik.http.services.astarte-appengine-api.loadbalancer.server.port=4002\"\n\n  astarte-data-updater-plant:\n    image: astarte/astarte_data_updater_plant:snapshot\n    env_file:\n      - ./.env\n    environment:\n      DATA_UPDATER_PLANT_AMQP_CONSUMER_HOST: \"rabbitmq\"\n      DATA_UPDATER_PLANT_AMQP_PRODUCER_HOST: \"rabbitmq\"\n      DATA_UPDATER_PLANT_AMQP_PRODUCER_PORT: \"5672\"\n      DATA_UPDATER_PLANT_AMQP_PRODUCER_USERNAME: \"guest\"\n      DATA_UPDATER_PLANT_AMQP_PRODUCER_PASSWORD: \"guest\"\n      DATA_UPDATER_PLANT_AMQP_PRODUCER_VIRTUAL_HOST: \"/\"\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"scylla\"\n\n  astarte-trigger-engine:\n    image: astarte/astarte_trigger_engine:snapshot\n    env_file:\n      - ./.env\n    environment:\n      TRIGGER_ENGINE_AMQP_CONSUMER_HOST: \"rabbitmq\"\n    restart: on-failure\n    depends_on:\n      - \"rabbitmq\"\n      - \"scylla\"\n\n  astarte-dashboard:\n    image: astarte/astarte-dashboard:snapshot\n    volumes:\n      - ./compose/astarte-dashboard/config.json:/usr/share/nginx/html/user-config/config.json\n    depends_on:\n      - \"astarte-realm-management-api\"\n      - \"astarte-appengine-api\"\n      - \"traefik\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-dashboard.rule=Host(`dashboard.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-dashboard.entrypoints=web\"\n      - \"traefik.http.routers.astarte-dashboard.service=astarte-dashboard\"\n      - \"traefik.http.services.astarte-dashboard.loadbalancer.server.port=80\"\n\n  astarte-grafana:\n    image: astarte/grafana:snapshot\n    depends_on:\n      - \"astarte-appengine-api\"\n      - \"traefik\"\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.astarte-grafana.rule=Host(`grafana.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.http.routers.astarte-grafana.entrypoints=web\"\n      - \"traefik.http.routers.astarte-grafana.service=astarte-grafana\"\n      - \"traefik.http.services.astarte-grafana.loadbalancer.server.port=3000\"\n\n  traefik:\n    image: traefik:v2.9\n    restart: on-failure\n    command:\n      # Uncomment this if you want to enable Traefik's web UI\n      # - \"--api.insecure=true\"\n      # Tells Traefik to listen to docker\n      - \"--providers.docker\"\n      # Don't expose everything\n      - \"--providers.docker.exposedbydefault=false\"\n      # Expose Astarte API/Dahsboard/Grafana\n      - \"--entrypoints.web.address=:80\"\n      # Expose Astarte broker\n      - \"--entryPoints.vernemq.address=:8883\"\n    ports:\n      # The HTTP port\n      - \"80:80\"\n      # Uncomment this if you want to display Traefik's web UI (enabled by --api.insecure=true)\n      # - \"8080:8080\"\n      # VerneMQ's SSL Listener\n      - \"8883:8883\"\n    volumes:\n      # So that Traefik can listen to the Docker events\n      - /var/run/docker.sock:/var/run/docker.sock\n    networks:\n      default:\n        aliases:\n          # Create traefik aliases for its hosts, so that other containers\n          # in the same network can curl them.\n          - api.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}\n          - dashboard.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}\n          - grafana.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}\n          - broker.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}\n\n  # RabbitMQ\n  rabbitmq:\n    image: rabbitmq:3.12.0-management\n    restart: on-failure\n    volumes:\n      - rabbitmq-data:/var/lib/rabbitmq\n\n  # CFSSL\n  cfssl:\n    image: astarte/cfssl:1.5.0-astarte.4\n    volumes:\n      - ./compose/cfssl-config:/config\n      - cfssl-data:/data\n    command: cfssl serve -address=0.0.0.0 -ca=/data/ca.pem -ca-key=/data/ca-key.pem -port=8080 -config=/etc/cfssl/ca_root_config.json\n    # Restart if we fail\n    restart: on-failure\n\n  # Scylla\n  scylla:\n    image: scylladb/scylla:6.2\n    restart: on-failure\n    volumes:\n      - scylla-data:/var/lib/scylla\n\n  # VerneMQ\n  vernemq:\n    image: astarte/vernemq:snapshot\n    env_file:\n      - ./.env\n    environment:\n      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CAFILE: \"/opt/vernemq/etc/ca.pem\"\n      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__CERTFILE: \"/opt/vernemq/etc/cert.pem\"\n      DOCKER_VERNEMQ_LISTENER__SSL__DEFAULT__KEYFILE: \"/opt/vernemq/etc/privkey.pem\"\n      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__USERNAME: \"guest\"\n      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__PASSWORD: \"guest\"\n      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__AMQP__HOST: \"rabbitmq\"\n      DOCKER_VERNEMQ_USER_appengine: \"appengine\"\n      DOCKER_VERNEMQ_ASTARTE_VMQ_PLUGIN__CASSANDRA__NODES: \"scylla:9042\"\n      CFSSL_URL: \"http://cfssl:8080\"\n    volumes:\n      - vernemq-data:/opt/vernemq/data\n      - ./compose/vernemq-certs:/etc/ssl/vernemq-certs\n    depends_on:\n      - \"cfssl\"\n      - \"rabbitmq\"\n      - \"traefik\"\n    # Ensure we wait for rabbit and cfssl\n    command: start_vernemq\n    # Restart if we fail\n    restart: on-failure\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.tcp.routers.vernemq.rule=HostSNI(`broker.${DOCKER_COMPOSE_ASTARTE_BASE_DOMAIN}`)\"\n      - \"traefik.tcp.routers.vernemq.entrypoints=vernemq\"\n      - \"traefik.tcp.routers.vernemq.tls.passthrough=true\"\n      - \"traefik.tcp.routers.vernemq.service=vernemq\"\n      - \"traefik.tcp.services.vernemq.loadbalancer.server.port=8883\"\n\nvolumes:\n  rabbitmq-data:\n  scylla-data:\n  vernemq-data:\n  cfssl-data:\n\nnetworks:\n  default:\n    name: astarte\n",
            "Dockerfile": "FROM --platform=${BUILDPLATFORM} hexpm/elixir:1.15.7-erlang-26.1-debian-bookworm-20230612-slim as base\n\n# install build dependencies\n# --allow-releaseinfo-change allows to pull from 'oldstable'\nRUN apt-get update --allow-releaseinfo-change -y && \\\n    apt-get install -y \\\n    build-essential \\\n    git \\\n    openssl \\\n    ca-certificates \\\n    inotify-tools && \\\n    apt-get clean && \\\n    rm -f /var/lib/apt/lists/*_*\n\n# Install hex\nRUN mix local.hex --force && \\\n    mix local.rebar --force && \\\n    mix hex.info\n\nWORKDIR /src\n\nFROM base as deps\n\nARG BUILD_ENV=prod\n\nENV MIX_ENV=${BUILD_ENV}\n\n# Cache elixir deps\nADD mix.exs mix.lock ./\nRUN mix do deps.get --only ${MIX_ENV}, deps.compile\n\nFROM deps as builder\n\nENV MIX_ENV=${BUILD_ENV}\n\n# Add all the rest\nADD . .\nENTRYPOINT [ \"/bin/sh\", \"-c\" ]\n# ------------------------\n# Only for production\nFROM builder as release\n\nENV MIX_ENV=${BUILD_ENV}\n\nCOPY --from=builder /src .\n\nWORKDIR /src\nRUN mix do compile, release\n\nRUN mkdir -p /rel && \\\n    cp -r _build/$BUILD_ENV/rel /rel\n# Check if entrypoint.sh exists,\n# otherwise a default script is created\nRUN if [ -f \"./entrypoint.sh\" ]; then \\\n    cp ./entrypoint.sh /rel/entrypoint.sh; \\\n    else \\\n    echo '#!/bin/bash' >> /rel/entrypoint.sh; \\\n    echo exec \\$@ >> /rel/entrypoint.sh; \\\n    fi; \\\n    chmod +x /rel/entrypoint.sh\n\n# Note: it is important to keep Debian versions in sync, \n# or incompatibilities between libcrypto will happen\nFROM --platform=${BUILDPLATFORM} debian:bookworm-slim\n\n# Set the locale\nENV LANG C.UTF-8\n\n# We need SSL\nRUN apt-get -qq update -y && \\\n    apt-get -qq install \\\n    openssl \\\n    ca-certificates \\\n    && apt-get clean \\\n    && rm -f /var/lib/apt/lists/*_*\n\nWORKDIR /app\n\nCOPY --from=release --chown=nobody:nobody /rel/* .\n\n# Symlink to the service, to make a single entry point \n# for all the apps\nRUN APP_NAME=$(ls | head -n 1) && \\\n    ln -s ${APP_NAME}/bin/${APP_NAME} astarte-service \n\nUSER nobody\n\nENTRYPOINT [ \"./entrypoint.sh\" ]\nCMD [\"./astarte-service\", \"start\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".formatter.exs",
            ".gitignore",
            "Dockerfile",
            "README.md",
            "mix.exs",
            "mix.lock"
        ],
        "folders": [
            "config",
            "lib",
            "priv",
            "test"
        ]
    }
}