{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "setup.py": "#!/usr/bin/env python\n\"\"\"See <https://setuptools.readthedocs.io/en/latest/>.\n\"\"\"\nfrom setuptools import setup, find_packages\n\nsetup(\n    # \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    # \u2503 Publication Metadata \u2503\n    # \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n    version=\"1.1.0\",\n    name=\"datacatalog-core\",\n    description=\"Core of the Amsterdam Data Catalog Project\",\n    # TODO:\n    # long_description=\"\"\"\n    #\n    # \"\"\",\n    url=\"https://github.com/Amsterdam/datacatalog-core\",\n    author=\"Amsterdam Data en Informatie\",\n    author_email=\"datapunt@amsterdam.nl\",\n    license=\"Mozilla Public License Version 2.0\",\n    classifiers=[\n        \"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3.5\",\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"datacatalog-core=datacatalog.main:main\",\n        ]\n    },\n    # \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    # \u2503 Packages and package data \u2503\n    # \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n    package_dir={\"\": \"src\"},\n    packages=find_packages(\"src\"),\n    # TODO: is there a more elegant way to do this?\n    package_data={\n        \"datacatalog\": [\"*.yml\"],\n        \"datacatalog.handlers\": [\"*.yml\"],\n        \"datacatalog.plugins\": [\"*.yml\"],\n        \"datacatalog.plugins.postgres\": [\"*.yml\"],\n        \"datacatalog.plugins.swift\": [\"*.yml\"],\n    },\n    # \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    # \u2503 Requirements \u2503\n    # \u2517\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u251b\n    python_requires=\">=3.8\",\n    setup_requires=[\"pytest-runner\"],\n    install_requires=[\n        \"aiohttp==3.10.11\",\n        \"aiohttp_cors==0.7.0\",\n        \"aiopluggy==0.1.5rc3\",\n        \"amsterdam-schema==0.1.2\",\n        \"asyncpg==0.26.0\",  # for postgres plugin\n        \"bleach==3.3.0\",  # Markdown to text conversion\n        \"cryptography==43.0.1\",\n        \"datapunt_config_loader==1.1.2\",\n        \"jsonschema==3.2.0\",\n        \"jsonpointer==2.0\",\n        \"pluggy==0.13.1\",\n        \"jwcrypto==1.5.6\",\n        \"pyld==1.0.5\",\n        \"PyYaml==5.4\",\n        \"sentry-sdk==2.8.0\",\n        \"whoosh==2.7.4\",\n        \"requests==2.32.0\",\n        \"urllib3==1.26.19\",\n        # Recommended by aiohttp docs:\n        \"aiodns==2.0.0\",  # optional asynchronous DNS client\n        \"uvloop==0.17.0\",  # optional fast eventloop for asyncio\n        \"click==7.1.2\",\n    ],\n    extras_require={\n        \"docs\": [\n            # 'MacFSEvents',  # Too Mac-specific?\n            \"Sphinx==3.0.3\",\n            \"sphinx-autobuild==0.7.1\",\n            \"sphinx-autodoc-typehints==1.10.3\",\n            \"sphinx-rtd-theme==0.4.3\",\n        ],\n        \"dev\": [\"aiohttp-devtools==0.13.1\"],\n        \"test\": [\n            \"mockito==1.2.1\",\n            \"pytest==5.4.2\",\n            \"pytest-cov==2.8.1\",\n            \"pytest-aiohttp==0.3.0\",\n        ],\n    },\n    # To keep PyCharm from complaining about missing requirements:\n    tests_require=[\n        \"mockito==1.2.1\",\n        \"pytest==5.4.2\",\n        \"pytest-cov==2.8.1\",\n        \"pytest-aiohttp==0.3.0\",\n        \"pytest-mock\",\n        \"pytest-env\",\n        \"attrdict\",\n    ],\n)\n"
        },
        "database": "PostgreSQL",
        "build_system": "setuptools",
        "config_files": {
            "docker-compose.yml": "version: \"3.0\"\nservices:\n\n  database:\n    image: amsterdam/postgres11\n    ports:\n      - \"5440:5432\"\n    environment:\n      POSTGRES_DB: dcatd\n      POSTGRES_USER: dcatd\n      POSTGRES_PASSWORD: dcatd\n    volumes:\n        - \"~/.ssh/datapunt.key:/root/.ssh/datapunt.key\"\n\n  example:\n    build:\n      context: .\n    depends_on:\n      - database\n    volumes:\n      - ./examples/running/config.yml:/etc/dcatd.yml\n    ports:\n      - \"8001:8000\"\n    environment:\n      DB_DATABASE: dcatd\n      DB_USER: dcatd\n      DB_PASSWORD: dcatd\n      DB_HOST: database\n      DB_PORT: 5432\n      BASEURL: \"http://localhost:8001/\"\n      SWIFT_PASSWORD: insecure\n      SWIFT_CONTAINER: dcatd_acc\n    command: [\"python\", \"-m\", \"datacatalog.main\"]\n\n  test:\n    build:\n      context: .\n      dockerfile: Dockerfile.test\n    depends_on:\n      - database\n    environment:\n      DB_DATABASE: dcatd\n      DB_USER: dcatd\n      DB_PASSWORD: dcatd\n      DB_HOST: database\n      DB_PORT: 5432\n      SWIFT_PASSWORD: insecure\n      SWIFT_CONTAINER: dcatd_acc\n    command: [\"make\", \"test\"]\n\n  swaggerui:\n    image: amsterdam/oauth2swaggerui\n    ports:\n      - 8686:8686\n",
            "Dockerfile": "FROM python:3.9-slim as builder\n    WORKDIR /root/app\n    COPY . /root/app\n    RUN pip install .\n\nFROM python:3.9-slim\n    COPY --from=builder /usr/local/lib/python3.9/site-packages/. /usr/local/lib/python3.9/site-packages\n\nCOPY dcatd.yml /etc/dcatd.yml\n",
            "Jenkinsfile": "#!groovy\n\ndef tryStep(String message, Closure block, Closure tearDown = null) {\n    try {\n        block()\n    }\n    catch (Throwable t) {\n        slackSend message: \"${env.JOB_NAME}: ${message} failure ${env.BUILD_URL}\", channel: '#ci-channel', color: 'danger'\n\n        throw t\n    }\n    finally {\n        if (tearDown) {\n            tearDown()\n        }\n    }\n}\n\n\nnode {\n    stage(\"Checkout\") {\n        checkout scm\n    }\n\n    stage(\"Test\") {\n        tryStep \"test\", {\n            sh \"docker-compose -p dcatd -f ./docker-compose.yml up -d database && \" +\n               \"docker-compose -p dcatd -f ./docker-compose.yml build --no-cache --pull test && \" +\n               \"docker-compose -p dcatd -f ./docker-compose.yml run --rm test make test\"\n        }, {\n            sh \"docker-compose -p dcatd -f ./docker-compose.yml down\"\n        }\n    }\n\n    stage(\"Build image\") {\n        tryStep \"build\", {\n                docker.withRegistry(\"${DOCKER_REGISTRY_HOST}\",'docker_registry_auth') {\n                def image = docker.build(\"datapunt/dcatd:${env.BUILD_NUMBER}\")\n                image.push()\n            }\n        }\n    }\n}\n\nString BRANCH = \"${env.BRANCH_NAME}\"\n\nif (BRANCH == \"master\") {\n\n\t/*\n\tnode {\n\t    stage(\"Update documentation\") {\n            sh \"pip install Sphinx sphinx_rtd_theme sphinx_autodoc_typehints && \" +\n               \"make -C sphinx gh-pages\"\n\t    }\n\t}\n\t*/\n\n    node {\n        stage('Push acceptance image') {\n            tryStep \"image tagging\", {\n                docker.withRegistry(\"${DOCKER_REGISTRY_HOST}\",'docker_registry_auth') {\n                def image = docker.image(\"datapunt/dcatd:${env.BUILD_NUMBER}\")\n                image.pull()\n                image.push(\"acceptance\")\n                }\n            }\n        }\n    }\n\n    node {\n        stage(\"Deploy to ACC\") {\n        tryStep \"deployment\", {\n            build job: 'Subtask_Openstack_Playbook',\n            parameters: [\n                    [$class: 'StringParameterValue', name: 'INVENTORY', value: 'acceptance'],\n                    [$class: 'StringParameterValue', name: 'PLAYBOOK', value: 'deploy.yml'],\n                    [$class: 'StringParameterValue', name: 'PLAYBOOKPARAMS', value: \"-e cmdb_id=app_dcatd\"]\n                ]\n            }\n        }\n    }\n\n    stage('Waiting for approval') {\n        slackSend channel: '#ci-channel', color: 'warning', message: 'dcatd service is waiting for Production Release - please confirm'\n        input \"Deploy to Production?\"\n    }\n\n    node {\n        stage('Push production image') {\n        tryStep \"image tagging\", {\n                docker.withRegistry(\"${DOCKER_REGISTRY_HOST}\",'docker_registry_auth') {\n                    def image = docker.image(\"datapunt/dcatd:${env.BUILD_NUMBER}\")\n                    image.pull()\n                    image.push(\"production\")\n                    image.push(\"latest\")\n                }\n            }\n        }\n    }\n\n    node {\n        stage(\"Deploy\") {\n            tryStep \"deployment\", {\n                build job: 'Subtask_Openstack_Playbook',\n                parameters: [\n                    [$class: 'StringParameterValue', name: 'INVENTORY', value: 'production'],\n                    [$class: 'StringParameterValue', name: 'PLAYBOOK', value: 'deploy.yml'],\n                    [$class: 'StringParameterValue', name: 'PLAYBOOKPARAMS', value: \"-e cmdb_id=app_dcatd\"]\n                ]\n            }\n        }\n    }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".coveragerc",
            ".dockerignore",
            ".gitignore",
            "Dockerfile",
            "Dockerfile.test",
            "Jenkinsfile",
            "LICENSE",
            "MANIFEST.in",
            "Makefile",
            "README.rst",
            "dcat_schema.yml",
            "dcatd.yml",
            "docker-compose.yml",
            "json-schema-draft-07.json",
            "pytest.ini",
            "setup.cfg",
            "setup.py"
        ],
        "folders": [
            "examples",
            "sphinx",
            "src",
            "tests",
            "utils"
        ]
    }
}