{
    "source_code_info": {
        "language": "Ruby",
        "framework": "Ruby",
        "dependencies": {
            "Gemfile": "source \"https://rubygems.org\"\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n# Note: you probably want to set a local bundle path with : /usr/local/bin/bundle config set path 'vendor/bundle'\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n# gem \"jekyll\", \"~> 4.0.0\"\n# This is the default theme for new Jekyll sites. You may change this to anything you like.\ngem \"minima\", \"~> 2.5\"\n# To upgrade, run `bundle update github-pages`.\ngem \"github-pages\", group: :jekyll_plugins\n# If you have any plugins, put them here!\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\n  gem 'jekyll-octicons'\nend\n\ngem \"jekyll-github-metadata\"\n\n# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem\n# and associated library.\ninstall_if -> { RUBY_PLATFORM =~ %r!mingw|mswin|java! } do\n  gem \"tzinfo\", \"~> 1.2\"\n  gem \"tzinfo-data\"\nend\n\n# Performance-booster for watching directories on Windows\ngem \"wdm\", \"~> 0.1.1\", :install_if => Gem.win_platform?\n\ngem \"faraday\", \"< 1.0\"\n\n# I like asciidoc & sitemaps\ngroup :jekyll_plugins do\n  gem 'jekyll-asciidoc'\n  gem 'jekyll-sitemap'\nend\n"
        },
        "database": "PostgreSQL",
        "build_system": "Bundler",
        "config_files": {
            "subrepos/docker-stacks/base-notebook/Dockerfile": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\n\n# Ubuntu 20.04 (focal)\n# https://hub.docker.com/_/ubuntu/?tab=tags&name=focal\n# OS/ARCH: linux/amd64\nARG ROOT_CONTAINER=ubuntu:focal\n\nARG BASE_CONTAINER=$ROOT_CONTAINER\nFROM $BASE_CONTAINER\n\nLABEL maintainer=\"Jupyter Project <jupyter@googlegroups.com>\"\nARG NB_USER=\"jovyan\"\nARG NB_UID=\"1000\"\nARG NB_GID=\"100\"\n\n# Fix DL4006\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nUSER root\n\n# ---- Miniforge installer ----\n# Default values can be overridden at build time\n# (ARGS are in lower case to distinguish them from ENV)\n# Check https://github.com/conda-forge/miniforge/releases\n# Conda version\nARG conda_version=\"4.9.2\"\n# Miniforge installer patch version\nARG miniforge_patch_number=\"5\"\n# Miniforge installer architecture\nARG miniforge_arch=\"x86_64\"\n# Python implementation to use\n# can be either Miniforge3 to use Python or Miniforge-pypy3 to use PyPy\nARG miniforge_python=\"Miniforge3\"\n\n# Miniforge archive to install\nARG miniforge_version=\"${conda_version}-${miniforge_patch_number}\"\n# Miniforge installer\nARG miniforge_installer=\"${miniforge_python}-${miniforge_version}-Linux-${miniforge_arch}.sh\"\n# Miniforge checksum\nARG miniforge_checksum=\"49dddb3998550e40adc904dae55b0a2aeeb0bd9fc4306869cc4a600ec4b8b47c\"\n\n# Install all OS dependencies for notebook server that starts but lacks all\n# features (e.g., download as all possible file formats)\nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update \\\n && apt-get install -yq --no-install-recommends \\\n    wget \\\n    ca-certificates \\\n    sudo \\\n    locales \\\n    fonts-liberation \\\n    run-one \\\n && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nRUN echo \"en_US.UTF-8 UTF-8\" > /etc/locale.gen && \\\n    locale-gen\n\n# Configure environment\nENV CONDA_DIR=/opt/conda \\\n    SHELL=/bin/bash \\\n    NB_USER=$NB_USER \\\n    NB_UID=$NB_UID \\\n    NB_GID=$NB_GID \\\n    LC_ALL=en_US.UTF-8 \\\n    LANG=en_US.UTF-8 \\\n    LANGUAGE=en_US.UTF-8\nENV PATH=$CONDA_DIR/bin:$PATH \\\n    HOME=/home/$NB_USER \\\n    CONDA_VERSION=\"${conda_version}\" \\\n    MINIFORGE_VERSION=\"${miniforge_version}\"\n\n# Copy a script that we will use to correct permissions after running certain commands\nCOPY fix-permissions /usr/local/bin/fix-permissions\nRUN chmod a+rx /usr/local/bin/fix-permissions\n\n# Enable prompt color in the skeleton .bashrc before creating the default NB_USER\n# hadolint ignore=SC2016\nRUN sed -i 's/^#force_color_prompt=yes/force_color_prompt=yes/' /etc/skel/.bashrc && \\\n   # Add call to conda init script see https://stackoverflow.com/a/58081608/4413446\n   echo 'eval \"$(command conda shell.bash hook 2> /dev/null)\"' >> /etc/skel/.bashrc\n\n# Create NB_USER with name jovyan user with UID=1000 and in the 'users' group\n# and make sure these dirs are writable by the `users` group.\nRUN echo \"auth requisite pam_deny.so\" >> /etc/pam.d/su && \\\n    sed -i.bak -e 's/^%admin/#%admin/' /etc/sudoers && \\\n    sed -i.bak -e 's/^%sudo/#%sudo/' /etc/sudoers && \\\n    useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \\\n    mkdir -p $CONDA_DIR && \\\n    chown $NB_USER:$NB_GID $CONDA_DIR && \\\n    chmod g+w /etc/passwd && \\\n    fix-permissions $HOME && \\\n    fix-permissions $CONDA_DIR\n\nUSER $NB_UID\nARG PYTHON_VERSION=default\n\n# Setup work directory for backward-compatibility\nRUN mkdir \"/home/$NB_USER/work\" && \\\n    fix-permissions \"/home/$NB_USER\"\n\n# Install conda as jovyan and check the sha256 sum provided on the download site\nWORKDIR /tmp\nRUN export arch=$(uname -m) && \\\n    if [ \"$arch\" == \"aarm64\" ]; then \\\n      arch=\"arm64\"; \\\n    fi; \\\n    wget --quiet https://github.com/conda-forge/miniforge/releases/download/4.8.5-1/Miniforge3-4.8.5-1-Linux-${arch}.sh -O miniforge.sh && \\\n    chmod a+x miniforge.sh && \\\n    ./miniforge.sh -f -b -p $CONDA_DIR && \\\n    rm miniforge.sh && \\\n    # Conda configuration see https://conda.io/projects/conda/en/latest/configuration.html\n    echo \"conda ${CONDA_VERSION}\" >> $CONDA_DIR/conda-meta/pinned && \\\n    conda config --system --set auto_update_conda false && \\\n    conda config --system --set show_channel_urls true && \\\n    if [ ! $PYTHON_VERSION = 'default' ]; then conda install --yes python=$PYTHON_VERSION; fi && \\\n    conda list python | grep '^python ' | tr -s ' ' | cut -d '.' -f 1,2 | sed 's/$/.*/' >> $CONDA_DIR/conda-meta/pinned && \\\n    conda install --quiet --yes \\\n    \"conda=${CONDA_VERSION}\" \\\n    'pip' \\\n    'tini=0.18.0' && \\\n    conda update --all --quiet --yes && \\\n    conda list tini | grep tini | tr -s ' ' | cut -d ' ' -f 1,2 >> $CONDA_DIR/conda-meta/pinned && \\\n    conda clean --all -f -y && \\\n    rm -rf /home/$NB_USER/.cache/yarn && \\\n    fix-permissions $CONDA_DIR && \\\n    fix-permissions /home/$NB_USER\n\n# Install Jupyter Notebook, Lab, and Hub\n# Generate a notebook server config\n# Cleanup temporary files\n# Correct permissions\n# Do all this in a single RUN command to avoid duplicating all of the\n# files across image layers when the permissions change\nRUN conda install --quiet --yes \\\n    'notebook=6.2.0' \\\n    'jupyterhub=1.3.0' \\\n    'jupyterlab=3.0.5' && \\\n    conda clean --all -f -y && \\\n    npm cache clean --force && \\\n    jupyter notebook --generate-config && \\\n    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \\\n    rm -rf /home/$NB_USER/.cache/yarn && \\\n    fix-permissions $CONDA_DIR && \\\n    fix-permissions /home/$NB_USER\n\nEXPOSE 8888\n\n# Configure container startup\nENTRYPOINT [\"tini\", \"-g\", \"--\"]\nCMD [\"start-notebook.sh\"]\n\n# Copy local files as late as possible to avoid cache busting\nCOPY start.sh start-notebook.sh start-singleuser.sh /usr/local/bin/\n# Currently need to have both jupyter_notebook_config and jupyter_server_config to support classic and lab\nCOPY jupyter_notebook_config.py /etc/jupyter/\n\n# Fix permissions on /etc/jupyter as root\nUSER root\n\n# Prepare upgrade to JupyterLab V3.0 #1205\nRUN sed -re \"s/c.NotebookApp/c.ServerApp/g\" \\\n    /etc/jupyter/jupyter_notebook_config.py > /etc/jupyter/jupyter_server_config.py\n\nRUN fix-permissions /etc/jupyter/\n\n# Switch back to jovyan to avoid accidental container runs as root\nUSER $NB_UID\n\nWORKDIR $HOME\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "prepare.sh"
        ],
        "folders": [
            "examples"
        ]
    }
}