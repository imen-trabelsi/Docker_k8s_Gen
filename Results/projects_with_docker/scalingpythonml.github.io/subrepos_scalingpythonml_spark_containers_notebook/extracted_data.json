{
    "source_code_info": {
        "language": "Ruby",
        "framework": "Ruby",
        "dependencies": {
            "Gemfile": "source \"https://rubygems.org\"\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n# Note: you probably want to set a local bundle path with : /usr/local/bin/bundle config set path 'vendor/bundle'\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n# gem \"jekyll\", \"~> 4.0.0\"\n# This is the default theme for new Jekyll sites. You may change this to anything you like.\ngem \"minima\", \"~> 2.5\"\n# To upgrade, run `bundle update github-pages`.\ngem \"github-pages\", group: :jekyll_plugins\n# If you have any plugins, put them here!\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\n  gem 'jekyll-octicons'\nend\n\ngem \"jekyll-github-metadata\"\n\n# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem\n# and associated library.\ninstall_if -> { RUBY_PLATFORM =~ %r!mingw|mswin|java! } do\n  gem \"tzinfo\", \"~> 1.2\"\n  gem \"tzinfo-data\"\nend\n\n# Performance-booster for watching directories on Windows\ngem \"wdm\", \"~> 0.1.1\", :install_if => Gem.win_platform?\n\ngem \"faraday\", \"< 1.0\"\n\n# I like asciidoc & sitemaps\ngroup :jekyll_plugins do\n  gem 'jekyll-asciidoc'\n  gem 'jekyll-sitemap'\nend\n"
        },
        "database": "PostgreSQL",
        "build_system": "Bundler",
        "config_files": {
            "subrepos/scalingpythonml/spark/containers/notebook/Dockerfile": "FROM holdenk/jupyter-hub-magicsingleuser-sample:0.10.2-n412.h25a21283\n\n# Switch to root to install stuff\nUSER root\n\n# Use multiple cores to compile the C code :)\nENV MAKEFLAGS -j 4\n\n\nRUN set -eux; \\\n    apt-get update && \\\n    apt-get install -yq graphviz git build-essential cmake telnet && \\\n    ln -s /lib /lib64 && \\\n    apt install -y bash tini libc6 libpam-modules krb5-user libnss3 procps ca-certificates p11-kit wget bzip2 git mercurial subversion && \\\n    mkdir -p /opt/spark && \\\n    mkdir -p /opt/spark/examples && \\\n    mkdir -p /opt/spark/work-dir && \\\n    touch /opt/spark/RELEASE && \\\n    rm /bin/sh && \\\n    ln -sv /bin/bash /bin/sh && \\\n    echo \"auth required pam_wheel.so use_uid\" >> /etc/pam.d/su && \\\n    chgrp root /etc/passwd && chmod ug+rw /etc/passwd && \\\n    conda install -c conda-forge --yes mamba && \\\n    mamba install --yes python==3.8.6 && \\\n    pip install --upgrade pip setuptools && \\\n    mamba install --yes numpy==1.19.2 pandas cytoolz numba lz4 scikit-build python-blosc=1.9.2 && \\\n    (mamba install --yes pyarrow ||  pip install -vvv pyarrow) && \\\n    apt-get clean && \\\n    rm -rf /var/cache/apt/* && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    echo -e \"$NB_USER\\n$NB_USER\" | passwd $NB_USER\n\n\n\n# Based on https://github.com/docker-library/openjdk/blob/master/11/jdk/slim-buster/Dockerfile\n\n# Default to UTF-8 file.encoding\nENV LANG C.UTF-8\n\nENV JAVA_HOME /usr/local/openjdk-11\nENV PATH $JAVA_HOME/bin:$PATH\nRUN { echo '#/bin/sh'; echo 'echo \"$JAVA_HOME\"'; } > /usr/local/bin/docker-java-home && chmod +x /usr/local/bin/docker-java-home && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\nENV JAVA_VERSION 11.0.9.1\n\nRUN set -eux; \\\n\t\\\n\tarch=\"$(dpkg --print-architecture)\"; \\\n# this \"case\" statement is generated via \"update.sh\"\n\tcase \"$arch\" in \\\n# arm64v8\n\t\tarm64 | aarch64) downloadUrl=https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.9.1%2B1/OpenJDK11U-jdk_aarch64_linux_11.0.9.1_1.tar.gz ;; \\\n# amd64\n\t\tamd64 | i386:x86-64) downloadUrl=https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.9.1%2B1/OpenJDK11U-jdk_x64_linux_11.0.9.1_1.tar.gz ;; \\\n# fallback\n\t\t*) echo >&2 \"error: unsupported architecture: '$arch'\"; exit 1 ;; \\\n\tesac; \\\n\t\\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tdirmngr \\\n\t\tgnupg \\\n\t\twget \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\twget -O openjdk.tgz.asc \"$downloadUrl.sign\"; \\\n\twget -O openjdk.tgz \"$downloadUrl\" --progress=dot:giga; \\\n\t\\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n# TODO find a good link for users to verify this key is right (https://mail.openjdk.java.net/pipermail/jdk-updates-dev/2019-April/000951.html is one of the only mentions of it I can find); perhaps a note added to https://adoptopenjdk.net/upstream.html would make sense?\n# no-self-sigs-only: https://salsa.debian.org/debian/gnupg2/commit/c93ca04a53569916308b369c8b218dad5ae8fe07\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --keyserver-options no-self-sigs-only --recv-keys CA5F11C6CE22644D42C6AC4492EF8D39DC13168F; \\\n# also verify that key was signed by Andrew Haley (the OpenJDK 8 and 11 Updates OpenJDK project lead)\n# (https://github.com/docker-library/openjdk/pull/322#discussion_r286839190)\n\tgpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys EAC843EBD3EFDB98CC772FADA5CD6035332FA671; \\\n\tgpg --batch --list-sigs --keyid-format 0xLONG CA5F11C6CE22644D42C6AC4492EF8D39DC13168F \\\n\t\t| tee /dev/stderr \\\n\t\t| grep '0xA5CD6035332FA671' \\\n\t\t| grep 'Andrew Haley'; \\\n\tgpg --batch --verify openjdk.tgz.asc openjdk.tgz; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"; \\\n\t\\\n\tmkdir -p \"$JAVA_HOME\"; \\\n\ttar --extract \\\n\t\t--file openjdk.tgz \\\n\t\t--directory \"$JAVA_HOME\" \\\n\t\t--strip-components 1 \\\n\t\t--no-same-owner \\\n\t; \\\n\trm openjdk.tgz*; \\\n\t\\\n# TODO strip \"demo\" and \"man\" folders?\n\t\\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\\\n# update \"cacerts\" bundle to use Debian's CA certificates (and make sure it stays up-to-date with changes to Debian's store)\n# see https://github.com/docker-library/openjdk/issues/327\n#     http://rabexc.org/posts/certificates-not-working-java#comment-4099504075\n#     https://salsa.debian.org/java-team/ca-certificates-java/blob/3e51a84e9104823319abeb31f880580e46f45a98/debian/jks-keystore.hook.in\n#     https://git.alpinelinux.org/aports/tree/community/java-cacerts/APKBUILD?id=761af65f38b4570093461e6546dcf6b179d2b624#n29\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail'; \\\n\t\techo 'if ! [ -d \"$JAVA_HOME\" ]; then echo >&2 \"error: missing JAVA_HOME environment variable\"; exit 1; fi'; \\\n# 8-jdk uses \"$JAVA_HOME/jre/lib/security/cacerts\" and 8-jre and 11+ uses \"$JAVA_HOME/lib/security/cacerts\" directly (no \"jre\" directory)\n\t\techo 'cacertsFile=; for f in \"$JAVA_HOME/lib/security/cacerts\" \"$JAVA_HOME/jre/lib/security/cacerts\"; do if [ -e \"$f\" ]; then cacertsFile=\"$f\"; break; fi; done'; \\\n\t\techo 'if [ -z \"$cacertsFile\" ] || ! [ -f \"$cacertsFile\" ]; then echo >&2 \"error: failed to find cacerts file in $JAVA_HOME\"; exit 1; fi'; \\\n\t\techo 'trust extract --overwrite --format=java-cacerts --filter=ca-anchors --purpose=server-auth \"$cacertsFile\"'; \\\n\t} > /etc/ca-certificates/update.d/docker-openjdk; \\\n\tchmod +x /etc/ca-certificates/update.d/docker-openjdk; \\\n\t/etc/ca-certificates/update.d/docker-openjdk; \\\n\t\\\n# https://github.com/docker-library/openjdk/issues/331#issuecomment-498834472\n\tfind \"$JAVA_HOME/lib\" -name '*.so' -exec dirname '{}' ';' | sort -u > /etc/ld.so.conf.d/docker-openjdk.conf; \\\n\tldconfig; \\\n\t\\\n# basic smoke test\n\tfileEncoding=\"$(echo 'System.out.println(System.getProperty(\"file.encoding\"))' | jshell -s -)\"; [ \"$fileEncoding\" = 'UTF-8' ]; rm -rf ~/.java; \\\n\tjavac --version; \\\n\tjava --version\n\n\n# Based on the Spark dockerfile\n\nCOPY jars /opt/spark/jars\nCOPY bin /opt/spark/bin\nCOPY sbin /opt/spark/sbin\nCOPY kubernetes/dockerfiles/spark/entrypoint.sh /opt/\n# Wildcard so it covers decom.sh present (3.1+) and not present (pre-3.1)\nCOPY kubernetes/dockerfiles/spark/decom.sh* /opt/\nCOPY examples /opt/spark/examples\nCOPY kubernetes/tests /opt/spark/tests\nCOPY data /opt/spark/data\n# We need to copy over the license file so we can pip install PySpark\nCOPY LICENSE /opt/spark/LICENSE\nCOPY licenses /opt/spark/licenses\n\nENV SPARK_HOME /opt/spark\n\n# Note: don't change the workdir since then your Jupyter notebooks won't persist.\nRUN chmod g+w /opt/spark/work-dir\n# Wildcard so it covers decom.sh present (3.1+) and not present (pre-3.1)\nRUN chmod a+x /opt/decom.sh* || echo \"No decom script present, assuming pre-3.1\"\n\n# Copy pyspark with setup files and everything\nCOPY python ${SPARK_HOME}/python\n\n# Add PySpark to PYTHON_PATH\n\nRUN pip install -e ${SPARK_HOME}/python\n\n# Add S3A support\nADD https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.11.563/aws-java-sdk-bundle-1.11.563.jar ${SPARK_HOME}/jars/\nADD https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.2.0/hadoop-aws-3.2.0.jar ${SPARK_HOME}/jars/\n\n#tag::iceberg[]\nADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-spark3-runtime/0.11.0/iceberg-spark3-runtime-0.11.0.jar ${SPARK_HOME}/jars/\nADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-spark3-extensions/0.11.0/iceberg-spark3-extensions-0.11.0.jar ${SPARK_HOME}/jars/\nADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-spark3/0.11.0/iceberg-spark3-0.11.0.jar ${SPARK_HOME}/jars/\n#ADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-parquet/0.11.0/iceberg-parquet-0.11.0.jar ${SPARK_HOME}/jars/\n#ADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-core/0.11.0/iceberg-core-0.11.0.jar ${SPARK_HOME}/jars/\n#ADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-arrow/0.11.0/iceberg-arrow-0.11.0.jar ${SPARK_HOME}/jars/\n#ADD https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-data/0.11.0/iceberg-data-0.11.0.jar ${SPARK_HOME}/jars/\n#end::iceberg[]\n\nRUN chmod a+rx ${SPARK_HOME}/jars/*.jar \n\n\n# Switch to the user back to a non-root user that will actually do the running\nUSER $NB_USER\n\n# Should match the service\nEXPOSE 2222\nEXPOSE 7777\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "prepare.sh"
        ],
        "folders": [
            "examples"
        ]
    }
}