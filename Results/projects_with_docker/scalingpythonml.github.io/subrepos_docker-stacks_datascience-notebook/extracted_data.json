{
    "source_code_info": {
        "language": "Ruby",
        "framework": "Ruby",
        "dependencies": {
            "Gemfile": "source \"https://rubygems.org\"\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n# Note: you probably want to set a local bundle path with : /usr/local/bin/bundle config set path 'vendor/bundle'\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n# gem \"jekyll\", \"~> 4.0.0\"\n# This is the default theme for new Jekyll sites. You may change this to anything you like.\ngem \"minima\", \"~> 2.5\"\n# To upgrade, run `bundle update github-pages`.\ngem \"github-pages\", group: :jekyll_plugins\n# If you have any plugins, put them here!\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\n  gem 'jekyll-octicons'\nend\n\ngem \"jekyll-github-metadata\"\n\n# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem\n# and associated library.\ninstall_if -> { RUBY_PLATFORM =~ %r!mingw|mswin|java! } do\n  gem \"tzinfo\", \"~> 1.2\"\n  gem \"tzinfo-data\"\nend\n\n# Performance-booster for watching directories on Windows\ngem \"wdm\", \"~> 0.1.1\", :install_if => Gem.win_platform?\n\ngem \"faraday\", \"< 1.0\"\n\n# I like asciidoc & sitemaps\ngroup :jekyll_plugins do\n  gem 'jekyll-asciidoc'\n  gem 'jekyll-sitemap'\nend\n"
        },
        "database": "PostgreSQL",
        "build_system": "Bundler",
        "config_files": {
            "subrepos/docker-stacks/datascience-notebook/Dockerfile": "# Copyright (c) Jupyter Development Team.\n# Distributed under the terms of the Modified BSD License.\nARG BASE_CONTAINER=jupyter/scipy-notebook\nFROM $BASE_CONTAINER\n\nLABEL maintainer=\"Jupyter Project <jupyter@googlegroups.com>\"\n\n# Set when building on Travis so that certain long-running build steps can\n# be skipped to shorten build time.\nARG TEST_ONLY_BUILD\n\n# Fix DL4006\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\nUSER root\n\n# Julia installation\n# Default values can be overridden at build time\n# (ARGS are in lower case to distinguish them from ENV)\n# Check https://julialang.org/downloads/\nARG julia_version=\"1.5.3\"\n# SHA256 checksum\nARG julia_checksum=\"f190c938dd6fed97021953240523c9db448ec0a6760b574afd4e9924ab5615f1\"\n\n# R pre-requisites\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n    fonts-dejavu \\\n    gfortran \\\n    gcc && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\n# Julia dependencies\n# install Julia packages in /opt/julia instead of $HOME\nENV JULIA_DEPOT_PATH=/opt/julia \\\n    JULIA_PKGDIR=/opt/julia \\\n    JULIA_VERSION=\"${julia_version}\"\n\nWORKDIR /tmp\n\n# hadolint ignore=SC2046\nRUN mkdir \"/opt/julia-${JULIA_VERSION}\" && \\\n    wget -q https://julialang-s3.julialang.org/bin/linux/x64/$(echo \"${JULIA_VERSION}\" | cut -d. -f 1,2)\"/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" && \\\n    echo \"${julia_checksum} *julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" | sha256sum -c - && \\\n    tar xzf \"julia-${JULIA_VERSION}-linux-x86_64.tar.gz\" -C \"/opt/julia-${JULIA_VERSION}\" --strip-components=1 && \\\n    rm \"/tmp/julia-${JULIA_VERSION}-linux-x86_64.tar.gz\"\nRUN ln -fs /opt/julia-*/bin/julia /usr/local/bin/julia\n\n# Show Julia where conda libraries are \\\nRUN mkdir /etc/julia && \\\n    echo \"push!(Libdl.DL_LOAD_PATH, \\\"$CONDA_DIR/lib\\\")\" >> /etc/julia/juliarc.jl && \\\n    # Create JULIA_PKGDIR \\\n    mkdir \"${JULIA_PKGDIR}\" && \\\n    chown \"${NB_USER}\" \"${JULIA_PKGDIR}\" && \\\n    fix-permissions \"${JULIA_PKGDIR}\"\n\nUSER $NB_UID\n\n# R packages including IRKernel which gets installed globally.\nRUN conda install --quiet --yes \\\n    'r-base=4.0.3'  \\\n    'r-caret=6.0*' \\\n    'r-crayon=1.3*' \\\n    'r-devtools=2.3*' \\\n    'r-forecast=8.13*' \\ \n    'r-hexbin=1.28*' \\\n    'r-htmltools=0.5*' \\\n    'r-htmlwidgets=1.5*' \\ \n    'r-irkernel=1.1*' \\\n    'r-nycflights13=1.0*' \\\n    'r-randomforest=4.6*' \\\n    'r-rcurl=1.98*' \\\n    'r-rmarkdown=2.6*' \\\n    'r-rsqlite=2.2*' \\\n    'r-shiny=1.5*' \\\n    'r-tidyverse=1.3*' \\\n    'rpy2=3.4*' && \\\n    conda clean --all -f -y && \\\n    fix-permissions \"${CONDA_DIR}\" && \\\n    fix-permissions \"/home/${NB_USER}\"\n\n# Add Julia packages. Only add HDF5 if this is not a test-only build since\n# it takes roughly half the entire build time of all of the images on Travis\n# to add this one package and often causes Travis to timeout.\n#\n# Install IJulia as jovyan and then move the kernelspec out\n# to the system share location. Avoids problems with runtime UID change not\n# taking effect properly on the .local folder in the jovyan home dir.\nRUN julia -e 'import Pkg; Pkg.update()' && \\\n    (test $TEST_ONLY_BUILD || julia -e 'import Pkg; Pkg.add(\"HDF5\")') && \\\n    julia -e \"using Pkg; pkg\\\"add IJulia\\\"; pkg\\\"precompile\\\"\" && \\\n    # move kernelspec out of home \\\n    mv \"${HOME}/.local/share/jupyter/kernels/julia\"* \"${CONDA_DIR}/share/jupyter/kernels/\" && \\\n    chmod -R go+rx \"${CONDA_DIR}/share/jupyter\" && \\\n    rm -rf \"${HOME}/.local\" && \\\n    fix-permissions \"${JULIA_PKGDIR}\" \"${CONDA_DIR}/share/jupyter\"\n\nWORKDIR $HOME\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "prepare.sh"
        ],
        "folders": [
            "examples"
        ]
    }
}