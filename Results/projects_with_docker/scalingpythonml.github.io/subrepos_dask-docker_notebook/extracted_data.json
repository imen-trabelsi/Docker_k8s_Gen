{
    "source_code_info": {
        "language": "Ruby",
        "framework": "Ruby",
        "dependencies": {
            "Gemfile": "source \"https://rubygems.org\"\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n# Note: you probably want to set a local bundle path with : /usr/local/bin/bundle config set path 'vendor/bundle'\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n# gem \"jekyll\", \"~> 4.0.0\"\n# This is the default theme for new Jekyll sites. You may change this to anything you like.\ngem \"minima\", \"~> 2.5\"\n# To upgrade, run `bundle update github-pages`.\ngem \"github-pages\", group: :jekyll_plugins\n# If you have any plugins, put them here!\ngroup :jekyll_plugins do\n  gem \"jekyll-feed\", \"~> 0.12\"\n  gem 'jekyll-octicons'\nend\n\ngem \"jekyll-github-metadata\"\n\n# Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem\n# and associated library.\ninstall_if -> { RUBY_PLATFORM =~ %r!mingw|mswin|java! } do\n  gem \"tzinfo\", \"~> 1.2\"\n  gem \"tzinfo-data\"\nend\n\n# Performance-booster for watching directories on Windows\ngem \"wdm\", \"~> 0.1.1\", :install_if => Gem.win_platform?\n\ngem \"faraday\", \"< 1.0\"\n\n# I like asciidoc & sitemaps\ngroup :jekyll_plugins do\n  gem 'jekyll-asciidoc'\n  gem 'jekyll-sitemap'\nend\n"
        },
        "database": "PostgreSQL",
        "build_system": "Bundler",
        "config_files": {
            "subrepos/dask-docker/docker-compose.yml": "version: \"3.1\"\n\nservices:\n  scheduler:\n    build:\n      context: ./base\n      dockerfile: Dockerfile\n    image: daskdev/dask\n    hostname: dask-scheduler\n    ports:\n      - \"8786:8786\"\n      - \"8787:8787\"\n    command: [\"dask-scheduler\"]\n\n  worker:\n    build:\n      context: ./base\n      dockerfile: Dockerfile\n    image: daskdev/dask\n    hostname: dask-worker\n    command: [\"dask-worker\", \"tcp://scheduler:8786\"]\n\n  base-notebook:\n    build:\n      context: github.com/jupyter/docker-stacks.git#master:base-notebook\n      dockerfile: Dockerfile\n      args:\n        PYTHON_VERSION: \"3.8\"\n    image: jupyter/base-notebook:lab\n\n  notebook:\n    build:\n      context: ./notebook\n      dockerfile: Dockerfile\n    image: daskdev/dask-notebook\n    depends_on:\n      - base-notebook\n    hostname: notebook\n    ports:\n      - \"8888:8888\"\n    environment:\n      - DASK_SCHEDULER_ADDRESS=\"tcp://scheduler:8786\"\n",
            "subrepos/dask-docker/notebook/Dockerfile": "FROM  holdenk/jupyter-hub-magicsingleuser-sample:0.10.2\n\nUSER root\n\nRUN apt-get update \\\n    && apt-get install -yq graphviz git build-essential \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN touch /hello_holden\n\nUSER $NB_USER\n\nRUN conda install -c conda-forge --yes mamba\nRUN mamba install --yes python==3.8.6\nRUN (mamba install --yes aiohttp==3.7.1 || pip install aiohttp==3.7.1 )\nRUN mamba install --yes \\\n    python-blosc \\\n    cytoolz \\\n    dask==2.30.0 \\\n    dask-core==2.30.0 \\\n    lz4 \\\n    numpy==1.19.2 \\\n    ipywidgets \\\n    python-graphviz && \\\n    mamba install --yes s3fs gcsfs dropboxdrivefs requests dropbox paramiko adlfs pygit2 pyarrow && \\\n    mamba install --yes bokeh numba llvmlite\nRUN (mamba install --yes fastparquet || pip install fastparquet)\nRUN (mamba install --yes jupyter-server-proxy || pip install jupyter-server-proxy)\nRUN (mamba install --yes dask-labextension==3.0.0 || pip install dask-labextension==3.0.0)\nRUN jupyter labextension install @jupyter-widgets/jupyterlab-manager dask-labextension@3.0.0 @jupyterlab/server-proxy \\\n    && jupyter serverextension enable dask-labextension@3.0.0 @jupyterlab/server-proxy \\\n    && pip install dask-kubernetes==0.11.0 \\\n    && jupyter lab clean \\\n    && jlpm cache clean \\\n    && npm cache clean --force \\\n    && find /opt/conda/ -type f,l -name '*.a' -delete \\\n    && find /opt/conda/ -type f,l -name '*.pyc' -delete \\\n    && find /opt/conda/ -type f,l -name '*.js.map' -delete \\\n    && find /opt/conda/lib/python*/site-packages/bokeh/server/static -type f,l -name '*.js' -not -name '*.min.js' -delete || echo \"no bokeh static files to cleanup\" \\\n    && rm -rf /opt/conda/pkgs\n\nUSER root\n\n# Create the /opt/app directory, and assert that Jupyter's NB_UID/NB_GID values\n# haven't changed.\nRUN mkdir /opt/app \\\n    && if [ \"$NB_UID\" != \"1000\" ] || [ \"$NB_GID\" != \"100\" ]; then \\\n    echo \"Jupyter's NB_UID/NB_GID changed, need to update the Dockerfile\"; \\\n    exit 1; \\\n    fi\n\n# Copy over the example as NB_USER. Unfortuantely we can't use $NB_UID/$NB_GID\n# in the `--chown` statement, so we need to hardcode these values.\nCOPY --chown=1000:100 examples/ /home/$NB_USER/examples\nCOPY prepare.sh /usr/bin/prepare.sh\n\nENTRYPOINT [\"tini\", \"--\", \"/usr/bin/prepare.sh\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "prepare.sh"
        ],
        "folders": [
            "examples"
        ]
    }
}