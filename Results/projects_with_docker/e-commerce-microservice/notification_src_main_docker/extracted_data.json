{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "build.gradle": "import org.gradle.internal.os.OperatingSystem\nimport org.apache.tools.ant.filters.ReplaceTokens\n\nbuildscript {\n    repositories {\n        mavenLocal()\n        mavenCentral()\n        maven { url \"https://repo.spring.io/plugins-release\" }\n        maven { url \"https://plugins.gradle.org/m2/\" }\n    }\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}\"\n        classpath \"io.spring.gradle:propdeps-plugin:0.0.10.RELEASE\"\n        classpath \"gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1\"\n        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here\n    }\n}\n\nplugins {\n    id \"org.sonarqube\" version \"2.6.2\"\n    id \"net.ltgt.apt-eclipse\" version \"0.18\"\n    id \"net.ltgt.apt-idea\" version \"0.18\"\n    id \"net.ltgt.apt\" version \"0.18\"\n    id \"io.spring.dependency-management\" version \"1.0.5.RELEASE\"\n    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here\n}\n\napply plugin: 'java'\nsourceCompatibility=1.8\ntargetCompatibility=1.8\n// Until JHipster supports JDK 9\nassert System.properties['java.specification.version'] == '1.8'\n\napply plugin: 'maven'\napply plugin: 'org.springframework.boot'\napply plugin: 'war'\napply plugin: 'propdeps'\napply plugin: 'io.spring.dependency-management'\napply plugin: 'idea'\n\ndependencyManagement {\n  imports {\n    mavenBom 'io.github.jhipster:jhipster-dependencies:' + jhipster_dependencies_version\n    //jhipster-needle-gradle-dependency-management - JHipster will add additional dependencies management here\n  }\n}\n\ndefaultTasks 'bootRun'\n\ngroup = 'com.xebialabs.notification'\nversion = '0.0.1-SNAPSHOT'\n\ndescription = ''\n\nbootWar {\n   mainClassName = 'com.xebialabs.notification.NotificationApp'\n}\n\nwar {\n\n}\n\nspringBoot {\n    mainClassName = 'com.xebialabs.notification.NotificationApp'\n    buildInfo()\n}\n\nif (OperatingSystem.current().isWindows()) {\n    // https://stackoverflow.com/questions/40037487/the-filename-or-extension-is-too-long-error-using-gradle\n    task classpathJar(type: Jar) {\n        dependsOn configurations.runtime\n        appendix = 'classpath'\n\n        doFirst {\n            manifest {\n                attributes 'Class-Path': configurations.runtime.files.collect {\n                    it.toURI().toURL().toString().replaceFirst(/file:\\/+/, '/').replaceAll(' ', '%20')\n                }.join(' ')\n            }\n        }\n    }\n\n    bootRun {\n        dependsOn classpathJar\n        doFirst {\n            classpath = files(\"$buildDir/classes/java/main\", \"$buildDir/resources/main\", classpathJar.archivePath)\n        }\n    }\n}\n\ntest {\n    exclude '**/CucumberTest*'\n\n    // uncomment if the tests reports are not generated\n    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484\n    // ignoreFailures true\n    reports.html.enabled = false\n}\n\ntask testReport(type: TestReport) {\n    destinationDir = file(\"$buildDir/reports/tests\")\n    reportOn test\n}\n\n\napply from: 'gradle/docker.gradle'\napply from: 'gradle/sonar.gradle'\n//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here\n\nif (project.hasProperty('prod')) {\n    apply from: 'gradle/profile_prod.gradle'\n} else {\n    apply from: 'gradle/profile_dev.gradle'\n}\n\n\nif (project.hasProperty('zipkin')) {\n    apply from: 'gradle/zipkin.gradle'\n}\n\n\nconfigurations {\n    providedRuntime\n    compile.exclude module: \"spring-boot-starter-tomcat\"\n}\n\nrepositories {\n    mavenLocal()\n    mavenCentral()\n    jcenter()\n    //jhipster-needle-gradle-repositories - JHipster will add additional repositories\n}\n\ndependencies {\n    // Use \", version: jhipster_dependencies_version, changing: true\" if you want\n    // to use a SNAPSHOT release instead of a stable release\n    compile group: \"io.github.jhipster\", name: \"jhipster-framework\"\n    compile \"io.dropwizard.metrics:metrics-core\"\n    compile \"io.dropwizard.metrics:metrics-json\"\n    compile \"io.dropwizard.metrics:metrics-jvm\"\n    compile \"io.dropwizard.metrics:metrics-servlet\"\n    compile \"io.dropwizard.metrics:metrics-servlets\"\n    compile \"net.logstash.logback:logstash-logback-encoder\"\n    compile \"com.fasterxml.jackson.datatype:jackson-datatype-hppc\"\n    compile \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310\"\n    compile \"com.fasterxml.jackson.core:jackson-annotations\"\n    compile \"com.fasterxml.jackson.core:jackson-databind\"\n    compile \"com.fasterxml.jackson.module:jackson-module-afterburner\"\n    compile \"com.ryantenney.metrics:metrics-spring\"\n    compile \"org.apache.commons:commons-lang3\"\n    compile \"commons-io:commons-io\"\n    compile \"javax.transaction:javax.transaction-api\"\n    compile \"org.springframework.boot:spring-boot-loader-tools\"\n    compile \"org.springframework.boot:spring-boot-starter-mail\"\n    compile \"org.springframework.boot:spring-boot-starter-logging\"\n    compile \"org.springframework.boot:spring-boot-starter-actuator\"\n    compile \"org.springframework.boot:spring-boot-starter-aop\"\n    compile \"org.springframework.boot:spring-boot-starter-data-mongodb\"\n    compile \"org.springframework.boot:spring-boot-starter-security\"\n    compile (\"org.springframework.boot:spring-boot-starter-web\") {\n        exclude module: 'spring-boot-starter-tomcat'\n    }\n    compile \"org.springframework.boot:spring-boot-starter-undertow\"\n    compile \"org.springframework.boot:spring-boot-starter-thymeleaf\"\n    compile \"org.zalando:problem-spring-web:0.24.0-RC.0\"\n    compile \"org.springframework.cloud:spring-cloud-starter\"\n    compile \"org.springframework.cloud:spring-cloud-starter-netflix-ribbon\"\n    compile \"org.springframework.cloud:spring-cloud-starter-netflix-hystrix\"\n    compile \"org.springframework.retry:spring-retry\"\n    compile \"org.springframework.cloud:spring-cloud-starter-netflix-eureka-client\"\n    compile \"org.springframework.cloud:spring-cloud-starter-config\"\n    compile \"org.springframework.cloud:spring-cloud-starter-openfeign\"\n    compile \"org.springframework.cloud:spring-cloud-spring-service-connector\"\n    compile \"org.springframework.security:spring-security-config\"\n    compile \"org.springframework.security:spring-security-data\"\n    compile \"org.springframework.security:spring-security-web\"\n    compile \"io.jsonwebtoken:jjwt-api\"\n    runtime \"io.jsonwebtoken:jjwt-impl\"\n    runtime \"io.jsonwebtoken:jjwt-jackson\"\n    compile \"com.github.mongobee:mongobee\"\n    compile (\"io.springfox:springfox-swagger2\") {\n        exclude module: 'mapstruct'\n    }\n    compile \"io.springfox:springfox-bean-validators\"\n    compile \"org.mapstruct:mapstruct-jdk8:${mapstruct_version}\"\n    annotationProcessor \"org.mapstruct:mapstruct-processor:${mapstruct_version}\"\n    annotationProcessor (\"org.springframework.boot:spring-boot-configuration-processor\") {\n        exclude group: 'com.vaadin.external.google', module: 'android-json'\n    }\n    testCompile \"com.jayway.jsonpath:json-path\"\n    testCompile (\"org.springframework.boot:spring-boot-starter-test\") {\n        exclude group: 'com.vaadin.external.google', module: 'android-json'\n    }\n    testCompile \"org.springframework.security:spring-security-test\"\n    testCompile \"org.springframework.boot:spring-boot-test\"\n    testCompile \"org.assertj:assertj-core\"\n    testCompile \"junit:junit\"\n    testCompile \"org.mockito:mockito-core\"\n    testCompile \"de.flapdoodle.embed:de.flapdoodle.embed.mongo\"\n    testCompile \"org.hamcrest:hamcrest-library\"\n    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here\n}\n\ntask cleanResources(type: Delete) {\n    delete 'build/resources'\n}\n\nwrapper {\n    gradleVersion = '4.9'\n}\n\ntask stage(dependsOn: 'bootWar') {\n}\n\ncompileJava.dependsOn processResources\nprocessResources.dependsOn cleanResources,bootBuildInfo\nbootBuildInfo.mustRunAfter cleanResources\n\nif (!hasProperty('imageTag')) {\n    ext.imageTag = \"latest\"\n}\n\n\ntask sourcesForRelease(type: Copy) {\n    outputs.upToDateWhen { false }\n    from 'kubernetes'\n    exclude \"build\"\n    into 'build/kubernetes'\n    filter(ReplaceTokens, tokens: [IMAGE_TAG: project.imageTag])\n}\n"
        },
        "database": "MongoDB",
        "build_system": "Gradle",
        "config_files": {
            "notification/src/main/docker/Dockerfile": "FROM openjdk:8-jre-alpine\n\nENV SPRING_OUTPUT_ANSI_ENABLED=ALWAYS \\\n    JHIPSTER_SLEEP=0 \\\n    JAVA_OPTS=\"\"\n\n# Add a jhipster user to run our application so that it doesn't need to run as root\nRUN adduser -D -s /bin/sh jhipster\nWORKDIR /home/jhipster\n\nADD entrypoint.sh entrypoint.sh\nRUN chmod 755 entrypoint.sh && chown jhipster:jhipster entrypoint.sh\nUSER jhipster\n\nADD *.war app.war\n\nENTRYPOINT [\"./entrypoint.sh\"]\n\nEXPOSE 8082\n\n",
            "notification/Jenkinsfile": "#!/usr/bin/env groovy\npipeline {\n    agent any\n    environment {\n        XL_VALUE_BUILD_ID = \"1.0.${env.BUILD_ID}\"\n\n        XL_DEPLOY_URL = \"http://xl-deploy:4516\"\n        XL_DEPLOY_CREDENTIALS = credentials(\"xld-credentials\")\n    }\n\n    stages {\n        stage (\"checkout\") {\n            steps {\n                checkout scm\n            }\n        }\n        stage (\"check java\") {\n            steps {\n                sh \"java -version\"\n            }\n        }\n        stage (\"clean\") {\n            steps {\n                sh \"cd notification && chmod +x ./gradlew\"\n                sh \"cd notification && ./gradlew clean --no-daemon\"\n            }\n        }\n        stage (\"backend tests\") {\n            steps {\n                script {\n                    try {\n                        sh \"cd notification && ./gradlew test -PnodeInstall --no-daemon\"\n                    } catch(err) {\n                        throw err\n                    } finally {\n                        junit '**/build/**/TEST-*.xml'\n                    }\n                }\n            }\n        }\n        stage (\"packaging\") {\n            steps {\n                sh \"cd notification && ./gradlew bootWar -x test -Pprod -PnodeInstall --no-daemon\"\n                archiveArtifacts artifacts: '**/build/libs/*.war', fingerprint: true\n            }\n        }\n\n\n        stage (\"build and publish docker\") {\n            steps {\n                script {\n                    def dockerImage\n                    stage (\"build docker\") {\n                        sh \"cp -R notification/src/main/docker notification/build/\"\n                        sh \"cp notification/build/libs/*.war notification/build/docker/\"\n                        dockerImage = docker.build(\"${env.DOCKER_USER}/ecommerce-notification\", 'notification/build/docker')\n                    }\n                    stage (\"publish docker\") {\n                        docker.withRegistry('https://index.docker.io/v1/', 'docker-login') {\n                            dockerImage.tag(\"1.0.${env.BUILD_ID}\")\n                            dockerImage.push(\"1.0.${env.BUILD_ID}\")\n                        }\n                    }\n                }\n            }\n        }\n\n\n        stage (\"push xld package for notification\") {\n            steps {\n                sh \"cd notification && ./gradlew clean  sourcesForRelease -PimageTag=1.0.${env.BUILD_ID} --no-daemon\"\n                sh \"./xlw apply -f xebialabs/xld-kubernetes-notification-app.yaml\"\n            }\n        }\n\n    }\n}\n"
        },
        "static_files": {
            "notification/src/main/resources/logback-spring.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE configuration>\n\n<configuration scan=\"true\">\n    <include resource=\"org/springframework/boot/logging/logback/base.xml\"/>\n\n<!-- The FILE and ASYNC appenders are here as examples for a production configuration -->\n<!--\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>\n            <maxHistory>90</maxHistory>\n        </rollingPolicy>\n        <encoder>\n            <charset>utf-8</charset>\n            <Pattern>%d %-5level [%thread] %logger{0}: %msg%n</Pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"ASYNC\" class=\"ch.qos.logback.classic.AsyncAppender\">\n        <queueSize>512</queueSize>\n        <appender-ref ref=\"FILE\"/>\n    </appender>\n\n    <root level=\"${logging.level.root}\">\n        <appender-ref ref=\"ASYNC\"/>\n    </root>\n-->\n\n    <logger name=\"javax.activation\" level=\"WARN\"/>\n    <logger name=\"javax.mail\" level=\"WARN\"/>\n    <logger name=\"javax.management.remote\" level=\"WARN\"/>\n    <logger name=\"javax.xml.bind\" level=\"WARN\"/>\n    <logger name=\"ch.qos.logback\" level=\"WARN\"/>\n    <logger name=\"com.codahale.metrics\" level=\"WARN\"/>\n    <logger name=\"com.netflix\" level=\"WARN\"/>\n    <logger name=\"com.netflix.discovery\" level=\"INFO\"/>\n    <logger name=\"com.ryantenney\" level=\"WARN\"/>\n    <logger name=\"com.sun\" level=\"WARN\"/>\n    <logger name=\"com.zaxxer\" level=\"WARN\"/>\n    <logger name=\"io.undertow\" level=\"WARN\"/>\n    <logger name=\"io.undertow.websockets.jsr\" level=\"ERROR\"/>\n    <logger name=\"org.apache\" level=\"WARN\"/>\n    <logger name=\"org.apache.catalina.startup.DigesterFactory\" level=\"OFF\"/>\n    <logger name=\"org.bson\" level=\"WARN\"/>\n    <logger name=\"org.hibernate.validator\" level=\"WARN\"/>\n    <logger name=\"org.mongodb.driver\" level=\"WARN\"/>\n    <logger name=\"org.reflections\" level=\"WARN\"/>\n    <logger name=\"org.springframework\" level=\"WARN\"/>\n    <logger name=\"org.springframework.web\" level=\"WARN\"/>\n    <logger name=\"org.springframework.security\" level=\"WARN\"/>\n    <logger name=\"org.springframework.cache\" level=\"WARN\"/>\n    <logger name=\"org.thymeleaf\" level=\"WARN\"/>\n    <logger name=\"org.xnio\" level=\"WARN\"/>\n    <logger name=\"springfox\" level=\"WARN\"/>\n    <logger name=\"sun.rmi\" level=\"WARN\"/>\n    <logger name=\"sun.net.www\" level=\"INFO\"/>\n    <logger name=\"sun.rmi.transport\" level=\"WARN\"/>\n\n    <!-- https://logback.qos.ch/manual/configuration.html#shutdownHook and https://jira.qos.ch/browse/LOGBACK-1090 -->\n    <shutdownHook class=\"ch.qos.logback.core.hook.DelayingShutdownHook\"/>\n\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n\n</configuration>\n"
        }
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            "Dockerfile",
            "app.yml",
            "docker-registry.yml",
            "entrypoint.sh",
            "hazelcast-management-center.yml",
            "jenkins.yml",
            "jhipster-registry.yml",
            "mysql.yml",
            "sonar.yml"
        ],
        "folders": [
            "central-server-config"
        ]
    }
}