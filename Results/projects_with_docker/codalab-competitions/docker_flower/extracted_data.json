{
    "source_code_info": {
        "language": "Python",
        "framework": "Django",
        "dependencies": {
            ".pylint-conf": "[MASTER]\r\n\r\n# Specify a configuration file.\r\n#rcfile=\r\n\r\n# Python code to execute, usually for sys.path manipulation such as\r\r\n# pygtk.require().\r\n#init-hook=\r\n\r\n# Profiled execution.\r\nprofile=no\r\n\r\n# Add files or directories to the blacklist. They should be base names, not\r\r\n# paths.\r\nignore=CVS\r\n\r\n# Pickle collected data for later comparisons.\r\npersistent=yes\r\n\r\n# List of plugins (as comma separated values of python modules names) to load,\r\r\n# usually to register additional checkers.\r\nload-plugins=\r\n\r\n\r\n[MESSAGES CONTROL]\r\n\r\n# Enable the message, report, category or checker with the given id(s). You can\r\r\n# either give multiple identifier separated by comma (,) or put this option\r\r\n# multiple time. See also the \"--disable\" option for examples.\r\n#enable=\r\n\r\n# Disable the message, report, category or checker with the given id(s). You\r\r\n# can either give multiple identifiers separated by comma (,) or put this\r\r\n# option multiple times (only on the command line, not in the configuration\r\r\n# file where it should appear only once).You can also use \"--disable=all\" to\r\r\n# disable everything first and then reenable specific checks. For example, if\r\r\n# you want to run only the similarities checker, you can use \"--disable=all\r\r\n# --enable=similarities\". If you want to run only the classes checker, but have\r\r\n# no Warning level messages displayed, use\"--disable=all --enable=classes\r\r\n# --disable=W\"\r\n#CP\r\ndisable=R0921,W0702,W0703,R0922,C0103\r\n\r\n[REPORTS]\r\n\r\n# Set the output format. Available formats are text, parseable, colorized, msvs\r\r\n# (visual studio) and html. You can also give a reporter class, eg\r\r\n# mypackage.mymodule.MyReporterClass.\r\n#CP default was text\r\noutput-format=html\r\n\r\n# Put messages in a separate file for each module / package specified on the\r\r\n# command line instead of printing them on stdout. Reports (if any) will be\r\r\n# written in a file name \"pylint_global.[txt|html]\".\r\nfiles-output=no\r\n\r\n# Tells whether to display a full report or only the messages\r\nreports=yes\r\n\r\n# Python expression which should return a note less than 10 (10 is the highest\r\r\n# note). You have access to the variables errors warning, statement which\r\r\n# respectively contain the number of errors / warnings messages and the total\r\r\n# number of statements analyzed. This is used by the global evaluation report\r\r\n# (RP0004).\r\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\r\n\r\n# Add a comment according to your evaluation note. This is used by the global\r\r\n# evaluation report (RP0004).\r\ncomment=no\r\n\r\n# Template used to display messages. This is a python new-style format string\r\r\n# used to format the massage information. See doc for all details\r\n#msg-template=\r\n\r\n\r\n[BASIC]\r\n\r\n# Required attributes for module, separated by a comma\r\nrequired-attributes=\r\n\r\n# List of builtins function names that should not be used, separated by a comma\r\nbad-functions=map,filter,apply,input\r\n\r\n# Regular expression which should only match correct module names\r\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\r\n\r\n# Regular expression which should only match correct module level names\r\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\r\n\r\n# Regular expression which should only match correct class names\r\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\r\n\r\n# Regular expression which should only match correct function names\r\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\r\n\r\n# Regular expression which should only match correct method names\r\nmethod-rgx=[a-z_][a-z0-9_]{2,30}$\r\n\r\n# Regular expression which should only match correct instance attribute names\r\nattr-rgx=[a-z_][a-z0-9_]{2,30}$\r\n\r\n# Regular expression which should only match correct argument names\r\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\r\n\r\n# Regular expression which should only match correct variable names\r\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\r\n\r\n# Regular expression which should only match correct attribute names in class\r\r\n# bodies\r\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\r\n\r\n# Regular expression which should only match correct list comprehension /\r\r\n# generator expression variable names\r\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\r\n\r\n# Good variable names which should always be accepted, separated by a comma\r\ngood-names=i,j,k,ex,Run,_\r\n\r\n# Bad variable names which should always be refused, separated by a comma\r\nbad-names=foo,bar,baz,toto,tutu,tata\r\n\r\n# Regular expression which should only match function or class names that do\r\r\n# not require a docstring.\r\nno-docstring-rgx=__.*__\r\n\r\n# Minimum line length for functions/classes that require docstrings, shorter\r\r\n# ones are exempt.\r\ndocstring-min-length=-1\r\n\r\n\r\n[FORMAT]\r\n\r\n# Maximum number of characters on a single line.\r\n# CP -> Increase from 80 to 120\r\nmax-line-length=120\r\n\r\n# Regexp for a line that is allowed to be longer than the limit.\r\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\r\n\r\n# Maximum number of lines in a module\r\nmax-module-lines=1000\r\n\r\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\r\r\n# tab).\r\nindent-string='    '\r\n\r\n\r\n[MISCELLANEOUS]\r\n\r\n# List of note tags to take in consideration, separated by a comma.\r\nnotes=FIXME,XXX,TODO\r\n\r\n\r\n[SIMILARITIES]\r\n\r\n# Minimum lines number of a similarity.\r\nmin-similarity-lines=4\r\n\r\n# Ignore comments when computing similarities.\r\nignore-comments=yes\r\n\r\n# Ignore docstrings when computing similarities.\r\nignore-docstrings=yes\r\n\r\n# Ignore imports when computing similarities.\r\nignore-imports=no\r\n\r\n\r\n[TYPECHECK]\r\n\r\n# Tells whether missing members accessed in mixin class should be ignored. A\r\r\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\r\nignore-mixin-members=yes\r\n\r\n# List of classes names for which member attributes should not be checked\r\r\n# (useful for classes with attributes dynamically set).\r\nignored-classes=SQLObject\r\n\r\n# When zope mode is activated, add a predefined set of Zope acquired attributes\r\r\n# to generated-members.\r\nzope=no\r\n\r\n# List of members which are set dynamically and missed by pylint inference\r\r\n# system, and so shouldn't trigger E0201 when accessed. Python regular\r\r\n# expressions are accepted.\r\n#CP (custom list starts with objects)\r\ngenerated-members=REQUEST,acl_users,aq_parent,objects,^.DoesNotExist$\r\n\r\n\r\n[VARIABLES]\r\n\r\n# Tells whether we should check for unused import in __init__ files.\r\ninit-import=no\r\n\r\n# A regular expression matching the beginning of the name of dummy variables\r\r\n# (i.e. not used).\r\ndummy-variables-rgx=_$|dummy\r\n\r\n# List of additional names supposed to be defined in builtins. Remember that\r\r\n# you should avoid to define new builtins when possible.\r\nadditional-builtins=\r\n\r\n\r\n[CLASSES]\r\n\r\n# List of interface methods to ignore, separated by a comma. This is used for\r\r\n# instance to not check methods defines in Zope's Interface base class.\r\nignore-iface-methods=isImplementedBy,deferred,extends,names,namesAndDescriptions,queryDescriptionFor,getBases,getDescriptionFor,getDoc,getName,getTaggedValue,getTaggedValueTags,isEqualOrExtendedBy,setTaggedValue,isImplementedByInstancesOf,adaptWith,is_implemented_by\r\n\r\n# List of method names used to declare (i.e. assign) instance attributes.\r\ndefining-attr-methods=__init__,__new__,setUp\r\n\r\n# List of valid names for the first argument in a class method.\r\nvalid-classmethod-first-arg=cls\r\n\r\n# List of valid names for the first argument in a metaclass class method.\r\nvalid-metaclass-classmethod-first-arg=mcs\r\n\r\n\r\n[DESIGN]\r\n\r\n# Maximum number of arguments for function / method\r\nmax-args=5\r\n\r\n# Argument names that match this expression will be ignored. Default to name\r\r\n# with leading underscore\r\nignored-argument-names=_.*\r\n\r\n# Maximum number of locals for function / method body\r\nmax-locals=15\r\n\r\n# Maximum number of return / yield for function / method body\r\nmax-returns=6\r\n\r\n# Maximum number of branch for function / method body\r\nmax-branches=12\r\n\r\n# Maximum number of statements in function / method body\r\nmax-statements=50\r\n\r\n# Maximum number of parents for a class (see R0901).\r\nmax-parents=7\r\n\r\n# Maximum number of attributes for a class (see R0902).\r\nmax-attributes=7\r\n\r\n# Minimum number of public methods for a class (see R0903).\r\n# CP \r\nmin-public-methods=1\r\n\r\n# Maximum number of public methods for a class (see R0904).\r\n# CP -> e.g. django.test.TestCase has 60+ public methods\r\nmax-public-methods=100\r\n\r\n\r\n[IMPORTS]\r\n\r\n# Deprecated modules which should not be used, separated by a comma\r\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec\r\n\r\n# Create a graph of every (i.e. internal and external) dependencies in the\r\r\n# given file (report RP0402 must not be disabled)\r\nimport-graph=\r\n\r\n# Create a graph of external dependencies in the given file (report RP0402 must\r\r\n# not be disabled)\r\next-import-graph=\r\n\r\n# Create a graph of internal dependencies in the given file (report RP0402 must\r\r\n# not be disabled)\r\nint-import-graph=\r\n\r\n\r\n[EXCEPTIONS]\r\n\r\n# Exceptions that will emit a warning when being caught. Defaults to\r\r\n# \"Exception\"\r\novergeneral-exceptions=Exception\r\n"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: '2'\nservices:\n  # --------------------------------------------------------------------------\n  # HTTP Server\n  # --------------------------------------------------------------------------\n  nginx:\n    image: nginx\n    ports:\n      - ${NGINX_PORT}:${NGINX_PORT}\n      - ${SSL_PORT}:${SSL_PORT}\n    command: bash -x /app/docker/run_nginx.sh\n    volumes:\n      - ./certs:/app/certs\n      - ./docker:/app/docker\n      - ./codalab:/app/codalab\n      - ${LOGGING_DIR}/nginx:/var/log/nginx/\n    env_file: .env\n    links:\n      - django:django\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: nginx\n\n\n  # --------------------------------------------------------------------------\n  # Database\n  # --------------------------------------------------------------------------\n  postgres:\n    image: postgres:9.6.3\n    environment:\n      - POSTGRES_DB=${DB_NAME}\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n    volumes:\n      - ./docker:/app/docker\n      - ${LOGGING_DIR}/psql:/var/log/psql\n      - ${DB_DATA_PATH}:/var/lib/postgresql/data\n      - ./backups:/app/backups\n    env_file: .env\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: postgres\n\n\n  # --------------------------------------------------------------------------\n  # Message queue\n  # --------------------------------------------------------------------------\n  rabbit:\n    build:\n      # Custom Dockerfile for rabbit mostly to make building faster because\n      # of envsubst dependency\n      context: .\n      dockerfile: docker/rabbitmq/Dockerfile\n    hostname: rabbit\n    command: bash -x /app/docker/run_rabbitmq.sh\n    environment:\n      - RABBITMQ_LOGS=/var/log/rabbitmq/output.log\n      - RABBITMQ_SASL_LOGS=/var/log/rabbitmq/output_sasl.log\n    env_file: .env\n    volumes:\n      - ./docker:/app/docker\n      - ./certs:/app/certs\n      - ${LOGGING_DIR}/rabbitmq:/var/log/rabbitmq\n      - ./var/data/rabbitmq/:/var/lib/rabbitmq/mnesia\n    ports:\n      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}\n      - ${RABBITMQ_MANAGEMENT_PORT}:${RABBITMQ_MANAGEMENT_PORT}\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: rabbit\n\n  flower:\n    build:\n      context: .\n      dockerfile: docker/flower/Dockerfile\n    hostname: flower\n    ports:\n      - ${FLOWER_PORT}:${FLOWER_PORT}\n    environment:\n      # These aren't set in .env\n      - AMQP_USERNAME=${RABBITMQ_DEFAULT_USER}\n      - AMQP_PASSWORD=${RABBITMQ_DEFAULT_PASS}\n      - AMQP_HOST=rabbit\n      - AMQP_PORT=${RABBITMQ_PORT}\n      - FLOWER_CERTFILE=${SSL_CERTIFICATE}\n      - FLOWER_KEYFILE=${SSL_CERTIFICATE_KEY}\n    volumes:\n      - ./certs:/app/certs\n    env_file: .env\n    links:\n      - rabbit\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: flower\n\n\n  # --------------------------------------------------------------------------\n  # Cache\n  # --------------------------------------------------------------------------\n  memcached:\n    image: memcached\n    hostname: memcached\n    command: \"/usr/local/bin/memcached -u memcache\"\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: memcached\n\n\n  # --------------------------------------------------------------------------\n  # Django\n  # --------------------------------------------------------------------------\n  django:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    hostname: django\n    ports:\n      - ${DJANGO_PORT}:${DJANGO_PORT}\n    command: bash /app/docker/run_django.sh\n    volumes:\n      - ./certs:/app/certs\n      - ./codalab:/app/codalab\n      - ./docker:/app/docker\n      - ${LOGGING_DIR}/django:/var/log/django/\n      - ./backups:/app/backups\n    env_file: .env\n    environment:\n      - CONFIG_SERVER_NAME=${CODALAB_SITE_DOMAIN}\n      - PYTHONUNBUFFERED=1\n    links:\n      - postgres\n      - rabbit\n      - memcached\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: django\n    \n\n  # --------------------------------------------------------------------------\n  # Celery Workers\n  # --------------------------------------------------------------------------\n  worker_site:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: sh /app/docker/run_site.sh\n    volumes:\n      - ./codalab:/app/codalab\n      - ./docker:/app/docker\n      - ${LOGGING_DIR}/worker_site:/var/log/\n    environment:\n      # Stop memory leaks\n      - DEBUG=False\n      - REQUESTS_CA_BUNDLE=/usr/local/lib/python3.8/site-packages/certifi/cacert.pem\n    env_file: .env\n    links:\n      - postgres\n      - rabbit\n    logging:\n      options:\n        max-size: \"200k\"\n    container_name: worker_site\n      \n  worker_compute:\n    image: codalab/competitions-v1-compute-worker:1.1.7\n    privileged: true\n    volumes:\n      - ${LOGGING_DIR}/worker_compute:/var/log/\n      - ${SUBMISSION_TEMP_DIR}:${SUBMISSION_TEMP_DIR}\n      - /var/run/docker.sock:/var/run/docker.sock\n    env_file: .env\n    links:\n      - rabbit\n    logging:\n      options:\n        max-size: \"200k\"\n    mem_limit: 1g\n    memswap_limit: 1g\n    container_name: worker_compute\n",
            "Dockerfile": "FROM --platform=linux/amd64 python:3.8.3\n\n# For nodejs\nRUN curl -sL https://deb.nodesource.com/setup_4.x | bash -\nRUN apt-get update && apt-get install -y npm netcat nodejs python-dev libmemcached-dev\n\nRUN pip install --upgrade pip  # make things faster, hopefully\nCOPY codalab/requirements/requirements.txt requirements.txt\nRUN pip install -r requirements.txt\n\nWORKDIR /app/codalab\n",
            ".circleci/config.yml": "version: 2\n\ntest:\n  override:\n    - (cd codalab && py.test)\n\njobs:\n  build:\n    environment:\n      DJANGO_SETTINGS_MODULE: codalab.settings\n      DJANGO_CONFIGURATION: Dev\n    docker:\n      - image: cimg/python:3.8\n    steps:\n      - checkout\n      - restore_cache:\n          key: codalab-{{ .Branch }}-{{ checksum \"codalab/requirements/requirements.txt\" }}\n      - run:\n          name: CHOWN Python Library Dirs\n          command: sudo chown -R $(whoami) /usr/local/\n      - run:\n          name: Install Memcached reqs\n          command: sudo apt-get update --allow-releaseinfo-change && sudo apt-get install libmemcached-dev --fix-missing\n      - run:\n          name: PIP Install Requirements\n          command: pip install -r codalab/requirements/requirements.txt\n      - save_cache:\n          key: codalab-{{ .Branch }}-{{ checksum \"codalab/requirements/requirements.txt\" }}\n          paths:\n            - \"~/.cache/pip\"\n      - run:\n          name: Copy settings\n          command: cp .circleci/circlec_dev_setup.py codalab/codalab/settings/local.py\n      - run:\n          name: Run PyTest\n          environment:\n            DJANGO_SETTINGS_MODULE: \"codalab.settings.local\"\n            DJANGO_CONFIGURATION: \"Test\"\n            CHAHUB_API_URL: \"http://localhost/test/\"\n            CHAHUB_API_KEY: \"some-secret-key\"\n          command: cd codalab && py.test\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "rabbitmq.config",
            "rabbitmq_ssl.config"
        ],
        "folders": []
    }
}