#Use Base Image
FROM $REPOSITORY/gs-cloud-base-jre:$TAG AS builder

#Set Work directory
WORKDIR /app

# Set Environment Variable
ENV JAVA_TOOL_OPTIONS="${DEFAULT_JAVA_TOOL_OPTIONS}

# Copy Source Code to Container
COPY . .

# Update the operating system and Install Required Packages
RUN apt update && apt install -y --no-install-recommends unzip \
    && apt update \
    && apt -y upgrade \
    && apt install -y --no-install-recommends \
       fonts-dejavu \
       fonts-dejavu-extra \
       fonts-deva \
       fonts-font-awesome \
       fonts-freefont-ttf \
       fonts-material-design-icons-iconfont \
       fonts-materialdesignicons-webfont \
       fonts-roboto \
    && apt clean \
    && apt purge -y \
    && apt autoremove --purge -y \
    && rm -rf /var/cache/apt/* \
    && rm -rf /var/lib/apt/lists/* \

#Setup Application Directory
RUN mkdir -p /opt/app/data_directory /data/geowebcache \

# Copying Files
COPY -from=builder dependencies/ ./
COPY -from=builder snapshot-dependencies/ ./
COPY -from=builder spring-boot-loader/ ./

# Add the application's jar to the container
COPY ${JAR_FILE} application.jar

#Extracting Jar With Dependencies
RUN java -Djarmode=layertools -jar application.jar extract

# Set the application's jar file as the Docker image's main entrypoint
ENTRYPOINT ["java","-jar","application.jar"]
