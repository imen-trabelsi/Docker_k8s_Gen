{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.alibabacloud.mse.demo</groupId>\n    <artifactId>A</artifactId>\n    <version>3.1.0</version>\n    <packaging>jar</packaging>\n\n    <name>A</name>\n    <description>Demo project for Spring Boot</description>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>17</java.version>\n        <spring-boot.version>3.2.4</spring-boot.version>\n        <spring-cloud.version>2023.0.1</spring-cloud.version>\n        <spring-cloud-alibaba.version>2023.0.1.0</spring-cloud-alibaba.version>\n        <dubbo.version>3.3.0</dubbo.version>\n        <rocketmq.version>4.9.8</rocketmq.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.cloud</groupId>\n                    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-loadbalancer</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <version>1.18.24</version>\n        </dependency>\n\n        <!-- MQ -->\n        <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-client</artifactId>\n            <version>${rocketmq.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.rocketmq</groupId>\n            <artifactId>rocketmq-acl</artifactId>\n            <version>${rocketmq.version}</version>\n        </dependency>\n\n        <!--  Dubbo -->\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo</artifactId>\n            <version>${dubbo.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-spring-boot-starter</artifactId>\n            <version>${dubbo.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.dubbo</groupId>\n            <artifactId>dubbo-registry-nacos</artifactId>\n            <version>${dubbo.version}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.plugin</groupId>\n            <artifactId>spring-plugin-core</artifactId>\n            <version>2.0.0.RELEASE</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.httpcomponents</groupId>\n            <artifactId>httpclient</artifactId>\n            <version>4.5.13</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n            <version>3.12.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springdoc</groupId>\n            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n            <version>2.2.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n            <version>2.2.5.RELEASE</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring-cloud-alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <version>${spring-boot.version}</version>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.10.1</version>\n                <configuration>\n                    <compilerArgs>\n                        <arg>-parameters</arg>\n                    </compilerArgs>\n                    <source>17</source>\n                    <target>17</target>\n                </configuration>\n            </plugin>\n        </plugins>\n        <finalName>${project.artifactId}</finalName>\n    </build>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\nservices:\n  nacos:\n    hostname: nacos\n    image: nacos/nacos-server:latest\n    container_name: nacos-standalone\n    environment:\n      - PREFER_HOST_MODE=hostname\n      - MODE=standalone\n    ports:\n      - \"8848:8848\"\n\n  #  currency-mysql:\n  #    image: mysql:5.6\n  #    ports:\n  #      - 3306\n  #    command: [\n  #      --character-set-server=utf8mb4,\n  #      --collation-server=utf8mb4_unicode_ci\n  #    ]\n  #    environment:\n  #      MYSQL_ROOT_PASSWORD: currencyservice\n  #      MYSQL_DATABASE: currency\n\n  checkout-mysql:\n    image: mysql:5.6\n    ports:\n      - 3306\n    command: [\n      --character-set-server=utf8mb4,\n      --collation-server=utf8mb4_unicode_ci\n    ]\n    environment:\n      MYSQL_ROOT_PASSWORD: checkoutservice\n      MYSQL_DATABASE: checkout\n\n  product-mysql:\n    image: mysql:5.6\n    ports:\n      - 3306\n    command: [\n      --character-set-server=utf8mb4,\n      --collation-server=utf8mb4_unicode_ci\n    ]\n    environment:\n      MYSQL_ROOT_PASSWORD: productservice\n      MYSQL_DATABASE: product\n\n  cart-redis:\n    image: redis\n    ports:\n      - 6379:6379\n\n  frontend:\n    build: ./src/frontend\n    image: frontend:1.0.0-SNAPSHOT\n    container_name: frontend\n    #    restart: always\n    environment:\n      - dubbo.registry.address=nacos://nacos-server:8848\n      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n      - spring.cloud.nacos.config.server-addr=nacos-server:8848\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - \"nacos\"\n\n  cartservice:\n    build: ./src/cartservice\n    image: cartservice:1.0.0-SNAPSHOT\n    container_name: cartservice\n    environment:\n      - dubbo.registry.address=nacos://nacos-server:8848\n      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n      - spring.cloud.nacos.config.server-addr=nacos-server:8848\n    depends_on:\n      - \"nacos\"\n      - \"cart-redis\"\n\n  checkoutservice:\n    build: ./src/checkoutservice\n    image: checkoutservice:1.0.0-SNAPSHOT\n    container_name: checkoutservice\n    environment:\n      - dubbo.registry.address=nacos://nacos-server:8848\n      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n      - spring.cloud.nacos.config.server-addr=nacos-server:8848\n    depends_on:\n      - \"nacos\"\n      - \"checkout-mysql\"\n\n  prdoctservice:\n    build: ./src/productservice\n    image: productservice:1.0.0-SNAPSHOT\n    container_name: productservice\n    environment:\n      - dubbo.registry.address=nacos://nacos-server:8848\n      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n      - spring.cloud.nacos.config.server-addr=nacos-server:8848\n    depends_on:\n      - \"nacos\"\n      - \"product-mysql\"\n\n  loadgenerator:\n    build: ./src/loadgenerator\n    image: registry.cn-shanghai.aliyuncs.com/microservice_demo/loadgenerator:1.0.0-SNAPSHOT\n    container_name: loadgenerator\n\n#  adservice:\n#    build: ./src/adservice\n#    image: adservice:1.0.0-SNAPSHOT\n#    container_name: adservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"\n#\n#\n#\n#  currencyservice:\n#    build: ./src/productservice\n#    image: currencyservice:1.0.0-SNAPSHOT\n#    container_name: currencyservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"\n#\n#  emailservice:\n#    build: ./src/emailservice\n#    image: emailservice:1.0.0-SNAPSHOT\n#    container_name: emailservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"\n#\n#  paymentservice:\n#    build: ./src/paymentservice\n#    image: paymentservice:1.0.0-SNAPSHOT\n#    container_name: paymentservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"\n#\n#  recomendationservice:\n#    build: ./src/recomendationservice\n#    image: recomendationservice:1.0.0-SNAPSHOT\n#    container_name: recomendationservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"\n#\n#  shippingservice:\n#    build: ./src/shippingservice\n#    image: shippingservice:1.0.0-SNAPSHOT\n#    container_name: shippingservice\n#    environment:\n#      - dubbo.registry.address=nacos://nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#      - spring.cloud.nacos.discovery.server-addr=nacos-server:8848\n#    depends_on:\n#      - \"nacos\"",
            "mse-simple-demo/A/Dockerfile": "FROM maven:3.9.9-eclipse-temurin-17 as build\n\n# copy arthas\nCOPY --from=hengyunabc/arthas:latest /opt/arthas /opt/arthas\n\nCOPY <<EOF /root/.m2/settings.xml\n<?xml version=\"1.0\"?>\n<settings>\n    <mirrors>\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <url>https://maven.aliyun.com/repository/central</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n    </mirrors>\n</settings>\nEOF\n\nWORKDIR /app\n\nCOPY ./ ./\n\nRUN --mount=type=cache,target=/root/.m2/repository/ \\\n    mvn clean package --batch-mode\n\n\nFROM eclipse-temurin:17-jdk\n\nRUN apt-get update && apt-get install -y \\\n    vim unzip netcat-openbsd telnet tcpdump iproute2 lsof ngrep \\\n    && rm -rf /var/lib/apt/lists/*\n\n# copy arthas\nCOPY --from=hengyunabc/arthas:latest /opt/arthas /opt/arthas\n\nCOPY --from=build /app/target/A.jar /app/target/A.jar\n#COPY  ./target/A.jar /app/target/A.jar\n\nEXPOSE 20001\nENTRYPOINT [\"java\",\"-jar\",\"/app/target/A.jar\"]\n",
            "mse-simple-demo/Jenkinsfile": "#!groovy\npipeline {\n\n    // \u5b9a\u4e49\u672c\u6b21\u6784\u5efa\u4f7f\u7528\u54ea\u4e2a\u6807\u7b7e\u7684\u6784\u5efa\u73af\u5883\uff0c\u672c\u793a\u4f8b\u4e2d\u4e3a \u201cslave-pipeline\u201d\n    agent{\n        node{\n          label 'slave-pipeline'\n        }\n    }\n\n    //\u5e38\u91cf\u53c2\u6570\uff0c\u521d\u59cb\u786e\u5b9a\u540e\u4e00\u822c\u4e0d\u9700\u66f4\u6539\n    environment{\n        IMAGE = sh(returnStdout: true,script: 'echo registry.$image_region.aliyuncs.com/$image_namespace/$image_reponame:$image_tag').trim()\n        BRANCH =  sh(returnStdout: true,script: 'echo $branch').trim()\n    }\n    options {\n        //\u4fdd\u6301\u6784\u5efa\u7684\u6700\u5927\u4e2a\u6570\n        buildDiscarder(logRotator(numToKeepStr: '10')) \n    }\n    \n    parameters {\n        string(name: 'image_region', defaultValue: 'cn-shanghai')\n        string(name: 'image_namespace', defaultValue: 'yizhan')\n        string(name: 'image_reponame', defaultValue: 'spring-cloud-a')\n        string(name: 'image_tag', defaultValue: 'gray')\n        string(name: 'branch', defaultValue: 'master')\n        string(name: 'number_of_pods', defaultValue: '2')\n    }\n\n    //pipeline\u7684\u5404\u4e2a\u9636\u6bb5\u573a\u666f\n    stages {\n\n        stage('\u4ee3\u7801\u6253\u5305') {\n            steps{\n                container(\"maven\") {\n                    echo \"\u955c\u50cf\u6784\u5efa......\"\n                    sh \"cd A && mvn clean package\"\n                }\n                \n            }\n        }\n\n\n        stage('\u955c\u50cf\u6784\u5efa\u53ca\u53d1\u5e03'){\n          steps{\n              container(\"kaniko\") {\n                  sh \"kaniko -f `pwd`/A/Dockerfile -c `pwd`/A --destination=${IMAGE} --skip-tls-verify\"\n              }\n          }\n        }\n\n        stage('\u7070\u5ea6\u90e8\u7f72') {\n            steps{\n                container('kubectl') {\n                    echo \"\u7070\u5ea6\u90e8\u7f72......\"\n                    sh \"cd A && sed -i -E \\\"s/${env.image_reponame}:.+/${env.image_reponame}:${env.image_tag}/\\\" A-gray-deployment.yaml\"\n                    sh \"cd A && sed -i -E \\\"s/replicas:.+/replicas: ${env.number_of_pods}/\\\" A-gray-deployment.yaml\"\n                    sh \"kubectl apply -f A/A-gray-deployment.yaml -n default\"\n                }\n            }\n        }\n        \n        stage('\u7ed3\u675f\u7070\u5ea6') {\n            input {\n                message \"\u8bf7\u786e\u8ba4\u662f\u5426\u5168\u91cf\u53d1\u5e03\"\n                ok \"\u786e\u8ba4\"\n                parameters {\n                    string(name: 'continue', defaultValue: 'true', description: 'true\u4e3a\u5168\u91cf\u53d1\u5e03\uff0c\u5176\u4ed6\u4e3a\u56de\u6eda')\n                }\n            }\n            steps{\n                script {\n                    env.continue = sh (script: 'echo ${continue}', returnStdout: true).trim()\n                    if (env.continue.equals('true')) {\n                        container('kubectl') {\n                            echo \"\u5168\u91cf\u53d1\u5e03......\"\n                            sh \"cd A && sed -i -E \\\"s/${env.image_reponame}:.+/${env.image_reponame}:${env.image_tag}/\\\" A-deployment.yaml\"\n                            sh \"cd A && sed -i -E \\\"s/replicas:.+/replicas: ${env.number_of_pods}/\\\" A-deployment.yaml\"\n                            sh \"kubectl apply -f A/A-deployment.yaml -n default\"\n                        }\n                    } else {\n                        echo '\u56de\u6eda'\n                    }\n                    container('kubectl') {\n                        sh \"kubectl delete -f A/A-gray-deployment.yaml -n default\"\n                    }\n                }\n            }\n        }\n    }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "build.sh",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}