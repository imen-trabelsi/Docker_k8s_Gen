{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[tool.semantic_release]\nversion_variables = [\"vmaas/common/constants.py:VMAAS_VERSION\"]\nversion_toml = [\"pyproject.toml:tool.poetry.version\"]\ncommit_author = \"vmaas-bot <40663028+vmaas-bot@users.noreply.github.com>\"\n\n[tool.semantic_release.commit_parser_options]\nallowed_tags = [\n    \"build\",\n    \"chore\",\n    \"ci\",\n    \"docs\",\n    \"feat\",\n    \"fix\",\n    \"perf\",\n    \"style\",\n    \"refactor\",\n    \"test\",\n]\nminor_tags = [\"feat\"]\npatch_tags = [\"build\", \"chore\", \"ci\", \"fix\", \"perf\", \"refactor\"]\n\n[tool.poetry]\nname = \"vmaas\"\nversion = \"2.83.1\"\ndescription = \"\"\nauthors = [\"\"]\nreadme = \"README.md\"\npackages = []\n\n[tool.poetry.dependencies]\npython = \"~3.12\"\napp-common-python = \">=0.2.5\"\napscheduler = \"^3.10.4\"\nboto3 = \">=1.36.2\"\nbotocore = \">=1.36.2\"\nconnexion = {extras = [\"swagger-ui\"],version = \"^3.2.0\"}\ngitpython = \">=3.1.30\"\niso8601 = \">=0.1.12\"\nnatsort = \">=7.0.1\"\npsycopg2-binary = \">=2.8.6\"\nprometheus-client = \">=0.8.0\"\npyopenssl = \">=25.0.0\"\npython-dateutil = \">=2.8.1\"\npytz = \">=2020.4\"\npyyaml = \">=5.4.1\"\nrequests = \">=2.32.0\"\nschema = \">=0.7.3\"\nuvicorn = \"^0.34.0\"\nwatchtower = \">=1.0.0\"\nattrs = \"^23.2.0\"\nzstandard = \"^0.23.0\"\n\n[tool.poetry.group.dev.dependencies]\ncoverage = \">=4.5.3\"\npur = \">=5.4.1\"\npytest = \">=5.0.1\"\npylint = \">=2.3.1\"\npytest-cov = \">=2.7.1\"\ntesting-postgresql = \">=1.3.0\"\nipython = \">=8.18.1\"\nmypy = \">=1.8.0\"\nflake8 = \"7.1.2\"\ntypes-psycopg2 = \"*\"\ntypes-requests = \"*\"\ntypes-python-dateutil = \"*\"\ntypes-PyYAML = \"*\"\ntypes-pyOpenSSL = \"*\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.mypy]\ndisallow_any_generics = true\ndisallow_untyped_defs = true\ndisallow_untyped_calls = true\nwarn_return_any = true\nwarn_unreachable = true\nfollow_imports = \"silent\"\npackages = \"\"\"\n    vmaas.reposcan.database.csaf_store,\n    vmaas.reposcan.database.release_store,\n    vmaas.reposcan.database.test.test_csaf,\n    vmaas.reposcan.redhatcsaf,\n    vmaas.reposcan.redhatrelease\n\"\"\"\n"
        },
        "database": "PostgreSQL",
        "build_system": "poetry",
        "config_files": {
            "docker-compose.yml": "version: '3'\n\nservices:\n  vmaas_database:\n    container_name: vmaas-database\n    image: docker.io/library/postgres:16\n    restart: unless-stopped\n    shm_size: '256mb'\n    environment:\n      POSTGRES_DB: vmaas\n      POSTGRES_USER: vmaas_admin\n      POSTGRES_PASSWORD: vmaas_admin_pwd\n    ports:\n      - 5432:5432\n    volumes:\n      - vmaas-db-data:/var/lib/postgresql/data\n\n  vmaas_reposcan:\n    command: /vmaas/entrypoint.sh reposcan\n    container_name: vmaas-reposcan\n    hostname: vmaas-reposcan\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n      args:\n        REQUIRE_RHEL: \"no\"\n    image: vmaas/app:latest\n    restart: unless-stopped\n    env_file:\n      - ./conf/common.env\n      - ./conf/database-connection-writer.env\n      - ./conf/reposcan.env\n    ports:\n      - 8081:8000\n      - 8083:9000\n      - 9082:10000\n    volumes:\n      - vmaas-dump-data:/data:z\n    depends_on:\n      - vmaas_database\n\n  vmaas_reposcan_db_init:\n    command: >\n         python3.12 -m vmaas.common.wait_for_services python3.12 -m vmaas.reposcan.database.upgrade\n    container_name: vmaas-reposcan-db-init\n    hostname: vmaas-reposcan-db-init\n    image: vmaas/app:latest\n    env_file:\n      - ./conf/common.env\n      - ./conf/database-connection-admin.env\n      - ./conf/reposcan.env\n    depends_on:\n      - vmaas_database\n\n  vmaas_webapp:\n    command: /vmaas/entrypoint.sh webapp\n    container_name: vmaas-webapp\n    hostname: vmaas-webapp\n    image: vmaas/app:latest\n    restart: unless-stopped\n    env_file:\n      - ./conf/common.env\n      - ./conf/webapp.env\n    ports:\n      - 8080:8000\n      - 9081:10000\n    depends_on:\n      - vmaas_reposcan\n\n  vmaas_webapp_go:\n    command: /vmaas/entrypoint.sh webapp-go\n    container_name: vmaas-webapp-go\n    hostname: vmaas-webapp-go\n    image: vmaas/app:latest\n    restart: unless-stopped\n    env_file:\n      - ./conf/common.env\n      - ./conf/webapp_go.env\n    ports:\n      - 8000:8000\n      - 9000:9000\n      - 9088:10000\n    depends_on:\n      - vmaas_reposcan\n      - vmaas_webapp # to proxy requests\n\n  vmaas_prometheus:\n    container_name: vmaas-prometheus\n    image: prom/prometheus:v2.21.0\n    volumes:\n      - prometheus-data:/prometheus\n      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml\n    security_opt:\n      - label=disable\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n      - '--web.console.libraries=/usr/share/prometheus/console_libraries'\n      - '--web.console.templates=/usr/share/prometheus/consoles'\n    ports:\n      - 9090:9090\n    depends_on:\n      - vmaas_reposcan\n      - vmaas_webapp\n    restart: unless-stopped\n    profiles:\n      - monitoring\n\n  vmaas_grafana:\n    container_name: vmaas-grafana\n    build:\n      context: ./\n      dockerfile: ./monitoring/grafana/Dockerfile\n    image: vmaas-grafana:latest\n    depends_on:\n      - vmaas_prometheus\n    ports:\n      - 3000:3000\n    restart: unless-stopped\n    profiles:\n      - monitoring\n\nvolumes:\n  vmaas-db-data:\n  vmaas-dump-data:\n  prometheus-data:\n  grafana-data:\n",
            "Dockerfile": "FROM registry.access.redhat.com/ubi9/ubi-minimal\n\nARG VAR_RPMS=\"\"\nRUN curl -o /etc/yum.repos.d/postgresql.repo \\\n        https://copr.fedorainfracloud.org/coprs/g/insights/postgresql-16/repo/epel-9/group_insights-postgresql-16-epel-9.repo\n\nRUN microdnf install -y --setopt=install_weak_deps=0 --setopt=tsflags=nodocs \\\n        python312 python3.12-pip python3-rpm python3-dnf which nginx rpm-devel git-core shadow-utils diffutils systemd libicu postgresql go-toolset \\\n        $VAR_RPMS && \\\n        ln -s /usr/lib64/python3.9/site-packages/rpm /usr/lib64/python3.12/site-packages/rpm && \\\n        ln -s $(basename /usr/lib64/python3.9/site-packages/rpm/_rpm.*.so) /usr/lib64/python3.9/site-packages/rpm/_rpm.so && \\\n    microdnf clean all\n\nWORKDIR /vmaas\n\nADD pyproject.toml /vmaas/\nADD poetry.lock    /vmaas/\n\nENV LC_ALL=C.utf8\nENV LANG=C.utf8\nARG VAR_POETRY_INSTALL_OPT=\"--only main\"\nRUN pip3.12 install --upgrade pip && \\\n    pip3.12 install --upgrade poetry~=2.0.1 poetry-plugin-export\nRUN poetry export $VAR_POETRY_INSTALL_OPT -f requirements.txt --output requirements.txt && \\\n    pip3.12 install -r requirements.txt\n\nRUN install -m 1777 -d /data && \\\n    adduser --gid 0 -d /vmaas --no-create-home vmaas\nRUN mkdir -p /vmaas/go/src/vmaas && chown -R vmaas:root /vmaas/go\n\nENV PYTHONPATH=/vmaas\nENV GOPATH=/vmaas/go \\\n    PATH=$PATH:/vmaas/go/bin\n\nADD /vmaas-go                   /vmaas/go/src/vmaas\n\nWORKDIR /vmaas/go/src/vmaas\nRUN go mod download\nRUN go build -v main.go\n\nWORKDIR /vmaas\n\n# Baked-in content for FedRAMP\nARG STATIC_ASSETS=0\nRUN if [ \"${STATIC_ASSETS}\" == 1 ] ; then \\\n        curl -o /etc/pki/ca-trust/source/anchors/2022-IT-Root-CA.crt https://certs.corp.redhat.com/certs/2022-IT-Root-CA.pem && \\\n        update-ca-trust extract && \\\n        git clone https://gitlab.cee.redhat.com/vmaas/vmaas-assets.git /vmaas/repolist_git ; \\\n    fi\n\n# remove testdata possibly containing vulnerable code\nRUN rm -rf /vmaas/go/pkg/mod/github.com/gabriel-vasile/mimetype\\@v1.4.6/testdata/\n\nUSER vmaas\n\nADD entrypoint.sh               /vmaas/\nADD conf                        /vmaas/conf\nADD /database                   /vmaas/database\nADD /vmaas/webapp               /vmaas/vmaas/webapp\nADD /vmaas/reposcan             /vmaas/vmaas/reposcan\nADD /vmaas/common               /vmaas/vmaas/common\n\nADD /vmaas/reposcan/redhatrelease/gen_package_profile.py /usr/local/bin\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "dashboards.yml",
            "datasources.yml"
        ],
        "folders": [
            "dashboards"
        ]
    }
}