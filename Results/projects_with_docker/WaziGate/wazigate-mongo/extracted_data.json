{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "JavaScript",
        "dependencies": {
            "package.json": "{\n\t\"name\": \"Mongo DB Test\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"I do not like mongo db, but i like mongo juice ;)\",\n\t\"private\": false,\n\t\"author\": \"Gholi\",\n\t\"homepage\": \"https://tenor.com/search/cute-bird-gifs\",\n\t\"wazigate\": {\n\t\t\"menu\": [\n\t\t\t{\n\t\t\t\t\"label\": \"Mongo Milk Shake\",\n\t\t\t\t\"icon\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f9/Antu_mongodb.svg/512px-Antu_mongodb.svg.png\",\n\t\t\t\t\"href\": \"#/index.html\",\n\t\t\t\t\"items\": []\n\t\t\t}\n\t\t]\n\t}\n}\n"
        },
        "database": "MongoDB",
        "build_system": "npm",
        "config_files": {
            ".env": "# Version used for the containers\nWAZIGATE_TAG=3.0.0\n",
            "docker-compose.yml": "version: \"3.9\"\n\nservices:\n  wazigate-system:\n    container_name: waziup.wazigate-system\n    image: waziup/wazigate-system:$WAZIGATE_TAG\n    build:\n      context: ./wazigate-system\n      x-bake:\n        platforms: \"linux/arm/v7\"\n    volumes:\n      - ./apps/waziup.wazigate-system:/var/lib/waziapp\n      - /var/run:/var/run\n      - /sys/class/gpio:/sys/class/gpio\n      - /dev/mem:/dev/mem\n      - /var/run/wazigate-host.sock:/var/run/wazigate-host.sock\n    privileged: true\n    healthcheck:\n      test: curl --fail --unix-socket /var/lib/waziapp/proxy.sock http://localhost/ || exit 1\n      interval: 10s\n      timeout: 5s\n      retries: 30 # Will try for 5 minutes\n    restart: unless-stopped\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n\n  wazigate-lora:\n    container_name: waziup.wazigate-lora\n    image: waziup/wazigate-lora:$WAZIGATE_TAG\n    build:\n      context: ./wazigate-lora\n      x-bake:\n        platforms: \"linux/arm64\"\n    labels: \n      - io.waziup.waziapp=waziup.wazigate-lora\n    volumes:\n      - ./apps/waziup.wazigate-lora:/var/lib/waziapp    \n    restart: unless-stopped\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n\n  wazigate-lora-forwarders:\n    container_name: waziup.wazigate-lora.forwarders\n    image: waziup/wazigate-lora-forwarders:$WAZIGATE_TAG\n    build: \n      context: ./wazigate-lora/forwarders\n      x-bake:\n        platforms: \"linux/arm64\"\n    tty: true \n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"200k\"\n        max-file: \"10\"\n    volumes:\n      - ./apps/waziup.wazigate-lora/forwarders/:/root/conf\n      - /var/run/dbus:/var/run/dbus\n      - /sys/class/gpio:/sys/class/gpio\n      - /dev:/dev\n    environment:\n      - ENABLE_MULTI_SPI=1\n      - ENABLE_MULTI_USB=1\n      - ENABLE_SINGLE_SPI=1\n    devices:\n      - /dev/ttyACM0:/dev/ttyACM0\n    labels:\n      - io.waziup.waziapp=waziup.wazigate-lora\n    privileged: true  \n    restart: unless-stopped\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n\n  chirpstack:\n    container_name: waziup.wazigate-lora.chirpstack-v4\n    image: chirpstack/chirpstack:4.6\n    platform: linux/arm64\n    command: -c /etc/chirpstack\n    restart: unless-stopped\n    volumes:\n      - ./apps/waziup.wazigate-lora/chirpstack:/etc/chirpstack\n      - /var/run/redis:/var/run/redis\n    depends_on:\n      - postgres\n      - mosquitto\n    environment:\n      - MQTT_BROKER_HOST=mosquitto\n      - POSTGRESQL_HOST=postgres\n    ports:\n      - 8080:8080\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n    labels:\n      io.waziup.wazigate.dep: \"wazigate-lora\"\n\n  chirpstack-gateway-bridge:\n    container_name: waziup.wazigate-lora.chirpstack-gateway-bridge\n    image: chirpstack/chirpstack-gateway-bridge:4\n    platform: linux/arm64\n    volumes:\n      - ./apps/waziup.wazigate-lora/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge\n    environment:\n      - INTEGRATION__MQTT__EVENT_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/event/{{ .EventType }}\n      - INTEGRATION__MQTT__STATE_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/state/{{ .StateType }}\n      - INTEGRATION__MQTT__COMMAND_TOPIC_TEMPLATE=eu868/gateway/{{ .GatewayID }}/command/#\n    depends_on:\n      - mosquitto\n    ports:\n      - 1700:1700/udp\n    restart: unless-stopped\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n    labels: \n      - io.waziup.waziapp=waziup.wazigate-lora\n\n  chirpstack-rest-api:\n    container_name: chirpstack-rest-api\n    image: chirpstack/chirpstack-rest-api:4.6\n    platform: linux/arm64\n    restart: unless-stopped\n    command: --server chirpstack:8080 --bind 0.0.0.0:8090 --insecure\n    ports:\n      - 8090:8090\n    depends_on:\n      - chirpstack\n\n  postgres:\n    container_name: postgres\n    image: postgres:14-alpine\n    platform: linux/arm64\n    volumes:\n      - ./apps/waziup.wazigate-lora/postgresql/initdb:/docker-entrypoint-initdb.d\n      - postgresqldata:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_HOST_AUTH_METHOD=trust\n      - POSTGRES_PASSWORD=root\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"chirpstack\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5  \n    command: postgres -c autovacuum=off \n    restart: unless-stopped\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n\n  mosquitto:\n    container_name: mosquitto\n    image: eclipse-mosquitto:1.6  # The MQTT bridge seems to work only with eclipse-mosquitto 1.6\n    #image: eclipse-mosquitto:2\n    platform: linux/arm64/v8\n    restart: unless-stopped\n    ports:\n      - 1884:1884 # Using port 1884 because WaziGate Edge MQTT uses port 1883\n      - 1885:1885\n    volumes: \n      - ./apps/waziup.wazigate-lora/mosquitto/config/:/mosquitto/config/\n    entrypoint: [\"sh\", \"-c\", \"./mosquitto/config/wait-for-wazigate-edge.sh waziup.wazigate-edge:1883 -- mosquitto -c /mosquitto/config/mosquitto.conf\"]\n    extra_hosts: \n      - \"wazigate:172.17.0.1\"\n      - \"waziup.wazigate-edge:172.17.0.1\"\n      - \"wazigate-edge:172.17.0.1\"\n\n#-------------------------#\n\nnetworks:\n  default:\n    name: wazigate\n\nvolumes:\n  postgresqldata:\n    name: postgresqldata\n",
            "wazigate-mongo/Dockerfile": "FROM arm64v8/alpine:latest\n\n#MAINTAINER felix.markwordt@waziup.org\n\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.9/main' >> /etc/apk/repositories\nRUN echo 'http://dl-cdn.alpinelinux.org/alpine/v3.9/community' >> /etc/apk/repositories\n\nRUN apk update\nRUN apk add mongodb yaml-cpp=0.6.2-r2\nRUN mongo -version\n   \nEXPOSE 27017\n\nENTRYPOINT mongod --journal\n",
            "Jenkinsfile": "// This Jenkinsfile will build the docker images for all WaziGate components.\n// After that, it will restart them on a test WaziGate RPI and run the test suite.\n\npipeline {\n  agent any\n  parameters {\n    booleanParam(name: 'skip_perf_tests', defaultValue: false, description: 'Set to true to skip the perf test stage')\n  }\n  options {\n    timeout(time: 1, unit: 'HOURS')\n  }\n  stages {\n    stage('Prepare') {\n      steps {\n        sh 'pip3 install unittest-xml-reporting'\n       \n        //Install docker buildx builder\n        sh 'docker run --rm --privileged multiarch/qemu-user-static --reset -p yes'\n        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {\n            sh 'docker buildx create --name rpibuilder --platform linux/arm64/v8; true'\n        }\n        sh 'docker buildx use rpibuilder'\n        sh 'docker buildx inspect --bootstrap'\n\n        //read environment variables\n        script {\n          def props = readProperties interpolate: true, file: '.env'\n          env.WAZIGATE_TAG = props.WAZIGATE_TAG\n          env.DEB_NAME = \"wazigate_${WAZIGATE_TAG}_all.deb\"\n        }\n        sh 'echo \"BUILD_ID=$BUILD_ID\" >> .env'\n      }\n    }\n    stage('Build') {\n      steps {\n        // update each submodule\n        sh 'git submodule update --recursive'\n        // Build all images\n        sh 'docker buildx bake --load --progress plain'\n\n        // *************** if needed, pull missing docker images on the node *************** //\n        //sh 'docker images'\n        //sh 'docker pull --platform linux/arm64 postgres:14-alpine'\n        //sh 'docker pull --platform linux/arm64 redis:7-alpine'\n        //sh 'docker pull --platform linux/arm64/v8 eclipse-mosquitto:1.6'\n        //sh 'docker pull --platform linux/arm64 chirpstack/chirpstack-gateway-bridge:4'\n        //sh 'docker pull --platform linux/arm64 chirpstack/chirpstack:4'\n        //sh 'docker pull --platform linux/arm64 chirpstack/chirpstack-rest-api:4'\n        // ********************************************************************* //\n\n        // Save all images in a single tar file\n        sh 'docker save -o wazigate_images.tar `cat docker-compose.yml | yq .services[].image | envsubst`'\n\n        // Build wazigate-dashboard\n        dir(\"wazigate-edge\") {\n          dir(\"wazigate-dashboard\") {\n            // rebuild node-sass\n            sh 'npm rebuild node-sass'\n\n            // install all needed modules, run build, run create stats -> saved in wazigate-dashboard (open with npn )\n            sh 'npm i --force && npm run build --force'\n          }\n        }\n        // Build wazigate(-edge) go backend\n        dir(\"wazigate-edge\") {\n          script {\n            env.GOARCH = \"arm64\"\n            env.GOOS = \"linux\"\n            SEC_SINCE_UNIX_EPOCH = sh (\n              script: 'date +%s',\n              returnStdout: true\n            ).trim()\n            echo \"Seconds since UNIX epoch: ${SEC_SINCE_UNIX_EPOCH}\"\n            env.SEC_SINCE_UNIX_EPOCH = \"$SEC_SINCE_UNIX_EPOCH\"\n          }\n          sh 'echo \"2nd:Seconds since UNIX epoch: ${SEC_SINCE_UNIX_EPOCH}\"'\n          sh 'go build -ldflags \"-s -w -X main.branch=v3 -X main.version=$WAZIGATE_TAG -X main.buildNr=$BUILD_ID -X main.buildtime=$SEC_SINCE_UNIX_EPOCH\" -buildvcs=false -o wazigate .'\n        }\n\n        // Create the Debian package and manifest (including the docker images)\n        sh 'dpkg-buildpackage -uc -us -b; mv ../$DEB_NAME .'\n        sh 'dpkg-scanpackages -m . | gzip --fast > Packages.gz'\n      }\n    }\n    stage('Stage') {\n      steps {\n        // *************** monitor the node *************** //\n        sh 'ssh pi@$WAZIGATE_IP \"df -h; ls -a; docker volume ls; exit\"'\n        // *********************************************** //\n\n        // Copy Debian package to RPI\n        sh 'scp $DEB_NAME pi@$WAZIGATE_IP:~/'\n        sh 'ssh pi@$WAZIGATE_IP \"sudo dpkg --unpack $DEB_NAME\"'\n        // Restart containers on RPI\n        sh 'ssh pi@$WAZIGATE_IP \"/var/lib/wazigate/update_containers.sh\"'\n      }\n    }\n    stage('Test') {\n      steps {\n        dir('tests'){\n          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n            sh 'sudo -E python3 tests.py'\n          }\n        }\n      }\n    }\n    stage('Perf_Tests') {\n      when { expression { params.skip_perf_tests != true } }\n      steps {\n        dir('tests'){\n          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {\n            echo \"current build number: ${currentBuild.number}\"\n            sh \"sudo -E python3 repeated_functional_and_performance_tests.py ${currentBuild.number}\"\n          }\n        }\n      }\n    }\n  }\n  post {\n    success {\n      // Pushing all images to dockerhub\n      sh 'docker-compose push'\n      // Install debian package in download repo\n      sh 'cp $DEB_NAME Packages.gz /var/www/Staging/downloads/'\n      // Publish artifacts\n      archiveArtifacts artifacts: 'Packages.gz, $DEB_NAME', fingerprint: true\n      junit 'tests/results.xml'\n      plot csvFileName: 'plot_aggregated_performance_results.csv',\n        csvSeries: [[\n                              file: 'tests/aggregated_performance_results.csv', \n                              url: '']],\n        group: 'Performance evaluation', \n        title: 'Time taken for aggregated performance tests',\n        style: 'line', \n        exclZero: false,\n        keepRecords: false,\n        logarithmic: false,\n        numBuilds: '',\n        useDescr: false,\n        yaxis: 'Time in sec', \n        yaxisMinimum: '0', \n        yaxisMaximum: '1000'\n    }\n  }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "Dockerfile_32",
            "docker-compose.yml",
            "package.json"
        ],
        "folders": [
            "bin"
        ]
    }
}