{
    "source_code_info": {
        "language": "Python",
        "framework": "Django",
        "dependencies": {
            "requirements.txt": "Django==2.2.10\r\ndjangorestframework==3.9.2\r\npytz==2018.9\r\nrequests==2.21.0\r\ncoverage==4.0.3\r\ncoveralls==1.7.0\r\nPyYAML==5.1\r\nrequests==2.21.0\r\npycodestyle==2.5.0\r\n"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nservices:\n  hubcare_api:\n    container_name: hubcare_api\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8000\n      - URL_COMMIT=http://commit-metrics:8001/commit/\n      - URL_COMMUNITY=http://community-metrics:8002/community/\n      - URL_ISSUE=http://issue-metrics:8003/issue/\n      - URL_PULL_REQUEST=http://pull-request-metrics:8004/pull_request/\n      - URL_REPOSITORY=http://repository:8005/repository/\n    volumes:\n      - \"./hubcare/hubcare_api:/code\"\n    ports:\n      - \"8000:8000\"\n    links:\n      - \"commit-metrics\"\n      - \"community-metrics\"\n      - \"issue-metrics\"\n      - \"pull-request-metrics\"\n      - \"repository\"\n\n  commit-metrics:\n    container_name: commit-metrics\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8001\n    volumes:\n      - \"./hubcare/metrics/commit_metrics:/code\"\n    ports:\n      - \"8001:8001\"\n\n  community-metrics:\n    container_name: community-metrics\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8002\n    volumes:\n      - \"./hubcare/metrics/community_metrics:/code\"\n    ports:\n      - \"8002:8002\"\n\n  issue-metrics:\n    container_name: issue-metrics\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8003\n    volumes:\n      - \"./hubcare/metrics/issue_metrics:/code\"\n    ports:\n      - \"8003:8003\"\n\n  pull-request-metrics:\n    container_name: pull-request-metrics\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8004\n    volumes:\n      - \"./hubcare/metrics/pull_request_metrics:/code\"\n    ports:\n      - \"8004:8004\"\n\n  repository:\n    container_name: repository\n    build:\n      context: ./docker\n      dockerfile: Dockerfile\n      args:\n        NAME: ${NAME}\n        TOKEN: ${TOKEN}\n    environment:\n      - PORT=8005\n    volumes:\n      - \"./hubcare/repository:/code\"\n    ports:\n      - \"8005:8005\"\n",
            ".gitlab-ci.yml": "# Gitlab CI yml file\n\n# This is the major part of the code which explains the stages present in our pipeline.\n# In a django application we have various stages which include testing, packing the code,\n# performing migrations, collecting static files and running the application.\n# The various stages are broadly classified into 3 main categories:\n\n# 1. Test       2. Release      3. Deploy\n\nstages:\n- test\n- release\n- deploy\n\nvariables:\n  OMIT_COVERAGE: '*/tests/*,*/tests.py,*/migrations/*,*/urls.py,*/settings.py,*/wsgi.py,manage.py'\n\n# Stage I\n# Testing Phase:\n# This is where the main code is tested.\n# Other options like code coverage, etc are also written in this phase\nunit_test:\n  stage: test\n  # This repo includes python3, pip3\n  image: python:3-alpine\n  before_script:\n    - apk add --no-cache git\n    # install requiriment to hubcare_api\n    - pip install -r hubcare/hubcare_api/requirements.txt\n    - python hubcare/hubcare_api/manage.py makemigrations\n    - python hubcare/hubcare_api/manage.py migrate\n    # install requiriment to commit metrics\n    - pip install -r hubcare/metrics/commit_metrics/requirements.txt\n    - python hubcare/metrics/commit_metrics/manage.py makemigrations\n    - python hubcare/metrics/commit_metrics/manage.py migrate\n    # install requiriment to community metrics\n    - pip install -r hubcare/metrics/community_metrics/requirements.txt\n    - python hubcare/metrics/community_metrics/manage.py makemigrations\n    - python hubcare/metrics/community_metrics/manage.py migrate\n    # install requiriment to issue metrics\n    - pip install -r hubcare/metrics/issue_metrics/requirements.txt\n    - python hubcare/metrics/issue_metrics/manage.py makemigrations\n    - python hubcare/metrics/issue_metrics/manage.py migrate\n    # install requiriment to pull_request metrics\n    - pip install -r hubcare/metrics/pull_request_metrics/requirements.txt\n    - python hubcare/metrics/pull_request_metrics/manage.py makemigrations\n    - python hubcare/metrics/pull_request_metrics/manage.py migrate\n    # install requiriment to repository service\n    - pip install -r hubcare/repository/requirements.txt\n    - python hubcare/repository/manage.py makemigrations\n    - python hubcare/repository/manage.py migrate\n  script:\n    # Command to test our application\n    - coverage run --source='.' --omit=$OMIT_COVERAGE hubcare/hubcare_api/manage.py test hubcare/hubcare_api/\n    - coverage run --source='.' --omit=$OMIT_COVERAGE --append hubcare/metrics/commit_metrics/manage.py test hubcare/metrics/commit_metrics/\n    - coverage run --source='.' --omit=$OMIT_COVERAGE --append hubcare/metrics/community_metrics/manage.py test hubcare/metrics/community_metrics/\n    - coverage run --source='.' --omit=$OMIT_COVERAGE --append hubcare/metrics/issue_metrics/manage.py test hubcare/metrics/issue_metrics/\n    - coverage run --source='.' --omit=$OMIT_COVERAGE --append hubcare/metrics/pull_request_metrics/manage.py test hubcare/metrics/pull_request_metrics/\n    - coverage run --source='.' --omit=$OMIT_COVERAGE --append hubcare/repository/manage.py test hubcare/repository/\n    - coverage report\n    - coveralls\n\ncodestyle:\n  stage: test\n  # This repo includes python3, pip3\n  image: python:3-alpine\n  before_script:\n    - pip install pycodestyle\n  script:\n    - pycodestyle .\n\n# Stage II\n# Release Phase\n# In this phase, we package our code using docker\n.release:\n  stage: release\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    # Build our image using docker\n    - docker build -f docker/Dockerfile $IMAGEPATH --build-arg NAME=$NAME --build-arg TOKEN=$TOKEN -t registry.gitlab.com/cjjcastro/2019-1-hubcare-api/$DOCKERIMAGE:$DOCKERTAG\n\n    # Configure container registry to push using docker\n    - docker login -u \"$DOCKERLOGIN\" -p \"$DOCKERPASSWORD\" registry.gitlab.com\n\n    # Push the image using docker\n    - docker push registry.gitlab.com/cjjcastro/2019-1-hubcare-api/$DOCKERIMAGE:$DOCKERTAG\n\n    # The tag, only master indicates that whenever code is pushed to master branch,\n    # only then run the pipeline\n\n# Release to hubcare api service\nrelease_hubcare_api_production:\n  extends: .release\n  environment: production_hubcare_api\n  only:\n    - master\n\nrelease_hubcare_api_development:\n  extends: .release\n  environment: development_hubcare_api\n  only: \n    - devel\n\n# Release to commit metrics service\nrelease_commit_metrics_production:\n  extends: .release\n  environment: production_commit_metrics\n  only: \n    - master\n\nrelease_commit_metrics_development:\n  extends: .release\n  environment: development_commit_metrics\n  only: \n    - devel\n\n# Release to community metrics service\nrelease_community_metrics_production:\n  extends: .release\n  environment: production_community_metrics\n  only: \n    - master\n\nrelease_community_metrics_development:\n  extends: .release\n  environment: development_community_metrics\n  only: \n    - devel\n\n# Release to issue metrics service\nrelease_issue_metrics_production:\n  extends: .release\n  environment: production_issue_metrics\n  only: \n    - master\n\nrelease_issue_metrics_development:\n  extends: .release\n  environment: development_issue_metrics\n  only: \n    - devel\n\n# Release to pull request metrics service\nrelease_pull_request_metrics_production:\n  extends: .release\n  environment: production_pull_request_metrics\n  only: \n    - master\n\nrelease_pull_request_metrics_development:\n  extends: .release\n  environment: development_pull_request_metrics\n  only: \n    - devel\n\n# Release to repository service\nrelease_repository_production:\n  extends: .release\n  environment: production_repository\n  only:\n    - master\n\nrelease_repository_development:\n  extends: .release\n  environment: development_repository\n  only:\n    - devel\n\n# Stage III - I\n# Deployment Phase\n# Production deploy\ndeploy_hubcare_api:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service hubcare-api\"\n  only:\n    - master\n\ndeploy_commit_metrics:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service commit-metrics\"\n  only:\n    - master\n\ndeploy_community_metrics:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service community-metrics\"\n  only:\n    - master\n\ndeploy_issue_metrics:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service issue-metrics\"\n  only:\n    - master\n\ndeploy_pull_request_metrics:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service pull-request-metrics\"\n  only:\n    - master\n\ndeploy_repository:\n  image: cdrx/rancher-gitlab-deploy\n  stage: deploy\n  script:\n    - \"upgrade\n            --rancher-url $RANCHER_URL\n            --rancher-key $RANCHER_ACCESS_KEY\n            --rancher-secret $RANCHER_SECRET_KEY\n            --environment $RANCHER_ENVIRONMENT\n            --stack $RANCHER_STACK\n            --service repository\"\n  only:\n    - master\n\n# Development deploy in Heroku\ndeploy_hubcare_api_dev:\n  stage: deploy\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com\n    - docker pull registry.gitlab.com/cjjcastro/2019-1-hubcare-api/hubcare_api:latest\n    - docker tag registry.gitlab.com/cjjcastro/2019-1-hubcare-api/hubcare_api:latest registry.heroku.com/hubcare-api/web:latest\n    - docker push registry.heroku.com/hubcare-api/web:latest\n    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app hubcare-api\n  tags:\n    - docker\n  only:\n    - devel\n\ndeploy_commit_metrics_dev:\n  stage: deploy\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com\n    - docker pull registry.gitlab.com/cjjcastro/2019-1-hubcare-api/commit_metrics:latest\n    - docker tag registry.gitlab.com/cjjcastro/2019-1-hubcare-api/commit_metrics:latest registry.heroku.com/hubcare-commit-metrics/web:latest\n    - docker push registry.heroku.com/hubcare-commit-metrics/web:latest\n    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app hubcare-commit-metrics\n  tags:\n    - docker\n  only:\n    - devel\n\ndeploy_community_metrics_dev:\n  stage: deploy\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com\n    - docker pull registry.gitlab.com/cjjcastro/2019-1-hubcare-api/community_metrics:latest\n    - docker tag registry.gitlab.com/cjjcastro/2019-1-hubcare-api/community_metrics:latest registry.heroku.com/hubcare-community-metrics/web:latest\n    - docker push registry.heroku.com/hubcare-community-metrics/web:latest\n    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app hubcare-community-metrics\n  tags:\n    - docker\n  only:\n    - devel\n\ndeploy_issue_metrics_dev:\n  stage: deploy\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com\n    - docker pull registry.gitlab.com/cjjcastro/2019-1-hubcare-api/issue_metric:latest\n    - docker tag registry.gitlab.com/cjjcastro/2019-1-hubcare-api/issue_metric:latest registry.heroku.com/hubcare-issue-metrics/web:latest\n    - docker push registry.heroku.com/hubcare-issue-metrics/web:latest\n    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app hubcare-issue-metrics\n  tags:\n    - docker\n  only:\n    - devel\n\ndeploy_pull_request_metrics_metrics_dev:\n  stage: deploy\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com\n    - docker pull registry.gitlab.com/cjjcastro/2019-1-hubcare-api/pull_request_metrics:latest\n    - docker tag registry.gitlab.com/cjjcastro/2019-1-hubcare-api/pull_request_metrics:latest registry.heroku.com/hubcare-pull-request-metrics/web:latest\n    - docker push registry.heroku.com/hubcare-pull-request-metrics/web:latest\n    - docker run --rm -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli container:release web --app hubcare-pull-request-metrics\n  tags:\n    - docker\n  only:\n    - devel\n",
            "nginx.conf": "upstream gateway {\n    server hubcare_api:8000;\n}\n\nupstream commit {\n    server commit-metrics:8001;\n}\n\nupstream community {\n    server community-metrics:8002;\n}\n\nupstream issue {\n    server issue-metrics:8003;\n}\n\nupstream pull-request {\n    server pull-request-metrics:8004;\n}\n\nupstream repository {\n    server repository:8005;\n}\n\nmap $http_upgrade $connection_upgrade {\n    default Upgrade;\n    ''      close;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name hubcare.ml;\n    ssl_certificate /etc/letsencrypt/archive/hubcare.ml/fullchain1.pem;\n    ssl_certificate_key /etc/letsencrypt/archive/hubcare.ml/privkey1.pem;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://gateway;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n    location /issue/ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://issue;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n    location /commit/ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://commit;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n    location /community/ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://community;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n    location /pull-request/ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://pull-request;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n    location /repository/ {\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://repository;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        # This allows the ability for the execute shell window to remain open for up to 15 minutes. Without this parameter, the default is 1 minute and will automatically close.\n        proxy_read_timeout 900s;\n    }\n}\n\nserver {\n    listen 80;\n    server_name hubcare.ml;\n    return 301 https://$server_name$request_uri;\n}"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "manage.py",
            "prod.Dockerfile",
            "requirements.txt"
        ],
        "folders": [
            "hubcare_api"
        ]
    }
}