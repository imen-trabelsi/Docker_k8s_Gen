{
    "source_code_info": {
        "language": "Scala",
        "framework": "Scala",
        "dependencies": {
            "build.sbt": "import com.amazonaws.auth.DefaultAWSCredentialsProviderChain\nimport com.typesafe.sbt.SbtNativePackager.autoImport.NativePackagerHelper.directory\nimport mesosphere.maven.MavenSettings.{loadM2Credentials, loadM2Resolvers}\nimport mesosphere.raml.RamlGeneratorPlugin\nimport sbtprotobuf.ProtobufPlugin\n\ncredentials ++= loadM2Credentials(streams.value.log)\nresolvers ++= loadM2Resolvers(sLog.value)\n\nresolvers += Resolver.sonatypeRepo(\"snapshots\")\n\naddCompilerPlugin(scalafixSemanticdb)\n\nval silencerVersion = \"1.7.1\"\naddCompilerPlugin(\"com.github.ghik\" % \"silencer-plugin\" % silencerVersion cross CrossVersion.full)\nlibraryDependencies += \"com.github.ghik\" % \"silencer-lib\" % silencerVersion % Provided cross CrossVersion.full\n\n// Pass arguments to Scalatest runner:\n// http://www.scalatest.org/user_guide/using_the_runner\nlazy val testSettings = Seq(\n  parallelExecution in Test := true,\n  testForkedParallel in Test := true,\n  testListeners := Nil, // TODO(MARATHON-8215): Remove this line\n  testOptions in Test := Seq(\n    Tests.Argument(\n      \"-u\",\n      \"target/test-reports\", // TODO(MARATHON-8215): Remove this line\n      \"-o\",\n      \"-eDFG\",\n      \"-y\",\n      \"org.scalatest.WordSpec\"\n    )\n  ),\n  fork in Test := true\n)\n\n// Pass arguments to Scalatest runner:\n// http://www.scalatest.org/user_guide/using_the_runner\nlazy val integrationTestSettings = Seq(\n  testListeners := Nil, // TODO(MARATHON-8215): Remove this line\n  fork in Test := true,\n  testOptions in Test := Seq(\n    Tests.Argument(\n      \"-u\",\n      \"target/test-reports\", // TODO(MARATHON-8215): Remove this line\n      \"-o\",\n      \"-eDFG\",\n      \"-y\",\n      \"org.scalatest.WordSpec\"\n    )\n  ),\n  parallelExecution in Test := true,\n  testForkedParallel in Test := true,\n  concurrentRestrictions in Test := Seq(Tags.limitAll(math.max(1, java.lang.Runtime.getRuntime.availableProcessors() / 2))),\n  javaOptions in (Test, test) ++= Seq(\n    \"-Dakka.actor.default-dispatcher.fork-join-executor.parallelism-min=2\",\n    \"-Dakka.actor.default-dispatcher.fork-join-executor.factor=1\",\n    \"-Dakka.actor.default-dispatcher.fork-join-executor.parallelism-max=4\",\n    \"-Dscala.concurrent.context.minThreads=2\",\n    \"-Dscala.concurrent.context.maxThreads=32\"\n  ),\n  concurrentRestrictions in Test := Seq(Tags.limitAll(math.max(1, java.lang.Runtime.getRuntime.availableProcessors() / 2)))\n)\n\n// Build Settings for Protobuf (https://github.com/sbt/sbt-protobuf)\n//\n// version => The version of the protobuf library to be used. An sbt dependency is added for the project\n// includeFilter => Specify which files to compile. We need this to exclude the mesos/mesos.proto to be compiled directly\n// protobufRunProtoc => Use ProtocJar to use a bundled protoc version, so we don't rely on a preinstalled version. \"-v330\" defines the protoc version\nval pbSettings = ProtobufPlugin.projectSettings ++ Seq(\n  (version in ProtobufConfig) := \"3.3.0\",\n  (includeFilter in ProtobufConfig) := \"marathon.proto\",\n  (protobufRunProtoc in ProtobufConfig) := (args => com.github.os72.protocjar.Protoc.runProtoc(\"-v330\" +: args.toArray))\n)\n\nlazy val commonSettings = Seq(\n  autoCompilerPlugins := true,\n  organization := \"mesosphere.marathon\",\n  scalaVersion := \"2.13.3\",\n  crossScalaVersions := Seq(scalaVersion.value),\n  scalacOptions in Compile ++= Seq(\n    \"-encoding\",\n    \"UTF-8\",\n    \"-target:jvm-1.8\",\n    \"-deprecation\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Xlint\",\n    \"-Yrangepos\",\n    \"-Ywarn-numeric-widen\",\n    \"-Ywarn-unused\"\n  ),\n  // Don't need any linting, etc for docs, so gain a small amount of build time there.\n  scalacOptions in (Compile, doc) := Seq(\"-encoding\", \"UTF-8\", \"-deprecation\", \"-feature\", \"-Xfuture\"),\n  javacOptions in Compile ++= Seq(\n    \"-encoding\",\n    \"UTF-8\",\n    \"-source\",\n    \"1.8\",\n    \"-target\",\n    \"1.8\",\n    \"-Xlint:unchecked\",\n    \"-Xlint:deprecation\"\n  ),\n  resolvers := {\n    Seq(\n      \"Mesosphere Snapshot Repo\" at \"https://downloads.mesosphere.com/maven-snapshot\",\n      \"Mesosphere Public Repo\" at \"https://downloads.mesosphere.com/maven\",\n      \"Typesafe Releases\" at \"https://repo.typesafe.com/typesafe/releases/\",\n      \"Apache Shapshots\" at \"https://repository.apache.org/content/repositories/snapshots/\",\n      Resolver.JCenterRepository\n    ) ++ resolvers.value\n  },\n  cancelable in Global := true,\n  publishTo := Some(\n    s3resolver.value(\n      \"Mesosphere Public Repo (S3)\",\n      s3(\"downloads.mesosphere.io/maven\")\n    )\n  ),\n  s3credentials := DefaultAWSCredentialsProviderChain.getInstance(),\n  s3region := com.amazonaws.services.s3.model.Region.US_Standard,\n  fork in run := true\n)\n\n/**\n  * The documentation for sbt-native-package can be foound here:\n  * - General, non-vendor specific settings (such as launch script):\n  *     http://sbt-native-packager.readthedocs.io/en/latest/archetypes/java_app/index.html#usage\n  *\n  * - Linux packaging settings\n  *     http://sbt-native-packager.readthedocs.io/en/latest/archetypes/java_app/index.html#usage\n  */\nlazy val packagingSettings = Seq(\n  bashScriptExtraDefines += IO.read((baseDirectory.value / \"project\" / \"NativePackagerSettings\" / \"extra-defines.bash\")),\n  mappings in (Compile, packageDoc) := Seq(),\n  (packageName in Universal) := {\n    import sys.process._\n    val shortCommit = (\"./version commit\" !!).trim\n    s\"${packageName.value}-${version.value}-$shortCommit\"\n  },\n  /* Universal packaging (docs) - http://sbt-native-packager.readthedocs.io/en/latest/formats/universal.html\n   */\n  universalArchiveOptions in (UniversalDocs, packageZipTarball) := Seq(\n    \"-pcvf\"\n  ), // Remove this line once fix for https://github.com/sbt/sbt-native-packager/issues/1019 is released\n  (packageName in UniversalDocs) := {\n    import sys.process._\n    val shortCommit = (\"./version commit\" !!).trim\n    s\"${packageName.value}-docs-${version.value}-$shortCommit\"\n  },\n  (topLevelDirectory in UniversalDocs) := { Some((packageName in UniversalDocs).value) },\n  mappings in UniversalDocs ++= directory(\"docs/docs\"),\n  maintainer := \"Mesosphere Package Builder <support@mesosphere.io>\"\n)\n\nlazy val `plugin-interface` = (project in file(\"plugin-interface\"))\n  .enablePlugins(GitBranchPrompt)\n  .settings(testSettings: _*)\n  .settings(commonSettings: _*)\n  .settings(\n    version := {\n      import sys.process._\n      (\"./version\" !!).trim\n    },\n    name := \"plugin-interface\",\n    libraryDependencies ++= Dependencies.pluginInterface\n  )\n\nlazy val marathon = (project in file(\".\"))\n  .enablePlugins(GitBranchPrompt, JavaServerAppPackaging, RamlGeneratorPlugin, GitVersioning, ProtobufPlugin)\n  .dependsOn(`plugin-interface`)\n  .settings(pbSettings)\n  .settings(testSettings: _*)\n  .settings(commonSettings: _*)\n  .settings(packagingSettings: _*)\n  .settings(\n    version := {\n      import sys.process._\n      (\"./version\" !!).trim\n    },\n    unmanagedResourceDirectories in Compile += baseDirectory.value / \"docs\" / \"docs\" / \"rest-api\",\n    libraryDependencies ++= Dependencies.marathon,\n    sourceGenerators in Compile += (ramlGenerate in Compile).taskValue,\n    mainClass in Compile := Some(\"mesosphere.marathon.Main\"),\n    packageOptions in (Compile, packageBin) ++= Seq(\n      Package.ManifestAttributes(\"Implementation-Version\" -> version.value),\n      Package.ManifestAttributes(\"Scala-Version\" -> scalaVersion.value),\n      Package.ManifestAttributes(\"Git-Commit\" -> git.gitHeadCommit.value.getOrElse(\"unknown\"))\n    )\n  )\n\nlazy val ammonite = (project in file(\"./tools/repl-server\"))\n  .settings(commonSettings: _*)\n  .settings(\n    mainClass in Compile := Some(\"ammoniterepl.Main\"),\n    libraryDependencies += \"com.lihaoyi\" % \"ammonite-sshd\" % \"2.2.0\" cross CrossVersion.full\n  )\n  .dependsOn(marathon)\n\nlazy val integration = (project in file(\"./tests/integration\"))\n  .enablePlugins(GitBranchPrompt)\n  .settings(integrationTestSettings: _*)\n  .settings(commonSettings: _*)\n  .settings(\n    cleanFiles += baseDirectory { base => base / \"sandboxes\" }.value\n  )\n  .dependsOn(marathon % \"test->test\")\n\nlazy val `mesos-simulation` = (project in file(\"mesos-simulation\"))\n  .enablePlugins(GitBranchPrompt)\n  .settings(testSettings: _*)\n  .settings(commonSettings: _*)\n  .dependsOn(marathon % \"test->test\")\n  .dependsOn(marathon)\n  .dependsOn(integration % \"test->test\")\n  .settings(\n    name := \"mesos-simulation\"\n  )\n\n// see also, benchmark/README.md\nlazy val benchmark = (project in file(\"benchmark\"))\n  .enablePlugins(JmhPlugin, GitBranchPrompt)\n  .settings(testSettings: _*)\n  .settings(commonSettings: _*)\n  .dependsOn(marathon % \"compile->compile; test->test\")\n  .settings(\n    testOptions in Test += Tests.Argument(TestFrameworks.JUnit),\n    libraryDependencies ++= Dependencies.benchmark\n  )\n"
        },
        "database": null,
        "build_system": "sbt",
        "config_files": {
            "tools/storage/src/Dockerfile": "FROM mesosphere/openjdk-alpine-ammonite:2.0.4-2.13\n\nCOPY lib/ /lib/\nCOPY bin/ /bin/\nCOPY marathon/ /marathon/\n\nRUN amm-2.13 --predef lib/predef.sc --predef-code 'println(\"it worked\"); sys.exit(0)' | grep \"it worked\"\n\nENTRYPOINT [\"/bin/storage-tool.sh\"]\n",
            "Jenkinsfile": "#!/usr/bin/env groovy\n\n@Library('sec_ci_libs@v2-latest') _\n\ndef master_branches = [\"releases/1.10\", \"releases/1.9\", \"releases/1.8\", \"releases/1.7\", \"releases/1.6\", \"releases/1.5\", \"releases/1.4\", \"master\", ] as String[]\n\nansiColor('xterm') {\n  // using shakedown node because it's a lightweight alpine docker image instead of full VM\n  node('shakedown') {\n    stage(\"Verify author\") {\n      user_is_authorized(master_branches, '8b793652-f26a-422f-a9ba-0d1e47eb9d89', '#marathon-dev')\n    }\n  }\n  node('JenkinsMarathonCI-Debian9-2021-07-24') {\n    stage(\"Run Pipeline\") {\n      try {\n        checkout scm\n        withCredentials([\n            usernamePassword(credentialsId: 'a7ac7f84-64ea-4483-8e66-bb204484e58f', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USER'),\n            string(credentialsId: '3f0dbb48-de33-431f-b91c-2366d2f0e1cf',variable: 'AWS_ACCESS_KEY_ID'),\n            string(credentialsId: 'f585ec9a-3c38-4f67-8bdb-79e5d4761937',variable: 'AWS_SECRET_ACCESS_KEY')\n        ]) {\n\t    withDockerRegistry([credentialsId: 'docker-hub-credentials']) {\n                sh \"\"\"sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\"\"\"\n                sh \"\"\"sudo -E ci/pipeline jenkins\"\"\"\n            }\n\t}\n      } finally {\n        junit(allowEmptyResults: true, testResults: 'type-generator/target/test-reports/*.xml')\n        junit(allowEmptyResults: true, testResults: 'target/test-reports/*.xml')\n        junit(allowEmptyResults: true, testResults: 'tests/integration/target/test-reports/*.xml')\n        archive includes: \"*sandboxes.tar.gz\"\n        archive includes: \"*log.tar.gz\"\n      }\n    }\n\n    stage('Release MoM EE Docker Image') {\n      if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME ==~ /releases\\/.*/) {\n        version = sh(script: \"./version docker\", returnStdout: true).trim()\n        build(\n             job: '/marathon-dcos-plugins/release-mom-ee-docker-image/master',\n             parameters: [string(name: 'from_image_tag', value: version)],\n             propagate: true\n        )\n      }\n    }\n  }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}