{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.example.chaos.monkey.shopping</groupId>\n    <artifactId>shopping-parent</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>hot-deals</module>\n        <module>bestseller-fashion</module>\n        <module>bestseller-toys</module>\n        <module>gateway</module>\n        <module>shared</module>\n        <module>eureka-server</module>\n    </modules>\n    <packaging>pom</packaging>\n\n\n    <properties>\n        <!--Docker Container Image Prefix -->\n        <docker.image.prefix>mrbwilms</docker.image.prefix>\n        <docker-maven-plugin.version>1.4.3</docker-maven-plugin.version>\n\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n        <java.version>1.8</java.version>\n        <spring-boot-dependencies.version>2.1.2.RELEASE</spring-boot-dependencies.version>\n        <spring-cloud.version>Greenwich.RELEASE</spring-cloud.version>\n        <spring-cloud-sleuth.version>2.1.0.RELEASE</spring-cloud-sleuth.version>\n        <spring-cloud-open-tracing.version>1.0.1</spring-cloud-open-tracing.version>\n        <lombok.version>1.16.20</lombok.version>\n        <chaos-monkey-spring-boot.version>2.0.2</chaos-monkey-spring-boot.version>\n\n        <maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>\n        <spring-boot-maven-plugin.version>2.1.2.RELEASE</spring-boot-maven-plugin.version>\n\n    </properties>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <!-- Import dependency management from Spring Boot -->\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring-cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starter-sleuth</artifactId>\n                <version>${spring-cloud-sleuth.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>de.codecentric</groupId>\n                <artifactId>chaos-monkey-spring-boot</artifactId>\n                <version>${chaos-monkey-spring-boot.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>com.netflix.hystrix</groupId>\n                <artifactId>hystrix-core</artifactId>\n                <version>1.5.12</version>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-actuator</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-web</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n            </dependency>\n            <dependency>\n                <groupId>io.opentracing.contrib</groupId>\n                <artifactId>opentracing-spring-jaeger-cloud-starter</artifactId>\n                <version>${spring-cloud-open-tracing.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>io.opentracing.contrib</groupId>\n                <artifactId>opentracing-spring-jaeger-web-starter</artifactId>\n                <version>${spring-cloud-open-tracing.version}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-devtools</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n                <scope>runtime</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-starter-test</artifactId>\n                <version>${spring-boot-dependencies.version}</version>\n                <scope>test</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.projectlombok</groupId>\n                <artifactId>lombok</artifactId>\n                <version>${lombok.version}</version>\n            </dependency>\n\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <pluginManagement>\n            <plugins>\n                <plugin>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-maven-plugin</artifactId>\n                    <version>${spring-boot-maven-plugin.version}</version>\n\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>repackage</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-compiler-plugin</artifactId>\n                    <version>${maven-compiler-plugin.version}</version>\n                    <configuration>\n                        <source>8</source>\n                        <target>8</target>\n                    </configuration>\n                </plugin>\n\n\n                <plugin>\n                    <groupId>com.spotify</groupId>\n                    <artifactId>dockerfile-maven-plugin</artifactId>\n                    <version>${docker-maven-plugin.version}</version>\n\n                    <configuration>\n                        <tag>chaos-demo</tag>\n                        <repository>${docker.image.prefix}/${project.artifactId}</repository>\n                        <buildArgs>\n                            <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>\n                            <SERVICE_NAME>${project.name}</SERVICE_NAME>\n                        </buildArgs>\n                        <pullNewerImage>false</pullNewerImage>\n                    </configuration>\n                    <executions>\n                        <execution>\n                            <id>build-image</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>build</goal>\n                                <goal>push</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n</project>"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3.3'\n\nservices:\n  requestload:\n    image: mrbwilms/requestload\n\n  chaostoolkit:\n    image: mrbwilms/chaostoolkit:chaos-demo\n    tty: true\n\n  chaoshub:\n    image: chaostoolkit/chaoshub:0.1.2\n    ports:\n      - \"8888:8080\"\n    tty: true\n\n  gateway:\n    image: mrbwilms/gateway:chaos-demo\n    ports:\n      - \"8080:8080\"\n\n  fashion:\n    image: mrbwilms/bestseller-fashion:chaos-demo\n    ports:\n      - 8090-8092:8082\n\n  toys:\n    image: mrbwilms/bestseller-toys:chaos-demo\n    ports:\n      - \"8081:8081\"\n\n  hot-deals:\n    image: mrbwilms/hot-deals:chaos-demo\n    ports:\n      - \"8083:8083\"\n\n  eureka-server:\n    image: mrbwilms/eureka-server:chaos-demo\n    ports:\n      - \"8761:8761\"\n\n  jaeger-server:\n    image: jaegertracing/all-in-one\n    environment:\n      - COLLECTOR_ZIPKIN_HTTP_PORT=9411\n    ports:\n      - \"5775:5775\"\n      - \"6831:6831/udp\"\n      - \"6832:6832\"\n      - \"5778:5778\"\n      - \"16686:16686\"\n      - \"14268:14268\"\n      - \"9411:9411\"",
            "chaostoolkit-base/Dockerfile": "FROM ubuntu:18.04\n# BUG: Getting tons of debconf messages unless TERM is set to linux\nENV TERM linux\n\nCOPY install-chaos.sh /root\nCOPY config/.bashrc /root\nCOPY config/settings.yaml /root/.chaostoolkit/settings.yaml\n\nADD chaostoolkit-experiments/ /root\n\n# Install.\nSHELL [\"/bin/bash\", \"-c\"]\nRUN \\\n  sed -i 's/# \\(.*multiverse$\\)/\\1/g' /etc/apt/sources.list && \\\n  apt-get update && \\\n  apt-get -y install apt-utils && \\\n  apt-get -y upgrade && \\\n  apt-get -y install nano && \\\n  apt-get -y install inetutils-ping && \\\n  apt-get -y install curl && \\\n  apt-get -y install iproute2 && \\\n  apt-get -y install jq\n\nRUN chmod a+x /root/install-chaos.sh\nRUN . /root/install-chaos.sh\nRUN ip -4 route list match 0/0 | awk '{print $3 \" host.docker.internal\"}' >> /etc/hosts\n\n# Set environment variables.\nENV HOME /root\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\n\n# Define working directory.\nWORKDIR /root\n\n# Define default command.\nCMD [\"bash\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}