{
    "source_code_info": {
        "language": "Python",
        "framework": "Flask",
        "dependencies": {
            "requirements.txt": "https://github.com/wazo-platform/wazo-lib-rest-client/archive/master.zip\nhttps://github.com/wazo-platform/wazo-amid-client/archive/master.zip\nhttps://github.com/wazo-platform/wazo-auth-client/archive/master.zip\nhttps://github.com/wazo-platform/wazo-confd-client/archive/master.zip\nhttps://github.com/wazo-platform/wazo-dird-client/archive/master.zip\nhttps://github.com/wazo-platform/xivo-lib-python/archive/master.zip\nbabel==2.8.0\ncheroot==9.0.0\ncherrypy==18.8.0\n# Bullseye actually useds a patched version of flask-babel 0.12.2,\n# But this is the closest functional version we can install from pip.\nflask-babel==1.0.0\nflask-cors==3.0.9\nflask-restful==0.3.8\nflask==1.1.2\nitsdangerous==1.1.0  # from flask\njinja2==3.0.3  # from flask\njsonpatch==1.25\nkombu==5.0.2\nmarkupsafe==2.0.1 # from jinja\nmarshmallow==3.18.0\nnetaddr==0.7.19\npyyaml==5.3.1  # from xivo-lib-python\nrequests==2.25.1\nstevedore==4.0.2\nwerkzeug==1.0.1  # for flask-babel\n"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "Dockerfile": "FROM python:3.9-slim-bullseye AS compile-image\nLABEL maintainer=\"Wazo Maintainers <dev@wazo.community>\"\n\nRUN python -m venv /opt/venv\n# Activate virtual env\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCOPY . /usr/src/wazo-phoned\nWORKDIR /usr/src/wazo-phoned\nRUN pip install -r requirements.txt\nRUN python setup.py install\n\nFROM python:3.9-slim-bullseye AS build-image\nCOPY --from=compile-image /opt/venv /opt/venv\n\nCOPY ./etc/wazo-phoned /etc/wazo-phoned\nCOPY ./contribs/docker/certs /usr/share/wazo-certs\nRUN true \\\n    && adduser --quiet --system --group --home /var/lib/wazo-phoned wazo-phoned \\\n    && mkdir -p /etc/wazo-phoned/conf.d \\\n    && install -o www-data -g www-data /dev/null /var/log/wazo-phoned.log\n\nEXPOSE 9498 9499\n\n# Activate virtual env\nENV PATH=\"/opt/venv/bin:$PATH\"\nCMD [\"wazo-phoned\", \"-d\"]\n",
            "Jenkinsfile": "pipeline {\n  agent any\n  triggers {\n    githubPush()\n    pollSCM('H H * * *')\n  }\n  environment {\n    MAIL_RECIPIENTS = 'dev+tests-reports@wazo.community'\n  }\n  options {\n    skipStagesAfterUnstable()\n    timestamps()\n    buildDiscarder(logRotator(numToKeepStr: '10'))\n  }\n  stages {\n    stage('Debian build and deploy') {\n      steps {\n        build job: 'build-package-no-arch', parameters: [\n          string(name: 'PACKAGE', value: \"${JOB_NAME}\"),\n        ]\n      }\n    }\n    stage('Docker build') {\n      steps {\n        sh \"docker build -t wazoplatform/${JOB_NAME}:latest .\"\n      }\n    }\n    stage('Docker publish') {\n      steps {\n        sh \"docker push wazoplatform/${JOB_NAME}:latest\"\n      }\n    }\n  }\n  post {\n    failure {\n      emailext to: \"${MAIL_RECIPIENTS}\", subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'\n    }\n    fixed {\n      emailext to: \"${MAIL_RECIPIENTS}\", subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}'\n    }\n  }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            ".pre-commit-config.yaml",
            "AUTHORS",
            "CHANGELOG.md",
            "Dockerfile",
            "Jenkinsfile",
            "LICENSE",
            "MANIFEST.in",
            "README.md",
            "pyproject.toml",
            "requirements.txt",
            "setup.cfg",
            "setup.py",
            "test-requirements.txt",
            "tox.ini",
            "zuul.yaml"
        ],
        "folders": [
            ".tx",
            "contribs",
            "debian",
            "etc",
            "integration_tests",
            "wazo_phoned"
        ]
    }
}