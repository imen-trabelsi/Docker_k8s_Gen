{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "build.gradle": "import org.gradle.internal.jvm.Jvm\n\n/**\n * Copyright Pravega Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Apply the java plugin to add support for Java\nbuildscript {\n\n    // log the current JVM version.\n    println \"Build JVM Version is : \" + Jvm.current()\n    repositories {\n        maven {\n            url \"https://plugins.gradle.org/m2/\"\n        }\n    }\n    dependencies {\n        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: protobufGradlePlugin\n        classpath \"gradle.plugin.org.nosphere.apache:creadur-rat-gradle:0.3.0\"\n        classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: gradleSshPluginVersion\n        classpath group: 'ru.vyarus', name: 'gradle-mkdocs-plugin', version: gradleMkdocsPluginVersion\n        classpath \"gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:${spotbugsPluginVersion}\"\n        classpath \"org.ajoberstar.grgit:grgit-gradle:${gradleGitPluginVersion}\"\n        classpath \"org.ajoberstar.grgit:grgit-core:${gradleGitPluginVersion}\"\n        classpath \"io.franzbecker:gradle-lombok:${gradleLombokPluginVersion}\"\n    }\n\n    // Specifically force the version for GrGit plugin required modules to prevent downloading the most recent release.\n    configurations.all {\n        resolutionStrategy {\n            force \"org.ajoberstar.grgit:grgit-gradle:\" + gradleGitPluginVersion\n            force \"org.ajoberstar.grgit:grgit-core:\" + gradleGitPluginVersion\n        }\n    }\n}\n\n\nif (project.hasProperty(\"enableMkdocs\") && project.property(\"enableMkdocs\").equalsIgnoreCase(\"true\")) {\n    apply from: \"$rootDir/gradle/mkdocs.gradle\"\n}\n\n// apply the plugin outside of allProjects since the plugin attempts to set the grgit property for all the projects\n// https://github.com/ajoberstar/grgit/blob/master/src/main/groovy/org/ajoberstar/grgit/gradle/GrgitPlugin.groovy#L27\napply plugin: 'org.ajoberstar.grgit'\n\nallprojects {\n    apply plugin: 'idea'\n    apply plugin: 'eclipse'\n    if (file(\"src/main/java\").isDirectory()) {\n        apply plugin: 'java'\n        apply plugin: 'io.franzbecker.gradle-lombok'\n        lombok {\n            version = lombokVersion\n        }\n        dependencies {\n            //These are compile time only dependencies needed accross all targets. Lombok uses them and may generate strange errors if they are missing.\n            compileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion\n            testCompileOnly group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: spotbugsAnnotationsVersion\n            compileOnly group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion\n            testCompileOnly group: 'net.jcip', name: 'jcip-annotations', version: jcipAnnotationsVersion\n            compileOnly 'org.projectlombok:lombok:' + lombokVersion\n            testCompileOnly 'org.projectlombok:lombok:' + lombokVersion\n            annotationProcessor 'org.projectlombok:lombok:' + lombokVersion\n            testAnnotationProcessor 'org.projectlombok:lombok:' + lombokVersion\n        }\n        // Delombok sources.\n        task delombok(type: io.franzbecker.gradle.lombok.task.DelombokTask, dependsOn: compileJava) {\n            ext.outputDir = file(\"$buildDir/delombok\")\n            outputs.dir(outputDir)\n            sourceSets.main.java.srcDirs.each {\n                inputs.dir(it)\n                args(it, \"-d\", outputDir)\n            }\n        }\n    }\n    // Plugin configurations\n    apply from: \"$rootDir/gradle/application.gradle\"\n    apply from: \"$rootDir/gradle/checkstyle.gradle\"\n    apply from: \"$rootDir/gradle/eclipse.gradle\"\n    apply from: \"$rootDir/gradle/spotbugs.gradle\"\n    apply from: \"$rootDir/gradle/idea.gradle\"\n    apply from: \"$rootDir/gradle/jacoco.gradle\"\n    apply from: \"$rootDir/gradle/java.gradle\"\n    apply from: \"$rootDir/gradle/maven.gradle\"\n    apply from: \"$rootDir/gradle/protobuf.gradle\"\n    apply from: \"$rootDir/gradle/rat.gradle\"\n\n    repositories {\n        mavenCentral()\n        mavenLocal()\n    }\n\n    version = getProjectVersion()\n    group = \"io.pravega\"\n\n    configurations.all {\n        resolutionStrategy {\n            //failOnVersionConflict()\n            force \"com.google.guava:guava:\" + guavaVersion\n            force \"com.google.protobuf:protobuf-java:\" + protobufProtocVersion\n            force \"com.google.protobuf:protobuf-java-util:\" + protobufProtocVersion\n\t    force \"io.grpc:grpc-context:\" + grpcVersion\n            force \"commons-beanutils:commons-beanutils:\" + commonsBeanutilsVersion\n            force \"org.apache.commons:commons-compress:\" + apacheCommonsCompressVersion\n            force \"org.apache.commons:commons-lang3:\" + commonsLang3Version\n            force \"org.apache.curator:curator-framework:\" + apacheCuratorVersion\n            force \"org.glassfish.jersey.core:jersey-common:\" + jerseyVersion\n            force \"org.glassfish.jersey.core:jersey-server:\" + jerseyVersion\n            force \"com.fasterxml.jackson.core:jackson-databind:\" + jacksonVersion\n            force \"org.slf4j:slf4j-api:\" + slf4jApiVersion\n            force \"org.apache.zookeeper:zookeeper:\" + apacheZookeeperVersion\n            force \"io.netty:netty-common:\" + nettyVersion\n            force \"io.netty:netty-transport:\" + nettyVersion\n            force \"io.netty:netty-handler:\" + nettyVersion\n            force \"io.netty:netty-codec:\" + nettyVersion\n            force \"io.netty:netty-codec-dns:\" + nettyVersion\n            force \"io.netty:netty-codec-http:\" + nettyVersion\n            force \"io.netty:netty-codec-http2:\" + nettyVersion\n            force \"io.netty:netty-codec-socks:\" + nettyVersion\n            force \"io.netty:netty-handler-proxy:\" + nettyVersion\n            force \"io.netty:netty-resolver-dns:\" + nettyVersion\n            force \"io.netty:netty-transport-native-epoll:\" + nettyVersion\n            force \"io.netty:netty-tcnative-boringssl-static:\" + nettyBoringSSLVersion\n            force \"junit:junit:\" + junitVersion\n            force \"org.bouncycastle:bcprov-jdk15on:\" + bouncyCastleVersion\n\t    force \"org.bouncycastle:bcpkix-jdk15on:\" + bouncyCastleVersion\n\t    force \"org.apache.avro:avro:\" + apacheAvroVersion\n\t    force \"org.jetbrains.kotlin:kotlin-stdlib-common:\" + kotlinVersion\n\t    force \"org.jetbrains.kotlin:kotlin-stdlib:\" + kotlinVersion\n\t    force \"org.yaml:snakeyaml:\" + snakeYamlVersion\n            force \"com.fasterxml.woodstox:woodstox-core:\" + woodstoxVersion\n\t    force \"org.jdom:jdom2:\" + jdomVersion\n\t    force \"commons-net:commons-net:\" + commonsNetVersion\n            // Netty 4 uber jar\n            exclude group: 'io.netty', module: 'netty-all'\n            // Netty 3\n            exclude group: 'io.netty', module: 'netty'\n            dependencySubstitution {\n                substitute module(\"javax.ws.rs:jsr311-api\") with module(\"javax.ws.rs:javax.ws.rs-api:\" + javaxwsrsApiVersion)\n            }\n        }\n    }\n\n    tasks.withType(Test) {\n        jvmArgs = [\"-Xmx2g\"]\n    }\n}\n\nproject('common') {\n    dependencies {\n        testCompile project(':test:testcommon')\n        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        //Do NOT add any additional dependencies here.\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        title = \"Pravega Common Libraries\"\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\n/**\n * common_server is the same as 'common' except that it is meant for server-side consumption only (Segment Store or\n * Controller). This should never be used by the Client (or any of its dependencies) since the Client must compile with\n * JDK8, while the Server may use newer versions of the JDK.\n */\nproject('common_server') {\n    dependencies {\n        compile project(':common')\n        testCompile project(':test:testcommon')\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        //Do NOT add any additional dependencies here.\n    }\n\n    javadoc {\n        title = \"Pravega Common Libraries for Server-Side use Only\"\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\ndef withoutLogger = { exclude group: 'org.slf4j', module: 'slf4j-log4j12'\n    exclude group: 'org.slf4j', module: 'slf4j-simple' }\n\ndef withoutJaxbAndJjwt = { exclude group: 'javax.xml.bind', module: 'jaxb-api'\n    exclude group: 'org.glassfish.jaxb', module: 'jaxb-runtime'\n    exclude group: 'io.jsonwebtoken', module: 'jjwt'}\n\nproject('shared:authplugin') {\n    dependencies {\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        title = \"Pravega Auth API\"\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('shared:basic-authplugin') {\n    dependencies {\n        compile project(':common')\n        compile project(':shared:authplugin')\n        compile project(':shared:security')\n        testCompile project(':test:testcommon')\n    }\n\n    javadoc {\n        title = \"AuthHandler supporting HTTP Basic Authentication\"\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('shared:security') {\n    dependencies {\n        compile project(':common')\n        compile project(':shared:authplugin')\n        compile project(':shared:protocol')\n        compile group: 'io.jsonwebtoken', name: 'jjwt', version: jjwtVersion\n\n        // Adding JAXB API and the reference implementation as a dependency here, since they are not available\n        // in newer Java SE versions (9 and newer).\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion\n        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion\n        // We need to explicitly import these as Bookkeeper 4.14+ is not transitively including them anymore.\n        compile group: 'org.bouncycastle', name: 'bcprov-ext-jdk15on', version: bouncyCastleVersion\n\n        testCompile project(':test:testcommon')\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        exclude 'io/pravega/shared/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\nproject ('shared:cluster') {\n    dependencies {\n        compile project(':common')\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version\n        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion\n        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion\n        testCompile project(':test:testcommon')\n    }\n    javadoc {\n        exclude 'io/pravega/shared/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject ('shared:metrics') {\n    dependencies {\n        compile group: 'io.micrometer', name: 'micrometer-core', version: micrometerVersion\n        // https://mvnrepository.com/artifact/io.micrometer/micrometer-core/<micrometerVersion>\n        compile group: 'io.micrometer', name: 'micrometer-registry-statsd', version: micrometerVersion\n        // https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-statsd/<micrometerVersion>\n        compile group: 'io.micrometer', name: 'micrometer-registry-influx', version: micrometerVersion\n        // https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-influx/<micrometerVersion>\n        compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: micrometerVersion\n        // https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus/<micrometerVersion>\n        compile project(':common')\n        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion\n        runtimeOnly group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion\n        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        testCompile project(':test:testcommon')\n        testCompile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion\n    }\n\n    javadoc {\n        exclude 'io/pravega/shared/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('shared:protocol') {\n    dependencies {\n        compile project(':common')\n        compile group: 'io.netty', name: 'netty-handler', version: nettyVersion\n        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        testCompile project(':test:testcommon')\n        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        testCompile project(path: ':common', configuration: 'testRuntime')\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n}\n\nproject ('shared:rest') {\n    sourceSets {\n        main.resources.srcDirs += \"$projectDir/src/conf\"\n        test.resources.srcDirs += \"$rootDir/config\"\n    }\n\n    dependencies {\n        compile project(':common')\n        compile \"io.grpc:grpc-core:\" + grpcVersion\n        compile project(\":shared:authplugin\")\n        compile project(\":shared:basic-authplugin\")\n        compile project(\":shared:security\")\n        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion\n        compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion\n        testCompile project(':test:testcommon')\n        testCompile project(\":shared:authplugin\").sourceSets.test.output\n        testCompile \"io.grpc:grpc-netty:\" + grpcVersion\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n    }\n}\n\nproject ('shared:health') {\n    dependencies {\n        compile project(':common')\n        testCompile project(':test:testcommon')\n        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n    }\n\n    javadoc {\n        exclude 'io/pravega/shared/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject ('shared:health-bindings') {\n    dependencies {\n        compile project(':shared:health')\n        compile project(':shared:rest')\n        compile group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletApiVersion\n        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion\n        compile(group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: swaggerJersey2JaxrsVersion) {\n            exclude group: 'com.google.guava', module: 'guava'\n        }\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion\n        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion\n        testCompile project(':test:testcommon')\n\n    }\n\n    javadoc {\n        exclude 'io/pravega/shared/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('client') {\n    dependencies {\n        compile project(':common')\n        compile project(':shared:authplugin')\n        compile project(':shared:protocol')\n        compile project(\":shared:controller-api\")\n        compile project(\":shared:security\"), withoutJaxbAndJjwt\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        testCompile project(':test:testcommon')\n        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jApiVersion\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        // this is used to create a mock server.\n        testCompile group: 'io.netty', name: 'netty-transport-native-epoll', version: nettyVersion, classifier: 'linux-x86_64'\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        title = \"Pravega Client API\"\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n        exclude \"**/impl/**\";\n    }\n}\n\nproject('test:testcommon') {\n    dependencies {\n        compile group: 'junit', name: 'junit', version: junitVersion\n        compile group: 'com.google.guava', name: 'guava', version: guavaVersion\n        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version\n        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n        compile group: 'io.netty', name: 'netty-common', version: nettyVersion\n        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion, withoutLogger\n        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('segmentstore:contracts') {\n    dependencies {\n        compile project(':common')\n        compile project(':common_server')\n        testCompile project(':test:testcommon')\n    }\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('segmentstore:storage') {\n    dependencies {\n        compile project(':common')\n        compile project(':shared:protocol')\n        compile project(':segmentstore:contracts')\n        compile project(':shared:metrics')\n        testCompile project(':test:testcommon')\n    }\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('segmentstore:storage:impl') {\n    dependencies {\n        compile project(':common')\n        compile project(':segmentstore:storage')\n        compile project(':shared:metrics')\n        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n        compile group: 'org.apache.bookkeeper', name: 'bookkeeper-server', version: bookKeeperVersion, withoutLogger\n        compile group: 'org.apache.bookkeeper', name: 'circe-checksum', version: bookKeeperVersion, withoutLogger\n        testCompile project(':test:testcommon')\n        testCompile project(path:':segmentstore:storage', configuration:'testRuntime')\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n    }\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject ('bindings') {\n    dependencies {\n        // For HDFS\n        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion, withoutLogger\n        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion, withoutLogger\n        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs-client', version: hadoopVersion, withoutLogger\n        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n\n\n        // Adding JAXB API and the reference implementation as dependencies here, since they are not available\n        // in newer Java SE versions (11 and newer).\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion\n        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion\n        compile group: 'javax.activation', name: 'javax.activation-api', version: activationVersion\n        testCompile group: 'io.netty', name: 'netty-codec-http', version: nettyVersion\n\n        //For Extended S3\n        compile group: 'com.emc.ecs', name: 'object-client', version: ecsObjectClientVersion, withoutLogger\n\n        compile group: 'software.amazon.awssdk', name: 's3', version: awsSdkVersion\n        compile group: 'software.amazon.awssdk', name: 'sts', version: awsSdkVersion\n\n        compile group: 'com.azure', name: 'azure-storage-blob', version: azureSdkVersion\n        // These were previously brought in as transitive dependencies of HDFS, although they were required for running\n        // ExtendedS3SimpleStorageTests. But since the HDFS 3.x upgrade, these transitive dependencies are excluded,\n        // so adding explicit dependencies is necessary (as well as desirable).\n        implementation group: 'com.google.guava', name: 'guava', version: guavaVersion\n        implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: guiceVersion\n        implementation group: 'com.google.inject.extensions', name: 'guice-servlet', version: guiceVersion\n        implementation group: 'com.google.inject', name: 'guice', version: guiceVersion\n        implementation group: 'com.google.cloud', name: 'google-cloud-storage', version: gcpSdkVersion\n        implementation group: 'com.google.cloud', name: 'google-cloud-nio', version: gcpCloudNioVersion\n\n        compile project(':common')\n        compile project(':segmentstore:storage')\n        compile project(':shared:metrics')\n        testCompile project(':test:testcommon')\n        testCompile project(path: ':segmentstore:storage', configuration: 'testRuntime')\n    }\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('segmentstore:server') {\n    dependencies {\n        compile project(':common')\n        compile project(':common_server')\n        compile project(':segmentstore:contracts')\n        compile project(':segmentstore:storage')\n        compile project(':shared:metrics')\n        compile project(':shared:rest')\n        compile project(':shared:health')\n        testCompile project(':bindings')\n        testCompile project(':test:testcommon')\n    }\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('segmentstore:server:host') {\n    apply plugin: 'application'\n    applicationName = \"pravega-segmentstore\"\n    mainClassName = \"io.pravega.segmentstore.server.host.ServiceStarter\"\n\n    startScripts {\n        classpath += files('$APP_HOME/pluginlib')\n        doLast {\n            def scriptFile = file getUnixScript()\n            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')\n            def winScriptFile = file getWindowsScript()\n            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\\\lib\\\\pluginlib', '%APP_HOME%\\\\pluginlib\\\\*')\n        }\n    }\n\n    applicationDefaultJvmArgs = [\"-server\", \"-Xms512m\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                                 \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                                 \"-Dlog.name=segmentstore\",\n                                 \"-Dpravega.configurationFile=PRAVEGA_APP_HOME/conf/config.properties\",\n                                 \"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml\"]\n\n    applicationDistribution.from('src/config') {\n        into \"conf\"\n    }\n\n    dependencies {\n        compile project(':common')\n        compile project(\":shared:authplugin\")\n        compile project(\":shared:security\")\n        compile project(':shared:cluster')\n        compile project(':segmentstore:contracts')\n        compile project(':client')\n        compile project(':segmentstore:storage')\n        compile project(':segmentstore:storage:impl')\n        compile project(':shared:health')\n        compile project(':shared:rest')\n        compile project(':bindings')\n        compile project(':shared:health-bindings')\n        compile project(':segmentstore:server')\n        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        testCompile project(':test:testcommon')\n        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion\n        testCompile project(path:':segmentstore:server', configuration:'testRuntime')\n        testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger\n        testCompile project(path:':segmentstore:storage:impl', configuration:'testRuntime')\n        testCompile project(path:':bindings', configuration:'testRuntime')\n        testCompile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'\n        testCompile group: 'com.google.cloud', name: 'google-cloud-storage', version: gcpSdkVersion\n        testCompile group: 'com.google.cloud', name: 'google-cloud-nio', version: gcpCloudNioVersion\n    }\n\n    task createAppWithGCLogging(type: CreateStartScripts) {\n        applicationName = \"pravega-segmentstore-withGCLogging\"\n        mainClassName = \"io.pravega.controller.server.Main\"\n        defaultJvmOpts = [\"-server\", \"-Xms512m\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                          \"-XX:+PrintGCDetails\", \"-XX:+PrintGCDateStamps\",\n                          \"-Xloggc:PRAVEGA_APP_HOME/logs/gc.log\", \"-XX:+UseGCLogFileRotation\",\n                          \"-XX:NumberOfGCLogFiles=2\", \"-XX:GCLogFileSize=64m\",\n                          \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                          \"-Dlog.name=segmentstore\",\n                          \"-Dpravega.configurationFile=PRAVEGA_APP_HOME/conf/config.properties\",\n                          \"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml\"]\n        classpath = startScripts.classpath\n        outputDir = startScripts.outputDir\n    }\n\n    applicationDistribution.into(\"bin\") {\n        from(createAppWithGCLogging)\n    }\n\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('test:integration') {\n    apply plugin: 'application'\n    applicationName = \"pravega-selftest\"\n    mainClassName = \"io.pravega.test.integration.selftest.SelfTestRunner\"\n\n    applicationDefaultJvmArgs = [\"-server\", \"-Xmx4g\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                                 \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                                 \"-Dlog.name=selftest\"]\n\n    applicationDistribution.from('src/config') {\n        into \"conf\"\n    }\n\n    test {\n        jvmArgs = [\"-server\", \"-Xmx2g\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                   \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                   \"-Dlog.name=selftest\"]\n    }\n\n    dependencies {\n        compile project(':common')\n        compile project(':client')\n        compile project(':segmentstore:server')\n        compile project(':segmentstore:server:host')\n        compile project(':controller')\n        compile project(':test:testcommon')\n        compile group: 'junit', name:'junit', version: junitVersion\n        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion\n        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        testCompile group: 'org.apache.commons', name: 'commons-csv', version: apacheCommonsCsvVersion\n        testCompile project(path:':common', configuration:'testRuntime')\n        testCompile project(path:':shared:protocol', configuration:'testRuntime')\n        testCompile project(path:':segmentstore:server', configuration:'testRuntime')\n        testCompile project(path:':segmentstore:server:host', configuration:'testRuntime')\n        testCompile project(path:':shared:metrics', configuration:'testRuntime')\n\n        // Workaround for intellij issue, since we cannot add both the compile dependency and the testRuntime\n        // dependency of the client project into the compile scope of the integration tests\n        compile files(project(':client').sourceSets.test.output)\n    }\n\n    task startServer(type: JavaExec) {\n        main = \"io.pravega.segmentstore.server.host.ServiceStarter\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startBenchmark(type: JavaExec) {\n        main = \"io.pravega.segmentstore.server.host.ServiceBenchmark\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startLocalService(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.StartLocalService\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startWriter(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.StartWriter\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startReader(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.StartReader\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startController(type: JavaExec) {\n        main = \"io.pravega.controller.server.Main\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startScaleTest(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.ScaleTest\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startEndToEndTransactionTest(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.EndToEndTransactionTest\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task startEventProcessorTest(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.EventProcessorTest\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n    }\n\n    task selftest(type: JavaExec) {\n        main = \"io.pravega.test.integration.selftest.SelfTestRunner\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n        systemProperties System.getProperties()\n    }\n\n    task compatibilityCheck(type: JavaExec){\n        main = \"io.pravega.test.integration.compatibility.CompatibilityChecker\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n        systemProperties System.getProperties()\n    }\n\n    /**\n     * See: https://github.com/pravega/pravega/wiki/Pravega-User-CLI.\n     * This will only work well from the console if all Gradle output is suppressed: -q --console=plain\n     */\n    task startInteractiveDemo(type: JavaExec) {\n        main = \"io.pravega.test.integration.demo.interactive.InteractiveDemo\"\n        classpath = sourceSets.main.runtimeClasspath\n        standardInput = System.in\n        systemProperties System.getProperties()\n        systemProperties 'logback.configurationFile' : new File(\"${project.rootDir}/config/logback.xml\")\n    }\n}\n\nproject('shared:controller-api') {\n    apply plugin: 'com.google.protobuf'\n\n    dependencies {\n        compile project(':common')\n        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version\n        compile group: 'commons-io', name: 'commons-io', version: commonsioVersion\n        compile \"io.grpc:grpc-auth:\" + grpcVersion\n        // Since Java 10 javax.annotation is no longer bundled with the JRE\n        compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: javaxAnnotationVersion\n    }\n\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    javadoc {\n        exclude 'io/pravega/controller/*'\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('controller') {\n    sourceSets {\n        main.resources.srcDirs += \"$projectDir/src/conf\"\n        test.resources.srcDirs += \"$rootDir/config\"\n    }\n\n    apply plugin: 'application'\n    applicationName = \"pravega-controller\"\n    mainClassName = \"io.pravega.controller.server.Main\"\n    applicationDefaultJvmArgs = [\"-server\", \"-Xms128m\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                                 \"-Dconfig.file=PRAVEGA_APP_HOME/conf/controller.config.properties\",\n                                 \"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml\",\n                                 \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                                 \"-Dlog.name=controller\"]\n    startScripts {\n        classpath += files('$APP_HOME/pluginlib')\n        doLast {\n            def scriptFile = file getUnixScript()\n            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')\n            def winScriptFile = file getWindowsScript()\n            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\\\lib\\\\pluginlib', '%APP_HOME%\\\\pluginlib\\\\*')\n        }\n    }\n    applicationDistribution.from('src/conf') {\n        into \"conf\"\n        rename \"application.conf\", \"controller.conf\"\n    }\n\n    applicationDistribution.into('') {\n        def pluginDirBase = new File(System.getProperty(\"java.io.tmpdir\", \"/tmp\") + \"/dummy-dir\")\n        pluginDirBase.mkdirs()\n        def logDir = new File(pluginDirBase.absolutePath + '/pluginlib')\n        logDir.mkdirs()\n\n        from {pluginDirBase}\n    }\n\n    dependencies {\n        compile project(':common')\n        compile project(\":shared:authplugin\")\n        compile project(\":shared:basic-authplugin\")\n        compile project(\":shared:security\")\n        compile project(\":shared:controller-api\")\n        compile project(':shared:cluster')\n        compile project(\":client\")\n        compile project(\":shared:metrics\")\n        compile project(\":shared:rest\")\n        compile project(\":shared:health\")\n        compile project(\":shared:health-bindings\")\n        runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        compile group: 'javax.servlet', name: 'javax.servlet-api', version: javaxServletApiVersion\n        compile(group: 'io.swagger', name : 'swagger-jersey2-jaxrs', version :swaggerJersey2JaxrsVersion) {\n            exclude group: 'com.google.guava', module: 'guava'\n        }\n        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n        compile group: 'org.apache.curator', name: 'curator-recipes', version: apacheCuratorVersion\n        compile group: 'org.apache.curator', name: 'curator-client', version: apacheCuratorVersion\n        compile group: 'org.apache.commons', name: 'commons-lang3', version: commonsLang3Version\n        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion\n        testCompile project(':test:testcommon')\n        testCompile project(':shared:basic-authplugin')\n        testCompile project(\":shared:authplugin\").sourceSets.test.output\n        testCompile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion\n        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion\n        // since Java 10 JAXB is not more bundled with the JRE\n        compile group: 'javax.xml.bind', name: 'jaxb-api', version: jaxbVersion\n        compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: jaxbVersion\n        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n    }\n\n    task createAppWithGCLogging(type: CreateStartScripts) {\n        applicationName = \"pravega-controller-withGCLogging\"\n        mainClassName = \"io.pravega.controller.server.Main\"\n        defaultJvmOpts = [\"-server\", \"-Xms128m\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                          \"-XX:+PrintGCDetails\", \"-XX:+PrintGCDateStamps\",\n                          \"-Xloggc:PRAVEGA_APP_HOME/logs/gc.log\", \"-XX:+UseGCLogFileRotation\",\n                          \"-XX:NumberOfGCLogFiles=2\", \"-XX:GCLogFileSize=64m\",\n                          \"-Dconfig.file=PRAVEGA_APP_HOME/conf/controller.config.properties\",\n                          \"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/logback.xml\",\n                          \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                          \"-Dlog.name=controller\"]\n        classpath = startScripts.classpath\n        outputDir = startScripts.outputDir\n    }\n\n    applicationDistribution.into(\"bin\") {\n        from(createAppWithGCLogging)\n    }\n}\n\nproject('cli:admin') {\n    apply plugin: 'application'\n    applicationName = \"pravega-admin\"\n    mainClassName = \"io.pravega.cli.admin.AdminCLIRunner\"\n\n    applicationDefaultJvmArgs = [\"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/admin-cli-logback.xml\",\n                                 \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                                 \"-Dlog.name=adminCli\"]\n\n    startScripts {\n        classpath += files('$APP_HOME/pluginlib')\n        doLast {\n            def scriptFile = file getUnixScript()\n            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')\n            def winScriptFile = file getWindowsScript()\n            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\\\lib\\\\pluginlib', '%APP_HOME%\\\\pluginlib\\\\*')\n        }\n    }\n\n    dependencies {\n        compile project(':common')\n        compile project(':controller')\n        compile project(':segmentstore:server')\n        compile project(':segmentstore:storage')\n        compile project(':segmentstore:server:host')\n        compile project(':segmentstore:storage:impl')\n        compile project(':shared:cluster')\n        compile project(\":shared:security\")\n        compile project(':test:testcommon')\n        compile project(':test:integration')\n        compile group: 'org.apache.bookkeeper', name: 'bookkeeper-common', version: bookKeeperVersion\n        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n        testCompile group: 'org.apache.bookkeeper', name: 'bookkeeper-common', version: bookKeeperVersion, classifier: 'tests'\n        testCompile group: 'org.apache.bookkeeper', name: 'bookkeeper-server', version: bookKeeperVersion, classifier: 'tests'\n        testCompile group: 'org.apache.zookeeper', name: 'zookeeper', version: apacheZookeeperVersion, classifier: 'tests'\n    }\n\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\nproject('cli:user') {\n    apply plugin: 'application'\n    applicationName = \"pravega-cli\"\n    mainClassName = \"io.pravega.cli.user.UserCLIRunner\"\n\n    startScripts {\n        classpath += files('$APP_HOME/pluginlib')\n        doLast {\n            def scriptFile = file getUnixScript()\n            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')\n            def winScriptFile = file getWindowsScript()\n            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\\\lib\\\\pluginlib', '%APP_HOME%\\\\pluginlib\\\\*')\n        }\n    }\n\n    dependencies {\n        compile project(':common')\n        compile project(':client')\n        compile project(':shared:protocol')\n        compile project(':test:testcommon')\n        compile group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        compile group: 'com.google.code.gson', name: 'gson', version: gsonVersion\n        testCompile project(':test:integration')\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n    }\n\n    javadoc {\n        dependsOn delombok\n        source = delombok.outputDir\n        failOnError = true\n    }\n}\n\n\nproject('standalone') {\n    apply plugin: 'application'\n    applicationName = \"pravega-standalone\"\n    mainClassName = \"io.pravega.local.LocalPravegaEmulator\"\n    applicationDefaultJvmArgs = [\"-server\", \"-Xmx4g\", \"-XX:+HeapDumpOnOutOfMemoryError\",\n                                 \"-Dlogback.configurationFile=PRAVEGA_APP_HOME/conf/standalone-logback.xml\",\n                                 \"-Dsinglenode.configurationFile=PRAVEGA_APP_HOME/conf/standalone-config.properties\",\n                                 \"-Dlog.dir=PRAVEGA_APP_HOME/logs\",\n                                 \"-Dlog.name=pravega\",\n                                 \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:+JDWP_DEFAULT_PORT\"]\n\n    tasks.withType(CreateStartScripts) {\n        def tplName = 'unixApplicationStartupScript.txt'\n        unixStartScriptGenerator.template = resources.text.fromFile(tplName)\n    }\n\n    startScripts {\n        classpath += files('$APP_HOME/pluginlib')\n        doLast {\n            def scriptFile = file getUnixScript()\n            scriptFile.text = scriptFile.text.replace('$APP_HOME/lib/pluginlib', '$APP_HOME/pluginlib/*')\n            def winScriptFile = file getWindowsScript()\n            winScriptFile.text = winScriptFile.text.replace('%APP_HOME%\\\\lib\\\\pluginlib', '%APP_HOME%\\\\pluginlib\\\\*')\n        }\n    }\n\n    dependencies {\n        runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n\n        compile project(':common')\n        compile project(':client')\n        compile project(':segmentstore:server')\n        compile project(':segmentstore:server:host')\n        compile project(':controller')\n        compile project(':segmentstore:contracts')\n        compile project(':segmentstore:storage')\n        compile project(':segmentstore:storage:impl')\n        compile project(':bindings')\n\n        compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-grizzly2-http', version: jerseyVersion\n        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: javaxwsrsApiVersion\n        compile group: 'org.apache.curator', name: 'curator-test', version: apacheCuratorVersion\n        // https://mvnrepository.com/artifact/org.apache.hadoop/hadoop-common\n        compile group: 'org.apache.hadoop', name: 'hadoop-common', version: hadoopVersion, withoutLogger\n        compile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: hadoopVersion, withoutLogger\n        compile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: hadoopVersion, withoutLogger\n        compile group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: nettyBoringSSLVersion\n        compile group: 'io.jsonwebtoken', name: 'jjwt', version: jjwtVersion\n        testCompile project(':test:testcommon')\n        testCompile project(path:':common', configuration:'testRuntime')\n        testCompile project(path:':segmentstore:server', configuration:'testRuntime')\n        testCompile project(path:':segmentstore:server:host', configuration:'testRuntime')\n    }\n\n    configurations {\n        runtime.exclude group: \"com.sun.jersey\", module: \"jersey-core\"\n        runtime.exclude group: \"com.sun.jersey\", module: \"jersey-server\"\n    }\n\n    task startStandalone(type: JavaExec) {\n        main = \"io.pravega.local.LocalPravegaEmulator\"\n        classpath = sourceSets.main.runtimeClasspath\n        systemProperties System.getProperties()\n        systemProperties 'logback.configurationFile' : new File(\"${project.rootDir}/config/standalone-logback.xml\")\n        systemProperties 'singlenode.configurationFile' : new File(\"${project.rootDir}/config/standalone-config.properties\")\n\n        if (systemProperties.get(\"extDirs\") != null) {\n            classpath += files(systemProperties.get(\"extDirs\"))\n        }\n\n        def JDWP_DEFAULT_PORT = 8050\n        def jvmDebugPort = System.getenv(\"JDWP_PORT\")\n        if (jvmDebugPort != null && jvmDebugPort != \"\") {\n            def matcher = jvmDebugPort =~ /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/\n            if (matcher.matches()) {\n                JDWP_DEFAULT_PORT = jvmDebugPort\n            } else {\n                println \"Invalid JDWP_PORT number - \" +jvmDebugPort+ \", staring Pravega standalone using default port 8050\"\n            }\n\n        }\n        jvmArgs \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=127.0.0.1:\" + JDWP_DEFAULT_PORT\n\n    }\n}\n\nproject('test:system') {\n    // Specifically publish this test project\n    apply plugin: 'maven'\n\n    // override the compile java options to disable -Werror this will remove once https://github.com/pravega/pravega/issues/3152 is resolved.\n    tasks.withType(JavaCompile) {\n        options.compilerArgs.remove(\"-Werror\")\n        options.compilerArgs.remove(getDefaultJavaVersion())\n        options.compilerArgs.add(clientJavaVersion)\n    }\n\n    dependencies {\n        // https://mvnrepository.com/artifact/com.mesosphere/marathon-client\n        runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: qosLogbackVersion\n        compile group: 'com.mesosphere', name: 'marathon-client', version: marathonClientVersion, withoutLogger\n        if (System.getProperty(\"customClient\") != null) {\n            implementation fileTree(System.getProperty(\"customClient\")) { include '*.jar' }\n        } else {\n            compile project(\":client\")\n        }\n        compile project(\":test:testcommon\")\n        compile group: 'junit', name: 'junit', version: junitVersion\n        compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: javaxwsrsApiVersion\n        compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: jerseyVersion\n        compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion\n        compile group: 'org.glassfish.jersey.connectors', name:'jersey-apache-connector', version:jerseyVersion\n        compile group: 'com.spotify', name: 'docker-client', version: dockerClientVersion\n        compile group: 'io.kubernetes', name: 'client-java', version: k8ClientVersion\n        compile group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n        runtimeOnly group: 'org.apache.curator', name: 'curator-framework', version: apacheCuratorVersion\n        runtimeOnly group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion\n    }\n    //disable the default test task.\n    test {\n        exclude 'io/pravega/**'\n    }\n\n    jar { //create a fat jar\n        archiveFileName = \"test-collection.jar\"\n        from {\n            (configurations.runtimeClasspath).collect {\n                it.isDirectory() ? it : zipTree(it)\n            }\n        }\n        from sourceSets.test.output\n        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'\n    }\n\n    task testJarForDocker(type: Jar) {\n        archiveFileName = \"test-docker-collection.jar\"\n        from {\n            (configurations.runtime).collect {\n                it.isDirectory() ? it : zipTree(it)\n            }\n        }\n        from sourceSets.test.output\n        from sourceSets.main.output\n        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'\n    }\n\n    //This is  used to invoke systemTests\n    task startSystemTests(type: Test) {\n        tasks.withType(Exec) { environment \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\") }\n        ext.dockerRegistryUrl = project.hasProperty(\"dockerRegistryUrl\") ? project.dockerRegistryUrl : \"\"\n        ext.repoUrl = project.hasProperty(\"repoUrl\") ? project.repoUrl : \"\"\n\n        (includes, excludes) = subsetSystemTests()\n\n        description 'Used to invoke system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'\n        testClassesDirs = sourceSets.test.output.classesDirs\n        classpath = sourceSets.test.runtimeClasspath\n\n        systemProperty \"test_collection_jar_path\", \"$jar.archivePath.path\"\n        systemProperty \"execType\", System.getProperty(\"execType\")\n        systemProperty \"masterIP\", System.getProperty(\"masterIP\")\n        systemProperty \"imageVersion\", System.getProperty(\"imageVersion\")\n        systemProperty \"skipServiceInstallation\", System.getProperty(\"skipServiceInstallation\")\n        systemProperty \"segmentStoreExtraEnv\", System.getProperty(\"segmentStoreExtraEnv\")\n\n        if (System.getProperty(\"execType\") == null) {\n            systemProperty \"execType\", \"REMOTE_SEQUENTIAL\"\n        }\n        if (System.getProperty(\"masterIP\") == null) {\n            systemProperty \"masterIP\", \"INVALID_MASTER_IP\"\n        }\n        if (System.getProperty(\"imageVersion\") == null) {\n            systemProperty \"imageVersion\", \"INVALID_IMAGE_VERSION\"\n        }\n        if (System.getProperty(\"skipServiceInstallation\") == null) {\n            //skipServiceInstallation by default.\n            systemProperty \"skipServiceInstallation\", \"true\"\n        }\n        maxParallelForks = 1\n        systemProperty \"dockerImageRegistry\", \"${dockerRegistryUrl}\"\n        systemProperty \"testVersion\", pravegaVersion\n        systemProperty \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\")\n        systemProperty \"testArtifactUrl\", \"${repoUrl}/io/pravega/pravega-test-system/\" +\n                pravegaVersion+\"/pravega-test-system-\"+ pravegaVersion + \".jar\"\n\n        onlyIf { dockerRegistryUrl && repoUrl }\n    }\n\n    task copyTestsToK8sCluster(type: Exec) {\n        description 'Used to copy test artifacts to the Kubernetes Cluster.'\n        dependsOn 'jar'\n\n        environment \"dockerRegistryUrl\", System.getProperty(\"dockerRegistryUrl\")\n        environment \"imagePrefix\", System.getProperty(\"imagePrefix\", \"pravega\")\n        environment \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n        environment \"pravegaOperatorChartVersion\", System.getProperty(\"pravegaOperatorChartVersion\", \"0.6.1\")\n        environment \"bookkeeperOperatorChartVersion\", System.getProperty(\"bookkeeperOperatorChartVersion\", \"0.2.1\")\n        environment \"zookeeperOperatorChartVersion\", System.getProperty(\"zookeeperOperatorChartVersion\", \"0.2.13\")\n        environment \"pravegaOperatorVersion\", System.getProperty(\"pravegaOperatorVersion\", \"0.5.5\")\n        environment \"bookkeeperOperatorVersion\", System.getProperty(\"bookkeeperOperatorVersion\", \"0.1.6\")\n        environment \"zookeeperOperatorVersion\", System.getProperty(\"zookeeperOperatorVersion\", \"0.2.13\")\n        environment \"pravegaOperatorImageName\", System.getProperty(\"pravegaOperatorImageName\", \"pravega-operator\")\n        environment \"bookkeeperOperatorImageName\", System.getProperty(\"bookkeeperOperatorImageName\", \"bookkeeper-operator\")\n        environment \"zookeeperOperatorImageName\", System.getProperty(\"zookeeperOperatorImageName\", \"zookeeper-operator\")\n        // The below properties are used to to specify the pravega published chart and repository to deploy pravega,bookkeeper & zookkeeper operators using helm docker image properties\n        environment \"publishedChartName\", System.getProperty(\"publishedChartName\", \"pravega\")\n        environment \"helmRepository\", System.getProperty(\"helmRepository\", \"https://charts.pravega.io\")\n        environment \"helmHookImageName\", System.getProperty(\"helmHookImageName\", \"lachlanevenson/k8s-kubectl\")\n        environment \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\")\n        environment \"securityEnabled\", System.getProperty(\"securityEnabled\", \"false\")\n        environment \"tlsCertCNName\", System.getProperty(\"tlsCertCNName\", \"localhost\")\n        environment \"skipServiceInstallation\", System.getProperty(\"skipServiceInstallation\", \"false\")\n        environment \"testPodImage\", System.getProperty(\"testPodImage\", \"openjdk:8u181-jre-alpine\")\n\n        commandLine './kubernetes/setupTestPod.sh'\n    }\n\n    task runFluentBitInstall(type: Exec) {\n        if (System.getProperty(\"skipFluentInstall\", \"false\") == \"false\") {\n            environment 'FLUENT_BIT_STORAGE_CLASS', System.getProperty(\"logStorageClass\", \"\")\n            environment 'FLUENT_BIT_HOST_LOGS_PATH', System.getProperty(\"k8HostLogPath\", \"\")\n            environment 'ALPINE_IMAGE', System.getProperty(\"alpineImage\", \"alpine:latest\")\n            commandLine './kubernetes/fluentBitSetup.sh', 'install'\n        } else {\n            commandLine 'echo', 'Skipping Fluent-Bit installation.'\n        }\n    }\n\n    task fetchSystemTestLogs(type: Exec) {\n        environment 'FLUENT_BIT_EXPORT_PATH', \"logs\"\n        commandLine './kubernetes/fluentBitSetup.sh', 'fetch-namespace-logs'\n        commandLine './kubernetes/fluentBitSetup.sh', 'fetch-system-test-logs'\n    }\n\n    task startK8SystemTests(type: Test) {\n        dependsOn 'copyTestsToK8sCluster', 'runFluentBitInstall' // ensure test artifacts are copied to the cluster.\n        description 'Used to invoke K8s based System Tests, example usage: gradle startK8SystemTests'\n\n        testClassesDirs = sourceSets.test.output.classesDirs\n        classpath = sourceSets.test.runtimeClasspath\n\n        (includes, excludes) = subsetSystemTests()\n\n        ext.repoUrl = project.hasProperty(\"repoUrl\") ? project.repoUrl : \"\"\n        systemProperty \"execType\", \"KUBERNETES\"\n        // The below properties are used to to specify the pravega docker image properties\n        // e.g: private-docker-repo/pravega-prefix/pravega:version\n        if (System.getProperty(\"dockerRegistryUrl\") != null) { // docker images are pulled from dockerhub if dockerRegistryUrl is not specified.\n            systemProperty \"dockerRegistryUrl\", System.getProperty(\"dockerRegistryUrl\") + \"/\"\n        }\n        systemProperty \"skipServiceInstallation\", System.getProperty(\"skipServiceInstallation\", \"false\")\n        systemProperty \"skipLogDownload\", System.getProperty(\"skipLogDownload\", \"false\")\n        systemProperty \"imagePrefix\", System.getProperty(\"imagePrefix\", \"pravega\")  // the default value of imagePrefix is pravega.\n        systemProperty \"pravegaImageName\", System.getProperty(\"pravegaImageName\", \"pravega\") // pravega image name\n        systemProperty \"bookkeeperImageName\", System.getProperty(\"bookkeeperImageName\", \"bookkeeper\") // bookkeeper image name\n        systemProperty \"zookeeperImageName\", System.getProperty(\"zookeeperImageName\", \"zookeeper\") // zookkeeper image name\n        systemProperty \"zookeeperImageVersion\", System.getProperty(\"zookeeperImageVersion\", \"latest\") // zookeeper image version\n        systemProperty \"imageVersion\", System.getProperty(\"imageVersion\") // pravega version.\n        // bookkeeper version can be different from pravega version.\n        systemProperty \"bookkeeperImageVersion\", System.getProperty(\"bookkeeperImageVersion\", \"imageVersion\") // // bookkeeper image version\n        // tier2Type , default is NFS.\n        systemProperty \"tier2Type\", System.getProperty(\"tier2Type\", \"nfs\")\n        // tier2 configuration, specified as comma separated key values k1=v1,k2=v2\n        systemProperty \"tier2Config\", System.getProperty(\"tier2Config\")\n        systemProperty \"tier2Env\", System.getProperty(\"tier2Env\")\n        systemProperty \"pravegaOperatorChartVersion\", System.getProperty(\"pravegaOperatorChartVersion\", \"0.6.1\")\n        systemProperty \"bookkeeperOperatorChartVersion\", System.getProperty(\"bookkeeperOperatorChartVersion\", \"0.2.1\")\n        systemProperty \"zookeeperOperatorChartVersion\", System.getProperty(\"zookeeperOperatorChartVersion\", \"0.2.13\")\n        systemProperty \"pravegaOperatorVersion\", System.getProperty(\"pravegaOperatorVersion\", \"0.5.5\")\n        systemProperty \"bookkeeperOperatorVersion\", System.getProperty(\"bookkeeperOperatorVersion\", \"0.1.6\")\n        systemProperty \"zookeeperOperatorVersion\", System.getProperty(\"zookeeperOperatorVersion\", \"0.2.13\")\n        systemProperty \"pravegaOperatorImageName\", System.getProperty(\"pravegaOperatorImageName\", \"pravega-operator\")\n        systemProperty \"bookkeeperOperatorImageName\", System.getProperty(\"bookkeeperOperatorImageName\", \"bookkeeper-operator\")\n        systemProperty \"zookeeperOperatorImageName\", System.getProperty(\"zookeeperOperatorImageName\", \"zookeeper-operator\")\n        systemProperty \"publishedChartName\", System.getProperty(\"publishedChartName\", \"pravega\")\n        systemProperty \"helmRepository\", System.getProperty(\"helmRepository\", \"pravega\")\n        systemProperty \"helmHookImageName\", System.getProperty(\"helmHookImageName\", \"lachlanevenson/k8s-kubectl\")\n\n        // target versions wrt Upgrade for all operators & clusters\n        systemProperty \"controllerLabel\", System.getProperty(\"controllerLabel\", \"pravega-controller\");\n        systemProperty \"segmentstoreLabel\", System.getProperty(\"segmentstoreLabel\", \"pravega-segmentstore\");\n        systemProperty \"tlsSecretName\", System.getProperty(\"tlsSecretName\", \"controller-tls\");\n        systemProperty \"bookkeeperLabel\", System.getProperty(\"bookkeeperLabel\", \"bookie\");\n        systemProperty \"pravegaID\", System.getProperty(\"pravegaID\", \"pravega\");\n        systemProperty \"bookkeeperID\", System.getProperty(\"bookkeeperID\", \"pravega-bk\");\n        systemProperty \"bookkeeperConfigMap\", System.getProperty(\"bookkeeperConfigMap\", \"bk-config-map\");\n\n        systemProperty \"targetPravegaOperatorVersion\", System.getProperty(\"targetPravegaOperatorVersion\", \"latest\")\n        systemProperty \"targetBookkeeperOperatorVersion\", System.getProperty(\"targetBookkeeperOperatorVersion\", \"latest\")\n        systemProperty \"targetZookeeperOperatorVersion\", System.getProperty(\"targetZookeeperOperatorVersion\", \"latest\")\n        systemProperty \"targetPravegaVersion\", System.getProperty(\"targetPravegaVersion\", \"latest\")\n        systemProperty \"targetBookkeeperVersion\", System.getProperty(\"targetBookkeeperVersion\", \"latest\")\n        systemProperty \"targetZookeeperVersion\", System.getProperty(\"targetZookeeperVersion\", \"latest\")\n        //testPodImage , default is openjdk:8u181-jre-alpine\n        systemProperty \"testPodImage\", System.getProperty(\"testPodImage\", \"openjdk:8u181-jre-alpine\")\n        systemProperty \"testServiceAccount\", System.getProperty(\"testServiceAccount\", \"test-framework\");\n        systemProperty \"testClusterRoleBinding\", System.getProperty(\"testClusterRoleBinding\", \"cluster-admin-testFramework\");\n\n        if (System.getProperty(\"imageVersion\") == null) {\n            systemProperty \"imageVersion\", \"INVALID_IMAGE_VERSION\"\n        }\n        // validating that bookkeeper operator version >= 0.1.5\n        if (System.getProperty(\"bookkeeperOperatorVersion\") ==~ /^(0)\\.(1)\\.(0|1|2|3|4)(-.+)*/) {\n            throw new InvalidUserDataException('Requires Bookkeeper Operator Version >= 0.1.5')\n        }\n        // validating that pravega operator version >= 0.5.4\n        if (System.getProperty(\"pravegaOperatorVersion\") ==~ /^((0)\\.(1|2|3|4)\\.(\\d)(-.+)*)|((0)\\.(5)\\.(0|1|2|3)(-.+)*)/) {\n            throw new InvalidUserDataException('Requires Pravega Operator Version >= 0.5.4')\n        }\n\n        systemProperty \"securityEnabled\", System.getProperty(\"securityEnabled\", \"false\")\n        systemProperty \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\")\n        systemProperty \"tlsCertCNName\", System.getProperty(\"tlsCertCNName\", \"localhost\")\n        systemProperty \"log.level\", System.getProperty(\"log.level\", \"DEBUG\")\n\n        if (System.getProperty(\"configFile\") != null) {\n            systemProperty \"configs\", new File(System.getProperty(\"configFile\")).text\n        }\n        maxParallelForks = 1\n\n        if (System.getProperty(\"failFast\", \"false\") == \"true\") {\n            failFast = true\n        }\n    }\n\n    task execShellScript(type: Exec) {\n\n        ext.awsExecution = project.hasProperty('awsExecution') ? project.awsExecution : 'false'\n\n        if(ext.getProperty('awsExecution').toString().equals(\"true\")) {\n            commandLine './aws/preTestScript.sh'\n            args \"$aws_access_key\", \"$aws_secret_key\", \"$aws_region\", \"$aws_key_name\", \"$cred_path\", \"$config_path\", \"$pravega_org\", \"$pravega_branch\"\n        } else if (project.hasProperty('CLUSTER_NAME')) {\n            commandLine \"./preTestScript.sh\"\n            args \"$CLUSTER_NAME\", \"$MASTER\", \"$NUM_SLAVES\"\n        }\n    }\n\n    String variable\n\n    task setAwsMasterIp(type: Exec) {\n\n        commandLine 'echo', 'setting master ip for system tests execution on AWS'\n\n        doLast {\n            def masterIpStdOut = new ByteArrayOutputStream()\n            exec {\n                workingDir \"$rootDir/test/system/aws\"\n                executable = \"terraform\"\n                args \"output\", \"ip\"\n                standardOutput = masterIpStdOut\n            }\n\n            variable = masterIpStdOut.toString()\n        }\n    }\n\n\n    //This is  used to invoke docker based systemTests\n    task startSystemTestsWithDocker(type: Test) {\n\n        tasks.withType(Exec) { environment \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\") }\n        dependsOn 'testJarForDocker', 'execShellScript'\n\n        if (System.getProperty(\"awsExec\").equals(\"true\")) {\n            setAwsMasterIp.outputs.upToDateWhen { false }\n            dependsOn 'setAwsMasterIp'\n        }\n\n        doFirst {\n            systemProperty \"awsMasterIP\", variable\n        }\n\n        ext.dockerRegistryUrl = project.hasProperty(\"dockerRegistryUrl\") ? project.dockerRegistryUrl : \"\"\n\n        description 'Used to invoke docker based system tests, example usage: gradle startSystemTests -DmasterIP=xx.xx.xx.xx'\n        testClassesDirs = sourceSets.test.output.classesDirs\n        classpath = sourceSets.test.runtimeClasspath\n\n        systemProperty \"execType\", System.getProperty(\"execType\")\n        systemProperty \"masterIP\", System.getProperty(\"masterIP\")\n        systemProperty \"imageVersion\", System.getProperty(\"imageVersion\")\n        systemProperty \"skipServiceInstallation\", System.getProperty(\"skipServiceInstallation\")\n        systemProperty \"segmentStoreExtraEnv\", System.getProperty(\"segmentStoreExtraEnv\")\n        systemProperty \"awsExec\", System.getProperty(\"awsExec\")\n        systemProperty \"pravegaImageName\", System.getProperty(\"pravegaImageName\", \"pravega\") // pravega image name\n        systemProperty \"bookkeeperImageName\", System.getProperty(\"bookkeeperImageName\", \"bookkeeper\") // bookkeeper image name\n        systemProperty \"zookeeperImageName\", System.getProperty(\"zookeeperImageName\", \"zookeeper\") // zookkeeper image name\n        systemProperty \"zookeeperImageVersion\", System.getProperty(\"zookeeperImageVersion\", \"latest\") // zookeeper image version\n        systemProperty \"imagePrefix\", System.getProperty(\"imagePrefix\", \"pravega\")  // the default value of imagePrefix is pravega.\n\n        if (System.getProperty(\"execType\") == null) {\n            systemProperty \"execType\", \"DOCKER\"\n        }\n        if (System.getProperty(\"masterIP\") == null) {\n            systemProperty \"masterIP\", \"INVALID_MASTER_IP\"\n        }\n        if (System.getProperty(\"imageVersion\") == null) {\n            systemProperty \"imageVersion\", \"INVALID_IMAGE_VERSION\"\n        }\n        if (System.getProperty(\"skipServiceInstallation\") == null) {\n            //skipServiceInstallation by default.\n            systemProperty \"skipServiceInstallation\", \"false\"\n        }\n        if (System.getProperty(\"awsExec\") == null) {\n            systemProperty \"awsExec\", \"false\"\n        }\n        maxParallelForks = 1\n        systemProperty \"dockerImageRegistry\", \"${dockerRegistryUrl}\"\n        systemProperty \"log.level\", System.getProperty(\"log.level\", \"DEBUG\")\n        systemProperty \"tlsEnabled\", System.getProperty(\"tlsEnabled\", \"false\")\n\n    }\n\n    task collectSystemTestLogsFromAws(type: Exec) {\n        if (project.hasProperty('aws_secret_key')) {\n            commandLine './aws/postTestScript.sh'\n            args \"$aws_access_key\", \"$aws_secret_key\", \"$aws_region\", \"$aws_key_name\", \"$cred_path\", \"$config_path\", \"$pravega_org\", \"$pravega_branch\", \"$travis_commit\"\n        }\n    }\n}\n\ndef getProjectVersion() {\n    String ver = pravegaVersion\n    if (grgit && ver.contains(\"-SNAPSHOT\") && !project.hasProperty(\"simpleSnapshot\")) {\n        String versionLabel = ver.substring(0, ver.indexOf(\"-SNAPSHOT\"))\n        def count = grgit.log(includes:['HEAD']).size()\n        def commitId = \"${grgit.head().abbreviatedId}\"\n        ver = versionLabel + \"-\" + count + \".\" + commitId + \"-SNAPSHOT\"\n    }\n    return ver\n}\n\ndef getDefaultJavaVersion() {\n    return \"11\"\n}\n\ndef getSystemTestClass(arg) {\n    if (arg == null || arg.contains(\"*\")) {\n        return arg\n    }\n\n    def str = arg.trim()\n    def separator = System.getProperty(\"file.separator\", \"/\")\n    if (!str.contains(separator)) {\n        str = \"**\" +  separator + str\n    }\n    if (!str.endsWith('.class')) {\n        str += '.class'\n    }\n    return str\n}\n\ndef subsetSystemTests() {\n    def excludedTests = System.getProperty('excludeSystemTests')\n    def includedTests = System.getProperty('includeSystemTests')\n    def (includes, excludes) = [[], []]\n    // Let included tests take precedence if both are specified.\n    if (includedTests != null && !includedTests.isEmpty()) {\n        includes = includedTests.split(',').collect { getSystemTestClass(it) }\n    } else if (excludedTests != null && !excludedTests.isEmpty()) {\n        excludes = excludedTests.split(',').collect { getSystemTestClass(it) }\n    }\n\n    return [includes, excludes]\n}\n\n\nsubprojects {\n    task allDeps(type: DependencyReportTask) {}\n}\n\ntask publishAllJars() {\n    dependsOn ':authplugin:publish'\n    dependsOn ':client:publish'\n    dependsOn ':common:publish'\n    dependsOn ':shared:publish'\n    dependsOn ':shared:security'\n    dependsOn ':shared:protocol:publish'\n    dependsOn ':segmentstore:contracts:publish'\n    dependsOn ':segmentstore:storage:publish'\n    dependsOn ':segmentstore:storage:impl:publish'\n    dependsOn ':segmentstore:server:publish'\n    dependsOn ':segmentstore:server:host:publish'\n    dependsOn ':shared:metrics:publish'\n    dependsOn ':shared:controller-api:publish'\n    dependsOn ':controller:publish'\n    dependsOn ':standalone:publish'\n    dependsOn ':cli:admin'\n    dependsOn ':cli:user'\n    dependsOn ':test:system:publish'\n}\n\ntask sourceCopy(type: Copy) {\n    from rootDir\n    into 'source'\n}\n\ntask sourceTar(type: Tar) {\n    dependsOn 'sourceCopy'\n    from  'source'\n    destinationDirectory = file('sourceArtifacts')\n    archiveExtension = 'tgz'\n    compression = Compression.GZIP\n}\n\ntask javadocs(type: Javadoc) {\n    description = \"Generate main pravega javadoc\"\n\n    // Include names of any project that is to be included in the javadoc distribution\n    ext.projects = [':client']\n    title = \"Pravega API\"\n    destinationDir = file(\"${buildDir}/javadocs\")\n\n    projects.collect {\n        dependsOn project(it).delombok\n\n        source += project(it).delombok.outputDir\n        classpath += project(it).sourceSets.main.output + project(it).sourceSets.main.compileClasspath\n    }\n\n    failOnError = true\n    exclude \"**/impl/**\"\n    options.addBooleanOption(\"Xdoclint:all,-reference\", true)\n}\n\napply plugin: 'distribution'\ndistributions {\n    main {\n        distributionBaseName = \"pravega\"\n        contents {\n            duplicatesStrategy = \"exclude\"\n            from (\"dist/conf\") {\n                into \"conf\"\n            }\n            from (\"config\") {\n                into \"conf\"\n            }\n            from (project(\":controller\").installDist) {\n                exclude \"logback.xml\"\n            }\n            from (project(\":segmentstore:server:host\").installDist) {\n                exclude \"logback.xml\"\n            }\n            from (project(\":cli:admin\").installDist)\n            from (project(\":cli:user\").installDist)\n            from (project(\":standalone\").installDist)\n            from 'LICENSE'\n            from 'NOTICE'\n        }\n    }\n    client {\n        distributionBaseName = \"pravega-client\"\n        contents {\n            from { project(\":shared:authplugin\").configurations.runtime }\n            from { project(\":shared:authplugin\").configurations.runtime.allArtifacts.files }\n            from { project(\":client\").configurations.runtime }\n            from { project(\":client\").configurations.runtime.allArtifacts.files }\n            from 'LICENSE'\n            from 'NOTICE'\n        }\n    }\n    javadoc {\n        distributionBaseName = \"pravega-javadoc\"\n        contents {\n            from (javadocs)\n            from 'LICENSE'\n            from 'NOTICE'\n        }\n    }\n}\n\ntasks.withType(Tar) {\n    compression = Compression.GZIP\n}\n\ntask preparePravegaImage(type: Copy) {\n    into \"${buildDir}/docker/pravega\"\n    from \"docker/pravega\"\n    from (installDist) {\n        into \"pravega\"\n        exclude \"**/*.bat\", \"**/log4j*.jar\"\n    }\n}\n\ntask buildPravegaImage(type: DockerBuildTask, dependsOn: preparePravegaImage) {\n    baseTag = pravegaBaseTag\n    dockerDir = preparePravegaImage.destinationDir.absolutePath\n    dockerFile = \"${dockerDir}/Dockerfile\"\n}\n\ntask buildBookkeeperImage(type: DockerBuildTask) {\n    baseTag = bookkeeperBaseTag\n    dockerDir = \"docker/bookkeeper\"\n    dockerFile = \"${dockerDir}/Dockerfile\"\n}\n\ntask docker(dependsOn: [buildPravegaImage, buildBookkeeperImage]) {\n    description = \"Builds all docker images\"\n}\n\ntask pushPravegaImage(type: DockerPushTask) {\n    // No explicit dependency on building the pravega image\n    mustRunAfter buildPravegaImage\n    tag = \"${pravegaBaseTag}:${version}\"\n}\n\ntask pushBookkeeperImage(type: DockerPushTask) {\n    // No explicit dependency on building the bookkeeper image\n    mustRunAfter buildBookkeeperImage\n    tag = \"${bookkeeperBaseTag}:${version}\"\n}\n\ntask dockerPush(dependsOn: [pushPravegaImage, pushBookkeeperImage]) {\n    description = \"Push all docker images\"\n}\n\ntask distribution(dependsOn: [assembleDist, assembleClientDist, assembleJavadocDist]) {\n    description = \"Builds a distribution package\"\n}\n\n\n/**\n * Task for building a docker image\n */\nclass DockerBuildTask extends Exec {\n    String baseTag\n    String dockerDir\n    String dockerFile\n\n    DockerBuildTask() {\n        executable project.dockerExecutable\n        args \"build\"\n        args \"--pull\"\n        args \"-t\", \"${->baseTag}:${project.version}\"\n        args \"-t\", \"${->baseTag}:latest\"\n        args \"-f\", \"${->dockerFile}\"\n        args \"${->dockerDir}\"\n    }\n}\n\n/**\n * Task for pushing an image, which can either push to dockerhub or to a private registry.\n * If pushing to dockerhub, you must be logged using using `docker login` before running.\n */\nclass DockerPushTask extends Exec {\n    String tag\n\n    DockerPushTask() {\n        executable project.dockerExecutable\n        args \"push\", \"${->getRemoteTag()}\"\n    }\n\n    protected void exec() {\n        // Tag the image with the remote image name first\n        if (project.hasProperty('dockerRegistry')) {\n            project.exec {\n                commandLine project.dockerExecutable, \"tag\", tag, getRemoteTag()\n            }\n        }\n        super.exec()\n    }\n\n    String getRemoteTag() {\n        if (project.hasProperty('dockerRegistry')) {\n            return \"${project.property('dockerRegistry')}/${tag}\"\n        }\n        else {\n            return tag\n        }\n    }\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "Gradle",
        "config_files": {
            "docker/pravega/Dockerfile": "#\n# Copyright Pravega Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nFROM adoptopenjdk/openjdk11:jre-11.0.13_8-alpine\n\nRUN apk --update --no-cache add \\\n    #used in readiness and liveness probes\n    curl \\\n    #used in wait_for function\n    python3 \\\n    #used in init_kubernetes\n    jq \\\n    && ln -sf python3 /usr/bin/python\n\nEXPOSE 9090 9091 10000 12345\n\nWORKDIR /opt/pravega\n\nCOPY pravega/ /opt/pravega/\nCOPY scripts/ /opt/pravega/scripts/\n\nRUN chmod +x -R /opt/pravega/scripts/\n\nENTRYPOINT [ \"/opt/pravega/scripts/entrypoint.sh\" ]\n"
        },
        "static_files": {
            "dist/conf/logback.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\nCopyright Pravega Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-->\n<configuration scan=\"true\" scanPeriod=\"30 seconds\">\n    <appender name=\"consoleAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <charset>UTF-8</charset>\n            <Pattern>%d %-4relative [%thread] %-5level %logger{35} - %msg%n</Pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>${log.dir:-.}/${log.name:-pravega}.log</file>\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n            <!-- hourly rollover. Make sure the path matches the one in the file element or else\n             the rollover logs are placed in the working directory. -->\n            <fileNamePattern>${log.dir:-.}/%d{YYYY-MM-dd, aux}/${log.name:-pravega}_%d{yyyy-MM-dd_HH}.%i.log.gz</fileNamePattern>\n            <!-- each file should be at most 10MB, keep 720 (1 month) files worth of history, but at most 10GB -->\n            <maxFileSize>10MB</maxFileSize>\n            <maxHistory>720</maxHistory>\n            <totalSizeCap>10GB</totalSizeCap>\n        </rollingPolicy>\n\n        <encoder>\n            <charset>UTF-8</charset>\n            <pattern>%d %-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <appender name=\"Metrics\" class=\"io.pravega.shared.metrics.MetricsLogAppender\"/>\n\n    <root level=\"${log.level:-INFO}\">\n        <appender-ref ref=\"consoleAppender\"/>\n        <appender-ref ref=\"FILE\"/>\n        <appender-ref ref=\"Metrics\"/>\n    </root>\n</configuration>\n"
        }
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": [
            "scripts"
        ]
    }
}