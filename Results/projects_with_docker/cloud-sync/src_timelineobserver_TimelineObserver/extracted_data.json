{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<groupId>uk.co.bbc.rd</groupId>\n\t<artifactId>TimelineObserver</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>TimelineObserver</name>\n\t<url>http://maven.apache.org</url>\n\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>3.8.1</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3 -->\n\t\t<dependency>\n\t\t\t<groupId>org.eclipse.paho</groupId>\n\t\t\t<artifactId>org.eclipse.paho.client.mqttv3</artifactId>\n\t\t\t<version>1.2.0</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.nurkiewicz.asyncretry</groupId>\n\t\t\t<artifactId>asyncretry</artifactId>\n\t\t\t<version>0.0.7</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>net.sourceforge.argparse4j</groupId>\n\t\t\t<artifactId>argparse4j</artifactId>\n\t\t\t<version>0.8.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>redis.clients</groupId>\n\t\t\t<artifactId>jedis</artifactId>\n\t\t\t<version>2.8.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.googlecode.json-simple</groupId>\n\t\t\t<artifactId>json-simple</artifactId>\n\t\t\t<version>1.1.1</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java -->\n\t\t<dependency>\n\t\t\t<groupId>com.google.protobuf</groupId>\n\t\t\t<artifactId>protobuf-java</artifactId>\n\t\t\t<version>3.5.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-jdk14</artifactId>\n\t\t\t<version>1.7.25</version>\n\t\t</dependency>\n\t</dependencies>\n\t<build>\n\t\t<finalName>TimelineObserver</finalName>\n\t\t<plugins>\n\n\t\t\t<!-- Set a compiler level -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.7.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>1.8</source>\n\t\t\t\t\t<target>1.8</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-assembly-plugin</artifactId>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>single</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<archive>\n\t\t\t\t\t\t\t\t<manifest>\n\t\t\t\t\t\t\t\t\t<mainClass>\n\t\t\t\t\t\t\t\t\t\tuk.co.bbc.rd.TimelineObserver.App\n\t\t\t\t\t\t\t\t\t</mainClass>\n\t\t\t\t\t\t\t\t</manifest>\n\t\t\t\t\t\t\t</archive>\n\t\t\t\t\t\t\t<descriptorRefs>\n\t\t\t\t\t\t\t\t<descriptorRef>jar-with-dependencies</descriptorRef>\n\t\t\t\t\t\t\t</descriptorRefs>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n</project>\n"
        },
        "database": "Redis",
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "services:\n  mqttbroker:\n    container_name: mqttbroker\n    image: eclipse-mosquitto:1.6.15\n    ports:\n      - \"1883:1883\"\n      - \"9001:9001\"\n    volumes:\n      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf\n    labels:\n      - \"SERVICE_NAME=mqttbroker\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - mqttbroker.service\n\n  redis:\n    container_name: redis\n    image: redis:6.2.4\n    ports:\n      - \"6379:6379\"\n    labels:\n      - \"SERVICE_NAME=redis\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - redis.service\n\n  \n  wallclockservice:\n    container_name: wallclock-service\n    build: \n      context: ./wallclock-service/\n      dockerfile: wallclock-service/Dockerfile\n    image: bbcrd-wallclockservice\n    ports:\n      - \"6677:6677/udp\"\n      - \"6676:6676\"\n      - \"6675:80\"\n    labels:\n      - \"SERVICE_NAME=wallclock-service\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - wallclock-service.service\n    restart: unless-stopped\n\n  sessioncontroller:\n    container_name: sessioncontroller\n    build:\n      context: ./src\n      dockerfile: sessioncontroller/Dockerfile\n    image: bbcrd-cloudsync-sessioncontroller\n    ports:\n      - 4002:4002\n    command: npm start\n    volumes:\n      - ./src/sessioncontroller/src:/usr/src/sessioncontroller/src\n      - ./src/sessioncontroller/log:/usr/src/sessioncontroller/log\n    depends_on:\n      - mqttbroker\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=sessioncontroller\"\n    environment:\n      WALLCLOCK_SERVICE_WS_URL:  ${WALLCLOCK_SERVICE_WS_URL}\n      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - sessioncontroller.service\n    restart: unless-stopped\n   \n   synccontroller:\n    build:\n      context: ./src\n      dockerfile: synccontroller/Dockerfile\n    image: bbcrd-cloudsync-synccontroller\n    ports:\n      - 3002:3002\n    command: npm start\n    volumes:\n      - ./src/synccontroller/src:/usr/src/synccontroller/src\n      - ./src/synccontroller/log:/usr/src/synccontroller/log\n    depends_on:\n      - mqttbroker\n      - redis\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=synccontroller\"\n    environment:\n      WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}\n      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - synccontroller.service\n    restart: unless-stopped\n\n  statscontroller:\n    container_name: statscontroller\n    build:\n      context: ./src\n      dockerfile: statscontroller/Dockerfile\n    image: bbcrd-cloudsync-statscontroller\n    ports:\n      - 4001:4001\n      - 5855:5855\n    command: npm start\n    volumes:\n      - ./src/statscontroller/src:/usr/src/statscontroller/src\n      - ./src/statscontroller/log:/usr/src/statscontroller/log\n    depends_on:\n      - mqttbroker\n      - redis\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=statscontroller\"\n    environment:\n        WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}\n        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n        STATS_WRITE_INTERVAL_SECS: ${STATS_WRITE_INTERVAL_SECS}\n        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n        INFLUX_URL: \"${INFLUX_URL}\"\n        INFLUX_TOKEN: \"${INFLUX_TOKEN}\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - statscontroller.service\n    restart: unless-stopped\n\n  timelineobserver:\n    container_name: timelineobserver\n    build: src/timelineobserver/TimelineObserver/\n    image: bbcrd-cloudsync-timelineobserver \n    command: -d redis -b mqttbroker -t Sessions/+/timelines/+/state\n    depends_on:\n      - mqttbroker\n      - redis\n      - synccontroller\n    labels:\n      - \"SERVICE_NAME=timelineobserver\"\n    environment:\n        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - timelineobserver.service\n    restart: unless-stopped\n\n  synchronisedvideo:\n    container_name: synchronisedvideo\n    build: examples/synchronisedvideo\n    image: bbcrd-cloudsync-syncvideo\n    volumes:\n      - ./examples/synchronisedvideo/src:/usr/src/app/src\n      - ./examples/synchronisedvideo/logs:/usr/src/app/logs\n      - ./examples/synchronisedvideo/media:/usr/src/app/media\n      - ./examples/synchronisedvideo/config:/usr/src/app/config\n      - ./dist:/usr/src/app/dist\n    ports:\n      - 3000:3000\n    depends_on:\n      - sessioncontroller\n    labels:\n      - \"SERVICE_NAME=synchronisedvideo\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - synchronisedvideo.service\n\nnetworks:\n  cloudsync-net:\n     driver: bridge\n\n",
            "src/timelineobserver/TimelineObserver/Dockerfile": "FROM openjdk:8-jdk-alpine AS build \n# ---- \n# Install Maven \nRUN apk add --no-cache curl tar bash \nARG MAVEN_VERSION=3.9.6 \nARG USER_HOME_DIR=\"/root\" \nRUN mkdir -p /usr/share/maven && \\ \n    curl -fsSL http://apache.osuosl.org/maven/maven-3/$MAVEN_VERSION/binaries/apache-maven-$MAVEN_VERSION-bin.tar.gz | tar -xzC /usr/share/maven --strip-components=1 && \\ \n    ln -s /usr/share/maven/bin/mvn /usr/bin/mvn \nENV MAVEN_HOME /usr/share/maven \nENV MAVEN_CONFIG \"$USER_HOME_DIR/.m2\" \n\n# speed up Maven JVM a bit \nENV MAVEN_OPTS=\"-XX:+TieredCompilation -XX:TieredStopAtLevel=1\" \n# ---- \n# Install project dependencies and keep sources \n# make source folder \nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app \n\n# install maven dependency packages (keep in image) \nCOPY pom.xml /usr/src/app \nRUN mvn -T 1C install && rm -rf target \n\n# copy other source files (keep in image) \nCOPY src/ /usr/src/app/src\n\nRUN mvn -T 1C install\n\n# Base Alpine Linux based image with OpenJDK JRE only \nFROM openjdk:8-jre-alpine \nLABEL version=\"2.0.0\"\n# Create app directory\nRUN mkdir -p /usr/src/timelineobserver\nWORKDIR /usr/src/timelineobserver\n\nCOPY --from=build /usr/src/app/target/TimelineObserver-jar-with-dependencies.jar /usr/src/timelineobserver/TimelineObserver-jar-with-dependencies.jar\n \nENTRYPOINT [\"java\", \"-jar\", \"/usr/src/timelineobserver/TimelineObserver-jar-with-dependencies.jar\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "Gruntfile.js",
            "package.json",
            "server.js"
        ],
        "folders": [
            "deploy",
            "src"
        ]
    }
}