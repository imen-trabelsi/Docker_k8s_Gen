{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"synckit-cloud\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Library implementing client and server code for cloud synchronisation\",\n  \"main\": \"dist/browser/CloudSyncKit.js\",\n  \"directories\": {\n    \"example\": \"examples\"\n  },\n  \"scripts\": {\n    \"test\": \"grunt build_test\",\n    \"prepare\": \"grunt build_lib\"\n  },\n  \"author\": {\n    \"name\": \"Rajiv Ramdhany\",\n    \"email\": \"rajiv.ramdhany@bbc.co.uk\"\n  },\n  \"license\": \"UNLICENSED\",\n  \"dependencies\": {\n    \"async\": \"^2.5.0\",\n    \"bluebird\": \"^3.5.1\",\n    \"child_process\": \"^1.0.2\",\n    \"child-process-promise\": \"^2.2.1\",\n    \"command-line-args\": \"^4.0.6\",\n    \"consul\": \"^0.29.0\",\n    \"docker-host-ip\": \"^1.0.1\",\n    \"dvbcss-clocks\": \"0.0.4\",\n    \"dvbcss-protocols\": \"^0.0.4\",\n    \"events\": \"^1.1.1\",\n    \"google-protobuf\": \"^3.5.0\",\n    \"inherits\": \"^2.0.1\",\n    \"mdn-polyfills\": \"^3.6.0\",\n    \"mqtt\": \"^2.18.8\",\n    \"paho-mqtt\": \"^1.0.3\",\n    \"promise-retry\": \"^1.1.1\",\n    \"redis\": \"^2.8.0\",\n    \"redis-connection\": \"^5.4.0\",\n    \"redis-smq\": \"^1.0.20\",\n    \"redlock\": \"^3.1.2\",\n    \"save\": \"^2.3.2\",\n    \"url\": \"^0.11.0\",\n    \"url-parse\": \"^1.2.0\",\n    \"weak-map\": \"^1.0.5\",\n    \"winston\": \"^2.4.0\",\n    \"ws\": \"^7.3.0\"\n  },\n  \"devDependencies\": {\n    \"grunt\": \"^1.0.1\",\n    \"grunt-contrib-clean\": \"^1.0.0\",\n    \"grunt-contrib-jasmine\": \"^1.0.3\",\n    \"grunt-contrib-watch\": \"^1.0.0\",\n    \"grunt-jsdoc\": \"^2.1.0\",\n    \"grunt-md\": \"0.0.4\",\n    \"grunt-plantuml\": \"^0.2.3\",\n    \"grunt-ts\": \"^6.0.0-beta.16\",\n    \"grunt-typescript\": \"^0.8.0\",\n    \"grunt-webpack\": \"^1.0.14\",\n    \"jasmine-node\": \"^1.14.5\",\n    \"typescript\": \"^2.4.2\",\n    \"webpack\": \"^1.14.1\",\n    \"webpack-dev-server\": \"^3.2.1\"\n  }\n}\n"
        },
        "database": "Redis",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "services:\n  mqttbroker:\n    container_name: mqttbroker\n    image: eclipse-mosquitto:1.6.15\n    ports:\n      - \"1883:1883\"\n      - \"9001:9001\"\n    volumes:\n      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf\n    labels:\n      - \"SERVICE_NAME=mqttbroker\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - mqttbroker.service\n\n  redis:\n    container_name: redis\n    image: redis:6.2.4\n    ports:\n      - \"6379:6379\"\n    labels:\n      - \"SERVICE_NAME=redis\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - redis.service\n\n  \n  wallclockservice:\n    container_name: wallclock-service\n    build: \n      context: ./wallclock-service/\n      dockerfile: wallclock-service/Dockerfile\n    image: bbcrd-wallclockservice\n    ports:\n      - \"6677:6677/udp\"\n      - \"6676:6676\"\n      - \"6675:80\"\n    labels:\n      - \"SERVICE_NAME=wallclock-service\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - wallclock-service.service\n    restart: unless-stopped\n\n  sessioncontroller:\n    container_name: sessioncontroller\n    build:\n      context: ./src\n      dockerfile: sessioncontroller/Dockerfile\n    image: bbcrd-cloudsync-sessioncontroller\n    ports:\n      - 4002:4002\n    command: npm start\n    volumes:\n      - ./src/sessioncontroller/src:/usr/src/sessioncontroller/src\n      - ./src/sessioncontroller/log:/usr/src/sessioncontroller/log\n    depends_on:\n      - mqttbroker\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=sessioncontroller\"\n    environment:\n      WALLCLOCK_SERVICE_WS_URL:  ${WALLCLOCK_SERVICE_WS_URL}\n      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - sessioncontroller.service\n    restart: unless-stopped\n   \n   synccontroller:\n    build:\n      context: ./src\n      dockerfile: synccontroller/Dockerfile\n    image: bbcrd-cloudsync-synccontroller\n    ports:\n      - 3002:3002\n    command: npm start\n    volumes:\n      - ./src/synccontroller/src:/usr/src/synccontroller/src\n      - ./src/synccontroller/log:/usr/src/synccontroller/log\n    depends_on:\n      - mqttbroker\n      - redis\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=synccontroller\"\n    environment:\n      WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}\n      ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n      CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - synccontroller.service\n    restart: unless-stopped\n\n  statscontroller:\n    container_name: statscontroller\n    build:\n      context: ./src\n      dockerfile: statscontroller/Dockerfile\n    image: bbcrd-cloudsync-statscontroller\n    ports:\n      - 4001:4001\n      - 5855:5855\n    command: npm start\n    volumes:\n      - ./src/statscontroller/src:/usr/src/statscontroller/src\n      - ./src/statscontroller/log:/usr/src/statscontroller/log\n    depends_on:\n      - mqttbroker\n      - redis\n      - wallclockservice\n    labels:\n      - \"SERVICE_NAME=statscontroller\"\n    environment:\n        WALLCLOCK_SERVICE_WS_URL: ${WALLCLOCK_SERVICE_WS_URL}\n        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n        STATS_WRITE_INTERVAL_SECS: ${STATS_WRITE_INTERVAL_SECS}\n        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n        INFLUX_URL: \"${INFLUX_URL}\"\n        INFLUX_TOKEN: \"${INFLUX_TOKEN}\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - statscontroller.service\n    restart: unless-stopped\n\n  timelineobserver:\n    container_name: timelineobserver\n    build: src/timelineobserver/TimelineObserver/\n    image: bbcrd-cloudsync-timelineobserver \n    command: -d redis -b mqttbroker -t Sessions/+/timelines/+/state\n    depends_on:\n      - mqttbroker\n      - redis\n      - synccontroller\n    labels:\n      - \"SERVICE_NAME=timelineobserver\"\n    environment:\n        ENABLE_INFLUX_DB_WRITE: ${STATS_WRITE_FLAG}\n        CLOUD_SYNC_INSTANCE_NAME: ${INSTANCE_NAME}\n    networks:\n      cloudsync-net:\n        aliases:\n          - timelineobserver.service\n    restart: unless-stopped\n\n  synchronisedvideo:\n    container_name: synchronisedvideo\n    build: examples/synchronisedvideo\n    image: bbcrd-cloudsync-syncvideo\n    volumes:\n      - ./examples/synchronisedvideo/src:/usr/src/app/src\n      - ./examples/synchronisedvideo/logs:/usr/src/app/logs\n      - ./examples/synchronisedvideo/media:/usr/src/app/media\n      - ./examples/synchronisedvideo/config:/usr/src/app/config\n      - ./dist:/usr/src/app/dist\n    ports:\n      - 3000:3000\n    depends_on:\n      - sessioncontroller\n    labels:\n      - \"SERVICE_NAME=synchronisedvideo\"\n    networks:\n      cloudsync-net:\n        aliases:\n          - synchronisedvideo.service\n\nnetworks:\n  cloudsync-net:\n     driver: bridge\n\n",
            "secure-wallclock-service/Dockerfile": "FROM node:8\nMAINTAINER Rajiv Ramdhany \"rajiv.ramdhany@bbc.co.uk\"\n\nLABEL version=\"2.0.0\"\nLABEL description=\"This service provides time synchronisation capability to clients \\\nvia different protocol transports e.g. UDP, WebSockets.\"\n\n# update npm to v5.3.0\nRUN rm -rf /usr/local/lib/node_modules/npm \\\n  && mkdir /usr/local/lib/node_modules/npm \\\n  && curl -sL https://github.com/npm/npm/archive/v5.3.0.tar.gz | tar xz -C /usr/local/lib/node_modules/npm --strip-components=1 \\\n  && npm --version\n\n# Create app directory\nRUN mkdir -p /usr/src/wallclockservice\nWORKDIR /usr/src/wallclockservice\n\n# Install app dependencies\nCOPY package.json /usr/src/wallclockservice/\nRUN npm install\n\nRUN mkdir -p /usr/src/wallclockservice/config\nCOPY config /usr/src/wallclockservice/config/\nVOLUME [\"/usr/src/wallclockservice/config\"]\n\n# Bundle app source\nCOPY Gruntfile.js /usr/src/wallclockservice/\nRUN mkdir -p /usr/src/wallclockservice/src\nCOPY src /usr/src/wallclockservice/src/\n\nEXPOSE 80 6676 6677/udp\n\nCMD [ \"npm\", \"start\" ]"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "Gruntfile.js",
            "package.json",
            "server.js"
        ],
        "folders": [
            "deploy",
            "src"
        ]
    }
}