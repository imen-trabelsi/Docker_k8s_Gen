{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "requirements.txt": "requests\ntqdm\npyyaml"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "images/k6/Dockerfile": "FROM docker.io/golang:1.19-alpine as builder\nRUN CGO_ENABLED=0 go install go.k6.io/xk6/cmd/xk6@latest\nRUN xk6 build --with github.com/grafana/xk6-output-prometheus-remote@latest \n\n\nFROM docker.io/alpine:3.16\nRUN apk add --no-cache ca-certificates && \\\n    adduser -D -u 12345 -g 12345 k6\nCOPY --from=builder /go/k6 /usr/bin/k6\n\nUSER 12345\nWORKDIR /home/k6\nENTRYPOINT [\"k6\"]\n",
            ".circleci/config.yml": "version: 2.1\n\norbs:\n  docker: circleci/docker@2.1.4\n  keeper: gravitee-io/keeper@0.6.2\n  aquasec: gravitee-io/aquasec@1.0.4\n\ncommands:\n  prepare-docker-context:\n    steps:\n      - setup_remote_docker\n      - keeper/env-export:\n          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login\n          var-name: DOCKER_LOGIN\n      - keeper/env-export:\n          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password\n          var-name: DOCKER_PASSWORD\n      - docker/check\n\njobs:\n  build-and-push-java:\n    executor: docker/docker\n    parameters:\n      alpine_version:\n        type: string\n        default: \"\"\n    steps:\n      - checkout\n      - prepare-docker-context\n      - when :\n          condition: << parameters.alpine_version >>\n          steps:\n            - run:\n                command: |\n                  docker context create tls-env\n                  docker buildx create tls-env --use\n                  docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg ALPINE_VERSION=<< parameters.alpine_version >> -t graviteeio/java:17-alpine-<< parameters.alpine_version >> -f images/java/Dockerfile images/java/\n      - unless:\n          condition: << parameters.alpine_version >>\n          steps:\n            - run:\n                command: |\n                  docker context create tls-env\n                  docker buildx create tls-env --use\n                  docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:17 -f images/java/Dockerfile images/java/\n\n  build-and-push-java21:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:21 -f images/java21/Dockerfile images/java21/\n\n  build-and-push-nginx:\n    executor: docker/docker\n    parameters:\n      version:\n        type: string\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg NGINX_VERSION=<< parameters.version >> -t graviteeio/nginx:<< parameters.version >> -f images/nginx/Dockerfile images/nginx/        \n\n  build-and-push-git-http-server:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - docker/build:\n          docker-context: images/git-http-server\n          image: graviteeio/git-http-server\n          path: images/git-http-server\n          tag: '1.1.0'\n      - docker/push:\n          digest-path: /tmp/digest.txt\n          image: graviteeio/git-http-server\n          tag: '1.1.0'\n      - run:\n          command: |\n            echo \"Digest git-http-server image is: $(</tmp/digest.txt)\"\n\n  build-and-push-k6:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/k6:latest -f images/k6/Dockerfile images/k6/\n\n  add-docker-images-in-aqua:\n    parameters:\n      docker-image-name:\n        type: string\n      version:\n        type: string\n    environment:\n      DOCKER_IMAGE_NAME: << parameters.docker-image-name >>\n      VERSION: << parameters.version >>\n    docker:\n      - image: cimg/base:stable\n    resource_class: small\n    steps:\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/API Key\n          var-name: AQUA_KEY\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/Secret\n          var-name: AQUA_SECRET\n      - keeper/env-export:\n          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/login\n          var-name: AQUA_USERNAME\n      - keeper/env-export:\n          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/password\n          var-name: AQUA_PASSWORD\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/ScannerToken\n          var-name: SCANNER_TOKEN\n      - keeper/env-export:\n          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password\n          var-name: GITHUB_TOKEN\n      - aquasec/install_billy\n      - aquasec/pull_aqua_scanner_image\n      - prepare-docker-context\n      - aquasec/register_artifact:\n          artifact_to_register: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>\n          debug: true\n      - aquasec/scan_docker_image:\n          docker_image_to_scan: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>\n          scanner_url: https://82fb8f75da.cloud.aquasec.com\n\nworkflows:\n  run_every_week:\n    when:\n      and:\n        - equal: [ master, << pipeline.git.branch >> ]\n    jobs:\n      - build-and-push-java:\n          name: build java with alpine 3.17\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.17\n          docker-image-name: java\n          version: \"17\"\n      - build-and-push-java:\n          name: build java with alpine 3.18\n          context: cicd-orchestrator\n          alpine_version: \"3.18\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.18\n          docker-image-name: java\n          version: \"17-alpine-3.18\"\n      - build-and-push-java:\n          name: build java with alpine 3.20\n          context: cicd-orchestrator\n          alpine_version: \"3.20\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.20\n          docker-image-name: java\n          version: \"17-alpine-3.20\"\n      - build-and-push-java21:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-java21\n          docker-image-name: java\n          version: \"21\"\n      - build-and-push-nginx:\n          name: build nginx 1.26.3\n          context: cicd-orchestrator\n          version: \"1.26.3\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build nginx 1.26.3\n          docker-image-name: nginx\n          version: \"1.26.3\"\n      - build-and-push-nginx:\n          name: build nginx 1.27.4\n          context: cicd-orchestrator\n          version: \"1.27.4\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build nginx 1.27.4\n          docker-image-name: nginx\n          version: \"1.27.4\"\n      - build-and-push-git-http-server:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-git-http-server\n          docker-image-name: git-http-server\n          version: \"1.1.0\"\n      - build-and-push-k6:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-k6\n          docker-image-name: k6\n          version: \"latest\"\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}