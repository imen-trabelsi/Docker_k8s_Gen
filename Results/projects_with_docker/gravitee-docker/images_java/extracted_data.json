{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "requirements.txt": "requests\ntqdm\npyyaml"
        },
        "database": null,
        "build_system": "pip",
        "config_files": {
            "images/java/Dockerfile": "#-------------------------------------------------------------------------------\n# Copyright (C) 2015-2022 The Gravitee team (http://gravitee.io)\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#            http://www.apache.org/licenses/LICENSE-2.0\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n#-------------------------------------------------------------------------------\nARG ALPINE_VERSION=3.17\nFROM alpine:${ALPINE_VERSION}\n\nENV JAVA_HOME=/opt/java/openjdk\nENV PATH=$JAVA_HOME/bin:$PATH\n\n# Default to UTF-8 file.encoding\nENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'\n\n# fontconfig and ttf-dejavu added to support serverside image generation by Java programs\nRUN apk -U upgrade \\\n  && apk add --no-cache fontconfig libretls musl-locales musl-locales-lang ttf-dejavu tzdata zlib openssl libc6-compat curl htop jattach libstdc++ libgcc curl \\\n  && rm -rf /var/cache/apk/*\n\n\n# Linux adoptium image come from: https://github.com/adoptium/temurin17-binaries/releases > \"OpenJDK17U-jre_x64_alpine-linux_hotspot\"\n# bellsoft image come from: https://bell-sw.com/pages/downloads/#jdk-17-lts > \"Alpine Linux\" > \"ARM\" > \"Standard JRE\" > \"Tar GZ\"\nRUN set -eux; \\\n  ARCH=\"$(apk --print-arch)\"; \\\n  case \"${ARCH}\" in \\\n    amd64|x86_64) \\\n      ESUM='7a2df4e2f86eca649af1e17d990ab8e354cb6dee389606025b9d05f75623c388'; \\\n      BINARY_URL='https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.13%2B11/OpenJDK17U-jre_x64_alpine-linux_hotspot_17.0.13_11.tar.gz'; \\\n    ;; \\\n    aarch64) \\\n      ESUM='b4e4f3bd2e6db47a633fd854131e09e4e2750bdd51b21e1212f69aa1c135ebae'; \\\n      BINARY_URL='https://download.bell-sw.com/java/17.0.13+12/bellsoft-jdk17.0.13+12-linux-aarch64-musl.tar.gz'; \\\n    ;; \\\n    *) \\\n    echo \"Unsupported arch: ${ARCH}\"; \\\n    exit 1; \\\n    ;; \\\n  esac; \\\n  curl -L -o /tmp/openjdk.tar.gz ${BINARY_URL}; \\\n  echo \"${ESUM} */tmp/openjdk.tar.gz\" | sha256sum -c -; \\\n  mkdir -p \"$JAVA_HOME\"; \\\n  tar --extract \\\n      --file /tmp/openjdk.tar.gz \\\n      --directory \"$JAVA_HOME\" \\\n      --strip-components 1 \\\n      --no-same-owner \\\n  ; \\\n  rm /tmp/openjdk.tar.gz;\n\nRUN echo Verifying install ... \\\n  && echo java --version && java --version \\\n  && echo Complete.\n\n# Define default command.\nCMD [\"java\", \"-version\"]\n",
            ".circleci/config.yml": "version: 2.1\n\norbs:\n  docker: circleci/docker@2.1.4\n  keeper: gravitee-io/keeper@0.6.2\n  aquasec: gravitee-io/aquasec@1.0.4\n\ncommands:\n  prepare-docker-context:\n    steps:\n      - setup_remote_docker\n      - keeper/env-export:\n          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login\n          var-name: DOCKER_LOGIN\n      - keeper/env-export:\n          secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password\n          var-name: DOCKER_PASSWORD\n      - docker/check\n\njobs:\n  build-and-push-java:\n    executor: docker/docker\n    parameters:\n      alpine_version:\n        type: string\n        default: \"\"\n    steps:\n      - checkout\n      - prepare-docker-context\n      - when :\n          condition: << parameters.alpine_version >>\n          steps:\n            - run:\n                command: |\n                  docker context create tls-env\n                  docker buildx create tls-env --use\n                  docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg ALPINE_VERSION=<< parameters.alpine_version >> -t graviteeio/java:17-alpine-<< parameters.alpine_version >> -f images/java/Dockerfile images/java/\n      - unless:\n          condition: << parameters.alpine_version >>\n          steps:\n            - run:\n                command: |\n                  docker context create tls-env\n                  docker buildx create tls-env --use\n                  docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:17 -f images/java/Dockerfile images/java/\n\n  build-and-push-java21:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/java:21 -f images/java21/Dockerfile images/java21/\n\n  build-and-push-nginx:\n    executor: docker/docker\n    parameters:\n      version:\n        type: string\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 --build-arg NGINX_VERSION=<< parameters.version >> -t graviteeio/nginx:<< parameters.version >> -f images/nginx/Dockerfile images/nginx/        \n\n  build-and-push-git-http-server:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - docker/build:\n          docker-context: images/git-http-server\n          image: graviteeio/git-http-server\n          path: images/git-http-server\n          tag: '1.1.0'\n      - docker/push:\n          digest-path: /tmp/digest.txt\n          image: graviteeio/git-http-server\n          tag: '1.1.0'\n      - run:\n          command: |\n            echo \"Digest git-http-server image is: $(</tmp/digest.txt)\"\n\n  build-and-push-k6:\n    executor: docker/docker\n    steps:\n      - checkout\n      - prepare-docker-context\n      - run:\n          command: |\n            docker context create tls-env\n            docker buildx create tls-env --use\n            docker buildx build --push --platform=linux/arm64,linux/amd64 -t graviteeio/k6:latest -f images/k6/Dockerfile images/k6/\n\n  add-docker-images-in-aqua:\n    parameters:\n      docker-image-name:\n        type: string\n      version:\n        type: string\n    environment:\n      DOCKER_IMAGE_NAME: << parameters.docker-image-name >>\n      VERSION: << parameters.version >>\n    docker:\n      - image: cimg/base:stable\n    resource_class: small\n    steps:\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/API Key\n          var-name: AQUA_KEY\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/Secret\n          var-name: AQUA_SECRET\n      - keeper/env-export:\n          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/login\n          var-name: AQUA_USERNAME\n      - keeper/env-export:\n          secret-url: keeper://LYg-wdlM5UDzSqFFH6Kyig/field/password\n          var-name: AQUA_PASSWORD\n      - keeper/env-export:\n          secret-url: keeper://QeHHkvALPob4pgs1hMd9Gw/custom_field/ScannerToken\n          var-name: SCANNER_TOKEN\n      - keeper/env-export:\n          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password\n          var-name: GITHUB_TOKEN\n      - aquasec/install_billy\n      - aquasec/pull_aqua_scanner_image\n      - prepare-docker-context\n      - aquasec/register_artifact:\n          artifact_to_register: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>\n          debug: true\n      - aquasec/scan_docker_image:\n          docker_image_to_scan: graviteeio/<< parameters.docker-image-name >>:<< parameters.version >>\n          scanner_url: https://82fb8f75da.cloud.aquasec.com\n\nworkflows:\n  run_every_week:\n    when:\n      and:\n        - equal: [ master, << pipeline.git.branch >> ]\n    jobs:\n      - build-and-push-java:\n          name: build java with alpine 3.17\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.17\n          docker-image-name: java\n          version: \"17\"\n      - build-and-push-java:\n          name: build java with alpine 3.18\n          context: cicd-orchestrator\n          alpine_version: \"3.18\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.18\n          docker-image-name: java\n          version: \"17-alpine-3.18\"\n      - build-and-push-java:\n          name: build java with alpine 3.20\n          context: cicd-orchestrator\n          alpine_version: \"3.20\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build java with alpine 3.20\n          docker-image-name: java\n          version: \"17-alpine-3.20\"\n      - build-and-push-java21:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-java21\n          docker-image-name: java\n          version: \"21\"\n      - build-and-push-nginx:\n          name: build nginx 1.26.3\n          context: cicd-orchestrator\n          version: \"1.26.3\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build nginx 1.26.3\n          docker-image-name: nginx\n          version: \"1.26.3\"\n      - build-and-push-nginx:\n          name: build nginx 1.27.4\n          context: cicd-orchestrator\n          version: \"1.27.4\"\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build nginx 1.27.4\n          docker-image-name: nginx\n          version: \"1.27.4\"\n      - build-and-push-git-http-server:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-git-http-server\n          docker-image-name: git-http-server\n          version: \"1.1.0\"\n      - build-and-push-k6:\n          context: cicd-orchestrator\n      - add-docker-images-in-aqua:\n          context: cicd-orchestrator\n          requires:\n            - build-and-push-k6\n          docker-image-name: k6\n          version: \"latest\"\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": []
    }
}