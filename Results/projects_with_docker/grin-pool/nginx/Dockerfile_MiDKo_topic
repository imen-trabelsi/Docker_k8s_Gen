# Use the Rust build system
FROM rust:1.46 as builder

# Create a new empty shell project
RUN USER=root cargo new --bin microservice
WORKDIR /microservice

# Copy over your 'Cargo.toml'
COPY ./Cargo.toml ./Cargo.toml

# This build step will cache your dependencies
RUN cargo build --release
RUN rm src/*.rs

# Copy your source code
COPY ./src ./src

# Build for release
RUN rm ./target/release/deps/microservice*
RUN cargo build --release

# Start a new stage from nginx image
FROM nginx:1.15.8

# Install dependencies and clean up
RUN set -ex && \
    apt-get update && \
    apt-get -q --no-install-recommends --yes install\
    gpg git dirmngr curl ruby procps net-tools htop vim && \
    apt-get update && apt-get -q --no-install-recommends --yes install python-certbot-nginx && \
    chmod a+x /entrypoint.sh && \
    update-ca-certificates --fresh && \

# Copy files
COPY src/entrypoint.sh /entrypoint.sh
COPY src/renew_certs.sh /renew_certs.sh
COPY src/nginx.conf /etc/nginx/nginx.conf
COPY src/dhparam-2048.pem /etc/ssl/certs/dhparam-2048.pem
COPY src/proxy_params /etc/nginx/proxy_params
COPY src/cors_wide_open /etc/nginx/cors_wide_open
COPY src/nginx.conf /etc/nginx/nginx.conf
COPY src/stratum_proxy_params  /etc/nginx/stratum_proxy_params
COPY src/renew_certs.sh /
COPY src/mwfloopool.http.conf /mwfloopool.com/mwfloopool.http.conf
COPY src/mwfloopool.stream.conf /mwfloopool.com/mwfloopool.stream.conf

# Expose necessary ports
EXPOSE 80 443 3333

# Run the binary
CMD ["/usr/local/bin/microservice"]
