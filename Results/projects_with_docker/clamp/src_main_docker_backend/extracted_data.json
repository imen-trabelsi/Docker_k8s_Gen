{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n  ============LICENSE_START=======================================================\n  ONAP CLAMP\n  ================================================================================\n  Copyright (C) 2017-2019 AT&T Intellectual Property. All rights\n                              reserved.\n  ================================================================================\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n  ============LICENSE_END============================================\n  ===================================================================\n-->\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>org.onap.clamp</groupId>\n\t<artifactId>clds</artifactId>\n\t<version>5.1.5-SNAPSHOT</version>\n\t<name>clamp</name>\n\n\n\t<parent>\n\t\t<groupId>org.onap.oparent</groupId>\n\t\t<artifactId>oparent</artifactId>\n\t\t<version>2.1.0</version>\n\t</parent>\n\n\t<description>\n\t       This is the MAVEN project that builds everything for ONAP CLAMP.\n\t       Docker engine is normally requires to perfom all possible tasks (including integration tests)\n\n           It can build:\n           - The ONAP CLAMP JAR that contains CLAMP back-end code.\n           - The DOCKER images for:\n                * CLAMP backend (Java Spring)\n                * CLAMP frontend (Javscript React)\n\n           It can test:\n            - The CLAMP backend, JAVA unit testing\n            - The CLAMP backend, JAVA integration tests (with Spring + docker mariadb database + docker policy/dcae emulator written in python)\n            - The CLAMP frontend, Javascrip tests (NodeJS(NPM) + JEST + Enzyme fro React)\n\n           The test coverage for dev's can be found after a \"clean install\" build in:\n            - Clamp backend: target/jacoco-dev.exec (unit tests + integration tests merged)\n                or separately target/coverage-reports/jacoco.exec and target/coverage-reports/jacoco-it.exec\n            - Clamp frontend: target/ui-react/coverage\n\n           Useful mvn commands:\n            - mvn clean install: Build Clamp backend JAR + unit tests + integration tests + NPM tests (+coverage for all)\n            - mvn clean install -DskipITs=true: Build Clamp backend JAR + unit tests + NPM tests (+coverage for all), it does not require a DOCKER engine\n            - mvn clean install -DskipTests -P docker: Build Clamp backend JAR + all docker images\n\n           To start CLAMP (Build it before):\n            - Use docker-compose file in ./extra/docker/clamp/docker-compose.yml\n            - Use the script located in ./extra/bin/start-backend.sh + start-frontend.sh\n            - Use your IDE to use the Jar or start NVM/NPM\n\n        </description>\n\n\t<properties>\n\t\t<maven.build.timestamp.format>yyyyMMdd'T'HHmmss'Z'</maven.build.timestamp.format>\n\t\t<clamp.project.version>${project.version}</clamp.project.version>\n\t\t<clamp.build.timestamp>${maven.build.timestamp}</clamp.build.timestamp>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\n\t\t<eelf.core.version>1.0.0</eelf.core.version>\n\t\t<camel.version>2.25.2</camel.version>\n\t\t<springboot.version>2.2.10.RELEASE</springboot.version>\n\n\t\t<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>\n\t\t<sonar.surefire.reportsPath>${project.build.directory}/surefire-reports</sonar.surefire.reportsPath>\n\t\t<sonar.coverage.jacoco.xmlReportPaths>${project.build.directory}/jacoco-html-xml-reports/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>\n\t\t<sonar.jacoco.reportMissing.force.zero>true</sonar.jacoco.reportMissing.force.zero>\n\t\t<sonar.projectVersion>${project.version}</sonar.projectVersion>\n\t\t<sonar.log.level>DEBUG</sonar.log.level>\n\t\t<sonar.nodejs.executable>${project.build.directory}/${ui.react.src}/node/node</sonar.nodejs.executable>\n\t\t<sonar.verbose>true</sonar.verbose>\n\t\t<sonar.sources>src/main,${project.build.directory}/${ui.react.src}/src</sonar.sources>\n\t\t<sonar.exclusions>src/main/resources/**</sonar.exclusions>\n\t\t<sonar.scm.exclusions.disabled>true</sonar.scm.exclusions.disabled>\n\t\t<sonar.javascript.lcov.reportPaths>${project.build.directory}/${ui.react.src}/coverage/lcov.info</sonar.javascript.lcov.reportPaths>\n\t\t<sonar.coverage.exclusions>src/main/resources/**,target/ui-react/src/**/*.test.js,target/ui-react/src/setupTests.js</sonar.coverage.exclusions>\n\t\t<docker.push.registry>localhost:5000</docker.push.registry>\n\t\t<docker.pull.registry>nexus3.onap.org:10001</docker.pull.registry>\n\t\t<docker.skip.build>true</docker.skip.build>\n\t\t<docker.skip.push>true</docker.skip.push>\n\t\t<docker.skip.tag>true</docker.skip.tag>\n\t\t<skip.staging.artifacts>false</skip.staging.artifacts>\n\t\t<python.http.proxy.param />\n\t\t<tomcat.version>9.0.37</tomcat.version>\n\t\t<ui.react.src>ui-react</ui.react.src>\n\t\t<ui.react.lib.src>ui-react-lib</ui.react.lib.src>\n\t\t<npm.publish.url>https://nexus3.onap.org/repository/npm.snapshot/</npm.publish.url>\n\t</properties>\n\n\t<profiles>\n\t\t<!-- BEGIN: NOT USABLE profiles, those are defined when specific flags are enabled -->\n\t\t<profile>\n\t\t\t<id>without-test</id>\n\t\t\t<activation>\n\t\t\t\t<property>\n\t\t\t\t\t<name>maven.test.skip</name>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</property>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<docker.skip.run>true</docker.skip.run>\n\t\t\t\t<docker.skip>true</docker.skip>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>without-IT-only</id>\n\t\t\t<activation>\n\t\t\t\t<property>\n\t\t\t\t\t<name>skipITs</name>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</property>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<docker.skip.run>true</docker.skip.run>\n\t\t\t\t<docker.skip>true</docker.skip>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>without-IT-only2</id>\n\t\t\t<activation>\n\t\t\t\t<property>\n\t\t\t\t\t<name>skipTests</name>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</property>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<docker.skip.run>true</docker.skip.run>\n\t\t\t\t<docker.skip>true</docker.skip>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<!-- END: NOT USABLE profiles, those are defined when specific flags are enabled -->\n\t\t<profile>\n\t\t\t<id>docker</id>\n\t\t\t<properties>\n\t\t\t\t<skip.staging.artifacts>true</skip.staging.artifacts>\n\t\t\t\t<docker.skip.build>false</docker.skip.build>\n\t\t\t\t<docker.skip.tag>false</docker.skip.tag>\n\t\t\t\t<docker.skip.push>false</docker.skip.push>\n\t\t\t\t<docker.skip>false</docker.skip>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n\n\t<distributionManagement>\n\t\t<repository>\n\t\t\t<id>ecomp-releases</id>\n\t\t\t<name>Clamp Release Repository</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/releases/</url>\n\t\t</repository>\n\t\t<snapshotRepository>\n\t\t\t<id>ecomp-snapshots</id>\n\t\t\t<name>Clamp Snapshot Repository</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/snapshots/</url>\n\t\t</snapshotRepository>\n\t\t<site>\n\t\t\t<id>ecomp-site</id>\n\t\t\t<url>dav:https://nexus.onap.org/content/sites/site/org/onap/clamp/${project.version}</url>\n\t\t</site>\n\t</distributionManagement>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>onap-public</id>\n\t\t\t<name>onap-public</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/public/</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>ecomp-releases</id>\n\t\t\t<name>ONAP Release Repository</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/releases/</url>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>ecomp-staging</id>\n\t\t\t<name>ONAP Staging Repository</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/staging/</url>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>ecomp-snapshots</id>\n\t\t\t<name>ONAP Snapshot Repository</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/snapshots/</url>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</snapshots>\n\t\t\t<releases>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</releases>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>central</id>\n\t\t\t<url>http://repo1.maven.org/maven2/</url>\n\t\t</repository>\n\t</repositories>\n\t<pluginRepositories>\n\t\t<pluginRepository>\n\t\t\t<id>onap-public</id>\n\t\t\t<name>onap-public</name>\n\t\t\t<url>https://nexus.onap.org/content/repositories/public/</url>\n\t\t\t<releases>\n\t\t\t\t<enabled>true</enabled>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</snapshots>\n\t\t</pluginRepository>\n\t\t<pluginRepository>\n\t\t\t<id>central</id>\n\t\t\t<url>http://repo1.maven.org/maven2/</url>\n\t\t</pluginRepository>\n\t</pluginRepositories>\n\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<!-- Spring Boot BOM -->\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-dependencies</artifactId>\n\t\t\t\t<version>${springboot.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t\t<!-- Camel BOM -->\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t\t<artifactId>camel-spring-boot-dependencies</artifactId>\n\t\t\t\t<version>${camel.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>com.att.eelf</groupId>\n\t\t\t<artifactId>eelf-core</artifactId>\n\t\t\t<version>${eelf.core.version}</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.powermock</groupId>\n\t\t\t\t\t<artifactId>powermock-module-junit4</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.powermock</groupId>\n\t\t\t\t\t<artifactId>powermock-api-mockito</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.codehaus.janino</groupId>\n\t\t\t<artifactId>janino</artifactId>\n\t\t\t<version>3.0.8</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-core</artifactId>\n\t\t\t<version>${tomcat.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-el</artifactId>\n\t\t\t<version>${tomcat.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-websocket</artifactId>\n\t\t\t<version>${tomcat.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat</groupId>\n\t\t\t<artifactId>tomcat-annotations-api</artifactId>\n\t\t\t<version>${tomcat.version}</version>\n\t\t</dependency>\n\t\t<!-- For CAMEL -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-http4-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-spring-boot-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-jaxb-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-servlet-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-gson-starter</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.camel</groupId>\n\t\t\t<artifactId>camel-swagger-java-starter</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>javax.ws.rs</groupId>\n\t\t\t\t\t<artifactId>jsr311-api</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t\t\t<artifactId>slf4j-ext</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<!-- Spring famework -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t\t<artifactId>spring-boot-starter-json</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-tomcat</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-jdbc</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-security</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-autoconfigure</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.vaadin.external.google</groupId>\n\t\t\t\t\t<artifactId>android-json</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<!-- Others dependencies -->\n\t\t<!-- Jaxws is required for AAF -->\n\t\t<dependency>\n\t\t\t<groupId>javax.xml.ws</groupId>\n\t\t\t<artifactId>jaxws-api</artifactId>\n\t\t\t<version>2.3.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.onap.aaf.authz</groupId>\n\t\t\t<artifactId>aaf-cadi-aaf</artifactId>\n\t\t\t<version>2.1.15</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t\t\t<artifactId>servlet-api</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>log4j</groupId>\n\t\t\t\t\t<artifactId>log4j</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t<artifactId>logback-core</artifactId>\n\t\t\t<version>1.2.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>ch.qos.logback</groupId>\n\t\t\t<artifactId>logback-classic</artifactId>\n\t\t\t<version>1.2.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>commons-io</groupId>\n\t\t\t<artifactId>commons-io</artifactId>\n\t\t\t<version>2.6</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.googlecode.json-simple</groupId>\n\t\t\t<artifactId>json-simple</artifactId>\n\t\t\t<version>1.1.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-vfs2</artifactId>\n\t\t\t<version>2.2</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.slf4j</groupId>\n\t\t\t<artifactId>slf4j-api</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.transaction</groupId>\n\t\t\t<artifactId>jta</artifactId>\n\t\t\t<version>1.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.persistence</groupId>\n\t\t\t<artifactId>persistence-api</artifactId>\n\t\t\t<version>1.0.2</version>\n\t\t</dependency>\n\t\t<!-- Other dependencies to fix nexus IQ reported vulnerabilities -->\n\t\t<dependency>\n\t\t\t<groupId>commons-codec</groupId>\n\t\t\t<artifactId>commons-codec</artifactId>\n\t\t\t<version>1.14</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t<artifactId>spring-security-web</artifactId>\n\t\t\t<version>5.2.3.RELEASE</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.codehaus.plexus</groupId>\n\t\t\t<artifactId>plexus-utils</artifactId>\n\t\t\t<version>3.0.24</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.jboss.spec.javax.ws.rs</groupId>\n\t\t\t<artifactId>jboss-jaxrs-api_2.0_spec</artifactId>\n\t\t\t<version>1.0.1.Final</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.google.guava</groupId>\n\t\t\t<artifactId>guava</artifactId>\n\t\t\t<version>27.0-jre</version>\n\t\t</dependency>\n\n\t\t<!-- Remove the MYSQL connector and replace it by Mariadb -->\n\t\t<dependency>\n\t\t\t<groupId>org.mariadb.jdbc</groupId>\n\t\t\t<artifactId>mariadb-java-client</artifactId>\n\t\t\t<version>2.6.2</version>\n\t\t</dependency>\n\t\t<!-- For SDC Controller -->\n\t\t<dependency>\n\t\t\t<groupId>org.onap.sdc.sdc-distribution-client</groupId>\n\t\t\t<artifactId>sdc-distribution-client</artifactId>\n\t\t\t<version>1.4.1</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.onap.sdc.sdc-tosca</groupId>\n\t\t\t<artifactId>sdc-tosca</artifactId>\n\t\t\t<version>1.5.1</version>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.yaml</groupId>\n\t\t\t<artifactId>snakeyaml</artifactId>\n\t\t\t<version>1.26</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.dom4j</groupId>\n\t\t\t<artifactId>dom4j</artifactId>\n\t\t\t<version>2.1.3</version>\n\t\t</dependency>\n\n\t\t<!-- TESTING -->\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.assertj</groupId>\n\t\t\t<artifactId>assertj-core</artifactId>\n\t\t\t<version>3.10.0</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mockito</groupId>\n\t\t\t<artifactId>mockito-core</artifactId>\n\t\t\t<version>2.28.2</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-api-mockito2</artifactId>\n\t\t\t<version>2.0.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.powermock</groupId>\n\t\t\t<artifactId>powermock-module-junit4</artifactId>\n\t\t\t<version>2.0.4</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.github.docker-java</groupId>\n\t\t\t<artifactId>docker-java-core</artifactId>\n\t\t\t<version>3.2.1</version>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.fasterxml.jackson.core</groupId>\n\t\t\t\t\t<artifactId>jackson-databind</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.github.docker-java</groupId>\n\t\t\t<artifactId>docker-java</artifactId>\n\t\t\t<version>3.2.1</version>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<finalName>clamp</finalName>\n\n\t\t<testResources>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>clds/aaf/**</exclude>\n\t\t\t\t</excludes>\n\t\t\t</testResource>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<filtering>false</filtering>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>clds/aaf/**</include>\n\t\t\t\t</includes>\n\t\t\t</testResource>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources</directory>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>**/*.jks</exclude>\n\t\t\t\t\t<exclude>**/*.csar</exclude>\n\t\t\t\t</excludes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources/https</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**.jks</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>false</filtering>\n\t\t\t\t<targetPath>https</targetPath>\n\t\t\t</testResource>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources/example/sdc</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**.csar</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>false</filtering>\n\t\t\t\t<targetPath>example/sdc</targetPath>\n\t\t\t</testResource>\n\t\t</testResources>\n\t\t<resources>\n\t\t\t<!-- For AAF folder maven should not try to filter Keystores/Truststores ... Otherwise\n\t\t\t\tthey will be broken and unreadable -->\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>clds/aaf/**</exclude>\n\t\t\t\t</excludes>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<filtering>false</filtering>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>clds/aaf/**</include>\n\t\t\t\t</includes>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>${ui.react.src}</directory>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>node_modules</exclude>\n\t\t\t\t</excludes>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>src/**</include>\n\t\t\t\t\t<include>public/**</include>\n\t\t\t\t\t<include>package.json</include>\n\t\t\t\t\t<include>package-lock.json</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t\t<targetPath>${project.build.directory}/${ui.react.src}</targetPath>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>${ui.react.src}</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>src/**</include>\n\t\t\t\t</includes>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>**/__snapshots__/**</exclude>\n\t\t\t\t\t<exclude>**/**.test.js</exclude>\n\t\t\t\t</excludes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t\t<targetPath>${project.build.directory}/${ui.react.lib.src}</targetPath>\n\t\t\t</resource>\n\t\t\t<resource>\n\t\t\t\t<directory>${ui.react.lib.src}</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>**</include>\n\t\t\t\t</includes>\n\t\t\t\t<excludes>\n\t\t\t\t\t<exclude>node_modules/**</exclude>\n\t\t\t\t\t<exclude>package-lock.json</exclude>\n\t\t\t\t</excludes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t\t<targetPath>${project.build.directory}/${ui.react.lib.src}</targetPath>\n\t\t\t</resource>\n\t\t</resources>\n\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t\t<groupId>de.jpdigital</groupId>\n\t\t\t\t\t<artifactId>hibernate52-ddl-maven-plugin</artifactId>\n\t\t\t\t\t<version>2.2.0</version>\n\t\t\t\t<dependencies>\n\t\t\t\t\t<dependency>\n\t\t\t\t\t\t<groupId>javax.xml.bind</groupId>\n\t\t\t\t\t\t<artifactId>jaxb-api</artifactId>\n\t\t\t\t\t\t<version>2.3.0</version>\n\t\t\t\t\t</dependency>\n\t\t\t\t</dependencies>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<phase>process-classes</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>gen-ddl</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<packages>\n\t\t\t\t\t\t\t\t<param>org.onap.clamp</param>\n\t\t\t\t\t\t\t</packages>\n\t\t\t\t\t\t\t<dialects>\n\t\t\t\t\t\t\t\t<param>MARIADB53</param>\n\t\t\t\t\t\t\t</dialects>\n\t\t\t\t\t\t\t<outputDirectory>${project.basedir}/extra/sql/bulkload/</outputDirectory>\n\t\t\t\t\t\t\t<outputFileNameSuffix>create-tables</outputFileNameSuffix>\n\t\t\t\t\t\t\t<!-- <createDropStatements>true</createDropStatements> -->\n\t\t\t\t\t\t\t<omitDialectFromFileName>true</omitDialectFromFileName>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\n\t\t\t</plugin>\n\t\t\t<!-- Read the swagger.json file and the definition from SwaggerConfig.java; generate\n\t\t\t\ta list of .adoc files containing the APIs info in more structured way -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>io.github.swagger2markup</groupId>\n\t\t\t\t<artifactId>swagger2markup-maven-plugin</artifactId>\n\t\t\t\t<version>1.3.3</version>\n\t\t\t\t<dependencies>\n\t\t\t\t\t<dependency>\n\t\t\t\t\t\t<groupId>io.github.swagger2markup</groupId>\n\t\t\t\t\t\t<artifactId>swagger2markup-import-files-ext</artifactId>\n\t\t\t\t\t\t<version>1.3.3</version>\n\t\t\t\t\t</dependency>\n\t\t\t\t\t<dependency>\n\t\t\t\t\t\t<groupId>io.github.swagger2markup</groupId>\n\t\t\t\t\t\t<artifactId>swagger2markup-spring-restdocs-ext</artifactId>\n\t\t\t\t\t\t<version>1.3.3</version>\n\t\t\t\t\t</dependency>\n\t\t\t\t</dependencies>\n\t\t\t\t<configuration>\n\t\t\t\t\t<swaggerInput>${project.basedir}/docs/swagger/swagger.json</swaggerInput>\n\t\t\t\t\t<outputDir>${project.build.directory}/asciidoc/generated</outputDir>\n\t\t\t\t\t<config>\n\t\t\t\t\t\t<swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>\n\t\t\t\t\t</config>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>convertSwagger2markup</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\n\t\t\t<!-- Run the generated asciidoc through Asciidoctor to generate other documentation\n\t\t\t\ttypes, such as PDFs or HTML5 -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.asciidoctor</groupId>\n\t\t\t\t<artifactId>asciidoctor-maven-plugin</artifactId>\n\t\t\t\t<version>1.5.7.1</version>\n\t\t\t\t<dependencies>\n\t\t\t\t\t<dependency>\n\t\t\t\t\t\t<groupId>org.asciidoctor</groupId>\n\t\t\t\t\t\t<artifactId>asciidoctorj-pdf</artifactId>\n\t\t\t\t\t\t<version>1.5.0-alpha.10.1</version>\n\t\t\t\t\t</dependency>\n\t\t\t\t</dependencies>\n\t\t\t\t<configuration>\n\t\t\t\t\t<sourceDirectory>${project.basedir}/src/main/resources/asciidoc</sourceDirectory>\n\t\t\t\t\t<sourceDocumentName>swagger.adoc</sourceDocumentName>\n\t\t\t\t\t<attributes>\n\t\t\t\t\t\t<doctype>book</doctype>\n\t\t\t\t\t\t<toc>left</toc>\n\t\t\t\t\t\t<toclevels>3</toclevels>\n\t\t\t\t\t\t<numbered />\n\t\t\t\t\t\t<hardbreaks />\n\t\t\t\t\t\t<sectlinks />\n\t\t\t\t\t\t<sectanchors />\n\t\t\t\t\t\t<generated>${project.build.directory}/asciidoc/generated</generated>\n\t\t\t\t\t</attributes>\n\t\t\t\t</configuration>\n\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>output-html</id>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>process-asciidoc</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<backend>html5</backend>\n\t\t\t\t\t\t\t<outputDirectory>${project.basedir}/docs/swagger</outputDirectory>\n\t\t\t\t\t\t\t<outputDirectory>${project.basedir}/src/main/resources/META-INF/resources/</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>output-pdf</id>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>process-asciidoc</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<backend>pdf</backend>\n\t\t\t\t\t\t\t<outputDirectory>${project.basedir}/docs/swagger</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.codehaus.groovy.maven</groupId>\n\t\t\t\t<artifactId>gmaven-plugin</artifactId>\n\t\t\t\t<version>1.0</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>docker-tags</id>\n\t\t\t\t\t\t<phase>validate</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>execute</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>${project.basedir}/src/main/script/TagVersion.groovy</source>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm-repos-selection</id>\n\t\t\t\t\t\t<phase>validate</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>execute</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<source>${project.basedir}/src/main/script/SelectNpmRepo.groovy</source>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<version>3.0.2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>jar-with-only-classes</id>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>jar</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<classifier>classes</classifier>\n\t\t\t\t\t\t\t<includes>\n\t\t\t\t\t\t\t\t<include>org/**</include>\n\t\t\t\t\t\t\t</includes>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>build-helper-maven-plugin</artifactId>\n\t\t\t\t<version>3.0.0</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>attach-artifact</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<artifacts>\n\t\t\t\t\t\t\t\t<artifact>\n\t\t\t\t\t\t\t\t\t<file>${project.build.directory}/clamp-classes.jar</file>\n\t\t\t\t\t\t\t\t\t<type>jar</type>\n\t\t\t\t\t\t\t\t\t<classifier>classes</classifier>\n\t\t\t\t\t\t\t\t</artifact>\n\t\t\t\t\t\t\t</artifacts>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>reserve-port-for-tests</id>\n\t\t\t\t\t\t<phase>process-resources</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>reserve-network-port</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<portNames>\n\t\t\t\t\t\t\t\t<portName>docker.mariadb.port.host</portName>\n\t\t\t\t\t\t\t\t<portName>docker.http-cache.port.host</portName>\n\t\t\t\t\t\t\t\t<portName>clamp.it.tests.http-redirected</portName>\n\t\t\t\t\t\t\t\t<portName>clamp.it.tests.robotframework.http</portName>\n\t\t\t\t\t\t\t\t<portName>clamp.it.tests.https</portName>\n\t\t\t\t\t\t\t\t<portName>clamp.it.tests.http</portName>\n\t\t\t\t\t\t\t</portNames>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<version>${springboot.version}</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>repackage</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>package</phase>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n\t\t\t\t<version>2.22.2</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<forkCount>1C</forkCount>\n\t\t\t\t\t<reuseForks>true</reuseForks>\n\t\t\t\t\t<useSystemClassLoader>false</useSystemClassLoader>\n\t\t\t\t\t<argLine>${surefireArgLine}</argLine>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-failsafe-plugin</artifactId>\n\t\t\t\t<version>2.22.2</version>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>integration-tests</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>integration-test</goal>\n\t\t\t\t\t\t\t<goal>verify</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<additionalClasspathElements>\n\t\t\t\t\t\t\t\t<additionalClasspathElement>${project.build.directory}/classes</additionalClasspathElement>\n\t\t\t\t\t\t\t</additionalClasspathElements>\n\t\t\t\t\t\t\t<includes>\n\t\t\t\t\t\t\t\t<include>**/*ItCase.java</include>\n\t\t\t\t\t\t\t</includes>\n\t\t\t\t\t\t\t<forkCount>1C</forkCount>\n\t\t\t\t\t\t\t<reuseForks>true</reuseForks>\n\t\t\t\t\t\t\t<useSystemClassLoader>false</useSystemClassLoader>\n\t\t\t\t\t\t\t<argLine>${failsafeArgLine}</argLine>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>io.fabric8</groupId>\n\t\t\t\t<artifactId>docker-maven-plugin</artifactId>\n\t\t\t\t<version>0.31.0</version>\n\t\t\t\t<dependencies>\n\t\t\t\t\t<dependency>\n\t\t\t\t\t\t<groupId>org.apache.httpcomponents</groupId>\n\t\t\t\t\t\t<artifactId>httpclient</artifactId>\n\t\t\t\t\t\t<version>4.5.5</version>\n\t\t\t\t\t</dependency>\n\t\t\t\t</dependencies>\n\t\t\t\t<configuration>\n\t\t\t\t\t<verbose>true</verbose>\n\t\t\t\t\t<apiVersion>1.35</apiVersion>\n\t\t\t\t\t<images>\n\t\t\t\t\t\t<image>\n\t\t\t\t\t\t\t<name>docker.io/mariadb:10.5.4</name>\n\t\t\t\t\t\t\t<alias>mariadb</alias>\n\t\t\t\t\t\t\t<run>\n\t\t\t\t\t\t\t\t<env>\n\t\t\t\t\t\t\t\t\t<MYSQL_ROOT_PASSWORD>strong_pitchou</MYSQL_ROOT_PASSWORD>\n\t\t\t\t\t\t\t\t</env>\n\t\t\t\t\t\t\t\t<hostname>mariadb</hostname>\n\t\t\t\t\t\t\t\t<volumes>\n\t\t\t\t\t\t\t\t\t<bind>\n\t\t\t\t\t\t\t\t\t\t<volume>${project.basedir}/extra/sql/:/docker-entrypoint-initdb.d:rw</volume>\n\t\t\t\t\t\t\t\t\t\t<volume>${project.basedir}/extra/docker/mariadb/conf1:/etc/mysql/conf.d</volume>\n\t\t\t\t\t\t\t\t\t</bind>\n\t\t\t\t\t\t\t\t</volumes>\n\t\t\t\t\t\t\t\t<wait>\n\t\t\t\t\t\t\t\t\t<log>socket: '/run/mysqld/mysqld.sock'  port: 3306  mariadb.org binary distribution</log>\n\t\t\t\t\t\t\t\t\t<time>300000</time>\n\t\t\t\t\t\t\t\t\t<exec>\n\t\t\t\t\t\t\t\t\t\t<preStop>/docker-entrypoint-initdb.d/dump/backup-data-only.sh</preStop>\n\t\t\t\t\t\t\t\t\t</exec>\n\t\t\t\t\t\t\t\t</wait>\n\t\t\t\t\t\t\t\t<ports>\n\t\t\t\t\t\t\t\t\t<port>${docker.mariadb.port.host}:3306</port>\n\t\t\t\t\t\t\t\t</ports>\n\t\t\t\t\t\t\t\t<network>\n\t\t\t\t\t\t\t\t\t<mode>bridge</mode>\n\t\t\t\t\t\t\t\t</network>\n\t\t\t\t\t\t\t</run>\n\t\t\t\t\t\t</image>\n\t\t\t\t\t\t<image>\n\t\t\t\t\t\t\t<name>docker.io/python:2-slim</name>\n\t\t\t\t\t\t\t<alias>python</alias>\n\t\t\t\t\t\t\t<run>\n\t\t\t\t\t\t\t\t<hostname>python</hostname>\n\t\t\t\t\t\t\t\t<volumes>\n\t\t\t\t\t\t\t\t\t<bind>\n\t\t\t\t\t\t\t\t\t\t<volume>${project.basedir}/src/test/resources/http-cache/:/usr/src/http-cache-app</volume>\n\t\t\t\t\t\t\t\t\t\t<volume>${project.basedir}/src/test/resources/http-cache/example/:/usr/src/http-cache-app/data-cache</volume>\n\t\t\t\t\t\t\t\t\t</bind>\n\t\t\t\t\t\t\t\t</volumes>\n\t\t\t\t\t\t\t\t<wait>\n\t\t\t\t\t\t\t\t\t<tcp>\n\t\t\t\t\t\t\t\t\t\t<ports>\n\t\t\t\t\t\t\t\t\t\t\t<port>8080</port>\n\t\t\t\t\t\t\t\t\t\t</ports>\n\t\t\t\t\t\t\t\t\t\t<mode>direct</mode>\n\t\t\t\t\t\t\t\t\t</tcp>\n\t\t\t\t\t\t\t\t\t<time>120000</time>\n\t\t\t\t\t\t\t\t</wait>\n\t\t\t\t\t\t\t\t<ports>\n\t\t\t\t\t\t\t\t\t<port>${docker.http-cache.port.host}:8080</port>\n\t\t\t\t\t\t\t\t</ports>\n\t\t\t\t\t\t\t\t<workingDir>/usr/src/http-cache-app</workingDir>\n\t\t\t\t\t\t\t\t<cmd>\n\t\t\t\t\t\t\t\t\t<shell>./start_http_cache.sh ${python.http.proxy.param}\n\t\t\t\t\t\t\t\t\t\t--python_proxyaddress=localhost:${docker.http-cache.port.host}</shell>\n\t\t\t\t\t\t\t\t</cmd>\n\t\t\t\t\t\t\t\t<network>\n\t\t\t\t\t\t\t\t\t<mode>bridge</mode>\n\t\t\t\t\t\t\t\t</network>\n\t\t\t\t\t\t\t</run>\n\t\t\t\t\t\t</image>\n\t\t\t\t\t\t<image>\n\t\t\t\t\t\t\t<name>onap/clamp-backend</name>\n\t\t\t\t\t\t\t<alias>onap-clamp-backend</alias>\n\t\t\t\t\t\t\t<run>\n\t\t\t\t\t\t\t\t<skip>true</skip>\n\t\t\t\t\t\t\t</run>\n\t\t\t\t\t\t\t<build>\n\t\t\t\t\t\t\t\t<cleanup>true</cleanup>\n\t\t\t\t\t\t\t\t<tags>\n\t\t\t\t\t\t\t\t\t<tag>latest</tag>\n\t\t\t\t\t\t\t\t\t<tag>${project.docker.latesttagtimestamp.version}</tag>\n\t\t\t\t\t\t\t\t\t<tag>${project.docker.latesttag.version}</tag>\n\t\t\t\t\t\t\t\t</tags>\n\t\t\t\t\t\t\t\t<!-- A relative path is looked up in ${project.basedir}/src/main/docker by\n\t\t\t\t\t\t\t\t\tdefault -->\n\t\t\t\t\t\t\t\t<dockerFile>backend/Dockerfile</dockerFile>\n\t\t\t\t\t\t\t\t<assembly>\n\t\t\t\t\t\t\t\t\t<descriptor>backend/backend-files.xml</descriptor>\n\t\t\t\t\t\t\t\t\t<name>onap-clamp-backend</name>\n\t\t\t\t\t\t\t\t</assembly>\n\t\t\t\t\t\t\t</build>\n\t\t\t\t\t\t</image>\n\t\t\t\t\t\t<image>\n\t\t\t\t\t\t\t<name>onap/clamp-frontend</name>\n\t\t\t\t\t\t\t<alias>onap-clamp-frontend</alias>\n\t\t\t\t\t\t\t<run>\n\t\t\t\t\t\t\t\t<skip>true</skip>\n\t\t\t\t\t\t\t</run>\n\t\t\t\t\t\t\t<build>\n\t\t\t\t\t\t\t\t<cleanup>true</cleanup>\n\t\t\t\t\t\t\t\t<tags>\n\t\t\t\t\t\t\t\t\t<tag>latest</tag>\n\t\t\t\t\t\t\t\t\t<tag>${project.docker.latesttagtimestamp.version}</tag>\n\t\t\t\t\t\t\t\t\t<tag>${project.docker.latesttag.version}</tag>\n\t\t\t\t\t\t\t\t</tags>\n\t\t\t\t\t\t\t\t<!-- A relative path is looked up in ${project.basedir}/src/main/docker by\n\t\t\t\t\t\t\t\t\tdefault -->\n\t\t\t\t\t\t\t\t<dockerFile>frontend/Dockerfile</dockerFile>\n\t\t\t\t\t\t\t\t<assembly>\n\t\t\t\t\t\t\t\t\t<descriptor>frontend/frontend-files.xml</descriptor>\n\t\t\t\t\t\t\t\t\t<name>onap-clamp-frontend</name>\n\t\t\t\t\t\t\t\t</assembly>\n\t\t\t\t\t\t\t</build>\n\t\t\t\t\t\t</image>\n\t\t\t\t\t</images>\n\t\t\t\t</configuration>\n\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>generate-images</id>\n\t\t\t\t\t\t<phase>install</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>build</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>push-images</id>\n\t\t\t\t\t\t<phase>deploy</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>push</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>docker-start-for-it</id>\n\t\t\t\t\t\t<phase>pre-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>start</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>docker-stop-for-it</id>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>stop</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.jacoco</groupId>\n\t\t\t\t<artifactId>jacoco-maven-plugin</artifactId>\n\t\t\t\t<version>0.8.5</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<dumpOnExit>true</dumpOnExit>\n\t\t\t\t\t<append>true</append>\n\t\t\t\t\t<includes>\n\t\t\t\t\t\t<include>org/onap/clamp/**</include>\n\t\t\t\t\t</includes>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pre-unit-test</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>prepare-agent</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<destFile>${project.build.directory}/coverage-reports/jacoco.exec</destFile>\n\t\t\t\t\t\t\t<propertyName>surefireArgLine</propertyName>\n\t\t\t\t\t\t\t<!-- <append>true</append> -->\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>pre-integration-test</id>\n\t\t\t\t\t\t<phase>pre-integration-test</phase>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>prepare-agent</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>\n\t\t\t\t\t\t\t<propertyName>failsafeArgLine</propertyName>\n\t\t\t\t\t\t\t<!-- <append>true</append> -->\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>merge</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>post-integration-test</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<fileSets>\n\t\t\t\t\t\t\t\t<fileSet\n\t\t\t\t\t\t\t\t\timplementation=\"org.apache.maven.shared.model.fileset.FileSet\">\n\t\t\t\t\t\t\t\t\t<directory>${project.build.directory}/coverage-reports</directory>\n\t\t\t\t\t\t\t\t\t<includes>\n\t\t\t\t\t\t\t\t\t\t<include>*.exec</include>\n\t\t\t\t\t\t\t\t\t</includes>\n\t\t\t\t\t\t\t\t</fileSet>\n\t\t\t\t\t\t\t</fileSets>\n\t\t\t\t\t\t\t<destFile>${project.build.directory}/jacoco.exec</destFile>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>report-xml</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>report</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<!-- Setting explicit path, so that we remember where it picks them up from -->\n\t\t\t\t\t\t\t<dataFile>${project.build.directory}/jacoco.exec</dataFile>\n\t\t\t\t\t\t\t<outputDirectory>${project.build.directory}/jacoco-html-xml-reports</outputDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\n\t\t\t<!-- This plugin will be useful when we will have multi-modules project -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.codehaus.mojo</groupId>\n\t\t\t\t<artifactId>versions-maven-plugin</artifactId>\n\t\t\t\t<version>1.3.1</version>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>com.github.eirslett</groupId>\n\t\t\t\t<artifactId>frontend-maven-plugin</artifactId>\n\t\t\t\t<version>1.8.0</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<installDirectory>${project.build.directory}/${ui.react.src}</installDirectory>\n\t\t\t\t</configuration>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>install_node_and_npm</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>install-node-and-npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>generate-sources</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<nodeVersion>v12.13.0</nodeVersion>\n\t\t\t\t\t\t\t<npmVersion>6.13.0</npmVersion>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm_install</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>compile</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<workingDirectory>${project.build.directory}/${ui.react.src}</workingDirectory>\n\t\t\t\t\t\t\t<arguments>install</arguments>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm_test</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>test</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<skip>${maven.test.skip}</skip>\n\t\t\t\t\t\t\t<arguments>run-script test:coverage</arguments>\n\t\t\t\t\t\t\t<workingDirectory>${project.build.directory}/${ui.react.src}</workingDirectory>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm_install_lib</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>deploy</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<workingDirectory>${project.build.directory}/${ui.react.lib.src}</workingDirectory>\n\t\t\t\t\t\t\t<arguments>install</arguments>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm_build_lib</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>deploy</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<workingDirectory>${project.build.directory}/${ui.react.lib.src}</workingDirectory>\n\t\t\t\t\t\t\t<arguments>run build</arguments>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>npm_publish</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>npm</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>deploy</phase>\n\t\t\t\t\t\t<configuration>\n\t\t\t\t\t\t\t<workingDirectory>${project.build.directory}/${ui.react.lib.src}</workingDirectory>\n\t\t\t\t\t\t\t<arguments>publish</arguments>\n\t\t\t\t\t\t</configuration>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t\t<version>3.8.1</version>\n\t\t\t\t<configuration>\n\t\t\t\t\t<source>11</source>\n\t\t\t\t\t<target>11</target>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.sonarsource.scanner.maven</groupId>\n\t\t\t\t<artifactId>sonar-maven-plugin</artifactId>\n\t\t\t\t<version>3.7.0.1746</version>\n\t\t\t</plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>exec-maven-plugin</artifactId>\n                <version>1.3.2</version>             \n                <executions>  \n                    <execution>\n                        <id>libIndexCheck</id>\n                        <phase>validate</phase>\n                        <goals>\n                            <goal>exec</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <executable>bash</executable>\n                    <arguments>\n                        <argument>${project.basedir}/src/main/script/checkLibIndex.sh</argument>\n                    </arguments>\n                </configuration>\n          </plugin>\n\t\t</plugins>\n\t</build>\n</project>\n"
        },
        "database": "MySQL",
        "build_system": "Maven",
        "config_files": {
            "src/main/docker/backend/Dockerfile": "###\r\n# ============LICENSE_START=======================================================\r\n# ONAP CLAMP\r\n# ================================================================================\r\n# Copyright (C) 2018 AT&T Intellectual Property. All rights\r\n#                             reserved.\r\n# ================================================================================\r\n# Licensed under the Apache License, Version 2.0 (the \"License\");\r\n# you may not use this file except in compliance with the License.\r\n# You may obtain a copy of the License at\r\n#\r\n# http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n# Unless required by applicable law or agreed to in writing, software\r\n# distributed under the License is distributed on an \"AS IS\" BASIS,\r\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n# See the License for the specific language governing permissions and\r\n# limitations under the License.\r\n# ============LICENSE_END============================================\r\n# ===================================================================\r\n#\r\n###\r\n\r\nFROM onap/integration-java11:7.1.0\r\n\r\nMAINTAINER \"The Onap Team\"\r\nLABEL Description=\"This image contains alpine, openjdk 11 and clamp\"\r\n\r\nARG http_proxy\r\nARG https_proxy\r\nENV HTTP_PROXY=$http_proxy\r\nENV HTTPS_PROXY=$https_proxy\r\nENV http_proxy=$HTTP_PROXY\r\nENV https_proxy=$HTTPS_PROXY\r\nUSER root\r\nRUN mkdir /opt/clamp\r\nRUN chown -R onap:onap /opt/clamp\r\n\r\nVOLUME /opt/clamp/config\r\n\r\nCOPY --chown=onap:onap onap-clamp-backend/clamp.jar /opt/clamp/app.jar\r\n\r\nUSER onap\r\nWORKDIR /opt/clamp/\r\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=75\",\"-jar\" ,\"./app.jar\"]"
        },
        "static_files": {
            "src/main/resources/clds/camel/rest/clamp-api-v2.xml": "<rests xmlns=\"http://camel.apache.org/schema/spring\">\n\t<rest>\n\t\t<get uri=\"/v2/loop/getAllNames\" outType=\"java.lang.String[]\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Loop')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=getLoopNames()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET All Loop names FAILED: ${exception.stacktrace}\" />\n\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET All Loop names FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/loop/{loopName}\" outType=\"org.onap.clamp.loop.Loop\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Loop')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=getLoop(${header.loopName})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Loop request failed for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Loop FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\n\t\t<post uri=\"/v2/loop/updateGlobalProperties/{loopName}\"\n\t\t\ttype=\"com.google.gson.JsonObject\" consumes=\"application/json\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update the global properties')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<setHeader headerName=\"GlobalPropertiesJson\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setHeader>\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=updateGlobalPropertiesJson(${header.loopName},${header.GlobalPropertiesJson})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('Global Properties UPDATED','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"UPDATE Global properties FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>UPDATE Global properties FAILED </simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</post>\n\t\t<post uri=\"/v2/loop/updateOperationalPolicies/{loopName}\"\n\t\t\ttype=\"com.google.gson.JsonArray\" consumes=\"application/json\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update operational policies')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<setHeader headerName=\"OperationalPoliciesArray\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setHeader>\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=updateOperationalPolicies(${header.loopName},${header.OperationalPoliciesArray})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('Operational policies UPDATED','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"UPDATE Operational policies FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('UPDATE Operational policies request FAILED, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})\" />\n\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>UPDATE Operational policies FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</post>\n\t\t<post uri=\"/v2/loop/updateMicroservicePolicy/{loopName}\"\n\t\t\ttype=\"org.onap.clamp.policy.microservice.MicroServicePolicy\"\n\t\t\tconsumes=\"application/json\"\n\t\t\toutType=\"org.onap.clamp.policy.microservice.MicroServicePolicy\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Update Microservice policies')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<setProperty propertyName=\"MicroServicePolicyObject\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=updateMicroservicePolicy(${header.loopName},${exchangeProperty[MicroServicePolicyObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('Micro Service policies UPDATED','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"UPDATE MicroService policy FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('UPDATE MicroService policy request FAILED, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>UPDATE MicroService policy FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</post>\n\t\t<put uri=\"/v2/loop/deploy/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DCAE DEPLOY request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'DCAE DEPLOY request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DCAE DEPLOY request','INFO',${exchangeProperty[loopObject]})\" />\n\n\t\t\t\t\t<to uri=\"direct:deploy-loop\" />\n\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DEPLOY request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DEPLOY request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"DEPLOY request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DEPLOY request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>DEPLOY request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/refreshMicroServicePolicyJsonSchema/{loopName}/{microServicePolicyName}\"\n\t\t\t outType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName|microServicePolicyName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t message=\"Refresh Micro Service Policy UI for loop: ${header.loopName} and ${header.microServicePolicyName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REFRESH Micro Service Policy UI request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.cds.CdsDataInstaller?method=updateCdsServiceProperties(${exchangeProperty[loopObject].getModelService()})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=refreshMicroServicePolicyJsonRepresentation(${exchangeProperty[loopObject]},${header.microServicePolicyName})\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t message=\"REFRESH Micro Service policy request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REFRESH Micro Service policy request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"REFRESH json schema request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REFRESH Json schema request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>REFRESH json schema request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/refreshOperationalPolicyJsonSchema/{loopName}/{operationalPolicyName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName|operationalPolicyName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"Refresh Operational Policy UI for loop: ${header.loopName} and ${header.operationalPolicyName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REFRESH Operational Policy UI request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.cds.CdsDataInstaller?method=updateCdsServiceProperties(${exchangeProperty[loopObject].getModelService()})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=refreshOperationalPolicyJsonRepresentation(${exchangeProperty[loopObject]},${header.operationalPolicyName})\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"REFRESH operational policy request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REFRESH operational policy request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"REFRESH json schema request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REFRESH Json schema request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>REFRESH json schema request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/undeploy/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DCAE UNDEPLOY request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'DCAE UNDEPLOY request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DCAE UNDEPLOY request','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to uri=\"direct:undeploy-loop\" />\n\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"UNDEPLOY request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('UNDEPLOY request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"UNDEPLOY request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('UNDEPLOY request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>UNDEPLOY request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/stop/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"STOP request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*,'STOP request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('STOP request','INFO',${exchangeProperty[loopObject]})\" />\n\n\t\t\t\t\t<to uri=\"direct:remove-all-policy-from-active-pdp-group\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"STOP request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('STOP request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"STOP request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('STOP request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>STOP request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/restart/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"RESTART request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*,'RESTART request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('RESTART request','INFO',${exchangeProperty[loopObject]})\" />\n\n\t\t\t\t\t<to uri=\"direct:add-all-to-active-pdp-group\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"RESTART request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('RESTART request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"RESTART request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('RESTART request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>RESTART request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/submit/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"POLICY SUBMIT request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'POLICY SUBMIT request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('POLICY SUBMIT request','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to uri=\"direct:remove-all-policy-from-active-pdp-group\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"Processing all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t\t\t\t<split>\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t\t<setProperty propertyName=\"policy\">\n\t\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t\tmessage=\"Processing Micro Service Policy: ${exchangeProperty[policy].getName()}\" />\n\t\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<to uri=\"direct:delete-policy\" />\n\t\t\t\t\t\t<to uri=\"direct:create-policy\" />\n\t\t\t\t\t</split>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"Processing all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t\t\t\t<split>\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getOperationalPolicies()}\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t\t<setProperty propertyName=\"policy\">\n\t\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t\tmessage=\"Processing Operational Policy: ${exchangeProperty[policy].getName()}\" />\n\t\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t\t</setProperty>\n\n\t\t\t\t\t\t<to uri=\"direct:delete-policy\" />\n\t\t\t\t\t\t<to uri=\"direct:create-policy\" />\n\t\t\t\t\t</split>\n\n\t\t\t\t\t<delay>\n\t\t\t\t\t\t<constant>3000</constant>\n\t\t\t\t\t</delay>\n\n\t\t\t\t\t<to uri=\"direct:add-all-to-active-pdp-group\" />\n\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"SUBMIT request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('SUBMIT request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"SUBMIT request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('SUBMIT request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>SUBMIT request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/delete/{loopName}\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DELETE request for loop: ${header.loopName}\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*,'DELETE request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DELETE request','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to uri=\"direct:undeploy-loop\" />\n\t\t\t\t\t<to uri=\"direct:remove-all-policy-from-active-pdp-group\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"Deleting all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t\t\t\t<split>\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t\t<setProperty propertyName=\"policy\">\n\t\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t\tmessage=\"Deleting Micro Service Policy: ${exchangeProperty[policy].getName()}\" />\n\t\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<to uri=\"direct:delete-policy\" />\n\t\t\t\t\t</split>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"Deleting all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t\t\t\t<split>\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getOperationalPolicies()}\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t\t<setProperty propertyName=\"policy\">\n\t\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\t\tmessage=\"Deleting Operational Policy: ${exchangeProperty[policy].getName()}\" />\n\t\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<to uri=\"direct:delete-policy\" />\n\t\t\t\t\t</split>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=deleteLoop(${header.loopName})\" />\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DELETE request successfully executed for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"DELETE request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('DELETE request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>DELETE request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<get uri=\"/v2/loop/getstatus/{loopName}\"\n\t\t\toutType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"GET STATUS request for loop: ${header.loopName}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET STATUS request')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','read')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to uri=\"direct:update-policy-status-for-loop\" />\n\t\t\t\t\t<to uri=\"direct:update-dcae-status-for-loop\" />\n\t\t\t\t\t<to uri=\"direct:update-loop-state\" />\n\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET STATUS request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET STATUS request failed, Error reported: ${exception} - Body: ${exception.responseBody}','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t</doCatch>\n\t\t\t\t\t<doFinally>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>${exchangeProperty[loopObject]}</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>200</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t</doFinally>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\n\t\t<put uri=\"/v2/loop/addOperationaPolicy/{loopName}/policyModel/{policyType}/{policyVersion}\" outType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName|policyType|policyVersion\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add operational Policy')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=addOperationalPolicy(${header.loopName},${header.policyType},${header.policyVersion})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('ADD OperationalPolicy request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"ADD operational policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('ADD OperationalPolicy request failed','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>ADD Operational policy request FAILED for loop: ${header.loopName}, ${exception.message}\"</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t\t\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<put uri=\"/v2/loop/removeOperationaPolicy/{loopName}/policyModel/{policyType}/{policyVersion}/{policyName}\" outType=\"org.onap.clamp.loop.Loop\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"loopName|policyType|policyVersion|policyName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'REMOVE operational Policy')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to uri=\"direct:load-loop\" />\n\t\t\t\t\t<setProperty propertyName=\"policyName\">\n\t\t\t\t\t\t<simple>${header.policyName}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<setProperty propertyName=\"policy\">\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getOperationalPolicy(header.policyName)}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to uri=\"direct:remove-one-policy-from-active-pdp-group\" />\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to uri=\"direct:delete-policy\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=removeOperationalPolicy(${header.loopName},${header.policyType},${header.policyVersion})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REMOVE OperationalPolicy request successfully executed','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"REMOVE operational policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('REMOVE OperationalPolicy request failed','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>REMOVE Operational policy request FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\t\t<post\n\t\t\t\turi=\"/v2/loop/create/{loopName}?templateName={templateName}\"\n\t\t\t\toutType=\"org.onap.clamp.loop.Loop\" consumes=\"application/json\"\n\t\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders\n\t\t\t\t\t\tpattern=\"*\"\n\t\t\t\t\t\texcludePattern=\"loopName|templateName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Create Loop')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'cl','','update')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopController?method=createLoop(${header.loopName}, ${header.templateName})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"CREATE Loop from Template request failed for loop: ${header.loopName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('CREATE Loop from template request failed','ERROR',${exchangeProperty[loopObject]})\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>CREATE Loop from template FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</post>\n\t\t<get uri=\"/v2/dictionary\"\n\t\t\toutType=\"org.onap.clamp.tosca.Dictionary\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Dictionaries')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=getAllDictionaries()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Dictionary request failed: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\n\t\t<get uri=\"/v2/dictionary/secondary/names\"\n\t\t\toutType=\"java.lang.String[]\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Secondary Dictionary Level Names')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=getAllSecondaryLevelDictionaryNames()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Dictionary request failed: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/dictionary/{dictionaryName}\"\n\t\t\toutType=\"org.onap.clamp.tosca.Dictionary\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\texcludePattern=\"dictionaryName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Dictionary Elements for a Dictionary Name')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=getDictionary(${header.dictionaryName})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Dictionary request failed for: ${header.dictionaryName}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<put uri=\"/v2/dictionary\" type=\"org.onap.clamp.tosca.Dictionary\"\n\t\t\toutType=\"org.onap.clamp.tosca.Dictionary\" consumes=\"application/json\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add New or Update Dictionary')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<setProperty propertyName=\"DictionaryObject\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=saveOrUpdateDictionary(${exchangeProperty[DictionaryObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"PUT Dictionary request failed for: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>PUT Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\n\t\t<put uri=\"/v2/dictionary/{name}\"\n\t\t\ttype=\"org.onap.clamp.tosca.Dictionary\"\n\t\t\toutType=\"org.onap.clamp.tosca.Dictionary\" consumes=\"application/json\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"name\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Add New or Update Dictionary Element')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<setProperty propertyName=\"DictionaryObject\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=saveOrUpdateDictionaryElement(${header.name}, ${exchangeProperty[DictionaryObject]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"PUT Dictionary request failed for: ${header.name}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>PUT Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\n\t\t<delete uri=\"/v2/dictionary/{name}\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" excludePattern=\"name\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Dictionary')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=deleteDictionary(${header.name})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"DELETE Dictionary request failed for: ${header.name}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>DELETE Dictionary FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</delete>\n\n\t\t<delete uri=\"/v2/dictionary/{name}/elements/{shortName}\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\texcludePattern=\"name|shortName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Delete Dictionary Element')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.tosca.DictionaryService?method=deleteDictionaryElement(${header.name}, ${header.shortName})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"DELETE Dictionary element request failed for: ${header.name}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>DELETE Dictionary element FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</delete>\n\n\t\t<get uri=\"/v2/policyToscaModels\"\n\t\t\toutType=\"org.onap.clamp.loop.template.PolicyModel\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Tosca Policy Models')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.PolicyModelsService?method=getAllPolicyModels()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Policy Models request failed for: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Policy models FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/policyToscaModels/{policyModelType}/{policyModelVersion}\"\n\t\t\toutType=\"org.onap.clamp.loop.template.PolicyModel\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\texcludePattern=\"policyModelType|policyModelVersion\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Policy Model by Name/Version')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.PolicyModelsService?method=getPolicyModelByType(${header.policyModelType},${header.policyModelVersion})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Policy Model request failed for type: ${header.policyModelType}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Policy model FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/policyToscaModels/yaml/{policyModelType}/{policyModelVersion}\"\n\t\t\toutType=\"java.lang.String\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\texcludePattern=\"policyModelType|policyModelVersion\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET Tosca Policy Model Yaml String by Name/Version')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.PolicyModelsService?method=getPolicyModelTosca(${header.policyModelType},${header.policyModelVersion})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Policy Model YAML request failed for type: ${header.policyModelType}, ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Policy model YAML FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\n\t\t<post uri=\"/v2/policyToscaModels\"\n\t\t\ttype=\"java.lang.String\"\n\t\t\toutType=\"org.onap.clamp.loop.template.PolicyModel\"\n\t\t\tconsumes=\"plain/text\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"/>\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Upload New or Update Tosca Policy Model')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<setProperty propertyName=\"PolicyModelTosca\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.PolicyModelsService?method=createNewPolicyModelFromTosca(${exchangeProperty[PolicyModelTosca]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"POST Policy Model YAML request failed: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>POST Policy model YAML FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</post>\n\t\t<put uri=\"/v2/policyToscaModels/{policyModelType}/{policyModelVersion}\"\n\t\t\t  type=\"java.lang.String\"\n\t\t\t  outType=\"org.onap.clamp.loop.template.PolicyModel\"\n\t\t\t  consumes=\"plain/text\" produces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\t\t\t   excludePattern=\"policyModelType|policyModelVersion\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'Upload New or Update Tosca Policy Model')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'tosca','','update')\" />\n\t\t\t\t\t<setProperty propertyName=\"PolicyModelTosca\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.PolicyModelsService?method=updatePolicyModelTosca(${header.policyModelType},${policyModelVersion},${exchangeProperty[PolicyModelTosca]})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"MODIFY Policy Model YAML request failed: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>MODIFY Policy model YAML FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</put>\n\n\t\t<get uri=\"/v2/templates\"\n\t\t\toutType=\"org.onap.clamp.loop.template.LoopTemplate\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Templates')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.LoopTemplatesService?method=getAllLoopTemplates()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET ALL templates request failed: ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET ALL templates FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/templates/{templateName}\"\n\t\t\toutType=\"org.onap.clamp.loop.template.LoopTemplate\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\"\n\t\t\t\t\texcludePattern=\"templateName\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET a Template by NAME')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.LoopTemplatesService?method=getLoopTemplate(${header.templateName})\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET Template request failed for template: ${header.templateName},  ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET Template FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/templates/names\" outType=\"java.lang.String[]\"\n\t\t\tproduces=\"application/json\">\n\t\t\t<route>\n\t\t\t\t<removeHeaders pattern=\"*\" />\n\t\t\t\t<doTry>\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=startLog(*, 'GET ALL Loop Template Names')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=authorize(*,'template','','read')\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.template.LoopTemplatesService?method=getLoopTemplateNames()\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=endLog()\" />\n\t\t\t\t\t<doCatch>\n\t\t\t\t\t\t<exception>java.lang.Exception</exception>\n\t\t\t\t\t\t<handled>\n\t\t\t\t\t\t\t<constant>true</constant>\n\t\t\t\t\t\t</handled>\n\t\t\t\t\t\t<to\n\t\t\t\t\t\t\t\turi=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=errorLog()\" />\n\t\t\t\t\t\t<log loggingLevel=\"ERROR\"\n\t\t\t\t\t\t\t message=\"GET All Template names request failed for template:  ${exception.stacktrace}\" />\n\t\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t\t<constant>500</constant>\n\t\t\t\t\t\t</setHeader>\n\t\t\t\t\t\t<setBody>\n\t\t\t\t\t\t\t<simple>GET All Template names FAILED</simple>\n\t\t\t\t\t\t</setBody>\n\t\t\t\t\t</doCatch>\n\t\t\t\t</doTry>\n\t\t\t</route>\n\t\t</get>\n\t\t<get uri=\"/v2/clampInformation\" outType=\"org.onap.clamp.clds.model.ClampInformation\"\n\t\t\t produces=\"application/json\">\n\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.authorization.AuthorizationController?method=getClampInformation()\" />\n\t\t</get>\n\t</rest>\n</rests>\n",
            "src/main/resources/clds/camel/rest/clds-services.xml": "<rests xmlns=\"http://camel.apache.org/schema/spring\">\n\t<rest>\n\t\t<get uri=\"/v1/healthcheck\" produces=\"application/json\"\n\t\t\toutType=\"org.onap.clamp.clds.model.CldsHealthCheck\">\n\t\t\t<route>\n\t\t\t\t<setBody>\n\t\t\t\t\t<method ref=\"org.onap.clamp.clds.service.CldsHealthcheckService\"\n\t\t\t\t\t\tmethod=\"gethealthcheck()\" />\n\t\t\t\t</setBody>\n\t\t\t\t<when>\n\t\t\t\t\t<simple> ${body} == 'NOT-OK'</simple>\n\t\t\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t\t\t<constant>404</constant>\n\t\t\t\t\t</setHeader>\n\t\t\t\t\t<log loggingLevel=\"ERROR\" message=\"HealthCheck failed\" />\n\t\t\t\t</when>\n\t\t\t</route>\n\t\t</get>\n\n\t\t<get uri=\"/v1/user/getUser\" produces=\"text/plain\">\n\t\t\t<to uri=\"bean:org.onap.clamp.authorization.UserService?method=getUser()\" />\n\t\t</get>\n\t</rest>\n</rests>\n",
            "src/main/resources/clds/camel/routes/cds-flows.xml": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n    <route id=\"get-blueprint-workflow-list\">\n        <from uri=\"direct:get-blueprint-workflow-list\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Getting blueprint workflow list from CDS\"/>\n        <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('CDS', 'Getting workflow list from CDS')\"/>\n        <doTry>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to query workflows from CDS : {{clamp.config.cds.url}}/api/v1/blueprint-model/workflows/blueprint-name/${exchangeProperty[blueprintName]}/version/${exchangeProperty[blueprintVersion]}\"></log>\n            <toD uri=\"{{clamp.config.cds.url}}/api/v1/blueprint-model/workflows/blueprint-name/${exchangeProperty[blueprintName]}/version/${exchangeProperty[blueprintVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.cds.userName}}&amp;authPassword={{clamp.config.cds.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=30000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>true</constant>\n                </handled>\n\n                <log loggingLevel=\"ERROR\"\n                     message=\"GET CDS request FAILED: ${exception.stacktrace}\" />\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"get-blueprint-workflow-input-properties\">\n        <from uri=\"direct:get-blueprint-workflow-input-properties\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Getting blueprint input properties for workflow\"/>\n        <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('CDS', 'Getting input properties for workflow')\"/>\n        <doTry>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>POST</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to query input properties for workflow from CDS : {{clamp.config.cds.url}}/api/v1/blueprint-model/workflow-spec\"></log>\n            <toD uri=\"{{clamp.config.cds.url}}/api/v1/blueprint-model/workflow-spec?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.cds.userName}}&amp;authPassword={{clamp.config.cds.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=30000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>true</constant>\n                </handled>\n\n                <log loggingLevel=\"ERROR\"\n                     message=\"GET CDS workflow input request FAILED: ${exception.stacktrace}\" />\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n</routes>",
            "src/main/resources/clds/camel/routes/dcae-flows.xml": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n    <route id=\"deploy-loop\">\n        <from uri=\"direct:deploy-loop\"/>\n        <choice>\n            <when>\n                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == true\n                </simple>\n                <to uri=\"direct:deploy-loop-single-blueprint\"/>\n            </when>\n            <when>\n                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == false\n                </simple>\n                <to uri=\"direct:deploy-loop-multi-blueprint\"/>\n            </when>\n        </choice>\n    </route>\n    <route id=\"deploy-loop-multi-blueprint\">\n        <from uri=\"direct:deploy-loop-multi-blueprint\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Deploying the blueprints for loop: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Deploying the loop with multiple blueprints')\"/>\n            <split>\n                <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n                </simple>\n                <setProperty propertyName=\"microServicePolicy\">\n                    <simple>${body}</simple>\n                </setProperty>\n                <log\n                        loggingLevel=\"INFO\"\n                        message=\"Processing Micro Service Policy: ${exchangeProperty[microServicePolicy].getName()}\"/>\n                <setProperty propertyName=\"raiseHttpExceptionFlag\">\n                    <simple resultType=\"java.lang.Boolean\">false</simple>\n                </setProperty>\n                <setBody>\n                    <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                            method=\"getDeployPayload(${exchangeProperty[loopObject]},${exchangeProperty[microServicePolicy]})\"/>\n                </setBody>\n                <setProperty propertyName=\"dcaeDeploymentId\">\n                    <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                            method=\"generateDeploymentId()\"/>\n                </setProperty>\n                <setHeader headerName=\"CamelHttpMethod\">\n                    <constant>PUT</constant>\n                </setHeader>\n                <setHeader headerName=\"Content-Type\">\n                    <constant>application/json</constant>\n                </setHeader>\n                <setHeader headerName=\"X-ONAP-RequestID\">\n                    <simple>${exchangeProperty[X-ONAP-RequestID]}\n                    </simple>\n                </setHeader>\n                <setHeader headerName=\"X-ONAP-InvocationID\">\n                    <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                    </simple>\n                </setHeader>\n                <setHeader headerName=\"X-ONAP-PartnerName\">\n                    <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                    </simple>\n                </setHeader>\n                <log loggingLevel=\"INFO\"\n                     message=\"Endpoint to deploy loop: {{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[dcaeDeploymentId]}\"></log>\n                <toD\n                        uri=\"{{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[dcaeDeploymentId]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=300000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n                <convertBodyTo type=\"java.lang.String\"/>\n                <setProperty propertyName=\"dcaeResponse\">\n                    <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                            method=\"convertDcaeResponse(${body})\"/>\n                </setProperty>\n                <setProperty propertyName=\"dcaeStatusUrl\">\n                    <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                            method=\"getStatusUrl(${exchangeProperty[dcaeResponse]})\"/>\n                </setProperty>\n                <to\n                        uri=\"bean:org.onap.clamp.policy.microservice.MicroServicePolicyService?method=updateDcaeDeploymentFields(${exchangeProperty[microServicePolicy]},${exchangeProperty[dcaeDeploymentId]},${exchangeProperty[dcaeStatusUrl]})\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('Deploy for the micro service: ${exchangeProperty[microServicePolicy].getName()} - ${header.CamelHttpResponseCode} : ${header.CamelHttpResponseText}','INFO','DCAE',${exchangeProperty[loopObject]})\"/>\n            </split>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>false</constant>\n                </handled>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>DEPLOY micro service failed\n                        (MicroService name:${exchangeProperty[microServicePolicy].getName()}),\n                        Dep-id:${exchangeProperty[dcaeDeploymentId]},\n                        StatusUrl:${exchangeProperty[dcaeStatusUrl]})\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>DCAE</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"deploy-loop-single-blueprint\">\n        <from uri=\"direct:deploy-loop-single-blueprint\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Deploying the loop: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Deploying the loop')\"/>\n            <setBody>\n                <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                        method=\"getDeployPayload(${exchangeProperty[loopObject]})\"/>\n            </setBody>\n            <setProperty propertyName=\"dcaeDeploymentId\">\n                <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                        method=\"generateDeploymentId()\"/>\n            </setProperty>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>PUT</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to deploy loop: {{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[dcaeDeploymentId]}\"></log>\n            <toD\n                    uri=\"{{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[dcaeDeploymentId]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=300000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <setProperty propertyName=\"dcaeResponse\">\n                <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                        method=\"convertDcaeResponse(${body})\"/>\n            </setProperty>\n\n\n            <setProperty propertyName=\"dcaeStatusUrl\">\n                <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                        method=\"getStatusUrl(${exchangeProperty[dcaeResponse]})\"/>\n            </setProperty>\n            <to\n                    uri=\"bean:org.onap.clamp.loop.LoopService?method=updateDcaeDeploymentFields(${exchangeProperty[loopObject]},${exchangeProperty[dcaeDeploymentId]},${exchangeProperty[dcaeStatusUrl]})\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>DEPLOY loop status\n                        (Dep-id:${exchangeProperty[dcaeDeploymentId]},\n                        StatusUrl:${exchangeProperty[dcaeStatusUrl]})\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>DCAE</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"undeploy-loop\">\n        <from uri=\"direct:undeploy-loop\"/>\n        <choice>\n            <when>\n                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == true\n                </simple>\n                <to uri=\"direct:undeploy-loop-single-blueprint\"/>\n            </when>\n            <when>\n                <simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == false\n                </simple>\n                <to uri=\"direct:undeploy-loop-multi-blueprint\"/>\n            </when>\n        </choice>\n    </route>\n    <route id=\"undeploy-loop-multi-blueprint\">\n        <from uri=\"direct:undeploy-loop-multi-blueprint\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Undeploying the blueprints for loop: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Undeploying the loop with multiple blueprints')\"/>\n            <split>\n                <simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n                </simple>\n                <setProperty propertyName=\"microServicePolicy\">\n                    <simple>${body}</simple>\n                </setProperty>\n                <log\n                        loggingLevel=\"INFO\"\n                        message=\"Processing Micro Service Policy: ${exchangeProperty[microServicePolicy].getName()}\"/>\n                <choice>\n                    <when>\n                        <simple>${exchangeProperty[microServicePolicy].getDcaeDeploymentId()} != null\n                        </simple>\n                        <setBody>\n                            <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                    method=\"getUndeployPayload(${exchangeProperty[microServicePolicy]})\"/>\n                        </setBody>\n                        <setHeader headerName=\"CamelHttpMethod\">\n                            <constant>DELETE</constant>\n                        </setHeader>\n                        <setHeader headerName=\"Content-Type\">\n                            <constant>application/json</constant>\n                        </setHeader>\n                        <setHeader headerName=\"X-ONAP-RequestID\">\n                            <simple>${exchangeProperty[X-ONAP-RequestID]}\n                            </simple>\n                        </setHeader>\n                        <setHeader headerName=\"X-ONAP-InvocationID\">\n                            <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                            </simple>\n                        </setHeader>\n                        <setHeader headerName=\"X-ONAP-PartnerName\">\n                            <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                            </simple>\n                        </setHeader>\n                        <log loggingLevel=\"INFO\"\n                             message=\"Endpoint to undeploy loop: {{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[microServicePolicy].getDcaeDeploymentId()}\"></log>\n                        <toD\n                                uri=\"{{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[microServicePolicy].getDcaeDeploymentId()}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=300000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n                        <convertBodyTo type=\"java.lang.String\"/>\n                        <setProperty propertyName=\"dcaeResponse\">\n                            <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                    method=\"convertDcaeResponse(${body})\"/>\n                        </setProperty>\n                        <setProperty propertyName=\"dcaeStatusUrl\">\n                            <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                    method=\"getStatusUrl(${exchangeProperty[dcaeResponse]})\"/>\n                        </setProperty>\n                        <to\n                                uri=\"bean:org.onap.clamp.policy.microservice.MicroServicePolicyService?method=updateDcaeDeploymentFields(${exchangeProperty[microServicePolicy]},null,${exchangeProperty[dcaeStatusUrl]})\"/>\n                        <to\n                                uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('Undeploy for the micro service: ${exchangeProperty[microServicePolicy].getName()} - ${header.CamelHttpResponseCode} : ${header.CamelHttpResponseText}','INFO','DCAE',${exchangeProperty[loopObject]})\"/>\n                    </when>\n                    <otherwise>\n                        <log loggingLevel=\"WARNING\"\n                             message=\"Cannot Undeploy for the micro service: ${exchangeProperty[microServicePolicy].getName()}, the Deployment ID does not exist !\"/>\n                        <to\n                                uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('Cannot Undeploy for the micro service: ${exchangeProperty[microServicePolicy].getName()}, the Deployment ID does not exist !','WARNING','DCAE',${exchangeProperty[loopObject]})\"/>\n                    </otherwise>\n                </choice>\n            </split>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>false</constant>\n                </handled>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>UNDEPLOY micro service failed\n                        (MicroService name:${exchangeProperty[microServicePolicy].getName()})\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>DCAE</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"undeploy-loop-single-blueprint\">\n        <from uri=\"direct:undeploy-loop-single-blueprint\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Undeploying the loop: ${exchangeProperty[loopObject].getName()} : ${exchangeProperty[loopObject].getDcaeDeploymentId()}\"/>\n        <to\n                uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Undeploying the loop')\"/>\n        <choice>\n            <when>\n                <simple>${exchangeProperty[loopObject].getDcaeDeploymentId()}\n                    != null\n                </simple>\n                <doTry>\n                    <setBody>\n                        <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                method=\"getUndeployPayload(${exchangeProperty[loopObject]})\"/>\n                    </setBody>\n                    <setHeader headerName=\"CamelHttpMethod\">\n                        <constant>DELETE</constant>\n                    </setHeader>\n                    <setHeader headerName=\"Content-Type\">\n                        <constant>application/json</constant>\n                    </setHeader>\n\n                    <setHeader headerName=\"X-ONAP-RequestID\">\n                        <simple>${exchangeProperty[X-ONAP-RequestID]}\n                        </simple>\n                    </setHeader>\n                    <setHeader headerName=\"X-ONAP-InvocationID\">\n                        <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                        </simple>\n                    </setHeader>\n                    <setHeader headerName=\"X-ONAP-PartnerName\">\n                        <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                        </simple>\n                    </setHeader>\n                    <log loggingLevel=\"INFO\"\n                         message=\"Endpoint to undeploy loop: {{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[loopObject].getDcaeDeploymentId()}\"></log>\n                    <toD\n                            uri=\"{{clamp.config.dcae.deployment.url}}/dcae-deployments/${exchangeProperty[loopObject].getDcaeDeploymentId()}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=300000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n                    <convertBodyTo type=\"java.lang.String\"/>\n                    <setProperty propertyName=\"dcaeResponse\">\n                        <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                method=\"convertDcaeResponse(${body})\"/>\n                    </setProperty>\n                    <setProperty propertyName=\"dcaeStatusUrl\">\n                        <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                                method=\"getStatusUrl(${exchangeProperty[dcaeResponse]})\"/>\n                    </setProperty>\n                    <to\n                            uri=\"bean:org.onap.clamp.loop.LoopService?method=updateDcaeDeploymentFields(${exchangeProperty[loopObject]},null,${exchangeProperty[dcaeStatusUrl]})\"/>\n                    <doFinally>\n                        <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                        <to\n                                uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                        <setProperty propertyName=\"logMessage\">\n                            <simple>UNDEPLOY loop status</simple>\n                        </setProperty>\n                        <setProperty propertyName=\"logComponent\">\n                            <simple>DCAE</simple>\n                        </setProperty>\n                        <to uri=\"direct:dump-loop-log-http-response\"/>\n                    </doFinally>\n                </doTry>\n            </when>\n            <otherwise>\n                <log loggingLevel=\"WARNING\"\n                     message=\"Cannot Undeploy for the loop: ${exchangeProperty[loopObject].getName()}, the Deployment ID does not exist !\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('Cannot Undeploy for the loop: ${exchangeProperty[loopObject].getName()}, the Deployment ID does not exist !','WARNING',${exchangeProperty[loopObject]})\"/>\n            </otherwise>\n        </choice>\n    </route>\n    <route id=\"get-dcae-deployment-status\">\n        <from uri=\"direct:get-dcae-deployment-status\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Getting DCAE deployment status for loop: ${exchangeProperty[loopObject].getName()} - ${exchangeProperty[dcaeComponent].getComponentName()}\"/>\n        <to\n                uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Getting Deployment status')\"/>\n        <doTry>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to query microservice deployment status: ${exchangeProperty[getStatusUrlModified]}\"></log>\n            <choice>\n                <when>\n                    <simple>${exchangeProperty[getStatusUrl].contains(\"?\")} == true\n                    </simple>\n                    <setProperty propertyName=\"uriSeparator\">\n                        <simple>&amp;</simple>\n                    </setProperty>\n                </when>\n                <otherwise>\n                    <setProperty propertyName=\"uriSeparator\">\n                        <simple>?</simple>\n                    </setProperty>\n                </otherwise>\n            </choice>\n            <toD\n                    uri=\"${exchangeProperty[getStatusUrl]}${exchangeProperty[uriSeparator]}bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=30000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>true</constant>\n                </handled>\n\n                <log loggingLevel=\"ERROR\"\n                     message=\"GET DCAE deployment request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET DCAE deployment request failed, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})\"/>\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>DCAE deployment status</simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>DCAE</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"get-dcae-blueprint-inventory\">\n        <from uri=\"direct:get-dcae-blueprint-inventory\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Getting DCAE blueprint id in inventory\"/>\n        <to\n                uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Getting blueprint id in inventory')\"/>\n        <doTry>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to query Dcae inventory Loop status: {{clamp.config.dcae.inventory.url}}/dcae-service-types?${header[CamelHttpQuery]}\"></log>\n            <toD\n                    uri=\"{{clamp.config.dcae.inventory.url}}/dcae-service-types?asdcResourceId=${exchangeProperty[blueprintResourceId]}&amp;asdcServiceId=${exchangeProperty[blueprintServiceId]}&amp;typeName=${exchangeProperty[blueprintName]}&amp;bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=30000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n\n    </route>\n    <route id=\"get-all-dcae-blueprint-inventory\">\n        <from uri=\"direct:get-all-dcae-blueprint-inventory\"/>\n        <log loggingLevel=\"INFO\"\n             message=\"Getting all DCAE blueprint from inventory\"/>\n        <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('DCAE', 'Getting all blueprint from inventory')\"/>\n        <doTry>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to query Blueprints from DCAE inventory: {{clamp.config.dcae.inventory.url}}/dcae-service-types?${header[CamelHttpQuery]}\"></log>\n            <toD uri=\"{{clamp.config.dcae.inventory.url}}/dcae-service-types;bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.dcae.deployment.userName}}&amp;authPassword={{clamp.config.dcae.deployment.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=30000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <setProperty propertyName=\"dcaeResponseList\">\n                <method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n                        method=\"convertToDcaeInventoryResponse(${body})\"/>\n            </setProperty>\n            <split>\n                <simple>${exchangeProperty[dcaeResponseList]}</simple>\n                <convertBodyTo type=\"org.onap.clamp.clds.model.dcae.DcaeInventoryResponse\"/>\n                <setProperty propertyName=\"dcaeResponse\">\n                    <simple>${body}</simple>\n                </setProperty>\n                <to uri=\"bean:org.onap.clamp.clds.model.dcae.DcaeInventoryCache?method=addDcaeInventoryResponse(${exchangeProperty[dcaeResponse]})\"/>\n            </split>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n</routes>",
            "src/main/resources/clds/camel/routes/loop-flows.xml": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n\t<route id=\"load-loop\">\n\t\t<from uri=\"direct:load-loop\" />\n\t\t<setBody>\n\t\t\t<simple>${header.loopName}</simple>\n\t\t</setBody>\n\t\t<setProperty propertyName=\"loopObject\">\n\t\t\t<method ref=\"org.onap.clamp.loop.LoopService\" method=\"getLoop\" />\n\t\t</setProperty>\n\n\t\t<when>\n\t\t\t<simple>${exchangeProperty[loopObject]} == null</simple>\n\t\t\t<setHeader headerName=\"CamelHttpResponseCode\">\n\t\t\t\t<constant>404</constant>\n\t\t\t</setHeader>\n\t\t\t<log loggingLevel=\"WARN\" message=\"Loop not found in database: ${body}\" />\n\t\t\t<stop />\n\t\t</when>\n\t</route>\n\t<route id=\"update-policy-status-for-loop\">\n\t\t<from uri=\"direct:update-policy-status-for-loop\" />\n\t\t<setProperty propertyName=\"policyComponent\">\n\t\t\t<simple>${exchangeProperty[loopObject].getComponent('POLICY')}\n\t\t\t</simple>\n\t\t</setProperty>\n\t\t<setProperty propertyName=\"policyFound\">\n\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t</setProperty>\n\t\t<setProperty propertyName=\"policyDeployed\">\n\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t</setProperty>\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"Processing all MICRO-SERVICES policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t<split>\n\t\t\t<simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n\t\t\t</simple>\n\t\t\t<setProperty propertyName=\"policyName\">\n\t\t\t\t<simple>${body.getName()}</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"policyType\">\n\t\t\t\t<simple>${body.getPolicyModel().getPolicyModelType()}</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"policyTypeVersion\">\n\t\t\t\t<simple>${body.getPolicyModel().getVersion()}</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"policyVersion\">\n\t\t\t\t<simple>1.0.0</simple>\n\t\t\t</setProperty>\n\t\t\t<setBody>\n\t\t\t\t<constant>null</constant>\n\t\t\t</setBody>\n\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\tmessage=\"Processing Micro Service Policy: ${exchangeProperty[policyName]} of type ${exchangeProperty[policyType]}\" />\n\t\t\t<to uri=\"direct:verify-one-policy\" />\n\t\t</split>\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"Processing all OPERATIONAL policies defined in loop ${exchangeProperty[loopObject].getName()}\" />\n\t\t<split>\n\t\t\t<simple>${exchangeProperty[loopObject].getOperationalPolicies()}\n\t\t\t</simple>\n\t\t\t<setProperty propertyName=\"policyName\">\n\t\t\t\t<simple>${body.getName()}</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"policyType\">\n\t\t\t\t<simple>${body.getPolicyModel().getPolicyModelType()}</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"policyTypeVersion\">\n\t\t\t\t<simple>${body.getPolicyModel().getVersion()}</simple>\n\t\t\t</setProperty>\n\t\t \t<setProperty propertyName=\"policyVersion\">\n\t\t\t\t<simple>1.0.0</simple>\n\t\t\t</setProperty>\n\t\t\t<setProperty propertyName=\"operationalPolicy\">\n\t\t\t\t<simple>${body}</simple>\n\t\t\t</setProperty>\n\t\t\t<setBody>\n\t\t\t\t<constant>null</constant>\n\t\t\t</setBody>\n\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\tmessage=\"Processing Operational Policy: ${exchangeProperty[policyName]} of type ${exchangeProperty[policyType]}\" />\n\t\t\t<to uri=\"direct:verify-one-policy\" />\n\t\t</split>\n\t\t<setProperty propertyName=\"policyState\">\n\t\t\t<simple> ${exchangeProperty[policyComponent].getState()}\n\t\t\t</simple>\n\t\t</setProperty>\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"Policy state set to: ${exchangeProperty[policyState].getStateName()}\" />\n\t\t<to\n\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('Policy state set to: ${exchangeProperty[policyState].getStateName()}','INFO','POLICY',${exchangeProperty[loopObject]})\" />\n\t</route>\n\t<route id=\"update-dcae-status-for-loop\">\n\t\t<from uri=\"direct:update-dcae-status-for-loop\" />\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"Updating DCAE status for loop: ${exchangeProperty[loopObject].getName()}\" />\n\t\t<choice>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == true\n\t\t\t\t</simple>\n\t\t\t\t\t<setProperty propertyName=\"dcaeComponent\">\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getComponent('DCAE')}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t<when>\n\t\t\t\t\t<simple>${exchangeProperty[loopObject].getDcaeDeploymentStatusUrl()} != null\n\t\t\t\t\t</simple>\n\t\t\t\t\t<setProperty propertyName=\"getStatusUrl\">\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getDcaeDeploymentStatusUrl()}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<to uri=\"direct:get-dcae-deployment-status\" />\n\t\t\t\t\t<when>\n\t\t\t\t\t\t<simple> ${header.CamelHttpResponseCode} == 200 </simple>\n\t\t\t\t\t\t<convertBodyTo type=\"java.lang.String\" />\n\t\t\t\t\t\t<setProperty propertyName=\"dcaeResponse\">\n\t\t\t\t\t\t\t<method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n\t\t\t\t\t\t\t\tmethod=\"convertDcaeResponse(${body})\" />\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t</when>\n\t\t\t\t</when>\n\t\t\t\t<setProperty propertyName=\"dcaeState\">\n\t\t\t\t\t<simple> ${exchangeProperty[dcaeComponent].computeState(*)}\n\t\t\t\t\t</simple>\n\t\t\t\t</setProperty>\n\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\tmessage=\"DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - DCAE message: ${exchangeProperty[dcaeResponse].getError()}\" />\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - message: ${exchangeProperty[dcaeResponse].getError()}','INFO','DCAE',${exchangeProperty[loopObject]})\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['loopObject'].getLoopTemplate().getUniqueBlueprint()} == false\n\t\t\t\t</simple>\n\t\t\t\t<split>\n\t\t\t\t\t<simple>${exchangeProperty[loopObject].getMicroServicePolicies()}\n\t\t\t\t\t</simple>\n\t\t\t\t\t<setProperty propertyName=\"microServicePolicy\">\n\t\t\t\t\t\t<simple>${body}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<setProperty propertyName=\"dcaeComponent\">\n\t\t\t\t\t\t<simple>${exchangeProperty[loopObject].getComponent('DCAE_' + ${exchangeProperty[microServicePolicy].getName()})}</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<when>\n\t\t\t\t\t\t<simple>${exchangeProperty[microServicePolicy].getDcaeDeploymentStatusUrl()} != null\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t\t<setProperty propertyName=\"getStatusUrl\">\n\t\t\t\t\t\t\t<simple>${exchangeProperty[microServicePolicy].getDcaeDeploymentStatusUrl()}</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t\t\t\t\t<simple resultType=\"java.lang.Boolean\">false</simple>\n\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t<to uri=\"direct:get-dcae-deployment-status\" />\n\t\t\t\t\t\t<when>\n\t\t\t\t\t\t\t<simple> ${header.CamelHttpResponseCode} == 200 </simple>\n\t\t\t\t\t\t\t<convertBodyTo type=\"java.lang.String\" />\n\t\t\t\t\t\t\t<setProperty propertyName=\"dcaeResponse\">\n\t\t\t\t\t\t\t\t<method ref=\"org.onap.clamp.loop.components.external.DcaeComponent\"\n\t\t\t\t\t\t\t\t\tmethod=\"convertDcaeResponse(${body})\" />\n\t\t\t\t\t\t\t</setProperty>\n\t\t\t\t\t\t</when>\n\t\t\t\t\t</when>\n\t\t\t\t\t<setProperty propertyName=\"dcaeState\">\n\t\t\t\t\t\t<simple> ${exchangeProperty[dcaeComponent].computeState(*)}\n\t\t\t\t\t\t</simple>\n\t\t\t\t\t</setProperty>\n\t\t\t\t\t<log loggingLevel=\"INFO\"\n\t\t\t\t\t\tmessage=\"DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - DCAE message: ${exchangeProperty[dcaeResponse].getError()}\" />\n\t\t\t\t\t<to\n\t\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('DCAE state set to: ${exchangeProperty[dcaeState].getStateName()} - message: ${exchangeProperty[dcaeResponse].getError()}','INFO','DCAE',${exchangeProperty[microServicePolicy]})\" />\n\t\t\t\t</split>>\n\t\t\t</when>\n\t\t</choice>\n\t\t</route>\n\t<route id=\"direct:update-loop-state\">\n\t\t<from uri=\"direct:update-loop-state\" />\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"Updating status for loop: ${exchangeProperty[loopObject].getName()}\" />\n\t\t<choice>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'BLUEPRINT_DEPLOYED' and ${exchangeProperty['policyState'].getStateName()}\n\t\t\t\t\t== 'NOT_SENT'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'DESIGN')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} == 'IN_ERROR' or\n\t\t\t\t\t${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_INSTALLATION_FAILED'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'IN_ERROR')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_UNINSTALLATION_FAILED' or\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} == 'IN_ERROR'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'IN_ERROR')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_INSTALLED_SUCCESSFULLY' and\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'RUNNING')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_INSTALLED_SUCCESSFULLY' and\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} == 'SENT'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'STOPPED')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'BLUEPRINT_DEPLOYED' or ${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_UNINSTALLED_SUCCESSFULLY' and\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'SUBMITTED')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'PROCESSING_MICROSERVICE_INSTALLATION' or\n\t\t\t\t\t${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'PROCESSING_MICROSERVICE_UNINSTALLATION' and\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} == 'SENT_AND_DEPLOYED'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'WAITING')\" />\n\t\t\t</when>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty['dcaeState'].getStateName()} ==\n\t\t\t\t\t'MICROSERVICE_INSTALLED_SUCCESSFULLY' and\n\t\t\t\t\t${exchangeProperty['policyState'].getStateName()} != 'NOT_SENT'\n\t\t\t\t</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.LoopService?method=updateLoopState(${exchangeProperty[loopObject]},'DEPLOYED')\" />\n\t\t\t</when>\n\t\t</choice>\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"New loop state is: ${exchangeProperty[loopObject].getLastComputedState().toString()}\" />\n\t\t<to\n\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('New loop state is: ${exchangeProperty[loopObject].getLastComputedState().toString()}','INFO',${exchangeProperty[loopObject]})\" />\n\n\t</route>\n</routes>",
            "src/main/resources/clds/camel/routes/policy-flows.xml": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n    <route id=\"verify-one-policy\">\n        <from uri=\"direct:verify-one-policy\"/>\n        <setProperty propertyName=\"raiseHttpExceptionFlag\">\n            <simple resultType=\"java.lang.Boolean\">false</simple>\n        </setProperty>\n        <to uri=\"direct:get-policy\"/>\n        <when>\n            <simple>${header.CamelHttpResponseCode} != 200</simple>\n            <setProperty propertyName=\"policyFound\">\n                <simple resultType=\"java.lang.Boolean\">false</simple>\n            </setProperty>\n            <log loggingLevel=\"WARN\"\n                 message=\"At least one policy has not been found on policy engine: ${exchangeProperty[policyName]}\"/>\n        </when>\n        <setProperty propertyName=\"raiseHttpExceptionFlag\">\n            <simple resultType=\"java.lang.Boolean\">false</simple>\n        </setProperty>\n        <to uri=\"direct:get-deployment-policy\"/>\n        <when>\n            <simple>${header.CamelHttpResponseCode} != 200</simple>\n            <setProperty propertyName=\"policyDeployed\">\n                <simple resultType=\"java.lang.Boolean\">false</simple>\n            </setProperty>\n            <log loggingLevel=\"WARN\"\n                 message=\"At least one policy has not been deployed on policy engine: ${exchangeProperty[policyName]}\"/>\n        </when>\n        <setProperty propertyName=\"newPolicyState\">\n            <simple>${exchangeProperty[policyComponent].computeState(*)}</simple>\n        </setProperty>\n    </route>\n\n    <route id=\"get-policy\">\n        <from uri=\"direct:get-policy\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Getting Policy: ${exchangeProperty[policyName]}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Get Policy')\"/>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to get policy: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyType]}/versions/${exchangeProperty[policyTypeVersion]}/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyType]}/versions/${exchangeProperty[policyTypeVersion]}/policies/${exchangeProperty[policyName]}/versions/${exchangeProperty[policyVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>true</constant>\n                </handled>\n\n                <log loggingLevel=\"ERROR\"\n                     message=\"GET policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n                <to\n                        uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET policy request failed, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})\" />\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>${exchangeProperty[policyName]} GET\n                        Policy status\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n\n    <route id=\"get-deployment-policy\">\n        <from uri=\"direct:get-deployment-policy\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Getting the policy deployment in PDP: ${exchangeProperty[policyName]}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the policy deployment in PDP')\"/>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to get policy deployment status: {{clamp.config.policy.pap.url}}/policy/pap/v1/policies/deployed/${exchangeProperty[policyName]}/1.0.0\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.pap.url}}/policy/pap/v1/policies/deployed/${exchangeProperty[policyName]}/1.0.0?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>true</constant>\n                </handled>\n\n                <log loggingLevel=\"ERROR\"\n                     message=\"GET policy request FAILED for loop: ${header.loopName}, ${exception.stacktrace}\" />\n                <to\n                        uri=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('GET policy request failed, Error reported: ${exception.message}','ERROR',${exchangeProperty[loopObject]})\" />\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>${exchangeProperty[policyName]} GET Policy deployment\n                        status\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"get-all-policy-models\">\n        <from uri=\"direct:get-all-policy-models\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\" message=\"Getting all the policy models\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting all the policy models')\"/>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to get all policy models: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.api.url}}/policy/api/v1/policytypes?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"get-policy-model\">\n        <from uri=\"direct:get-policy-model\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Getting the policy model: ${exchangeProperty[policyModelName]}/${exchangeProperty[policyModelVersion]}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the policy model')\"/>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to get policy model: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelName]}/versions/${exchangeProperty[policyModelVersion]}\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policyModelName]}/versions/${exchangeProperty[policyModelVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"create-policy\">\n        <from uri=\"direct:create-policy\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Creating Policy: ${exchangeProperty[policy].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Create Policy')\"/>\n            <setBody>\n                <simple>${exchangeProperty[policy].createPolicyPayload()}\n                </simple>\n            </setBody>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>POST</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to create policy: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policy].getPolicyModel().getPolicyModelType()}/versions/${exchangeProperty[policy].getPolicyModel().getVersion()}/policies\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policy].getPolicyModel().getPolicyModelType()}/versions/${exchangeProperty[policy].getPolicyModel().getVersion()}/policies?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>${exchangeProperty[policy].getName()} creation\n                        status\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n\n    <route id=\"delete-policy\">\n        <from uri=\"direct:delete-policy\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Deleting Policy: ${exchangeProperty[policy].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Delete Policy')\"/>\n            <setBody>\n                <constant>null</constant>\n            </setBody>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>DELETE</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <setProperty propertyName=\"policyVersion\">\n                <simple>1.0.0</simple>\n            </setProperty>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to delete policy: {{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policy].getPolicyModel().getPolicyModelType()}/versions/${exchangeProperty[policy].getPolicyModel().getVersion()}/policies/${exchangeProperty[policy].getName()}/versions/${exchangeProperty[policyVersion]}\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.api.url}}/policy/api/v1/policytypes/${exchangeProperty[policy].getPolicyModel().getPolicyModelType()}/versions/${exchangeProperty[policy].getPolicyModel().getVersion()}/policies/${exchangeProperty[policy].getName()}/versions/${exchangeProperty[policyVersion]}?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;deleteWithBody=false&amp;mapHttpMessageBody=false&amp;mapHttpMessageFormUrlEncodedBody=false&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>${exchangeProperty[policy].getName()} removal\n                        status\n                    </simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"add-all-to-active-pdp-group\">\n        <from uri=\"direct:add-all-to-active-pdp-group\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Adding loop policies to PDP Group: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Add policies to PDP group')\"/>\n            <setBody>\n                <simple>\n                    ${exchangeProperty[loopObject].getComponent(\"POLICY\").createPoliciesPayloadPdpGroup(exchangeProperty[loopObject],\"POST\")}\n                </simple>\n            </setBody>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>POST</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to add policies to PDP Group: {{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch?bridgeEndpoint=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;useSystemProperties=true&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>PDP Group push ALL status</simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n\n    <route id=\"remove-all-policy-from-active-pdp-group\">\n        <from uri=\"direct:remove-all-policy-from-active-pdp-group\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Removing loop policies from PDP Group: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Remove policies from PDP group')\"/>\n            <setBody>\n                <simple>\n                    ${exchangeProperty[loopObject].getComponent(\"POLICY\").createPoliciesPayloadPdpGroup(exchangeProperty[loopObject],\"DELETE\")}\n                </simple>\n            </setBody>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>POST</constant>\n            </setHeader>\n            <setHeader headerName=\"Content-Type\">\n                <constant>application/json</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to remove policies from PDP Group: {{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/deployments/batch?bridgeEndpoint=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;useSystemProperties=true&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>PDP Group remove ALL status</simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"get-all-pdp-groups\">\n        <from uri=\"direct:get-all-pdp-groups\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Getting the list of PDP Groups\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Getting the PDP Group list')\"/>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>GET</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to get policy model: {{clamp.config.policy.pap.url}}/policy/pap/v1/pdps\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps?bridgeEndpoint=true&amp;useSystemProperties=true&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authMethod=Basic&amp;authUsername={{clamp.config.policy.api.userName}}&amp;authPassword={{clamp.config.policy.api.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <convertBodyTo type=\"java.lang.String\"/>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n    <route id=\"remove-one-policy-from-active-pdp-group\">\n        <from uri=\"direct:remove-one-policy-from-active-pdp-group\"/>\n        <doTry>\n            <log loggingLevel=\"INFO\"\n                 message=\"Removing policy from active PDP group for loop: ${exchangeProperty[loopObject].getName()}\"/>\n            <to\n                    uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeLog('Policy', 'Removing one policy PDP group')\"/>\n            <setBody>\n                <constant>null</constant>\n            </setBody>\n            <setHeader headerName=\"CamelHttpMethod\">\n                <constant>DELETE</constant>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-RequestID\">\n                <simple>${exchangeProperty[X-ONAP-RequestID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-InvocationID\">\n                <simple>${exchangeProperty[X-ONAP-InvocationID]}\n                </simple>\n            </setHeader>\n            <setHeader headerName=\"X-ONAP-PartnerName\">\n                <simple>${exchangeProperty[X-ONAP-PartnerName]}\n                </simple>\n            </setHeader>\n            <log loggingLevel=\"INFO\"\n                 message=\"Endpoint to delete policy from PDP Group: {{clamp.config.policy.pap.url}}/pdps/policies/${exchangeProperty[policyName]}/versions/1.0.0\"></log>\n            <toD\n                    uri=\"{{clamp.config.policy.pap.url}}/policy/pap/v1/pdps/policies/${exchangeProperty[policyName]}/versions/1.0.0?bridgeEndpoint=true&amp;useSystemProperties=true&amp;mapHttpMessageHeaders=false&amp;throwExceptionOnFailure=${exchangeProperty[raiseHttpExceptionFlag]}&amp;authUsername={{clamp.config.policy.pap.userName}}&amp;authPassword={{clamp.config.policy.pap.password}}&amp;httpClient.connectTimeout=10000&amp;httpClient.socketTimeout=20000&amp;authenticationPreemptive=true&amp;connectionClose=true\"/>\n            <setProperty propertyName=\"logMessage\">\n                <simple>${exchangeProperty[policyName]} PDP Group removal status\n                </simple>\n            </setProperty>\n            <setProperty propertyName=\"logComponent\">\n                <simple>POLICY</simple>\n            </setProperty>\n            <to uri=\"direct:dump-loop-log-http-response\"/>\n            <doCatch>\n                <exception>java.lang.Exception</exception>\n                <handled>\n                    <constant>false</constant>\n                </handled>\n                <setProperty propertyName=\"logMessage\">\n                    <simple>PDP Group removal, Error reported: ${exception}</simple>\n                </setProperty>\n                <setProperty propertyName=\"logComponent\">\n                    <simple>POLICY</simple>\n                </setProperty>\n                <to uri=\"direct:dump-loop-log-http-response\"/>\n            </doCatch>\n            <doFinally>\n                <to uri=\"direct:reset-raise-http-exception-flag\"/>\n                <to\n                        uri=\"bean:org.onap.clamp.flow.log.FlowLogOperation?method=invokeReturnLog()\"/>\n            </doFinally>\n        </doTry>\n    </route>\n</routes>",
            "src/main/resources/clds/camel/routes/utils-flows.xml": "<routes xmlns=\"http://camel.apache.org/schema/spring\">\n\t<route id=\"reset-raise-http-exception-flag\">\n\t\t<from uri=\"direct:reset-raise-http-exception-flag\" />\n\t\t<setProperty propertyName=\"raiseHttpExceptionFlag\">\n\t\t\t<simple resultType=\"java.lang.Boolean\">true</simple>\n\t\t</setProperty>\n\t</route>\n\n\t<route id=\"dump-loop-log-http-response\">\n\t\t<from uri=\"direct:dump-loop-log-http-response\" />\n\t\t<log loggingLevel=\"INFO\"\n\t\t\tmessage=\"${exchangeProperty[logMessage]} - ${header.CamelHttpResponseCode} : ${header.CamelHttpResponseText}\" />\n\t\t<choice>\n\t\t\t<when>\n\t\t\t\t<simple>${exchangeProperty[logComponent]} == null</simple>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLog('${exchangeProperty[logMessage]} - ${header.CamelHttpResponseCode} : ${header.CamelHttpResponseText}','INFO',${exchangeProperty[loopObject]})\" />\n\t\t\t</when>\n\t\t\t<otherwise>\n\t\t\t\t<to\n\t\t\t\t\turi=\"bean:org.onap.clamp.loop.log.LoopLogService?method=addLogForComponent('${exchangeProperty[logMessage]} - ${header.CamelHttpResponseCode} : ${header.CamelHttpResponseText}','INFO','${exchangeProperty[logComponent]}',${exchangeProperty[loopObject]})\" />\n\t\t\t\t<setProperty propertyName=\"logComponent\">\n\t\t\t\t\t<constant>null</constant>\n\t\t\t\t</setProperty>\n\t\t\t</otherwise>\n\t\t</choice>\n\t</route>\n</routes>",
            "src/main/resources/clds/clds-users.json": " [{\n\t\"user\":\"admin\",\n\t\"password\":\"$2a$10$H/e21kl04Dw9C978CHuM7OewyMGUN5WGzAAx7SgIaR4ix8.wTcssi\",\n\t\"permissions\":\n\t            [\n\t               \"org.onap.clamp.clds.cl|dev|read\",\n\t               \"org.onap.clamp.clds.cl|dev|update\",\n\t               \"org.onap.clamp.clds.cl.manage|dev|*\",\n\t               \"org.onap.clamp.clds.cl.event|dev|*\",\n\t               \"org.onap.clamp.clds.filter.vf|dev|*\",\n\t               \"org.onap.clamp.clds.template|dev|read\",\n\t               \"org.onap.clamp.clds.template|dev|update\",\n\t               \"org.onap.clamp.clds.tosca|dev|read\",\n\t               \"org.onap.clamp.clds.tosca|dev|update\"\n\t            ]\n\t},\n\t{\n\t\"user\":\"cs0008\",\n\t\"password\":\"$2a$10$H/e21kl04Dw9C978CHuM7OewyMGUN5WGzAAx7SgIaR4ix8.wTcssi\",\n\t\"permissions\":\n\t            [\n\t               \"org.onap.clamp.clds.cl|dev|read\",\n\t               \"org.onap.clamp.clds.cl|dev|update\",\n\t               \"org.onap.clamp.clds.cl.manage|dev|*\",\n\t               \"org.onap.clamp.clds.filter.vf|dev|*\",\n\t               \"org.onap.clamp.clds.template|dev|read\",\n\t               \"org.onap.clamp.clds.template|dev|update\",\n\t               \"org.onap.clamp.clds.tosca|dev|read\",\n\t               \"org.onap.clamp.clds.tosca|dev|update\"\n\t            ]\n\t}\n]\n",
            "src/main/resources/clds/json-schema/operational_policies/operational_policy.json": "{\n  \"type\": \"object\",\n  \"title\": \"Configuration\",\n  \"required\": [\n    \"operational_policy\"\n  ],\n  \"properties\": {\n    \"operational_policy\": {\n      \"type\": \"object\",\n      \"title\": \"Related Parameters\",\n      \"required\": [\n        \"controlLoop\",\n        \"policies\"\n      ],\n      \"properties\": {\n        \"controlLoop\": {\n          \"type\": \"object\",\n          \"title\": \"Control Loop details\",\n          \"required\": [\n            \"timeout\",\n            \"abatement\",\n            \"trigger_policy\",\n            \"controlLoopName\"\n          ],\n          \"properties\": {\n            \"timeout\": {\n              \"type\": \"string\",\n              \"title\": \"Overall Time Limit\",\n              \"default\": \"0\",\n              \"format\": \"number\"\n            },\n            \"abatement\": {\n              \"type\": \"string\",\n              \"title\": \"Abatement\",\n              \"enum\": [\n                \"True\",\n                \"False\"\n              ]\n            },\n            \"trigger_policy\": {\n              \"type\": \"string\",\n              \"title\": \"Policy Decision Entry\"\n            },\n            \"controlLoopName\": {\n              \"type\": \"string\",\n              \"title\": \"Control loop name\",\n              \"readOnly\": \"True\"\n            }\n          }\n        },\n        \"policies\": {\n          \"uniqueItems\": \"true\",\n          \"id\": \"policies_array\",\n          \"type\": \"array\",\n          \"title\": \"Policy Decision Tree\",\n          \"format\": \"tabs-top\",\n          \"items\": {\n            \"title\": \"Policy Decision\",\n            \"type\": \"object\",\n            \"id\": \"policy_item\",\n            \"headerTemplate\": \"{{self.id}} - {{self.recipe}}\",\n            \"format\": \"categories\",\n            \"basicCategoryTitle\": \"recipe\",\n            \"required\": [\n              \"id\",\n              \"retry\",\n              \"timeout\",\n              \"actor\",\n              \"success\",\n              \"failure\",\n              \"failure_timeout\",\n              \"failure_retries\",\n              \"failure_exception\",\n              \"failure_guard\",\n              \"target\"\n            ],\n            \"properties\": {\n              \"id\": {\n                \"default\": \"Policy 1\",\n                \"title\": \"Policy ID\",\n                \"type\": \"string\"\n              },\n              \"retry\": {\n                \"default\": \"0\",\n                \"title\": \"Number of Retry\",\n                \"type\": \"string\",\n                \"format\": \"number\"\n              },\n              \"timeout\": {\n                \"default\": \"0\",\n                \"title\": \"Timeout\",\n                \"type\": \"string\",\n                \"format\": \"number\"\n              },\n              \"actor\": {\n                \"type\": \"object\",\n                \"title\": \"Actor\",\n                \"anyOf\": [\n                  {\n                    \"title\": \"APPC\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"actor\": {\n                        \"title\": \"actor\",\n                        \"type\": \"string\",\n                        \"default\": \"APPC\",\n                        \"options\": {\n                          \"hidden\": true\n                        }\n                      },\n                      \"recipe\": {\n                        \"title\": \"recipe\",\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"enum\": [\n                          \"Restart\",\n                          \"Rebuild\",\n                          \"Migrate\",\n                          \"Health-Check\",\n                          \"ModifyConfig\"\n                        ]\n                      },\n                      \"payload\": {\n                        \"title\": \"Payload (YAML)\",\n                        \"type\": \"string\",\n                        \"format\": \"textarea\"\n                      }\n                    }\n                  },\n                  {\n                    \"title\": \"SO\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"actor\": {\n                        \"title\": \"actor\",\n                        \"type\": \"string\",\n                        \"default\": \"SO\",\n                        \"options\": {\n                          \"hidden\": true\n                        }\n                      },\n                      \"recipe\": {\n                        \"title\": \"recipe\",\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"enum\": [\n                          \"VF Module Create\",\n                          \"VF Module Delete\"\n                        ]\n                      },\n                      \"payload\": {\n                        \"title\": \"Payload (YAML)\",\n                        \"type\": \"string\",\n                        \"format\": \"textarea\"\n                      }\n                    }\n                  },\n                  {\n                    \"title\": \"SDNC\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"actor\": {\n                        \"title\": \"actor\",\n                        \"type\": \"string\",\n                        \"default\": \"SDNC\",\n                        \"options\": {\n                          \"hidden\": true\n                        }\n                      },\n                      \"recipe\": {\n                        \"title\": \"recipe\",\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"enum\": [\n                          \"Reroute\",\n                          \"BandwidthOnDemand\"\n                        ]\n                      },\n                      \"payload\": {\n                        \"title\": \"Payload (YAML)\",\n                        \"type\": \"string\",\n                        \"format\": \"textarea\"\n                      }\n                    }\n                  },\n                  {\n                    \"title\": \"VFC\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"actor\": {\n                        \"title\": \"actor\",\n                        \"type\": \"string\",\n                        \"default\": \"VFC\",\n                        \"options\": {\n                          \"hidden\": true\n                        }\n                      },\n                      \"recipe\": {\n                        \"title\": \"recipe\",\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"enum\": [\n                          \"ModifyConfig\"\n                        ]\n                      },\n                      \"payload\": {\n                        \"title\": \"Payload (YAML)\",\n                        \"type\": \"string\",\n                        \"format\": \"textarea\"\n                      }\n                    }\n                  },\n                  {\n                    \"title\": \"CDS\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"actor\": {\n                        \"title\": \"actor\",\n                        \"type\": \"string\",\n                        \"default\": \"CDS\",\n                        \"options\": {\n                          \"hidden\": true\n                        }\n                      },\n                      \"recipe\": {\n                        \"title\": \"recipe\",\n                        \"type\": \"object\",\n                        \"anyOf\": [\n                          {\n                            \"title\": \"user-defined\",\n                            \"type\": \"object\",\n                            \"properties\": {\n                              \"recipe\": {\n                                \"title\": \"recipe\",\n                                \"type\": \"string\",\n                                \"default\": \"user-defined\",\n                                \"format\": \"textarea\"\n                              },\n                              \"payload\": {\n                                \"title\": \"Payload (YAML)\",\n                                \"type\": \"string\",\n                                \"default\": \"\",\n                                \"format\": \"textarea\"\n                              }\n                            }\n                          }\n                        ]\n                      }\n                    }\n                  }\n                ]\n              },\n              \"success\": {\n                \"default\": \"final_success\",\n                \"title\": \"When Success\",\n                \"type\": \"string\"\n              },\n              \"failure\": {\n                \"default\": \"final_failure\",\n                \"title\": \"When Failure\",\n                \"type\": \"string\"\n              },\n              \"failure_timeout\": {\n                \"default\": \"final_failure_timeout\",\n                \"title\": \"When Failure Timeout\",\n                \"type\": \"string\"\n              },\n              \"failure_retries\": {\n                \"default\": \"final_failure_retries\",\n                \"title\": \"When Failure Retries\",\n                \"type\": \"string\"\n              },\n              \"failure_exception\": {\n                \"default\": \"final_failure_exception\",\n                \"title\": \"When Failure Exception\",\n                \"type\": \"string\"\n              },\n              \"failure_guard\": {\n                \"default\": \"final_failure_guard\",\n                \"title\": \"When Failure Guard\",\n                \"type\": \"string\"\n              },\n              \"target\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"type\",\n                  \"resourceID\"\n                ],\n                \"anyOf\": [\n                  {\n                    \"title\": \"User Defined\",\n                    \"additionalProperties\": \"True\",\n                    \"properties\": {\n                      \"type\": {\n                        \"title\": \"Target type\",\n                        \"type\": \"string\",\n                        \"default\": \"\",\n                        \"enum\": [\n                          \"VNF\",\n                          \"VFMODULE\",\n                          \"VM\"\n                        ]\n                      },\n                      \"resourceID\": {\n                        \"title\": \"Target type\",\n                        \"type\": \"string\",\n                        \"default\": \"\"\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
            "src/main/resources/clds/sdc-controllers-config.json": "{\n  \"sdc-connections\":{\n    \"sdc-controller\":{\n        \"user\": \"clamp\",\n        \"consumerGroup\": \"clamp\",\n        \"consumerId\": \"clamp\",\n        \"environmentName\": \"AUTO\",\n        \"sdcAddress\": \"sdc.api.simpledemo.onap.org:8443\",\n        \"password\": \"b7acccda32b98c5bb7acccda32b98c5b05D511BD6D93626E90D18E9D24D9B78CD34C7EE8012F0A189A28763E82271E50A5D4EC10C7D93E06E0A2D27CAE66B981\",\n        \"pollingInterval\":30,\n        \"pollingTimeout\":30,\n        \"activateServerTLSAuth\":\"false\",\n        \"keyStorePassword\":\"\",\n        \"keyStorePath\":\"\",\n        \"messageBusAddresses\":[\"ueb.api.simpledemo.onap.org\"]\n    }\n  }\n}\n",
            "src/main/resources/clds/tosca-converter/templates.json": "{\n\t\"integer\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"integer\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"enum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"multipleOf\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maximum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"exclusiveMaximum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minimum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"exclusiveMinimum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"number\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"number\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"enum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"multipleOf\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maximum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"exclusiveMaximum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minimum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"exclusiveMinimum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"boolean\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"boolean\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"string\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"string\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"enum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"length\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minLength\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maxLength\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"pattern\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"format\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"timestamp\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"string\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"enum\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"length\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minLength\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maxLength\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"pattern\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"format\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"array\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"array\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"deprecated\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"default\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"const\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"uniqueItems\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"properties\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minContains\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maxContains\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minItems\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maxItems\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t},\n\t\"object\":{\n\t\t\"type\":{\n\t\t\t\"defaultValue\":\"object\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"description\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":true\n\t\t},\n\t\t\"title\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"format\":{\n\t\t\t\"defaultValue\":\"tabs\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":true\n\t\t},\n\t\t\"required\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"minProperties\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"maxProperties\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"properties\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"dependentRequired\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t},\n\t\t\"dependencies\":{\n\t\t\t\"defaultValue\":\"\",\n\t\t\t\"visible\":true,\n\t\t\t\"static\":false\n\t\t}\n\t}\n}",
            "src/main/resources/logback-default.xml": "<included>\n\t<jmxConfigurator />\n\t<!-- Example evaluator filter applied against console appender -->\n\t<property\n\t\tname=\"p_tim\"\n\t\tvalue=\"%d{&quot;yyyy-MM-dd'T'HH:mm:ss.SSSXXX&quot;, UTC}\" />\n\t<property\n\t\tname=\"p_lvl\"\n\t\tvalue=\"%level\" />\n\t<property\n\t\tname=\"p_log\"\n\t\tvalue=\"%logger\" />\n\t<property\n\t\tname=\"p_mdc\"\n\t\tvalue=\"%replace(%replace(%mdc){'\\t','\\\\\\\\t'}){'\\n', '\\\\\\\\n'}\" />\n\t<property\n\t\tname=\"p_msg\"\n\t\tvalue=\"%replace(%replace(%msg){'\\t', '\\\\\\\\t'}){'\\n','\\\\\\\\n'}\" />\n\t<property\n\t\tname=\"p_exc\"\n\t\tvalue=\"%replace(%replace(%rootException){'\\t', '\\\\\\\\t'}){'\\n','\\\\\\\\n'}\" />\n\t<property\n\t\tname=\"p_mak\"\n\t\tvalue=\"%replace(%replace(%marker){'\\t', '\\\\\\\\t'}){'\\n','\\\\\\\\n'}\" />\n\t<property\n\t\tname=\"p_thr\"\n\t\tvalue=\"%thread\" />\n\t<property\n\t\tname=\"defaultPattern\"\n\t\tvalue=\"%nopexception${p_tim}\\t${p_thr}\\t${p_lvl}\\t${p_log}\\t${p_mdc}\\t${p_msg}\\t${p_exc}\\t${p_mak}\\t%n\" />\n\t<property\n\t\tname=\"debugPattern\"\n\t\tvalue=\"%nopexception${p_tim}|${p_lvl}|${p_mdc}|${p_exc}|%msg%n\" />\n\t\t\n\t<property\n\t\tname=\"errorPattern\"\n\t\tvalue=\"%X{EntryTimestamp}|%X{RequestID}|%thread|%X{ServiceName}|%X{PartnerName}|%X{TargetEntity}|%X{TargetServiceName}||||%msg%n\" />\n\t\t\n\t<property\n\t\tname=\"auditPattern\"\n\t\tvalue=\"%X{EntryTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX,UTC}|%X{RequestID}|%X{ServiceInstanceId}|%thread|%X{VirtualServerName}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{Severity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%marker|%mdc|||%msg%n\" />\n\t\t\n\t<property\n\t\tname=\"metricPattern\"\n\t\tvalue=\"%X{InvokeTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX,UTC}|%X{RequestID}|%X{ServiceInstanceId}|%thread||%X{ServiceName}|%X{PartnerName}|%X{TargetEntity}|%X{TargetServiceName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDesc}|%X{InstanceUUID}|%.-5level|%X{Severity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}||||%X{TargetVirtualEntity}|%marker|%mdc|||%msg%n\" />\n\n\n\t<!-- Example evaluator filter applied against console appender -->\n\t<appender\n\t\tname=\"STDOUT\"\n\t\tclass=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t\t<level>INFO</level>\n\t\t</filter>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n\n\t\t\t</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender\n\t\tname=\"ERROR\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <level>ERROR</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n\t\t<file>${logDirectory}/error.log</file>\n\t\t<append>true</append>\n\t\t<encoder>\n\t\t\t<pattern>${errorPattern}</pattern>\n\t\t</encoder>\n\t\t<rollingPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${logDirectory}/error.%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</fileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t</appender>\n\n\t<appender\n\t\tname=\"DEBUG\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${logDirectory}/debug.log</file>\n\t\t<append>true</append>\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{1024} - %msg%n\n\t\t\t</pattern>\n\t\t</encoder>\n\t\t<rollingPolicy\n\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${logDirectory}/debug.%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</fileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t</appender>\n\n\n\t<appender\n\t\tname=\"AUDIT\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\">\n            <evaluator class=\"ch.qos.logback.classic.boolex.OnMarkerEvaluator\">\n                <marker>ENTRY</marker>\n                <marker>EXIT</marker>\n            </evaluator>\n            <onMismatch>DENY</onMismatch>\n            <onMatch>ACCEPT</onMatch>\n        </filter>\n\t\t<file>${logDirectory}/audit.log</file>\n\t\t<append>true</append>\n\t\t<encoder>\n\t\t\t<pattern>${auditPattern}</pattern>\n\t\t</encoder>\n\t\t<rollingPolicy\n\t\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<FileNamePattern>${logDirectory}/audit.%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</FileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t</appender>\n\t<appender\n\t\tname=\"asyncEELFAudit\"\n\t\tclass=\"ch.qos.logback.classic.AsyncAppender\">\n\t\t<queueSize>256</queueSize>\n\t\t<appender-ref ref=\"AUDIT\" />\n\t</appender>\n\n\t<appender\n\t\tname=\"METRIC\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\">\n            <evaluator class=\"ch.qos.logback.classic.boolex.OnMarkerEvaluator\">\n                <marker>INVOKE</marker>\n                <marker>INVOKE-RETURN</marker>\n            </evaluator>\n            <onMismatch>DENY</onMismatch>\n            <onMatch>ACCEPT</onMatch>\n        </filter>\n\t\t<file>${logDirectory}/metric.log</file>\n\t\t<append>true</append>\n\t\t<encoder>\n\t\t\t<pattern>${metricPattern}</pattern>\n\t\t</encoder>\n\t\t<rollingPolicy\n\t\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<FileNamePattern>${logDirectory}/metric.%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</FileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t</appender>\n\n\t<appender\n\t\tname=\"asyncEELFMetrics\"\n\t\tclass=\"ch.qos.logback.classic.AsyncAppender\">\n\t\t<queueSize>256</queueSize>\n\t\t<appender-ref ref=\"METRIC\" />\n\t</appender>\n\n\t<!-- SECURITY related loggers -->\n\t<appender\n\t\tname=\"SECURITY\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<file>${logDirectory}/security.log</file>\n\t\t<append>true</append>\n\t\t<encoder>\n\t\t\t<pattern>%X{EntryTimestamp}|%date{yyyy-MM-dd'T'HH:mm:ss.SSSXXX,UTC}|%X{RequestID}|%X{ServiceInstanceId}|%.20thread|%X{VirtualServerName}|%X{ServiceName}|%X{PartnerName}|%X{StatusCode}|%X{ResponseCode}|%X{ResponseDescription}|%X{InstanceUUID}|%.-5level|%X{AlertSeverity}|%X{ServerIPAddress}|%X{ElapsedTime}|%X{ServerFQDN}|%X{RemoteHost}|%X{ClassName}|%X{Unused}|%X{ProcessKey}|%X{CustomField1}|%X{CustomField2}|%X{CustomField3}|%X{CustomField4}|%msg%n\n\t\t\t</pattern>\n\t\t</encoder>\n\t\t<rollingPolicy\n\t\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<FileNamePattern>${logDirectory}/security.%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</FileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t</appender>\n\n\t<appender\n\t\tname=\"asyncEELFSecurity\"\n\t\tclass=\"ch.qos.logback.classic.AsyncAppender\">\n\t\t<queueSize>256</queueSize>\n\t\t<appender-ref ref=\"SECURITY\" />\n\t</appender>\n\t<!-- logback jms appenders & loggers definition starts here -->\n\t<appender\n\t\tname=\"auditLogs\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t</filter>\n\t\t<file>${logDirectory}/Audits.log</file>\n\t\t<rollingPolicy\n\t\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${logDirectory}/Audits-%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</fileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>\"%d [%thread] %-5level %logger{1024} - %msg%n\"</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<appender\n\t\tname=\"perfLogs\"\n\t\tclass=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n\t\t<filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n\t\t</filter>\n\t\t<file>${logDirectory}/Perform.log</file>\n\t\t<rollingPolicy\n\t\t\t\tclass=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n\t\t\t<fileNamePattern>${logDirectory}/Perform--%d{yyyy-MM-dd}.%i.log.zip\n\t\t\t</fileNamePattern>\n\t\t\t<maxFileSize>50MB</maxFileSize>\n\t\t\t<maxHistory>20</maxHistory>\n\t\t\t<totalSizeCap>1GB</totalSizeCap>\n\t\t</rollingPolicy>\n\t\t<encoder>\n\t\t\t<pattern>\"%d [%thread] %-5level %logger{1024} - %msg%n\"</pattern>\n\t\t</encoder>\n\t</appender>\n\n\t<logger\n\t\tname=\"org.onap.aaf\"\n\t\tlevel=\"DEBUG\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\t<logger\n\t\t\tname=\"org.hibernate\"\n\t\t\tlevel=\"INFO\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\t<logger\n\t\t\tname=\"org.apache.camel.Tracing\"\n\t\t\tlevel=\"INFO\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\n\t<logger\n\t\tname=\"org.apache\"\n\t\tlevel=\"INFO\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\t<!-- Spring related loggers -->\n\t<logger\n\t\tname=\"org.springframework\"\n\t\tlevel=\"INFO\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\n\t<!-- CLAMP related loggers -->\n\t<logger\n\t\tname=\"org.onap.clamp\"\n\t\tlevel=\"DEBUG\">\n\t\t<appender-ref ref=\"ERROR\" />\n\t\t<appender-ref ref=\"DEBUG\" />\n\t</logger>\n\n\t<logger\n\t\tname=\"com.att.eelf.error\"\n\t\tlevel=\"OFF\">\n\t\t<appender-ref ref=\"ERROR\" />\n\t</logger>\n\t<!-- EELF related loggers -->\n\t<logger\n\t\tname=\"com.att.eelf.audit\"\n\t\tlevel=\"INFO\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"asyncEELFAudit\" />\n\t</logger>\n\t<logger\n\t\tname=\"com.att.eelf.metrics\"\n\t\tlevel=\"DEBUG\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"asyncEELFMetrics\" />\n\t</logger>\n\t<logger\n\t\tname=\"com.att.eelf.security\"\n\t\tlevel=\"DEBUG\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"asyncEELFSecurity\" />\n\t</logger>\n\n\t<!-- logback internals logging -->\n\t<logger\n\t\tname=\"ch.qos.logback.classic\"\n\t\tlevel=\"INFO\" />\n\t<logger\n\t\tname=\"ch.qos.logback.core\"\n\t\tlevel=\"INFO\" />\n\t<logger\n\t\tname=\"AuditRecord\"\n\t\tlevel=\"INFO\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"auditLogs\" />\n\t</logger>\n\t<logger\n\t\tname=\"AuditRecord_DirectCall\"\n\t\tlevel=\"INFO\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"auditLogs\" />\n\t</logger>\n\t<logger\n\t\tname=\"PerfTrackerRecord\"\n\t\tlevel=\"INFO\"\n\t\tadditivity=\"false\">\n\t\t<appender-ref ref=\"perfLogs\" />\n\t</logger>\n\t<!-- logback jms appenders & loggers definition ends here -->\n\n\t<root level=\"DEBUG\">\n\t\t<appender-ref ref=\"DEBUG\" />\n\t\t<appender-ref ref=\"STDOUT\" />\n\t\t<appender-ref ref=\"AUDIT\" />\n        <appender-ref ref=\"METRIC\" />\n        <appender-ref ref=\"ERROR\" />\n\t</root>\n</included>\n",
            "src/main/resources/logback-spring.xml": "<configuration debug=\"true\">\n\t<springProperty name=\"logbackFilePath\"\n\t\tsource=\"clamp.config.logback.path\" />\n\t<springProperty name=\"logbackFileName\"\n\t\tsource=\"clamp.config.logback.filename\" />\n\t<springProperty name=\"logDirectory\"\n\t\tsource=\"clamp.config.log.path\" />\n\t\t\n\t<if condition='isNull(\"logbackFilePath\")'>\n\t\t<then>\n\t\t\t<!-- Classpath case -->\n\t\t\t<include resource=\"${logbackFileName}\" />\n\t\t</then>\n\t\t<else>\n\t\t\t<!-- File system case -->\n\t\t\t<include file=\"${logbackFilePath}/${logbackFileName}\" />\n\t\t</else>\n\t</if>\n</configuration>"
        }
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "frontend-files.xml"
        ],
        "folders": [
            "nginx"
        ]
    }
}