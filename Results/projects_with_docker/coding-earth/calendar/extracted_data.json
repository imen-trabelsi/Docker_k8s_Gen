{
    "source_code_info": {
        "language": "PHP",
        "framework": "Symfony",
        "dependencies": {
            "composer.json": "{\n    \"type\": \"project\",\n    \"license\": \"proprietary\",\n    \"require\": {\n        \"php\": \"^7.1.3\",\n        \"ext-ctype\": \"*\",\n        \"ext-iconv\": \"*\",\n        \"johngrogg/ics-parser\": \"^2.1\",\n        \"nelmio/cors-bundle\": \"^1.5\",\n        \"platformsh/symfonyflex-bridge\": \"^2.1\",\n        \"sensio/framework-extra-bundle\": \"^5.3\",\n        \"symfony/console\": \"4.3.*\",\n        \"symfony/dotenv\": \"4.3.*\",\n        \"symfony/flex\": \"^1.1\",\n        \"symfony/framework-bundle\": \"4.3.*\",\n        \"symfony/http-client\": \"4.3.*\",\n        \"symfony/property-access\": \"4.3.*\",\n        \"symfony/serializer\": \"4.3.*\",\n        \"symfony/yaml\": \"4.3.*\"\n    },\n    \"config\": {\n        \"preferred-install\": {\n            \"*\": \"dist\"\n        },\n        \"sort-packages\": true\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\"\n        }\n    },\n    \"autoload-dev\": {\n        \"psr-4\": {\n            \"App\\\\Tests\\\\\": \"tests/\"\n        }\n    },\n    \"replace\": {\n        \"paragonie/random_compat\": \"2.*\",\n        \"symfony/polyfill-ctype\": \"*\",\n        \"symfony/polyfill-iconv\": \"*\",\n        \"symfony/polyfill-php71\": \"*\",\n        \"symfony/polyfill-php70\": \"*\",\n        \"symfony/polyfill-php56\": \"*\"\n    },\n    \"scripts\": {\n        \"auto-scripts\": {\n            \"cache:clear\": \"symfony-cmd\",\n            \"assets:install %PUBLIC_DIR%\": \"symfony-cmd\"\n        },\n        \"post-install-cmd\": [\n            \"@auto-scripts\"\n        ],\n        \"post-update-cmd\": [\n            \"@auto-scripts\"\n        ]\n    },\n    \"conflict\": {\n        \"symfony/symfony\": \"*\"\n    },\n    \"extra\": {\n        \"symfony\": {\n            \"allow-contrib\": false,\n            \"require\": \"4.3.*\"\n        }\n    },\n    \"require-dev\": {\n        \"symfony/web-server-bundle\": \"4.3.*\"\n    }\n}\n"
        },
        "database": null,
        "build_system": "Composer",
        "config_files": {
            "calendar/.env": "# In all environments, the following files are loaded if they exist,\n# the later taking precedence over the former:\n#\n#  * .env                contains default values for the environment variables needed by the app\n#  * .env.local          uncommitted file with local overrides\n#  * .env.$APP_ENV       committed environment-specific defaults\n#  * .env.$APP_ENV.local uncommitted environment-specific overrides\n#\n# Real environment variables win over .env files.\n#\n# DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.\n#\n# Run \"composer dump-env prod\" to compile .env files for production use (requires symfony/flex >=1.2).\n# https://symfony.com/doc/current/best_practices/configuration.html#infrastructure-related-configuration\n\n###> symfony/framework-bundle ###\nAPP_ENV=dev\nAPP_SECRET=f0be34e5e39e280deb304e8ac896c5a8\n#TRUSTED_PROXIES=127.0.0.1,127.0.0.2\n#TRUSTED_HOSTS='^localhost|example\\.com$'\n###< symfony/framework-bundle ###\n\n###> nelmio/cors-bundle ###\n#CORS_ALLOW_ORIGIN=^https?://localhost(:[0-9]+)?$\nCORS_ALLOW_ORIGIN='*'\n###< nelmio/cors-bundle ###\n#\"https://hermes.turbinekreuzberg.com/ical/turbinekreuzberg.com/public/events4devs\"\n#\"https://www.techevents.online/events/?ical=1'\n",
            "docker-compose.yml": "version: '3.4'\n\nvolumes:\n  esdata01:\n    driver: local\n\nservices:\n  web:\n    build:\n      context: ./web\n    ports:\n      - \"${PORT}:80\"\n    volumes:\n      - ./web/conf.d:/etc/nginx/conf.d:rw,cached\n    depends_on:\n      - coordinator\n      - rssreader\n      - calendar\n      - frontend\n      - tweets\n\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: ../docker/nodejs-yarn.dockerfile\n    environment:\n      - SKIP_PREFLIGHT_CHECK=true\n      - REACT_APP_COORDINATOR=//coordinator.${DEFAULT_HOST}\n    volumes:\n      - ./frontend:/app:rw,cached\n\n  coordinator:\n    build:\n      context: ./coordinator\n      dockerfile: ../docker/nodejs-npm.dockerfile\n    environment:\n      - DEFAULT_HOST=${DEFAULT_HOST}\n      - KAFKA_HOST=kafka:9092\n    command: \"npm run dev\"\n    depends_on:\n      - kafka\n    volumes:\n      - ./coordinator:/app:rw,cached\n      - ./.platform/routes.yaml:/app/routes.yaml:ro\n\n  rssreader:\n    build:\n      context: ./rssreader\n      dockerfile: ../docker/nodejs-npm.dockerfile\n    environment:\n      - ELASTICSEARCH_HOST=http://elasticsearch:9200\n    command: \"npm run dev\"\n    volumes:\n      - ./rssreader:/app\n      - ./rssreader/db:/app/db\n    depends_on:\n      - elasticsearch\n\n  tweets:\n    build:\n      context: ./tweets\n      dockerfile: ../docker/nodejs-npm.dockerfile\n    command: \"npm run start\"\n    volumes:\n      - ./tweets:/app\n    environment:\n      - KAFKA_HOST=kafka:9092\n      - ELASTICSEARCH_HOST=http://elasticsearch:9200\n    depends_on:\n      - kafka\n      - coordinator\n      - elasticsearch\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.4\n    environment:\n      - node.name=es01\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - http.cors.enabled=true\n      - http.cors.allow-origin=*\n      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization\n      - http.cors.allow-credentials=true\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata01:/usr/share/elasticsearch/data\n    ports:\n      - \"9288:9200\"\n  zookeeper:\n    image: wurstmeister/zookeeper\n    #tmpfs: \"/datalog\"\n    ports:\n      - \"2181:2181\"\n\n  kafka:\n    image: wurstmeister/kafka\n    ports:\n      - \"9092:9092\"\n    environment:\n      HOSTNAME_COMMAND: \"route -n | awk '/UG[ \\t]/{print $$2}'\"\n      #KAFKA_ADVERTISED_HOST_NAME: 172.19.0.1\n      #KAFKA_CREATE_TOPICS: \"NewUrl:1:1,NewContent:1:1,ClientResponse:1:1\"\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://_{HOSTNAME_COMMAND}:9092\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n    depends_on:\n      - zookeeper\n    volumes:\n      - /var/run/docker.sock\n\n  calendar:\n    build:\n      context: ./calendar\n    volumes:\n      - ./calendar:/var/www/app:rw,cached\n    depends_on:\n      - elasticsearch\n\n\n\n",
            "calendar/Dockerfile": "ARG PHP_VERSION=7.3\n\nFROM php:${PHP_VERSION}-cli-alpine AS php\n\nARG GID=1000\nARG UID=1000\nARG APP_ENV=dev\n\n# Prevent Symfony Flex from generating a project ID at build time\nARG SYMFONY_SKIP_REGISTRATION=1\n\nENV APP_ENV=${APP_ENV}\nENV APP_PATH=/var/www/app\n\nRUN apk add --no-cache \\\n\t\tacl \\\n\t\tfile \\\n\t\tgettext \\\n\t\tunzip \\\n\t\tgit \\\n\t\tbash \\\n\t\tpostgresql-client \\\n\t\topenssl-dev cyrus-sasl-dev zstd-dev zstd-static php7-dev gcc g++ make \\\n\t;\n\nRUN wget https://github.com/edenhill/librdkafka/archive/v1.1.0.zip \\\n    && unzip v1.1.0.zip \\\n    && cd librdkafka-1.1.0/ \\\n    && ./configure --install-deps \\\n    && make \\\n    && make install \\\n    && cd ..\n\nARG APCU_VERSION=5.1.12\nRUN set -eux; \\\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$PHPIZE_DEPS \\\n\t\ticu-dev \\\n\t\tlibzip-dev \\\n\t\tpostgresql-dev \\\n\t\tzlib-dev \\\n\t; \\\n\t\\\n\tdocker-php-ext-configure zip --with-libzip; \\\n\tdocker-php-ext-install -j$(nproc) \\\n\t\tintl \\\n\t\tpdo_pgsql \\\n\t\tzip \\\n\t; \\\n\tpecl install \\\n\t\tapcu-${APCU_VERSION} \\\n\t\trdkafka \\\n\t; \\\n\tpecl clear-cache; \\\n\tdocker-php-ext-enable \\\n\t\tapcu \\\n\t\topcache \\\n\t\trdkafka \\\n\t; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n\t)\"; \\\n\tapk add --no-cache --virtual .api-phpexts-rundeps $runDeps; \\\n\t\\\n\tapk del .build-deps\n\n\nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\nCOPY docker/php.ini /usr/local/etc/php/php.ini\n\n# Install Composer globally\nENV COMPOSER_ALLOW_SUPERUSER 1\n\nRUN set -eux; \\\n    composer global require \"symfony/flex\" --prefer-dist --no-progress --no-suggest --classmap-authoritative;\nENV PATH=\"${PATH}:/root/.composer/vendor/bin:./vendor/bin\"\n\nWORKDIR ${APP_PATH}\n\nCOPY composer.json composer.lock symfony.lock ./\n# prevent the reinstallation of vendors at every changes in the source code\nRUN set -eux; \\\n\tcomposer install --prefer-dist --no-autoloader --no-scripts --no-progress --no-suggest; \\\n\tcomposer clear-cache\n\nCOPY . ./\n\nRUN set -eux; \\\n\tmkdir -p var/cache var/log; \\\n\tcomposer dump-autoload --classmap-authoritative; \\\n\tcomposer run-script post-install-cmd;\n\nRUN egrep -i \":$GID:\" /etc/passwd &>/dev/null || addgroup -S --gid \"$GID\" appgroup\nRUN egrep -i \":$UID:\" /etc/passwd &>/dev/null || adduser -S appuser -G appgroup \\\n    --uid \"$UID\" \\\n    --disabled-password\n\nRUN chown -R $UID:$GID ${APP_PATH}; \\\n    chown -R $UID:$GID ${APP_PATH}/var; \\\n\tchmod +x bin/console; sync\n\n#VOLUME ${APP_PATH}\nUSER $UID:$GID\n\nEXPOSE 3000\nCMD [\"bin/console\", \"server:run\", \"0.0.0.0:3000\"]\n\n"
        },
        "static_files": {
            "calendar/public/service.json": "{\n  \"service\": true\n}"
        }
    },
    "project_structure": {
        "files": [
            ".env",
            ".gitignore",
            ".platform.app.yaml",
            "Dockerfile",
            "composer.json",
            "composer.lock",
            "symfony.lock"
        ],
        "folders": [
            "bin",
            "config",
            "docker",
            "old",
            "public",
            "src",
            "translations"
        ]
    }
}