# Use PHP 7.3 Alpine image
FROM php:7.3-cli-alpine

# Set working variables
ENV APP_ENV=dev \
    APP_PATH=/var/www/app \
    GID=1000 \
    UID=1000 \
    APCU_VERSION=5.1.12 \
    PHP_VERSION=7.3 \
    COMPOSER_ALLOW_SUPERUSER=1 \
    SYMFONY_SKIP_REGISTRATION=1 \

# Copy system files
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
COPY docker/php.ini /usr/local/etc/php/php.ini

# Set work directory
WORKDIR ${APP_PATH}

# Copy project files
COPY composer.json composer.lock symfony.lock ./
COPY . ./

# Install required dependencies and create users
RUN apk add --no-cache acl file gettext unzip git bash postgresql-client openssl-dev cyrus-sasl-dev zstd-dev zstd-static php7-dev gcc g++ make && \
    wget https://github.com/edenhill/librdkafka/archive/v1.1.0.zip && unzip v1.1.0.zip && cd librdkafka-1.1.0/ && ./configure --install-deps && make && make install && cd .. && \
    set -eux; apk add --no-cache --virtual .build-deps $PHPIZE_DEPS icu-dev libzip-dev postgresql-dev zlib-dev && \
    docker-php-ext-configure zip --with-libzip && docker-php-ext-install -j$(nproc) intl pdo_pgsql zip && \
    pecl install apcu-${APCU_VERSION} rdkafka && pecl clear-cache && docker-php-ext-enable apcu opcache rdkafka && \
    runDeps="$(scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions | tr ',' '\n' | sort -u | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }')" \
    apk add --no-cache --virtual .api-phpexts-rundeps $runDeps && \
    apk del .build-deps && \
    composer global require "symfony/flex" --prefer-dist --no-progress --no-suggest --classmap-authoritative && \
    composer install --prefer-dist --no-autoloader --no-scripts --no-progress --no-suggest && \
    composer clear-cache && \
    mkdir -p var/cache var/log && \
    composer dump-autoload --classmap-authoritative && \
    composer run-script post-install-cmd && \
    egrep -i ":$GID:" /etc/passwd &>/dev/null || addgroup -S --gid "$GID" appgroup && \
    egrep -i ":$UID:" /etc/passwd &>/dev/null || adduser -S appuser -G appgroup --uid "$UID" --disabled-password && \

# Expose application port
EXPOSE 3000

# Run application
CMD ["bin/console",, "server:run",, "0.0.0.0:3000"]
