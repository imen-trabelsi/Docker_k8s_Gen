{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"ultimate-backend\",\n  \"version\": \"2.0.0-beta.4\",\n  \"description\": \"This is an enterprise scale advanced microservice pattern with GraphQL\",\n  \"author\": {\n    \"name\": \"Rex Isaac Raphael\",\n    \"email\": \"rex.rahael@outlook.com\",\n    \"url\": \"https://xraph.com\"\n  },\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"prebuild\": \"rimraf dist\",\n    \"build\": \"npx nest build\",\n    \"format\": \"prettier --write \\\"apps/**/*.ts\\\" \\\"libs/**/*.ts\\\"\",\n    \"start\": \"npx nest start\",\n    \"start:dev\": \"npx nest start --watch\",\n    \"start:debug\": \"npx nest start --debug --watch\",\n    \"start:prod\": \"node dist/apps/gateway-admin/main.js\",\n    \"setup:local\": \"sh gen-ts.sh && nest build proto-schema && sh scripts/register.sh\",\n    \"setup:proto\": \"sh gen-ts.sh && nest build proto-schema\",\n    \"setup:consul\": \"sh scripts/register.sh\",\n    \"lint\": \"tslint -p tsconfig.json -c tslint.json\",\n    \"lint-md\": \"remark .\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:cov\": \"jest --coverage && cat ./coverage/lcov.info | codacy-coverage --token a5ea7c309f7543a3b7cfc662c1c88d67 --language typescript\",\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n    \"test:e2e\": \"jest --config ./apps/gateway-admin/apps/signals/dfour-microservice-backend/test/jest-e2e.json\",\n    \"kompose\": \"kompose convert -o kubernetes/deployment.yaml\",\n    \"docs\": \"npx compodoc --theme material --output docs -p tsconfig.json -s\",\n    \"snyk-protect\": \"snyk protect\",\n    \"prepare\": \"yarn run snyk-protect\"\n  },\n  \"dependencies\": {\n    \"@anchan828/nest-sendgrid\": \"^0.3.16\",\n    \"@godaddy/terminus\": \"^4.4.1\",\n    \"@grpc/proto-loader\": \"^0.5.5\",\n    \"@juicycleff/nestjs-event-store\": \"^3.1.18\",\n    \"@konfy/graphql-mongo-query\": \"^2.0.6\",\n    \"@moonwalker/graphql-nats-subscriptions\": \"^0.1.7\",\n    \"@nestcloud/boot\": \"^0.6.11\",\n    \"@nestcloud/brakes\": \"^0.7.1\",\n    \"@nestcloud/common\": \"^0.6.11\",\n    \"@nestcloud/config\": \"^0.6.11\",\n    \"@nestcloud/consul\": \"^0.6.11\",\n    \"@nestcloud/core\": \"^0.6.11\",\n    \"@nestcloud/etcd\": \"^0.6.11\",\n    \"@nestcloud/feign\": \"^0.6.11\",\n    \"@nestcloud/grpc\": \"^0.6.11\",\n    \"@nestcloud/http\": \"^0.6.10-0\",\n    \"@nestcloud/kubernetes\": \"^0.6.11\",\n    \"@nestcloud/loadbalance\": \"^0.6.11\",\n    \"@nestcloud/logger\": \"^0.6.11\",\n    \"@nestcloud/memcached\": \"^0.6.11\",\n    \"@nestcloud/proxy\": \"^0.6.11\",\n    \"@nestcloud/redis\": \"^0.6.11\",\n    \"@nestcloud/schedule\": \"^0.6.11\",\n    \"@nestcloud/service\": \"^0.6.11\",\n    \"@nestjs/bull\": \"^0.1.2\",\n    \"@nestjs/common\": \"^7.4.2\",\n    \"@nestjs/config\": \"^0.5.0\",\n    \"@nestjs/core\": \"^7.4.2\",\n    \"@nestjs/cqrs\": \"^7.0.0\",\n    \"@nestjs/graphql\": \"^7.6.0\",\n    \"@nestjs/jwt\": \"^7.1.0\",\n    \"@nestjs/microservices\": \"^7.3.2\",\n    \"@nestjs/passport\": \"^7.1.0\",\n    \"@nestjs/platform-express\": \"^7.4.2\",\n    \"@nestjs/platform-fastify\": \"^7.4.2\",\n    \"@nestjs/swagger\": \"^4.5.12\",\n    \"@nestjs/terminus\": \"^7.0.1\",\n    \"@sindresorhus/slugify\": \"^1.1.0\",\n    \"apollo-datasource\": \"^0.7.2\",\n    \"apollo-server-cache-memcached\": \"^0.6.5\",\n    \"apollo-server-cache-redis\": \"^1.2.2\",\n    \"apollo-server-express\": \"^2.16.1\",\n    \"arangojs\": \"^6.14.1\",\n    \"axios\": \"^0.19.2\",\n    \"base64-url\": \"^2.3.3\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"brakes\": \"^3.0.0\",\n    \"bson\": \"^4.0.4\",\n    \"bull\": \"^3.16.0\",\n    \"cache-manager\": \"^3.3.0\",\n    \"cache-manager-memcached-store\": \"^2.2.0\",\n    \"cache-manager-redis-store\": \"^2.0.0\",\n    \"casbin\": \"^5.0.7\",\n    \"casbin-mongodb-adapter\": \"^1.1.11\",\n    \"class-transformer\": \"^0.2.3\",\n    \"class-validator\": \"^0.12.2\",\n    \"codacy-coverage\": \"^3.4.0\",\n    \"connect-redis\": \"^5.0.0\",\n    \"cookie-parser\": \"^1.4.5\",\n    \"dotenv\": \"^8.2.0\",\n    \"etcd3\": \"^1.0.1\",\n    \"express\": \"^4.17.1\",\n    \"express-session\": \"^1.17.1\",\n    \"express-useragent\": \"^1.0.15\",\n    \"fastify-swagger\": \"^3.2.0\",\n    \"get-port\": \"^5.1.1\",\n    \"geteventstore-promise2\": \"^3.1.2\",\n    \"google-protobuf\": \"latest\",\n    \"graphql\": \"^15.3.0\",\n    \"graphql-fields\": \"^2.0.3\",\n    \"graphql-mqtt-subscriptions\": \"^1.2.0\",\n    \"graphql-passport\": \"^0.6.3\",\n    \"graphql-query-complexity\": \"^0.6.0\",\n    \"graphql-relay\": \"^0.6.0\",\n    \"graphql-tools\": \"^6.0.16\",\n    \"graphql-type-json\": \"^0.3.2\",\n    \"groq-js\": \"^0.1.7\",\n    \"grpc\": \"^1.24.3\",\n    \"ioredis\": \"^4.17.3\",\n    \"ip-address\": \"^6.3.0\",\n    \"js-base64\": \"^3.4.4\",\n    \"json-stable-stringify\": \"^1.0.1\",\n    \"lodash\": \"^4.17.19\",\n    \"luxon\": \"^1.24.1\",\n    \"mongodb\": \"^3.6.0\",\n    \"mqtt\": \"^4.1.0\",\n    \"nats\": \"^1.4.12\",\n    \"nestjs-casbin\": \"^2.0.8\",\n    \"nestjs-casbin-mongodb\": \"^1.2.5\",\n    \"nestjs-eventstore\": \"^1.4.14\",\n    \"nestjs-stripe\": \"^0.2.1\",\n    \"node-eventstore-client\": \"^0.2.16\",\n    \"node-nats-streaming\": \"^0.3.2\",\n    \"object-path\": \"^0.11.4\",\n    \"parse-iso-duration\": \"^1.1.0\",\n    \"passport\": \"^0.4.1\",\n    \"passport-facebook\": \"^3.0.0\",\n    \"passport-github\": \"^1.1.0\",\n    \"passport-google-oauth\": \"^2.0.0\",\n    \"passport-local\": \"^1.0.0\",\n    \"protobufjs\": \"~6.10.1\",\n    \"query\": \"protobi/query\",\n    \"redis\": \"^3.0.2\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"request-context\": \"^2.0.0\",\n    \"rimraf\": \"^3.0.2\",\n    \"rxjs\": \"^6.6.2\",\n    \"shortid\": \"^2.2.15\",\n    \"sinon\": \"^7.5.0\",\n    \"stripe\": \"^7.14.0\",\n    \"swagger-ui-express\": \"^4.1.4\",\n    \"typeorm\": \"^0.2.25\",\n    \"ursa-optional\": \"^0.10.1\",\n    \"uuid\": \"^8.3.0\",\n    \"uuid-apikey\": \"^1.4.6\",\n    \"vhost\": \"^3.0.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/polyfill\": \"^7.10.1\",\n    \"@nestjs/cli\": \"^7.2.0\",\n    \"@nestjs/schematics\": \"^7.0.1\",\n    \"@nestjs/testing\": \"^7.4.2\",\n    \"@shelf/jest-mongodb\": \"^1.2.2\",\n    \"@types/bull\": \"^3.14.0\",\n    \"@types/express\": \"^4.17.7\",\n    \"@types/express-session\": \"^1.17.0\",\n    \"@types/graphql\": \"^14.5.0\",\n    \"@types/jest\": \"^25.2.3\",\n    \"@types/lodash\": \"^4.14.159\",\n    \"@types/luxon\": \"^1.24.3\",\n    \"@types/mongodb\": \"^3.5.25\",\n    \"@types/node\": \"^14.0.27\",\n    \"@types/passport-facebook\": \"^2.1.10\",\n    \"@types/passport-facebook-token\": \"^0.4.34\",\n    \"@types/passport-local\": \"^1.0.33\",\n    \"@types/stripe\": \"^7.13.16\",\n    \"@types/supertest\": \"^2.0.9\",\n    \"husky\": \"^4.2.5\",\n    \"jest\": \"^26.2.2\",\n    \"prettier\": \"^2.0.5\",\n    \"remark-cli\": \"^8.0.0\",\n    \"remark-lint-emphasis-marker\": \"^2.0.0\",\n    \"remark-lint-strong-marker\": \"^2.0.0\",\n    \"remark-preset-lint-recommended\": \"^4.0.0\",\n    \"snyk\": \"^1.337.0\",\n    \"supertest\": \"^4.0.2\",\n    \"ts-jest\": \"^26.1.0\",\n    \"ts-loader\": \"^8.0.2\",\n    \"ts-node\": \"^8.10.2\",\n    \"ts-proto\": \"juicycleff/ts-proto\",\n    \"ts-protoc-gen\": \"^0.12.1-pre.3266132\",\n    \"tsconfig-paths\": \"^3.9.0\",\n    \"tslint\": \"^6.1.3\",\n    \"typescript\": \"^3.9.7\"\n  },\n  \"jest\": {\n    \"globals\": {\n      \"ts-jest\": {\n        \"diagnostics\": false\n      }\n    },\n    \"preset\": \"@shelf/jest-mongodb\",\n    \"moduleFileExtensions\": [\n      \"js\",\n      \"json\",\n      \"ts\"\n    ],\n    \"rootDir\": \".\",\n    \"testRegex\": \".spec.ts$\",\n    \"transform\": {\n      \"^.+\\\\.(t|j)s$\": \"ts-jest\"\n    },\n    \"coverageDirectory\": \"./coverage\",\n    \"testEnvironment\": \"node\",\n    \"modulePaths\": [\n      \"<rootDir>/apps/\",\n      \"<rootDir>/libs/\"\n    ],\n    \"roots\": [\n      \"<rootDir>/apps/\",\n      \"<rootDir>/libs/\"\n    ],\n    \"moduleNameMapper\": {\n      \"@ultimatebackend/core/(.*)\": \"<rootDir>/libs/core/src/$1\",\n      \"@ultimatebackend/core\": \"<rootDir>/libs/core/src\",\n      \"@ultimatebackend/common/(.*)\": \"<rootDir>/libs/common/src/$1\",\n      \"@ultimatebackend/common\": \"<rootDir>/libs/common/src\",\n      \"@ultimatebackend/repository/(.*)\": \"<rootDir>/libs/repository/src/$1\",\n      \"@ultimatebackend/repository\": \"<rootDir>/libs/repository/src\",\n      \"@juicycleff/repo-orm/(.*)\": \"<rootDir>/libs/repo-orm/src/$1\",\n      \"@juicycleff/repo-orm\": \"<rootDir>/libs/repo-orm/src\",\n      \"@ultimatebackend/contracts/(.*)\": \"<rootDir>/libs/contracts/src/$1\",\n      \"@ultimatebackend/contracts\": \"<rootDir>/libs/contracts/src\",\n      \"@ultimatebackend/proto-schema/(.*)\": \"<rootDir>/libs/proto-schema/src/$1\",\n      \"@ultimatebackend/proto-schema\": \"<rootDir>/libs/proto-schema/src\"\n    }\n  },\n  \"remarkConfig\": {\n    \"plugins\": [\n      \"remark-preset-lint-recommended\"\n    ]\n  },\n  \"snyk\": true,\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"yarn format\"\n    }\n  }\n}\n"
        },
        "database": "MongoDB",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: \"3.2\"\n\nservices:\n  services-account:\n    build:\n      context: \"\"\n      dockerfile: apps/service-account/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-account:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-account.default.svc.cluster.local\n    ports:\n      - 50054:50054\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-access:\n    build:\n      context: \"\"\n      dockerfile: apps/service-access/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-access:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-access.default.svc.cluster.local\n    ports:\n    - 50089:50089\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-billing:\n    build:\n      context: \"\"\n      dockerfile: apps/service-billing/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-billing:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-billing.default.svc.cluster.local\n    ports:\n    - 50067:50067\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-notification:\n    build:\n      context: \"\"\n      dockerfile: apps/service-notification/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-notification:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-notification.default.svc.cluster.local\n    ports:\n    - 50044:50044\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-role:\n    build:\n      context: \"\"\n      dockerfile: apps/service-role/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-role:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-role.default.svc.cluster.local\n    ports:\n    - 50052:50052\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-tenant:\n    build:\n      context: \"\"\n      dockerfile: apps/service-tenant/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-tenant:${IMAGE_TAG:?err}\"\n    restart: always\n    ports:\n    - 50053:50053\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-tenant.default.svc.cluster.local\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  services-webhook:\n    build:\n      context: \"\"\n      dockerfile: apps/service-webhook/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/service-webhook:${IMAGE_TAG:?err}\"\n    restart: always\n    ports:\n    - 50049:50049\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=service-webhook.default.svc.cluster.local\n    labels:\n      kompose.service.type: clusterip\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  api-admin:\n    build:\n      context: \"\"\n      dockerfile: apps/api-admin/Dockerfile\n    image: \"${DOCKER_REGISTRY}/${DOCKER_REPO:?err}/api-admin:${IMAGE_TAG:?err}\"\n    restart: always\n    environment:\n      - CONSUL_HOST=consul-cluster.default.svc.cluster.local\n      - NATS_HOST=nats-cluster.default.svc.cluster.local\n      - DISCOVERY_HOST=api-admin.default.svc.cluster.local\n    ports:\n    - 50020:50020\n    labels:\n      kompose.service.type: loadbalancer\n      kompose.service.expose: \"true\"\n      kompose.image-pull-secret: \"gitlabregcrednew\"\n      kompose.image-pull-policy: \"Always\"\n\n  eventstore:\n    container_name: eventstore-node\n    ports:\n      - '2113:2113'\n      - '1113:1113'\n    image: eventstore/eventstore:release-5.0.8\n    labels:\n      kompose.service.type: nodeport\n      kompose.service.expose: \"true\"\n      kompose.image-pull-policy: \"Always\"\n",
            "apps/api-admin/Dockerfile": "FROM node:12-alpine\n# set our node environment, either development or production\n# defaults to production, compose overrides this to development on build and run\nARG NODE_ENV=production\nENV NODE_ENV $NODE_ENV\n\nRUN mkdir -p /nest\nADD . /nest\n\nWORKDIR /nest\n\nRUN yarn global add @nestjs/cli\n\nRUN yarn install --production=false\n\n# Build production files\nRUN nest build proto-schema\nRUN nest build api-admin\n\n# Bundle app source\nCOPY . .\n\nEXPOSE 50020\nCMD [\"node\", \"dist/apps/api-admin/main.js\"]\n",
            ".gitlab-ci.yml": "image: node:10.16.0\n\ncache:\n  paths:\n    - node_modules/\n    - .yarn\n    - dist\n\nvariables:\n  DOCKER_HOST: tcp://docker:2375\n  IMAGE_TAG: $CI_COMMIT_SHORT_SHA\n\nstages:\n  - prebuild\n  - build\n  - dockerize\n  - deploy\n\nbefore_script:\n  - apt-get update -qq && apt-get install\n  - apk update\n  - apk upgrade\n  - apk add --update curl && rm -rf /var/cache/apk/*\n\nPrebuild:\n  stage: prebuild\n  before_script:\n    - yarn config set cache-folder .yarn\n  script:\n    - yarn install\n    # - yarn lint\n  artifacts:\n    paths:\n      - node_modules/\n      - .yarn\n      - dist\n\nBuild:\n  stage: build\n  before_script:\n    - apt-get update\n    - apt-get install software-properties-common -y\n    - apt-get update\n    - apt-get install jq  -y\n    - ln -s bash /bin/sh.bash\n    - mv /bin/sh.bash /bin/sh\n    - apt-get update\n    - yarn global add npx\n  script:\n    - sh ./scripts/setup.sh\n    - ln -s dash /bin/sh.dash\n    - mv /bin/sh.dash /bin/sh\n\nDockerize:\n  stage: dockerize\n  image: docker/compose:1.25.0-rc1\n  services:\n    - docker:18.09.7-dind\n  when: manual\n  allow_failure: false\n  before_script:\n    - apk update\n    - apk upgrade\n    - apk add --update curl && rm -rf /var/cache/apk/*\n    - echo \"$DOCKER_PASSWORD\" | docker login -u ${DOCKER_USERNAME} --password-stdin ${DOCKER_REGISTRY}\n  script:\n    - sh ./scripts/dockerize.sh\n\nUpgrade production:\n  stage: deploy\n  image: dtzar/helm-kubectl\n  only:\n    - master\n  when: manual\n  allow_failure: false\n  before_script:\n    - curl -L https://github.com/kubernetes/kompose/releases/download/v1.21.0/kompose-linux-amd64 -o kompose\n    - chmod +x kompose\n    - mv ./kompose /usr/local/bin/kompose\n  script:\n    - mkdir deploy\n    - kompose -f docker-compose.yml convert -o deploy/\n    - kubectl config set-cluster k8s --server=\"${KUBE_SERVER}\"\n    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY}\n    - kubectl config set-credentials gitlab --token=\"${KUBE_TOKEN}\"\n    - kubectl config set-context default --cluster=k8s --user=gitlab\n    - kubectl config use-context default\n    - kubectl apply -f deploy --namespace default\n\nUpgrade Staging:\n  stage: deploy\n  image: dtzar/helm-kubectl\n  only:\n    - staging\n  when: manual\n  before_script:\n    - curl -L https://github.com/kubernetes/kompose/releases/download/v1.21.0/kompose-linux-amd64 -o kompose\n    - chmod +x kompose\n    - mv ./kompose /usr/local/bin/kompose\n  script:\n    - mkdir deploy\n    - kompose -f docker-compose.yml convert -o deploy/\n    - kubectl config set-cluster k8s --server=\"${KUBE_SERVER}\"\n    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY}\n    - kubectl config set-credentials gitlab --token=\"${KUBE_TOKEN}\"\n    - kubectl config set-context default --cluster=k8s --user=gitlab\n    - kubectl config use-context staging\n    - kubectl apply -f deploy/ --namespace default\n\nPatch Production:\n  stage: deploy\n  image: dtzar/helm-kubectl\n  only:\n    - master\n  when: manual\n  allow_failure: false\n  script:\n    - apk update\n    - apk add jq\n    - wget -q -O /usr/bin/yq $(wget -q -O - https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r '.assets[] | select(.name == \"yq_linux_amd64\") | .browser_download_url')\n    - chmod +x /usr/bin/yq\n    - ln -s bash /bin/sh.bash\n    - mv /bin/sh.bash /bin/sh\n    - kubectl config set-cluster k8s --server=\"${KUBE_SERVER}\"\n    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY}\n    - kubectl config set-credentials gitlab --token=\"${KUBE_TOKEN}\"\n    - kubectl config set-context default --cluster=k8s --user=gitlab\n    - kubectl config use-context default\n    - NAMESPACE=default\n    - sh scripts/kubernetes/update-deployment.sh\n\nPatch Staging:\n  stage: deploy\n  image: dtzar/helm-kubectl\n  only:\n    - staging\n  when: manual\n  script:\n    - apk update\n    - apk add jq\n    - wget -q -O /usr/bin/yq $(wget -q -O - https://api.github.com/repos/mikefarah/yq/releases/latest | jq -r '.assets[] | select(.name == \"yq_linux_amd64\") | .browser_download_url')\n    - chmod +x /usr/bin/yq\n    - ln -s bash /bin/sh.bash\n    - mv /bin/sh.bash /bin/sh\n    - kubectl config set-cluster k8s --server=\"${KUBE_SERVER}\"\n    - kubectl config set clusters.k8s.certificate-authority-data ${CERTIFICATE_AUTHORITY}\n    - kubectl config set-credentials gitlab --token=\"${KUBE_TOKEN}\"\n    - kubectl config set-context default --cluster=k8s --user=gitlab\n    - kubectl config use-context default\n    - NAMESPACE=staging\n    - sh scripts/kubernetes/update-deployment.sh\n",
            ".circleci/config.yml": "# Javascript Node CircleCI 2.0 configuration file\n# Check https://circleci.com/docs/2.0/language-javascript/ for more details\n#\nversion: 2\njobs:\n  build:\n    docker:\n      # specify the version you desire here\n      - image: circleci/node:10.12\n\n    working_directory: ~/ultimate-backend\n\n    steps:\n      - checkout\n\n      # Download and cache dependencies\n      - restore_cache:\n          keys:\n            - v1-dependencies-{{ checksum \"package.json\" }}\n            # fallback to using the latest cache if no exact match is found\n            - v1-dependencies-\n\n      - run: yarn install\n\n      - save_cache:\n          paths:\n            - node_modules\n          key: v1-dependencies-{{ checksum \"package.json\" }}\n\n      - run:\n          name: install-snyk\n          command: 'sudo npm install -g snyk'\n\n      - run: # run snyk help - test snyk is installed and working\n          name: snyk-help\n          command: snyk --help\n      - run: # run snyk auth - authenticate snyk use environment variables to add token\n          name: snyk auth\n          command: snyk auth $SNYK_TOKEN\n\n      # run tests!\n      - run: yarn test\n\n      # run cov tests!\n      - run: yarn test:cov\n\n      # run e2e tests!\n      - run: yarn test:e2e\n",
            "azure-pipelines.yml": "# Node.js\n# Build a general Node.js project with npm.\n# Add steps that analyze code, save build artifacts, deploy, and more:\n# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript\n\ntrigger:\n- master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn\n  CURRENT_BRANCH_NAME: $(Build.SourceBranch)\n\nsteps:\n- task: Cache@2\n  inputs:\n    key: 'yarn | \"$(Agent.OS)\" | yarn.lock'\n    restoreKeys: |\n       yarn | \"$(Agent.OS)\"\n       yarn\n    path: $(YARN_CACHE_FOLDER)\n  displayName: Cache Yarn packages\n\n- script: yarn --frozen-lockfile\n\n- task: NodeTool@0\n  inputs:\n    versionSpec: '10.x'\n  displayName: 'Install Node.js'\n\n- script: |\n    curl -o- -L https://yarnpkg.com/install.sh | bash\n    export PATH=\"$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH\"\n  displayName: 'Install yarn'\n\n- script: |\n    apt-get update\n    apt-get install software-properties-common -y\n    apt-get update\n    apt-get install jq  -y\n    sudo ln -s bash /bin/sh.bash\n    sudo mv /bin/sh.bash /bin/sh\n    apt-get update\n    yarn global add npx\n    sh ./scripts/setup.sh\n    sudo ln -s dash /bin/sh.dash\n    sudo mv /bin/sh.dash /bin/sh\n  displayName: 'Build Micro-Services'\n\n- task: PublishPipelineArtifact@1\n  inputs:\n    targetPath: '$(Pipeline.Workspace)'\n    artifact: 'UltimateBackend'\n    publishLocation: 'pipeline'\n\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "config.example",
            "tsconfig.app.json"
        ],
        "folders": [
            "src",
            "test"
        ]
    }
}