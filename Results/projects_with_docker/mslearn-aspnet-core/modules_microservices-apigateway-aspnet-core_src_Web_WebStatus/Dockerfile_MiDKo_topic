# Use the Microsoft's .NET SDK image as base image
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

# Set the working directory in the image to /src
WORKDIR /src

# Copy the solution file and project files
COPY ["eShop-Learn.sln", "./"]
COPY ["src/Web/WebStatus/WebStatus.csproj", "src/Web/WebStatus"]

COPY ["src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/Web.Shopping.HttpAggregator.csproj", "src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/"]
COPY ["src/ApiGateways/Aggregators/Web.Sales.HttpAggregator/Web.Sales.HttpAggregator.csproj", "src/ApiGateways/Aggregators/Web.Sales.HttpAggregator/"]
COPY ["src/BuildingBlocks/EventBus/EventBus/EventBus.csproj", "src/BuildingBlocks/EventBus/EventBus/"]
COPY ["src/BuildingBlocks/EventBus/EventBusRabbitMQ/EventBusRabbitMQ.csproj", "src/BuildingBlocks/EventBus/EventBusRabbitMQ/"]
COPY ["src/BuildingBlocks/EventBus/EventBusServiceBus/EventBusServiceBus.csproj", "src/BuildingBlocks/EventBus/EventBusServiceBus/"]
COPY ["src/BuildingBlocks/EventBus/IntegrationEventLogEF/IntegrationEventLogEF.csproj", "src/BuildingBlocks/EventBus/IntegrationEventLogEF/"]
COPY ["src/BuildingBlocks/WebHost/WebHost.Customization/WebHost.Customization.csproj", "src/BuildingBlocks/WebHost/WebHost.Customization/"]

COPY ["NuGet.config", "./"]
COPY ["docker-compose.dcproj", "./"]

# Restoring the project's dependencies
RUN dotnet restore "eShop-Learn.sln"

# Copy the rest of the source code
COPY . .

# Change workdir to WebStatus project
WORKDIR "/src/src/Web/WebStatus"

# Build the app
RUN dotnet publish --no-restore "WebStatus.csproj" -c Release -o /app/publish

# Generate runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0
WORKDIR /app

# Handle traffic on port 80
EXPOSE 80

# Set the application's entry point
ENTRYPOINT ["dotnet", "WebStatus.dll"]
