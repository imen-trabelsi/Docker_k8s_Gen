# Use the official DotNet image from the Docker Hub 
FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build

# Copy generic .NET core requirements and restore as distinct layers
WORKDIR /src

COPY *.sln .
COPY ["src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/Web.Shopping.HttpAggregator.csproj", "src/ApiGateways/Aggregators/Web.Shopping.HttpAggregator/"]
COPY ["Web.Sales.HttpAggregator/Web.Sales.HttpAggregator.csproj", "Web.Sales.HttpAggregator/"]
COPY ["Basket.API/Basket.API.csproj", "Basket.API/"]
COPY ["Catalog.API/Catalog.API.csproj", "Catalog.API/"]
COPY ["Coupon.API/Coupon.API.csproj", "Coupon.API/"]
COPY ["Identity.API/Identity.API.csproj", "Identity.API/"]
COPY ["Ordering.API/Ordering.API.csproj", "Ordering.API/"]
COPY ["Payment.API/Payment.API.csproj", "Payment.API/"]
COPY ["WebSPA/WebSPA.csproj", "WebSPA/"]
COPY ["WebStatus/WebStatus.csproj", "WebStatus/"]
COPY ["NuGet.config", "./"]
COPY ["docker-compose.dcproj", "./"]
COPY ["eShop-Learn.sln", "./"]

RUN dotnet restore "eShop-Learn.sln"

# Build the application
COPY . .
WORKDIR /src/src/ApiGateways/Aggregators/Web.Sales.HttpAggregator
RUN dotnet build "Web.Sales.HttpAggregator.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
RUN dotnet publish "Web.Sales.HttpAggregator.csproj" -c Release -o /app/publish

# Build runtime image
FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS final
WORKDIR /app

# Set up environment variables
ENV ASPNETCORE_URLS http://*:80
ENV ASPNETCORE_ENVIRONMENT Docker

# Health check instruction
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 CMD curl --fail http://localhost/ || exit 1

# Copy necessary files

# Expose ports
EXPOSE 80

# Run the app
ENTRYPOINT ["dotnet", "Web.Sales.HttpAggregator.dll"]
