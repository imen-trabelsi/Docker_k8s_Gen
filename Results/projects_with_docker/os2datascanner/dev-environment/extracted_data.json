{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[tool.black]\ntarget-version = [\"py34\"]\nline-length = 79\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            "dev-environment/docker-compose.yml": "version: '3.4'\nservices:\n  requirements:\n    build:\n      context: ../\n      dockerfile: ./dev-environment/Dockerfile\n    command: >\n      sh -c \"set -ex &&\n             pip-compile requirements-engine.in &&\n             pip-compile requirements-admin.in &&\n             pip-compile requirements-report.in &&\n             pip-compile requirements-test.in &&\n             pip-compile requirements-lint.in\"\n\n    volumes:\n      - ../requirements/python-requirements:/requirements/python-requirements\n",
            "dev-environment/Dockerfile": "FROM python:3.6\n\nWORKDIR /requirements/sys-requirements\nCOPY requirements/sys-requirements .\nRUN rm sys-requirements-for-bash-install.txt\n# Combine all system dependencies\nRUN cat sys-requirements-*.txt > sys-requirements.txt\nRUN cat sys-requirements.txt\n# hadolint ignore=SC2046,DL3008\nRUN set -ex \\\n# Install system dependencies from file.\n  && apt-get -y update \\\n  && apt-get -y install --no-install-recommends $(grep -o '^[^#][[:alnum:].-]*' sys-requirements.txt) \\\n  # clean up after apt-get and man-pages\n  && apt-get clean && rm -rf \"/var/lib/apt/lists/*\" \"/tmp/*\" \"/var/tmp/*\" \"/usr/share/man/??\" \"/usr/share/man/??_*\"\n\nWORKDIR /requirements/python-requirements\nRUN pip install --no-cache-dir pip-tools==5.3.1\nCOPY requirements/python-requirements .\n\n# ADD COMMAND FOR COMPILING ALL requirement-*.txt FILES!\n",
            ".gitlab-ci.yml": "################################################################################\n# Changes to this file requires approval from Labs. Please add a person from   #\n# Labs as required approval to your MR if you have any changes.                #\n################################################################################\n\n# For the release steps to work, the following envionment variables have to set\n# in the Gitlab UI:\n# RELEASE_REGISTRY_USER\n# RELEASE_REGISTRY_PASSWORD\n\n\nstages:\n  - lint\n  - build\n  - test\n  - release\n  - deploy\n\n\nvariables:\n  # Project variables\n  RELEASE_REGISTRY: docker.io\n  RELEASE_REPORT_IMAGE: index.docker.io/magentaaps/os2datascanner-report\n  RELEASE_ADMIN_IMAGE: index.docker.io/magentaaps/os2datascanner-admin\n  RELEASE_ENGINE_IMAGE: index.docker.io/magentaaps/os2datascanner-engine\n\n  REPORT_IMAGE: ${CI_REGISTRY_IMAGE}/report:${CI_COMMIT_SHA}\n  ADMIN_IMAGE: ${CI_REGISTRY_IMAGE}/admin:${CI_COMMIT_SHA}\n  ENGINE_IMAGE: ${CI_REGISTRY_IMAGE}/engine:${CI_COMMIT_SHA}\n\n\n# Lint stage\n#############\n\n.lint-default: &lint-default\n  stage: lint\n  needs: []\n  services: []\n  tags:\n    - docker\n  allow_failure: false\n\nLint Python:\n  <<: *lint-default\n  image: python:3.6\n  before_script:\n    - pip install flake8\n  script:\n    - flake8 --version\n    - flake8 src/\n  allow_failure: true\n\nLint Dockerfiles:\n  <<: *lint-default\n  image: hadolint/hadolint:latest-debian\n  before_script:\n    - apt-get -y update\n    - apt-get -y install --no-install-recommends git\n  script:\n    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint\n\nLint shell scripts:\n  <<: *lint-default\n  image: koalaman/shellcheck-alpine:latest\n  before_script:\n    - apk update\n    - apk add git\n  script:\n    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck\n  allow_failure: true\n\n\n# Build stage\n##############\n\n.build-default: &build-default\n  stage: build\n  needs: []\n  services: []\n  image:\n    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0\n    # contains fatal bugs.\n    name: gcr.io/kaniko-project/executor:debug-v0.16.0\n    entrypoint: [\"\"]\n  tags:\n    - docker\n  allow_failure: false\n\nBuild Report Application:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/report/Dockerfile\n      --destination=${REPORT_IMAGE}\n\nBuild Admin Application:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/admin/Dockerfile\n      --destination=${ADMIN_IMAGE}\n\nBuild Engine:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/engine/Dockerfile\n      --destination=${ENGINE_IMAGE}\n\nBuild documentation:\n  <<: *build-default\n  image: keimlink/sphinx-doc:latex\n  script:\n    - make -C doc PAPER=a4 html latexpdf\n    - mv doc/_build .\n  artifacts:\n    name: \"$CI_JOB_STAGE-$CI_COMMIT_REF_NAME\"\n    paths:\n      - _build\n\n\n# Test stage\n#############\n\n.test-default: &test-default\n  stage: test\n  tags:\n    - docker\n    - network-per-build\n  services:\n    - postgres:12\n    - rabbitmq:3-alpine\n    - name: dperson/samba:amd64\n      alias: samba\n      # XXX: this should be replaced with a fork under our control (see #37182)\n  variables:\n    USER: os2;12345_rosebud_password_admin\n    SHARE: general;${CI_PROJECT_DIR}/src/os2datascanner/tests/data/engine2;no;yes\n    POSTGRES_DB: os2datascanner\n    POSTGRES_USER: os2datascanner\n    POSTGRES_PASSWORD: os2datascanner\n    COVERAGE_FILE: /tmp/.coverage\n  allow_failure: false\n\nTest Admin Application:\n  extends: .test-default\n  image:\n    name: ${ADMIN_IMAGE}\n  variables:\n    OS2DS_ADMIN_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/admin/test-settings.toml\n    OS2DS_ADMIN_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/admin/docker-settings.toml\n  needs:\n    - Build Admin Application\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.projects.admin -m django test os2datascanner.projects.admin.tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nTest Engine:\n  extends: .test-default\n  image:\n    name: ${ENGINE_IMAGE}\n  variables:\n    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml\n    OS2DS_ENGINE_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/engine/docker-settings.toml\n  needs:\n    - Build Engine\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.engine2 -m unittest discover -t /code/src -s /code/src/os2datascanner/engine2/tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nTest Report Application:\n  extends: .test-default\n  image:\n    name: ${REPORT_IMAGE}\n  variables:\n    OS2DS_REPORT_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/report/test-settings.toml\n    OS2DS_REPORT_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/report/docker-settings.toml\n  needs:\n    - Build Report Application\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.projects.report -m django test os2datascanner.projects.report.tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nRun notice scripts:\n  <<: *test-default\n  needs:\n    - Build Engine\n  script:\n    - python -m unittest discover -s src/ -p notice*.py\n  allow_failure: true\n\n\n# Release stage\n###############\n\n.release-default: &release-default\n  stage: release\n  needs:\n    - Lint Dockerfiles\n    - Lint Python\n    - Build Admin Application\n    - Build Report Application\n    - Build Engine\n    - Build documentation\n    - Test Admin Application\n    - Test Engine\n    - Test Report Application\n  image: alpine\n  variables:\n    GIT_STRATEGY: none # We do not need the source code\n  tags:\n    - docker\n\n# Rolling rc release:\n.release-rc: &release-rc\n  <<: *release-default\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"development\"\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:dev\"\n\nRelease Report Application Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n# Release pinned pre-release:\n# Separate from \"Versioned release\" (.release) because we don't want to push to :latest tags\n.release-pinned-rc: &release-pinned-rc\n  <<: *release-default\n  only:\n    variables:\n      # Matches SemVer 2.0.0 with pre-release group. Ex. 2.3.4-rc, 2.3.4-rc2 or 2.3.4-prerelease1, but not 2.3.4\n      - $CI_COMMIT_TAG =~ /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)){1}(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:${CI_COMMIT_TAG}\"\n\nRelease Report Application pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n# Versioned release:\n.release: &release\n  <<: *release-default\n  rules:\n      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc\n      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$/\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:${CI_COMMIT_TAG}\"\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:latest\"\n\nRelease Report Application:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n\n# Deploy stage\n##############\n\nDeploy dev:\n  # Automatic deployment of development branch to\n  # https://admin.dev.os2ds.magenta.dk and https://report.dev.os2ds.magenta.dk\n  stage: deploy\n  image: magentalabs/pepper:latest\n  services: []\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"development\"\n  dependencies: []\n  tags:\n    - deploy\n  needs:\n    - Release Report Application Candidate\n    - Release Admin Application Candidate\n    - Release Engine Candidate\n  variables:\n    SALTAPI_URL: https://ctrldev1.magenta-aps.dk/api/\n    SALTAPI_EAUTH: file\n    GIT_STRATEGY: none\n  script:\n    - pepper --client runner --fail-any state.orchestrate os2ds.service-dev\n  environment:\n    name: dev\n    url: https://adminos2ds.magenta.dk/\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "crontab",
            "docker-settings.toml"
        ],
        "folders": []
    }
}