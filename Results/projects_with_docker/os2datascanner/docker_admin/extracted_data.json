{
    "source_code_info": {
        "language": "Python",
        "framework": "Python",
        "dependencies": {
            "pyproject.toml": "[tool.black]\ntarget-version = [\"py34\"]\nline-length = 79\n"
        },
        "database": null,
        "build_system": "poetry",
        "config_files": {
            "docker-compose.yml": "version: '3.4'\nservices:\n  db:\n    image: postgres:12\n    env_file:\n      - dev-environment/db.env\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - ./docker/postgres-initdb.d/10-test-for-valid-env-variables.sh:/docker-entrypoint-initdb.d/10-test-for-valid-env-variables.sh\n      - ./docker/postgres-initdb.d/20-create-admin-db-and-user.sh:/docker-entrypoint-initdb.d/20-create-admin-db-and-user.sh\n      - ./docker/postgres-initdb.d/40-create-report-db-and-user.sh:/docker-entrypoint-initdb.d/40-create-report-db-and-user.sh\n      # The following file adds the CREATEDB privilege to the db users to enable it\n      # to run the django tests.\n      # THIS SHOULD NOT BE USED IN PRODUCTION!!!\n      - ./dev-environment/postgres-initdb.d/50-add-createdb-permissions.sh:/docker-entrypoint-initdb.d/50-add-createdb-permissions.sh\n\n  queue:\n    # Normally, we expect the `rabbitmq` image. The -management images come\n    # with a set of management plugins installed and enabled by default.\n    # They can be accessed through the web interface on port 15672 (or the port\n    # it has been remapped to).\n    # The credentials are given in the specified `rabbitmq.env` file.\n    image: rabbitmq:3-management-alpine\n    hostname: os2datascanner_msg_broker\n    env_file:\n      - dev-environment/rabbitmq.env\n    ports:\n      - \"5672:5672\"\n      - \"8030:15672\"\n\n  admin_frontend:\n    build:\n      context: .\n      dockerfile: docker/admin/Dockerfile\n      target: frontend\n    volumes:\n      - ./src/os2datascanner/projects/admin/adminapp/static/src:/code/src/os2datascanner/projects/admin/adminapp/static/src\n      - frontend-bundles-admin:/code/src/os2datascanner/projects/admin/adminapp/static/dist/\n      - /code/frontend/mode_modules\n\n  report_frontend:\n     build:\n       context: .\n       dockerfile: docker/report/Dockerfile\n       target: frontend\n     volumes:\n       - ./src/os2datascanner/projects/report/reportapp/static/src:/code/src/os2datascanner/projects/report/reportapp/static/src\n       - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/\n       - /code/frontend/mode_modules\n\n  admin_application:\n    build:\n      context: .\n      dockerfile: docker/admin/Dockerfile\n      target: application\n    command: [\n      \"gunicorn\",\n      \"--config\", \"/code/docker/gunicorn-settings.py\",\n      \"--workers\", \"2\", # only two workers in local dev - to save some resources\n      \"--reload\", # restart workers when code changes\n      \"wsgi\"\n    ]\n    volumes:\n      - frontend-bundles-admin:/code/src/os2datascanner/projects/admin/adminapp/static/dist/\n      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml\n      - ./dev-environment/admin/.secret:/code/.secret\n      - ./src/os2datascanner:/code/src/os2datascanner\n    ports:\n      - \"8020:5000\"\n    depends_on:\n      - db\n      - admin_frontend\n      - queue\n\n  admin_collector:\n    build:\n      context: .\n      dockerfile: docker/admin/Dockerfile\n      target: application\n    entrypoint: []\n    command: python manage.py pipeline_collector --status os2ds_status\n    volumes:\n      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - db\n      - admin_application\n      - queue\n\n  report_application:\n    build:\n      context: .\n      dockerfile: docker/report/Dockerfile\n      target: application\n    command: [\n      \"gunicorn\",\n      \"--config\", \"/code/docker/gunicorn-settings.py\",\n      \"--workers\", \"2\", # only two workers in local dev - to save some resources\n      \"--reload\", # restart workers when code changes\n      \"wsgi\"\n    ]\n    volumes:\n      - frontend-bundles-report:/code/src/os2datascanner/projects/report/reportapp/static/dist/\n      - ./dev-environment/report/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    ports:\n      - \"8040:5000\"\n    depends_on:\n      - db\n      - report_frontend\n      - queue\n\n  report_collector:\n    build:\n      context: .\n      dockerfile: docker/report/Dockerfile\n      target: application\n    entrypoint: []\n    command: python manage.py pipeline_collector\n    volumes:\n      - ./dev-environment/report/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - db\n      - report_application\n      - queue\n\n  engine_explorer:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: explorer --enable-metrics --status os2ds_status\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n  engine_worker:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: worker --enable-metrics --status os2ds_status\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n  engine_exporter:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: exporter --enable-metrics\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - \"./dev-environment/prometheus.yml:/etc/prometheus/prometheus.yml:ro\"\n    ports:\n      - \"8050:9090\"\n\n  # default user is admin/admin\n  grafana:\n    image: grafana/grafana\n    volumes:\n      - \"./dev-environment/grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro\"\n      - \"./dev-environment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro\"\n    ports:\n      - \"8060:3000\"\n\n  idp:\n    image: magentalabs/simplesamlphp:2.0.0\n    environment:\n      - SIMPLESAMLPHP_BASEURLPATH=http://localhost:8080/simplesaml/\n      - SIMPLESAMLPHP_SP_ENTITY_ID=http://localhost:8040/saml2_auth/acs/\n      - SIMPLESAMLPHP_SP_ASSERTION_CONSUMER_SERVICE=http://localhost:8040/saml2_auth/acs/\n    volumes:\n      - ./dev-environment/authsources.php:/var/www/simplesamlphp/config/authsources.php\n    ports:\n      - \"8080:8080\"\n\nx-disabled:\n  admin_cron:\n    build:\n      context: .\n      dockerfile: docker/admin/Dockerfile\n      target: application\n    entrypoint: []\n    command: supercronic /code/docker/crontab\n    volumes:\n      - ./dev-environment/admin/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - db\n      - admin_application\n      - queue\n\n  report_cron:\n    build:\n      context: .\n      dockerfile: docker/report/Dockerfile\n      target: application\n    entrypoint: [ ]\n    command: supercronic /code/docker/crontab\n    volumes:\n      - ./dev-environment/report/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - db\n      - report_application\n      - queue\n\n  engine_processor:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: processor --enable-metrics\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n  engine_matcher:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: matcher --enable-metrics\n    restart: unless-stopped\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n  engine_tagger:\n    build:\n      context: .\n      dockerfile: docker/engine/Dockerfile\n      target: engine\n    command: tagger --enable-metrics\n    volumes:\n      - ./dev-environment/engine/dev-settings.toml:/user-settings.toml\n      - ./src/os2datascanner:/code/src/os2datascanner\n    depends_on:\n      - queue\n\n\nvolumes:\n  frontend-bundles-admin:\n  frontend-bundles-report:\n  postgres-data:\n  postgres-initdb.d:\n",
            "docker/admin/Dockerfile": "# Copyright (C) 2020 Magenta ApS, http://magenta.dk.\n# Contact: info@magenta.dk.\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n################################################################################\n# Changes to this file requires approval from Labs. Please add a person from   #\n# Labs as required approval to your MR if you have any changes.                #\n################################################################################\n\nFROM node:14 AS frontend\n\nWORKDIR /code/src/os2datascanner/projects/admin/adminapp\n\nCOPY src/os2datascanner/projects/admin/adminapp/package.json .\nCOPY src/os2datascanner/projects/admin/adminapp/package-lock.json .\nRUN npm ci\n\nCOPY src/os2datascanner/projects/admin/adminapp/postcss.config.js .\nCOPY src/os2datascanner/projects/admin/adminapp/webpack.dev.js .\nCOPY src/os2datascanner/projects/admin/adminapp/webpack.prod.js .\nCOPY src/os2datascanner/projects/admin/adminapp/static/src ./static/src\nCOPY src/os2datascanner/projects/admin/adminapp/static/3rdparty ./static/3rdparty\n# Do we need templates?\n\n# Build production bundle\n# NB! Doesn't start a webserver, only bundles files!\nRUN npm run prod\n\n# Build development bundle\n# NB! Watches for changes, so no automatic exit!\nCMD [\"npm\", \"run\", \"dev\"]\n\n######################\n\nFROM python:3.6 AS application\n\nARG SUPERCRONIC_VERSION=v0.1.12\nARG SUPERCRONIC_SHA1SUM=048b95b48b708983effb2e5c935a1ef8483d9e3e\n\nLABEL org.opencontainers.image.title=\"OS2datascanner - Administration\" \\\n      org.opencontainers.image.vendor=\"Magenta ApS\" \\\n      org.opencontainers.image.licenses=\"MPL-2.0\" \\\n      org.opencontainers.image.url=\"https://os2datascanner.magenta.dk/\" \\\n      org.opencontainers.image.documentation=\"https://os2datascanner.readthedocs.io/en/latest/\" \\\n      org.opencontainers.image.source=\"https://github.com/os2datascanner/os2datascanner\"\n\n# Force the stdout and stderr streams from python to be unbuffered. See\n# https://docs.python.org/3/using/cmdline.html#cmdoption-u\nENV PYTHONUNBUFFERED=1 \\\n  OS2DS_ADMIN_SYSTEM_CONFIG_PATH=/code/docker/docker-settings.toml \\\n  OS2DS_ADMIN_USER_CONFIG_PATH=/user-settings.toml \\\n  PYTHONPATH=/code/src/:$PYTHONPATH\\\n  DJANGO_SETTINGS_MODULE=os2datascanner.projects.admin.settings\n\n# Ensure system user and install system depedencies\nWORKDIR /code/requirements/sys-requirements\nCOPY requirements/sys-requirements/sys-requirements-common.txt \\\n     requirements/sys-requirements/sys-requirements-django.txt \\\n     requirements/sys-requirements/sys-requirements-admin.txt \\\n     ./\n# hadolint ignore=DL3008,SC2046,DL4006\nRUN set -ex \\\n  # Add an application specific group and user.\n  # Note: this is a system user/group, but have\n  # UID/GID above the normal SYS_UID_MAX/SYS_GID_MAX of 999, but also above the\n  # automatic ranges of UID_MAX/GID_MAX used by useradd/groupadd.\n  # Hopefully there will be no conflicts with users of the\n  # host system or users of other docker containers.\n  && groupadd -g 73020 -r os2ds_admin\\\n  && useradd -u 73020 --no-log-init -r -g os2ds_admin os2ds_admin \\\n  # Install system dependencies from file.\n  && apt-get -y update \\\n  && apt-get -y install --no-install-recommends $(grep -oh '^[^#][[:alnum:].-]*' sys-requirements*.txt) \\\n  # clean up after apt-get and man-pages\n  && apt-get clean && rm -rf \"/var/lib/apt/lists/*\" \"/tmp/*\" \"/var/tmp/*\" \"/usr/share/man/??\" \"/usr/share/man/??_*\" \\\n  # install supercronic\n  && curl -fsSL \"https://github.com/aptible/supercronic/releases/download/${SUPERCRONIC_VERSION}/supercronic-linux-amd64\" \\\n     -o /usr/local/bin/supercronic \\\n  && echo \"${SUPERCRONIC_SHA1SUM}  /usr/local/bin/supercronic\" | sha1sum -c - \\\n  && chmod +x /usr/local/bin/supercronic \\\n  # create folders for output from django\n  && install -o os2ds_admin -g os2ds_admin -d /code/uploads/admin \\\n  && install -o os2ds_admin -g os2ds_admin -d /code/static \\\n  && install -o os2ds_admin -g os2ds_admin -d /code/build \\\n  && install -o os2ds_admin -g os2ds_admin -d /code/var\n\n# Install python requirements\nWORKDIR /code/requirements/python-requirements\nCOPY requirements/python-requirements/requirements-admin.txt \\\n     requirements/python-requirements/requirements-test.txt \\\n     requirements/python-requirements/requirements-lint.txt \\\n     ./\n# hadolint ignore=DL4006\nRUN find requirements*.txt -print0 | xargs -0 -n1 pip install -r\n\nWORKDIR /code/docker/\nCOPY docker/admin/crontab ./crontab\nCOPY docker/admin/docker-settings.toml ./docker-settings.toml\nCOPY docker/docker-entrypoint-django.sh ./docker-entrypoint.sh\nCOPY docker/gunicorn-settings.py ./gunicorn-settings.py\n\n# Copy backend code\nWORKDIR /code/src/os2datascanner\nCOPY src/os2datascanner/projects/admin ./projects/admin\nCOPY src/os2datascanner/projects/__init__.py ./projects/\nCOPY src/os2datascanner/projects/django_toml_configuration.py ./projects/\nCOPY src/os2datascanner/utils ./utils\nCOPY src/os2datascanner/__init__.py ./\n# Copy necessary files from engine module TODO: minimize this\nCOPY src/os2datascanner/engine2 ./engine2\n\n# Copy VERSION, LICENCE, README, NEWS to PROJECT_DIR\nWORKDIR /code\nCOPY VERSION ./\nCOPY LICENSE ./\nCOPY README.rst ./\nCOPY NEWS.rst ./\n\n# Copy frontend dist folder to static\nWORKDIR /code/src/os2datascanner/projects/admin/adminapp/static\nCOPY --from=frontend /code/src/os2datascanner/projects/admin/adminapp/static/dist ./dist\n\n# Run the server as the os2ds_admin user on port 8000\nWORKDIR /code/src/os2datascanner/projects/admin\nUSER os2ds_admin:os2ds_admin\nEXPOSE 5000\nENTRYPOINT [\"/code/docker/docker-entrypoint.sh\"]\nCMD [\"gunicorn\", \\\n     \"--config\", \"/code/docker/gunicorn-settings.py\", \\\n     \"wsgi\"]\n",
            ".gitlab-ci.yml": "################################################################################\n# Changes to this file requires approval from Labs. Please add a person from   #\n# Labs as required approval to your MR if you have any changes.                #\n################################################################################\n\n# For the release steps to work, the following envionment variables have to set\n# in the Gitlab UI:\n# RELEASE_REGISTRY_USER\n# RELEASE_REGISTRY_PASSWORD\n\n\nstages:\n  - lint\n  - build\n  - test\n  - release\n  - deploy\n\n\nvariables:\n  # Project variables\n  RELEASE_REGISTRY: docker.io\n  RELEASE_REPORT_IMAGE: index.docker.io/magentaaps/os2datascanner-report\n  RELEASE_ADMIN_IMAGE: index.docker.io/magentaaps/os2datascanner-admin\n  RELEASE_ENGINE_IMAGE: index.docker.io/magentaaps/os2datascanner-engine\n\n  REPORT_IMAGE: ${CI_REGISTRY_IMAGE}/report:${CI_COMMIT_SHA}\n  ADMIN_IMAGE: ${CI_REGISTRY_IMAGE}/admin:${CI_COMMIT_SHA}\n  ENGINE_IMAGE: ${CI_REGISTRY_IMAGE}/engine:${CI_COMMIT_SHA}\n\n\n# Lint stage\n#############\n\n.lint-default: &lint-default\n  stage: lint\n  needs: []\n  services: []\n  tags:\n    - docker\n  allow_failure: false\n\nLint Python:\n  <<: *lint-default\n  image: python:3.6\n  before_script:\n    - pip install flake8\n  script:\n    - flake8 --version\n    - flake8 src/\n  allow_failure: true\n\nLint Dockerfiles:\n  <<: *lint-default\n  image: hadolint/hadolint:latest-debian\n  before_script:\n    - apt-get -y update\n    - apt-get -y install --no-install-recommends git\n  script:\n    - git ls-files --exclude='Dockerfile*' --ignored | xargs --max-lines=1 hadolint\n\nLint shell scripts:\n  <<: *lint-default\n  image: koalaman/shellcheck-alpine:latest\n  before_script:\n    - apk update\n    - apk add git\n  script:\n    - git ls-files --exclude='*.sh' --ignored | xargs shellcheck\n  allow_failure: true\n\n\n# Build stage\n##############\n\n.build-default: &build-default\n  stage: build\n  needs: []\n  services: []\n  image:\n    # We use kaniko v0.16.0 as both v0.17.0, v0.17.1, v0.18.0 and v0.19.0\n    # contains fatal bugs.\n    name: gcr.io/kaniko-project/executor:debug-v0.16.0\n    entrypoint: [\"\"]\n  tags:\n    - docker\n  allow_failure: false\n\nBuild Report Application:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/report/Dockerfile\n      --destination=${REPORT_IMAGE}\n\nBuild Admin Application:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/admin/Dockerfile\n      --destination=${ADMIN_IMAGE}\n\nBuild Engine:\n  <<: *build-default\n  script:\n    - echo \"{\\\"auths\\\":{\\\"$CI_REGISTRY\\\":{\\\"username\\\":\\\"$CI_REGISTRY_USER\\\",\\\"password\\\":\\\"$CI_REGISTRY_PASSWORD\\\"}}}\" > /kaniko/.docker/config.json\n    - /kaniko/executor\n      --cache\n      --context=$CI_PROJECT_DIR\n      --dockerfile=$CI_PROJECT_DIR/docker/engine/Dockerfile\n      --destination=${ENGINE_IMAGE}\n\nBuild documentation:\n  <<: *build-default\n  image: keimlink/sphinx-doc:latex\n  script:\n    - make -C doc PAPER=a4 html latexpdf\n    - mv doc/_build .\n  artifacts:\n    name: \"$CI_JOB_STAGE-$CI_COMMIT_REF_NAME\"\n    paths:\n      - _build\n\n\n# Test stage\n#############\n\n.test-default: &test-default\n  stage: test\n  tags:\n    - docker\n    - network-per-build\n  services:\n    - postgres:12\n    - rabbitmq:3-alpine\n    - name: dperson/samba:amd64\n      alias: samba\n      # XXX: this should be replaced with a fork under our control (see #37182)\n  variables:\n    USER: os2;12345_rosebud_password_admin\n    SHARE: general;${CI_PROJECT_DIR}/src/os2datascanner/tests/data/engine2;no;yes\n    POSTGRES_DB: os2datascanner\n    POSTGRES_USER: os2datascanner\n    POSTGRES_PASSWORD: os2datascanner\n    COVERAGE_FILE: /tmp/.coverage\n  allow_failure: false\n\nTest Admin Application:\n  extends: .test-default\n  image:\n    name: ${ADMIN_IMAGE}\n  variables:\n    OS2DS_ADMIN_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/admin/test-settings.toml\n    OS2DS_ADMIN_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/admin/docker-settings.toml\n  needs:\n    - Build Admin Application\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.projects.admin -m django test os2datascanner.projects.admin.tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nTest Engine:\n  extends: .test-default\n  image:\n    name: ${ENGINE_IMAGE}\n  variables:\n    OS2DS_ENGINE_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/engine/test-settings.toml\n    OS2DS_ENGINE_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/engine/docker-settings.toml\n  needs:\n    - Build Engine\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.engine2 -m unittest discover -t /code/src -s /code/src/os2datascanner/engine2/tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nTest Report Application:\n  extends: .test-default\n  image:\n    name: ${REPORT_IMAGE}\n  variables:\n    OS2DS_REPORT_USER_CONFIG_PATH: ${CI_PROJECT_DIR}/dev-environment/report/test-settings.toml\n    OS2DS_REPORT_SYSTEM_CONFIG_PATH:  ${CI_PROJECT_DIR}/docker/report/docker-settings.toml\n  needs:\n    - Build Report Application\n  script:\n    - coverage run --omit=*/tests/* --source=os2datascanner.projects.report -m django test os2datascanner.projects.report.tests\n  after_script:\n    - coverage html -d ${CI_PROJECT_DIR}/coverage-html\n    - coverage xml -o ${CI_PROJECT_DIR}/junit.xml\n    - coverage report\n  coverage: '/^TOTAL\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+(?:\\.\\d+)?\\%)$/'\n  artifacts:\n    when: always\n    paths:\n      - $CI_PROJECT_DIR/coverage-html\n    reports:\n      junit: $CI_PROJECT_DIR/junit.xml\n\nRun notice scripts:\n  <<: *test-default\n  needs:\n    - Build Engine\n  script:\n    - python -m unittest discover -s src/ -p notice*.py\n  allow_failure: true\n\n\n# Release stage\n###############\n\n.release-default: &release-default\n  stage: release\n  needs:\n    - Lint Dockerfiles\n    - Lint Python\n    - Build Admin Application\n    - Build Report Application\n    - Build Engine\n    - Build documentation\n    - Test Admin Application\n    - Test Engine\n    - Test Report Application\n  image: alpine\n  variables:\n    GIT_STRATEGY: none # We do not need the source code\n  tags:\n    - docker\n\n# Rolling rc release:\n.release-rc: &release-rc\n  <<: *release-default\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"development\"\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:dev\"\n\nRelease Report Application Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine Candidate:\n  <<: *release-rc\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n# Release pinned pre-release:\n# Separate from \"Versioned release\" (.release) because we don't want to push to :latest tags\n.release-pinned-rc: &release-pinned-rc\n  <<: *release-default\n  only:\n    variables:\n      # Matches SemVer 2.0.0 with pre-release group. Ex. 2.3.4-rc, 2.3.4-rc2 or 2.3.4-prerelease1, but not 2.3.4\n      - $CI_COMMIT_TAG =~ /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)){1}(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:${CI_COMMIT_TAG}\"\n\nRelease Report Application pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine pinned Candidate:\n  <<: *release-pinned-rc\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n# Versioned release:\n.release: &release\n  <<: *release-default\n  rules:\n      # Matches <version core> from SemVer 2.0.0 BNF grammar. Ex. 2.3.4, but not 2.3.4-rc\n      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)$/\n  script:\n    - apk add skopeo\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:${CI_COMMIT_TAG}\"\n    - skopeo copy\n      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}\n      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}\n      \"docker://${IMAGE_FROM}\"\n      \"docker://${IMAGE_TO}:latest\"\n\nRelease Report Application:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${REPORT_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_REPORT_IMAGE}\"\n\nRelease Admin Application:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${ADMIN_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ADMIN_IMAGE}\"\n\nRelease Engine:\n  <<: *release\n  before_script:\n    - export IMAGE_FROM=\"${ENGINE_IMAGE}\"\n    - export IMAGE_TO=\"${RELEASE_ENGINE_IMAGE}\"\n\n\n# Deploy stage\n##############\n\nDeploy dev:\n  # Automatic deployment of development branch to\n  # https://admin.dev.os2ds.magenta.dk and https://report.dev.os2ds.magenta.dk\n  stage: deploy\n  image: magentalabs/pepper:latest\n  services: []\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"development\"\n  dependencies: []\n  tags:\n    - deploy\n  needs:\n    - Release Report Application Candidate\n    - Release Admin Application Candidate\n    - Release Engine Candidate\n  variables:\n    SALTAPI_URL: https://ctrldev1.magenta-aps.dk/api/\n    SALTAPI_EAUTH: file\n    GIT_STRATEGY: none\n  script:\n    - pepper --client runner --fail-any state.orchestrate os2ds.service-dev\n  environment:\n    name: dev\n    url: https://adminos2ds.magenta.dk/\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "crontab",
            "docker-settings.toml"
        ],
        "folders": []
    }
}