{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project\n    xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>datakaveri.org</groupId>\n    <artifactId>iudx.catalogue.server</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <properties>\n        <vertx.version>4.5.11</vertx.version>\n        <openjdk.version>21</openjdk.version>\n        <hazelcast.version>4.0.2</hazelcast.version>\n        <micrometer.version>1.14.1</micrometer.version>\n        <curator.version>5.7.1</curator.version>\n        <junit-jupiter-engine.version>5.11.3</junit-jupiter-engine.version>\n        <apache-log4j2.version>2.24.2</apache-log4j2.version>\n        <lmax-disruptor.version>4.0.0</lmax-disruptor.version>\n        <jacoco-maven-plugin.version>0.8.12</jacoco-maven-plugin.version>\n        <checkstyle.version>10.20.1</checkstyle.version>\n        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>\n        <maven-shade-plugin.version>3.6.0</maven-shade-plugin.version>\n        <maven-javadoc-plugin.version>3.11.1</maven-javadoc-plugin.version>\n        <exec-maven-plugin.version>3.5.0</exec-maven-plugin.version>\n        <maven-pmd-plugin.version>3.26.0</maven-pmd-plugin.version>\n        <maven-checkstyle-plugin-google.version>3.6.0</maven-checkstyle-plugin-google.version>\n        <maven-surefire-report-plugin.version>3.5.2</maven-surefire-report-plugin.version>\n        <elastic-search-rest-client>8.16.1</elastic-search-rest-client>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <exec.mainClass>iudx.catalogue.server.deploy.Deployer</exec.mainClass>\n        <exec.mainClassDev>iudx.catalogue.server.deploy.DeployerDev</exec.mainClassDev>\n        <testcontainer.params>1.20.4</testcontainer.params>\n        <testcontainer-postgres.version>1.20.4</testcontainer-postgres.version>\n    </properties>\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>io.vertx</groupId>\n                <artifactId>vertx-stack-depchain</artifactId>\n                <version>${vertx.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <!--  log4j2 bom to keep org.apache.logging.log4j artifacts version in sync -->\n            <dependency>\n                <groupId>org.apache.logging.log4j</groupId>\n                <artifactId>log4j-bom</artifactId>\n                <version>${apache-log4j2.version}</version>\n                <scope>import</scope>\n                <type>pom</type>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-codegen</artifactId>\n            <classifier>processor</classifier>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>42.7.4</version>\n        </dependency>\n        <dependency>\n            <groupId>com.ongres.scram</groupId>\n            <artifactId>client</artifactId>\n            <version>2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-service-proxy</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-hazelcast</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-service-discovery</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-jdbc-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-web-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-web-validation</artifactId>\n            <version>${vertx.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-rx-java2</artifactId>\n            <version>${vertx.version}</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>2.18.1</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.18.1</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-annotations</artifactId>\n            <version>2.18.1</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.guava</groupId>\n            <artifactId>guava</artifactId>\n            <version>33.3.1-jre</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-checkstyle-plugin</artifactId>\n            <version>${maven-checkstyle-plugin-google.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>${junit-jupiter-engine.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-junit5</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.elasticsearch.client</groupId>\n            <artifactId>elasticsearch-rest-client</artifactId>\n            <version>${elastic-search-rest-client}</version>\n        </dependency>\n        <dependency>\n            <groupId>co.elastic.clients</groupId>\n            <artifactId>elasticsearch-java</artifactId>\n            <version>${elastic-search-rest-client}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.github.java-json-tools</groupId>\n            <artifactId>json-schema-validator</artifactId>\n            <version>2.2.14</version>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/jakarta.validation/jakarta.validation-api -->\n        <dependency>\n            <groupId>jakarta.validation</groupId>\n            <artifactId>jakarta.validation-api</artifactId>\n            <version>3.1.0</version>\n        </dependency>\n        <!-- Packages for Vertx metrics through micrometer  -->\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-micrometer-metrics</artifactId>\n        </dependency>\n        <!-- micrometer core package  -->\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-core</artifactId>\n            <version>${micrometer.version}</version>\n        </dependency>\n        <!-- package required for exposing metrics in prometheus format  -->\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-registry-prometheus</artifactId>\n            <version>${micrometer.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-registry-prometheus-simpleclient</artifactId>\n            <version>${micrometer.version}</version>\n        </dependency>\n        <!-- Packages for Vertx Hazelcast cluster manager  -->\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-hazelcast</artifactId>\n        </dependency>\n        <!--  package for hazelcast based clustering using zookeeper -->\n        <dependency>\n            <groupId>com.hazelcast</groupId>\n            <artifactId>hazelcast-zookeeper</artifactId>\n            <version>${hazelcast.version}</version>\n        </dependency>\n        <!-- Package for zookeeper curator client to register with  zookeepeer -->\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-x-discovery</artifactId>\n            <version>${curator.version}</version>\n        </dependency>\n        <!-- log4j2 logging dependencies-->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>${apache-log4j2.version}</version>\n            <scope>compile</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>${apache-log4j2.version}</version>\n        </dependency>\n        <!-- slf4j to log4j2 bridge adapter, needed for 'io.netty' logs -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j2-impl</artifactId>\n            <version>${apache-log4j2.version}</version>\n        </dependency>\n        <!--LMAX Disruptor for enabling Asynchronous log4j2 Logging  -->\n        <dependency>\n            <groupId>com.lmax</groupId>\n            <artifactId>disruptor</artifactId>\n            <version>${lmax-disruptor.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>io.qameta.allure</groupId>\n            <artifactId>allure-junit5</artifactId>\n            <version>2.29.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-commons</artifactId>\n            <version>1.11.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-engine</artifactId>\n            <version>1.11.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-auth-jwt</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-pg-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.vertx</groupId>\n            <artifactId>vertx-rabbitmq-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-inline</artifactId>\n            <version>5.2.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-junit-jupiter</artifactId>\n            <version>5.14.2</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>5.14.2</version>\n            <scope>test</scope>\n        </dependency>\n\n        <!-- Rest Assured -->\n        <dependency>\n            <groupId>io.rest-assured</groupId>\n            <artifactId>rest-assured</artifactId>\n            <version>5.5.0</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- test container dependency-->\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>testcontainers</artifactId>\n            <version>${testcontainer.params}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- test container dependency for JUnit5-->\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>junit-jupiter</artifactId>\n            <version>${testcontainer.params}</version>\n            <scope>test</scope>\n        </dependency>\n        <!-- test container dependency for postgresql-->\n        <dependency>\n            <groupId>org.testcontainers</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>${testcontainer.params}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>com.nimbusds</groupId>\n            <artifactId>nimbus-jose-jwt</artifactId>\n            <version>9.47</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n\n            <plugin>\n                <groupId>org.jacoco</groupId>\n                <artifactId>jacoco-maven-plugin</artifactId>\n                <version>${jacoco-maven-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <id>prepare-agent</id>\n                        <goals>\n                            <goal>prepare-agent</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>report</id>\n                        <phase>prepare-package</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>post-unit-test</id>\n                        <phase>test</phase>\n                        <goals>\n                            <goal>report</goal>\n                        </goals>\n                        <configuration>\n                            <dataFile>target/jacoco.exec</dataFile>\n                            <outputDirectory>target/jacoco-site</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n                <configuration>\n                    <systemPropertyVariables>\n                        <jacoco-agent.destfile>target/jacoco.exec</jacoco-agent.destfile>\n                    </systemPropertyVariables>\n                    <excludes>\n                        <exclude>**/*VertxEBProxy.class</exclude>\n                        <exclude>**/Constants.class</exclude>\n                        <exclude>**/*VertxProxyHandler.class</exclude>\n                        <exclude>**/*Verticle.class</exclude>\n                        <exclude>**/mockauthenticator/</exclude>\n                        <exclude>**/JwtDataConverter.class</exclude>\n\n                        <!-- service proxy interfaces -->\n                        <exclude>**/*Service.class</exclude>\n\n                        <!-- apiserver classes tested in postman -->\n                        <exclude>**/*Apis.class</exclude>\n\n                        <!-- deployment helper classes -->\n                        <exclude>iudx/catalogue/server/deploy/*.class</exclude>\n                    </excludes>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>${maven-shade-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <id>dev</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <filters>\n                                <filter>\n                                    <artifact>*:*</artifact>\n                                    <excludes>\n                                        <exclude>META-INF/maven/**</exclude>\n                                        <exclude>META-INF/*.RSA</exclude>\n                                        <exclude>META-INF/*.DSA</exclude>\n                                        <exclude>META-INF/*.SF</exclude>\n                                    </excludes>\n                                </filter>\n                            </filters>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <manifestEntries>\n                                        <Main-Class>${exec.mainClassDev}</Main-Class>\n                                    </manifestEntries>\n                                </transformer>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                                    <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>\n                                    <resource>META-INF/services/io.vertx.core.spi.VertxServiceProvider</resource>\n                                </transformer>\n                            </transformers>\n                            <artifactSet></artifactSet>\n                            <outputFile>${project.build.directory}/${project.artifactId}-dev-${project.version}-fat.jar</outputFile>\n                        </configuration>\n                    </execution>\n                    <execution>\n                        <id>cluster</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <filters>\n                                <filter>\n                                    <artifact>*:*</artifact>\n                                    <excludes>\n                                        <exclude>META-INF/maven/**</exclude>\n                                        <exclude>META-INF/*.RSA</exclude>\n                                        <exclude>META-INF/*.DSA</exclude>\n                                        <exclude>META-INF/*.SF</exclude>\n                                    </excludes>\n                                </filter>\n                            </filters>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <manifestEntries>\n                                        <Main-Class>${exec.mainClass}</Main-Class>\n                                    </manifestEntries>\n                                </transformer>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.AppendingTransformer\">\n                                    <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>\n                                    <resource>META-INF/services/io.vertx.core.spi.VertxServiceProvider</resource>\n                                </transformer>\n                            </transformers>\n                            <artifactSet></artifactSet>\n                            <outputFile>${project.build.directory}/${project.artifactId}-cluster-${project.version}-fat.jar</outputFile>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-checkstyle-plugin</artifactId>\n                <version>${maven-checkstyle-plugin-google.version}</version>\n                <!-- ionSeverity> -->\n                <dependencies>\n                    <dependency>\n                        <groupId>com.puppycrawl.tools</groupId>\n                        <artifactId>checkstyle</artifactId>\n                        <version>${checkstyle.version}</version>\n                    </dependency>\n                </dependencies>\n                <configuration>\n                    <!-- <violationSeverity>warning</violationSeverity> -->\n                    <consoleOutput>true</consoleOutput>\n                    <encoding>UTF-8</encoding>\n                    <configLocation>./google_checks.xml</configLocation>\n                    <sourceDirectories>\n                        <sourceDirectory>${project.build.sourceDirectory}</sourceDirectory>\n                    </sourceDirectories>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-javadoc-plugin</artifactId>\n                <version>${maven-javadoc-plugin.version}</version>\n                <configuration>\n                    <source>${openjdk.version}</source>\n                    <target>${openjdk.version}</target>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>exec-maven-plugin</artifactId>\n                <version>${exec-maven-plugin.version}</version>\n                <executions>\n                    <execution>\n                        <id>catalogue-server</id>\n                        <configuration>\n                            <mainClass>iudx.catalogue.server.deploy.DeployerDev </mainClass>\n                            <classpathScope>test</classpathScope>\n                            <arguments>\n                                <argument>-jar</argument>\n                                <argument>{project.build.directory}/${project.artifactId}-dev-${project.version}-fat.jar</argument>\n                                <argument>-c</argument>\n                                <argument>./configs/config-dev.json</argument>\n                            </arguments>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-report-plugin.version}</version>\n                <configuration>\n                    <useSystemClassLoader>true</useSystemClassLoader>\n                    <testFailureIgnore>true</testFailureIgnore>\n                    <argLine>\n                        @{argLine}\n                        -javaagent:\"${settings.localRepository}/org/aspectj/aspectjweaver/1.9.22.1/aspectjweaver-1.9.22.1.jar\"\n                    </argLine>\n                    <systemProperties>\n                        <property>\n                            <name>allure.results.directory</name>\n                            <value>target/allure-results</value>\n                        </property>\n                    </systemProperties>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.aspectj</groupId>\n                        <artifactId>aspectjweaver</artifactId>\n                        <version>1.9.22.1</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n            <plugin>\n                <groupId>io.qameta.allure</groupId>\n                <artifactId>allure-maven</artifactId>\n                <version>2.15.2</version>\n                <configuration>\n                    <reportVersion>2.4.1</reportVersion>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>${maven-compiler-plugin.version}</version>\n                <configuration>\n                    <source>${openjdk.version}</source>\n                    <target>${openjdk.version}</target>\n                    <annotationProcessors>\n                        <annotationProcessor>io.vertx.codegen.CodeGenProcessor</annotationProcessor>\n                    </annotationProcessors>\n                </configuration>\n            </plugin>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-pmd-plugin</artifactId>\n                <version>${maven-pmd-plugin.version}</version>\n                <configuration>\n                    <targetJdk>${openjdk.version}</targetJdk>\n                    <rulesets>\n                        <ruleset>./iudx-pmd-ruleset.xml</ruleset>\n                    </rulesets>\n                    <printFailingErrors>true</printFailingErrors>\n                    <!--<maxAllowedViolations>622</maxAllowedViolations>-->\n                    <excludeRoots>\n                        <excludeRoot>target/generated-sources</excludeRoot>\n                    </excludeRoots>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n    <reporting>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-report-plugin</artifactId>\n                <version>${maven-surefire-report-plugin.version}</version>\n                <reportSets>\n                    <reportSet>\n                        <reports>\n                            <report>report-only</report>\n                        </reports>\n                    </reportSet>\n                </reportSets>\n            </plugin>\n        </plugins>\n    </reporting>\n</project>\n"
        },
        "database": "PostgreSQL",
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3.7'\n\nnetworks:\n  cat-net:\n    driver: bridge\n\nservices:\n\n  cat:\n    image: iudx/cat-prod:latest\n    environment:\n      - CAT_URL=https://catalogue.iudx.org.in\n      - LOG_LEVEL=INFO\n      - CAT_JAVA_OPTS=-Xmx4096m\n    volumes:\n      - ./configs/config-depl.json:/usr/share/app/configs/config.json\n      - ./configs/keystore.jks:/usr/share/app/configs/keystore.jks\n    depends_on:\n      - \"zookeeper\"\n    ports:\n      - \"8080:8080\"\n      - \"9000:9000\"\n    restart: on-failure\n    networks: \n      - cat-net\n    logging:\n         driver: \"json-file\"\n         options:\n             max-file: \"5\"\n             max-size: \"100m\"\n    command: bash -c \"exec java $$CAT_JAVA_OPTS  -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory -jar ./fatjar.jar  --host $$(hostname) -c configs/config.json\"\n\n  dev:\n    image: iudx/cat-dev:latest\n    environment:\n      - CAT_URL=https://catalogue.iudx.org.in\n      - LOG_LEVEL=INFO\n      - CAT_JAVA_OPTS=-Xmx1024m\n    volumes:\n      - ./configs/config-dev.json:/usr/share/app/configs/config.json\n      - ./configs/keystore.jks:/usr/share/app/configs/keystore.jks\n    ports:\n      - \"8080:8080\"\n      - \"9000:9000\"\n    restart: on-failure\n    networks: \n      - cat-net\n    logging:\n         driver: \"json-file\"\n         options:\n             max-file: \"5\"\n             max-size: \"100m\"\n    command:  bash -c \"exec java $$CAT_JAVA_OPTS  -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory -jar ./fatjar.jar  --host $$(hostname) -c configs/config.json\"\n\n# Jenkins CI pipeline Unit test and Jacoco service\n  test:\n    image: ghcr.io/datakaveri/cat-test:latest\n    environment:\n      - CAT_URL=https://catalogue.iudx.org.in\n      - WORKSPACE\n      - LOG_LEVEL=INFO\n    volumes:\n      - /home/ubuntu/configs/cat-config-test.json:/usr/share/app/configs/config-test.json\n      - ./src/:/usr/share/app/src\n      - ./docker/runTests.sh:/usr/share/app/docker/runTests.sh\n      - ${WORKSPACE}:/tmp/test\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./iudx-pmd-ruleset.xml:/usr/share/app/iudx-pmd-ruleset.xml\n      - ./google_checks.xml:/usr/share/app/google_checks.xml\n    command: bash -c \"docker/runTests.sh && cp -r target /tmp/test\"\n    networks: \n      - cat-net\n    logging:\n         driver: \"json-file\"\n         options:\n             max-file: \"5\"\n             max-size: \"100m\"\n        \n# Jenkins CI pipeline performance test service\n  perfTest:\n    image: ghcr.io/datakaveri/cat-prod:latest\n    environment:\n      - CAT_URL=https://catalogue.iudx.org.in\n      - WORKSPACE\n      - LOG_LEVEL=INFO\n    volumes:\n      - /home/ubuntu/configs/cat-config-dev.json:/usr/share/app/configs/config.json\n    ports:\n      - \"8080:8080\"\n    command: bash -c \"exec java $$CAT_JAVA_OPTS  -Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.Log4j2LogDelegateFactory -jar ./fatjar.jar  --host $$(hostname) -c configs/config.json\"\n    networks: \n      - cat-net\n    logging:\n         driver: \"json-file\"\n         options:\n             max-file: \"5\"\n             max-size: \"100m\"\n    depends_on:\n      - \"zookeeper\"\n\n  zookeeper:\n    image: zookeeper:latest\n    expose: \n      - \"2181\"\n    networks:\n      - cat-net\n",
            "Jenkinsfile": "pipeline {\n  environment {\n    devRegistry = 'ghcr.io/datakaveri/cat-dev'\n    deplRegistry = 'ghcr.io/datakaveri/cat-prod'\n    testRegistry = 'ghcr.io/datakaveri/cat-test:latest'\n    registryUri = 'https://ghcr.io'\n    registryCredential = 'datakaveri-ghcr'\n    GIT_HASH = GIT_COMMIT.take(7)\n  }\n  agent { \n    node {\n      label 'slave1' \n    }\n  }\n  stages {\n\n    stage('Building images') {\n      steps{\n        script {\n          echo 'Pulled - ' + env.GIT_BRANCH\n          devImage = docker.build( devRegistry, \"-f ./docker/dev.dockerfile .\")\n          deplImage = docker.build( deplRegistry, \"-f ./docker/prod.dockerfile .\")\n          testImage = docker.build( testRegistry, \"-f ./docker/test.dockerfile .\")\n        }\n      }\n    }\n\n    stage('Unit Tests and CodeCoverage Test'){\n      steps{\n        script{\n          sh 'sudo update-alternatives --set java /usr/lib/jvm/java-21-openjdk-amd64/bin/java'\n          sh 'cp /home/ubuntu/configs/cat-config-test.json ./configs/config-test.json'\n          sh 'mvn clean test checkstyle:checkstyle pmd:pmd'\n        }\n        xunit (\n          thresholds: [ skipped(failureThreshold: '75'), failed(failureThreshold: '0') ],\n          tools: [ JUnit(pattern: 'target/surefire-reports/*.xml') ]\n        )\n        jacoco classPattern: 'target/classes', execPattern: 'target/*.exec', sourcePattern: 'src/main/java', exclusionPattern: 'iudx/catalogue/server/apiserver/*,iudx/catalogue/server/deploy/*,iudx/catalogue/server/mockauthenticator/*,iudx/catalogue/server/**/*EBProxy.*,iudx/catalogue/server/**/*ProxyHandler.*,iudx/catalogue/server/**/reactivex/*,**/Constants.class,**/*Verticle.class,iudx/catalogue/server/auditing/util/Constants.class,iudx/catalogue/server/database/DatabaseService.class,iudx/catalogue/server/database/postgres/PostgresService.class'\n      }\n      post{\n        always{\n          recordIssues(\n            enabledForFailure: true,\n            skipBlames: true,\n            qualityGates: [[threshold:40, type: 'TOTAL', unstable: false]],\n            tool: checkStyle(pattern: 'target/checkstyle-result.xml')\n          )\n          recordIssues(\n            enabledForFailure: true,\n            skipBlames: true,\n            qualityGates: [[threshold:11, type: 'TOTAL', unstable: false]],\n            tool: pmdParser(pattern: 'target/pmd.xml')\n          )\n        }\n        failure{\n          error \"Test failure. Stopping pipeline execution!\"\n        }\n        cleanup{\n          script{\n            sh 'sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java'\n            sh 'sudo rm -rf target/'\n          }\n        }\n      }\n    }\n\n    stage('Start Cat-Server for Performance and Integration Testing'){\n      steps{\n        script{\n            sh 'scp Jmeter/CatalogueServer.jmx jenkins@jenkins-master:/var/lib/jenkins/iudx/cat/Jmeter/'\n            sh 'docker compose up -d perfTest'\n            sh 'sleep 45'\n        }\n      }\n      post{\n        failure{\n          script{\n            sh 'docker compose down --remove-orphans'\n          }\n        }\n      }\n    }\n\n    stage('Run Jmeter Performance Tests'){\n      steps{\n        node('built-in') {\n          script{\n            sh 'rm -rf /var/lib/jenkins/iudx/cat/Jmeter/Report ; mkdir -p /var/lib/jenkins/iudx/cat/Jmeter/Report ; /var/lib/jenkins/apache-jmeter-5.4.1/bin/jmeter.sh -n -t /var/lib/jenkins/iudx/cat/Jmeter/CatalogueServer.jmx -l /var/lib/jenkins/iudx/cat/Jmeter/Report/JmeterTest.jtl -e -o /var/lib/jenkins/iudx/cat/Jmeter/Report'\n          }\n          perfReport filterRegex: '', showTrendGraphs: true, sourceDataFiles: '/var/lib/jenkins/iudx/cat/Jmeter/Report/*.jtl'\n        }\n      }\n      post{\n        failure{\n          script{\n            sh 'docker compose down --remove-orphans'\n          }\n          error \"Test failure. Stopping pipeline execution!\"\n        }\n      }\n    }\n\n    stage('Integration Tests and OWASP ZAP pen test'){\n      steps{\n        node('built-in') {\n          script{\n            startZap ([host: '0.0.0.0', port: 8090, zapHome: '/var/lib/jenkins/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/OWASP_ZAP/ZAP_2.11.0'])\n            sh 'curl http://0.0.0.0:8090/JSON/pscan/action/disableScanners/?ids=10096'\n          }\n        }\n        script{\n            sh 'sudo update-alternatives --set java /usr/lib/jvm/java-21-openjdk-amd64/bin/java'\n            sh 'scp /home/ubuntu/configs/cat-config-test.json ./configs/config-test.json'\n            sh 'mvn test-compile failsafe:integration-test -DskipUnitTests=true -DintTestProxyHost=jenkins-master-priv -DintTestProxyPort=8090 -DintTestHost=jenkins-slave1 -DintTestPort=8080'\n        }\n        node('built-in') {\n          script{\n            runZapAttack()\n          }\n        }\n      }\n      post{\n        always{\n           xunit (\n             thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n             tools: [ JUnit(pattern: 'target/failsafe-reports/*.xml') ]\n             )\n           node('built-in') {\n            script{\n               archiveZap failHighAlerts: 1, failMediumAlerts: 1, failLowAlerts: 1\n            }\n          }\n        }\n        failure{\n          error \"Test failure. Stopping pipeline execution!\"\n        }\n        cleanup{\n          script{\n            sh 'sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java'\n            sh 'docker compose down --remove-orphans'\n          } \n        }\n      }\n    }\n\n    stage('Continuous Deployment') {\n      when {\n        allOf {\n          anyOf {\n            changeset \"docker/**\"\n            changeset \"docs/**\"\n            changeset \"pom.xml\"\n            changeset \"src/main/**\"\n            triggeredBy cause: 'UserIdCause'\n          }\n          expression {\n            return env.GIT_BRANCH == 'origin/master';\n          }\n        }\n      }\n      stages {\n        stage('Push Images') {\n          steps {\n            script {\n              docker.withRegistry( registryUri, registryCredential ) {\n                devImage.push(\"5.6.0-alpha-${env.GIT_HASH}\")\n                deplImage.push(\"5.6.0-alpha-${env.GIT_HASH}\")\n              }\n            }\n          }\n        }\n        stage('Docker Swarm deployment') {\n          steps {\n            script {\n              sh \"ssh azureuser@docker-swarm 'docker service update cat_cat --image ghcr.io/datakaveri/cat-prod:5.6.0-alpha-${env.GIT_HASH}'\"\n              sh 'sleep 10'\n            }\n          }\n          post{\n            failure{\n              error \"Failed to deploy image in Docker Swarm\"\n            }\n          }\n        }\n        stage('Integration test on swarm deployment') {\n          steps {\n            script{\n              sh 'sudo update-alternatives --set java /usr/lib/jvm/java-21-openjdk-amd64/bin/java'\n              sh 'mvn test-compile failsafe:integration-test -DskipUnitTests=true -DintTestDepl=true'\n            }\n          }\n          post{\n            always{\n              xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ JUnit(pattern: 'target/failsafe-reports/*.xml') ]\n              )\n            }\n            failure{\n              error \"Test failure. Stopping pipeline execution!\"\n            }\n            cleanup{\n              script{\n                sh 'sudo update-alternatives --set java /usr/lib/jvm/java-11-openjdk-amd64/bin/java'\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  post{\n    failure{\n      script{\n        if (env.GIT_BRANCH == 'origin/master')\n        emailext recipientProviders: [buildUser(), developers()], to: '$RS_RECIPIENTS, $DEFAULT_RECIPIENTS', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', body: '''$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:\nCheck console output at $BUILD_URL to view the results.'''\n      }\n    }\n  }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".gitignore",
            "Dockerfile",
            "ProfanityCheck.py",
            "README.md",
            "RabbitMq.py",
            "UpdateDatabase.py",
            "docker-compose.yaml",
            "example-config.json",
            "main.py",
            "requirements.txt"
        ],
        "folders": []
    }
}