{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "build.gradle.kts": "import org.radarbase.gradle.plugin.radarKotlin\n\nplugins {\n    id(\"org.radarbase.radar-root-project\") version Versions.radarCommons\n    id(\"org.radarbase.radar-dependency-management\") version Versions.radarCommons\n    id(\"org.radarbase.radar-kotlin\") version Versions.radarCommons apply false\n    kotlin(\"plugin.serialization\") version Versions.kotlin apply false\n    kotlin(\"plugin.noarg\") version Versions.kotlin apply false\n    kotlin(\"plugin.jpa\") version Versions.kotlin apply false\n    kotlin(\"plugin.allopen\") version Versions.kotlin apply false\n}\n\nradarRootProject {\n    projectVersion.set(Versions.project)\n    gradleVersion.set(Versions.gradle)\n}\n\nsubprojects {\n    apply(plugin = \"org.radarbase.radar-kotlin\")\n\n    radarKotlin {\n        javaVersion.set(Versions.java)\n        kotlinVersion.set(Versions.kotlin)\n        slf4jVersion.set(Versions.slf4j)\n        log4j2Version.set(Versions.log4j2)\n        junitVersion.set(Versions.junit)\n    }\n}\n"
        },
        "database": null,
        "build_system": "Gradle",
        "config_files": {
            "docker-compose.yml": "---\nversion: '3.2'\n\nservices:\n\n  #---------------------------------------------------------------------------#\n  # Management Portal                                                         #\n  #---------------------------------------------------------------------------#\n  managementportal:\n    image: radarbase/management-portal:2.0.0\n    depends_on:\n      - mp-postgresql\n    environment:\n      SPRING_PROFILES_ACTIVE: prod\n      SPRING_DATASOURCE_URL: jdbc:postgresql://mp-postgresql:5432/managementportal\n      SPRING_DATASOURCE_USERNAME: radarcns\n      SPRING_DATASOURCE_PASSWORD: radarcns\n      MANAGEMENTPORTAL_FRONTEND_CLIENT_SECRET: \"testMe\"\n      MANAGEMENTPORTAL_COMMON_BASE_URL: http://localhost:8080/managementportal\n      MANAGEMENTPORTAL_COMMON_MANAGEMENT_PORTAL_BASE_URL: http://localhost:8080/managementportal\n      MANAGEMENTPORTAL_OAUTH_CLIENTS_FILE: /mp-includes/config/oauth_client_details.csv\n      MANAGEMENTPORTAL_CATALOGUE_SERVER_ENABLE_AUTO_IMPORT: 'false'\n      MANAGEMENTPORTAL_OAUTH_SIGNING_KEY_ALIAS: 'radarbase-managementportal-ec'\n      SERVER_SERVLET_SESSION_COOKIE_SECURE: \"false\"\n      JAVA_OPTS: -Xmx256m  # maximum heap size for the JVM running ManagementPortal, increase this as necessary\n    volumes:\n      - ./docker/etc/managementportal/:/mp-includes/config\n    labels:\n      - \"traefik.http.routers.managementportal.rule=PathPrefix(`/managementportal`)\"\n      - \"traefik.http.services.managementportal.loadbalancer.server.port=8080\"\n\n  mp-postgresql:\n    image: bitnami/postgresql:15\n    environment:\n      - POSTGRESQL_USERNAME=radarcns\n      - POSTGRESQL_PASSWORD=radarcns\n      - POSTGRESQL_DATABASE=managementportal\n    labels:\n      - \"traefik.enable=false\"\n\n  rest-auth-postgresql:\n    image: bitnami/postgresql:15\n    environment:\n      - POSTGRESQL_USERNAME=radarcns\n      - POSTGRESQL_PASSWORD=radarcns\n      - POSTGRESQL_DATABASE=restsourceauthorizer\n    labels:\n      - \"traefik.enable=false\"\n\n  radar-rest-sources-backend:\n    image: radarbase/radar-rest-source-auth-backend:dev\n    build:\n      context: .\n      dockerfile: authorizer-app-backend/Dockerfile\n    depends_on:\n      - rest-auth-postgresql\n      - managementportal\n    volumes:\n      - ./docker/etc/rest-source-authorizer/authorizer.yml:/etc/authorizer-app-backend/authorizer.yml\n    command: [\"authorizer-app-backend\", \"/etc/authorizer-app-backend/authorizer.yml\"]\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail-with-body\", \"http://localhost:8085/rest-sources/backend/health\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n    labels:\n      - \"traefik.http.routers.backend.rule=PathPrefix(`/rest-sources/backend`)\"\n      - \"traefik.http.services.backend.loadbalancer.server.port=8085\"\n\n  radar-rest-sources-authorizer:\n    image: radarbase/radar-rest-source-authorizer:dev\n    build:\n      context: authorizer-app\n      dockerfile: Dockerfile\n    depends_on:\n      - radar-rest-sources-backend\n      - managementportal\n      - redis\n#    ports:\n#      - \"8080:80\"\n    environment:\n      BASE_HREF: \"/rest-sources/authorizer/\"\n      BACKEND_BASE_URL: \"http://localhost:8080/rest-sources/backend\"\n      VALIDATE: \"true\"\n      AUTH_GRANT_TYPE: \"authorization_code\"\n      AUTH_CLIENT_ID: \"radar_rest_sources_authorizer\"\n      AUTH_CLIENT_SECRET: \"\"\n      AUTH_CALLBACK_URL: \"http://localhost:8080/rest-sources/authorizer/login\"\n      AUTH_URI: \"http://localhost:8080/managementportal/oauth\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"--fail-with-body\", \"http://localhost:8080/rest-sources/authorizer\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n    labels:\n      - \"traefik.http.routers.rest-auth.rule=PathPrefix(`/rest-sources/authorizer`)\"\n      - \"traefik.http.services.rest-auth.loadbalancer.server.port=8080\"\n\n  traefik:\n    image: traefik:2.9\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    command: --api.insecure=true --providers.docker\n    ports:\n      - \"8080:80\"\n\n  redis:\n    image: redis:latest\n    restart: on-failure\n    command: [\"redis-server\",\"--bind\",\"redis\",\"127.0.0.1\", \"--port\",\"6379\"]\n    ports:\n      - \"6379:6379\"\n    environment:\n      - ALLOW_EMPTY_PASSWORD=yes\n",
            "authorizer-app/Dockerfile": "FROM --platform=$BUILDPLATFORM node:18-alpine as builder\n\nRUN mkdir /app\nWORKDIR /app\n\nCOPY package.json yarn.lock /app/\nRUN yarn install\n\nCOPY ./ /app/\n\nRUN yarn build\n\nFROM nginxinc/nginx-unprivileged:1.27-alpine3.20-perl\n\nENV BASE_HREF=\"/rest-sources/authorizer/\" \\\n    BACKEND_BASE_URL=\"http://localhost/rest-sources/backend\" \\\n    AUTH_GRANT_TYPE=\"authorization_code\" \\\n    AUTH_CLIENT_ID=\"radar_rest_sources_authorizer\" \\\n    AUTH_CLIENT_SECRET=\"\" \\\n    AUTH_CALLBACK_URL=\"http://localhost/rest-sources/authorizer/login\" \\\n    AUTH_URI=\"http://localhost/managementportal/oauth\" \\\n    RADAR_BASE_URL=\"http://localhost\"\n\n# add init script\nCOPY docker/optimization.conf /etc/nginx/conf.d/\nCOPY --chown=101 docker/default.conf /etc/nginx/conf.d/\nCOPY docker/30-env-subst.sh /docker-entrypoint.d/\n\nWORKDIR /usr/share/nginx/html\n\nCOPY --from=builder /app/dist/ .\nCOPY --from=builder --chown=101 /app/dist/main.* /app/dist/index.html* ./\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".editorconfig",
            ".gitignore",
            "Dockerfile",
            "README.md",
            "angular.json",
            "package.json",
            "proxy.conf.json",
            "tsconfig.app.json",
            "tsconfig.json",
            "yarn.lock"
        ],
        "folders": [
            "docker",
            "src"
        ]
    }
}