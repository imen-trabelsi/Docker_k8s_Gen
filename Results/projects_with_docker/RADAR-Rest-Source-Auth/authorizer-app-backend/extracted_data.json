{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "build.gradle.kts": "plugins {\n    application\n    kotlin(\"plugin.serialization\")\n    kotlin(\"plugin.noarg\")\n    kotlin(\"plugin.jpa\")\n    kotlin(\"plugin.allopen\")\n}\n\napplication {\n    mainClass.set(\"org.radarbase.authorizer.Main\")\n}\n\ndependencies {\n    api(kotlin(\"stdlib-jdk8\"))\n    implementation(kotlin(\"reflect\"))\n\n    implementation(\"org.radarbase:radar-jersey:${Versions.radarJersey}\")\n    implementation(\"org.radarbase:radar-jersey-hibernate:${Versions.radarJersey}\") {\n        runtimeOnly(\"org.postgresql:postgresql:${Versions.postgresql}\")\n    }\n    implementation(\"org.radarbase:radar-commons-kotlin:${Versions.radarCommons}\")\n\n    implementation(\"redis.clients:jedis:${Versions.jedis}\")\n\n    implementation(enforcedPlatform(\"io.ktor:ktor-bom:${Versions.ktor}\"))\n    implementation(\"io.ktor:ktor-client-core\")\n    implementation(\"io.ktor:ktor-client-auth\")\n    implementation(\"io.ktor:ktor-client-cio\")\n    implementation(\"io.ktor:ktor-client-content-negotiation\")\n    implementation(\"io.ktor:ktor-serialization-kotlinx-json\")\n\n    testImplementation(\"org.hamcrest:hamcrest:${Versions.hamcrest}\")\n    testImplementation(\"org.mockito.kotlin:mockito-kotlin:${Versions.mockitoKotlin}\")\n    testImplementation(\"org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:${Versions.jersey}\")\n}\n\nallOpen {\n    annotation(\"jakarta.persistence.Entity\")\n    annotation(\"jakarta.persistence.MappedSuperclass\")\n    annotation(\"jakarta.persistence.Embeddable\")\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "Gradle",
        "config_files": {
            "authorizer-app-backend/docker-compose.yml": "---\nversion: '3.2'\n\nservices:\n\n  #---------------------------------------------------------------------------#\n  # Management Portal                                                         #\n  #---------------------------------------------------------------------------#\n  managementportal-app:\n    image: radarbase/management-portal:0.8.0\n    depends_on:\n      - radarbase-postgresql\n    ports:\n      - \"8090:8080\"\n    environment:\n      SPRING_PROFILES_ACTIVE: prod\n      SPRING_DATASOURCE_URL: jdbc:postgresql://radarbase-postgresql:5432/managementportal\n      SPRING_DATASOURCE_USERNAME: radarcns\n      SPRING_DATASOURCE_PASSWORD: radarcns\n      MANAGEMENTPORTAL_FRONTEND_CLIENT_SECRET: \"testMe\"\n      MANAGEMENTPORTAL_COMMON_BASE_URL: http://localhost:8080/managementportal\n      MANAGEMENTPORTAL_COMMON_MANAGEMENT_PORTAL_BASE_URL: http://localhost:8080/managementportal\n      MANAGEMENTPORTAL_OAUTH_CLIENTS_FILE: /mp-includes/config/oauth_client_details.csv\n      MANAGEMENTPORTAL_CATALOGUE_SERVER_ENABLE_AUTO_IMPORT: 'false'\n      MANAGEMENTPORTAL_OAUTH_SIGNING_KEY_ALIAS: 'radarbase-managementportal-ec'\n      JAVA_OPTS: -Xmx256m  # maximum heap size for the JVM running ManagementPortal, increase this as necessary\n    volumes:\n      - ./docker/etc/managementportal/:/mp-includes/config\n\n  radarbase-postgresql:\n    image: radarbase/radarbase-postgres:latest\n    volumes:\n      - \"./data/:/var/lib/postgresql/data/\"\n    ports:\n      - \"5434:5432\"\n    environment:\n      - POSTGRES_USER=radarcns\n      - POSTGRES_PASSWORD=radarcns\n      - POSTGRES_MULTIPLE_DATABASES=managementportal,restsourceauthorizer\n\n\n#  radar-rest-sources-backend:\n#    image: radarbase/radar-rest-source-auth-backend:dev\n#    build:\n#      context: .\n#    depends_on:\n#      - radarbase-postgresql\n#      - managementportal-app\n##    ports:\n##      - \"8085:8080\"\n#    environment:\n#      - SPRING_DATASOURCE_URL=jdbc:postgresql://radarbase-postgresql:5432/restsourceauthorizer\n#      - SPRING_DATASOURCE_USERNAME=radarcns\n#      - SPRING_DATASOURCE_PASSWORD=radarcns\n#      - REST_SOURCE_AUTHORIZER_SOURCE_CLIENTS_FILE_PATH=app-includes/rest_source_clients_configs.yml\n#      - REST_SOURCE_AUTHORIZER_VALIDATOR=managementportal\n#      - REST_SOURCE_AUTHORIZER_MANAGEMENT_PORTAL_BASE_URL=http://managementportal-app:8080/managementportal/\n#      - REST_SOURCE_AUTHORIZER_MANAGEMENT_PORTAL_OAUTH_CLIENT_ID=radar_rest_sources_auth_backend\n#      - REST_SOURCE_AUTHORIZER_MANAGEMENT_PORTAL_OAUTH_CLIENT_SECRET=secret\n#      - LOGGING_LEVEL_ORG_RADARBASE_AUTHORIZER=DEBUG\n#      - APP_SLEEP=10 # gives time for the database to boot before the application\n#    volumes:\n#      - ./docker/etc/rest-source-authorizer/:/app-includes/\n#    healthcheck:\n#      test: [\"CMD\", \"wget\", \"--spider\", \"http://localhost:8080/health\"]\n#      interval: 1m30s\n#      timeout: 5s\n#      retries: 3\n#\n  radar-rest-sources-authorizer:\n    image: radarbase/radar-rest-source-authorizer:dev\n    build:\n      context: authorizer-app\n      dockerfile: Dockerfile\n    depends_on:\n#      - radar-rest-sources-backend\n      - radarbase-postgresql\n      - managementportal-app\n    ports:\n      - \"8080:80\"\n    environment:\n      BASE_HREF: \"/\"\n      BACKEND_BASE_URL: \"http://localhost:8085/rest-sources/backend\"\n      VALIDATE: \"true\"\n      AUTH_GRANT_TYPE: \"authorization_code\"\n      AUTH_CLIENT_ID: \"radar_rest_sources_authorizer\"\n      AUTH_CLIENT_SECRET: \"\"\n      AUTH_CALLBACK_URL: \"http://localhost:8080/login\"\n      AUTH_URI: \"http://localhost:8090/managementportal/oauth\"\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--spider\", \"http://localhost:80\"]\n      interval: 1m30s\n      timeout: 5s\n      retries: 3\n#\n#  webserver:\n#    image: nginx:1.17.3-alpine\n#    ports:\n#      - \"8080:8080\"\n#    depends_on:\n#      - radar-rest-sources-backend\n#      - managementportal-app\n#      - radar-rest-sources-authorizer\n#    volumes:\n#      - ./docker/etc/webserver/nginx-\n",
            "authorizer-app-backend/Dockerfile": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nFROM --platform=$BUILDPLATFORM gradle:8.3-jdk17 as builder\n\nRUN mkdir /code\nWORKDIR /code\n\nENV GRADLE_USER_HOME=/code/.gradlecache \\\n    GRADLE_OPTS=\"-Djdk.lang.Process.launchMechanism=vfork -Dorg.gradle.vfs.watch=false\"\n\nCOPY ./buildSrc /code/buildSrc\nCOPY ./build.gradle.kts ./settings.gradle.kts ./gradle.properties /code/\nCOPY ./buildSrc /code/buildSrc\nCOPY authorizer-app-backend/build.gradle.kts  /code/authorizer-app-backend/\nRUN gradle downloadDependencies copyDependencies startScripts\n\nCOPY authorizer-app-backend/src /code/authorizer-app-backend/src\n\nRUN gradle jar\n\nFROM eclipse-temurin:17-jre\n\nLABEL description=\"RADAR-base rest sources authorizer backend application\"\n\n# Override JAVA_OPTS to set heap parameters, for example\nENV JAVA_OPTS=\"\" \\\n    AUTHORIZER_APP_BACKEND_OPTS=\"\"\n\nCOPY --from=builder /code/authorizer-app-backend/build/scripts/* /usr/bin/\nCOPY --from=builder /code/authorizer-app-backend/build/third-party/* /usr/lib/\nCOPY --from=builder /code/authorizer-app-backend/build/libs/authorizer-app-backend-*.jar /usr/lib/\n\nUSER 101\n\nEXPOSE 8085\n\nCMD [\"authorizer-app-backend\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".editorconfig",
            ".gitignore",
            "Dockerfile",
            "README.md",
            "angular.json",
            "package.json",
            "proxy.conf.json",
            "tsconfig.app.json",
            "tsconfig.json",
            "yarn.lock"
        ],
        "folders": [
            "docker",
            "src"
        ]
    }
}