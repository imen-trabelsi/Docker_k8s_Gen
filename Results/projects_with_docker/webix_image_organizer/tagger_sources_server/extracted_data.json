{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "JavaScript",
        "dependencies": {
            "package.json": "{\r\n  \"name\": \"webix-image-organizer\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Webix Image Organizer\",\r\n  \"main\": \"sources/myapp.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"webpack --env production\",\r\n    \"start\": \"webpack serve\"\r\n  },\r\n  \"keywords\": [\r\n    \"webix\",\r\n    \"jet\"\r\n  ],\r\n  \"license\": \"GPLv3\",\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.20.12\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.19.6\",\r\n    \"@babel/preset-env\": \"^7.8.7\",\r\n    \"@babel/register\": \"^7.8.6\",\r\n    \"@babel/runtime\": \"^7.8.7\",\r\n    \"babel-loader\": \"^9.1.2\",\r\n    \"copy-webpack-plugin\": \"^11.0.0\",\r\n    \"css-loader\": \"^6.7.3\",\r\n    \"dotenv\": \"^16.0.3\",\r\n    \"dotenv-webpack\": \"^8.0.1\",\r\n    \"eslint\": \"^7.32.0\",\r\n    \"eslint-config-xbsoftware\": \"5.0.0-alpha.3\",\r\n    \"eslint-plugin-import\": \"^2.26.0\",\r\n    \"eslint-plugin-require\": \"0.0.1\",\r\n    \"html-loader\": \"^4.2.0\",\r\n    \"html-webpack-plugin\": \"^5.3.2\",\r\n    \"less\": \"^3.11.1\",\r\n    \"less-loader\": \"^11.1.0\",\r\n    \"mini-css-extract-plugin\": \"^2.7.2\",\r\n    \"terser-webpack-plugin\": \"^5.3.6\",\r\n    \"webpack\": \"^5.94.0\",\r\n    \"webpack-cli\": \"^5.0.1\",\r\n    \"webpack-dev-server\": \"^4.11.1\"\r\n  },\r\n  \"dependencies\": {\r\n    \"ajv\": \"^8.12.0\",\r\n    \"codemirror\": \"^5.65.0\",\r\n    \"d3\": \"^7.8.5\",\r\n    \"dot-object\": \"^2.1.4\",\r\n    \"file-saver\": \"^2.0.0\",\r\n    \"geojs\": \"^1.10.12\",\r\n    \"hotkeys-js\": \"^3.10.1\",\r\n    \"json-formatter-js\": \"^2.2.0\",\r\n    \"jsoneditor\": \"^9.10.4\",\r\n    \"lodash\": \"^4.17.21\",\r\n    \"openseadragon\": \"^4.1.0\",\r\n    \"openseadragon-filtering\": \"^1.0.0\",\r\n    \"papaparse\": \"^5.2.0\",\r\n    \"paper\": \"^0.12.17\",\r\n    \"paperjs-offset\": \"^1.0.8\",\r\n    \"path\": \"^0.12.7\",\r\n    \"plotly.js-dist-min\": \"^2.18.0\",\r\n    \"PubSub\": \"^3.4.0\",\r\n    \"vanilla-picker\": \"^2.9.2\",\r\n    \"webix\": \"6.2.0\",\r\n    \"webix-jet\": \"^2.0.0\",\r\n    \"xlsx\": \"^0.17.5\"\r\n  }\r\n}\r\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nvolumes:\n    mongodb_volume:\n\nservices:\n    nginx:\n        image: nginx:1\n        container_name: production_nginx\n        volumes:\n            - ./conf/nginx/router.conf:/etc/nginx/conf.d/default.conf\n            - ./conf/nginx/snippets:/etc/nginx/snippets\n            - ./conf/nginx/logs/:/var/log/nginx/\n            - /etc/letsencrypt/:/etc/letsencrypt/\n        ports:\n            - 80:80\n            - 443:443\n        restart: always\n    # certbot:\n    #     container_name: certbot\n    #     image: certbot/certbot\n    #     volumes:\n    #         - ./conf/nginx/data/certbot/conf/:/etc/letsencrypt/\n    #         - ./conf/nginx/data/certbot/www/:/var/www/certbot/\n    #     restart: always\n    #     entrypoint: \"/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'\"\n    tagger_client:\n        container_name: tagger_client\n        env_file: ./tagger/.env\n        build:\n            context: ./tagger/\n            dockerfile: ./Dockerfile\n        expose:\n            - \"80\"\n        ports:\n            - 2000:80\n    tagger_backend:\n        container_name: tagger_backend\n        env_file: ./tagger/.env\n        environment:\n            - MONGODB_HOST=mongodb\n        build:\n            context: ./tagger/\n            dockerfile: sources/server/Dockerfile\n        expose:\n            - \"4000\"\n        ports:\n            - 4000:4000\n    #    restart: always\n    images_organizer:\n        container_name: images_organizer\n        build: ./\n        expose:\n            - \"80\"\n        ports:\n            - 3000:80\n    recognition_service:\n        container_name: recognition_service\n        build:\n            context: ./services\n            dockerfile: Dockerfile\n        expose:\n            - \"5000\"\n        ports:\n            - 5000:5000\n        restart: always\n    mongodb:\n        image: mongo:4.2.6\n        volumes:\n            - mongodb_volume:/data/db\n        restart: always\n    faceted_search:\n        container_name: faceted_search\n        environment:\n            - MONGODB_HOST=mongodb\n            - PORT=80\n        build:\n            context: ./faceted_search/\n            dockerfile: ./Dockerfile\n        expose:\n            - \"8000\"\n        ports:\n            - 8000:80\n    rcm:\n        container_name: rcm\n        build:\n            context: ./rcm\n            dockerfile: ./Dockerfile\n        expose:\n            - \"3000\"\n        ports:\n            - 3000:3000\n",
            "Dockerfile": "FROM node:16-alpine3.15  as builder \r\n\r\nWORKDIR /app/dev\r\n\r\nCOPY package.json .\r\n\r\nRUN apk add --no-cache git\r\n\r\nRUN git --version\r\n\r\nRUN npm -v\r\n\r\n# build app bundles\r\nRUN npm i\r\n\r\nRUN npm install pm2 -g\r\n\r\nCOPY . . \r\n\r\nRUN npm run build\r\n\r\nEXPOSE 80\r\n\r\nCMD [\"pm2-runtime\", \"start\", \"pm2.config.js\", \"--env=production\"]\r\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "colors.py",
            "dockerbuild.sh",
            "marker.py",
            "marker_search.py",
            "ocr.py",
            "requirements.txt",
            "server.py",
            "sticker_search.py"
        ],
        "folders": [
            "testScripts"
        ]
    }
}