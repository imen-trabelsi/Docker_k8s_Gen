{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.2.5.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n\n    <groupId>io.redis.demos</groupId>\n    <artifactId>cache-invalidation-cdc-debezium</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>caching-service</module>\n        <module>db-to-streams-service</module>\n        <module>sql-rest-api</module>\n        <module>streams-to-redisearch-service</module>\n        <module>streams-to-redisgraph-service</module>\n    </modules>\n\n    <properties>\n        <java.version>1.8</java.version>\n        <version.jedis>3.4.1</version.jedis>\n        <version.jredisgraph>2.2.0</version.jredisgraph>\n        <version.jredisearch>2.0.0</version.jredisearch>\n        <version.debezium>1.1.0.Final</version.debezium>\n        <version.springboot>2.2.5.RELEASE</version.springboot>\n        <version.javax.inject>1</version.javax.inject>\n    </properties>\n\n\n    <repositories>\n        <repository>\n            <id>snapshots-repo</id>\n            <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n        </repository>\n    </repositories>\n\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.8.1</version>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                    <annotationProcessorPaths>\n                        <path>\n                            <groupId>org.projectlombok</groupId>\n                            <artifactId>lombok</artifactId>\n                            <version>1.18.12</version>\n                        </path>\n                    </annotationProcessorPaths>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>"
        },
        "database": "Redis",
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3.7'\nservices:\n\n  app-redis:\n    build:\n      context: ./redis-server\n      dockerfile: Dockerfile\n    ports:\n      - \"6379:6379\"\n    networks:\n      - redis-microservices-network\n    restart: always\n\n  app-mysql:\n    build:\n      context: ./mysql-database\n      dockerfile: Dockerfile\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=debezium\n      - MYSQL_USER=mysqluser\n      - MYSQL_PASSWORD=mysqlpw\n    networks:\n      - redis-microservices-network\n    restart: always\n\n  app-db-to-streams:\n    build:\n      context: ./db-to-streams-service\n      dockerfile: Dockerfile\n    ports:\n      - \"8082:8082\"\n    environment:\n      - REDIS_HOST=app-redis\n      - REDIS_PORT=6379\n      - REDIS_PASSWORD=\n    networks:\n      - redis-microservices-network\n    restart: always\n    depends_on:\n      - app-mysql\n      - app-redis\n\n  app-streams-to-redisgraph:\n    build:\n      context: ./streams-to-redisgraph-service\n      dockerfile: Dockerfile\n    ports:\n      - \"8083:8083\"\n    environment:\n      - REDIS_HOST=app-redis\n      - REDIS_PORT=6379\n      - REDIS_PASSWORD=\n    networks:\n      - redis-microservices-network\n    restart: always\n    depends_on:\n      - app-mysql\n      - app-redis\n\n  app-sql-rest-api:\n    build:\n      context: ./sql-rest-api\n      dockerfile: Dockerfile\n    ports:\n      - \"8081:8081\"\n    environment:\n      - SPRING_DATASOURCE_URL=jdbc:mysql://app-mysql:3306/inventory\n      - SPRING_DATASOURCE_USERNAME=mysqluser\n      - SPRING_DATASOURCE_PASSWORD=mysqlpw\n    networks:\n      - redis-microservices-network\n    depends_on:\n      - app-mysql\n    restart: always\n\n  app-caching:\n    build:\n      context: ./caching-service\n      dockerfile: Dockerfile\n    ports:\n      - \"8084:8084\"\n    environment:\n      - REDIS_HOST=app-redis\n      - REDIS_PORT=6379\n      - REDIS_PASSWORD=\n    networks:\n      - redis-microservices-network\n    depends_on:\n      - app-mysql\n      - app-redis\n    restart: always\n\n  app-streams-to-redis-hashes:\n    build:\n      context: ./streams-to-redisearch-service\n      dockerfile: Dockerfile\n    ports:\n      - \"8085:8085\"\n    environment:\n      - REDIS_HOST=app-redis\n      - REDIS_PORT=6379\n      - REDIS_PASSWORD=\n    networks:\n      - redis-microservices-network\n    depends_on:\n      - app-redis\n    restart: always\n\n  app-comments:\n    build:\n      context: ./comments-service\n      dockerfile: Dockerfile\n    ports:\n      - \"8086:8086\"\n    environment:\n      - REDIS_HOST=app-redis\n      - REDIS_PORT=6379\n      - REDIS_PASSWORD=\n    networks:\n      - redis-microservices-network\n    depends_on:\n      - app-redis\n    restart: always\n\n  ws-notifications-service:\n      build:\n        context: ./notifications-service-node\n        dockerfile: Dockerfile\n      ports:\n        - \"8888:8888\"\n      environment:\n        - REDIS_HOST=app-redis\n        - REDIS_PORT=6379\n        - REDIS_PASSWORD=\n      networks:\n        - redis-microservices-network\n      depends_on:\n        - app-redis\n      restart: always\n      \n  app-frontend:\n    build:\n      context: ./ui-redis-front-end/redis-front\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:80\"\n    networks:\n      - redis-microservices-network\n    depends_on:\n      - app-redis\n      - app-mysql\n      - app-streams-to-redisgraph\n      - app-streams-to-redis-hashes\n      - app-db-to-streams\n      - app-caching\n      - app-sql-rest-api\n    restart: always\n\nnetworks:\n  redis-microservices-network:\n    driver: bridge",
            "ui-redis-front-end/redis-front/Dockerfile": "# build stage\nFROM node:lts-alpine as build-stage\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nRUN npx browserslist@latest --update-db\nRUN npm run build\n\n# production stage\nFROM nginx:stable-alpine as production-stage\nCOPY --from=build-stage /app/dist /usr/share/nginx/html\nCOPY nginx.conf /etc/nginx\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\",\"-c\",\"/etc/nginx/nginx.conf\"]\n",
            "ui-redis-front-end/redis-front/nginx.conf": "\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        location / {\n          root   /usr/share/nginx/html;\n          index  index.html index.htm;\n          try_files $uri $uri/ /index.html?/$request_uri;\n        }\n\n        location /api/comments/ {\n            proxy_pass http://app-comments:8086/api/1.0/comments/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        location /api/fulltext/ {\n            proxy_pass http://app-streams-to-redis-hashes:8085/api/1.0/search-service/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        location /api/graph/ {\n            proxy_pass http://app-streams-to-redisgraph:8083/api/1.0/graph-service/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        location /api/db-to-streams-service/ {\n            proxy_pass http://app-db-to-streams:8082/api/1.0/db-to-streams-service/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        location /api/caching/ {\n            proxy_pass http://app-caching:8084/api/1.0/caching/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        location /api/legacy/ {\n            proxy_pass http://app-sql-rest-api:8081/api/1.0/sql-rest-api/;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection 'upgrade';\n            proxy_set_header Host $host;\n            proxy_cache_bypass $http_upgrade;\n        }\n\n        # location /notifications/ {\n        #     proxy_pass http://websocket;\n        #     proxy_http_version 1.1;\n        #     proxy_set_header Upgrade $http_upgrade;\n        #     proxy_set_header Connection 'upgrade';\n        #     proxy_set_header Host $host;\n        #     proxy_cache_bypass $http_upgrade;\n        # }\n\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n    }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "README.md",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}