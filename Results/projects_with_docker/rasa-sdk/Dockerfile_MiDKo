# Stage 1 : Setup the build environment
FROM python:3.8-slim as python_builder
ENV POETRY_VERSION=$POETRY_VERSION
RUN apt-get update -qq \
&& apt-get install -y --no-install-recommends curl \
&& update-alternatives --install /usr/bin/python python /usr/bin/python3 100 \
&& update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 100 \
&& apt-get autoremove -y \
&& curl -sSL https://install.python-poetry.org | python \

WORKDIR /app
COPY . /app
COPY ./entrypoint.sh /app/

ENV PATH="/opt/venv/bin:${PATH}"
RUN . /opt/venv/bin/activate && \
pip install --no-cache-dir -U pip && \
pip install --no-cache-dir wheel && \
poetry install --no-dev --no-root --no-interaction && \
. /opt/venv/bin/activate && poetry build -f wheel -n && \
pip install --no-cache-dir --no-deps dist/*.whl && \
mkdir /wheels && \
poetry export -f requirements.txt --without-hashes --output /wheels/requirements.txt && \
poetry run pip wheel --wheel-dir=/wheels -r /wheels/requirements.txt && \
find /app/dist -maxdepth 1 -mindepth 1 -name '*.whl' -print0 | \
xargs -0 -I {} mv {} /wheels/ && \
find . -name '*.whl' -maxdepth 1 -exec basename {} \; | awk -F - '{ gsub("_", "-", $1); print $1 }' | uniq > /wheels/requirements.txt && \
rm -rf /opt/venv && \
python -m venv /opt/venv && \
. /opt/venv/bin/activate && \
pip install --no-cache-dir -U pip && \
pip install --no-cache-dir --no-index --find-links=/wheels -r /wheels/requirements.txt && \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
rm -rf /wheels && \

######## Start a new stage ######

# Stage 2 : Build the runtime image
FROM python:3.8-slim
EXPOSE 5055

WORKDIR /app

# Copy dependencies from the build image

ENV PATH="/opt/venv/bin:$PATH"

# Copy application 
COPY . /app

RUN chgrp -R 0 /app && chmod -R g=u /app

USER 1001

# Provide metadata
LABEL maintainer="Rasa <info@rasa.com>"
LABEL version="0.1"
LABEL description="This is an example Dockerfile for a Rasa-based project."

ENTRYPOINT ["./entrypoint.sh"]
CMD ["start", "--actions", "actions"]
