{
    "source_code_info": {
        "language": "Rust",
        "framework": "Rust",
        "dependencies": {
            "Cargo.toml": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"schema-engine/cli\",\n    \"schema-engine/core\",\n    \"schema-engine/connectors/*\",\n    \"schema-engine/datamodel-renderer\",\n    \"schema-engine/json-rpc-api\",\n    \"schema-engine/mongodb-schema-describer\",\n    \"schema-engine/sql-migration-tests\",\n    \"schema-engine/sql-introspection-tests\",\n    \"schema-engine/schema-engine-wasm\",\n    \"schema-engine/sql-schema-describer\",\n    \"query-engine/connectors/*\",\n    \"query-engine/connector-test-kit-rs/qe-setup\",\n    \"query-engine/connector-test-kit-rs/query-engine-tests\",\n    \"query-engine/connector-test-kit-rs/query-test-macros\",\n    \"query-engine/connector-test-kit-rs/query-tests-setup\",\n    \"query-engine/core\",\n    \"query-engine/core-tests\",\n    \"query-engine/black-box-tests\",\n    \"query-engine/dmmf\",\n    \"query-engine/query-structure\",\n    \"query-engine/query-engine\",\n    \"query-engine/query-engine-node-api\",\n    \"query-engine/query-engine-wasm\",\n    \"query-engine/query-engine-c-abi\",\n    \"query-engine/request-handlers\",\n    \"query-engine/schema\",\n    \"query-engine/query-builders/*\",\n    \"query-compiler/query-compiler\",\n    \"query-compiler/query-compiler-playground\",\n    \"query-compiler/query-compiler-wasm\",\n    \"query-compiler/query-engine-tests-todo\",\n    \"libs/*\",\n    \"prisma-fmt\",\n    \"prisma-schema-wasm\",\n    \"psl/*\",\n    \"quaint\",\n]\n\n[workspace.lints.rust.unexpected_cfgs]\nlevel = \"warn\"\ncheck-cfg = ['cfg(wasm_bindgen_unstable_test_coverage)', 'cfg(debug_assert)']\n\n[workspace.dependencies]\nahash = \"0.8\"\nanyhow = \"1\"\nasync-trait = \"0.1\"\nbarrel = { git = \"https://github.com/prisma/barrel.git\", branch = \"mssql-support\" }\nbase64 = \"0.22\"\nbigdecimal = \"0.3\"\nbitflags = \"2\"\nbit-vec = \"0.6\"\nbson = \"2\"\nbytes = \"1\"\nbyteorder = { version = \"1\", default-features = false }\ncfg-if = \"1\"\nchrono = \"0.4\"\ncolored = \"3\"\nconcat-idents = \"1\"\nconnection-string = \"0.2\"\nconvert_case = \"0.6\"\ncrossbeam-channel = \"0.5\"\ncuid = { git = \"https://github.com/prisma/cuid-rust\", branch = \"v1.3.3-wasm32-unknown-unknown\" }\nderive_more = \"0.99\"\neither = \"1\"\nenumflags2 = \"0.7\"\nenv_logger = \"0.11\"\nfutures = \"0.3\"\ngetrandom = \"0.2\"\ngraphql-parser = { git = \"https://github.com/prisma/graphql-parser\" }\nheck = \"0.4\"\nhex = \"0.4\"\nhyper = \"0.14\"\nindoc = \"2\"\nindexmap = \"2\"\nitertools = \"0.13\"\njsonrpc-core = \"17\"\nlog = \"0.4\"\nlru = \"0.7\"\nlru-cache = \"0.1\"\nlsp-types = \"0.95\"\nmetrics = \"0.23.0\"\nmetrics-util = \"0.17.0\"\nmetrics-exporter-prometheus = { version = \"0.15.3\", default-features = false }\nmobc = \"0.8\"\nmongodb = { git = \"https://github.com/prisma/mongo-rust-driver.git\", branch = \"RUST-1994/happy-eyeballs\", features = [\"zstd-compression\", \"zlib-compression\", \"snappy-compression\"  ]}\nmysql_async = { git = \"https://github.com/prisma/mysql_async\", branch = \"vendored-openssl\" }\nnames = { version = \"0.11\", default-features = false }\nnanoid = \"0.4\"\nnapi = { version = \"2\", default-features = false, features = [\n    \"napi9\",\n    \"tokio_rt\",\n    \"serde-json\",\n] }\nnapi-derive = \"2\"\nnative-tls = \"0.2\"\nnom = \"7\"\nnum_cpus = \"1\"\nparking_lot = \"0.12\"\nparse-hyperlinks = \"0.23\"\npaste = \"1\"\npercent-encoding = \"2\"\npest = \"2\"\npest_derive = \"2\"\npetgraph = \"0.4\"\npin-project = \"1\"\npostgres-native-tls = { git = \"https://github.com/prisma/rust-postgres\", branch = \"pgbouncer-mode\" }\npostgres-types = { git = \"https://github.com/prisma/rust-postgres\", branch = \"pgbouncer-mode\" }\npretty = \"0.12\"\nrustc-hash = \"1\"\nrand = \"0.8\"\nregex = \"1\"\nreqwest = \"0.11\"\nrusqlite = \"0.32\"\nsha2 = \"0.10\"\nserde = { version = \"1\", features = [\"derive\"] }\nserde_json = { version = \"1\", features = [\n    \"float_roundtrip\",\n    \"preserve_order\",\n    \"raw_value\",\n] }\nserde_repr = \"0.1\"\nserde-wasm-bindgen = \"0.6\"\nstrip-ansi-escapes = \"0.1\"\nstructopt = \"0.3\"\nsqlformat = \"0.2\"\nsqlparser = \"0.32\"\nsqlx-core = \"0.8\"\nsqlx-sqlite = \"0.8\"\ntempfile = \"3\"\ntiberius = { version = \"0.12\", default-features = false }\ntokio = { version = \"1\", features = [\"sync\"] }\ntokio-postgres = { git = \"https://github.com/prisma/rust-postgres\", branch = \"pgbouncer-mode\" }\ntokio-tungstenite = \"0.26\"\ntokio-util = \"0.7\"\ntoml = \"0.5\"\ntracing = \"0.1\"\ntracing-core = \"0.1\"\ntracing-error = \"0.2\"\ntracing-subscriber = \"0.3\"\ntracing-futures = \"0.2\"\ntsify-next = { version = \"0.5\", default-features = false, features = [\"js\"] }\nthiserror = \"2\"\nurl = \"2\"\nulid = \"1\"\nuuid = { version = \"1\", features = [\"v4\", \"v7\", \"js\"] }\nversions = \"6\"\n\njs-sys = \"0.3\"\nwasm-bindgen = \"0.2\"\nwasm-bindgen-futures = \"0.4\"\nwasm-logger = \"0.2\"\n\n# build dependencies\ncbindgen = \"0.24\"\ncfg_aliases = \"0.2\"\ndarling = \"0.20\"\nnapi-build = \"1\"\nproc-macro2 = \"1\"\nquote = \"1\"\nsyn = \"2\"\n\n# dev dependencies\ncodspeed-criterion-compat = \"1\"\ndissimilar = \"1\"\nexpect-test = \"1\"\nflate2 = \"1\"\ninsta = \"1\"\npretty_assertions = \"1\"\nsimilar = \"2\"\ntracing-test = \"0.2\"\nwasm-bindgen-test = \"0.3\"\nwasm-rs-dbg = { version = \"0.1\", default-features = false, features = [\n    \"console-error\",\n] }\n\n# workspace dependencies\nquaint = { path = \"./quaint\", default-features = false }\nprisma-fmt.path = \"./prisma-fmt\"\n\nbuild-utils.path = \"./libs/build-utils\"\ncrosstarget-utils.path = \"./libs/crosstarget-utils\"\npanic-utils.path = \"./libs/panic-utils\"\nprisma-metrics.path = \"./libs/metrics\"\nprisma-value.path = \"./libs/prisma-value\"\ntelemetry.path = \"./libs/telemetry\"\nuser-facing-errors.path = \"./libs/user-facing-errors\"\nuser-facing-error-macros.path = \"./libs/user-facing-error-macros\"\nmongodb-client.path = \"./libs/mongodb-client\"\ntest-setup.path = \"./libs/test-setup\"\ntest-macros.path = \"./libs/test-macros\"\nquery-engine-common.path = \"./libs/query-engine-common\"\ndriver-adapters.path = \"./libs/driver-adapters\"\nsql-ddl.path = \"./libs/sql-ddl\"\n\npsl.path = \"./psl/psl\"\npsl-core.path = \"./psl/psl-core\"\ndiagnostics.path = \"./psl/diagnostics\"\nschema-ast.path = \"./psl/schema-ast\"\nparser-database.path = \"./psl/parser-database\"\n\nquery-engine.path = \"./query-engine/query-engine\"\nquery-core.path = \"./query-engine/core\"\nschema.path = \"./query-engine/schema\"\nquery-structure.path = \"./query-engine/query-structure\"\nquery-connector.path = \"./query-engine/connectors/query-connector\"\nquery-builder.path = \"./query-engine/query-builders/query-builder\"\nsql-query-builder.path = \"./query-engine/query-builders/sql-query-builder\"\ndmmf.path = \"./query-engine/dmmf\"\nrequest-handlers = { path = \"./query-engine/request-handlers\", default-features = false }\nsql-query-connector = { path = \"./query-engine/connectors/sql-query-connector\", default-features = false }\nmongodb-query-connector = { path = \"./query-engine/connectors/mongodb-query-connector\", default-features = false }\n\nschema-core.path = \"./schema-engine/core\"\ndatamodel-renderer.path = \"./schema-engine/datamodel-renderer\"\nschema-connector.path = \"./schema-engine/connectors/schema-connector\"\nsql-schema-connector.path = \"./schema-engine/connectors/sql-schema-connector\"\nmongodb-schema-connector.path = \"./schema-engine/connectors/mongodb-schema-connector\"\nsql-schema-describer.path = \"./schema-engine/sql-schema-describer\"\nmongodb-schema-describer.path = \"./schema-engine/mongodb-schema-describer\"\n\nquery-compiler = { path = \"./query-compiler/query-compiler\", default-features = false }\n\n[profile.dev.package.backtrace]\nopt-level = 3\n\n[profile.release.package.query-engine-node-api]\nstrip = \"symbols\"\n\n[profile.release.package.query-engine]\nstrip = \"symbols\"\n\n[profile.release.package.query-engine-c-abi]\nstrip = \"symbols\"\n\n[profile.release]\nlto = \"fat\"\ncodegen-units = 1\nopt-level = 's'   # Optimize for size.\n\n[profile.profiling]\ninherits = \"release\"\ndebug = true\n"
        },
        "database": "PostgreSQL",
        "build_system": "Cargo",
        "config_files": {
            "docker-compose.yml": "version: '3'\nservices:\n  cockroach_23_1:\n    image: prismagraphql/cockroachdb-custom:23.1@sha256:c5a97355d56a7692ed34d835dfd8e3663d642219ea90736658a24840ea26862d\n    restart: unless-stopped\n    command: |\n      start-single-node --insecure\n    ports:\n      - '26260:26257'\n    networks:\n      - databases\n\n  cockroach_22_2:\n    image: prismagraphql/cockroachdb-custom:22.2\n    restart: unless-stopped\n    command: start-single-node --insecure\n    ports:\n      - '26259:26257'\n    networks:\n      - databases\n\n  cockroach_22_1_0:\n    image: prismagraphql/cockroachdb-custom:22.1.0\n    restart: unless-stopped\n    command: start-single-node --insecure\n    ports:\n      - '26257:26257'\n    networks:\n      - databases\n\n  cockroach_21_2_0_patched:\n    image: prismagraphql/cockroachdb-custom:21.2.0-patched\n    restart: unless-stopped\n    command: start-single-node --insecure\n    ports:\n      - '26258:26257'\n    networks:\n      - databases\n\n  pgbouncer:\n    image: brainsam/pgbouncer:latest\n    restart: unless-stopped\n    environment:\n      DB_HOST: 'postgres11'\n      DB_PORT: '5432'\n      DB_USER: 'postgres'\n      DB_PASSWORD: 'prisma'\n      POOL_MODE: 'transaction'\n      MAX_CLIENT_CONN: '1000'\n    networks:\n      - databases\n    ports:\n      - '6432:6432'\n\n  postgres9:\n    image: postgres:9.6\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n    ports:\n      - '5431:5432'\n    networks:\n      - databases\n\n  postgres10:\n    image: postgres:10\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n    ports:\n      - '5432:5432'\n    networks:\n      - databases\n\n  postgres11:\n    image: postgres:11\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n    ports:\n      - '5433:5432'\n    networks:\n      - databases\n\n  postgres12:\n    image: postgres:12\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n    ports:\n      - '5434:5432'\n    networks:\n      - databases\n\n  postgres13:\n    image: postgres:13\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n    ports:\n      - '5435:5432'\n    networks:\n      - databases\n\n  neon-proxy:\n    image: ghcr.io/neondatabase/wsproxy:latest\n    restart: unless-stopped\n    environment:\n      # the port of the postgres13 within the databases network\n      APPEND_PORT: 'postgres13:5432'\n      ALLOW_ADDR_REGEX: '.*'\n      LOG_TRAFFIC: 'true'\n      LOG_CONN_INFO: 'true'\n    ports:\n      - '5488:80'\n    depends_on:\n      - postgres13\n    networks:\n      - databases\n\n  # Tests using a vitess backend were not running properly for query-engine tests, and In\n  # https://github.com/prisma/prisma-engines/pull/4423 work was done to have coverage of the correctness of planetscale\n  # driver adapters.\n  #\n  # Given these tests run against the planetscale proxy, and given a different test suite will exist for vitess with\n  # rust drivers, we opted for the path of least friction when running the driver adapter tests, which is putting a\n  # single mysql box behind the planetscale proxy instead of full vttest cluster.\n  #\n  # The tradeoffs are:\n  #\n  # - we don't exercise vitess but mysql. This is a close approximation, but there might be small differences in\n  # behavior. (ex. vttest can be returning different error messages than mysql)\n  #\n  # - however, we 1) do exercise the planetscale proxy, 2) we use relationMode=prisma and this resembles what actually\n  # happens within the query engine, where vitess does not exist as a provider, and as such there isn't any particular\n  # capability or conditional code making the engine behave differently then when using Mysql.\n  # In the end Vitess is just an abstraction existing in the test kit to a) use the mysql provider, b) run the suite\n  # with relationMode=prisma; c) being able to run or exclude specific tests for that configuration. But the existence\n  # of this testing connector is misleading, and it should probably be just a version of the MySQL testing connector\n  # instead.\n  planetscale-proxy:\n    build: ./docker/planetscale_proxy\n    environment:\n      MYSQL_HOST: 'mysql-planetscale'\n      MYSQL_PORT: 3306\n      MYSQL_DATABASE: prisma\n    ports:\n      - '8085:8085'\n    depends_on:\n      mysql-planetscale:\n        condition: service_healthy\n    restart: unless-stopped\n    healthcheck:\n      test: ['CMD', 'nc', '-z', '127.0.0.1', '8085']\n      interval: 5s\n      timeout: 2s\n      retries: 20\n    networks:\n      - databases\n\n  mysql-planetscale:\n    image: mysql:8.0.28\n    command: mysqld\n    restart: unless-stopped\n    platform: linux/x86_64\n    environment:\n      MYSQL_ALLOW_EMPTY_PASSWORD: yes\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3310:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/planetscale-mysql\n    volumes:\n      - './docker/planetscale-mysql/my.cnf:/etc/mysql/my.cnf'\n    ulimits:\n      nofile:\n        soft: 20000\n        hard: 40000\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']\n      timeout: 20s\n      retries: 10\n\n  postgres14:\n    image: postgres:14\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n      POSTGRES_HOST_AUTH_METHOD: 'md5'\n      POSTGRES_INITDB_ARGS: '--auth-host=md5'\n    ports:\n      - '5437:5432'\n    networks:\n      - databases\n\n  postgres15:\n    image: postgres:15\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n      POSTGRES_HOST_AUTH_METHOD: 'md5'\n      POSTGRES_INITDB_ARGS: '--auth-host=md5'\n    ports:\n      - '5438:5432'\n    networks:\n      - databases\n\n  postgres16:\n    image: postgres:16\n    restart: unless-stopped\n    command: postgres -c 'max_connections=1000'\n    environment:\n      POSTGRES_PASSWORD: 'prisma'\n      POSTGRES_HOST_AUTH_METHOD: 'md5'\n      POSTGRES_INITDB_ARGS: '--auth-host=md5'\n    ports:\n      - '5439:5432'\n    networks:\n      - databases\n\n  mysql-5-6:\n    image: mysql:5.6.50\n    command: mysqld --table_definition_cache=2000\n    restart: unless-stopped\n    platform: linux/x86_64\n    environment:\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: prisma\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3309:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/mysql\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']\n      timeout: 20s\n      retries: 10\n\n  mysql-5-7:\n    image: mysql:5.7.44\n    command: mysqld\n    restart: unless-stopped\n    platform: linux/x86_64\n    environment:\n      MYSQL_ROOT_PASSWORD: prisma\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3306:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/mysql\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']\n      timeout: 20s\n      retries: 10\n\n  mysql-8-0:\n    image: mysql:8.0.28\n    command: mysqld\n    restart: unless-stopped\n    platform: linux/x86_64\n    environment:\n      MYSQL_ROOT_PASSWORD: prisma\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3307:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/mysql8\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']\n      timeout: 20s\n      retries: 10\n\n  mariadb-10-0:\n    image: mariadb:10\n    restart: unless-stopped\n    environment:\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: prisma\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3308:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/mariadb\n\n  mariadb-11-0:\n    image: mariadb:11\n    restart: unless-stopped\n    environment:\n      MYSQL_USER: root\n      MYSQL_ROOT_PASSWORD: prisma\n      MYSQL_DATABASE: prisma\n    ports:\n      - '3308:3306'\n    networks:\n      - databases\n    tmpfs: /var/lib/mariadb\n\n  vitess-test-8_0:\n    image: vitess/vttestserver:mysql80@sha256:53a2d2f58ecf8e6cf984c725612f7651c4fc7ac9bc7d198dbd9964d50e28b9a2\n    restart: unless-stopped\n    ports:\n      - 33807:33807\n    environment:\n      PORT: 33804\n      KEYSPACES: 'test'\n      NUM_SHARDS: '1'\n      MYSQL_BIND_HOST: '0.0.0.0'\n      FOREIGN_KEY_MODE: 'disallow'\n      ENABLE_ONLINE_DDL: false\n      MYSQL_MAX_CONNECTIONS: 100000\n      TABLET_REFRESH_INTERVAL: '100ms'\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h127.0.0.1', '-P33807']\n      interval: 5s\n      timeout: 2s\n      retries: 20\n\n  vitess-shadow-8_0:\n    image: vitess/vttestserver:mysql80@sha256:53a2d2f58ecf8e6cf984c725612f7651c4fc7ac9bc7d198dbd9964d50e28b9a2\n    restart: unless-stopped\n    ports:\n      - 33808:33807\n    environment:\n      PORT: 33804\n      KEYSPACES: 'shadow'\n      NUM_SHARDS: '1'\n      MYSQL_BIND_HOST: '0.0.0.0'\n      FOREIGN_KEY_MODE: 'disallow'\n      ENABLE_ONLINE_DDL: false\n      MYSQL_MAX_CONNECTIONS: 100000\n      TABLET_REFRESH_INTERVAL: '500ms'\n    healthcheck:\n      test: ['CMD', 'mysqladmin', 'ping', '-h127.0.0.1', '-P33807']\n      interval: 5s\n      timeout: 2s\n      retries: 20\n\n  mssql-2017:\n    image: mcr.microsoft.com/mssql/server:2017-latest\n    restart: unless-stopped\n    environment:\n      ACCEPT_EULA: 'Y'\n      SA_PASSWORD: '<YourStrong@Passw0rd>'\n    ports:\n      - '1434:1433'\n    networks:\n      - databases\n\n  mssql-2019:\n    image: mcr.microsoft.com/mssql/server:2019-latest\n    restart: unless-stopped\n    environment:\n      ACCEPT_EULA: 'Y'\n      SA_PASSWORD: '<YourStrong@Passw0rd>'\n    ports:\n      - '1433:1433'\n    networks:\n      - databases\n\n  mssql-2022:\n    image: mcr.microsoft.com/mssql/server:2022-latest\n    restart: unless-stopped\n    environment:\n      ACCEPT_EULA: 'Y'\n      SA_PASSWORD: '<YourStrong@Passw0rd>'\n    ports:\n      - '1435:1433'\n    networks:\n      - databases\n\n  azure-edge:\n    image: mcr.microsoft.com/azure-sql-edge\n    restart: unless-stopped\n    environment:\n      ACCEPT_EULA: 'Y'\n      MSSQL_SA_PASSWORD: '<YourStrong@Passw0rd>'\n    ports:\n      - '1433:1433'\n    networks:\n      - databases\n\n  mongo42:\n    image: prismagraphql/mongo-single-replica:4.2.17-bionic\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      MONGO_PORT: 27016\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    networks:\n      - databases\n    ports:\n      - '27016:27016'\n\n  mongo44:\n    image: prismagraphql/mongo-single-replica:4.4.3-bionic\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    ports:\n      - '27017:27017'\n    networks:\n      - databases\n\n  mongo42-single:\n    image: mongo:4.2\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    ports:\n      - '27016:27017'\n    networks:\n      - databases\n\n  mongo44-single:\n    image: mongo:4.4\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    ports:\n      - '27017:27017'\n    networks:\n      - databases\n\n  mongo5:\n    image: prismagraphql/mongo-single-replica:5.0.3\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      MONGO_PORT: 27018\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    ports:\n      - '27018:27018'\n    networks:\n      - databases\n\n  mongo5-single:\n    image: mongo:5\n    restart: unless-stopped\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: 'prisma'\n      MONGO_INITDB_ROOT_PASSWORD: 'prisma'\n      INIT_WAIT_SEC: $INIT_WAIT_SEC\n    ports:\n      - '27018:27017'\n    networks:\n      - databases\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    ports:\n      - 8081:8081\n    environment:\n      ME_CONFIG_MONGODB_ADMINUSERNAME: 'prisma'\n      ME_CONFIG_MONGODB_ADMINPASSWORD: 'prisma'\n      ME_CONFIG_MONGODB_URL: mongodb://prisma:prisma@mongo4-single:27017/\n    networks:\n      - databases\n\n  otel:\n    image: jaegertracing/all-in-one:1.35\n    restart: unless-stopped\n    environment:\n      COLLECTOR_OTLP_ENABLED: 'true'\n      COLLECTOR_ZIPKIN_HOST_PORT: ':9411'\n    ports:\n      - 6831:6831/udp\n      - 6832:6832/udp\n      - 5778:5778\n      - 16686:16686\n      - 4317:4317\n      - 4318:4318\n      - 14250:14250\n      - 14268:14268\n      - 14269:14269\n      - 9411:9411\n\n  prometheus:\n    image: prom/prometheus\n    restart: unless-stopped\n    volumes:\n      - ${PWD}/metrics/prometheus:/prometheus-data\n    command: --config.file=/prometheus-data/prometheus.yml\n    ports:\n      - 9090:9090\n  grafana:\n    image: grafana/grafana\n    volumes:\n      - ${PWD}/metrics/grafana/datasources:/etc/grafana/provisioning/datasources/\n      - ${PWD}/metrics/grafana/dashboards:/etc/grafana/provisioning/dashboards/\n    ports:\n      - 3000:3000\n\nnetworks:\n  databases: null\n",
            "docker/planetscale_proxy/Dockerfile": "FROM ghcr.io/mattrobenolt/ps-http-sim:v0.0.11 AS planetscale-proxy\n\n# ps-http-sim provides a barebones image with nothing but the static binary\n# but we also rely on netcat being present. Alpine provides it as part of busybox.\nFROM alpine:latest\n\nCOPY --from=planetscale-proxy /ps-http-sim /ps-http-sim\n\nENTRYPOINT /ps-http-sim \\\n  -listen-addr=0.0.0.0 \\\n  -listen-port=8085 \\\n  -mysql-addr=$MYSQL_HOST \\\n  -mysql-port=$MYSQL_PORT \\\n  -mysql-idle-timeout=1s \\\n  -mysql-no-pass \\\n  -mysql-max-rows=1000 \\\n  -mysql-dbname=$MYSQL_DATABASE\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile"
        ],
        "folders": [
            "bin"
        ]
    }
}