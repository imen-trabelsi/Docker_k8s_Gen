{
    "source_code_info": {
        "language": "Python",
        "framework": "Django",
        "dependencies": {
            "pyproject.toml": "[build-system]\nrequires = [\"poetry_core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.isort]\nprofile = \"black\"\nknown_first_party = [\"config\", \"grandchallenge\", \"tests\"]\nline_length = 79\n\n[tool.black]\nline-length = 79\ntarget-version = ['py311']\n\n[tool.curlylint.rules]\nhtml_has_lang = 'en'\ndjango_forms_rendering = true\nimage_alt = true\n# TODO: Enable this, would otherwise be a big change\n# indent = 4\nmeta_viewport = true\nno_autofocus = true\ntabindex_no_positive = true\n\n[tool.poetry]\nname = \"grand-challenge.org\"\nversion = \"0.1.0\"\ndescription = \"A platform for end-to-end development of machine learning solutions in biomedical imaging\"\nlicense = \"Apache-2.0\"\nauthors = [\"James Meakin <code@jmsmkn.com>\"]\nreadme = \"README.md\"\nhomepage = \"https://grand-challenge.org/\"\nrepository = \"https://github.com/comic/grand-challenge.org/\"\ndocumentation = \"https://comic.github.io/grand-challenge.org/\"\npackages = [\n    { include = \"grandchallenge\", from = \"app\" },\n]\n\n[tool.poetry.dependencies]\npython = \">=3.11,<3.13\"\n# Disallow 5.3.0 due to https://github.com/celery/kombu/issues/1744\ncelery = {version = \"!=5.0.6,!=5.3.0\", extras = [\"redis\", \"sqs\"]}\nkombu = {version =\"!=5.3.0\"}\ndjango = \"<4.3\"\ndjango-countries = \"*\"\ndjango-crispy-forms = \"*\"\ncrispy-bootstrap4 = \"*\"\ndjangorestframework = \"*\"\ndrf-spectacular = \"*\"\npython-magic = \"*\"\ngunicorn = \"*\"\nuvicorn = {version = \"*\", extras = [\"standard\"]}\n\"django-select2\" = \"*\"\ndjango-celery-results = \"!=2.4.0\"\nbleach = {version = \"*\", extras = [\"css\"]}\njsonschema = \"*\"\ndjango-autocomplete-light = \"*\"\ndjango-storages = {version = \">=1.14.2\", extras = [\"s3\"]}\nboto3 = \">1.18.8\"\nwhitenoise = \"*\"\nbrotli = \"*\"\ndjangorestframework-guardian = \"*\"\ndjango-extensions = \"*\"\ndjango-simple-history = \"*\"\nsentry-sdk = \"*\"\ndjango-cors-headers = \"*\"\ndjango-celery-beat = \"!=1.6.0\"\ndjango-guardian = \"!=2.2.0\"\ndjango-markdownx = \"*\"\ndjango-filter = \"*\"\nua-parser = \"*\"\ndjangorestframework-csv = \"*\"\nhumanize = \"*\"\ndisposable-email-domains = \"*\"\ndjango-machina = \"*\"\ndjango-haystack = \"*\"\nciteproc-py = \"*\"\npyswot = \"*\"\ndjango-redis = \"*\"\ndjango-allauth = {version = \"*\", extras = [\"mfa\", \"socialaccount\"]}\nrequests = \"*\"\nPillow = \"*\"\npanimg = \">=0.12.0,!=0.15.1\"\ndjango-activity-stream = \"*\"\ndjango-stdimage = \"*\"\ndjango-permissions-policy = \"*\"\naws-xray-sdk = \"*\"\ndjango-deprecate-fields = \"*\"\ndjango-add-default-value = \"*\"\nPygments = \"*\"\ndjango-forms-dynamic = \"*\"\ndjango-compressor = \"*\"\ndjango-libsass = \"*\"\ndjango-csp = \"*\"\npsycopg = {version = \">3.1.8\", extras = [\"c\"]}\npycurl = \"<7.45.3\" # Import issue with 7.45.3 (https://github.com/comic/grand-challenge.org/issues/3252)\npyjwt = \"*\"\nbeautifulsoup4 = \"*\"\npymdown-extensions = \"*\"\ngrand-challenge-forge = \"*\"\nbiopython = \"*\"\n\n[tool.poetry.group.dev.dependencies]\npytest-django = \"*\"\npytest-cov = \"*\"\npytest-mock = \"*\"\nfactory-boy = \"*\"\ndjango-debug-toolbar = \"*\"\nsphinx-autobuild = \"*\"\nsphinx = \"*\"\npytest-xdist = \"*\"\nsphinx-autodoc-typehints = \"*\"\nwerkzeug = \"*\"\nsphinxcontrib-plantuml = \"*\"\npytest-randomly = \"*\"\nsphinxcontrib-django = \"*\"\namass = \"*\"\naiohttp = \"^3.8\" # Fix for amass dependency\nwatchfiles = \"*\"\nplaywright = \"*\"\npytest-playwright = \"*\"\npytest-rerunfailures = \"*\"\nsphinx-exec-code = \"*\"\n\n[tool.amass]\noutput = \"app/grandchallenge/core/static/vendored\"\n\n[tool.amass.dependencies]\nhtmx = { version = \"==1.7.0\", include = [\"htmx(.min)?.js(.map)?\"] }\n\"moment.js\" = { version = \"==2.24.0\", include = [\"moment(.min)?.js(.map)?\"] }\nvega = { version = \"==5.20.2\", include = [\"vega(.min)?.js(.map)?\"], maps = [\"vega.min.js.map\"] }\nvega-lite = { version = \"==5.1.0\", include = [\"vega-lite(.min)?.js(.map)?\"] }\nvega-embed = { version = \"==6.17.0\", include = [\"vega-embed(.min)?.js(.map)?\"] }\njsoneditor = { version = \"==10.1.1\", include = [\"jsoneditor(.min)?.js(.map)?\", \"jsoneditor(.min)?.css(.map)?\", \"img/*\"], maps = [\"jsoneditor.map\"] }\n\"sentry-browser\" = { version = \"==6.19.7\", include = [\"bundle(.min)?.js(.map)?\"], maps = [\"bundle.min.js.map\", \"bundle.js.map\"] }\n\"hammer.js\" = { version = \"==2.0.8\", include = [\"hammer(.min)?.js(.map)?\"] }\nuppy = { version = \"==2.2.0\", include = [\"uppy(.min)?.css(.map)?\", \"uppy(.min)?.js(.map)?\"], maps = [\"packages/uppy/dist/uppy.min.js.map\"] }\njscolor = { version = \"==2.5.1\", include = [\"jscolor(.min)?.js(.map)?\"] }\njquery = { version = \"==3.7.0\", include = [\"jquery(.min)?(.js|.map)?$\"] }\nfont-awesome = { version = \"==5.15.4\", include = [\"css/all(.min)?.css\", \"webfonts/*\"] }\nbootstrap = { version = \"==4.6.2\", include = [\"js/bootstrap.bundle(.min)?.js(.map)?\", \"css/bootstrap(.min)?.css(.map)?\", \"scss/*\"] }\nbootswatch = { version = \"==5.3.0\", provider = \"unpkg\", include = [\"dist/flatly/.*.scss\"] }\nfloating-scroll = { version = \"==3.2.0\", provider = \"unpkg\", include = [\"dist/jquery.floatingscroll.min.js\", \"dist/jquery.floatingscroll.css\"] }\n\"@github/markdown-toolbar-element\" = { version = \"==1.2.0\", provider = \"unpkg\", include = [\"dist/index.umd.js$\"] }\n# Use the builder at https://datatables.net/download/\n\"datatables.net\" = { version = \"==2.1.8\", provider = \"unpkg\", include = [\"js/dataTables(.min)?.js\"]}\n\"datatables.net-bs4\" = { version = \"==2.1.8\", provider = \"unpkg\", include = [\"css/dataTables.bootstrap4(.min)?.css\", \"js/dataTables.bootstrap4(.min)?.js\"]}\n\"datatables.net-buttons\" = { version = \"==3.2.0\", provider = \"unpkg\", include = [\"js/dataTables.buttons(.min)?.js\", \"js/buttons.colVis(.min)?.js\"]}\n\"datatables.net-buttons-bs4\" = { version = \"==3.2.0\", provider = \"unpkg\", include = [\"css/buttons.bootstrap4(.min)?.css\", \"js/buttons.bootstrap4(.min)?.js\"]}\n"
        },
        "database": "PostgreSQL",
        "build_system": "poetry",
        "config_files": {
            "docker-compose.yml": "x-postgres-env: &postgres-env\n    POSTGRES_PASSWORD: secretpassword\n    POSTGRES_USER: grandchallenge\n    POSTGRES_DB: grandchallenge\n\nx-minio-env: &minio-env\n    AWS_ACCESS_KEY_ID: minioadmin\n    AWS_SECRET_ACCESS_KEY: minioadmin\n    AWS_S3_ENDPOINT_URL: http://minio.localhost:9000\n\nservices:\n    postgres:\n        image: postgres:16\n        ports:\n            - \"127.0.0.1:5432:5432\"\n        environment:\n            <<: [*postgres-env]\n        tmpfs:\n            - /var/lib/postgresql/data/\n        healthcheck:\n            test: [\"CMD\", \"pg_isready\", \"-U\", \"grandchallenge\"]\n            interval: 10s\n            timeout: 5s\n            retries: 5\n        restart: always\n\n    minio.localhost:\n        image: minio/minio\n        ports:\n            - \"127.0.0.1:9000:9000\"\n        entrypoint: \"/bin/sh\"\n        command: >-\n            -c \"\n            mkdir -p /data/grand-challenge-private/ /data/grand-challenge-protected/ /data/grand-challenge-public/ /data/grand-challenge-uploads/ /data/grand-challenge-components-inputs/ /data/grand-challenge-components-outputs/\n            && minio --compat server /data\n            \"\n        restart: always\n        networks:\n            - default\n            - components\n\n    web:\n        image: public.ecr.aws/diag-nijmegen/grand-challenge/web-test:latest\n        environment:\n            <<: [*postgres-env, *minio-env]\n            COMPONENTS_REGISTRY_INSECURE: \"true\"\n            COMPONENTS_DEFAULT_BACKEND: \"tests.components_tests.resources.backends.InsecureDockerExecutor\"\n            COMPONENTS_DOCKER_KEEP_CAPS_UNSAFE: \"true\"\n            USING_MINIO: \"true\"\n            DEBUG: \"true\"\n            COMPRESS_OFFLINE: \"false\"\n            PYTHONDONTWRITEBYTECODE: 1\n        # Use werkzeug debugger in dev, this should never be used in production!\n        # https://django-extensions.readthedocs.io/en/latest/runserver_plus.html\n        command: >-\n            python manage.py runserver_plus 0.0.0.0:8000\n        restart: always\n        depends_on:\n            postgres:\n                condition: service_healthy\n            minio.localhost:\n                condition: service_started\n            redis:\n                condition: service_started\n            registry:\n                condition: service_started\n        volumes:\n            # Bind the app directory for live reloading in development\n            - type: bind\n              source: ./app\n              target: /app/\n\n    http:\n        image: public.ecr.aws/diag-nijmegen/grand-challenge/http:latest\n        environment:\n            APP_SERVER_HOST: \"web\"\n            SERVER_NAME: \"gc.localhost\"\n            SENDFILE_STATUS: \"off\"\n            WORKSTATION_PROXY_HOSTNAME: \"workstation-proxy\"\n            WORKSTATION_PROXY_HTTP_PORT: \"8000\"\n            WORKSTATION_PROXY_WEBSOCKET_PORT: \"8001\"\n            DATA_STORE_HOSTNAME: \"minio.localhost\"\n            DATA_STORE_PORT: \"9000\"\n        command: >-\n            bash -c \"envsubst '$$APP_SERVER_HOST $$SERVER_NAME $$SENDFILE_STATUS $$DATA_STORE_HOSTNAME $$DATA_STORE_PORT $$WORKSTATION_PROXY_HOSTNAME $$WORKSTATION_PROXY_HTTP_PORT $$WORKSTATION_PROXY_WEBSOCKET_PORT' < /tmp/nginx.conf.template > /etc/nginx/nginx.conf\n            && openssl req -x509 -newkey rsa:4096 -keyout /etc/ssl/private/privkey.pem -out /etc/ssl/certs/fullchain.pem -days 365 -nodes -subj '/CN=$$SERVER_NAME'\n            && nginx -g 'daemon off;'\"\n        restart: always\n        ports:\n            - \"127.0.0.1:80:80\"\n            - \"127.0.0.1:443:443\"\n        depends_on:\n            web:\n                condition: service_started\n            workstation-proxy:\n                condition: service_started\n\n    redis:\n        image: redis:5.0\n        ports:\n            - \"127.0.0.1:6379:6379\"\n        command: redis-server --appendonly yes\n        restart: always\n\n    celery_worker:\n        image: public.ecr.aws/diag-nijmegen/grand-challenge/web-test:latest\n        environment:\n            <<: [*postgres-env, *minio-env]\n            REMAP_SIGTERM: \"SIGQUIT\"\n            COMPONENTS_REGISTRY_INSECURE: \"true\"\n            COMPONENTS_DEFAULT_BACKEND: \"tests.components_tests.resources.backends.InsecureDockerExecutor\"\n            COMPONENTS_DOCKER_KEEP_CAPS_UNSAFE: \"true\"\n            USING_MINIO: \"true\"\n            DEBUG: \"true\"\n            PYTHONDONTWRITEBYTECODE: 1\n        restart: always\n        command: watchfiles --filter python \"celery --app config worker --loglevel info --concurrency 1 --pool prefork --queues workstations-eu-central-1,acks-late-2xlarge,acks-late-2xlarge-delay,acks-late-micro-short,acks-late-micro-short-delay\" /app\n        scale: 1\n        hostname: \"celery-worker-evaluation\"\n        depends_on:\n            web:\n                condition: service_started\n            postgres:\n                condition: service_healthy\n            redis:\n                condition: service_started\n            registry:\n                condition: service_started\n        volumes:\n            # Bind the app directory for live reloading in development\n            - type: bind\n              source: ./app\n              target: /app/\n            # The docker socket and pytest_cache is only needed for testing\n            - type: bind\n              source: /var/run/docker.sock\n              target: /var/run/docker.sock\n            - type: volume\n              source: pytest-cache\n              target: /tmp/.pytest_cache\n        group_add:\n            - ${DOCKER_GID:?err}\n        networks:\n            - default\n            - components\n\n    celery_beat:\n        image: public.ecr.aws/diag-nijmegen/grand-challenge/web-test:latest\n        environment:\n            <<: [*postgres-env]\n            DEBUG: \"true\"\n        restart: always\n        command: >-\n            bash -c \"\n            rm -f /tmp/celerybeat.pid\n            && celery --app config beat --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=\\\"/tmp/celerybeat.pid\\\"\n            \"\n        depends_on:\n            web:\n                condition: service_started\n            postgres:\n                condition: service_healthy\n            redis:\n                condition: service_started\n\n    workstation-proxy:\n        image: traefik:2.1\n        ports:\n            - \"127.0.0.1:8081:8081\"\n            - \"127.0.0.1:9101:9101\"\n        command:\n            - \"--entrypoints.traefik.address=:8081\"\n            - \"--entrypoints.metrics.address=:9101\"\n            - \"--entrypoints.workstation-http.address=:8000\"\n            - \"--entrypoints.workstation-websocket.address=:8001\"\n            - \"--api=true\"\n            - \"--api.insecure=true\"\n            - \"--ping=true\"\n            - \"--ping.entryPoint=traefik\"\n            - \"--accesslog=true\"\n            - \"--providers.docker=true\"\n            - \"--providers.docker.endpoint=unix:///var/run/docker.sock\"\n            - \"--providers.docker.exposedByDefault=false\"\n            - \"--providers.docker.network=workstations\"\n        volumes:\n            # So that Traefik can listen to the Docker events\n            - type: bind\n              source: /var/run/docker.sock\n              target: /var/run/docker.sock\n        networks:\n            - default\n            - workstations\n\n    registry:\n        image: registry:2\n        ports:\n            - \"127.0.0.1:5000:5000\"\n        environment:\n            REGISTRY_STORAGE_DELETE_ENABLED: \"true\"\n\n    flower:\n        image: mher/flower\n        environment:\n            CELERY_BROKER_URL: \"redis://redis:6379/1\"\n        ports:\n            - \"127.0.0.1:5555:5555\"\n        depends_on:\n            redis:\n                condition: service_started\n        restart: always\n\nnetworks:\n    default:\n    workstations:\n        name: \"grand-challengeorg_workstations\"\n    components:\n        name: \"grand-challengeorg_components\"\n        internal: true\n\nvolumes:\n    pytest-cache:\n",
            "dockerfiles/web-base/Dockerfile": "###################\n#  Base Container #\n###################\nARG PYTHON_VERSION\n\nFROM python:${PYTHON_VERSION}-slim-bookworm AS base\n\n# Install system dependencies\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        libpng-dev \\\n        libjpeg-dev \\\n        libjpeg62-turbo-dev \\\n        libfreetype6-dev \\\n        libxft-dev \\\n        libffi-dev \\\n        wget \\\n        gettext \\\n        # postgres packages for psycopg2\n        libpq-dev \\\n        # curl and ssl for pycurl\n        libcurl4-openssl-dev \\\n        libssl-dev \\\n        # for python-magic\n        libmagic1 \\\n        # openslide and vips for image imports with panimg\n        # gcc is required to compile the extensions\n        libopenslide-dev \\\n        libvips-dev \\\n        gcc \\\n        # ruby3.1, rugged and nokogiri for licensee\n        ruby3.1 \\\n        ruby-rugged \\\n        ruby-nokogiri \\\n        # git for CodeBuild integration\n        git \\\n        # for dbshell \\\n        postgresql-client \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Fetch and install licensee for checking licenses\n# Separate install required as the bundled version does not include the --json flag\nRUN gem install licensee -v 9.16.1\n\n# Fetch and install crane for pushing containers\nRUN mkdir -p /opt/crane \\\n    && wget https://github.com/google/go-containerregistry/releases/download/v0.19.0/go-containerregistry_Linux_x86_64.tar.gz -O /opt/crane/src.tar.gz \\\n    && echo \"daa629648e1d1d10fc8bde5e6ce4176cbc0cd48a32211b28c3fd806e0fa5f29b  /opt/crane/src.tar.gz\" | shasum -c - || exit 1 \\\n    && tar -C /opt/crane/ -xzvf /opt/crane/src.tar.gz crane \\\n    && chmod a+x /opt/crane/crane \\\n    && mv /opt/crane/crane /usr/local/bin/ \\\n    && rm -r /opt/crane\n\n# Fetch and install git lfs for github integration\nRUN mkdir -p /opt/git-lfs \\\n    && wget https://github.com/git-lfs/git-lfs/releases/download/v3.4.1/git-lfs-linux-amd64-v3.4.1.tar.gz -O /opt/git-lfs/src.tar.gz \\\n    && echo \"1772dc260961db27958088740b7e9ecebf945abad8c2d504d412448f53faf147  /opt/git-lfs/src.tar.gz\" | shasum --algorithm 256 -c - || exit 1 \\\n    && tar -C /opt/git-lfs/ -xzvf /opt/git-lfs/src.tar.gz \\\n    && bash /opt/git-lfs/git-lfs-3.4.1/install.sh \\\n    && rm -r /opt/git-lfs\n\n# Get the minio client for development\nRUN mkdir -p /opt/mc \\\n    && wget https://dl.min.io/client/mc/release/linux-amd64/archive/mc.RELEASE.2024-01-28T16-23-14Z -O /opt/mc/mc \\\n    && echo \"fc195c3ad5c19b91d96bbb42d79af94173aa491ebcda9ca372c4f382546135ec  /opt/mc/mc\" | shasum -c - || exit 1 \\\n    && chmod a+x /opt/mc/mc \\\n    && mv /opt/mc/mc /usr/local/bin/ \\\n    && rm -r /opt/mc\n\n# Get the docker cli\nRUN mkdir -p /opt/docker \\\n    && wget https://download.docker.com/linux/static/stable/x86_64/docker-27.1.1.tgz -O /opt/docker/docker.tgz \\\n    && echo \"118da6b8fc8e8b6c086ab0dd5e64ee549376c3a3f963723bbc9a46db475bf21f  /opt/docker/docker.tgz\" | shasum -c - || exit 1 \\\n    && tar -C /opt/docker/ -xzvf /opt/docker/docker.tgz \\\n    && chmod a+x /opt/docker/docker/docker \\\n    && mv /opt/docker/docker/docker /usr/local/bin/ \\\n    && rm -r /opt/docker\n\nENV PYTHONUNBUFFERED=1\\\n    AWS_XRAY_SDK_ENABLED=false\\\n    COMPONENTS_SAGEMAKER_SHIM_VERSION=0.3.5\\\n    PATH=\"/opt/poetry/.venv/bin:/home/django/.local/bin:${PATH}\"\n\nRUN mkdir -p /opt/poetry /app /static /opt/sagemaker-shim /opt/virtualenvs \\\n    && groupadd -r django && useradd -m -r -g django django \\\n    && chown django:django /opt/poetry /app /static /opt/sagemaker-shim /opt/virtualenvs\n\nUSER django:django\n\n# Fetch and install sagemaker shim for shimming containers\nRUN mkdir -p /opt/sagemaker-shim \\\n    && wget \"https://github.com/DIAGNijmegen/rse-sagemaker-shim/releases/download/v${COMPONENTS_SAGEMAKER_SHIM_VERSION}/sagemaker-shim-${COMPONENTS_SAGEMAKER_SHIM_VERSION}-Linux-x86_64.tar.gz\" -P /opt/sagemaker-shim/ \\\n    && echo \"a0f64b99ffea8faed65a23bf0f52ff1f2a20900ca8bc6a3d13a2ff7eff1d7eb7  /opt/sagemaker-shim/sagemaker-shim-${COMPONENTS_SAGEMAKER_SHIM_VERSION}-Linux-x86_64.tar.gz\" | shasum -c - || exit 1 \\\n    && tar -C /opt/sagemaker-shim/ -xzvf \"/opt/sagemaker-shim/sagemaker-shim-${COMPONENTS_SAGEMAKER_SHIM_VERSION}-Linux-x86_64.tar.gz\" \\\n    && rm \"/opt/sagemaker-shim/sagemaker-shim-${COMPONENTS_SAGEMAKER_SHIM_VERSION}-Linux-x86_64.tar.gz\"\n\n# Create virtual environments\nRUN mkdir -p /opt/virtualenvs \\\n    && python -m venv /opt/virtualenvs/biom \\\n    && /opt/virtualenvs/biom/bin/python -m pip --no-cache-dir --no-color install biom-format\n\nWORKDIR /opt/poetry\n\n# Install base python packages\nCOPY --chown=django:django pyproject.toml /opt/poetry\nCOPY --chown=django:django poetry.lock /opt/poetry\n\nRUN python -m pip install -U pip \\\n    && python -m pip install -U poetry \\\n    && poetry config virtualenvs.in-project true \\\n    && poetry install --no-interaction --no-ansi --no-root --only main\n\n##################\n# TEST CONTAINER #\n##################\nFROM base AS test-base\n\nUSER root\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        # Add java and graphviz for plantuml documentation\n        default-jre \\\n        graphviz \\\n        # make for sphinx docs\n        make \\\n        # playwright dependencies\n        libatk1.0-0 \\\n        libatk-bridge2.0-0 \\\n        libatspi2.0-0 \\\n        libxcomposite1 \\\n        libxrandr2 \\\n        libgbm1 \\\n        libxkbcommon0 \\\n    && rm -rf /var/lib/apt/lists/*\nUSER django:django\n\nRUN poetry install --no-interaction --no-ansi --no-root\nRUN playwright install\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "dhparams.pem",
            "mime.types",
            "nginx.conf.template"
        ],
        "folders": []
    }
}