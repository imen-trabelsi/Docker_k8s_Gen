{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n      <groupId>io.confluent</groupId>\n      <artifactId>rest-utils-parent</artifactId>\n      <version>7.9.0</version>\n  </parent>\n\n  <artifactId>micro-services-examples</artifactId>\n  <packaging>jar</packaging>\n  <version>7.9.0</version>\n\n  <organization>\n      <name>Confluent, Inc.</name>\n      <url>http://confluent.io</url>\n  </organization>\n  <url>http://confluent.io</url>\n  <description>\n     Example of building microservices with Kafka Streams\n  </description>\n\n  <properties>\n    <!-- Keep versions as properties to allow easy modification -->\n    <java.version>8</java.version>\n    <gson.version>2.2.4</gson.version>\n    <kafka.version>7.9.0-ccs</kafka.version>\n    <avro.version>1.10.1</avro.version>\n    <!-- Maven properties for compilation -->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n     <schemaRegistryUrl>mock://localhost:8081</schemaRegistryUrl>\n    <schemaRegistryBasicAuthUserInfo></schemaRegistryBasicAuthUserInfo>\n    <io.confluent.schema-registry.version>${confluent.version.range}</io.confluent.schema-registry.version>\n    <io.confluent.blueway.version>${confluent.version.range}</io.confluent.blueway.version>\n  </properties>\n\n  <repositories>\n    <repository>\n      <id>confluent</id>\n      <name>Confluent</name>\n      <url>https://packages.confluent.io/maven/</url>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>confluent</id>\n      <url>https://packages.confluent.io/maven/</url>\n    </pluginRepository>\n  </pluginRepositories>\n\n  <dependencies>  \n    <!-- Add the Kafka dependencies -->\n    <dependency>\n      <groupId>org.apache.kafka</groupId>\n      <artifactId>kafka-clients</artifactId>\n      <version>${kafka.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.kafka</groupId>\n      <artifactId>kafka-streams</artifactId>\n      <version>${kafka.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-simple</artifactId>\n      <version>2.0.7</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-cli</groupId>\n      <artifactId>commons-cli</artifactId>\n      <version>1.4</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-streams-avro-serde</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-avro-serializer</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-schema-registry-client</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.avro</groupId>\n      <artifactId>avro</artifactId>\n      <version>${avro.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.avro</groupId>\n      <artifactId>avro-maven-plugin</artifactId>\n      <version>${avro.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>monitoring-interceptors</artifactId>\n      <version>${io.confluent.blueway.version}</version>\n    </dependency>\n   <dependency>\n            <groupId>javax.ws.rs</groupId>\n            <artifactId>javax.ws.rs-api</artifactId>\n            <version>2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-server</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-servlet</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.containers</groupId>\n            <artifactId>jersey-container-servlet</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.inject</groupId>\n            <artifactId>jersey-hk2</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.media</groupId>\n            <artifactId>jersey-media-json-jackson</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-annotations</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency> \n\n      <!-- Test dependencies -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.jupiter.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>3.3.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>2.7.14</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_${kafka.scala.version}</artifactId>\n            <version>${kafka.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_${kafka.scala.version}</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-streams-test-utils</artifactId>\n            <version>${kafka.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n       <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-streams</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-test</artifactId>\n            <version>2.9.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.confluent</groupId>\n            <artifactId>kafka-schema-registry</artifactId>\n            <version>${io.confluent.schema-registry.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.confluent</groupId>\n            <artifactId>kafka-schema-registry</artifactId>\n            <version>${io.confluent.schema-registry.version}</version>\n            <!-- Required for e.g. schema registry's RestApp -->\n            <classifier>tests</classifier>\n            <scope>test</scope>\n        </dependency>        \n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.1</version>\n        <configuration>\n          <source>${java.version}</source>\n          <target>${java.version}</target>\n          <compilerArgs>\n            <arg>-Xlint:all</arg>\n          </compilerArgs>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.avro</groupId>\n        <artifactId>avro-maven-plugin</artifactId>\n        <version>${avro.version}</version>\n        <executions>\n          <execution>\n            <phase>generate-sources</phase>\n              <goals>\n                <goal>schema</goal>\n              </goals>\n            <configuration>\n              <sourceDirectory>src/main/resources/avro/io/confluent/examples/streams</sourceDirectory>\n              <outputDirectory>${project.build.directory}/generated-sources</outputDirectory>\n              <stringType>String</stringType>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <executions>\n                    <!--\n                     This declaration merges with the one in the parent, rather\n                     than overriding it, so we need to disable the \"validate\" phase\n                     execution that the parent declares and declare our own\n                     during \"test-compile\".\n\n                     One reason for this is that avro codegen runs during compile,\n                     and while it's not strictly a precondition, it's\n                     confusing to address style violations while the IDE is telling you\n                     that some generated class doesn't exist. Test-compile is the first phase\n                     that's guaranteed to run after compile and before any unit or integration\n                     tests.\n\n                     Also, we want to disable the parent's configuration because it declares stuff\n                     we don't care about, like suppressions. (Honestly, it shouldn't)\n                     -->\n          <execution>\n            <id>validate</id>\n            <phase>none</phase>\n            <configuration>\n              <skip>true</skip>\n            </configuration>\n          </execution>\n          <execution>\n            <id>test-compile</id>\n           <phase>none</phase>\n            <configuration>\n              <skip>true</skip>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "microservices-orders/.env": "#####################################################\n# The following values are provided by Confluent's\n# release automation process.  The values in these\n# names will be adopted in scripts and expressions\n# over time to construct other\n# values required by this repository\n#####################################################\nCONFLUENT=7.9.0\nCONFLUENT_DOCKER_TAG=7.9.0\nCONFLUENT_SHORT=7.9\nCONFLUENT_PREVIOUS=\"\"\nCONFLUENT_RELEASE_TAG_OR_BRANCH=7.9.0-post\nCONFLUENT_MAJOR=7\nCONFLUENT_MINOR=9\nCONFLUENT_PATCH=0\n#####################################################\n\nCP_VERSION_FULL=\"$CONFLUENT_MAJOR.$CONFLUENT_MINOR.$CONFLUENT_PATCH\"\n\n# REPOSITORY - repository for Docker image\n# The '/' which separates the REPOSITORY from the image name is not required here\nREPOSITORY=confluentinc\n\n#####################################################\n# We use below values in both Docker and Makefile(s)\n# and neither of them do well with variables that\n# derive value from other variables with interpolation.\n# This is why we don't reuse previous values below\n# as it doesn't work in the docker-compose ${var}\n# syntax and also doesn't work when this is included\n# in a Makefile\n#####################################################\n\n############### kafka-connect-datagen ###############\n# We can't use the CP docker tag above for the aggregate datagen version because\n#   kafka-connect-datagen is not, currently, part of the CP build process.  \n#   kafka-connect-datagen releases are manual so we have to manage this manually \n#   and there will be a delay between CP releases and kafka-connect-datagen releases.\n#   Published kafka-connect-datagen images can be found here:\n#     https://hub.docker.com/r/cnfldemos/kafka-connect-datagen/tags\nKAFKA_CONNECT_DATAGEN_VERSION=0.5.0\nKAFKA_CONNECT_DATAGEN_DOCKER_TAG=0.5.0-6.2.0\n#####################################################\n\n#################### Operator #######################\n# CP Operator has a different release cadence than\n# CP so we need to maintain a different version \n# number for demos that use CP Operator.\n# This will need to be managed manually until some\n# tooling automation can be put in place to deal\n# with the different release cadence or the releases\n# are syncronized.\nOPERATOR_BUNDLE_VERSION=1.6.1\nOPERATOR_BUNDLE_CP_VERSION=6.0.0\nOPERATOR_CP_IMAGE_TAG=6.0.1.0\nOPERATOR_KAFKA_CONNECT_DATAGEN_IMAGE_TAG=0.4.0-6.0.0.0\n#####################################################\n\n############### kafka-connect-jdbc ##################\n# We can't use the CP docker tag above for the aggregate JDBC connect version because\n#   kafka-connect-jdbc is not, currently, part of the CP build process.  \n#   kafka-connect-jdbc releases are manual so we have to manage this manually \n#   and there will be a delay between CP releases and kafka-connect-jdbc releases.\n#   Published kafka-connect-jdbc images can be found here:\n#     https://www.confluent.io/hub/confluentinc/kafka-connect-jdbc\nKAFKA_CONNECT_JDBC_VERSION=10.1.1\n#####################################################\n\n########### kafka-connect-elasticsearch #############\n# We can't use the CP docker tag above for the aggregate elasticsearch connect\n#   version because kafka-connect-elasticsearch is not, currently, part of the\n#   CP build process. kafka-connect-elasticsearch releases are manual so we \n#   have to manage this manually and there will be a delay between CP releases \n#   and kafka-connect-elasticsearch releases. Published kafka-connect-elasticsearch \n#   images can be found here:\n#   https://www.confluent.io/hub/confluentinc/kafka-connect-elasticsearch\nKAFKA_CONNECT_ES_VERSION=10.0.2\n#####################################################\n",
            "microservices-orders/docker-compose.yml": "# docker-compose supports environment variable substitution with the ${VARIABLE-NAME} syntax.\n# Environment variables can be sourced in a variety of ways.  One of those ways is through\n# a well known '.env' file located in the same folder as the docker-compose.yml file.  See the Docker\n# documentation for details: https://docs.docker.com/compose/environment-variables/#the-env-file\n# \n# This feature is being used to parameterize some values within this file.  In this directory is also\n# a .env file, which is actually a symbolic link to <examples-root>/utils/config.env.  That file\n# contains values which get substituted here when docker-compose parses this file.\n#\n# If you'd like to view the docker-compose.yml file rendered with its environment variable substituions\n# you can execute the `docker-compose config` command.  Take note that some demos provide additional \n# environment variable values by exporting them in a script prior to running `docker-compose up`.\n---\nversion: '3.0'\nvolumes:\n  database:\nservices:\n\n  microservices:\n    image: ${REPOSITORY}/kafka-streams-examples:${CONFLUENT_DOCKER_TAG}\n    container_name: microservices\n    ports:\n      - \"18894:18894\"\n    depends_on:\n      - connect\n    volumes:\n      - $PWD/scripts:/opt/docker/scripts\n      - $PWD/logs:/opt/docker/logs\n      - $PWD/.env:/opt/docker/config/config.env\n      - $PWD/stack-configs:/opt/docker/stack-configs\n      - $PWD/delta_configs:/opt/docker/delta_configs\n    environment:\n      LOG_DIR: /opt/docker/logs\n      # With Docker, we don't need to worry about cleaning up the subprocesses of the container\n      PIDS_FILE: /dev/null\n      CONFLUENT: ${CONFLUENT}\n      CONFIG_FILE: \"/opt/docker/${CONFIG_FILE}\"\n    command:\n      - bash\n      - -c\n      - |\n        set -a\n        source /opt/docker/delta_configs/env.delta\n        /opt/docker/scripts/run-services.sh\n\n  connect:\n    image: ${REPOSITORY}/cp-server-connect:${CONFLUENT_DOCKER_TAG}\n    container_name: connect\n    depends_on:\n      - sqlite\n    ports:\n      - \"8083:8083\"\n    environment:\n      CONNECT_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS\n      CONNECT_REST_ADVERTISED_HOST_NAME: connect\n      CONNECT_GROUP_ID: \"examples-microservices-orders\"\n      CONNECT_REST_ADVERTISED_HOST_NAME: connect\n\n      CONNECT_SECURITY_PROTOCOL: SASL_SSL\n      CONNECT_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG\n      CONNECT_SASL_MECHANISM: PLAIN\n\n      CONNECT_CONFIG_STORAGE_TOPIC: connect-demo-configs\n      CONNECT_OFFSET_STORAGE_TOPIC: connect-demo-offsets\n      CONNECT_STATUS_STORAGE_TOPIC: connect-demo-statuses\n\n      CONNECT_REPLICATION_FACTOR: 3\n      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3\n      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3\n      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3\n\n      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter\n      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL\n      CONNECT_KEY_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE\n      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO\n      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter\n      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL\n      CONNECT_VALUE_CONVERTER_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE\n      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO\n      \n      # CLASSPATH required due to CC-2422\n      CLASSPATH: \"/usr/share/java/monitoring-interceptors/monitoring-interceptors-${CONFLUENT}.jar\"\n      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/,/connectors/'\n\n      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_SSL\n      CONNECT_PRODUCER_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG\n      CONNECT_PRODUCER_SASL_MECHANISM: PLAIN\n      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor\"\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG\n      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN\n\n      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_SSL\n      CONNECT_CONSUMER_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG\n      CONNECT_CONSUMER_SASL_MECHANISM: PLAIN\n      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: \"io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor\"\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_SSL\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG\n      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN\n    volumes:\n      - database:/opt/docker/db/data\n      - $PWD/stack-configs:/opt/docker/stack-configs\n    command:\n      - bash\n      - -c\n      - |\n        echo \"Installing connector plugins\"\n        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:$KAFKA_CONNECT_JDBC_VERSION\n        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:$KAFKA_CONNECT_ES_VERSION\n        echo \"Launching Kafka Connect worker\"\n        /etc/confluent/docker/run\n\n  sqlite:\n    image: sqlite:latest\n    container_name: sqlite\n    volumes:\n      - database:/db/data\n    build:\n      context: ./db \n    stdin_open: true\n    tty: true\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.16\n    container_name: elasticsearch\n    depends_on:\n      - connect\n    ports:\n      - \"9200:9200\"\n    environment:\n      xpack.security.enabled: \"false\"\n      XPACK_SECURITY_ENABLED: \"false\"\n      xpack.monitoring.enabled: \"false\"\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:5.5.2\n    container_name: kibana\n    depends_on:\n      - elasticsearch\n    ports:\n      - \"5601:5601\"\n    environment:\n      xpack.security.enabled: \"false\"\n      XPACK_SECURITY_ENABLED: \"false\"\n      xpack.monitoring.enabled: \"false\"\n      discovery.type: \"single-node\"\n      elasticsearch.url: http://elasticsearch:9200\n      server.host: \"0.0.0.0\"\n      SERVER_HOST: \"0.0.0.0\"\n      server.name: \"kibana\"\n      SERVER_NAME: \"kibana\"\n      XPACK_GRAPH_ENABLED: \"false\"\n      XPACK_MONITORING_ENABLED: \"false\"\n      XPACK_REPORTING_ENABLED: \"false\"\n      XPACK_SECURITY_ENABLED: \"false\"\n    command: \n      - bash\n      - -c\n      - |\n        /usr/share/kibana/bin/kibana-plugin remove x-pack\n        /usr/local/bin/kibana-docker\n\n",
            "microservices-orders/db/Dockerfile": "FROM alpine:3.4\nWORKDIR /db\nADD customers.sql /db\nADD customers.table /db\nRUN apk add --update sqlite\nRUN mkdir /db/data\nRUN sqlite3 /db/data/microservices.db < /db/customers.sql\n\nENTRYPOINT [\"sqlite3\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "README.md",
            "ccloud_lib.py",
            "consumer.py",
            "consumer_ccsr.py",
            "producer.py",
            "producer_ccsr.py",
            "requirements.txt"
        ],
        "folders": []
    }
}