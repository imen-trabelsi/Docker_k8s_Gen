{
    "source_code_info": {
        "language": "Java",
        "framework": "Java",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \nhttp://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n      <groupId>io.confluent</groupId>\n      <artifactId>rest-utils-parent</artifactId>\n      <version>7.9.0</version>\n  </parent>\n\n  <artifactId>micro-services-examples</artifactId>\n  <packaging>jar</packaging>\n  <version>7.9.0</version>\n\n  <organization>\n      <name>Confluent, Inc.</name>\n      <url>http://confluent.io</url>\n  </organization>\n  <url>http://confluent.io</url>\n  <description>\n     Example of building microservices with Kafka Streams\n  </description>\n\n  <properties>\n    <!-- Keep versions as properties to allow easy modification -->\n    <java.version>8</java.version>\n    <gson.version>2.2.4</gson.version>\n    <kafka.version>7.9.0-ccs</kafka.version>\n    <avro.version>1.10.1</avro.version>\n    <!-- Maven properties for compilation -->\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n     <schemaRegistryUrl>mock://localhost:8081</schemaRegistryUrl>\n    <schemaRegistryBasicAuthUserInfo></schemaRegistryBasicAuthUserInfo>\n    <io.confluent.schema-registry.version>${confluent.version.range}</io.confluent.schema-registry.version>\n    <io.confluent.blueway.version>${confluent.version.range}</io.confluent.blueway.version>\n  </properties>\n\n  <repositories>\n    <repository>\n      <id>confluent</id>\n      <name>Confluent</name>\n      <url>https://packages.confluent.io/maven/</url>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>confluent</id>\n      <url>https://packages.confluent.io/maven/</url>\n    </pluginRepository>\n  </pluginRepositories>\n\n  <dependencies>  \n    <!-- Add the Kafka dependencies -->\n    <dependency>\n      <groupId>org.apache.kafka</groupId>\n      <artifactId>kafka-clients</artifactId>\n      <version>${kafka.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.kafka</groupId>\n      <artifactId>kafka-streams</artifactId>\n      <version>${kafka.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.slf4j</groupId>\n      <artifactId>slf4j-simple</artifactId>\n      <version>2.0.7</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-cli</groupId>\n      <artifactId>commons-cli</artifactId>\n      <version>1.4</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-streams-avro-serde</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-avro-serializer</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>kafka-schema-registry-client</artifactId>\n      <version>${io.confluent.schema-registry.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.avro</groupId>\n      <artifactId>avro</artifactId>\n      <version>${avro.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.avro</groupId>\n      <artifactId>avro-maven-plugin</artifactId>\n      <version>${avro.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>io.confluent</groupId>\n      <artifactId>monitoring-interceptors</artifactId>\n      <version>${io.confluent.blueway.version}</version>\n    </dependency>\n   <dependency>\n            <groupId>javax.ws.rs</groupId>\n            <artifactId>javax.ws.rs-api</artifactId>\n            <version>2.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-server</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.eclipse.jetty</groupId>\n            <artifactId>jetty-servlet</artifactId>\n            <version>${jetty.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.containers</groupId>\n            <artifactId>jersey-container-servlet</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.inject</groupId>\n            <artifactId>jersey-hk2</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.media</groupId>\n            <artifactId>jersey-media-json-jackson</artifactId>\n            <version>${jersey.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-annotations</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency> \n\n      <!-- Test dependencies -->\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>${junit.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-api</artifactId>\n            <version>${junit.jupiter.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.assertj</groupId>\n            <artifactId>assertj-core</artifactId>\n            <version>3.3.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-core</artifactId>\n            <version>2.7.14</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_${kafka.scala.version}</artifactId>\n            <version>${kafka.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_${kafka.scala.version}</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-streams-test-utils</artifactId>\n            <version>${kafka.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n       <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-streams</artifactId>\n            <version>${kafka.version}</version>\n            <classifier>test</classifier>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.curator</groupId>\n            <artifactId>curator-test</artifactId>\n            <version>2.9.0</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.confluent</groupId>\n            <artifactId>kafka-schema-registry</artifactId>\n            <version>${io.confluent.schema-registry.version}</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>io.confluent</groupId>\n            <artifactId>kafka-schema-registry</artifactId>\n            <version>${io.confluent.schema-registry.version}</version>\n            <!-- Required for e.g. schema registry's RestApp -->\n            <classifier>tests</classifier>\n            <scope>test</scope>\n        </dependency>        \n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <version>3.8.1</version>\n        <configuration>\n          <source>${java.version}</source>\n          <target>${java.version}</target>\n          <compilerArgs>\n            <arg>-Xlint:all</arg>\n          </compilerArgs>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.avro</groupId>\n        <artifactId>avro-maven-plugin</artifactId>\n        <version>${avro.version}</version>\n        <executions>\n          <execution>\n            <phase>generate-sources</phase>\n              <goals>\n                <goal>schema</goal>\n              </goals>\n            <configuration>\n              <sourceDirectory>src/main/resources/avro/io/confluent/examples/streams</sourceDirectory>\n              <outputDirectory>${project.build.directory}/generated-sources</outputDirectory>\n              <stringType>String</stringType>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <executions>\n                    <!--\n                     This declaration merges with the one in the parent, rather\n                     than overriding it, so we need to disable the \"validate\" phase\n                     execution that the parent declares and declare our own\n                     during \"test-compile\".\n\n                     One reason for this is that avro codegen runs during compile,\n                     and while it's not strictly a precondition, it's\n                     confusing to address style violations while the IDE is telling you\n                     that some generated class doesn't exist. Test-compile is the first phase\n                     that's guaranteed to run after compile and before any unit or integration\n                     tests.\n\n                     Also, we want to disable the parent's configuration because it declares stuff\n                     we don't care about, like suppressions. (Honestly, it shouldn't)\n                     -->\n          <execution>\n            <id>validate</id>\n            <phase>none</phase>\n            <configuration>\n              <skip>true</skip>\n            </configuration>\n          </execution>\n          <execution>\n            <id>test-compile</id>\n           <phase>none</phase>\n            <configuration>\n              <skip>true</skip>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "multiregion/.env": "#####################################################\n# The following values are provided by Confluent's\n# release automation process.  The values in these\n# names will be adopted in scripts and expressions\n# over time to construct other\n# values required by this repository\n#####################################################\nCONFLUENT=7.9.0\nCONFLUENT_DOCKER_TAG=7.9.0\nCONFLUENT_SHORT=7.9\nCONFLUENT_PREVIOUS=\"\"\nCONFLUENT_RELEASE_TAG_OR_BRANCH=7.9.0-post\nCONFLUENT_MAJOR=7\nCONFLUENT_MINOR=9\nCONFLUENT_PATCH=0\n#####################################################\n\nCP_VERSION_FULL=\"$CONFLUENT_MAJOR.$CONFLUENT_MINOR.$CONFLUENT_PATCH\"\n\n# REPOSITORY - repository for Docker image\n# The '/' which separates the REPOSITORY from the image name is not required here\nREPOSITORY=confluentinc\n\n#####################################################\n# We use below values in both Docker and Makefile(s)\n# and neither of them do well with variables that\n# derive value from other variables with interpolation.\n# This is why we don't reuse previous values below\n# as it doesn't work in the docker-compose ${var}\n# syntax and also doesn't work when this is included\n# in a Makefile\n#####################################################\n\n############### kafka-connect-datagen ###############\n# We can't use the CP docker tag above for the aggregate datagen version because\n#   kafka-connect-datagen is not, currently, part of the CP build process.  \n#   kafka-connect-datagen releases are manual so we have to manage this manually \n#   and there will be a delay between CP releases and kafka-connect-datagen releases.\n#   Published kafka-connect-datagen images can be found here:\n#     https://hub.docker.com/r/cnfldemos/kafka-connect-datagen/tags\nKAFKA_CONNECT_DATAGEN_VERSION=0.5.0\nKAFKA_CONNECT_DATAGEN_DOCKER_TAG=0.5.0-6.2.0\n#####################################################\n\n#################### Operator #######################\n# CP Operator has a different release cadence than\n# CP so we need to maintain a different version \n# number for demos that use CP Operator.\n# This will need to be managed manually until some\n# tooling automation can be put in place to deal\n# with the different release cadence or the releases\n# are syncronized.\nOPERATOR_BUNDLE_VERSION=1.6.1\nOPERATOR_BUNDLE_CP_VERSION=6.0.0\nOPERATOR_CP_IMAGE_TAG=6.0.1.0\nOPERATOR_KAFKA_CONNECT_DATAGEN_IMAGE_TAG=0.4.0-6.0.0.0\n#####################################################\n\n############### kafka-connect-jdbc ##################\n# We can't use the CP docker tag above for the aggregate JDBC connect version because\n#   kafka-connect-jdbc is not, currently, part of the CP build process.  \n#   kafka-connect-jdbc releases are manual so we have to manage this manually \n#   and there will be a delay between CP releases and kafka-connect-jdbc releases.\n#   Published kafka-connect-jdbc images can be found here:\n#     https://www.confluent.io/hub/confluentinc/kafka-connect-jdbc\nKAFKA_CONNECT_JDBC_VERSION=10.1.1\n#####################################################\n\n########### kafka-connect-elasticsearch #############\n# We can't use the CP docker tag above for the aggregate elasticsearch connect\n#   version because kafka-connect-elasticsearch is not, currently, part of the\n#   CP build process. kafka-connect-elasticsearch releases are manual so we \n#   have to manage this manually and there will be a delay between CP releases \n#   and kafka-connect-elasticsearch releases. Published kafka-connect-elasticsearch \n#   images can be found here:\n#   https://www.confluent.io/hub/confluentinc/kafka-connect-elasticsearch\nKAFKA_CONNECT_ES_VERSION=10.0.2\n#####################################################\n",
            "multiregion/docker-compose.yml": "# Docker Compose supports environment variable substitution with the ${VARIABLE-NAME} syntax.\n# Environment variables can be sourced in a variety of ways.  One of those ways is through\n# a well known '.env' file located in the same folder as the docker-compose.yml file.  See the Docker\n# documentation for details: https://docs.docker.com/compose/environment-variables/#the-env-file\n# \n# This feature is being used to parameterize some values within this file.  In this directory is also\n# a .env file, which is actually a symbolic link to <examples-root>/utils/config.env.  That file\n# contains values which get substituted here when Docker Compose parses this file.\n#\n# If you'd like to view the docker-compose.yml file rendered with its environment variable substituions\n# you can execute the `docker compose config` command.  Take note that some demos provide additional\n# environment variable values by exporting them in a script prior to running `docker compose up`.\n---\nversion: '3.5'\n\nservices:\n  controller-west:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: controller-west\n    container_name: controller-west\n    networks:\n      - n1\n    ports:\n      - \"9095:9095\"\n      - \"8095:8095\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 5\n      KAFKA_BROKER_ID: 5\n      KAFKA_PROCESS_ROLES: 'controller'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_LISTENERS: 'CONTROLLER://controller-west:9095'\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8095\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    cap_add:\n      - NET_ADMIN\n\n  controller-central:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: controller-central\n    container_name: controller-central\n    networks:\n      - n1\n    ports:\n      - \"9096:9096\"\n      - \"8096:8096\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 6\n      KAFKA_BROKER_ID: 6\n      KAFKA_PROCESS_ROLES: 'controller'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_LISTENERS: 'CONTROLLER://controller-central:9096'\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8096\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    cap_add:\n      - NET_ADMIN\n\n  controller-east:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: controller-east\n    container_name: controller-east\n    networks:\n      - n1\n    ports:\n      - \"9097:9097\"\n      - \"8097:8097\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 7\n      KAFKA_BROKER_ID: 7\n      KAFKA_PROCESS_ROLES: 'controller'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_LISTENERS: 'CONTROLLER://controller-east:9097'\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8097\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    cap_add:\n      - NET_ADMIN\n\n  broker-west-1:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: broker-west-1\n    container_name: broker-west-1\n    networks:\n      - n1\n    ports:\n      - \"9091:9091\"\n      - \"8091:8091\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 1\n      KAFKA_BROKER_ID: 1\n      KAFKA_BROKER_RACK: 'west'\n      KAFKA_PROCESS_ROLES: 'broker'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker-west-1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8091\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 4\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    depends_on:\n      - controller-west\n      - controller-central\n      - controller-east\n    cap_add:\n      - NET_ADMIN\n\n  broker-west-2:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: broker-west-2\n    container_name: broker-west-2\n    networks:\n      - n1\n    ports:\n      - \"9092:9092\"\n      - \"8092:8092\"\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 2\n      KAFKA_BROKER_ID: 2\n      KAFKA_BROKER_RACK: 'west'\n      KAFKA_PROCESS_ROLES: 'broker'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker-west-2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8092\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 4\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2\n      CONFLUENT_METRICS_ENABLE: 'true'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    depends_on:\n      - controller-west\n      - controller-central\n      - controller-east\n      - broker-west-1\n    cap_add:\n      - NET_ADMIN\n\n  broker-east-3:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: broker-east-3\n    container_name: broker-east-3\n    networks:\n      - n1\n    ports:\n      - \"9093:9093\"\n      - \"8093:8093\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 3\n      KAFKA_BROKER_ID: 3\n      KAFKA_BROKER_RACK: 'east'\n      KAFKA_PROCESS_ROLES: 'broker'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker-east-3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8093\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 4\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2\n      CONFLUENT_METRICS_ENABLE: 'true'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    depends_on:\n      - controller-west\n      - controller-central\n      - controller-east\n      - broker-west-1\n      - broker-west-2\n    cap_add:\n      - NET_ADMIN\n\n  broker-east-4:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: broker-east-4\n    container_name: broker-east-4\n    networks:\n      - n1\n    ports:\n      - \"9094:9094\"\n      - \"8094:8094\"\n    environment:\n      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'\n      KAFKA_NODE_ID: 4\n      KAFKA_BROKER_ID: 4\n      KAFKA_BROKER_RACK: 'east'\n      KAFKA_PROCESS_ROLES: 'broker'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '5@controller-west:9095,6@controller-central:9096,7@controller-east:9097'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker-east-4:19094,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8094\n      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{\"version\": 1,\"replicas\": [{\"count\": 2, \"constraints\": {\"rack\": \"west\"}}], \"observers\": [{\"count\": 2, \"constraints\": {\"rack\": \"east\"}}]}'\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 4\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2\n      CONFLUENT_METRICS_ENABLE: 'true'\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    depends_on:\n      - controller-west\n      - controller-central\n      - controller-east\n      - broker-west-1\n      - broker-west-2\n      - broker-east-3\n    cap_add:\n      - NET_ADMIN\n\n  controller-ccc:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: controller-ccc\n    container_name: controller-ccc\n    networks:\n      - n1\n    ports:\n      - \"9098:9098\"\n      - \"8098:8098\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: 'wo9ij5pnSDmPDbp7SzorHQ'\n      KAFKA_NODE_ID: 8\n      KAFKA_BROKER_ID: 8\n      KAFKA_PROCESS_ROLES: 'controller'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '8@controller-ccc:9098'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_LISTENERS: 'CONTROLLER://controller-ccc:9098'\n      KAFKA_REPLICA_SELECTOR_CLASS: org.apache.kafka.common.replica.RackAwareReplicaSelector\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8098\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n\n  broker-ccc:\n    image: localbuild/cp-server-tc:${CONFLUENT_DOCKER_TAG}\n    hostname: broker-ccc\n    container_name: broker-ccc\n    networks:\n      - n1\n    ports:\n      - \"9099:9099\"\n      - \"8099:8099\"\n    volumes:\n      - ./config:/etc/kafka/demo\n    environment:\n      CLUSTER_ID: 'wo9ij5pnSDmPDbp7SzorHQ'\n      KAFKA_NODE_ID: 9\n      KAFKA_BROKER_ID: 9\n      KAFKA_PROCESS_ROLES: 'broker'\n      KAFKA_CONTROLLER_QUORUM_VOTERS: '8@controller-ccc:9098'\n      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT\n      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL\n      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://broker-ccc:19099,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9099\n      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter\n      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_CONFLUENT_MONITORING_INTERCEPTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      KAFKA_JMX_PORT: 8099\n      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: 1\n      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1\n      KAFKA_CONFLUENT_BALANCER_ENABLE: 'false'\n    depends_on:\n      - controller-ccc\n\n  control-center:\n    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG}\n    hostname: control-center\n    container_name: control-center\n    networks:\n      - n1\n    depends_on:\n      - broker-ccc\n    ports:\n      - \"9021:9021\"\n    environment:\n      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker-ccc:19099\n      CONTROL_CENTER_REPLICATION_FACTOR: 1\n      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1\n      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1\n      CONTROL_CENTER_KAFKA_MRC_BOOTSTRAP_SERVERS: broker-west-1:19091,broker-west-2:19092,broker-east-3:19093,broker-east-4:19094\n      CONTROL_CENTER_KAFKA_METRICS_BOOTSTRAP_SERVERS: broker-ccc:19099\n      CONFLUENT_METRICS_TOPIC_REPLICATION: 1\n      PORT: 9021\n\nnetworks:\n  n1:\n",
            "multiregion/Dockerfile": "ARG REPOSITORY\nARG IMAGE\nARG CP_VERSION\n\nFROM $REPOSITORY/$IMAGE:$CP_VERSION\n\nUSER root\nRUN yum install -y \\\n     libmnl \\\n     findutils \\\n     which\nRUN wget http://vault.centos.org/8.1.1911/BaseOS/x86_64/os/Packages/iproute-tc-4.18.0-15.el8.x86_64.rpm\nRUN rpm -i --nodeps --nosignature http://vault.centos.org/8.1.1911/BaseOS/x86_64/os/Packages/iproute-tc-4.18.0-15.el8.x86_64.rpm\nRUN wget http://vault.centos.org/8.1.1911/BaseOS/x86_64/os/Packages/iptables-libs-1.8.2-16.el8.x86_64.rpm\nRUN rpm -i --nodeps --nosignature http://vault.centos.org/8.1.1911/BaseOS/x86_64/os/Packages/iptables-libs-1.8.2-16.el8.x86_64.rpm\nUSER appuser\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "README.md",
            "ccloud_lib.py",
            "consumer.py",
            "consumer_ccsr.py",
            "producer.py",
            "producer_ccsr.py",
            "requirements.txt"
        ],
        "folders": []
    }
}