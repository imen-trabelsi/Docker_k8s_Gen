{
    "source_code_info": {
        "language": "Perl",
        "framework": "Mojolicious",
        "dependencies": {
            "Makefile.PL": "#!/usr/bin/env perl\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# This Source Code Form is \"Incompatible With Secondary Licenses\", as\n# defined by the Mozilla Public License, v. 2.0.\n\nuse 5.10.1;\nuse strict;\nuse warnings;\n\nuse File::Basename;\nuse File::Spec;\n\nBEGIN {\n  require lib;\n  my $dir = File::Spec->rel2abs(dirname(__FILE__));\n  lib->import(\n    $dir,\n    File::Spec->catdir($dir, 'lib'),\n    File::Spec->catdir($dir, qw(local lib perl5))\n  );\n}\n\nuse ExtUtils::MakeMaker 7.22;\nuse File::Basename;\nuse File::Spec;\nuse English qw(-no_match_vars $OSNAME);\n\nBEGIN {\n  if ($ENV{BZ_SILENT_MAKEFILE}) {\n    open STDOUT, '>>', File::Spec->devnull\n      or die \"redirecting STDOUT to /dev/null failed: $!\";\n    open STDERR, '>>', File::Spec->devnull\n      or die \"redirecting STDERR to /dev/null failed: $!\";\n  }\n}\n\n# PREREQ_PM\nmy %requires = (\n  'Algorithm::BloomFilter'              => '0.02',\n  'CGI'                                 => '4.31',\n  'CGI::Compile'                        => 0,\n  'CGI::Emulate::PSGI'                  => 0,\n  'CPAN::Meta::Prereqs'                 => '2.132830',\n  'CPAN::Meta::Requirements'            => '2.121',\n  'Class::XSAccessor'                   => '1.18',\n  'Crypt::OpenSSL::Bignum'              => 0,\n  'Crypt::OpenSSL::RSA'                 => 0,\n  'DBI'                                 => '1.614',\n  'DBIx::Connector'                     => 0,\n  'DBIx::Class'                         => 0,\n  'DBIx::Class::Helpers'                => '== 2.034002',\n  'Date::Format'                        => '2.23',\n  'Date::Parse'                         => '2.31',\n  'DateTime'                            => '0.75',\n  'DateTime::TimeZone'                  => '2.11',\n  'Devel::NYTProf'                      => '6.04',\n  'Digest::SHA'                         => '5.47',\n  'EV'                                  => '4.0',\n  'Email::MIME'                         => '1.904',\n  'Email::MIME::ContentType'            => 0,\n  'Email::Sender'                       => 0,\n  'FFI::Platypus'                       => 0,\n  'Future'                              => '0.34',\n  'Graph'                               => 0,\n  'HTML::Escape'                        => '1.10',\n  'IO::Async'                           => '0.71',\n  'IPC::System::Simple'                 => 0,\n  'JSON::MaybeXS'                       => '1.003008',\n  'JSON::Validator'                     => '3.05',\n  'JSON::XS'                            => '2.01',\n  'LWP::Protocol::https'                => '6.07',\n  'LWP::UserAgent'                      => '6.44',\n  'LWP::UserAgent::Determined'          => 0,\n  'List::MoreUtils'                     => '0.418',\n  'Log::Dispatch'                       => '2.67',\n  'Log::Log4perl'                       => '1.49',\n  'Math::Random::ISAAC'                 => '1.0.1',\n  'Module::Metadata'                    => '1.000033',\n  'Module::Runtime'                     => '0.014',\n  'Mojo::JWT'                           => '0.07',\n  'MojoX::Log::Log4perl'                => '0.04',\n  'Mojolicious'                         => '9.0',\n  'Mojolicious::Plugin::OAuth2'         => '1.58',\n  'Mojolicious::Plugin::OAuth2::Server' => '0.44',\n  'Moo'                                 => '2.002004',\n  'MooX::StrictConstructor'             => '0.008',\n  'Mozilla::CA'                         => '20160104',\n  'Net::DNS'                            => '0',\n  'Package::Stash'                      => '0.37',\n  'Parse::CPAN::Meta'                   => '1.44',\n  'PerlX::Maybe'                        => 0,\n  'Role::Tiny'                          => '2.000003',\n  'Scope::Guard'                        => '0.21',\n  'Sereal'                              => '4.004',\n  'Set::Object'                         => 0,\n  'Sub::Quote'                          => '2.005000',\n  'Template'                            => '2.24',\n  'Text::CSV_XS'                        => '1.26',\n  'Throwable'                           => '0.200013',\n  'Type::Tiny'                          => '1.004004',\n  'URI'                                 => '1.55',\n  'URI::Escape::XS'                     => '0.14',\n  'version'                             => '0.87',\n);\n\nmy %build_requires = ('ExtUtils::MakeMaker' => '7.22',);\nmy %recommends = (Safe => '2.30',);\n\n# Windows requires some additional modules.\nif ($OSNAME eq 'MSWin32') {\n  $requires{'Win32'}                            = '0.35';\n  $requires{'Win32::API'}                       = '0.55';\n  $requires{'DateTime::TimeZone::Local::Win32'} = '1.64';\n}\n\nif ($OSNAME eq 'linux' && -f '/etc/debian_version') {\n  my @extra = qw(\n    Test::Pod::Coverage\n    Pod::Coverage::TrustPod\n    Test::CPAN::Meta\n    Test::Pod\n  );\n  $requires{$_} = 0 for @extra;\n}\n\nmy %optional_features = (\n  better_xff => {\n    description => 'Improved behavior of MOJO_REVERSE_PROXY',\n    prereqs =>\n      {runtime => {requires => {'Mojolicious::Plugin::ForwardedFor' => 0}}}\n  },\n  alien_cmark => {\n    description => 'Support GitHub-flavored markdown',\n    prereqs     => {runtime => {requires => {'Alien::libcmark_gfm' => '3'},},},\n  },\n  argon2 => {\n    description => 'Support hashing passwords with Argon2',\n    prereqs     => {runtime => {requires => {'Crypt::Argon2' => '0.004',},},},\n  },\n  smtp_auth => {\n    description => 'SMTP Authentication',\n    prereqs     => {\n      runtime => {requires => {'Authen::SASL' => 0, 'Net::SMTP::TLS' => 0}}},\n  },\n  detect_charset => {\n    description => 'Automatic charset detection for text attachments',\n    prereqs =>\n      {runtime => {requires => {'Encode::Detect' => 0, Encode => '2.21'}}},\n  },\n  chart_clicker => {\n    description => 'Support nice-looking charts',\n    prereqs     => {runtime => {requires => {'Chart::Clicker' => 0}},},\n  },\n  new_charts => {\n    description => 'New Charts',\n    prereqs =>\n      {runtime => {requires => {'Chart::Lines' => 'v2.4.10', GD => '1.20'}}}\n  },\n  html_desc => {\n    description => 'More HTML in Product/Group Descriptions',\n    prereqs     => {\n      runtime => {requires => {'HTML::Parser' => '3.67', 'HTML::Scrubber' => 0}}\n    }\n  },\n  markdown => {\n    description => 'Markdown syntax support for comments',\n    prereqs     => {\n      runtime =>\n        {requires => {'Text::MultiMarkdown' => '1.000034', 'Unicode::GCString' => 0}}\n    }\n  },\n  pg => {\n    description => 'Postgres database support',\n    prereqs     => {runtime => {requires => {'DBD::Pg' => 'v2.19.3'}}},\n  },\n  memcached => {\n    description => 'Memcached Support',\n    prereqs => {runtime => {requires => {'Cache::Memcached::Fast' => '0.17'}}}\n  },\n  updates => {\n    description => 'Automatic Update Notifications',\n    prereqs     => {runtime => {requires => {'XML::Twig' => 0}}}\n  },\n  auth_radius => {\n    description => 'RADIUS Authentication',\n    prereqs     => {runtime => {requires => {'Authen::Radius' => 0}}}\n  },\n  documentation => {\n    description => 'Documentation',\n    prereqs     => {\n      runtime =>\n        {requires => {'File::Which' => 0, 'File::Copy::Recursive' => 0,}}\n    },\n  },\n  xmlrpc => {\n    description => 'XML-RPC Interface',\n    prereqs     => {\n      runtime => {\n        requires => {\n          'XMLRPC::Lite' => '0.712',\n          'SOAP::Lite'   => '0.712',\n          'Test::Taint'  => '1.06'\n        }\n      }\n    }\n  },\n  auth_ldap => {\n    description => 'LDAP Authentication',\n    prereqs     => {runtime => {requires => {'Net::LDAP' => 0}}},\n  },\n  old_charts => {\n    description => 'Old Charts',\n    prereqs =>\n      {runtime => {requires => {GD => '1.20', 'Chart::Lines' => 'v2.4.10'}},},\n  },\n  moving => {\n    description => 'Move Bugs Between Installations',\n    prereqs =>\n      {runtime => {requires => {'MIME::Parser' => '5.406', 'XML::Twig' => 0}}},\n  },\n  oracle => {\n    description => 'Oracle database support',\n    prereqs     => {runtime => {requires => {'DBD::Oracle' => '1.19'}}}\n  },\n  s3 => {\n    description => 'Amazon S3 Attachment Storage',\n    prereqs     => {\n      runtime => {\n        requires => {\n          'Class::Accessor::Fast' => 0,\n          'XML::Simple'           => 0,\n          'URI::Escape'           => 0,\n        }\n      }\n    }\n  },\n  typesniffer => {\n    description => 'Sniff MIME type of attachments',\n    prereqs     => {\n      runtime =>\n        {requires => {'IO::Scalar' => 0, 'File::MimeInfo::Magic' => 0,},},\n    },\n  },\n  sqlite => {\n    description => 'SQLite database support',\n    prereqs     => {runtime => {requires => {'DBD::SQLite' => '1.29', 'DateTime::Format::SQLite' => '0.11'}}},\n  },\n  mysql => {\n    description => 'MySQL database support',\n    prereqs     => {runtime => {requires => {'DBD::mysql' => '== 4.051', 'DateTime::Format::MySQL' => '0.06'}}}\n  },\n  jsonrpc => {\n    description => 'JSON-RPC Interface',\n    prereqs     => {\n      runtime =>\n        {requires => {'JSON::RPC' => '== 1.01', 'Test::Taint' => '1.06'}}\n    }\n  },\n  graphical_reports => {\n    description => 'Graphical Reports',\n    prereqs     => {\n      runtime => {\n        requires => {\n          'GD::Text'                    => 0,\n          'Template::Plugin::GD::Image' => 0,\n          'GD::Graph'                   => 0,\n          GD                            => '1.20',\n        }\n      }\n    }\n  },\n  mfa => {\n    description => 'Multi-Factor Authentication',\n    prereqs     => {\n      runtime => {\n        requires =>\n          {'Auth::GoogleAuth' => '1.01', 'GD::Barcode' => '== 1.15',},\n      }\n    },\n  },\n  inbound_email => {\n    description => 'Inbound Email',\n    prereqs     => {\n      runtime => {\n        requires =>\n          {'Email::MIME::Attachment::Stripper' => 0, 'Email::Reply' => 0,}\n      }\n    },\n  },\n  patch_viewer => {\n    description => 'Patch Viewer',\n    prereqs     => {runtime => {requires => {PatchReader => '0.9.6'}}}\n  },\n  rest => {\n    description => 'REST Interface',\n    prereqs     => {\n      runtime =>\n        {requires => {'Test::Taint' => '1.06', 'JSON::RPC' => '==1.01',}}\n    }\n  },\n  linux_pid => {\n    description => 'Linux::PID',\n    prereqs     => {runtime => {requires => {'Linux::Pid' => 0},},},\n  },\n  linux_smaps => {\n    description => 'Linux::Smaps::Tiny for limiting memory usage',\n    prereqs     => {\n      runtime =>\n        {requires => {'Linux::Smaps::Tiny' => '0', 'BSD::Resource' => 0}}\n    },\n  },\n  linux_pdeath => {\n    description => 'Linux::Pdeathsig for a good parent/child relationships',\n    prereqs     => {runtime => {requires => {'Linux::Pdeathsig' => 0},},},\n  },\n  jobqueue => {\n    description => 'Mail Queueing',\n    prereqs     => {\n      runtime => {requires => {TheSchwartz => '1.10', 'Daemon::Generic' => 0}}\n    }\n  },\n  sentry => {\n    description => 'Sentry Support',\n    prereqs     => {\n      runtime => {requires => {'Log::Log4perl::Appender::Raven' => '0.006'},},\n    },\n  },\n  datadog => {\n    description => 'Data Dog support',\n    prereqs => {runtime => {requires => {'DataDog::DogStatsd' => '0.05'},},},\n  },\n);\n\nfor my $file (glob 'extensions/*/Config.pm') {\n  my $dir  = dirname($file);\n  my $name = basename($dir);\n\n  next if -f File::Spec->catfile($dir, 'disabled');\n  require $file;\n  my $class = \"Bugzilla::Extension::$name\";\n  if ($class->can('REQUIRED_MODULES')) {\n    foreach my $required_module (@{$class->REQUIRED_MODULES()}) {\n      $requires{$required_module->{module}} = $required_module->{version};\n    }\n  }\n\n  if ($class->can('OPTIONAL_MODULES')) {\n    my $default_feature = 'extension_' . lc($name) . '_optional';\n    foreach my $mod (@{$class->OPTIONAL_MODULES}) {\n      my @features = $mod->{feature} ? @{$mod->{feature}} : ($default_feature);\n      foreach my $feature (@features) {\n        $optional_features{$feature}{prereqs}{runtime}{requires}{$mod->{module}}\n          = $mod->{version} // 0;\n      }\n    }\n  }\n}\n\nmy %test_requires = (\n  %{ $optional_features{sqlite}{prereqs}{runtime}{requires} },\n  'Capture::Tiny'                   => 0,\n  'DBD::SQLite'                     => '1.29',\n  'Perl::Critic::Freenode'          => 0,\n  'Perl::Critic::Policy::Documentation::RequirePodLinksIncludeText' => 0,\n  'Perl::Tidy'                      => '20180220',\n  'Pod::Coverage'                   => 0,\n  'Selenium::Remote::Driver'        => 1.31,\n  'Test::More'                      => 0,\n  'Test::Perl::Critic::Progressive' => 0,\n  'Test::Selenium::Firefox'         => 0,\n  'Test::WWW::Selenium'             => 0,\n  'Test2::V0'                       => 0,\n);\n\n# BMO Customization\nmy @bmo_features = grep { is_bmo_feature($_) } keys %optional_features;\n\n$optional_features{bmo} = {\n  description => 'features that BMO needs',\n  prereqs     => {\n    runtime => {\n      requires => {\n        map { %{$optional_features{$_}{prereqs}{runtime}{requires}} }\n          @bmo_features\n      },\n    },\n  },\n};\n\nWriteMakefile(\n  NAME             => 'Bugzilla',\n  AUTHOR           => q{Bugzilla Developers <developers@bugzilla.org>},\n  VERSION_FROM     => 'Bugzilla.pm',\n  ABSTRACT         => 'Bugzilla Bug Tracking System',\n  LICENSE          => 'Mozilla_2_0',\n  MIN_PERL_VERSION => '5.34.0',\n  CONFIGURE_REQUIRES =>\n    {'ExtUtils::MakeMaker' => $build_requires{'ExtUtils::MakeMaker'}},\n  PREREQ_PM      => {%requires},\n  BUILD_REQUIRES => {%build_requires},\n  TEST_REQUIRES  => {%test_requires},\n  META_MERGE     => {\n    'meta-spec' => {\n      url     => 'http://search.cpan.org/perldoc?CPAN::Meta::Spec',\n      version => '2'\n    },\n    dynamic_config => 1,\n    prereqs        => {\n      build   => {requires => {%build_requires}},\n      runtime => {requires => {%requires}, recommends => {%recommends}},\n      test    => {requires => {%test_requires}},\n    },\n    optional_features => \\%optional_features,\n  },\n);\n\nsub MY::postamble {\n  return <<\"MAKE\";\nGEN_CPANFILE_ARGS = -D bmo\ncpanfile: MYMETA.json\n\\t\\$(PERLRUN) gen-cpanfile.pl \\$(GEN_CPANFILE_ARGS)\n\nMETA.json: Makefile.PL\n\\tmake distmeta 2>&1 /dev/null; mv */META.json .\n\nMETA.yml: Makefile.PL\n\\tmake distmeta 2>&1 /dev/null; mv */META.yml .\nMAKE\n}\n\nsub is_bmo_feature {\n  local $_ = shift;\n  return $OSNAME eq 'linux' if /^linux/;\n  return !m{\n        ^\n        (?: pg\n          | oracle\n          | sqlite\n          | auth_ldap\n          | auth_radius\n          | updates)\n        $\n    }mxs;\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "Makefile.PL",
        "config_files": {
            "docker-compose.yml": "# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nservices:\n  bmo.test:\n    platform: linux/x86_64\n    build: &bmo_build\n      context: .\n      dockerfile: Dockerfile\n      target: base\n    command: dev_httpd\n    volumes:\n      - bmo-data-dir:/app/data\n      - .:/mnt/sync\n    tmpfs:\n      - /tmp\n      - /run\n    environment: &bmo_env\n      - \"BMO_inbound_proxies=*\"\n      - BMO_db_host=bmo.db\n      - BMO_db_name=bugs\n      - BMO_db_pass=bugs\n      - BMO_db_user=bugs\n      - BMO_memcached_namespace=bugzilla\n      - BMO_memcached_servers=memcached:11211\n      - BMO_ses_username=ses@mozilla.bugs\n      - BMO_ses_password=password123456789!\n      - BMO_size_limit=2000000\n      - BMO_urlbase=http://localhost:8000/\n      - BUGZILLA_ALLOW_INSECURE_HTTP=1\n      - BZ_ANSWERS_FILE=/app/conf/checksetup_answers.txt\n      - BZ_DUO_BACKEND_HOST=externalapi.test:8001\n      - HTTP_BACKEND=morbo\n      - LOCALCONFIG_ENV=1\n      - LOG4PERL_CONFIG_FILE=log4perl-docker.conf\n      - MOJO_LISTEN=http://*:8000\n      - PORT=8000\n      - X_SES_CONFIGURATION_SET=ConfigSet\n    depends_on:\n      - bmo.db\n      - memcached\n      - s3\n      - gcs\n      - externalapi.test\n      - bq\n    ports:\n      - 8000:8000\n\n  bmo.jobqueue:\n    platform: linux/x86_64\n    build: *bmo_build\n    command: jobqueue\n    volumes:\n      - bmo-data-dir:/app/data\n    tmpfs:\n      - /tmp\n      - /run\n    environment: *bmo_env\n    restart: always\n    depends_on:\n      - bmo.db\n      - memcached\n\n  bmo.feed:\n    platform: linux/x86_64\n    build: *bmo_build\n    command:\n      - perl\n      - extensions/PhabBugz/bin/phabbugz_feed.pl\n      - start\n      - \"-d\"\n      - \"-f\"\n    volumes:\n      - bmo-data-dir:/app/data\n    tmpfs:\n      - /tmp\n      - /run\n    environment: *bmo_env\n    restart: always\n    depends_on:\n      - bmo.db\n      - memcached\n\n  bmo.pushd:\n    platform: linux/x86_64\n    build: *bmo_build\n    command:\n      - perl\n      - extensions/Push/bin/bugzilla-pushd.pl\n      - start\n      - \"-d\"\n      - \"-f\"\n    volumes:\n      - bmo-data-dir:/app/data\n    tmpfs:\n      - /tmp\n      - /run\n    environment: *bmo_env\n    restart: always\n    depends_on:\n      - bmo.db\n      - memcached\n\n  bmo.db:\n    platform: linux/x86_64\n    image: mysql:8\n    volumes:\n      - bmo-mysql-db:/var/lib/mysql\n      - ./docker/mysql:/etc/mysql/conf.d\n    tmpfs:\n      - /tmp\n    logging:\n      driver: \"none\"\n    environment:\n      - MYSQL_DATABASE=bugs\n      - MYSQL_USER=bugs\n      - MYSQL_PASSWORD=bugs\n      - MYSQL_ALLOW_EMPTY_PASSWORD=1\n\n  memcached:\n    platform: linux/x86_64\n    image: memcached:latest\n\n  s3:\n    platform: linux/x86_64\n    image: scireum/s3-ninja\n    volumes:\n      - \"bmo-s3-data:/home/sirius/data\"\n\n  gcs:\n    platform: linux/x86_64\n    image: fsouza/fake-gcs-server\n    command: \"-scheme http\"\n    volumes:\n      - bmo-gcs-attachments:/data/attachments\n      - bmo-gcs-sitemapindex:/data/sitemapindex\n      - bmo-gcs-mining:/data/mining\n\n  externalapi.test:\n    platform: linux/x86_64\n    build: *bmo_build\n    entrypoint: perl /app/external_test_api.pl daemon -l http://*:8001\n    ports:\n      - 8001:8001\n\n  bq:\n    platform: linux/x86_64\n    build:\n      context: ./docker/bigquery\n      dockerfile: Dockerfile\n    ports:\n      - 9050:9050\n    volumes:\n      - bmo-bq-data:/work\n    working_dir: /work\n    command: |\n      --project=test --data-from-yaml=/data.yaml --log-level=debug\n\nvolumes:\n  bmo-mysql-db:\n  bmo-data-dir:\n  bmo-s3-data:\n  bmo-gcs-attachments:\n  bmo-gcs-sitemapindex:\n  bmo-gcs-mining:\n  bmo-bq-data:\n",
            "Dockerfile": "FROM mozillabteam/bmo-perl-slim:20240822.1 AS base\n\nENV DEBIAN_FRONTEND=noninteractive\n\nARG CI\nARG CIRCLE_SHA1\nARG CIRCLE_BUILD_URL\n\nENV CI=${CI}\nENV CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL}\nENV CIRCLE_SHA1=${CIRCLE_SHA1}\n\n# we run a loopback logging server on this TCP port.\nENV LOG4PERL_CONFIG_FILE=log4perl-json.conf\nENV LOGGING_PORT=5880\nENV LOCALCONFIG_ENV=1\n\nRUN apt-get update \\\n    && apt-get upgrade -y \\\n    && apt-get install -y rsync curl \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN chown -R app:app /app && \\\n    perl -I/app -I/app/local/lib/perl5 -c -E 'use Bugzilla; BEGIN { Bugzilla->extensions }' && \\\n    perl -c /app/scripts/entrypoint.pl\n\nUSER app\n\nRUN perl checksetup.pl --no-database --default-localconfig && \\\n    rm -rf /app/data /app/localconfig && \\\n    mkdir /app/data\n\nEXPOSE 8000\n\nHEALTHCHECK CMD curl -sfk http://localhost -o/dev/null\n\nENTRYPOINT [\"/app/scripts/entrypoint.pl\"]\nCMD [\"httpd\"]\n\nFROM base AS test\n\nHEALTHCHECK NONE\n\nUSER root\n\nRUN apt-get update \\\n    && apt-get install -y firefox-esr lsof \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN curl -L https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz -o /tmp/geckodriver.tar.gz \\\n  && cd /tmp \\\n  && tar zxvf geckodriver.tar.gz \\\n  && mv geckodriver /usr/bin/geckodriver\n\nUSER app\n",
            ".circleci/config.yml": "# References:\n# 1. https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/\n# 2. https://circleci.com/docs/2.0/building-docker-images/\n#\n\nversion: 2.1\n\ndefaults:\n  docker_login: &docker_login\n    run:\n      name: Login to Dockerhub\n      command: |\n        if [ \"${DOCKER_USER}\" == \"\" ] || [ \"${DOCKER_PASS}\" == \"\" ]; then\n          echo \"Skipping Login to Dockerhub, credentials not available.\"\n        else\n          echo \"${DOCKER_PASS}\" | docker login -u=\"${DOCKER_USER}\" --password-stdin\n        fi\n\n  docker_image: &docker_image\n    image: cimg/base:2024.11\n    auth:\n      username: $DOCKER_USER\n      password: $DOCKER_PASS\n\n  store_log: &store_log\n    store_artifacts:\n      path: bugzilla.log\n      destination: bugzilla.log\n\ncommands:\n  # Only used for local jobs docker execution\n  setup_local_docker:\n    steps:\n      - run:\n          name: Use sudo docker in local builds\n          command: |\n            if [[ $CIRCLE_SHELL_ENV == *\"localbuild\"* ]]; then\n              sudo chmod u+s $(which docker)\n            fi\njobs:\n  build:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d build_info ]] || mkdir build_info\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: build version.json and push data\n          command: |\n            docker-compose build --build-arg CIRCLE_SHA1=\"$CIRCLE_SHA1\" --build-arg CIRCLE_BUILD_URL=\"$CIRCLE_BUILD_URL\" bmo.test\n            docker-compose run --name push_data bmo.test push_data\n            docker cp push_data:/app/push_data/blog.push.txt build_info/blog.push.txt\n            docker cp push_data:/app/push_data/markdown.push.txt build_info/markdown.push.txt\n            docker cp push_data:/app/push_data/bug.push.txt build_info/bug.push.txt\n            docker cp push_data:/app/push_data/email.push.txt build_info/email.push.txt\n            docker cp push_data:/app/push_data/tag.txt build_info/tag.txt\n            docker cp push_data:/app/push_data/wiki.push.txt build_info/wiki.push.txt\n            docker cp push_data:/app/version.json build_info/version.json\n            docker rm push_data\n      - run:\n          name: only publish if tag exists\n          command: |\n            git fetch --tags\n            tag=\"$(cat build_info/tag.txt)\"\n            if git tag | fgrep -q \"$tag\"; then\n              echo \"tag $tag exists!\"\n            else\n              echo \"tag $tag does not exist\"\n              echo yes > build_info/publish.txt\n            fi\n      - run:\n          name: check if only version changed\n          command: |\n            if git diff 'HEAD~..HEAD' --name-only | grep -qv '^Bugzilla.pm'; then\n              echo \"more files than just Bugzilla.pm changed.\"\n              exit 0\n            fi\n            if git diff 'HEAD~..HEAD' |grep '^[+-][^+-]' | grep -qv '^[+-]our $VERSION'; then\n              echo \"Something other than the version number changed.\"\n              exit 0\n            fi\n            if [[ \"$CIRCLE_BRANCH\" == \"master\" ]]; then\n              echo \"Can't cut corners on the master branch\"\n              exit 0\n            fi\n            echo yes > build_info/only_version_changed.txt\n      - persist_to_workspace:\n          root: build_info\n          paths: [\"*.txt\", \"*.json\"]\n      - store_artifacts:\n          path: build_info\n      - *store_log\n\n  deploy:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - attach_workspace:\n          at: build_info\n      - deploy:\n          command: |\n            [[ -n \"$DOCKERHUB_REPO\" && -n \"$DOCKER_USER\" && -n \"$DOCKER_PASS\" ]] || exit 0\n            docker build --build-arg CIRCLE_SHA1=\"$CIRCLE_SHA1\" --build-arg CIRCLE_BUILD_URL=\"$CIRCLE_BUILD_URL\" \\\n              --tag bmo --target base .\n            if [[ \"$CIRCLE_BRANCH\" == \"master\" ]]; then\n              TAG=\"$(cat build_info/tag.txt)\"\n              if [[ -n \"$TAG\" && -f build_info/publish.txt ]]; then\n                [[ -n \"$GITHUB_PERSONAL_TOKEN\" ]] || exit 0\n                git config credential.helper \"cache --timeout 120\"\n                git config user.email \"$GITHUB_EMAIL\"\n                git config user.name \"$GITHUB_NAME\"\n                git tag $TAG\n                git push https://${GITHUB_PERSONAL_TOKEN}:x-oauth-basic@github.com/$GITHUB_REPO.git $TAG\n                docker tag bmo \"$DOCKERHUB_REPO:$TAG\"\n                docker push \"$DOCKERHUB_REPO:$TAG\"\n              fi\n              docker tag bmo \"$DOCKERHUB_REPO:latest\"\n              docker push \"$DOCKERHUB_REPO:latest\"\n            else\n              docker tag bmo \"$DOCKERHUB_REPO:$CIRCLE_BRANCH\"\n              docker push \"$DOCKERHUB_REPO:$CIRCLE_BRANCH\"\n            fi\n\n  test_sanity:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run sanity tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build --no-deps bmo.test test_sanity t/*.t extensions/*/t/*.t\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_webservices:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run webservice tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build bmo.test test_webservices\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_selenium_1:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run selenium tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build -e SELENIUM_GROUP=1 bmo.test test_selenium\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_selenium_2:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run selenium tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build -e SELENIUM_GROUP=2 bmo.test test_selenium 2\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_selenium_3:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run selenium tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build -e SELENIUM_GROUP=3 bmo.test test_selenium 3\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_selenium_4:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run selenium tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build -e SELENIUM_GROUP=4 bmo.test test_selenium 4\n      - store_artifacts:\n          path: artifacts\n      - *store_log\n\n  test_bmo:\n    docker:\n      - *docker_image\n    steps:\n      - setup_remote_docker\n      - setup_local_docker\n      - checkout\n      - *docker_login\n      - run: |\n          [[ -d artifacts ]] || mkdir artifacts\n      - attach_workspace:\n          at: build_info\n      - run:\n          name: run bmo specific tests\n          command: |\n            [[ -f build_info/only_version_changed.txt ]] && exit 0\n            docker-compose -f docker-compose.test.yml run --build bmo.test test_bmo -q -f t/bmo/*.t extensions/*/t/bmo/*.t\n      - *store_log\n\nworkflows:\n  version: 2\n  main:\n    jobs:\n      - build\n      - deploy:\n          requires:\n            - build\n            - test_sanity\n            - test_bmo\n            - test_webservices\n            - test_selenium_1\n            - test_selenium_2\n            - test_selenium_3\n            - test_selenium_4\n      - test_sanity:\n          requires:\n            - build\n      - test_bmo:\n          requires:\n            - build\n      - test_webservices:\n          requires:\n            - build\n      - test_selenium_1:\n          requires:\n            - build\n      - test_selenium_2:\n          requires:\n            - build\n      - test_selenium_3:\n          requires:\n            - build\n      - test_selenium_4:\n          requires:\n            - build\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "data.yaml"
        ],
        "folders": []
    }
}