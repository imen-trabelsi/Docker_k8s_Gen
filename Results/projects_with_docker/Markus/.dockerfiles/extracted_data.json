{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"MarkUs\",\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.26.9\",\n    \"@fortawesome/fontawesome-svg-core\": \"^6.7.2\",\n    \"@fortawesome/free-brands-svg-icons\": \"^6.7.2\",\n    \"@fortawesome/free-regular-svg-icons\": \"^6.7.2\",\n    \"@fortawesome/free-solid-svg-icons\": \"^6.7.2\",\n    \"@fortawesome/react-fontawesome\": \"^0.2.2\",\n    \"@rails/actioncable\": \"^7.2.200\",\n    \"@rails/ujs\": \"^7.1.3-4\",\n    \"@rjsf/core\": \"^5.24.3\",\n    \"@rjsf/validator-ajv8\": \"^5.24.3\",\n    \"chart.js\": \"^4.4.8\",\n    \"core-js\": \"^3.40.0\",\n    \"dayjs\": \"^1.11.13\",\n    \"dompurify\": \"^3.2.4\",\n    \"flatpickr\": \"^4.6.13\",\n    \"heic2any\": \"^0.0.4\",\n    \"i18n-js\": \"^4.5.1\",\n    \"jcrop\": \"^0.0.1\",\n    \"jquery\": \"^3.7.1\",\n    \"jquery-ui\": \"^1.14.1\",\n    \"marked\": \"^15.0.7\",\n    \"mathjax\": \"^3.2.2\",\n    \"mime\": \"^4.0.6\",\n    \"mousetrap\": \"^1.6.5\",\n    \"pdfjs-dist\": \"^4.10.38\",\n    \"prismjs\": \"^1.29.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"react\": \"^18.3.1\",\n    \"react-chartjs-2\": \"^5.2.0\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-flatpickr\": \"^3.10.13\",\n    \"react-keyed-file-browser\": \"^1.14.0\",\n    \"react-modal\": \"^3.16.1\",\n    \"react-table\": \"^6.11.5\",\n    \"react-tabs\": \"^6.1.0\",\n    \"tslib\": \"^2.8.1\",\n    \"ui-contextmenu\": \"^1.18.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.26.9\",\n    \"@babel/plugin-transform-runtime\": \"^7.26.9\",\n    \"@babel/preset-env\": \"^7.26.9\",\n    \"@babel/preset-react\": \"^7.26.3\",\n    \"@testing-library/dom\": \"^10.4.0\",\n    \"@testing-library/jest-dom\": \"^6.6.3\",\n    \"@testing-library/react\": \"^16.2.0\",\n    \"@testing-library/user-event\": \"^14.6.1\",\n    \"babel-jest\": \"^29.4.3\",\n    \"babel-loader\": \"^10.0.0\",\n    \"babel-plugin-prismjs\": \"^2.1.0\",\n    \"css-loader\": \"^7.1.2\",\n    \"jest\": \"^29.7.0\",\n    \"jest-canvas-mock\": \"^2.5.2\",\n    \"jest-environment-jsdom\": \"^29.7.0\",\n    \"jest-fetch-mock\": \"^3.0.3\",\n    \"jsdom-worker\": \"^0.3.0\",\n    \"mini-css-extract-plugin\": \"^2.9.2\",\n    \"sass\": \"^1.85.1\",\n    \"sass-loader\": \"^16.0.5\",\n    \"webpack\": \"^5.98.0\",\n    \"webpack-cli\": \"^6.0.1\",\n    \"webpack-merge\": \"^6.0.1\"\n  },\n  \"browserslist\": [\n    \"defaults\"\n  ],\n  \"scripts\": {\n    \"build\": \"node_modules/.bin/webpack --progress --config webpack.production.js\",\n    \"build-dev\": \"node_modules/.bin/webpack --progress --config webpack.development.js\",\n    \"build:css\": \"sass ./app/assets/stylesheets/entrypoints:./app/assets/builds/ --no-source-map --load-path=node_modules --load-path=./app/assets/stylesheets --load-path=./vendor/assets/stylesheets --style=compressed\",\n    \"build-dev:css\": \"sass ./app/assets/stylesheets/entrypoints:./app/assets/builds/ --watch --load-path=node_modules --load-path=./app/assets/stylesheets --load-path=./vendor/assets/stylesheets\",\n    \"test\": \"node_modules/.bin/jest --no-cache\",\n    \"test-cov\": \"node_modules/.bin/jest --no-cache --collect-coverage\"\n  },\n  \"overrides\": {\n    \"react-keyed-file-browser\": {\n      \"react\": \"^18.3.1\",\n      \"classnames\": \"^2.5.1\",\n      \"date-fns\": \"^3.3.1\",\n      \"prop-types\": \"^15.8.1\",\n      \"react-dnd-html5-backend\": \"^16.0.1\"\n    },\n    \"react-table\": {\n      \"react\": \"^18.3.1\",\n      \"react-dom\": \"^18.3.1\"\n    }\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            ".dockerfiles/.env": "MARKUS__REDIS__URL=redis://redis:6379/\nMARKUS__PYTHON=/app/venv/bin/python\nPGUSER=postgres\nPGHOST=postgres\nPGPORT=5432\nPGPASSWORD=docker\nBOOTSNAP_CACHE_DIR=/bundle/bootsnap\nWEB_CONCURRENCY=1\nEDITOR=vi\nAUTOTEST_URL=http://autotest-client:5000\nTZ=America/Toronto\nNBCONVERT=/app/nbconvertvenv/bin/jupyter-nbconvert\nCAPYBARA_SERVER_PORT=3434\nCAPYBARA_SERVER_HOST=0.0.0.0\n",
            ".dockerfiles/Dockerfile": "FROM ubuntu:jammy AS base\n\nARG NODE_MAJOR=20\nARG BUNDLER_VERSION='2.4.13'\nARG RUBY_VERSION='3.3.4'\nARG USER=markus\n\n# Required in order to ensure bind-mounts are owned by the correct user inside the container\n# this is NOT required when using docker-desktop since that handles uid mappings differently.\n# Set this to the same UID as the user that owns the Markus files on the host machine.\nARG UID=1001\n\n# Create the user that runs the app\nRUN useradd -m -u $UID -s /bin/bash $USER\n\n# Set up the correct node version for later installation\nADD https://deb.nodesource.com/setup_$NODE_MAJOR.x /tmp/setup_node.sh\nRUN sh /tmp/setup_node.sh\n\n# Copy the debian package containing system dependencies\nCOPY markus_1.0_all.deb /\n\n# Install basic system dependencies\nRUN apt-get update && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends /markus_1.0_all.deb && \\\n    rm /tmp/setup_node.sh /markus_1.0_all.deb\n\n# Install Ruby (we use ruby-install to configure the installed ruby version).\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends wget ca-certificates sudo && \\\n    wget https://github.com/postmodern/ruby-install/releases/download/v0.9.3/ruby-install-0.9.3.tar.gz && \\\n    tar -xzvf ruby-install-0.9.3.tar.gz && \\\n    cd ruby-install-0.9.3/ && \\\n    make install && \\\n    ruby-install --update && \\\n    ruby-install --system ruby $RUBY_VERSION\n\n# Enable reading of PDF files with imagemagick\nRUN sed -ri 's/(rights=\")none(\"\\s+pattern=\"PDF\")/\\1read\\2/' /etc/ImageMagick-6/policy.xml\n\n## This ssh setup is so that if git over ssh is enabled later on, by installing the openssh-server package (or similar)\n## Then everything will just work out of the box\n\n# Setup ssh configuration\nRUN mkdir -p /home/${USER}/.ssh && \\\n    chmod 700 /home/${USER}/.ssh && \\\n    chown \"${USER}:${USER}\" /home/${USER}/.ssh\n\n# Make temporary dir for ssh server (should not be necessary)\nRUN mkdir -p -m0755 /var/run/sshd\n\n# Add scripts used by git-over-ssh\nRUN ln -s /app/lib/repo/markus-git-shell.sh /usr/local/bin/markus-git-shell.sh\nCOPY ./lib/repo/authorized_key_command.sh /usr/local/bin/authorized_key_command.sh\n\n# Update the sshd configuration to restrict access by the $USER user\n# NOTE: This block can follow \"Match User #{USER}\" if using openssh version 8.4+ (ubuntu 22.04+)\n#       in order to make these settings specific to the $USER user. (The Match User\n#       syntax is not supported in Included files prior to this version).\nRUN mkdir -p /etc/ssh/sshd_config.d/ && printf \"PermitRootLogin no\\n\\\nAuthorizedKeysFile none\\n\\\nAuthorizedKeysCommand /usr/local/bin/authorized_key_command.sh %%h\\n\\\nAuthorizedKeysCommandUser ${USER}\\n\"\\\n> /etc/ssh/sshd_config.d/markus.conf\n\nWORKDIR /app\n\nFROM base AS dev\n\nARG USER\nARG BUNDLER_VERSION\n\n# Set GEM_HOME so that gems are installed in the /bundle directory\nENV GEM_HOME=\"/bundle\"\n\n# Set PATH so that executables provided by gems are available on the PATH\nENV PATH=\"$GEM_HOME/bin:$GEM_HOME/gems/bin:$PATH\"\n\n# install optional system dependencies\nRUN apt-get update -qq && \\\n    DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends openssh-server \\\n                                                                               python3 \\\n                                                                               python3-dev \\\n                                                                               python3-venv \\\n                                                                               equivs \\\n                                                                               libjemalloc2\n\n# pre-create mount-points for volumes and set ownership of these mountpoints\nRUN mkdir -p /bundle \\\n             /app/data/development \\\n             /app/data/development/repos \\\n             /app/tmp \\\n             /app/node_modules \\\n             /app/log \\\n             /app/venv && \\\n             chown -R ${USER}:${USER} /bundle /app\n\nUSER $USER\n\n# install bundler\nRUN gem install bundler -v $BUNDLER_VERSION && bundle config set --local without 'unicorn'\n\n# symlink files for git-over-ssh\nRUN ln -s /app/.dockerfiles/git-ssh.rc /home/${USER}/.ssh/rc && \\\n    ln -s /app/.dockerfiles/ssh.pg_service.conf /home/${USER}/.pg_service.conf\n\n# declare all mount-points and parent directories as volumes so that ownership is preserved in containers\nVOLUME [\"/app\", \"/bundle\", \"/app/data\", \"/app/data/development\", \"/app/data/development/repos\", \\\n        \"/app/node_modules\", \"/app/log\", \"/app/venv\", \"/app/tmp\"]\n\nFROM base AS prod\n\nARG USER\nARG BUNDLER_VERSION\n\n# pre-create mount-points for volumes and set ownership of these mountpoints\nRUN mkdir -p /app/public /app/log /app/data/production/repos && chown -R ${USER}:${USER} /app\n\n# Copy over all app files\nCOPY --chown=${USER}:${USER} . /app\nCOPY --chown=${USER}:${USER} .dockerfiles/database.yml.postgresql /app/config/database.yml\nCOPY --chown=${USER}:${USER} .dockerfiles/git-ssh.rc /home/${USER}/.ssh/rc\n\n# Install bundler\nRUN gem install bundler -v $BUNDLER_VERSION && bundle config set --local without 'development test offline production_test'\n\nUSER $USER\n\n# Ensure that the $USER is referenced in .ssh/rc\nRUN sed \"s:/markus/:/${USER}/:g\" /home/${USER}/.ssh/rc\n\nENV RAILS_ENV=production\nENV NODE_ENV=production\n\n# Install gems\nRUN SECRET_KEY_BASE=1 bundle install --deployment\n\n# Precompile assets\nRUN SECRET_KEY_BASE=1 NO_SCHEMA_VALIDATE=true NO_INIT_SCHEDULER=true PGDATABASE=dummy bundle exec rails assets:precompile\n\n# declare all mount-points and parent directories as volumes so that ownership and content is preserved in containers\nVOLUME [\"/app/public\", \"/app/log\", \"/app\", \"/app/data\", \"/app/data/production\", \"/app/data/production/repos\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".env",
            "Dockerfile",
            "database.yml.postgresql",
            "entrypoint-dev-deps-updater.sh",
            "entrypoint-dev-rails.sh",
            "entrypoint-dev-ssh.sh",
            "git-ssh.rc",
            "ssh.pg_service.conf"
        ],
        "folders": [
            "production_demo"
        ]
    }
}