{
    "source_code_info": {
        "language": "Elixir",
        "framework": null,
        "dependencies": {
            "mix.exs": "defmodule OMG.Umbrella.MixProject do\n  use Mix.Project\n\n  def project() do\n    [\n      # name the ap for the sake of `mix coveralls --umbrella`\n      # see https://github.com/parroty/excoveralls/issues/23#issuecomment-339379061\n      apps_path: \"apps\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps(),\n      preferred_cli_env: [\n        coveralls: :test,\n        \"coveralls.detail\": :test,\n        \"coveralls.html\": :test,\n        \"coveralls.circle\": :test,\n        dialyzer: :test\n      ],\n      build_path: \"_build\" <> docker(),\n      deps_path: \"deps\" <> docker(),\n      dialyzer: dialyzer(),\n      test_coverage: [tool: ExCoveralls],\n      # gets all apps test folders for the sake of `mix coveralls --umbrella`\n      test_paths: test_paths(),\n      aliases: aliases(),\n      # Docs\n      source_url: \"https://github.com/omgnetwork/elixir-omg\",\n      version: current_version(),\n      releases: [\n        watcher: [\n          steps: steps(),\n          applications: [\n            tools: :permanent,\n            runtime_tools: :permanent,\n            omg_watcher: :permanent,\n            omg_watcher_rpc: :permanent,\n            omg_status: :permanent,\n            omg_db: :permanent,\n            omg_eth: :permanent,\n            omg_bus: :permanent\n          ],\n          config_providers: [\n            {OMG.Status.ReleaseTasks.SetSentry, [release: :watcher, current_version: current_version()]},\n            {OMG.Status.ReleaseTasks.SetTracer, [release: :watcher]},\n            {OMG.Status.ReleaseTasks.SetApplication, [release: :watcher, current_version: current_version()]},\n            {OMG.Eth.ReleaseTasks.SetEthereumEventsCheckInterval, []},\n            {OMG.Eth.ReleaseTasks.SetEthereumStalledSyncThreshold, []},\n            {OMG.Eth.ReleaseTasks.SetEthereumClient, []},\n            {OMG.Eth.ReleaseTasks.SetContract, []},\n            {OMG.DB.ReleaseTasks.SetKeyValueDB, [release: :watcher]},\n            {OMG.WatcherRPC.ReleaseTasks.SetEndpoint, []},\n            {OMG.WatcherRPC.ReleaseTasks.SetTracer, []},\n            {OMG.WatcherRPC.ReleaseTasks.SetApiMode, :watcher},\n            {OMG.Status.ReleaseTasks.SetLogger, []},\n            {OMG.Watcher.ReleaseTasks.SetEthereumEventsCheckInterval, []},\n            {OMG.Watcher.ReleaseTasks.SetExitProcessorSLAMargin, []},\n            {OMG.Watcher.ReleaseTasks.SetTracer, []},\n            {OMG.Watcher.ReleaseTasks.SetApplication, [release: :watcher, current_version: current_version()]}\n          ]\n        ],\n        watcher_info: [\n          steps: steps(),\n          version: current_version(),\n          applications: [\n            tools: :permanent,\n            runtime_tools: :permanent,\n            omg_watcher: :permanent,\n            omg_watcher_info: :permanent,\n            omg_watcher_rpc: :permanent,\n            omg_status: :permanent,\n            omg_db: :permanent,\n            omg_eth: :permanent,\n            omg_bus: :permanent\n          ],\n          config_providers: [\n            {OMG.Status.ReleaseTasks.SetSentry, [release: :watcher_info, current_version: current_version()]},\n            {OMG.Status.ReleaseTasks.SetTracer, [release: :watcher_info]},\n            {OMG.Status.ReleaseTasks.SetApplication, [release: :watcher_info, current_version: current_version()]},\n            {OMG.Status.ReleaseTasks.SetLogger, []},\n            {OMG.Eth.ReleaseTasks.SetEthereumEventsCheckInterval, []},\n            {OMG.Eth.ReleaseTasks.SetEthereumStalledSyncThreshold, []},\n            {OMG.Eth.ReleaseTasks.SetEthereumClient, []},\n            {OMG.Eth.ReleaseTasks.SetContract, []},\n            {OMG.DB.ReleaseTasks.SetKeyValueDB, [release: :watcher_info]},\n            {OMG.WatcherRPC.ReleaseTasks.SetEndpoint, []},\n            {OMG.WatcherRPC.ReleaseTasks.SetTracer, []},\n            {OMG.WatcherRPC.ReleaseTasks.SetApiMode, :watcher_info},\n            {OMG.Watcher.ReleaseTasks.SetEthereumEventsCheckInterval, []},\n            {OMG.Watcher.ReleaseTasks.SetExitProcessorSLAMargin, []},\n            {OMG.Watcher.ReleaseTasks.SetTracer, []},\n            {OMG.Watcher.ReleaseTasks.SetApplication, [release: :watcher_info, current_version: current_version()]},\n            {OMG.WatcherInfo.ReleaseTasks.SetTracer, []}\n          ]\n        ]\n      ]\n    ]\n  end\n\n  defp test_paths() do\n    \"apps/*/test\" |> Path.wildcard() |> Enum.sort()\n  end\n\n  defp deps() do\n    [\n      {:mix_audit, \"~> 0.1\", only: [:dev, :test], runtime: false},\n      {:dialyxir, \"~> 1.0\", only: [:dev, :test], runtime: false},\n      {:credo, \"~> 1.3\", only: [:dev, :test], runtime: false},\n      # https://github.com/xadhoom/excoveralls.git `52c6c8e5d7fe9abb814e5e3e546c863b9b2b41b7` rebased on `master`\n      # more or less around v0.11.1\n      {:excoveralls, \"~> 0.12.3\"},\n      {:licensir, \"~> 0.2.0\", only: :dev, runtime: false},\n      {\n        :ex_unit_fixtures,\n        git: \"https://github.com/omgnetwork/ex_unit_fixtures\", branch: \"feature/require_files_not_load\", only: [:test]\n      },\n      {:ex_doc, \"~> 0.20.2\", only: :dev, runtime: false},\n      {:spandex, \"~> 3.0.2\"}\n    ]\n  end\n\n  defp aliases() do\n    [\n      test: [\"ecto.create\", \"ecto.migrate\", \"test --no-start\"],\n      coveralls: [\"coveralls --no-start\"],\n      \"coveralls.html\": [\"coveralls.html --no-start\"],\n      \"coveralls.detail\": [\"coveralls.detail --no-start\"],\n      \"coveralls.post\": [\"coveralls.post --no-start\"],\n      \"coveralls.circle\": [\"coveralls.circle --no-start\"],\n      \"ecto.setup\": [\"ecto.create\", \"ecto.migrate\"],\n      \"ecto.reset\": [\"ecto.drop\", \"ecto.setup\"]\n    ]\n  end\n\n  defp dialyzer() do\n    [\n      flags: [:error_handling, :race_conditions, :underspecs, :unknown, :unmatched_returns],\n      ignore_warnings: \"dialyzer.ignore-warnings\",\n      list_unused_filters: true,\n      plt_add_apps: plt_apps(),\n      paths: Enum.map(File.ls!(\"apps\"), fn app -> \"_build#{docker()}/#{Mix.env()}/lib/#{app}/ebin\" end)\n    ]\n  end\n\n  defp plt_apps() do\n    [\n      :briefly,\n      :cowboy,\n      :ex_machina,\n      :ex_unit,\n      :exexec,\n      :fake_server,\n      :iex,\n      :jason,\n      :mix,\n      :plug,\n      :ranch,\n      :sentry,\n      :vmstats\n    ]\n  end\n\n  defp docker(), do: if(System.get_env(\"DOCKER\"), do: \"_docker\", else: \"\")\n\n  defp current_version() do\n    \"git\"\n    |> System.cmd([\"describe\", \"--tags\"])\n    |> elem(0)\n    |> String.replace(\"\\n\", \"\")\n  end\n\n  defp steps() do\n    case Mix.env() do\n      :prod -> [:assemble, :tar]\n      _ -> [:assemble]\n    end\n  end\nend\n"
        },
        "database": null,
        "build_system": "Mix",
        "config_files": {
            "docker-compose.yml": "version: \"2.3\"\nservices:\n  nginx:\n    image: nginx:latest\n    container_name: nginx\n    volumes:\n      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./docker/nginx/geth_nginx.conf:/etc/nginx/server_config/geth.conf:ro\n    ports:\n      - 9656:9656\n      - 8545:80\n      - 8546:81\n      - 443:443\n    healthcheck:\n      test: curl geth:80\n      interval: 5s\n      timeout: 3s\n      retries: 5\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.108\n\n  postgres:\n    image: postgres:9.6.13-alpine\n    restart: always\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: omisegodev\n      POSTGRES_PASSWORD: omisegodev\n    volumes:\n      - ./docker/create_databases.sql:/docker-entrypoint-initdb.d/create_databases.sql\n    healthcheck:\n      test: pg_isready -U omisego_dev\n      interval: 5s\n      timeout: 3s\n      retries: 5\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.107\n\n  feefeed:\n    image: omisego/feefeed_mock:latest\n    volumes:\n      - ./docker/static_feefeed/:/www-data/\n    ports:\n      - \"4000:80\"\n    expose:\n      - \"4000\"\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.110\n  # feefeed:\n  #   image: gcr.io/omisego-development/feefeed:latest\n  #   command: \"start\"\n  #   container_name: feefeed\n  #   environment:\n  #     - GITHUB_TOKEN=\"\"\n  #     - GITHUB_ORGANISATION=omgnetwork\n  #     - GITHUB_REPO=fee-rules-public\n  #     - SENTRY_DSN=\"\"\n  #     - GITHUB_BRANCH=master\n  #     - RULES_FETCH_INTERVAL=200\n  #     - RATES_FETCH_INTERVAL=200\n  #     - GITHUB_FILENAME=fee_rules\n  #     - DATABASE_URL=postgresql://feefeed:feefeed@172.27.0.107:5432/feefeed\n  #     - SECRET_KEY_BASE=\"Y8naENMR8b+vbPHILjwNtEfWFrnbGi2k+UYWm75VnKHfsavmyGLtTmmeJxAGK+zJ\"\n  #     - DATADOG_DISABLED=true\n  #     - DATADOG_HOST=\"localhost\"\n  #     - ETHEREUM_NODE_URL=http://172.27.0.108:80\n  #   ports:\n  #     - \"4000:4000\"\n  #   expose:\n  #     - \"4000\"\n  #   depends_on:\n  #     - postgres\n  #   restart: always\n  #   networks:\n  #     chain_net:\n  #       ipv4_address: 172.27.0.110\n\n  geth:\n    image: ethereum/client-go:v1.9.15\n    entrypoint: /bin/sh -c \". data/command\"\n    environment:\n      RPC_PORT: 8545\n    ports:\n      - \"8555:8545\"\n      - \"8556:8546\"\n    expose:\n      - \"8546\"\n      - \"8545\"\n    volumes:\n      - ./data:/data\n      - ./docker/geth/command:/data/command\n      - ./docker/geth/geth-blank-password:/data/geth-blank-password\n    healthcheck:\n      test: curl localhost:8545\n      interval: 5s\n      timeout: 3s\n      retries: 5\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.101\n\n  childchain:\n    image: omisego/child_chain:latest\n    command: \"full_local\"\n    container_name: childchain\n    env_file:\n      - ./localchain_contract_addresses.env\n      - ./fees_setup.env\n    environment:\n      - ETHEREUM_NETWORK=LOCALCHAIN\n      - ETHEREUM_RPC_URL=http://172.27.0.108:80\n      - APP_ENV=local_docker_development\n      - DD_HOSTNAME=datadog\n      - DD_DISABLED=true\n      - DB_PATH=/data\n      - ETHEREUM_EVENTS_CHECK_INTERVAL_MS=800\n      - ETHEREUM_STALLED_SYNC_THRESHOLD_MS=20000\n      - LOGGER_BACKEND=console\n      - RELEASE_COOKIE=development\n      - NODE_HOST=127.0.0.1\n      - PULSE_API_KEY=${PULSE_API_KEY}\n      - FEE_CLAIMER_ADDRESS=0x3b9f4c1dd26e0be593373b1d36cee2008cbeb837\n    restart: always\n    volumes:\n      - ./data:/data\n      - ./priv/dev-artifacts:/dev-artifacts\n    healthcheck:\n      test: curl localhost:9656\n      interval: 30s\n      timeout: 10s\n      retries: 5\n      start_period: 60s\n    depends_on:\n      - nginx\n      - geth\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.103\n\n  watcher:\n    image: omisego/watcher:latest\n    command: \"full_local\"\n    container_name: watcher\n    env_file:\n      - ./localchain_contract_addresses.env\n    environment:\n      - ETHEREUM_NETWORK=LOCALCHAIN\n      - ETHEREUM_RPC_URL=http://172.27.0.108:80\n      - CHILD_CHAIN_URL=http://172.27.0.108:9656\n      - PORT=7434\n      - APP_ENV=local_docker_development\n      - DD_HOSTNAME=datadog\n      - DD_DISABLED=true\n      - DB_PATH=/data\n      - ETHEREUM_EVENTS_CHECK_INTERVAL_MS=800\n      - ETHEREUM_STALLED_SYNC_THRESHOLD_MS=20000\n      - ETHEREUM_BLOCK_TIME_SECONDS=1\n      - EXIT_PROCESSOR_SLA_MARGIN=5520\n      - EXIT_PROCESSOR_SLA_MARGIN_FORCED=TRUE\n      - LOGGER_BACKEND=console\n      - RELEASE_COOKIE=development\n      - NODE_HOST=127.0.0.1\n    restart: always\n    ports:\n      - \"7434:7434\"\n    expose:\n      - \"7434\"\n    volumes:\n      - ./data:/data\n    healthcheck:\n      test: curl localhost:7434\n      interval: 30s\n      timeout: 1s\n      retries: 5\n      start_period: 30s\n    depends_on:\n      childchain:\n        condition: service_healthy\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.104\n\n  watcher_info:\n    image: omisego/watcher_info:latest\n    command: \"full_local\"\n    container_name: watcher_info\n    env_file:\n      - ./localchain_contract_addresses.env\n    environment:\n      - ETHEREUM_NETWORK=LOCALCHAIN\n      - ETHEREUM_RPC_URL=http://172.27.0.108:80\n      - CHILD_CHAIN_URL=http://172.27.0.108:9656\n      - DATABASE_URL=postgresql://omisego_dev:omisego_dev@172.27.0.107:5432/omisego_dev\n      - PORT=7534\n      - APP_ENV=local_docker_development\n      - DD_HOSTNAME=datadog\n      - DD_DISABLED=true\n      - DB_PATH=/data\n      - ETHEREUM_EVENTS_CHECK_INTERVAL_MS=800\n      - ETHEREUM_BLOCK_TIME_SECONDS=1\n      - EXIT_PROCESSOR_SLA_MARGIN=5520\n      - EXIT_PROCESSOR_SLA_MARGIN_FORCED=TRUE\n      - LOGGER_BACKEND=console\n      - RELEASE_COOKIE=development\n      - NODE_HOST=127.0.0.1\n    restart: always\n    ports:\n      - \"7534:7534\"\n    expose:\n      - \"7534\"\n    volumes:\n      - ./data:/data\n    healthcheck:\n      test: curl localhost:7534\n      interval: 30s\n      timeout: 1s\n      retries: 5\n      start_period: 30s\n    depends_on:\n      childchain:\n        condition: service_healthy\n      postgres:\n        condition: service_healthy\n    networks:\n      chain_net:\n        ipv4_address: 172.27.0.105\n\nnetworks:\n  chain_net:\n    name: chain_net\n    driver: bridge\n    ipam:\n      config:\n      - subnet: 172.27.0.0/24\n",
            "priv/perf/Dockerfile": "FROM elixir:1.11.2-alpine\n\nRUN apk add --no-cache rust \\\n        cargo \\\n        git \\\n        curl \\\n        bash \\\n        maven jq \\\n        autoconf \\\n        automake \\\n        gmp \\\n        gmp-dev \\\n        libtool \\\n        gcc \\\n        cmake \\\n        gnupg \\\n        alpine-sdk\n\nCOPY ./ ./elixir-omg\n\nWORKDIR ./elixir-omg\n\nRUN mkdir -p priv/openapitools \\\n        && curl https://raw.githubusercontent.com/OpenAPITools/openapi-generator/v4.3.1/bin/utils/openapi-generator-cli.sh > priv/openapitools/openapi-generator-cli \\\n        && chmod u+x priv/openapitools/openapi-generator-cli\n\nRUN priv/openapitools/openapi-generator-cli generate \\\n        -i https://raw.githubusercontent.com/omgnetwork/omg-childchain-v1/master/apps/omg_child_chain_rpc/priv/swagger/operator_api_specs.yaml \\\n        -g elixir \\\n        -o priv/perf/apps/child_chain_api/\n\nRUN priv/openapitools/openapi-generator-cli generate \\\n        -i apps/omg_watcher_rpc/priv/swagger/security_critical_api_specs.yaml \\\n        -g elixir \\\n        -o priv/perf/apps/watcher_security_critical_api/\n\nRUN priv/openapitools/openapi-generator-cli generate \\\n        -i apps/omg_watcher_rpc/priv/swagger/info_api_specs.yaml \\\n        -g elixir \\\n        -o priv/perf/apps/watcher_info_api/\n\nRUN mix local.hex --force && mix local.rebar --force\n\nWORKDIR ./priv/perf\n\nRUN mix deps.get && mix compile\n",
            ".circleci/config.yml": "version: 2.1\n\nexecutors:\n  metal:\n    docker:\n      - image: circleci/elixir:1.10.2\n      - image: circleci/postgres:9.6\n        environment:\n          MIX_ENV: test\n          POSTGRES_USER: omisego_dev\n          POSTGRES_PASSWORD: omisego_dev\n          POSTGRES_DB: omisego_test\n          CIRLCECI: true\n    working_directory: ~/src\n\n  metal_macos:\n    macos:\n      xcode: \"11.0.0\"\n\n  builder:\n    docker:\n      - image: omisegoimages/elixir-omg-builder:stable-20201207\n    working_directory: ~/src\n\n  builder_pg:\n    docker:\n      - image: omisegoimages/elixir-omg-builder:stable-20201207\n      - image: circleci/postgres:9.6-alpine\n        environment:\n          POSTGRES_USER: omisego_dev\n          POSTGRES_PASSWORD: omisego_dev\n          POSTGRES_DB: omisego_test\n    working_directory: ~/src\n\n  builder_pg_geth:\n    docker:\n      - image: omisegoimages/elixir-omg-tester:stable-20201207\n      - image: circleci/postgres:9.6-alpine\n        environment:\n          POSTGRES_USER: omisego_dev\n          POSTGRES_PASSWORD: omisego_dev\n          POSTGRES_DB: omisego_test\n    working_directory: ~/src\n\n  deployer:\n    docker:\n      - image: omisegoimages/elixir-omg-deploy:stable-20201207\n    working_directory: ~/src\n\ncommands:\n  add_rust_to_path:\n    description: \"Add path to PATH env var\"\n    steps:\n      - run:\n          name: Add rust to PATH env\n          command: echo 'export PATH=~/.cargo/bin/:$PATH' >> $BASH_ENV\n  install_rust:\n    description: \"Install Rust\"\n    steps:\n      - run:\n          name: Install Rust\n          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n      - add_rust_to_path\n\n  setup_elixir-omg_workspace:\n    description: \"Setup workspace\"\n    steps:\n      - attach_workspace:\n          name: Attach workspace\n          at: .\n\n  docker_login:\n    description: login to dockerhub for private repo access\n    steps:\n      - run: printf \"%s\\\\n\" \"$DOCKER_PASS\" | docker login -u \"$DOCKER_USER\" --password-stdin\n\n  make_docker_images:\n    description: Builds docker images\n    steps:\n      - run: make docker-watcher\n      - run: make docker-watcher_info\n\n  check_docker_status:\n    description: Installs elixir and checks if docker is healthy\n    steps:\n      - run:\n          name: Print docker states\n          command: |\n            docker image ls\n            docker-compose ps\n\n  setup_childchain:\n    description: \"Setups Child chain for watcher tests\"\n    steps:\n      # otherwise docker compose down errors with ERROR: Couldn't find env file\n      - run: touch localchain_contract_addresses.env\n      - run: docker-compose down\n      - run: sudo rm -rf data/\n      - run:\n          name: Setup data dir\n          command: |\n            [ -d data ] || mkdir data && chmod 777 data\n      - run:\n          name: Pull down snapshot\n          command: SNAPSHOT=SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_20 make init_test\n      - run: |\n          echo -e \"FEE_SPECS_FILE_PATH=/dev-artifacts/fee_specs.test.json\\n$(cat fees_setup.env)\" > fees_setup.env\n          echo \"FEE_SPECS_FILE_PATH=/dev-artifacts/fee_specs.test.json\" >> fees_setup.env\n          cat fees_setup.env\n      - run:\n          name: Standup Geth and Child Chain\n          command: docker-compose up geth childchain postgres\n          background: true\n      - run:\n          name: Has Childchain started?\n          command: |\n            attempt_counter=0\n            max_attempts=25\n            until $(curl --output /dev/null --silent --head --fail http://localhost:9656/alarm.get); do\n              if [ ${attempt_counter} -eq ${max_attempts} ];then\n                echo \"Max attempts reached\"\n                exit 1\n              fi\n              printf '.'\n              attempt_counter=$(($attempt_counter+1))\n              sleep 5\n            done\n\n  run_test_in_docker:\n    description: \"Quick test runs\"\n    parameters:\n      test_command:\n        type: string\n      test_name:\n        type: string\n    steps:\n      - run:\n          name: \"Docker run <<parameters.test_name>>\"\n          command: |\n            docker run --rm -it --network=chain_net -e DOCKER=true -e CHILD_CHAIN_URL=http://172.27.0.108:9656/ -e ETHEREUM_RPC_URL=http://172.27.0.108:80 -e DOCKER_GETH=true -e TEST_DATABASE_URL=postgresql://omisego_dev:omisego_dev@172.27.0.107:5432/omisego_test -e SHELL=/bin/sh -v $(pwd):/app --entrypoint /bin/sh omisegoimages/elixir-omg-builder:stable-20201207 -c \"cd /app && mix deps.get && <<parameters.test_command>>\"\n\n  install_elixir:\n    description: Installs elixir and checks if docker is healthy\n    steps:\n      - restore_cache:\n          key: v2-asdf-install\n      - run:\n          name: Install Erlang and Elixir\n          command: |\n            [ -d ~/.asdf-vm ] || git clone https://github.com/asdf-vm/asdf.git ~/.asdf-vm --branch v0.8.0\n            echo 'source ~/.asdf-vm/asdf.sh' >> $BASH_ENV\n            source $BASH_ENV\n            asdf plugin-add erlang || asdf plugin-update erlang\n            asdf plugin-add elixir || asdf plugin-update elixir\n            asdf plugin-add rust || asdf plugin-update rust\n            asdf install\n          no_output_timeout: 2400\n      - install_rust\n      - save_cache:\n          key: v2-asdf-install\n          paths:\n            - ~/.asdf\n            - ~/.asdf-vm\n      - run: make install-hex-rebar\n      - restore_cache:\n          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum \"mix.lock\" }}\n\n  install_deps:\n    description: Install linux dependencies\n    steps:\n      - run:\n          name: Install deps\n          command: |\n            set -e\n            sudo killall dpkg || true &&\n            sudo rm /var/lib/dpkg/lock || true &&\n            sudo rm /var/cache/apt/archives/lock || true &&\n            sudo dpkg --configure -a || true &&\n            sudo apt-get update &&\n            ./bin/setup\n          no_output_timeout: 2400\n  install_and_setup_gcloud:\n    description: Installs and sets up gcloud to fetch feefeed\n    steps:\n      - run: |\n          export LD_LIBRARY_PATH=/usr/local/lib\n          export CLOUDSDK_PYTHON=/usr/bin/python\n          wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-323.0.0-linux-x86_64.tar.gz -O gcloud-sdk.tar.gz\n            tar zxf gcloud-sdk.tar.gz google-cloud-sdk\n            mv google-cloud-sdk ~/.google-cloud-sdk\n            ~/.google-cloud-sdk/install.sh --quiet\n            echo $GCP_KEY_FILE | gcloud auth activate-service-account $GCP_SERVICE_EMAIL --key-file=-\n            gcloud --quiet config set project ${GCP_PROJECT}\n            gcloud --quiet config set compute/zone ${GCP_ZONE}\n            gcloud --quiet auth configure-docker\n\njobs:\n  barebuild:\n    executor: metal\n    environment:\n      MIX_ENV: test\n    steps:\n      - checkout\n      - run: make install-hex-rebar\n      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV\n      - run:\n          command: ./bin/setup\n          no_output_timeout: 2400\n      - run: make deps-elixir-omg\n      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test\n      - run: mix test\n      - run:\n          name: Integration Tests\n          command: |\n            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test --only integration  ` works\n            export SHELL=/bin/bash\n            mix test --only integration\n          no_output_timeout: 30m\n  barebuild_macos:\n    executor: metal_macos\n    environment:\n      MIX_ENV: test\n    steps:\n      - checkout\n      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV\n      - run: |\n          brew install postgres\n          initdb /usr/local/var/postgres/data\n          pg_ctl -D /usr/local/var/postgres/data -l /tmp/postgresql.log start\n          psql template1 \\<<EOF\n          CREATE USER omisego_dev WITH CREATEDB ENCRYPTED PASSWORD 'omisego_dev';\n          CREATE DATABASE omisego_dev OWNER 'omisego_dev';\n          EOF\n      - run: |\n          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.4\n          echo -e '\\n. $HOME/.asdf/asdf.sh' >> ~/.bash_profile\n          echo -e '\\n. $HOME/.asdf/completions/asdf.bash' >> ~/.bash_profile\n          source ~/.bash_profile\n          asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git\n          asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git\n          asdf plugin-add rust || asdf plugin-update rust\n          asdf install\n      - run: make init_test\n      - install_rust\n      - run:\n          command: ./bin/setup\n          no_output_timeout: 2400\n      - run: make deps-elixir-omg\n      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test\n      - run: mix test\n  build:\n    executor: builder\n    environment:\n      MIX_ENV: test\n    steps:\n      - checkout\n      - restore_cache:\n          key: v1-rocksdb-cache-{{ checksum \"mix.lock\" }}\n      - run: make init_test\n      - run: make deps-elixir-omg\n      - run: ERLANG_ROCKSDB_BUILDOPTS='-j 2' make build-test\n      - save_cache:\n          key: v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n          paths: \"_build_docker\"\n      - save_cache:\n          key: v1-rocksdb-cache-{{ checksum \"mix.lock\" }}\n          paths:\n            - \"deps_docker/\"\n            - \"deps_docker/rocksdb\"\n            - \"_build_docker/test/lib/rocksdb/\"\n            - \"_build_docker/test/dev/rocksdb/\"\n            - \"deps/\"\n            - \"_build/test/lib/rocksdb/\"\n            - \"_build/test/dev/rocksdb/\"\n      - persist_to_workspace:\n          name: Persist workspace\n          root: ~/src\n          paths:\n            - .circleci\n            - dialyzer.ignore-warnings\n            - .formatter.exs\n            - _build_docker\n            - .credo.exs\n            - apps\n            - bin\n            - config\n            - deps_docker\n            - doc\n            - mix.exs\n            - mix.lock\n            - deploy_and_populate.sh\n            - launcher.py\n            - docker-compose.yml\n            - rel/\n            - VERSION\n            - .git\n            - Makefile\n            - priv\n            - data\n            - snapshots.env\n            - snapshot_reorg.env\n            - nginx.conf\n            - contract_addresses_template.env\n            - localchain_contract_addresses.env\n\n\n  audit_deps:\n    executor: builder\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - run: mix deps.audit\n\n  lint:\n    executor: builder\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - run: make install-hex-rebar\n      - run: mix do compile --warnings-as-errors --force, credo --ignore-checks Credo.Check.Readability.SinglePipe, format --check-formatted --dry-run\n      - run:\n          command: |\n            export SHELL=/bin/bash\n            set +eo pipefail\n            _counter=$(mix credo --only Credo.Check.Readability.SinglePipe | grep -c \"Use a function call when a pipeline is only one function long\")\n            echo \"Current Credo.Check.Readability.SinglePipe occurrences:\"\n            echo $_counter\n            if [ $_counter -gt 273 ]; then\n              echo \"Have you been naughty or nice? Find out if Santa knows.\"\n              exit 1\n            fi\n\n  sobelow:\n    executor: builder_pg\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - run: mix archive.install hex sobelow --force\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r .\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_bus\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_db\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_eth\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_status\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_utils\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher_info\n      - run: mix sobelow --exit --skip --ignore Config.HTTPS -r apps/omg_watcher_rpc --router apps/omg_watcher_rpc/lib/web/router.ex\n\n  watcher_coveralls_and_integration_tests:\n    executor: builder_pg_geth\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - run:\n          name: Integration Tests & Coveralls Part Watcher\n          command: |\n            # Don't submit coverage report for forks, but let the build succeed\n            export SHELL=/bin/bash\n            if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n              mix coveralls.html --parallel --umbrella --include watcher --exclude watcher_info  --exclude common --exclude test\n            else\n              mix coveralls.circle --parallel --umbrella --include watcher --exclude watcher_info  --exclude common --exclude test   ||\n                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status\n                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && exit $retval)\n            fi\n\n  watcher_mix_based_childchain:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      MIX_ENV: test\n    steps:\n      - checkout\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-watcher_mix_based_childchain-{{ checksum \"mix.lock\" }}-{{ .Branch }}\n      - run: rm -rf _build_docker/test/lib/omg*\n      - run:\n          name: Setup dirs\n          command: |\n            [ -d _build_docker ] || mkdir _build_docker && sudo chmod -R 777 _build_docker\n      - run:\n          name: Setup dirs deps_docker\n          command: |\n            [ -d deps_docker ] || mkdir deps_docker &&  sudo chmod -R 777 deps_docker\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/invalid_exit_1_test.exs --include mix_based_child_chain\"\n            test_name: \"invalid_exit_1_test.exs\"\n      - save_cache:\n          key: v2-mix-cache-test-compile-watcher_mix_based_childchain-{{ checksum \"mix.lock\" }}-{{ .Branch }}\n          paths:\n            - deps_docker\n            - _build_docker\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/in_flight_exit_test_3_test.exs --include mix_based_child_chain\"\n            test_name: \"in_flight_exit_test_3_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/in_flight_exit_test_2_test.exs --include mix_based_child_chain\"\n            test_name: \"in_flight_exit_test_2_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/in_flight_exit_test_1_test.exs --include mix_based_child_chain\"\n            test_name: \"in_flight_exit_test_1_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/in_flight_exit_test_4_test.exs --include mix_based_child_chain\"\n            test_name: \"in_flight_exit_test_4_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/in_flight_exit_test.exs --include mix_based_child_chain\"\n            test_name: \"in_flight_exit_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/invalid_exit_2_test.exs --include mix_based_child_chain\"\n            test_name: \"invalid_exit_2_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/block_getter_1_test.exs --include mix_based_child_chain\"\n            test_name: \"block_getter_1_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/block_getter_2_test.exs --include mix_based_child_chain\"\n            test_name: \"block_getter_2_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/block_getter_3_test.exs --include mix_based_child_chain\"\n            test_name: \"block_getter_3_test.exs\"\n      - setup_childchain\n      - run_test_in_docker:\n            test_command: \"mix test test/omg_watcher/integration/block_getter_4_test.exs --include mix_based_child_chain\"\n            test_name: \"block_getter_4_test.exs\"\n\n  watcher_info_coveralls_and_integration_tests:\n    executor: builder_pg_geth\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - run:\n          name: Integration Tests & Coveralls Part Watcher\n          command: |\n            # Don't submit coverage report for forks, but let the build succeed\n            export SHELL=/bin/bash\n            if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n              mix coveralls.html --parallel --umbrella --include watcher_info --exclude watcher  --exclude common --exclude test\n            else\n              mix coveralls.circle --parallel --umbrella --include watcher_info --exclude watche  --exclude common --exclude test   ||\n                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status\n                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && exit $retval)\n            fi\n\n  common_coveralls_and_integration_tests:\n    executor: builder_pg_geth\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - run:\n          name: Integration Tests & Coveralls Part Common\n          command: |\n            # Don't submit coverage report for forks, but let the build succeed\n            export SHELL=/bin/bash\n            if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n              mix coveralls.html --parallel --umbrella --include common --exclude watcher --exclude watcher_info  --exclude test\n            else\n              mix coveralls.circle --parallel --umbrella --include common --exclude watcher --exclude watcher_info  --exclude test   ||\n                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status\n                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && exit $retval)\n            fi\n\n  test:\n    executor: builder_pg\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - run:\n          name: Test\n          command: |\n            # Don't submit coverage report for forks, but let the build succeed\n            export SHELL=/bin/bash\n            if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n              mix coveralls.html --parallel --umbrella   --exclude common --exclude watcher --exclude watcher_info\n            else\n              mix coveralls.circle --parallel --umbrella   --exclude common --exclude watcher --exclude watcher_info  ||\n                # if mix failed, then coveralls_report won't run, so signal done here and return original exit status\n                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && exit $retval)\n            fi\n\n  property_tests:\n    executor: builder_pg_geth\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - run:\n          name: Property Test\n          command: |\n            export SHELL=/bin/bash\n            # no coverage calculation, coverage is on the other tests\n            mix test --only property\n\n  integration_tests:\n    executor: builder_pg_geth\n    environment:\n      MIX_ENV: test\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v2-mix-cache-test-compile-{{ checksum \"mix.lock\" }}-{{ .Branch }}-{{ .Revision }}\n      - run:\n          name: Compile\n          command: mix compile\n      - install_rust\n      - run:\n          name: Integration Tests\n          command: |\n            # Slow, serial integration test, run nightly. Here to make sure the standard `mix test   --only integration` works\n            export SHELL=/bin/bash\n            mix test --only integration\n\n  dialyzer:\n    executor: builder_pg\n    steps:\n      - setup_elixir-omg_workspace\n      - restore_cache:\n          keys:\n            - v3-plt-cache-{{ \".tool-versions\" }}-{{ checksum \"mix.lock\" }}\n            - v3-plt-cache-{{ \".tool-versions\" }}-{{ checksum \"mix.exs\" }}\n            - v3-plt-cache-{{ \".tool-versions\" }}\n      - run:\n          name: Unpack PLT cache\n          command: |\n            mkdir -p _build_docker/test\n            cp plts/dialyxir*.plt _build_docker/test/ || true\n            mkdir -p ~/.mix\n            cp plts/dialyxir*.plt ~/.mix/ || true\n      - run: mix dialyzer --plt\n      - run:\n          name: Pack PLT cache\n          command: |\n            mkdir -p plts\n            cp _build_docker/test/dialyxir*.plt plts/\n            cp ~/.mix/dialyxir*.plt plts/\n      - save_cache:\n          key: v3-plt-cache-{{ \".tool-versions\" }}-{{ checksum \"mix.lock\" }}\n          paths:\n            - plts\n      - save_cache:\n          key: v3-plt-cache-{{ \".tool-versions\" }}-{{ checksum \"mix.exs\" }}\n          paths:\n            - plts\n      - save_cache:\n          key: v3-plt-cache-{{ \".tool-versions\" }}\n          paths:\n            - plts\n      - run: mix dialyzer --format short\n\n  test_docker_compose_release:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      SNAPSHOT: SNAPSHOT_MIX_EXIT_PERIOD_SECONDS_120\n      LD_LIBRARY_PATH: /usr/local/lib\n      CLOUDSDK_PYTHON: /usr/bin/python\n      CHILD_CHAIN_URL: \"http://localhost:9656\"\n      FEE_CLAIMER_ADDRESS: \"0x3b9f4c1dd26e0be593373b1d36cee2008cbeb837\"\n    parallelism: 5\n    steps:\n      - checkout\n      - run:\n          name: \"Pull Submodules\"\n          command: |\n            git submodule init\n            git submodule update --remote\n      - run:\n          name: Setup data dir\n          command: |\n            [ -d data ] || mkdir data && chmod 777 data\n      - docker_login\n      - make_docker_images\n      - install_and_setup_gcloud\n      - run:\n          name: Start daemon services\n          command: make cabbage-start-services\n      - run:\n          name: Log daemon services\n          command: make cabbage-logs\n          background: true\n      - check_docker_status\n      - install_elixir\n      - run: sh .circleci/status.sh\n      - run:\n          name: Run specs\n          command: |\n            cd priv/cabbage\n            make install\n            make generate_api_code\n            mix deps.get\n      - run:\n          name: Run specs\n          working_directory: ~/project/priv/cabbage\n          environment:\n            MIX_ENV: test\n          command: |\n            mix compile\n      - run:\n          name: Run specs\n          working_directory: ~/project/priv/cabbage\n          command: |\n            TESTFILES=$(circleci tests glob \"apps/itest/test/itest/*_test.exs\" | circleci tests split --split-by=timings --show-counts)\n            echo ${TESTFILES}\n            mix test ${TESTFILES} --trace\n      - store_test_results:\n          path: ~/project/priv/cabbage/_build/test/lib/itest/\n\n  test_docker_compose_performance:\n    description: \"These are not actually performance tests, we're checking if the scripts work\"\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      PERF_IMAGE_NAME: \"omisego/perf:latest\"\n      STATIX_TAG: \"env:perf_circleci\"\n      LD_LIBRARY_PATH: /usr/local/lib\n      CLOUDSDK_PYTHON: /usr/bin/python\n    steps:\n      - checkout\n      - run:\n          name: Setup data dir\n          command: |\n            [ -d data ] || mkdir data && chmod 777 data\n      - docker_login\n      - make_docker_images\n      - install_and_setup_gcloud\n      - run:\n          name: Build perf docker image\n          command: make docker-perf IMAGE_NAME=$PERF_IMAGE_NAME\n      - install_elixir\n      - run:\n          name: Start daemon services\n          command: |\n            cd priv/perf\n            make start-services\n      - run:\n          name: docker services logs\n          background: true\n          command: |\n            cd priv/perf\n            make log-services\n      - run: sh .circleci/status.sh\n      - run:\n          name: Run load test\n          command: |\n            cd priv/perf\n            make init\n            export $(cat ../../localchain_contract_addresses.env | xargs)\n            make test\n      - run:\n          name: Show help information\n          command: docker run -it $PERF_IMAGE_NAME mix run -e \"LoadTest.TestRunner.run()\" -- help\n      - run:\n          name: Run perf smoke test (deposits)\n          command: |\n            docker run -it --env-file ./localchain_contract_addresses.env -e FEE_AMOUNT=1 --env DD_API_KEY --env DD_APP_KEY --env STATIX_TAG --network host $PERF_IMAGE_NAME mix run -e \"LoadTest.TestRunner.run()\" -- \"deposits\" 1 200\n      - run:\n          name: Run perf smoke test (transactions)\n          command: |\n            docker run -it --env-file ./localchain_contract_addresses.env -e FEE_AMOUNT=1 --env DD_API_KEY --env DD_APP_KEY --env STATIX_TAG --network host $PERF_IMAGE_NAME mix run -e \"LoadTest.TestRunner.run()\" -- \"transactions\" 1 200\n      - run:\n          name: (Perf) Format generated code and check for warnings\n          command: |\n            cd priv/perf\n            # run format ONLY on formatted code so that it cleans up quoted atoms because\n            # we cannot exclude folders to --warnings-as-errors\n            mix format apps/*_api/lib/*_api/model/*.ex\n            export $(cat ../../localchain_contract_addresses.env | xargs)\n            make format-code-check-warnings\n      - save_cache:\n          key: v2-mix-specs-cache-{{ .Branch }}-{{ checksum \"mix.lock\" }}\n          paths:\n            - \"priv/perf/deps\"\n\n      - run:\n          name: (Perf) Credo and formatting\n          command: |\n            cd priv/perf\n            mix do credo, format --check-formatted --dry-run\n\n  test_docker_compose_reorg:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      REORG: true\n      LD_LIBRARY_PATH: /usr/local/lib\n      CLOUDSDK_PYTHON: /usr/bin/python\n    steps:\n      - checkout\n      - run:\n          name: \"Pull Submodules\"\n          command: |\n            git submodule init\n            git submodule update --remote\n      - run:\n          name: Setup data dir\n          command: |\n            [ -d data1 ] || mkdir data1 && chmod 777 data1\n            [ -d data2 ] || mkdir data2 && chmod 777 data2\n            [ -d data ] || mkdir data && chmod 777 data\n      - docker_login\n      - make_docker_images\n      - install_and_setup_gcloud\n      - run:\n          name: Start daemon services\n          command: |\n            make init_test_reorg\n            cp ./localchain_contract_addresses.env ./priv/cabbage/apps/itest/localchain_contract_addresses.env\n            docker-compose -f docker-compose.yml -f docker-compose.reorg.yml -f docker-compose.specs.yml up -d || (START_RESULT=$?; docker-compose logs; exit $START_RESULT;)\n      - run:\n          name: Log daemon services\n          command: make cabbage-logs-reorg\n          background: true\n      - check_docker_status\n      - install_elixir\n      - run: sh .circleci/status.sh\n      - run:\n          name: Print watcher logs\n          command: make cabbage-reorg-watcher-logs\n          background: true\n      - run:\n          name: Print watcher_info logs\n          command: make cabbage-reorg-watcher_info-logs\n          background: true\n      - run:\n          name: Print childchain logs\n          command: make cabbage-reorg-childchain-logs\n          background: true\n      - run:\n          name: Print geth logs\n          command: make cabbage-reorg-geth-logs\n          background: true\n      - run:\n          name: Print reorg logs\n          command: make cabbage-reorgs-logs\n          background: true\n      - run:\n          name: Run specs\n          command: |\n            cd priv/cabbage\n            make install\n            make generate_api_code\n            mix deps.get\n            mix test --only deposit --trace\n          no_output_timeout: 30m\n\n  test_barebone_release:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      TERM: xterm-256color\n      LD_LIBRARY_PATH: /usr/local/lib\n      CLOUDSDK_PYTHON: /usr/bin/python\n    steps:\n      - checkout\n      - run:\n          name: \"Pull Submodules\"\n          command: |\n            git submodule init\n            git submodule update --remote\n      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV\n      - install_and_setup_gcloud\n      - docker_login\n      - run:\n          name: Start geth, postgres, feefeed and pull in blockchain snapshot\n          command: make start-services\n          background: true\n      - run: echo 'export PATH=~/.cargo/bin:$PATH' >> $BASH_ENV\n      - install_elixir\n      - install_deps\n      - run: make install-hex-rebar\n      - restore_cache:\n          key: v1-dev-release-cache-{{ checksum \"mix.lock\" }}\n      - run:\n          name: Compile\n          command: |\n            set -e\n            make deps-elixir-omg\n            mix compile\n          no_output_timeout: 2400\n      - save_cache:\n          key: v1-dev-release-cache-{{ checksum \"mix.lock\" }}\n          paths:\n            - \"deps_docker/\"\n            - \"deps/\"\n            - \"_build/dev/\"\n            - \"_build/dev/\"\n      - run:\n          name: Run Watcher\n          command: |\n            set -e\n            make start-watcher OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone\n          background: true\n          no_output_timeout: 2400\n      - run:\n          name: Run Watcher Info\n          command: |\n            set -e\n            make start-watcher_info OVERRIDING_START=start_iex OVERRIDING_VARIABLES=./bin/variables_test_barebone\n          background: true\n          no_output_timeout: 2400\n      - run:\n          name: Print docker and process states\n          command: |\n            docker ps\n            ps axww | grep watcher\n            ps axww | grep watcher_info\n            ps axww | grep child_chain\n      - run:\n          name: Has Watcher started?\n          command: |\n            attempt_counter=0\n            max_attempts=25\n            until $(curl --output /dev/null --silent --head --fail http://localhost:7434/alarm.get); do\n              if [ ${attempt_counter} -eq ${max_attempts} ];then\n                echo \"Max attempts reached\"\n                exit 1\n              fi\n              printf '.'\n              attempt_counter=$(($attempt_counter+1))\n              sleep 5\n            done\n      - run:\n          name: Has Watcher Info started?\n          command: |\n            attempt_counter=0\n            max_attempts=25\n            until $(curl --output /dev/null --silent --head --fail http://localhost:7534/alarm.get); do\n              if [ ${attempt_counter} -eq ${max_attempts} ];then\n                echo \"Max attempts reached\"\n                exit 1\n              fi\n              printf '.'\n              attempt_counter=$(($attempt_counter+1))\n              sleep 5\n            done\n\n\n  publish_watcher:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      WATCHER_IMAGE_NAME: \"omisego/watcher\"\n    steps:\n      - checkout\n      - run: make docker-watcher WATCHER_IMAGE_NAME=$WATCHER_IMAGE_NAME\n      - run:\n          name: \"cp release\"\n          command: |\n            mkdir current_release/\n            cp _build_docker/prod/watcher-$(git describe --tags).tar.gz current_release/\n            md5sum current_release/watcher-$(git describe --tags).tar.gz | awk '{print $1}' >> current_release/md5\n      - store_artifacts:\n          path: current_release/\n      - run: IMAGE_NAME=$WATCHER_IMAGE_NAME sh .circleci/ci_publish.sh\n\n  publish_perf:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      PERF_IMAGE_NAME: \"omisego/perf\"\n    steps:\n      - checkout\n      - run: make docker-perf IMAGE_NAME=$PERF_IMAGE_NAME\n      - run: IMAGE_NAME=$PERF_IMAGE_NAME sh .circleci/ci_publish.sh\n\n  publish_watcher_info:\n    machine:\n      image: ubuntu-2004:202010-01\n    environment:\n      WATCHER_INFO_IMAGE_NAME: \"omisego/watcher_info\"\n    steps:\n      - checkout\n      - run: make docker-watcher_info WATCHER_INFO_IMAGE_NAME=$WATCHER_INFO_IMAGE_NAME\n      - run:\n          name: \"cp release\"\n          command: |\n            mkdir current_release/\n            cp _build_docker/prod/watcher_info-$(git describe --tags).tar.gz current_release/\n            md5sum current_release/watcher_info-$(git describe --tags).tar.gz | awk '{print $1}' >> current_release/md5\n      - store_artifacts:\n          path: current_release/\n      - run: IMAGE_NAME=$WATCHER_INFO_IMAGE_NAME sh .circleci/ci_publish.sh\n\n  increase_chart_version_watcher_master:\n    docker:\n      - image: cimg/base:2020.01\n    environment:\n      CHART_NAME: watcher\n      HELM_CHART_REPO: helm-development\n      UPDATE_DEV: true\n    steps:\n      - checkout\n      - run: APP_VERSION=\"$(echo \"$CIRCLE_SHA1\" | head -c 7)\" sh .circleci/ci_increase_chart_version.sh\n\n  increase_chart_version_watcher_info_master:\n    docker:\n      - image: cimg/base:2020.01\n    environment:\n      CHART_NAME: watcher-info\n      HELM_CHART_REPO: helm-development\n      UPDATE_DEV: true\n    steps:\n      - checkout\n      - run: APP_VERSION=\"$(echo \"$CIRCLE_SHA1\" | head -c 7)\" sh .circleci/ci_increase_chart_version.sh\n\n  increase_chart_version_watcher_release:\n    docker:\n      - image: cimg/base:2020.01\n    environment:\n      CHART_NAME: watcher\n      HELM_CHART_REPO: helm-development\n      UPDATE_DEV: false\n    steps:\n      - checkout\n      - run: APP_VERSION=\"${CIRCLE_TAG#*v}\" sh .circleci/ci_increase_chart_version.sh\n\n  increase_chart_version_watcher_info_release:\n    docker:\n      - image: cimg/base:2020.01\n    environment:\n      CHART_NAME: watcher-info\n      HELM_CHART_REPO: helm-development\n      UPDATE_DEV: false\n    steps:\n      - checkout\n      - run: APP_VERSION=\"${CIRCLE_TAG#*v}\" sh .circleci/ci_increase_chart_version.sh\n\n  release:\n    docker:\n      - image: node:15.2.1\n    steps:\n      - checkout\n      - run: npx -y semantic-release@17.2.3\n\n  coveralls_report:\n    docker:\n      - image: omisegoimages/elixir-omg-circleci:v1.8-20190129-02\n        environment:\n          MIX_ENV: test\n    steps:\n      - run:\n          name: Tell coveralls.io build is done\n          command: curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\"\n\n  notify_services:\n    executor: builder_pg\n    steps:\n      - run:\n          name: Send development deployment markers\n          command: |\n            curl -X POST -H 'Content-type: application/json' -d '{\"title\": \"Starting Service\", \"text\": \"Starting with git SHA '\"$CIRCLE_SHA1\"'\", \"alert_type\": \"info\" }' 'https://app.datadoghq.com/api/v1/events?api_key='\"$DD_API_KEY\"''\n            curl -X POST -H 'Content-type: application/json' -H 'Authorization: Bearer '\"$SENTRY_TOKEN\"'' -d '{\"projects\": [\"elixir-omg\"], \"ref\": \"'\"$CIRCLE_SHA1\"'\", \"version\": \"Watcher-ChildChain-'\"$CIRCLE_SHA1\"'\"}' 'https://sentry.io/api/0/organizations/omisego/releases/'\n            GH_URL=\"https://github.com/omisego/elixir-omg/tree/${CIRCLE_BRANCH}\"\n            CIRCLE_URL=\"https://circleci.com/gh/omisego/elixir-omg/${CIRCLE_BUILD_NUM}\"\n            WORKFLOW_URL=\"https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\"\n            MESSAGE=\"omisego/elixir-omg branch ${CIRCLE_BRANCH} has deployed a new version\"\n            RICH_MESSAGE=\"*omisego/elixir-omg* branch *${CIRCLE_BRANCH}* has been deployed\"\n            curl -X POST -H 'Content-Type: application/json' --data \"{ \\\n              \\\"attachments\\\": [ \\\n                { \\\n                  \\\"fallback\\\": \\\"${MESSAGE}\\\", \\\n                  \\\"text\\\": \\\"Deployment: ${RICH_MESSAGE}\\\", \\\n                  \\\"mrkdwn\\\": true, \\\n                  \\\"color\\\": \\\"#2ced49\\\", \\\n                  \\\"fields\\\": [ \\\n                    { \\\n                      \\\"title\\\": \\\"Git SHA\\\", \\\n                      \\\"value\\\": \\\"<$GH_URL|$CIRCLE_SHA1>\\\", \\\n                      \\\"short\\\": true \\\n                    }, { \\\n                      \\\"title\\\": \\\"Branch\\\", \\\n                      \\\"value\\\": \\\"<$GH_URL|$CIRCLE_BRANCH>\\\", \\\n                      \\\"short\\\": true \\\n                    }, { \\\n                      \\\"title\\\": \\\"Build\\\", \\\n                      \\\"value\\\": \\\"<$CIRCLE_URL|$CIRCLE_BUILD_NUM>\\\", \\\n                      \\\"short\\\": true \\\n                    } \\\n                  ] \\\n                } \\\n              ] \\\n            }\" ${SLACK_WEBHOOK}\n\nworkflows:\n  version: 2\n  nightly:\n    triggers:\n      - schedule:\n          cron: \"30 8 * * 1-5\"\n          filters:\n            branches:\n              only:\n                - master\n    jobs:\n      - build\n      - integration_tests:\n          requires: [build]\n      - barebuild_macos\n      #- test_barebone_release\n  build-test-deploy:\n    jobs:\n      - build:\n          filters: &all_branches_and_tags\n            branches:\n              only: /.+/\n            tags:\n              only: /.+/\n      # - test_barebone_release:\n      #     filters: *all_branches_and_tags\n      - notify_services:\n          requires:\n            - increase_chart_version_watcher_master\n            - increase_chart_version_watcher_info_master\n          filters:\n            branches:\n              only:\n                - master\n      - coveralls_report:\n          requires:\n            - watcher_coveralls_and_integration_tests\n            - watcher_info_coveralls_and_integration_tests\n            - common_coveralls_and_integration_tests\n            - test\n      - watcher_coveralls_and_integration_tests:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - watcher_info_coveralls_and_integration_tests:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - common_coveralls_and_integration_tests:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - test_docker_compose_release:\n          filters: *all_branches_and_tags\n      # - test_docker_compose_performance:\n      #     filters: *all_branches_and_tags\n      - test_docker_compose_reorg:\n          filters:\n            branches:\n              only:\n                - master\n                - master-v2\n      - audit_deps:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - lint:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - sobelow:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - dialyzer:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - test:\n          requires: [build]\n          filters: *all_branches_and_tags\n      - property_tests:\n          requires: [build]\n          filters: &master_and_version_branches_and_all_tags\n            branches:\n              only:\n                - master\n                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)\n                - /^v[0-9]+\\.[0-9]+/\n            tags:\n              only:\n                - /.+/\n      - watcher_mix_based_childchain:\n          filters: *all_branches_and_tags\n      - publish_watcher:\n          requires:\n            [\n             # test_barebone_release,\n              test_docker_compose_release,\n              watcher_coveralls_and_integration_tests,\n              watcher_info_coveralls_and_integration_tests,\n              common_coveralls_and_integration_tests,\n              test,\n           #   property_tests,\n              dialyzer,\n              lint,\n              audit_deps\n            ]\n          filters: &master_and_version_branches_and_all_tags\n            branches:\n              only:\n                - master\n                # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)\n                - /^v[0-9]+\\.[0-9]+/\n            tags:\n              only:\n                - /.+/\n      - publish_watcher_info:\n          requires:\n            [\n             # test_barebone_release,\n              test_docker_compose_release,\n              watcher_coveralls_and_integration_tests,\n              watcher_info_coveralls_and_integration_tests,\n              common_coveralls_and_integration_tests,\n              test,\n              property_tests,\n              dialyzer,\n              lint,\n              audit_deps\n            ]\n          filters: *master_and_version_branches_and_all_tags\n\n      # - publish_perf:\n      #     requires: [test_docker_compose_performance]\n      #     filters:\n      #       branches:\n      #         only:\n      #           - master\n      #           # vMAJOR.MINOR (e.g. v0.1, v0.2, v1.0, v2.1, etc.)\n      #           - /^v[0-9]+\\.[0-9]+/\n      #       tags:\n      #         only:\n      #           - /.+/\n      # Increase chart version for master, this will end up trigger deployment on dev\n      - increase_chart_version_watcher_master:\n          requires: [publish_watcher, publish_watcher_info]\n          filters:\n            branches:\n              only:\n                - master\n      - increase_chart_version_watcher_info_master:\n          requires: [publish_watcher, publish_watcher_info]\n          filters:\n            branches:\n              only:\n                - master\n      # Increase chart version for new release\n      - increase_chart_version_watcher_release:\n          requires: [publish_watcher, publish_watcher_info]\n          filters: &only_release_tag\n            branches:\n              ignore: /.*/\n            tags:\n              only:\n                # eg. v1.0.3-pre.0, v1.0.3, ...\n                - /^v[0-9]+\\.[0-9]+\\.[0-9]+.*/\n      - increase_chart_version_watcher_info_release:\n          requires: [publish_watcher, publish_watcher_info]\n          filters: *only_release_tag\n      - release:\n          requires: [\n           # test_barebone_release,\n            test_docker_compose_release,\n            watcher_coveralls_and_integration_tests,\n            watcher_info_coveralls_and_integration_tests,\n            common_coveralls_and_integration_tests,\n            test,\n            property_tests,\n            dialyzer,\n            lint,\n            audit_deps\n          ]\n          context:\n          - shared-semantic-release\n          filters:\n            branches:\n              only: /^master$/\n            tags:\n              ignore: /.*/\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".formatter.exs",
            ".gitignore",
            "Dockerfile",
            "Makefile",
            "README.md",
            "mix.exs",
            "mix.lock"
        ],
        "folders": [
            "apps",
            "config",
            "scripts"
        ]
    }
}