{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"fightpandemics\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"description\": \"Help to to fight global pandemics\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon --inspect=0.0.0.0:9229 -L server.js\",\n    \"test\": \"jest\",\n    \"lint\": \"eslint . --fix\",\n    \"import-posts\": \"node ./scripts/import-posts\",\n    \"install-docker\": \"docker-compose run backend-service npm install\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.js\": [\n      \"eslint\"\n    ]\n  },\n  \"keywords\": [\n    \"fight\",\n    \"pandemics\"\n  ],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@googlemaps/google-maps-services-js\": \"^3.0.0\",\n    \"@sentry/node\": \"^5.15.5\",\n    \"airtable\": \"^0.8.1\",\n    \"aws-sdk\": \"^2.751.0\",\n    \"axios\": \"^0.21.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^8.2.0\",\n    \"env-schema\": \"^1.1.0\",\n    \"fastify\": \"^2.15.1\",\n    \"fastify-authz-jwks\": \"^1.0.11\",\n    \"fastify-cookie\": \"^3.6.1\",\n    \"fastify-file-upload\": \"^2.1.0\",\n    \"fastify-jwt\": \"^1.3.1\",\n    \"fastify-oas\": \"^2.7.0\",\n    \"fastify-plugin\": \"^1.6.1\",\n    \"fastify-sensible\": \"^2.1.1\",\n    \"fluent-schema\": \"^0.10.0\",\n    \"http-errors\": \"^1.7.3\",\n    \"moment\": \"2.25.3\",\n    \"mongoose\": \"^5.9.13\",\n    \"mongoose-unique-validator\": \"^2.0.3\",\n    \"node-cache\": \"^5.1.0\",\n    \"pino-papertrail\": \"^2.0.0\",\n    \"socket.io\": \"^2.4.0\",\n    \"socket.io-cookie-parser\": \"^1.0.0\",\n    \"socket.io-redis\": \"5.4.0\",\n    \"tlds\": \"^1.207.0\",\n    \"validator\": \"^13.1.17\"\n  },\n  \"devDependencies\": {\n    \"babel-eslint\": \"^10.1.0\",\n    \"eslint\": \"^6.8.0\",\n    \"eslint-config-airbnb-base\": \"^14.1.0\",\n    \"eslint-config-prettier\": \"^6.10.1\",\n    \"eslint-plugin-import\": \"^2.20.2\",\n    \"eslint-plugin-prettier\": \"^3.1.2\",\n    \"eslint-utils\": \"^2.0.0\",\n    \"husky\": \"^4.2.3\",\n    \"lint-staged\": \"^10.1.1\",\n    \"mocha\": \"^7.2.0\",\n    \"nock\": \"^12.0.3\",\n    \"nodemon\": \"^2.0.2\",\n    \"pino-pretty\": \"^4.1.0\",\n    \"prettier\": \"^2.0.2\",\n    \"supertest\": \"^4.0.2\"\n  }\n}\n"
        },
        "database": "MongoDB",
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\nservices:\n  mongo:\n    image: mongo\n    container_name: mongo\n    environment:\n      MONGO_INITDB_DATABASE: fightpandemics\n    restart: always\n    ports:\n      - \"27017:27017\"\n    networks:\n      - fp_network\n\n  mongo-express:\n    image: mongo-express\n    container_name: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    networks:\n      - fp_network\n    depends_on:\n      - mongo\n\n  backend-service:\n    build:\n      context: backend\n      dockerfile: Dockerfile.dev\n      args:\n        NODE_ENV: dev\n    container_name: backend-service\n    restart: always\n    ports:\n      - \"8000:8000\"\n      - \"9229:9229\"\n    volumes:\n      - ./backend:/app\n      - /app/node_modules/\n    working_dir: /app\n    depends_on:\n      - mongo\n      - redis\n    networks:\n      - fp_network\n\n  client:\n    build:\n      context: client\n      dockerfile: Dockerfile.dev\n    restart: always\n    container_name: client\n    environment:\n      BACKEND_SERVICE_URL: http://backend-service:8000\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./client:/app\n      - /app/node_modules/\n    working_dir: /app\n    stdin_open: true\n    tty: true\n    networks:\n      - fp_network\n\n  cypress-e2e-tests:\n    build:\n      context: cypresse2e\n      dockerfile: Dockerfile\n    container_name: cypress-e2e-tests\n    depends_on:\n      - client\n    environment:\n      - CYPRESS_baseUrl=http://client:3000\n    entrypoint: \"\"\n    command:\n      [\n        \"dockerize\",\n        \"-wait\",\n        \"http://client:3000\",\n        \"-timeout\",\n        \"300s\",\n        \"bash\",\n        \"-c\",\n        \"npm run test\",\n      ]\n    volumes:\n      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/\n      - ./cypresse2e/cypress:/app/cypress\n      - ./cypresse2e/cypress.json:/app/cypress.json\n    working_dir: /app\n    networks:\n      - fp_network\n\n  cypress-e2e-report:\n    build:\n      context: cypresse2e\n      dockerfile: Dockerfile\n    container_name: cypress-e2e-report\n    entrypoint: \"\"\n    command: [\"bash\", \"-c\", \"npm run report\"]\n    volumes:\n      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/\n      - ./cypresse2e/cypress:/app/cypress\n      - ./cypresse2e/cypress.json:/app/cypress.json\n    working_dir: /app\n\n  mocha-integration:\n    build:\n      context: mocha\n      dockerfile: Dockerfile\n    container_name: mocha-integration\n    depends_on:\n      - client\n    environment:\n      MOCHA_URL: http://backend-service:8000\n    command: dockerize -wait http://client:3000 -timeout 300s npm run test\n    volumes:\n      - ./mocha/mochawesome-report/:/app/mochawesome-report/\n      - ./mocha/test/:/app/test/\n      - ./mocha/utils/:/app/utils/\n    working_dir: /app\n    networks:\n      - fp_network\n\n  awscli:\n    image: mesosphere/aws-cli\n    environment:\n      AWS_ACCESS_KEY_ID: dummy_id\n      AWS_SECRET_ACCESS_KEY: dummy_key\n      AWS_DEFAULT_REGION: us-east-1\n    networks:\n      - fp_network\n\n  localstack:\n    image: localstack/localstack\n    container_name: localstack\n    ports:\n      - \"4566:4566\"\n    environment:\n      SERVICES: s3\n      HOSTNAME: localstack\n      DOCKER_HOST: unix:///var/run/docker.sock\n      DATA_DIR: /tmp/localstack/data\n      DEBUG: 1\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./localstack:/docker-entrypoint-initaws.d\n    networks:\n      - fp_network\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    restart: always\n    ports:\n      - \"26379:6379\"\n    volumes:\n      - redis-volume:/data\n    networks:\n      - fp_network\n\nnetworks:\n  fp_network:\n    driver: bridge\n\nvolumes:\n  redis-volume:\n",
            "backend/Dockerfile": "FROM node:12-alpine as builder\nARG GIT_COMMIT\nARG NODE_ENV\nWORKDIR '/app'\nCOPY package.json package-lock.json ./\nRUN npm ci --production\nCOPY . .\nRUN echo \"{\\\"version\\\": \\\"$GIT_COMMIT\\\"}\" > version.json\n\nFROM builder\nUSER node\nCOPY --from=builder --chown=node:node /app .\nCMD [\"npm\", \"start\"]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".env.example_docker",
            ".env.example_local",
            ".eslintrc",
            ".nvmrc",
            "Dockerfile",
            "Dockerfile.dev",
            "config.js",
            "jest.config.js",
            "package-lock.json",
            "package.json",
            "server.js",
            "version.json"
        ],
        "folders": [
            "lib",
            "scripts"
        ]
    }
}