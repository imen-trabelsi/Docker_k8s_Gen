{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Next.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"fight-pandemics-client\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@veriff/incontext-sdk\": \"^1.1.0\",\n    \"antd\": \"^4.2.0\",\n    \"antd-mobile\": \"^2.3.1\",\n    \"axios\": \"^0.21.1\",\n    \"chart.js\": \"^2.9.4\",\n    \"classnames\": \"^2.2.6\",\n    \"google-map-react\": \"^2.1.9\",\n    \"disposable-email-domains\": \"^1.0.57\",\n    \"i18next\": \"^19.6.3\",\n    \"lodash\": \"^4.17.15\",\n    \"moment\": \"^2.25.3\",\n    \"polished\": \"^3.6.2\",\n    \"query-string\": \"^6.13.6\",\n    \"react\": \"^16.13.1\",\n    \"react-chartjs-2\": \"^2.11.1\",\n    \"react-dom\": \"^16.13.1\",\n    \"react-gtm-module\": \"^2.0.8\",\n    \"react-helmet-async\": \"^1.0.6\",\n    \"react-hook-form\": \"^5.7.2\",\n    \"react-i18next\": \"^11.7.0\",\n    \"react-image-crop\": \"^8.6.5\",\n    \"react-load-script\": \"0.0.6\",\n    \"react-moment\": \"^0.9.7\",\n    \"react-redux\": \"^7.2.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\",\n    \"react-scripts\": \"3.4.1\",\n    \"react-share\": \"^4.2.1\",\n    \"react-step-wizard\": \"^5.3.2\",\n    \"react-transition-group\": \"^4.4.1\",\n    \"react-virtualized\": \"^9.21.2\",\n    \"react-zendesk\": \"^0.1.10\",\n    \"redux\": \"^4.0.5\",\n    \"redux-thunk\": \"^2.3.0\",\n    \"snyk\": \"^1.319.2\",\n    \"socket.io-client\": \"^2.3.0\",\n    \"styled-components\": \"^5.0.1\",\n    \"super-tiny-icons\": \"^0.3.2\",\n    \"tlds\": \"^1.207.0\",\n    \"typeface-poppins\": \"^0.0.72\",\n    \"typeface-work-sans\": \"^0.0.72\",\n    \"uuid\": \"^8.1.0\",\n    \"validator\": \"^13.1.17\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"lint\": \"eslint --fix src\",\n    \"pretty\": \"prettier --write src\",\n    \"install-docker\": \"docker-compose run client npm install\",\n    \"snyk-protect\": \"snyk protect\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@testing-library/jest-dom\": \"^5.5.0\",\n    \"@testing-library/react\": \"^10.0.3\",\n    \"@testing-library/user-event\": \"^10.1.0\",\n    \"dotenv\": \"^8.2.0\",\n    \"redux-devtools-extension\": \"^2.13.8\",\n    \"http-proxy-middleware\": \"^1.0.3\",\n    \"husky\": \"^4.2.5\",\n    \"lint-staged\": \"^10.2.0\",\n    \"prettier\": \"^2.0.5\",\n    \"remote-redux-devtools\": \"^0.5.16\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"src/**/*.{js,jsx,ts,tsx}\": [\n      \"eslint --fix\",\n      \"prettier --write\"\n    ],\n    \"src/**/*.{json,css,scss,md}\": [\n      \"prettier --write\"\n    ]\n  },\n  \"snyk\": true\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "client/.env": "EXTEND_ESLINT=true",
            "docker-compose.yml": "version: \"3\"\nservices:\n  mongo:\n    image: mongo\n    container_name: mongo\n    environment:\n      MONGO_INITDB_DATABASE: fightpandemics\n    restart: always\n    ports:\n      - \"27017:27017\"\n    networks:\n      - fp_network\n\n  mongo-express:\n    image: mongo-express\n    container_name: mongo-express\n    restart: always\n    ports:\n      - \"8081:8081\"\n    networks:\n      - fp_network\n    depends_on:\n      - mongo\n\n  backend-service:\n    build:\n      context: backend\n      dockerfile: Dockerfile.dev\n      args:\n        NODE_ENV: dev\n    container_name: backend-service\n    restart: always\n    ports:\n      - \"8000:8000\"\n      - \"9229:9229\"\n    volumes:\n      - ./backend:/app\n      - /app/node_modules/\n    working_dir: /app\n    depends_on:\n      - mongo\n      - redis\n    networks:\n      - fp_network\n\n  client:\n    build:\n      context: client\n      dockerfile: Dockerfile.dev\n    restart: always\n    container_name: client\n    environment:\n      BACKEND_SERVICE_URL: http://backend-service:8000\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./client:/app\n      - /app/node_modules/\n    working_dir: /app\n    stdin_open: true\n    tty: true\n    networks:\n      - fp_network\n\n  cypress-e2e-tests:\n    build:\n      context: cypresse2e\n      dockerfile: Dockerfile\n    container_name: cypress-e2e-tests\n    depends_on:\n      - client\n    environment:\n      - CYPRESS_baseUrl=http://client:3000\n    entrypoint: \"\"\n    command:\n      [\n        \"dockerize\",\n        \"-wait\",\n        \"http://client:3000\",\n        \"-timeout\",\n        \"300s\",\n        \"bash\",\n        \"-c\",\n        \"npm run test\",\n      ]\n    volumes:\n      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/\n      - ./cypresse2e/cypress:/app/cypress\n      - ./cypresse2e/cypress.json:/app/cypress.json\n    working_dir: /app\n    networks:\n      - fp_network\n\n  cypress-e2e-report:\n    build:\n      context: cypresse2e\n      dockerfile: Dockerfile\n    container_name: cypress-e2e-report\n    entrypoint: \"\"\n    command: [\"bash\", \"-c\", \"npm run report\"]\n    volumes:\n      - ./cypresse2e/mochawesome-report/:/app/mochawesome-report/\n      - ./cypresse2e/cypress:/app/cypress\n      - ./cypresse2e/cypress.json:/app/cypress.json\n    working_dir: /app\n\n  mocha-integration:\n    build:\n      context: mocha\n      dockerfile: Dockerfile\n    container_name: mocha-integration\n    depends_on:\n      - client\n    environment:\n      MOCHA_URL: http://backend-service:8000\n    command: dockerize -wait http://client:3000 -timeout 300s npm run test\n    volumes:\n      - ./mocha/mochawesome-report/:/app/mochawesome-report/\n      - ./mocha/test/:/app/test/\n      - ./mocha/utils/:/app/utils/\n    working_dir: /app\n    networks:\n      - fp_network\n\n  awscli:\n    image: mesosphere/aws-cli\n    environment:\n      AWS_ACCESS_KEY_ID: dummy_id\n      AWS_SECRET_ACCESS_KEY: dummy_key\n      AWS_DEFAULT_REGION: us-east-1\n    networks:\n      - fp_network\n\n  localstack:\n    image: localstack/localstack\n    container_name: localstack\n    ports:\n      - \"4566:4566\"\n    environment:\n      SERVICES: s3\n      HOSTNAME: localstack\n      DOCKER_HOST: unix:///var/run/docker.sock\n      DATA_DIR: /tmp/localstack/data\n      DEBUG: 1\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./localstack:/docker-entrypoint-initaws.d\n    networks:\n      - fp_network\n\n  redis:\n    image: redis:alpine\n    container_name: redis\n    restart: always\n    ports:\n      - \"26379:6379\"\n    volumes:\n      - redis-volume:/data\n    networks:\n      - fp_network\n\nnetworks:\n  fp_network:\n    driver: bridge\n\nvolumes:\n  redis-volume:\n",
            "client/Dockerfile": "FROM node:12-alpine as builder\nWORKDIR '/app'\nCOPY package.json package-lock.json ./\nRUN npm ci\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/build /usr/share/nginx/html\nCOPY nginx/nginx.conf /etc/nginx/nginx.conf\nCOPY nginx/default.conf.template /etc/nginx/templates/default.conf.template\n\nEXPOSE 3000 80\n\nCMD [ \"nginx\", \"-g\", \"daemon off;\" ]\n"
        },
        "static_files": {
            "client/public/manifest.json": "{\n  \"short_name\": \"FightPandemics\",\n  \"name\": \"Loading\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"16x16 24x24 32x32 64x64\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logoIcon.svg\",\n      \"sizes\": \"96x96 128x128 192x192 256x256 512x512\",\n      \"type\": \"image/svg+xml\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n"
        }
    },
    "project_structure": {
        "files": [
            ".dockerignore",
            ".env.example_docker",
            ".env.example_local",
            ".eslintrc",
            ".nvmrc",
            "Dockerfile",
            "Dockerfile.dev",
            "config.js",
            "jest.config.js",
            "package-lock.json",
            "package.json",
            "server.js",
            "version.json"
        ],
        "folders": [
            "lib",
            "scripts"
        ]
    }
}