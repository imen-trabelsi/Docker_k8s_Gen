{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "build.gradle": "plugins {\n    id 'application'\n    id \"org.sonarqube\" version \"5.1.0.4882\"\n    id 'org.springframework.boot' version '3.3.4'\n    id 'io.spring.dependency-management' version '1.1.7'\n    id 'org.owasp.dependencycheck' version '10.0.4'\n    id \"uk.gov.hmcts.java\" version '0.12.65'\n    id \"com.gorylenko.gradle-git-properties\" version \"2.4.2\"\n    id 'jacoco'\n}\n\ndef springBootVersion = '3.3.4'\ndef springCloudVersion = '2023.0.5'\n\ndef versions = [\n        lombok: '1.18.36',\n        javaVersion: '21',\n        jacocoVersion: '0.8.12'\n]\n\njava {\n  toolchain {\n    languageVersion = JavaLanguageVersion.of(21)\n  }\n}\n\ndependencies{\n    testImplementation 'com.github.hmcts:fortify-client:1.4.7:all'\n}\n\ntask fortifyScan(type: JavaExec)  {\n    mainClass = \"uk.gov.hmcts.fortifyclient.FortifyClientMainApp\"\n    classpath += sourceSets.test.runtimeClasspath\n    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']\n}\n\nallprojects {\n    apply plugin: 'io.spring.dependency-management'\n    apply plugin: 'idea'\n    apply plugin: 'jacoco'\n\n    group = 'uk.gov.hmcts.reform.payment'\n    ext {\n        buildNumber = System.getenv(\"BUILD_NUMBER\") ?: '0'\n    }\n    version = rootProject.file('version.txt').text.trim() + \".${buildNumber}\"\n\n    repositories {\n        mavenLocal()\n        mavenCentral()\n        maven { url 'https://repo.spring.io/libs-milestone' }\n        maven { url 'https://jitpack.io' }\n    }\n\n    apply from: \"${rootDir}/cve-resolution-strategy.gradle\"\n\n    dependencyManagement {\n        imports {\n            mavenBom \"org.springframework.boot:spring-boot-dependencies:${springBootVersion}\"\n            mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n            mavenBom 'org.apache.logging.log4j:log4j-bom:2.23.1'\n        }\n        dependencies {\n            dependencySet(\n                    group: 'com.fasterxml.jackson.core',\n                    version: '2.18.0'\n            ) {\n                entry 'jackson-core'\n                entry 'jackson-databind'\n            }\n            // CVE-2020-8908\n            dependencySet(group: 'com.google.guava', version: '33.4.0-jre') {\n                entry 'guava'\n            }\n\n            dependencySet(group: 'ch.qos.logback', version: '1.5.16') {\n                entry 'logback-core'\n                entry 'logback-classic'\n            }\n        }\n    }\n\n    configurations {\n        testCompile.exclude group: 'pull-parser', module: 'pull-parser'\n        testRuntime.exclude group: 'ch.qos.logback', module: 'logback-classic', version: '1.5.8'\n        testRuntime.exclude group: 'ch.qos.logback', module: 'logback-core', version: '1.5.8'\n        testCompile.exclude group: 'ch.qos.logback', module: 'logback-classic', version: '1.5.8'\n        testCompile.exclude group: 'ch.qos.logback', module: 'logback-core', version: '1.5.8'\n    }\n\n\n    tasks.register(\"codeCoverageReport\", JacocoReport) {\n        // If a subproject applies the 'jacoco' plugin, add the result it to the report\n        subprojects { subproject ->\n            subproject.plugins.withType(JacocoPlugin).configureEach {\n                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach {\n                    testTask ->\n                        if (testTask.getTaskIdentity().name == \"test\") {\n                            sourceSets subproject.sourceSets.main\n                            executionData(testTask)\n                        }\n                }\n            }\n        }\n        // enable the different report types (html, xml, csv)\n        reports {\n            // xml is usually used to integrate code coverage with\n            // other tools like SonarQube, Coveralls or Codecov\n            xml.required.set(true)\n            // HTML reports can be used to see code coverage\n            // without any external tools\n            html.required.set(true)\n            xml.outputLocation.set(file(\"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml\"))\n        }\n    }\n\n    codeCoverageReport.dependsOn {\n        subprojects*.test\n    }\n}\n\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: \"jacoco\"\n\n    tasks.withType(JavaCompile).configureEach {\n        options.encoding = 'UTF-8'\n        options.compilerArgs << '-parameters'\n    }\n\n    tasks.withType(Test).configureEach {\n        testLogging {\n            exceptionFormat = 'full'\n        }\n    }\n\n    dependencies {\n        implementation ('com.sun.xml.bind:jaxb-osgi:4.0.5')\n        testImplementation 'io.github.openfeign:feign-jackson:13.2.1'\n        testImplementation 'io.github.openfeign:feign-micrometer:13.5'\n        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.17.1'\n        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.17.1'\n        implementation group: 'joda-time', name: 'joda-time', version: '2.13.1'\n        implementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'\n        implementation group:'org.apache.poi', name: 'poi-ooxml', version: '5.2.5'\n        testImplementation group: 'junit', name: 'junit', version: '4.13.2'\n        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'\n        testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.11.0'\n        compileOnly group: 'net.sourceforge.findbugs', name: 'annotations', version: '1.3.2'\n        implementation group: 'org.owasp.encoder', name: 'encoder', version: '1.2.3'\n        testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '3.0.1'\n        compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok\n        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok\n        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok\n        implementation 'org.springframework.boot:spring-boot-starter-validation'\n        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.18.2'\n        implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.18.3'\n        implementation(group: 'com.github.hmcts', name: 'ccd-client', version: '5.0.3') {\n            sourceSets {\n                main {\n                    java {\n                        exclude '**/CoreCaseDataClientAutoConfiguration.java'\n                    }\n                }\n            }\n        }\n\n    }\n\n    test {\n        jvmArgs = [\n            '--add-opens', 'java.base/java.lang=ALL-UNNAMED'\n        ]\n    }\n}\n\ndependencies {\n    implementation project(':payment-api')\n}\n\napplication  {\n    mainClass = 'uk.gov.hmcts.PaymentApiApplication'\n}\n\njar {\n    enabled = true\n}\n\nbootJar {\n    archiveFileName.set('payment-app.jar')\n    manifest {\n        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version\n    }\n}\n\nspringBoot {\n    buildInfo()\n}\n\ndependencyCheck {\n    failBuildOnCVSS = 0\n    suppressionFile = 'dependency-check-suppressions.xml'\n    format='ALL'\n}\n\ndef sonarExclusions = [\n        '**/v1/**',\n        '**/OtpBootstrap.java',\n        '**/api/model/**',\n        '**/referencedata/model/**',\n        '**/api/dto/*.java',\n        '**/referencedata/dto/*.java',\n        '**/api/service/*Service.java',\n        '**/api/servicebus/TopicClientService.java',\n        '**/referencedata/service/*Service.java',\n        '**/api/service/MockAccountServiceImpl.java',\n        '**/api/service/MockCcdDataStoreClientServiceImpl.java',\n        '**/api/controllers/mock/MockCallbackControllerForTesting.java',\n        '**/api/controllers/ServiceRequestController.java',\n        '**/api/domain/mapper/**',\n        '**/api/dto/mapper/*Mapper.java',\n        '**/api/domain/service/**',\n        '**/api/contract/**',\n        '**/api/contract/*Dto.java',\n        '**/api/dto/mapper/**',\n        '**/api/reports/config/**',\n        '**/api/external/client/dto/**',\n        '**/api/external/client/exceptions/**',\n        '**/api/jpaaudit/listner/**',\n        '**/api/jpaaudit/model/**',\n        '**/api/service/PaymentRefundsServiceImpl.java',\n        '**/api/service/RefundRemissionEnableServiceImpl.java'\n]\n\nsonarqube {\n    properties {\n        property \"sonar.host.url\", \"https://sonar.reform.hmcts.net/\"\n        property \"sonar.dynamicAnalysis\", \"reuseReports\"\n        property \"sonar.java.coveragePlugin\", \"jacoco\"\n        property \"sonar.dependencyCheck.reportPath\", \"${project.buildDir}/reports/dependency-check-report.xml\"\n        property \"sonar.coverage.jacoco.xmlReportPaths\", \"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml\"\n        property \"sonar.exclusions\", sonarExclusions.join(\", \")\n        property \"sonar.test.exclusions\", sonarExclusions.join(\", \")\n        property \"sonar.coverage.exclusions\", sonarExclusions.join(\", \")\n        property \"sonar.projectName\", \"payment-app\"\n        property \"sonar.projectKey\", \"uk.gov.hmcts.reform.payment:payment-app\"\n    }\n}\n\nproject.tasks['sonarqube'].dependsOn codeCoverageReport\n\ntasks.withType(JavaExec).configureEach {\n  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))\n}\n\ntask smoke(type: GradleBuild, description: 'Runs smoke tests', group: 'Verification') {\n    buildFile = './api/build.gradle'\n    tasks = ['smokeTest']\n}\n\ntask functional(type: GradleBuild, description: 'Runs Functional tests', group: 'Verification') {\n    buildFile = './api/build.gradle'\n    tasks = ['functionalTest']\n}\n\ntask migratePostgresDatabase(type: GradleBuild, description: 'Migrates Postgres Database', group: 'liquibase') {\n    //forward projectProperties\n    startParameter.projectProperties = project.gradle.startParameter.projectProperties\n    buildFile = './api/build.gradle'\n    tasks = ['migratePostgresDatabase']\n}\n\ntask printVersion {\n    description 'Prints the version of this project'\n    doLast {\n        print project.version\n    }\n}\n\nrun {\n    def debug = System.getProperty(\"debug\")\n    if (debug == 'true') {\n        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']\n    }\n}\n"
        },
        "database": "PostgreSQL",
        "build_system": "Gradle",
        "config_files": {
            ".env": "SERVER_PORT=8080\n",
            "docker-compose.yml": "version: '2.1'\n\n\nservices:\n  payments-api:\n    build:\n      context: .\n      args:\n        - http_proxy\n        - https_proxy\n        - no_proxy\n    image: hmctspublic.azurecr.io/payment/api\n    environment:\n      - auth.provider.service.client.baseUrl=http://service-auth-provider-api:8489\n      - auth.idam.client.baseUrl=http://idam-api:5000\n      - idam.s2s-auth.totp_secret=${PAYMENT_S2S_SECRET}\n      - idam.s2s-auth.microservice=payment_app\n      - idam.s2s-auth.url=http://service-auth-provider-api:8489\n      - CARD_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - CARD_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - CARD_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - CARD_PAYMENTS_EMAIL_MESSAGE=hi\n      - CARD_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - FEATURE_PAYMENTS_SEARCH=true\n      - FEES_REGISTER_URL=https://ccfr-fees-api:8080\n      - GOV_PAY_AUTH_KEY_CMC=${GOV_PAY_AUTH_KEY_CMC}\n      - GOV_PAY_AUTH_KEY_DIVORCE_FRONTEND=${GOV_PAY_AUTH_KEY_DIVORCE_FRONTEND}\n      - GOV_PAY_AUTH_KEY_PROBATE_FRONTEND=${GOV_PAY_AUTH_KEY_PROBATE_FRONTEND}\n      - GOV_PAY_OPERATIONAL_SERVICES=ccd_gw\n      - GOV_PAY_URL=https://publicapi.payments.service.gov.uk/v1/payments\n      - payments.report.file.location=.\n      - PBA_PROBATE_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_PROBATE_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_PROBATE_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_PROBATE_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_PROBATE_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - PBA_FINREM_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_FINREM_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_FINREM_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_FINREM_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_FINREM_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - PBA_DIVORCE_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_DIVORCE_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_DIVORCE_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_DIVORCE_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_DIVORCE_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - PBA_FPL_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_FPL_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_FPL_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_FPL_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_FPL_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - PBA_CIVIL_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_CIVIL_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_CIVIL_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_CIVIL_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_CIVIL_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - PBA_PRL_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - PBA_PRL_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - PBA_PRL_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - PBA_PRL_PAYMENTS_EMAIL_MESSAGE=hi\n      - PBA_PRL_PAYMENTS_EMAIL_SUBJECT=Docker Env Card Payments Reconciliation Report\n      - DUPLICATE_PAYMENTS_REPORT_SCHEDULER_ENABLED=true\n      - DUPLICATE_PAYMENTS_EMAIL_FROM=no-reply@reform.hmcts.net\n      - DUPLICATE_PAYMENTS_EMAIL_TO=pepito@grillo.com\n      - DUPLICATE_PAYMENTS_EMAIL_MESSAGE=hi\n      - DUPLICATE_PAYMENTS_EMAIL_SUBJECT=Docker Env Duplicate Payments Report\n      - REFORM_ENVIRONMENT=aat\n      - REFORM_SERVICE_NAME=payment-api\n      - REFORM_TEAM=cc\n      - DUPLICATE_SERVICE_REQUEST_REPORT_SCHEDULER_ENABLED=true\n      - DUPLICATE_SERVICE_REQUEST_EMAIL_FROM=no-reply@reform.hmcts.net\n      - DUPLICATE_SERVICE_REQUEST_EMAIL_TO=pepito@grillo.com\n      - DUPLICATE_SERVICE_REQUEST_EMAIL_MESSAGE=hi\n      - DUPLICATE_SERVICE_REQUEST_EMAIL_SUBJECT=Docker Env Service Request Report\n      - SPRING_DATASOURCE_URL=jdbc:postgresql://payments-database:5432/payment\n      - SPRING_DATASOURCE_USERNAME=payment\n      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}\n      - SPRING_LIQUIBASE_ENABLED=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true\n      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_SSL_TRUST=*\n      - SPRING_MAIL_PORT=25\n      - SPRING_MAIL_HOST=mta.reform.hmcts.net\n      - TRUSTED_S2S_SERVICE_NAMES=refunds_api,cmc,probate_frontend,divorce_frontend,divorce,payment_app,ccd_gw,bar_api,api_gw,finrem_payment_service,ccpay_bubble,jui_webapp,xui_webapp,fpl_case_service,iac,notifications_service\n      - PAYBUBBLE_HOME_URL=https://ccpay-bubble-frontend-aat.service.core-compute-aat.internal\n      - PCI_PAL_CALLBACK_URL=https://core-api-mgmt-aat.azure-api.net/telephony-api/telephony/callback\n      - ASB_CONNECTION_STRING=some-azure-service-bus-connection-string\n      - azure.application-insights.instrumentation-key=${APPINSIGHTS_INSTRUMENTATIONKEY}\n    ports:\n      - 8083:8080\n    depends_on:\n      - payments-database\n      - ccfr-fees-api\n\n  payments-database:\n    container_name: payments-database\n    image: postgres:16-alpine\n    environment:\n      - POSTGRES_USER=${POSTGRES_USERNAME}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n      - POSTGRES_DB=payment\n    ports:\n      - 5430:5432\n\n  # service-auth-provider\n  service-auth-provider-api:\n    image: hmctspublic.azurecr.io/rpe/service-auth-provider\n    environment:\n      - microserviceKeys_divorce=${S2S_DIVORCE}\n      - microserviceKeys_payment_app=${S2S_PAYMENT}\n    ports:\n      - 8085:8489\n\n  ccfr-fees-api:\n    image: hmctspublic.azurecr.io/fees-register/api\n    container_name: ccfr-fees-api\n    environment:\n      - SPRING_DATASOURCE_URL=jdbc:postgresql://ccfr-fees-database:5432/fees_register\n      - SPRING_DATASOURCE_USERNAME=fees_register\n      - SPRING_DATASOURCE_PASSWORD=${FEE_REGISTER}\n      - AUTH_IDAM_CLIENT_BASEURL=https://idam-test.dev.ccidam.reform.hmcts.net\n    ports:\n      - 8182:8080\n    depends_on:\n      - ccfr-fees-database\n\n  ccfr-fees-database:\n    container_name: ccfr-fees-database\n    image: postgres:16-alpine\n    environment:\n      - POSTGRES_USER=fees_register\n      - POSTGRES_PASSWORD=${FEE_REGISTER}\n      - POSTGRES_DB=fees_register\n    ports:\n    - 5182:5432\n  fr-am:\n    image: hmctsprivate.azurecr.io/idam/idam-fr-am:latest\n    hostname: localam\n    depends_on:\n      - shared-db\n    ports:\n      - 8080:8080\n      - 1389:1389\n  fr-idm:\n    image: hmctsprivate.azurecr.io/idam/idam-fr-idm:latest\n    hostname: localidm\n    depends_on:\n      - fr-am\n      - shared-db\n    ports:\n      - 18080:18080\n      - 9010:9010\n  shared-db:\n    image: hmctsprivate.azurecr.io/idam/shared-db:latest\n    ports:\n      - 5432:5432\n  smtp-server:\n    image: mailhog/mailhog\n    ports:\n      - 1025:1025\n      - 8025:8025\n  idam-api:\n    image: hmctspublic.azurecr.io/idam/api:stable\n    depends_on:\n      - fr-am\n      - shared-db\n    ports:\n      - 5000:5000\n    tmpfs: /opt/app/es\n    environment:\n      - JAVA_OPTS=-Xms128m -Xms512m\n      - IDAMHEALTHCHECK_AM_ENABLED=false\n      - IDAMHEALTHCHECK_IDM_ENABLED=false\n      - STRATEGIC_ADMIN_URL=http://idam-web-admin:8082\n      - STRATEGIC_WEBPUBLIC_URL=http://idam-web-public:9002\n      - SPRING_PROFILES_ACTIVE=local\n      - SPRING_DATASOURCE_URL=jdbc:postgresql://shared-db:5432/openidm?currentSchema=fridam\n      - SPRING_DATASOURCE_USERNAME=openidm\n      - SPRING_DATASOURCE_PASSWORD=${OPENIDM}\n      - SECURITY_OAUTH2_CLIENT_CLIENTSECRET=${PASSWORD}\n      - SECURITY_OAUTH2_CLIENT_PRE_ESTABLISHED_REDIRECT_URI=http://idam-web-public:9002/login\n      - SECURITY_OAUTH2_CLIENT_REGISTERED_REDIRECT_URI=http://idam-web-public:9002/login\n      - IDAM_SPI_FORGEROCK_AM_ROOT=http://fr-am:8080/openam\n      - IDAM_SPI_FORGEROCK_AM_TOPLEVELHOST=fr-am\n      - IDAM_SPI_FORGEROCK_AM_USERNAME=amadmin\n      - IDAM_SPI_FORGEROCK_AM_PASSWORD=${PASSWORD}\n      - IDAM_SPI_FORGEROCK_AM_JWKSURIFOROAUTH2CLIENTS=http://fr-am:8080/openam/oauth2/hmcts/connect/jwk_uri\n      - IDAM_SPI_FORGEROCK_IDM_ROOT=http://fr-idm:18080/openidm\n      - IDAM_SPI_FORGEROCK_IDM_USERNAME=openidm-admin\n      - IDAM_SPI_FORGEROCK_IDM_PASSWORD=${OPENIDM}\n      - IDAM_SPI_FORGEROCK_IDM_PIN_DEFAULTPASSWORD=${PASSWORD}\n      - APPSETTING_NODE_PATH=/opt/app\n  idam-web-public:\n    image: hmctspublic.azurecr.io/idam/web-public:stable\n    depends_on:\n      - idam-api\n    ports:\n      - 9002:8080\n    environment:\n      - JAVA_OPTS=-Xms128m -Xms512m\n      - STRATEGIC_SERVICE_URL=http://idam-api:5000\n  idam-web-admin:\n    image: hmctspublic.azurecr.io/idam/web-admin:stable\n    depends_on:\n      - idam-api\n    ports:\n      - 8082:8080\n    environment:\n      - JAVA_OPTS=-Xms128m -Xms512m\n      - STRATEGIC_SERVICE_URL=http://idam-api:5000\n      - STRATEGIC_PUBLIC_URL=http://idam-web-public:9002\n",
            "Dockerfile": "ARG APP_INSIGHTS_AGENT_VERSION=3.4.14\nFROM hmctspublic.azurecr.io/base/java:21-distroless\n\nCOPY lib/applicationinsights.json /opt/app/\nCOPY build/libs/payment-app.jar /opt/app/\n\nEXPOSE 8080\n\nCMD [ \\\n    \"--add-opens\", \"java.base/java.lang=ALL-UNNAMED\", \\\n    \"payment-app.jar\" \\\n    ]\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            "Dockerfile",
            "init-db.sh"
        ],
        "folders": []
    }
}