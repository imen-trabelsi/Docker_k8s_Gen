{
    "source_code_info": {
        "language": "Elixir",
        "framework": null,
        "dependencies": {
            "mix.exs": "defmodule BlockScout.Mixfile do\n  use Mix.Project\n\n  # Functions\n\n  def project do\n    [\n      # app: :block_scout,\n      # aliases: aliases(config_env()),\n      version: \"7.0.2\",\n      apps_path: \"apps\",\n      deps: deps(),\n      dialyzer: dialyzer(),\n      elixir: \"~> 1.17\",\n      preferred_cli_env: [\n        credo: :test,\n        dialyzer: :test\n      ],\n      # start_permanent: config_env() == :prod,\n      releases: [\n        blockscout: [\n          applications: [\n            block_scout_web: :permanent,\n            ethereum_jsonrpc: :permanent,\n            explorer: :permanent,\n            indexer: :permanent,\n            utils: :permanent,\n            nft_media_handler: :permanent\n          ],\n          steps: [:assemble, &copy_prod_runtime_config/1],\n          validate_compile_env: false\n        ]\n      ]\n    ]\n  end\n\n  ## Private Functions\n\n  defp copy_prod_runtime_config(%Mix.Release{path: path} = release) do\n    File.mkdir_p!(Path.join([path, \"config\", \"runtime\"]))\n    File.cp!(Path.join([\"config\", \"runtime\", \"prod.exs\"]), Path.join([path, \"config\", \"runtime\", \"prod.exs\"]))\n    File.mkdir_p!(Path.join([path, \"apps\", \"explorer\", \"config\", \"prod\"]))\n\n    File.cp_r!(\n      Path.join([\"apps\", \"explorer\", \"config\", \"prod\"]),\n      Path.join([path, \"apps\", \"explorer\", \"config\", \"prod\"])\n    )\n\n    File.mkdir_p!(Path.join([path, \"apps\", \"indexer\", \"config\", \"prod\"]))\n    File.cp_r!(Path.join([\"apps\", \"indexer\", \"config\", \"prod\"]), Path.join([path, \"apps\", \"indexer\", \"config\", \"prod\"]))\n\n    release\n  end\n\n  defp dialyzer() do\n    [\n      plt_add_deps: :app_tree,\n      plt_add_apps: ~w(credo ex_unit mix wallaby)a,\n      ignore_warnings: \".dialyzer_ignore.exs\",\n      plt_core_path: \"priv/plts\",\n      plt_file: {:no_warn, \"priv/plts/dialyzer.plt\"}\n    ]\n  end\n\n  # defp aliases(env) do\n  #   [\n  #     # to match behavior of `mix test` in `apps/indexer`, which needs to not start applications for `indexer` to\n  #     # prevent its supervision tree from starting, which is undesirable in test\n  #     test: \"test --no-start\"\n  #   ] ++ env_aliases(env)\n  # end\n\n  # defp env_aliases(:dev) do\n  #   []\n  # end\n\n  # defp env_aliases(_env) do\n  #   [\n  #     compile: \"compile --warnings-as-errors\"\n  #   ]\n  # end\n\n  # Dependencies can be Hex packages:\n  #\n  #   {:mydep, \"~> 0.3.0\"}\n  #\n  # Or git/path repositories:\n  #\n  #   {:mydep, git: \"https://github.com/elixir-lang/mydep.git\", tag: \"0.1.0\"}\n  #\n  # Type \"mix help deps\" for more examples and options.\n  #\n  # Dependencies listed here are available only for this project\n  # and cannot be accessed from applications inside the apps folder\n  defp deps do\n    [\n      {:prometheus_ex, git: \"https://github.com/lanodan/prometheus.ex\", branch: \"fix/elixir-1.14\", override: true},\n      {:absinthe_plug, git: \"https://github.com/blockscout/absinthe_plug.git\", tag: \"1.5.8\", override: true},\n      {:tesla, \"~> 1.14.1\"},\n      # Documentation\n      {:ex_doc, \"~> 0.37.2\", only: :dev, runtime: false},\n      {:number, \"~> 1.0.3\"}\n    ]\n  end\nend\n"
        },
        "database": null,
        "build_system": "Mix",
        "config_files": {
            "docker/Dockerfile": "FROM hexpm/elixir:1.17.3-erlang-27.1-alpine-3.20.3 AS builder-deps\n\nWORKDIR /app\n\nRUN apk --no-cache --update add \\\n    alpine-sdk gmp-dev automake libtool inotify-tools autoconf python3 file gcompat libstdc++ curl ca-certificates git make\n\n# Cache elixir deps\nCOPY mix.exs mix.lock ./\nCOPY apps/block_scout_web/mix.exs ./apps/block_scout_web/\nCOPY apps/explorer/mix.exs ./apps/explorer/\nCOPY apps/ethereum_jsonrpc/mix.exs ./apps/ethereum_jsonrpc/\nCOPY apps/indexer/mix.exs ./apps/indexer/\nCOPY apps/utils/mix.exs ./apps/utils/\nCOPY apps/nft_media_handler/mix.exs ./apps/nft_media_handler/\n\nENV MIX_ENV=\"prod\"\nENV MIX_HOME=/opt/mix\nRUN mix local.hex --force\nRUN mix do deps.get, local.rebar --force, deps.compile --skip-umbrella-children\n\nCOPY config ./config\nCOPY rel ./rel\nCOPY apps ./apps\n\n##############################################################\nFROM builder-deps AS builder\n\nENV DISABLE_WEBAPP=true\nENV ADMIN_PANEL_ENABLED=false\nARG DISABLE_INDEXER\nENV DISABLE_INDEXER=${DISABLE_INDEXER}\nARG DISABLE_API\nENV DISABLE_API=${DISABLE_API}\nARG API_V1_READ_METHODS_DISABLED\nENV API_V1_READ_METHODS_DISABLED=${API_V1_READ_METHODS_DISABLED}\nARG API_V1_WRITE_METHODS_DISABLED\nENV API_V1_WRITE_METHODS_DISABLED=${API_V1_WRITE_METHODS_DISABLED}\nARG CHAIN_TYPE\nENV CHAIN_TYPE=${CHAIN_TYPE}\nARG BRIDGED_TOKENS_ENABLED\nENV BRIDGED_TOKENS_ENABLED=${BRIDGED_TOKENS_ENABLED}\nARG MUD_INDEXER_ENABLED\nENV MUD_INDEXER_ENABLED=${MUD_INDEXER_ENABLED}\nARG SHRINK_INTERNAL_TRANSACTIONS_ENABLED\nENV SHRINK_INTERNAL_TRANSACTIONS_ENABLED=${SHRINK_INTERNAL_TRANSACTIONS_ENABLED}\nARG API_GRAPHQL_MAX_COMPLEXITY\nENV API_GRAPHQL_MAX_COMPLEXITY=${API_GRAPHQL_MAX_COMPLEXITY}\n\n# Run backend compilation\nRUN mix compile\n\nRUN mkdir -p /opt/release && \\\n    mix release blockscout && \\\n    mv _build/${MIX_ENV}/rel/blockscout /opt/release\n\n##############################################################\nFROM hexpm/elixir:1.17.3-erlang-27.1-alpine-3.20.3\n\nWORKDIR /app\n\nARG BLOCKSCOUT_USER=blockscout\nARG BLOCKSCOUT_GROUP=blockscout\nARG BLOCKSCOUT_UID=10001\nARG BLOCKSCOUT_GID=10001\n\nRUN apk --no-cache --update add jq curl && \\\n    addgroup --system --gid ${BLOCKSCOUT_GID} ${BLOCKSCOUT_GROUP} && \\\n    adduser --system --uid ${BLOCKSCOUT_UID} --ingroup ${BLOCKSCOUT_GROUP} --disabled-password ${BLOCKSCOUT_USER}\n\nENV DISABLE_WEBAPP=true\nENV ADMIN_PANEL_ENABLED=false\nARG DISABLE_INDEXER\nENV DISABLE_INDEXER=${DISABLE_INDEXER}\nARG DISABLE_API\nENV DISABLE_API=${DISABLE_API}\nARG API_V1_READ_METHODS_DISABLED\nENV API_V1_READ_METHODS_DISABLED=${API_V1_READ_METHODS_DISABLED}\nARG API_V1_WRITE_METHODS_DISABLED\nENV API_V1_WRITE_METHODS_DISABLED=${API_V1_WRITE_METHODS_DISABLED}\nARG CHAIN_TYPE\nENV CHAIN_TYPE=${CHAIN_TYPE}\nARG BRIDGED_TOKENS_ENABLED\nENV BRIDGED_TOKENS_ENABLED=${BRIDGED_TOKENS_ENABLED}\nARG MUD_INDEXER_ENABLED\nENV MUD_INDEXER_ENABLED=${MUD_INDEXER_ENABLED}\nARG SHRINK_INTERNAL_TRANSACTIONS_ENABLED\nENV SHRINK_INTERNAL_TRANSACTIONS_ENABLED=${SHRINK_INTERNAL_TRANSACTIONS_ENABLED}\nARG API_GRAPHQL_MAX_COMPLEXITY\nENV API_GRAPHQL_MAX_COMPLEXITY=${API_GRAPHQL_MAX_COMPLEXITY}\n\nARG RELEASE_VERSION\nENV RELEASE_VERSION=${RELEASE_VERSION}\nARG BLOCKSCOUT_VERSION\nENV BLOCKSCOUT_VERSION=${BLOCKSCOUT_VERSION}\n\nCOPY --from=builder --chown=${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP} /opt/release/blockscout .\nCOPY --from=builder --chown=${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP} /app/config/config_helper.exs ./config/config_helper.exs\nCOPY --from=builder --chown=${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP} /app/config/config_helper.exs /app/releases/${RELEASE_VERSION}/config_helper.exs\nCOPY --from=builder --chown=${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP} /app/config/assets/precompiles-arbitrum.json ./config/assets/precompiles-arbitrum.json\n\nRUN mkdir dets && mkdir temp && chown -R ${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP} /app\n\nUSER ${BLOCKSCOUT_USER}:${BLOCKSCOUT_GROUP}\n",
            ".circleci/config.yml": "version: 2\njobs:\n  build:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3-node-browsers\n        environment:\n          MIX_ENV: test\n          # match POSTGRES_PASSWORD for postgres image below\n          PGPASSWORD: postgres\n          # match POSTGRES_USER for postgres image below\n          PGUSER: postgres\n\n    working_directory: ~/app\n\n    steps:\n      - run: sudo apt-get update; sudo apt-get -y install autoconf build-essential libgmp3-dev libtool\n\n      - checkout\n      - run:\n          command: ./bin/install_chrome_headless.sh\n          no_output_timeout: 2400\n\n      - run: mix local.hex --force\n      - run: mix local.rebar --force\n\n      - run:\n          name: \"ELIXIR_VERSION.lock\"\n          command: echo \"${ELIXIR_VERSION}\" > ELIXIR_VERSION.lock\n      - run:\n          name: \"OTP_VERSION.lock\"\n          command: echo \"${OTP_VERSION}\" > OTP_VERSION.lock\n\n      - restore_cache:\n          keys:\n             - v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.lock\" }}\n             - v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.exs\" }}\n             - v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}\n\n      - run: mix deps.get\n\n      - restore_cache:\n          keys:\n            - v8-npm-install-{{ .Branch }}-{{ checksum \"apps/block_scout_web/assets/package-lock.json\" }}\n            - v8-npm-install-{{ .Branch }}\n            - v8-npm-install\n\n      - run:\n          command: npm install\n          working_directory: \"apps/explorer\"\n\n      - save_cache:\n          key: v3-npm-install-{{ .Branch }}-{{ checksum \"apps/explorer/package-lock.json\" }}\n          paths: \"apps/explorer/node_modules\"\n      - save_cache:\n          key: v3-npm-install-{{ .Branch }}\n          paths: \"apps/explorer/node_modules\"\n      - save_cache:\n          key: v3-npm-install\n          paths: \"apps/explorer/node_modules\"\n\n      - run:\n          command: npm install\n          working_directory: \"apps/block_scout_web/assets\"\n\n      - save_cache:\n          key: v8-npm-install-{{ .Branch }}-{{ checksum \"apps/block_scout_web/assets/package-lock.json\" }}\n          paths: \"apps/block_scout_web/assets/node_modules\"\n      - save_cache:\n          key: v8-npm-install-{{ .Branch }}\n          paths: \"apps/block_scout_web/assets/node_modules\"\n      - save_cache:\n          key: v8-npm-install\n          paths: \"apps/block_scout_web/assets/node_modules\"\n\n      - run: mix compile\n\n      - run:\n          command: make\n          working_directory: \"deps/ex_secp256k1\"\n\n      # `deps` needs to be cached with `_build` because `_build` will symlink into `deps`\n\n      - save_cache:\n          key: v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.lock\" }}\n          paths:\n            - deps\n            - _build\n      - save_cache:\n          key: v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.exs\" }}\n          paths:\n            - deps\n            - _build\n      - save_cache:\n          key: v8-mix-compile-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}\n          paths:\n            - deps\n            - _build\n\n      - run:\n          name: Build assets\n          command: node node_modules/webpack/bin/webpack.js --mode development\n          working_directory: \"apps/block_scout_web/assets\"\n\n      - persist_to_workspace:\n          root: .\n          paths:\n            - .circleci\n            - .credo.exs\n            - .dialyzer_ignore.exs\n            - .formatter.exs\n            - .git\n            - .gitignore\n            - ELIXIR_VERSION.lock\n            - Gemfile\n            - Gemfile.lock\n            - OTP_VERSION.lock\n            - _build\n            - apps\n            - bin\n            - config\n            - deps\n            - doc\n            - mix.exs\n            - mix.lock\n            - appspec.yml\n            - rel\n  check_formatted:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix format --check-formatted\n  credo:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix local.hex --force\n\n      - run: mix credo\n  deploy_aws:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/python:2.7-stretch\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - add_ssh_keys:\n          fingerprints:\n            - \"c4:fd:a8:f8:48:a8:09:e5:3e:be:30:62:4d:6f:6f:36\"\n\n      - run:\n          name: Deploy to AWS\n          command: bin/deploy\n  dialyzer:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix local.hex --force\n\n      - restore_cache:\n          keys:\n            - v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.lock\" }}\n            - v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.exs\" }}\n            - v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}\n\n      - run:\n          name: Unpack PLT cache\n          command: |\n            mkdir -p _build/test\n            cp plts/dialyxir*.plt _build/test/ || true\n            mkdir -p ~/.mix\n            cp plts/dialyxir*.plt ~/.mix/ || true\n\n      - run: mix dialyzer --plt\n\n      - run:\n          name: Pack PLT cache\n          command: |\n            mkdir -p plts\n            cp _build/test/dialyxir*.plt plts/\n            cp ~/.mix/dialyxir*.plt plts/\n\n      - save_cache:\n          key: v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.lock\" }}\n          paths:\n            - plts\n      - save_cache:\n          key: v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}-{{ checksum \"mix.exs\" }}\n          paths:\n            - plts\n      - save_cache:\n          key: v8-mix-dialyzer-{{ checksum \"OTP_VERSION.lock\" }}-{{ checksum \"ELIXIR_VERSION.lock\" }}\n          paths:\n            - plts\n\n      - run: mix dialyzer --halt-exit-status\n  eslint:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/node:12.18.2-browsers-legacy\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run:\n          name: ESLint\n          command: ./node_modules/.bin/eslint --format=junit --output-file=\"test/eslint/junit.xml\" js/**\n          working_directory: apps/block_scout_web/assets\n\n      - store_test_results:\n          path: apps/block_scout_web/assets/test\n  gettext:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix local.hex --force\n\n      - run:\n          name: Check for missed translations\n          command: |\n            mix gettext.extract --merge | tee stdout.txt\n            ! grep \"Wrote \" stdout.txt\n          working_directory: \"apps/block_scout_web\"\n\n      - store_artifacts:\n          path: apps/block_scout_web/priv/gettext\n  jest:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/node:12.18.2-browsers-legacy\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run:\n          name: Jest\n          command: ./node_modules/.bin/jest\n          working_directory: apps/block_scout_web/assets\n  release:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: prod\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix local.hex --force\n      - run: mix local.rebar --force\n      - run: MIX_ENV=prod mix release\n      - run:\n          name: Collecting artifacts\n          command: |\n            find -name 'blockscout.tar.gz' -exec sh -c 'mkdir -p ci_artifact && cp \"$@\" ci_artifact/ci_artifact_blockscout.tar.gz' _ {} +\n          when: always\n\n      - store_artifacts:\n          name: Uploading CI artifacts\n          path: ci_artifact/ci_artifact_blockscout.tar.gz\n          destination: ci_artifact_blockscout.tar.gz\n  sobelow:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run: mix local.hex --force\n\n      - run:\n          name: Scan explorer for vulnerabilities\n          command: mix sobelow --config\n          working_directory: \"apps/explorer\"\n\n      - run:\n          name: Scan block_scout_web for vulnerabilities\n          command: mix sobelow --config\n          working_directory: \"apps/block_scout_web\"\n  # test_geth_http_websocket:\n  #   docker:\n  #     # Ensure .tool-versions matches\n  #     - image: circleci/elixir:1.10.3-node-browsers\n  #       environment:\n  #         MIX_ENV: test\n  #         # match POSTGRES_PASSWORD for postgres image below\n  #         PGPASSWORD: postgres\n  #         # match POSTGRES_USER for postgres image below\n  #         PGUSER: postgres\n  #         ETHEREUM_JSONRPC_CASE: \"EthereumJSONRPC.Case.Geth.HTTPWebSocket\"\n  #         ETHEREUM_JSONRPC_WEB_SOCKET_CASE: \"EthereumJSONRPC.WebSocket.Case.Geth\"\n  #     - image: circleci/postgres:10.10-alpine\n  #       environment:\n  #         # Match apps/explorer/config/test.exs config :explorer, Explorer.Repo, database\n  #         POSTGRES_DB: explorer_test\n  #         # match PGPASSWORD for elixir image above\n  #         POSTGRES_PASSWORD: postgres\n  #         # match PGUSER for elixir image above\n  #         POSTGRES_USER: postgres\n\n  #   working_directory: ~/app\n\n  #   steps:\n  #     - attach_workspace:\n  #         at: .\n\n  #     - run:\n  #         command: ./bin/install_chrome_headless.sh\n  #         no_output_timeout: 2400\n\n  #     - run: mix local.hex --force\n  #     - run: mix local.rebar --force\n\n  #     - run:\n  #         name: Wait for DB\n  #         command: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n  #     - run:\n  #         name: mix test --exclude no_geth\n  #         command: |\n  #           # Don't submit coverage report for forks, but let the build succeed\n  #           if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n  #             mix coveralls.html --exclude no_geth --parallel --umbrella\n  #           else\n  #             mix coveralls.circle --exclude no_geth --parallel --umbrella ||\n  #               # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status\n  #               (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && return $retval)\n  #           fi\n\n  #     - store_artifacts:\n  #         path: cover/excoveralls.html\n  #     - store_test_results:\n  #         path: _build/test/junit\n  # test_geth_mox:\n  #   docker:\n  #     # Ensure .tool-versions matches\n  #     - image: circleci/elixir:1.10.3-node-browsers\n  #       environment:\n  #         MIX_ENV: test\n  #         # match POSTGRES_PASSWORD for postgres image below\n  #         PGPASSWORD: postgres\n  #         # match POSTGRES_USER for postgres image below\n  #         PGUSER: postgres\n  #         ETHEREUM_JSONRPC_CASE: \"EthereumJSONRPC.Case.Geth.Mox\"\n  #         ETHEREUM_JSONRPC_WEB_SOCKET_CASE: \"EthereumJSONRPC.WebSocket.Case.Mox\"\n  #     - image: circleci/postgres:10.10-alpine\n  #       environment:\n  #         # Match apps/explorer/config/test.exs config :explorer, Explorer.Repo, database\n  #         POSTGRES_DB: explorer_test\n  #         # match PGPASSWORD for elixir image above\n  #         POSTGRES_PASSWORD: postgres\n  #         # match PGUSER for elixir image above\n  #         POSTGRES_USER: postgres\n\n  #   working_directory: ~/app\n\n  #   steps:\n  #     - attach_workspace:\n  #         at: .\n\n  #     - run:\n  #         command: ./bin/install_chrome_headless.sh\n  #         no_output_timeout: 2400\n\n  #     - run: mix local.hex --force\n  #     - run: mix local.rebar --force\n\n  #     - run:\n  #         name: Wait for DB\n  #         command: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n  #     - run:\n  #         name: mix test --exclude no_geth\n  #         command: |\n  #           # Don't submit coverage report for forks, but let the build succeed\n  #           if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n  #             mix coveralls.html --exclude no_geth --parallel --umbrella\n  #           else\n  #             mix coveralls.circle --exclude no_geth --parallel --umbrella ||\n  #               # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status\n  #               (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && return $retval)\n  #           fi\n\n  #     - store_artifacts:\n  #         path: cover/excoveralls.html\n  #     - store_test_results:\n  #         path: _build/test/junit\n  # test_nethermind_http_websocket:\n  #   docker:\n  #     # Ensure .tool-versions matches\n  #     - image: circleci/elixir:1.10.3-node-browsers\n  #       environment:\n  #         MIX_ENV: test\n  #         # match POSTGRES_PASSWORD for postgres image below\n  #         PGPASSWORD: postgres\n  #         # match POSTGRES_USER for postgres image below\n  #         PGUSER: postgres\n  #         ETHEREUM_JSONRPC_CASE: \"EthereumJSONRPC.Case.Nethermind.HTTPWebSocket\"\n  #         ETHEREUM_JSONRPC_WEB_SOCKET_CASE: \"EthereumJSONRPC.WebSocket.Case.Nethermind\"\n  #     - image: circleci/postgres:10.10-alpine\n  #       environment:\n  #         # Match apps/explorer/config/test.exs config :explorer, Explorer.Repo, database\n  #         POSTGRES_DB: explorer_test\n  #         # match PGPASSWORD for elixir image above\n  #         POSTGRES_PASSWORD: postgres\n  #         # match PGUSER for elixir image above\n  #         POSTGRES_USER: postgres\n\n  #   working_directory: ~/app\n\n  #   steps:\n  #     - attach_workspace:\n  #         at: .\n\n  #     - run:\n  #         command: ./bin/install_chrome_headless.sh\n  #         no_output_timeout: 2400\n\n  #     - run: mix local.hex --force\n  #     - run: mix local.rebar --force\n\n  #     - run:\n  #         name: Wait for DB\n  #         command: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n  #     - run:\n  #         name: mix test --exclude no_nethermind\n  #         command: |\n  #           # Don't submit coverage report for forks, but let the build succeed\n  #           if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n  #             mix coveralls.html --exclude no_nethermind --parallel --umbrella\n  #           else\n  #             mix coveralls.circle --exclude no_nethermind --parallel --umbrella ||\n  #               # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status\n  #               (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && return $retval)\n  #           fi\n\n  #     - store_artifacts:\n  #         path: cover/excoveralls.html\n  #     - store_test_results:\n  #         path: _build/test/junit\n  test_nethermind_mox:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3-node-browsers\n        environment:\n          MIX_ENV: test\n          # match POSTGRES_PASSWORD for postgres image below\n          PGPASSWORD: postgres\n          # match POSTGRES_USER for postgres image below\n          PGUSER: postgres\n          ETHEREUM_JSONRPC_CASE: \"EthereumJSONRPC.Case.Nethermind.Mox\"\n          ETHEREUM_JSONRPC_WEB_SOCKET_CASE: \"EthereumJSONRPC.WebSocket.Case.Mox\"\n      - image: circleci/postgres:10.10-alpine\n        environment:\n          # Match apps/explorer/config/test.exs config :explorer, Explorer.Repo, database\n          POSTGRES_DB: explorer_test\n          # match PGPASSWORD for elixir image above\n          POSTGRES_PASSWORD: postgres\n          # match PGUSER for elixir image above\n          POSTGRES_USER: postgres\n\n    working_directory: ~/app\n\n    steps:\n      - attach_workspace:\n          at: .\n\n      - run:\n          command: ./bin/install_chrome_headless.sh\n          no_output_timeout: 2400\n\n      - run: mix local.hex --force\n      - run: mix local.rebar --force\n\n      - run:\n          name: Wait for DB\n          command: dockerize -wait tcp://localhost:5432 -timeout 1m\n\n      - run:\n          name: mix test --exclude no_nethermind\n          command: |\n            # Don't submit coverage report for forks, but let the build succeed\n            if [[ -z \"$COVERALLS_REPO_TOKEN\" ]]; then\n              mix coveralls.html --exclude no_nethermind --parallel --umbrella\n            else\n              mix coveralls.circle --exclude no_nethermind --parallel --umbrella ||\n                # if mix failed, then coveralls_merge won't run, so signal done here and return original exit status\n                (retval=$? && curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\" && return $retval)\n            fi\n\n      - store_artifacts:\n          path: cover/excoveralls.html\n      - store_test_results:\n          path: _build/test/junit\n  coveralls_merge:\n    docker:\n      # Ensure .tool-versions matches\n      - image: circleci/elixir:1.10.3\n        environment:\n          MIX_ENV: test\n\n    steps:\n      - run:\n          name: Tell coveralls.io build is done\n          command: curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d \"payload[build_num]=$CIRCLE_WORKFLOW_WORKSPACE_ID&payload[status]=done\"\nworkflows:\n  version: 2\n  primary:\n    jobs:\n      - build\n      - check_formatted:\n          requires:\n            - build\n      # This unfortunately will only fire if all the tests pass because of how `requires` works\n      - coveralls_merge:\n          requires:\n            # - test_nethermind_http_websocket\n            - test_nethermind_mox\n            # - test_geth_http_websocket\n            # - test_geth_mox\n      - credo:\n          requires:\n            - build\n      - deploy_aws:\n          filters:\n            branches:\n              only:\n                - production\n                - staging\n                - /deploy-[A-Za-z0-9]+$/\n          requires:\n            - check_formatted\n            - credo\n            - eslint\n            - jest\n            - sobelow\n            # - test_nethermind_http_websocket\n            - test_nethermind_mox\n            # - test_geth_http_websocket\n            # - test_geth_mox\n      - dialyzer:\n          requires:\n            - build\n      - eslint:\n          requires:\n            - build\n      - gettext:\n          requires:\n            - build\n      - jest:\n          requires:\n            - build\n      - release:\n          requires:\n            - build\n      - sobelow:\n          requires:\n            - build\n      # - test_nethermind_http_websocket:\n      #     requires:\n      #       - build\n      - test_nethermind_mox:\n          requires:\n            - build\n      # - test_geth_http_websocket:\n      #     requires:\n      #       - build\n      # - test_geth_mox:\n      #     requires:\n      #       - build\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".blockscout_config.example",
            "Dockerfile",
            "README.md",
            "devcontainer.json",
            "docker-compose.yml"
        ],
        "folders": [
            "bin"
        ]
    }
}