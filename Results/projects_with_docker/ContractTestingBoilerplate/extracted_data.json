{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<packaging>pom</packaging>\n\t<modules>\n\t\t<module>date-provider</module>\n\t\t<module>age-consumer</module>\n\t\t<module>date-producer-kafka</module>\n        <module>date-consumer-kafka</module>\n    </modules>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.5.4</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.example</groupId>\n\t<artifactId>ContractTestingBoilerplate</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>ContractTestingBoilerplate</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>1.8</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.junit.vintage</groupId>\n\t\t\t\t\t<artifactId>junit-vintage-engine</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: \"3\"\n\nservices:\n  postgres:\n    image: postgres\n    networks:\n      main:\n        aliases:\n          - postgres\n    healthcheck:\n      test: psql postgres --command \"select 1\" -U postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres-volume:/var/lib/postgresql/data\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: postgres\n\n  pact_broker:\n    image: pactfoundation/pact-broker\n    networks:\n      main:\n        aliases:\n          - pact_broker\n    ports:\n      - \"8282:9292\"\n    depends_on:\n      - postgres\n    environment:\n      PACT_BROKER_DATABASE_URL_ENVIRONMENT_VARIABLE_NAME: DATABASE_URL\n      DATABASE_URL: \"postgres://postgres:password@postgres/postgres\"\n      PACT_BROKER_DATABASE_USERNAME: postgres\n      PACT_BROKER_DATABASE_PASSWORD: password\n      PACT_BROKER_DATABASE_HOST: postgres\n      PACT_BROKER_DATABASE_NAME: postgres\n      PACT_BROKER_PORT: \"9292\"\n      PACT_BROKER_LOG_LEVEL: INFO\n      PACT_BROKER_WEBHOOK_HOST_WHITELIST: \"localhost\"\n      PACT_BROKER_WEBHOOK_SCHEME_WHITELIST: http\n      PACT_BROKER_WEBHOOK_HTTP_METHOD_WHITELIST: \"POST\"\n\n\n  jenkins:\n    # image: jenkins/jenkins\n    build: .\n    networks:\n      main:\n        aliases:\n          - web\n    ports:\n      - 8080:8080\n      - 50000:50000\n    links:\n      - pact_broker:pact_broker.com\n\n    # uncomment for docker in docker\n    privileged: true\nnetworks:\n  main:\nvolumes:\n  postgres-volume:",
            "Dockerfile": "FROM node\n\nFROM jenkins/jenkins\n\nENV JAVA_OPTS=\"-Djenkins.install.runSetupWizard=false\"\n\nARG GIT_COMMIT=unspecified\nLABEL git_commit=$GIT_COMMIT\n# Run this command to find git commit:-\n#docker inspect quay.io/shazchaudhry/docker-jenkins | jq '.[].ContainerConfig.Labels'\n\n# Once jenkins is running and configured, run the following command to find the list of plugins installed:\n##  curl -s -k \"http://admin:admin@localhost:8080/pluginManager/api/json?depth=1\" | jq -r '.plugins[].shortName' | tee plugins.txt\nRUN /usr/local/bin/install-plugins.sh \\\n  ace-editor \\\n  ant \\\n  antisamy-markup-formatter \\\n  authentication-tokens \\\n\tblueocean \\\n  blueocean-autofavorite \\\n  blueocean-commons \\\n  blueocean-config \\\n  blueocean-dashboard \\\n  blueocean-display-url \\\n  blueocean-events \\\n  blueocean-github-pipeline \\\n  blueocean-git-pipeline \\\n  blueocean-i18n \\\n  blueocean-jwt \\\n  blueocean-personalization \\\n  blueocean-pipeline-api-impl \\\n  blueocean-pipeline-editor \\\n  blueocean-pipeline-scm-api \\\n  blueocean-rest \\\n  blueocean-rest-impl \\\n  blueocean-web \\\n  bouncycastle-api \\\n  branch-api \\\n  build-timeout \\\n  cloudbees-folder \\\n  credentials \\\n  credentials-binding \\\n  display-url-api \\\n  docker-commons \\\n  docker-workflow \\\n  durable-task \\\n  email-ext \\\n  external-monitor-job \\\n  favorite \\\n  git \\\n  git-client \\\n  github \\\n  github-api \\\n  github-branch-source \\\n  gitlab-plugin \\\n  git-server \\\n  global-build-stats \\\n  gradle \\\n  handlebars \\\n  icon-shim \\\n  jackson2-api \\\n  jquery-detached \\\n  junit \\\n  keycloak \\\n  ldap \\\n  mailer \\\n  mapdb-api \\\n  matrix-auth \\\n  matrix-project \\\n  metrics \\\n  momentjs \\\n  pam-auth \\\n  pipeline-build-step \\\n  pipeline-github-lib \\\n  pipeline-graph-analysis \\\n  pipeline-input-step \\\n  pipeline-milestone-step \\\n  pipeline-model-api \\\n  pipeline-model-declarative-agent \\\n  pipeline-model-definition \\\n  pipeline-model-extensions \\\n  pipeline-rest-api \\\n  pipeline-stage-step \\\n  pipeline-stage-tags-metadata \\\n  pipeline-stage-view \\\n  plain-credentials \\\n  pubsub-light \\\n  purge-job-history \\\n  resource-disposer \\\n  role-strategy \\\n  scm-api \\\n  script-security \\\n  sse-gateway \\\n  ssh-credentials \\\n  ssh-slaves \\\n  structs \\\n  subversion \\\n  timestamper \\\n  token-macro \\\n  variant \\\n  windows-slaves \\\n  workflow-aggregator \\\n  workflow-api \\\n  workflow-basic-steps \\\n  workflow-cps \\\n  workflow-cps-global-lib \\\n  workflow-durable-task-step \\\n  workflow-job \\\n  workflow-multibranch \\\n  workflow-scm-step \\\n  workflow-step-api \\\n  workflow-support \\\n  ws-cleanup\n\nUSER root\n\n# # Install Docker from official repo\n# RUN apt-get update -qq && \\\n#     apt-get install -qqy apt-transport-https ca-certificates curl gnupg2 software-properties-common && \\\n#     curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \\\n#     apt-key fingerprint 0EBFCD88 && \\\n#     add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" && \\\n#     apt-get update -qq && \\\n#     apt-get install -qqy docker-ce && \\\n#     usermod -aG docker jenkins && \\\n#     chown -R jenkins:jenkins $JENKINS_HOME/\n\nRUN \\\n  apt-get update && apt-get install -y --no-install-recommends --no-install-suggests curl bzip2 build-essential libssl-dev libreadline-dev zlib1g-dev maven && \\\n  rm -rf /var/lib/apt/lists/* && \\\n  curl -L https://github.com/sstephenson/ruby-build/archive/v20180329.tar.gz | tar -zxvf - -C /tmp/ && \\\n  cd /tmp/ruby-build-* && ./install.sh && cd / && \\\n  ruby-build -v 2.5.1 /usr/local && rm -rfv /tmp/ruby-build-* && \\\n  gem install bundler --no-rdoc --no-ri && \\\n  gem install pact_broker-client\n\n# VOLUME [$JENKINS_HOME, \"/var/run/docker.sock\"]\nUSER root\nCOPY --from=0 /usr/local  /usr/local\nRUN npm --version\nUSER jenkins"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "README.md",
            "docker-compose.yml",
            "mvnw",
            "mvnw.cmd",
            "pom.xml"
        ],
        "folders": [
            ".github",
            ".mvn",
            "Jenkins",
            "age-consumer",
            "date-consumer-kafka",
            "date-producer-kafka",
            "date-provider",
            "images"
        ]
    }
}