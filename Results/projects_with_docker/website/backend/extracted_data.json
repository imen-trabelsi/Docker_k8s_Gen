{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.flowant</groupId>\n    <artifactId>website</artifactId>\n    <version>0.0.1</version>\n  </parent>\n\n  <artifactId>backend</artifactId>\n  <name>backend</name>\n  <description>backend of website</description>\n\n  <dependencies>\n\n    <dependency>\n      <groupId>${project.groupId}</groupId>\n      <artifactId>common</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-webflux</artifactId>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <executions>\n          <execution>\n            <id>copy-scripts</id>\n            <phase>validate</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <outputDirectory>${basedir}</outputDirectory>\n              <resources>\n                <resource>\n                  <directory>${project.parent.basedir}/scripts</directory>\n                  <includes>\n                    <include>wait-for-it.sh</include>\n                  </includes>\n                </resource>\n              </resources>\n            </configuration>\n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: \"3.7\"\n\nservices:\n\n  cassandra:\n    image: cassandra:latest\n    ports:\n      - \"9042\"\n      - \"7000\"\n    volumes:\n      - ~/site/cassandra_data:/var/lib/cassandra\n    networks:\n      - website\n\n  registry:\n    image: flowant/registry:0.0.1\n    build:\n      context: ./registry\n    ports:\n      - \"8761\"\n    env_file:\n      - ~/site/env_file.txt\n    networks:\n      website:\n        aliases:\n         - registry.flowant.org\n\n  auth:\n    image: flowant/authserver:0.0.1\n    build:\n      context: ./authserver\n    ports:\n      - \"80\"\n    env_file:\n      - ~/site/env_file.txt\n    networks:\n      website:\n        aliases:\n         - auth.flowant.org\n\n  backend:\n    image: flowant/backend:0.0.1\n    build:\n      context: ./backend\n    ports:\n      - \"80\"\n    env_file:\n      - ~/site/env_file.txt\n    volumes:\n      - ~/site/storage:/usr/share/website/backend/storage\n    networks:\n      website:\n        aliases:\n         - backend.flowant.org\n\n  gateway:\n    image: flowant/gateway:0.0.1\n    build:\n      context: ./gateway\n    ports:\n      - \"8443:443\"\n    env_file:\n      - ~/site/env_file.txt\n    networks:\n      website:\n        aliases:\n         - gateway.flowant.org\n\n  frontend:\n    image: flowant/frontend:0.0.1\n    build:\n      context: ./frontend\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ~/site/keystore:/etc/keystore\n    networks:\n      website:\n        aliases:\n         - www.flowant.org\n\nnetworks:\n  website:\n",
            "Dockerfile": "# build maven projects containing spring-boot application\n\nFROM maven:3.6.3-jdk-11-slim AS build\n\nWORKDIR /usr/share/website\n\nVOLUME /usr/share/website/\n\nVOLUME /root/.m2\n\nENTRYPOINT [\"/usr/share/website/scripts/wait-for-it.sh\", \"cassandra:9042\", \"--timeout=0\", \"--\", \"mvn\", \"clean\", \"install\"]",
            "Jenkinsfile": "def UUID = UUID.randomUUID().toString()\ndef NETWORK_ID = 'build_network_' + UUID\ndef builtPath\n\npipeline {\n\n    agent any\n\n    // Environment variables used in containers for test, production modes.\n    environment {\n        GOOGLE_CLIENT_ID = credentials('GOOGLE_CLIENT_ID')\n        GOOGLE_CLIENT_SECRET = credentials('GOOGLE_CLIENT_SECRET')\n        FACEBOOK_CLIENT_ID = credentials('FACEBOOK_CLIENT_ID')\n        FACEBOOK_CLIENT_SECRET = credentials('FACEBOOK_CLIENT_SECRET')\n        OAUTH2_KEYSTORE_STOREPASS = credentials('OAUTH2_KEYSTORE_STOREPASS')\n        OAUTH2_CLIENT_ID = credentials('OAUTH2_CLIENT_ID')\n        OAUTH2_CLIENT_PASSWORD = credentials('OAUTH2_CLIENT_PASSWORD')\n        SSL_KEYSTORE_STOREPASS = credentials('SSL_KEYSTORE_STOREPASS')\n    }\n\n    stages {\n\n        stage('Build Version Information') {\n            steps {\n                echo \"UUID: ${UUID}\"\n                echo \"NETWORK_ID: ${NETWORK_ID}\"\n                echo \"BUILD_ID: ${env.BUILD_ID}\"\n                echo \"BUILD_NUMBER: ${env.BUILD_NUMBER}\"\n                echo \"BUILD_TAG: ${env.BUILD_TAG}\"\n                echo \"BUILD_URL: ${env.BUILD_URL}\"\n                echo \"EXECUTOR_NUMBER: ${env.EXECUTOR_NUMBER}\"\n                echo \"JENKINS_URL: ${env.JENKINS_URL}\"\n                echo \"JOB_NAME: ${env.JOB_NAME}\"\n                echo \"NODE_NAME: ${env.NODE_NAME}\"\n                echo \"WORKSPACE: ${env.WORKSPACE}\"\n            }\n        }\n\n        stage('Create Docker Network') {\n            steps {\n                sh \"hostname\"\n                sh \"pwd\"\n                sh \"docker network create ${NETWORK_ID}\"\n            }\n        }\n\n        stage('Run Cassandra') {\n            steps {\n                sh \"hostname\"\n                sh \"pwd\"\n                sh \"docker run --name cassandra --network ${NETWORK_ID} -d -p 9042:9042 cassandra:latest\"\n            }\n        }\n\n        stage('Maven Build, UnitTest') {\n            agent {\n                docker {\n                    image 'maven:3.6.3-jdk-11-slim'\n                    args \"--network ${NETWORK_ID} -v $HOME/.m2:/root/.m2 -v $WORKSPACE:/usr/share/website\"\n                }\n            }\n            steps {\n                sh \"hostname\"\n                sh \"printenv\"\n                script {\n                    // Save the location for built artifacts\n                    builtPath = pwd()\n                }\n                echo \"pwd:${builtPath}\"\n                sh \"cd /usr/share/website\"\n                sh \"/usr/share/website/scripts/wait-for-it.sh cassandra:9042 --timeout=0 -- mvn clean install\"\n            }\n        }\n\n        stage('Build and Push Docker Images') {\n            steps {\n                script {\n                    // Change workspace containing built artifacts.\n                    ws(builtPath) {\n                        sh(\"hostname\")\n                        sh(\"pwd\")\n                        docker.withRegistry('', 'dockerhub_credential') {\n                            // Build and push docker images.\n                            docker.build(\"flowant/authserver:${env.BUILD_ID}\", \"./authserver\").push()\n                            // Remove local docker images after pushing\n                            sh(\"docker rmi flowant/authserver:${env.BUILD_ID}\")\n\n                            docker.build(\"flowant/backend:${env.BUILD_ID}\", \"./backend\").push()\n                            sh(\"docker rmi flowant/backend:${env.BUILD_ID}\")\n\n                            docker.build(\"flowant/frontend:${env.BUILD_ID}\", \"./frontend\").push()\n                            sh(\"docker rmi flowant/frontend:${env.BUILD_ID}\")\n\n                            docker.build(\"flowant/gateway:${env.BUILD_ID}\", \"./gateway\").push()\n                            sh(\"docker rmi flowant/gateway:${env.BUILD_ID}\")\n\n                            docker.build(\"flowant/registry:${env.BUILD_ID}\", \"./registry\").push()\n                            sh(\"docker rmi flowant/registry:${env.BUILD_ID}\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    post {\n        always {\n            // archiveArtifacts artifacts: 'build/libs/**/*.jar', fingerprint: true\n            // junit 'build/reports/**/*.xml'\n\n            sh \"hostname\"\n            sh \"pwd\"\n\n            echo 'Remove the docker containers and network'\n            sh \"docker container stop cassandra\"\n            sh \"docker container rm cassandra\"\n            sh \"docker network rm ${NETWORK_ID}\"\n\n            echo 'Remove the workspace'\n            deleteDir()\n        }\n\n        success {\n            echo 'This will run only if successful'\n        }\n\n        failure {\n            echo 'This will run only if failed'\n        }\n\n        unstable {\n            echo 'This will run only if the run was marked as unstable'\n        }\n\n        changed {\n            echo 'This will run only if the state of the Pipeline has changed'\n            echo 'For example, if the Pipeline was previously failing but is now successful'\n        }\n    }\n}\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".gitignore",
            "Dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}