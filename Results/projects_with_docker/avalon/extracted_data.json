{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "JavaScript",
        "dependencies": {
            "package.json": "{\n  \"dependencies\": {\n    \"@babel/core\": \"7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.18.6\",\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.20.7\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/runtime\": \"7\",\n    \"@samvera/ramp\": \"^3.3.0\",\n    \"babel-plugin-macros\": \"^3.1.0\",\n    \"babel-plugin-transform-react-remove-prop-types\": \"^0.4.24\",\n    \"buffer\": \"^6.0.3\",\n    \"compression-webpack-plugin\": \"9\",\n    \"cropperjs\": \"^1.5.5\",\n    \"css-loader\": \"^6.8.1\",\n    \"css-minimizer-webpack-plugin\": \"^5.0.1\",\n    \"hls.js\": \"https://github.com/avalonmediasystem/hls.js#stricter_ts_probing\",\n    \"mini-css-extract-plugin\": \"^2.7.6\",\n    \"moment\": \"^2.29.4\",\n    \"path-browserify\": \"^1.0.1\",\n    \"process\": \"^0.11.10\",\n    \"prop-types\": \"^15.7.2\",\n    \"react\": \"^17.0.1\",\n    \"react-bootstrap\": \"^1.0.0\",\n    \"react-dom\": \"^17.0.1\",\n    \"react-structural-metadata-editor\": \"https://github.com/avalonmediasystem/react-structural-metadata-editor#avalon-7.7.1\",\n    \"react_ujs\": \"^2.4.4\",\n    \"sass\": \"^1.65.1\",\n    \"sass-loader\": \"^13.3.2\",\n    \"shakapacker\": \"7.0.2\",\n    \"stream-browserify\": \"^3.0.0\",\n    \"style-loader\": \"^3.3.3\",\n    \"terser-webpack-plugin\": \"5\",\n    \"url-search-params-polyfill\": \"^7.0.1\",\n    \"util\": \"^0.12.5\",\n    \"video.js\": \"^8.10.0\",\n    \"webpack\": \"5\",\n    \"webpack-assets-manifest\": \"5\",\n    \"webpack-merge\": \"^5.9.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/plugin-transform-runtime\": \"7\",\n    \"@babel/preset-env\": \"7\",\n    \"babel-loader\": \"8\",\n    \"cypress\": \"^13.7.1\",\n    \"html-webpack-plugin\": \"^5.3.2\",\n    \"prop-types\": \"^15.7.2\",\n    \"webpack-cli\": \"5\",\n    \"webpack-dev-server\": \"5\"\n  },\n  \"resolutions\": {\n    \"glob-parent\": \"^6.0.2\"\n  },\n  \"scripts\": {\n    \"start-collection-index\": \"webpack-dev-server --mode development --config config/webpack/collection_index.js --host 0.0.0.0\",\n    \"start-collection-view\": \"webpack-dev-server --mode development --config config/webpack/collection_view.js --host 0.0.0.0\",\n    \"cypress:open\": \"cypress open -C spec/cypress/cypress.config.js\",\n    \"cypress:run\": \"cypress run -C spec/cypress/cypress.config.js\"\n  },\n  \"packageManager\": \"yarn@1.22.19\"\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            "docker-compose.yml": "volumes:\n  database:\n  fedora:\n  solr:\n  npms:\n  data:\n\nnetworks:\n  internal:\n  external:\n\nservices:\n  db: &db-avalon\n    image: postgres:14-alpine\n    volumes:\n      - database:/data\n    environment:\n      - PGDATA=/data\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=avalon\n      - POSTGRES_PASSWORD=password\n    networks:\n      internal:\n  db-test:\n    <<: *db-avalon\n    volumes: []\n\n  fedora: &fedora\n    image: fcrepo/fcrepo:6.4.0\n    depends_on:\n      - db\n    volumes:\n      - fedora:/usr/local/tomcat/fcrepo-home\n    environment:\n      - CATALINA_OPTS=-Dfcrepo.autoversioning.enabled=false\n    networks:\n      external:\n      internal:\n    ports:\n      - '8080:8080'\n    ulimits:\n      nofile:\n        soft: \"65536\"\n        hard: \"65536\"\n  fedora-test:\n    <<: *fedora\n    volumes: []\n\n  solr: &solr\n    image: solr:9\n    volumes:\n      - ./solr/conf:/opt/solr/avalon_conf\n      - solr:/var/solr\n    command:\n      - solr-precreate\n      - avalon\n      - /opt/solr/avalon_conf\n    networks:\n      internal:\n    ulimits:\n      nofile:\n        soft: \"65536\"\n        hard: \"65536\"\n  solr-test:\n    <<: *solr\n    volumes:\n      - ./solr/conf:/opt/solr/avalon_conf\n\n  hls:\n    image: avalonmediasystem/nginx:minio-jammy\n    environment:\n      - AVALON_DOMAIN=http://avalon:3000\n      - AVALON_STREAMING_BUCKET_URL=http://minio:9000/derivatives/\n    volumes:\n      - ./log/nginx:/var/log/nginx\n    ports:\n      - '8880:80'\n    networks:\n      internal:\n      external:\n\n  redis: &redis\n    image: redis:alpine\n    networks:\n      internal:\n  redis-test:\n    <<: *redis\n\n  avalon: &avalon\n    image: avalonmediasystem/avalon:develop\n    build:\n      context: .\n      target: dev\n    command: bash -c \"/docker_init.sh && bundle exec rails server -b 0.0.0.0\"\n    depends_on:\n      - db\n      - fedora\n      - solr\n      - redis\n      - hls\n      - minio\n    environment:\n      - APP_NAME=avalon\n      - BUNDLE_FLAGS=--with development postgres --without production test\n      - ENCODE_WORK_DIR=/tmp\n      - CONTROLLED_VOCABULARY=config/controlled_vocabulary.yml\n      - DATABASE_URL=postgres://postgres:password@db/avalon\n      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true\n      - FEDORA_NAMESPACE=avalon\n      - FEDORA_URL=http://fedoraAdmin:fedoraAdmin@fedora:8080/fcrepo/rest\n      - FEDORA_BASE_PATH=/test\n      - RAILS_ENV=development\n      - RAILS_ADDITIONAL_HOSTS=avalon\n      - SETTINGS__REDIS__HOST=redis\n      - SETTINGS__REDIS__PORT=6379\n      - SECRET_KEY_BASE=abcd\n      - SOLR_URL=http://solr:8983/solr/avalon\n      - AWS_REGION=us-east-1\n      - SETTINGS__ACTIVE_STORAGE__BUCKET=supplementalfiles\n      - SETTINGS__ACTIVE_STORAGE__SERVICE=generic_s3\n      - SETTINGS__FFMPEG__PATH=/usr/bin/ffmpeg\n      - SETTINGS__MINIO__ENDPOINT=http://minio:9000\n      - SETTINGS__MINIO__PUBLIC_HOST=http://localhost:9000\n      - SETTINGS__MINIO__ACCESS=minio\n      - SETTINGS__MINIO__SECRET=minio123\n      - SETTINGS__ENCODING__MASTERFILE_BUCKET=masterfiles\n      - SETTINGS__ENCODING__DERIVATIVE_BUCKET=derivatives\n      - SETTINGS__DROPBOX__PATH=s3://masterfiles/dropbox/\n      - SETTINGS__DROPBOX__UPLOAD_URI=s3://masterfiles/dropbox/\n      - SETTINGS__MASTER_FILE_MANAGEMENT__PATH=s3://preserves/\n      - SETTINGS__MASTER_FILE_MANAGEMENT__STRATEGY=move\n      - SETTINGS__STREAMING__CONTENT_PATH=/\n      - SETTINGS__STREAMING__STREAM_DEFAULT_QUALITY=medium\n      - SETTINGS__STREAMING__HTTP_BASE=http://localhost:8880/avalon\n      - SETTINGS__STREAMING__SERVER=nginx\n      - SETTINGS__STREAMING__STREAM_TOKEN_TTL=20\n      - SYSTEM_GROUPS=administrator,group_manager,manager\n    volumes:\n      - .:/home/app/avalon\n      - npms:/home/app/avalon/node_modules\n    ports:\n      - '3000:3000'\n    networks:\n      internal:\n      external:\n    stdin_open: true\n    tty: true\n\n  test:\n    <<: *avalon\n    command: >\n      bash -c \"/docker_init.sh && tail -f /dev/null\"\n    depends_on:\n      - db-test\n      - fedora-test\n      - solr-test\n      - redis-test\n    environment:\n      - DATABASE_URL=postgresql://postgres:password@db-test/avalon\n      - SETTINGS__FFMPEG__PATH=/usr/bin/ffmpeg\n      - SETTINGS__REDIS__HOST=redis-test\n      - SETTINGS__REDIS__PORT=6379\n      - FEDORA_URL=http://fedoraAdmin:fedoraAdmin@fedora-test:8080/fcrepo/rest\n      - FEDORA_BASE_PATH=/test\n      - SOLR_URL=http://solr-test:8983/solr/avalon\n      - RAILS_ENV=test\n      - BUNDLE_FLAGS=--with aws test postgres --without production\n      - DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL=true\n    ports: []\n\n  worker:\n    <<: *avalon\n    command: dumb-init -- bash -c \"bundle install && bundle exec sidekiq -C config/sidekiq.yml\"\n    ports: []\n\n  minio:\n    image: minio/minio:RELEASE.2024-01-29T03-56-32Z\n    command: minio server /data --console-address \":9090\"\n    environment:\n      MINIO_ACCESS_KEY: minio\n      MINIO_SECRET_KEY: minio123\n    volumes:\n      - data:/data\n    ports:\n      - 9000:9000\n      - 9090:9090\n    networks:\n      internal:\n      external:\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 30s\n      timeout: 20s\n      retries: 3\n\n  createbuckets:\n    image: minio/mc\n    depends_on:\n      - minio\n    entrypoint: >\n      /bin/sh -c \"\n      /usr/bin/mc config host add myminio http://minio:9000 minio minio123;\n      /usr/bin/mc mb -p myminio/fcrepo myminio/masterfiles myminio/derivatives myminio/supplementalfiles myminio/preserves;\n      /usr/bin/mc anonymous set download myminio/derivatives;\n      /usr/bin/mc anonymous set download myminio/supplementalfiles;\n      exit 0;\n      \"\n    networks:\n      internal:\n\n  cypress:\n    network_mode: host\n    image: cypress/included:latest\n    depends_on:\n      - avalon\n    entrypoint: cypress run -C spec/cypress/cypress.config.js\n    working_dir: /e2e\n    volumes:\n      - ./:/e2e\n      - npms:/e2e/node_modules\n    environment:\n      - CYPRESS_ENV=${CYPRESS_ENV:-local}\n",
            "Dockerfile": "# Base stage for building gems\nFROM        ruby:3.3-bullseye as bundle\nLABEL       stage=build\nLABEL       project=avalon\nRUN        apt-get update && apt-get upgrade -y build-essential && apt-get autoremove \\\n         && apt-get install -y --no-install-recommends --fix-missing \\\n            cmake \\\n            pkg-config \\\n            zip \\\n            git \\\n            ffmpeg \\\n            libsqlite3-dev \\\n            libjemalloc2 \\\n         && rm -rf /var/lib/apt/lists/* \\\n         && apt-get clean\n\nCOPY        Gemfile ./Gemfile\nCOPY        Gemfile.lock ./Gemfile.lock\n\nRUN         gem install bundler -v \"$(grep -A 1 \"BUNDLED WITH\" Gemfile.lock | tail -n 1)\" \\\n         && bundle config build.nokogiri --use-system-libraries\n\nENV         RUBY_THREAD_MACHINE_STACK_SIZE 8388608 \\\n            RUBY_THREAD_VM_STACK_SIZE 8388608 \\\n            LD_PRELOAD=\"libjemalloc.so.2\" \\\n            MALLOC_CONF=\"dirty_decay_ms:1000,narenas:2,background_thread:true\" \\\n            RUBY_YJIT_ENABLE=1\n\n\n# Build development gems\nFROM        bundle as bundle-dev\nLABEL       stage=build\nLABEL       project=avalon\nRUN         bundle config set --local without 'production' \\\n         && bundle config set --local with 'aws development test postgres' \\\n         && bundle install\n\n\n# Download binaries in parallel\nFROM        ruby:3.3-bullseye as download\nLABEL       stage=build\nLABEL       project=avalon\nRUN         curl -L https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz | tar xvz -C /usr/bin/\nRUN         curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /chrome.deb\nRUN         chrome_version=`dpkg-deb -f /chrome.deb Version | cut -d '.' -f 1-3`\nRUN         chromedriver_version=`curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${chrome_version}`\nRUN         curl https://chromedriver.storage.googleapis.com/index.html?path=${chromedriver_version} -o /usr/local/bin/chromedriver \\\n         && chmod +x /usr/local/bin/chromedriver\nRUN      apt-get -y update && apt-get install -y ffmpeg\n\n\n# Base stage for building final images\nFROM        ruby:3.3-slim-bullseye as base\nLABEL       stage=build\nLABEL       project=avalon\nRUN         echo \"deb     http://ftp.us.debian.org/debian/    bullseye main contrib non-free\"  >  /etc/apt/sources.list.d/bullseye.list \\\n         && echo \"deb-src http://ftp.us.debian.org/debian/    bullseye main contrib non-free\"  >> /etc/apt/sources.list.d/bullseye.list \\\n         && cat /etc/apt/sources.list.d/bullseye.list \\\n         && mkdir -p /etc/apt/keyrings \\\n         && apt-get update && apt-get install -y --no-install-recommends curl ca-certificates gnupg2 ffmpeg \\\n         && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \\\n         && echo \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" > /etc/apt/sources.list.d/nodesource.list \\\n         && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \\\n         && echo \"deb http://dl.yarnpkg.com/debian/ stable main\" | tee /etc/apt/sources.list.d/yarn.list \\\n         && cat /etc/apt/sources.list.d/nodesource.list \\\n         && cat /etc/apt/sources.list.d/yarn.list\n\nRUN         apt-get update && \\\n            apt-get -y dist-upgrade && \\\n            apt-get install -y --no-install-recommends --allow-unauthenticated \\\n            nodejs \\\n            yarn \\\n            lsof \\\n            x264 \\\n            sendmail \\\n            git \\\n            libxml2-dev \\\n            libxslt-dev \\\n            libpq-dev \\\n            openssh-client \\\n            zip \\\n            dumb-init \\\n            libsqlite3-dev \\\n            libjemalloc2 \\\n         && apt-get -y install mediainfo \\\n         && ln -s /usr/bin/lsof /usr/sbin/\n\nRUN         useradd -m -U app \\\n         && su -s /bin/bash -c \"mkdir -p /home/app/avalon\" app\nWORKDIR     /home/app/avalon\n\nENV         LD_PRELOAD=\"libjemalloc.so.2\" \\\n            MALLOC_CONF=\"dirty_decay_ms:1000,narenas:2,background_thread:true\" \\\n            RUBY_YJIT_ENABLE=1\n\n\n# Build devevelopment image\nFROM        base as dev\nLABEL       stage=final\nLABEL       project=avalon\nRUN         apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated \\\n            build-essential \\\n            cmake\n\nCOPY        --from=bundle-dev /usr/local/bundle /usr/local/bundle\nCOPY        --from=download /chrome.deb /\nCOPY        --from=download /usr/local/bin/chromedriver /usr/local/bin/chromedriver\nCOPY        --from=download /usr/bin/dockerize /usr/bin/\nADD         docker_init.sh /\n\nARG         RAILS_ENV=development\nRUN         dpkg -i /chrome.deb || apt-get install -yf\n\n\n# Build production gems\nFROM        bundle as bundle-prod\nLABEL       stage=build\nLABEL       project=avalon\nRUN         bundle config set --local without 'development test' \\\n         && bundle config set --local with 'aws production postgres' \\\n         && bundle install\n\n\n# Install node modules\nFROM        node:20-bullseye-slim as node-modules\nLABEL       stage=build\nLABEL       project=avalon\nRUN         apt-get update && apt-get install -y --no-install-recommends git ca-certificates\nCOPY        package.json .\nCOPY        yarn.lock .\nRUN         yarn install\n\n\n# Build production assets\nFROM        base as assets\nLABEL       stage=build\nLABEL       project=avalon\nCOPY        --from=bundle-prod --chown=app:app /usr/local/bundle /usr/local/bundle\nCOPY        --chown=app:app . .\nCOPY        --from=node-modules --chown=app:app /node_modules ./node_modules\n\nUSER        app\nENV         RAILS_ENV=production\n\nRUN         SECRET_KEY_BASE=$(ruby -r 'securerandom' -e 'puts SecureRandom.hex(64)') SHAKAPACKER_ASSET_HOST='' bundle exec rake assets:precompile\nRUN         cp config/controlled_vocabulary.yml.example config/controlled_vocabulary.yml\n\n\n# Build production image\nFROM        base as prod\nLABEL       stage=final\nLABEL       project=avalon\nCOPY        --from=assets --chown=app:app /home/app/avalon /home/app/avalon\nCOPY        --from=bundle-prod --chown=app:app /usr/local/bundle /usr/local/bundle\n\nUSER        app\nENV         RAILS_ENV=production\n",
            ".circleci/config.yml": "version: 2.1\norbs:\n  samvera: samvera/circleci-orb@1\njobs:\n  build:\n    docker:\n      # Primary container image where all steps run.\n      - image: avalonmediasystem/avalon:develop\n        environment:\n          - DATABASE_URL=postgresql://postgres@localhost:5432/postgres\n          - FEDORA_URL=http://fedoraAdmin:fedoraAdmin@localhost:8080/fcrepo/rest\n          - FEDORA_BASE_PATH=/test\n          - FEDORA_TIMEOUT=300\n          - RAILS_ENV=test\n      # Secondary container image on common network.\n      - image: postgres:10-alpine\n        environment:\n          - POSTGRES_USER=postgres\n          - POSTGRES_DB=avalon\n          - POSTGRES_PASSWORD=password\n      - image: fcrepo/fcrepo:6.5-tomcat9\n        environment:\n          CATALINA_OPTS: -Dfcrepo.autoversioning.enabled=false\n      - image: zookeeper:3.9\n        environment:\n          ZOO_ADMINSERVER_ENABLED: false\n      - image: solr:9\n        environment:\n          VERBOSE: yes\n          SECURITY_JSON: '{\"authentication\":{\"blockUnknown\": false, \"class\":\"solr.BasicAuthPlugin\", \"credentials\":{\"solr\":\"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0= Ndd7LKvVBAaZIF0QAVi1ekCfAJXr1GGfLtRUXhgrF8c=\"}, \"realm\":\"My Solr users\", \"forwardCredentials\": false}, \"authorization\":{ \"class\":\"solr.RuleBasedAuthorizationPlugin\", \"permissions\":[{\"name\":\"security-edit\", \"role\":\"admin\"}], \"user-role\":{\"solr\":\"admin\"}}}'\n        command: sh -c \"server/scripts/cloud-scripts/zkcli.sh -zkhost localhost:2181 -cmd put /security.json \\\"${SECURITY_JSON}\\\" && solr-fg -cloud -noprompt  -p << parameters.solr_port >> -z localhost:2181\"\n      - image: redis:alpine\n\n    parameters:\n      ruby_ver:\n        description: 'Ruby version'\n        default: '3.1'\n        type: 'string'\n      solr_port:\n        type: string\n        default: '8985'\n      parallelism:\n        type: integer\n        default: 4\n      solr_config_path:\n        type: string\n        default: 'solr/conf'\n      core_name:\n        type: string\n        default: 'hydra-test'\n\n    working_directory: /home/app/avalon\n\n    parallelism: << parameters.parallelism >>\n\n    steps:\n      - run:\n          name: Clean out existing code\n          command: rm -rf .[!.]* *\n\n      - run: git config --global --add safe.directory /home/app/avalon\n\n      - samvera/cached_checkout\n\n      - run: cp config/controlled_vocabulary.yml.example config/controlled_vocabulary.yml\n\n      - run:\n          command: |\n            unset BUNDLE_APP_CONFIG\n            bundle install --with aws development test postgres --without production --jobs=4 --retry=3\n            bundle exec rake db:migrate\n\n      - restore_cache:\n          keys:\n            - yarn-cache-v1-{{ arch }}-{{ checksum \"yarn.lock\" }}\n\n      - run: yarn\n\n      - save_cache:\n          key: yarn-cache-v1-{{ arch }}-{{ checksum \"yarn.lock\" }}\n          paths:\n            - .cache/yarn\n\n      # Copy solr 8 compliant step from unreleased version of orb\n      #- samvera/install_solr_core:\n      #    solr_config_path: << parameters.solr_config_path >>\n      - run:\n          name: Wait for Solr\n          command: dockerize -wait tcp://localhost:<< parameters.solr_port >> -timeout 1m\n      - run:\n          name: Create solr core\n          command: |\n            if [ -d << parameters.solr_config_path >> ]\n            then\n              cd << parameters.solr_config_path >>\n            else\n              if [ -d \"$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/conf\" ]\n              then\n                cd \"$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/conf\"\n              else\n                cd \"$(bundle show active-fedora)/lib/generators/active_fedora/config/solr/templates/solr/config\"\n              fi\n            fi\n            zip -1 -r solr_conf.zip ./*\n            curl -H \"Content-type:application/octet-stream\" --data-binary @solr_conf.zip \"http://solr:SolrRocks@127.0.0.1:<< parameters.solr_port >>/solr/admin/configs?action=UPLOAD&name=solrconfig\"\n            curl \"http://solr:SolrRocks@127.0.0.1:<< parameters.solr_port >>/solr/admin/collections?action=CREATE&name=hydra-test&numShards=1&collection.configName=solrconfig\"\n\n      - run:\n          command: |\n            if [[ $(command -v cc-test-reporter) == \"\" ]]; then\n              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n              chmod +x ./cc-test-reporter\n            fi\n      - run:\n          command: ./cc-test-reporter before-build\n\n      # Pull in the parallel_rspec step and modify it to ensure that test results get stored\n      # - samvera/parallel_rspec\n      - run: mkdir /tmp/test-results\n      - run:\n          name: Run rspec in parallel\n          command: |\n            circleci tests glob \"spec/**/*_spec.rb\" | circleci tests run --command=\"xargs bundle exec rspec --format progress --format RspecJunitFormatter -o /tmp/test-results/rspec.xml\" --verbose --split-by=timings\n      # collect reports\n      - store_test_results:\n          path: /tmp/test-results\n      - store_artifacts:\n          path: /tmp/test-results\n          destination: test-results\n\n      - run:\n          command: ./cc-test-reporter format-coverage -t simplecov -o \"coverage/codeclimate.$CIRCLE_NODE_INDEX.json\"\n\n      - persist_to_workspace:\n          root: coverage\n          paths:\n            - codeclimate.*.json\n\n  upload-coverage:\n    parameters:\n      parallelism:\n        type: integer\n        default: 4\n    docker:\n      # Primary container image where all steps run.\n      - image: avalonmediasystem/avalon:7.8.0-dev\n\n    working_directory: /home/app/avalon\n\n    steps:\n      - attach_workspace:\n          at: /home/app/avalon\n\n      - run:\n          name: Install Code Climate Test Reporter\n          command: |\n            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter\n            chmod +x ./cc-test-reporter\n\n      - deploy:\n          # CC_TEST_REPORTER_ID set within the circleci web interface\n          command: ./cc-test-reporter sum-coverage --output - --parts << parameters.parallelism >> codeclimate.*.json | ./cc-test-reporter upload-coverage --debug --input -\n\nworkflows:\n  version: 2\n  build_test_report:\n    jobs:\n      - build:\n          ruby_ver: '3.3'\n          name: 'Ruby3-3'\n          parallelism: 4\n      - upload-coverage:\n          parallelism: 4\n          requires:\n            - Ruby3-3\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".browserslistrc",
            ".codeclimate.yml",
            ".dockerignore",
            ".eslintignore",
            ".eslintrc",
            ".fcrepo_wrapper",
            ".gitignore",
            ".prettierrc",
            ".rspec",
            ".rubocop.cc.yml",
            ".rubocop.yml",
            ".solr_wrapper",
            ".travis.yml",
            "Capfile",
            "Dockerfile",
            "ENVIRONMENT_CONFIG.md",
            "Gemfile",
            "Gemfile.lock",
            "LICENSE",
            "LICENSE_HEADER",
            "README.md",
            "Rakefile",
            "babel.config.js",
            "config.ru",
            "cron.yaml",
            "docker-compose.yml",
            "docker_init.sh",
            "package.json",
            "podman-compose.yml",
            "postcss.config.js",
            "yarn.lock"
        ],
        "folders": [
            ".circleci",
            ".dependabot",
            ".ebextensions",
            ".github",
            "app",
            "bin",
            "config",
            "db",
            "lib",
            "log",
            "public",
            "script",
            "scriptdata",
            "solr",
            "spec",
            "test",
            "vendor"
        ]
    }
}