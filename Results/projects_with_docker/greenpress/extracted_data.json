{
    "source_code_info": {
        "language": "JavaScript",
        "framework": "Node.js",
        "dependencies": {
            "package.json": "{\n  \"name\": \"@greenpress/monorepo\",\n  \"version\": \"2.0.21\",\n  \"description\": \"Open-source blogs and content websites platform, made for the 21st century\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"postinstall\": \"lerna bootstrap\",\n    \"install:prod-only\": \"lerna bootstrap -- --production\",\n    \"prebuild\": \"lerna run prebuild --parallel\",\n    \"build\": \"npm run prebuild && lerna run build\",\n    \"clean\": \"lerna clean --yes\",\n    \"dev\": \"env-cmd lerna run dev --parallel\",\n    \"start\": \"lerna exec npm start --scope=@greenpress/greenpress\",\n    \"populate-db\": \"lerna exec npm run populate-db --scope=@greenpress/greenpress\",\n    \"pack-package\": \"lerna exec npm pack\",\n    \"rename-pack\": \"lerna exec node ../../tools/bundler/rename-pack.js\",\n    \"test\": \"lerna run test --parallel\"\n  },\n  \"author\": \"David Meir-Levy <davidmeirlevy@gmail.com>\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=16.x\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/greenpress/greenpress/issues\"\n  },\n  \"homepage\": \"https://github.com/greenpress/greenpress#readme\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/greenpress/greenpress.git\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^27.0.2\",\n    \"@types/node\": \"^16.11.22\",\n    \"env-cmd\": \"^10.1.0\",\n    \"jest\": \"^27.0.4\",\n    \"lerna\": \"^4.0.0\",\n    \"ts-node\": \"^10.2.1\"\n  }\n}\n"
        },
        "database": null,
        "build_system": "npm",
        "config_files": {
            ".env": "MONGO_URI=mongodb://localhost/greenpress\nSECRETS_SERVICE_SECRET=secrets-service-secret\nPLUGINS_SERVICE_SECRET=plugins-service-secret\nAUTH_SERVICE_SECRET=auth-service-secret\nINTERNAL_SECRET=\"no one can access this service without it\"\nSECRETS_SERVICE_PORT=9002\n",
            "application.yaml": "apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: greenpress-charts\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/tikokito123/greenpress.git\n    targetRevision: helm-charts\n    chart: \n    path: umbrella-chart\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: default\n  syncPolicy:\n    automated:\n      selfHeal: true\n      prune: true\n",
            "Dockerfile": "FROM node:16.5\nCOPY . .\nENV NODE_ENV=development\nRUN npm install --unsafe-perm\nRUN npm run build\n\nRUN npm run clean\nENV NODE_ENV=production\nRUN npm run install:prod-only\n",
            ".circleci/config.yml": "# Use the latest 2.1 version of CircleCI pipeline process engine.\n# See: https://circleci.com/docs/2.0/configuration-reference\nversion: 2.1\n\norbs:\n  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize\n  # Orbs reduce the amount of configuration required for common tasks.\n  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node\n  node: circleci/node@4.1\n\nexecutors:\n  gp-machine:\n    machine: true\n  test-machine:\n    machine: true\n\njobs:\n  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.\n  build-base-monorepo:\n    executor: gp-machine\n    # Then run your tests!\n    # CircleCI will report the results back to your VCS provider.\n    steps:\n      # Checkout the code as the first step.\n      - checkout\n      - run:\n          name: Docker login\n          command: echo \"$DOCKER_PASS\" | docker login --username $DOCKER_USER --password-stdin\n      - run:\n          name: Replace slash to branch name\n          command: echo \"export BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed 's,/,-,g')\" >> $BASH_ENV\n      - run:\n          name: Print branch name\n          command: echo $BRANCH_NAME\n      - run:\n          name: Docker build\n          command: docker build . -t greenpress/monorepo:$BRANCH_NAME\n      - run: docker push greenpress/monorepo:$BRANCH_NAME\n      - persist_to_workspace:\n          root: .\n          paths:\n            - .\n  build-apps:\n    executor: gp-machine\n    steps:\n      - attach_workspace:\n          at: .\n      - run:\n            name: Replace slash to branch name\n            command: echo \"export BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed 's,/,-,g')\" >> $BASH_ENV\n      - run:\n          name: Docker login\n          command: echo \"$DOCKER_PASS\" | docker login --username $DOCKER_USER --password-stdin\n      - run: |\n          cd compose/builders\n          docker build . -f admin.Dockerfile -t greenpress/admin-panel:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/admin-panel:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/admin-panel:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/admin-panel/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/admin-panel:$BRANCH_NAME greenpress/admin-panel:latest\n          docker push greenpress/admin-panel:latest\n          docker tag greenpress/admin-panel:latest greenpress/admin-panel:${localVersion}\n          docker push greenpress/admin-panel:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f auth.Dockerfile -t greenpress/auth:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/auth:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/auth:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/auth/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/auth:$BRANCH_NAME greenpress/auth:latest\n          docker push greenpress/auth:latest\n          docker tag greenpress/auth:latest greenpress/auth:${localVersion}\n          docker push greenpress/auth:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f assets.Dockerfile -t greenpress/assets:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/assets:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/assets:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/assets/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/assets:$BRANCH_NAME greenpress/assets:latest\n          docker push greenpress/assets:latest\n          docker tag greenpress/assets:latest greenpress/assets:${localVersion}\n          docker push greenpress/assets:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f content.Dockerfile -t greenpress/content:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/content:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/content:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/content/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/content:$BRANCH_NAME greenpress/content:latest\n          docker push greenpress/content:latest\n          docker tag greenpress/content:latest greenpress/content:${localVersion}\n          docker push greenpress/content:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f drafts.Dockerfile -t greenpress/drafts:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/drafts:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/drafts:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/drafts/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/drafts:$BRANCH_NAME greenpress/drafts:latest\n          docker push greenpress/drafts:latest\n          docker tag greenpress/drafts:latest greenpress/drafts:${localVersion}\n          docker push greenpress/drafts:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f plugins.Dockerfile -t greenpress/plugins:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/plugins:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/plugins:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/plugins/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/plugins:$BRANCH_NAME greenpress/plugins:latest\n          docker push greenpress/plugins:latest\n          docker tag greenpress/plugins:latest greenpress/plugins:${localVersion}\n          docker push greenpress/plugins:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f secrets.Dockerfile -t greenpress/secrets:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/secrets:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/secrets:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/secrets/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/secrets:$BRANCH_NAME greenpress/secrets:latest\n          docker push greenpress/secrets:latest\n          docker tag greenpress/secrets:latest greenpress/secrets:${localVersion}\n          docker push greenpress/secrets:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f gateway.Dockerfile -t greenpress/gateway:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/gateway:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/gateway:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/gateway/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/gateway:$BRANCH_NAME greenpress/gateway:latest\n          docker push greenpress/gateway:latest\n          docker tag greenpress/gateway:latest greenpress/gateway:${localVersion}\n          docker push greenpress/gateway:${localVersion};\n          fi\n      - run: |\n          cd compose/builders\n          docker build . -f front-ssr.Dockerfile -t greenpress/front-ssr:$BRANCH_NAME --build-arg MONOREPO_VERSION=$BRANCH_NAME\n          docker push greenpress/front-ssr:$BRANCH_NAME\n          localVersion=v$(docker run -it greenpress/front-ssr:$BRANCH_NAME sed 's/.*\"version\": \"\\(.*\\)\".*/\\1/;t;d' ./package.json)\n          localVersion=$(echo ${localVersion} | tr -d \"^@\" | tr -d \"\\r\")\n          dockerHubVersion=$(wget -q -O- \"https://index.docker.io/v1/repositories/greenpress/front-ssr/tags/${localVersion}\" || true)\n          if [ \"$dockerHubVersion\" = \"[]\"  ]; then\n          echo \"version: ${localVersion} already exist in docker hub\";\n          else docker tag greenpress/front-ssr:$BRANCH_NAME greenpress/front-ssr:latest\n          docker push greenpress/front-ssr:latest\n          docker tag greenpress/front-ssr:latest greenpress/front-ssr:${localVersion}\n          docker push greenpress/front-ssr:${localVersion};\n          fi\n  test:\n    executor: test-machine\n    steps:\n      # Checkout the code as the first step.\n      - checkout\n      - run:\n          name: Print branch name\n          command: echo $CIRCLE_BRANCH\n      - run:\n          name: Run test using Docker\n          command: docker build . -f Dockerfile.test\nworkflows:\n  build-monorepo:\n    jobs:\n      -  build-base-monorepo:\n           filters:\n             branches:\n               only:\n                 - main\n                 - dev\n      -  build-apps:\n           requires:\n             - build-base-monorepo\n           filters:\n             branches:\n               only:\n                 - main\n                 - dev\n  test-all:\n    jobs:\n      -  test\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".nvmrc",
            "CONTRIBUTING.md",
            "Dockerfile",
            "LICENSE.md",
            "README.md",
            "index.js",
            "package-lock.json",
            "package.json"
        ],
        "folders": [
            "config",
            "helpers",
            "migrator",
            "server"
        ]
    }
}