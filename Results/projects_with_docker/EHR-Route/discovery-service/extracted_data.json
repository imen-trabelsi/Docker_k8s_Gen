{
    "source_code_info": {
        "language": "Java",
        "framework": "Spring Boot",
        "dependencies": {
            "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\n\t<parent>\n\t\t<groupId>ehrroute</groupId>\n\t\t<artifactId>ehrroute</artifactId>\n\t\t<version>0.0.1-SNAPSHOT</version>\n\t</parent>\n\n\t<groupId>ehroute.discoveryservice</groupId>\n\t<artifactId>discovery-service</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<packaging>jar</packaging>\n\n\t<name>discovery-service</name>\n\t<description>EHRoute Eureka Discovery Service Project</description>\n\n\t<properties>\n\t\t<java.version>11</java.version>\n\t\t<spring-cloud.version>Hoxton.SR6</spring-cloud.version>\n\t\t<sonar.projectKey>ehroute:discovery-service</sonar.projectKey>\n\t\t<sonar.organization>ehroute</sonar.organization>\n\t\t<sonar.host.url>https://sonarcloud.io</sonar.host.url>\n\t</properties>\n\n\t<dependencies>\n\n\t\t<!-- Spring Starters -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t\t<optional>true</optional>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.junit.vintage</groupId>\n\t\t\t\t\t<artifactId>junit-vintage-engine</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\n\n\t\t<!-- Eureka Server -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>\n\t\t</dependency>\n\n\n\t\t<!-- Config Client -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t<artifactId>spring-cloud-starter-config</artifactId>\n\t\t</dependency>\n\n\t</dependencies>\n\n\t<dependencyManagement>\n\t\t<dependencies>\n\t\t\t<dependency>\n\t\t\t\t<groupId>org.springframework.cloud</groupId>\n\t\t\t\t<artifactId>spring-cloud-dependencies</artifactId>\n\t\t\t\t<version>${spring-cloud.version}</version>\n\t\t\t\t<type>pom</type>\n\t\t\t\t<scope>import</scope>\n\t\t\t</dependency>\n\t\t</dependencies>\n\t</dependencyManagement>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<layers>\n\t\t\t\t\t\t<enabled>true</enabled>\n\t\t\t\t\t</layers>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.sonarsource.scanner.maven</groupId>\n\t\t\t\t<artifactId>sonar-maven-plugin</artifactId>\n\t\t\t\t<version>3.3.0.603</version>\n\t\t\t\t<inherited>false</inherited>\n\t\t\t\t<executions>\n\t\t\t\t\t<execution>\n\t\t\t\t\t\t<id>running-sonar</id>\n\t\t\t\t\t\t<goals>\n\t\t\t\t\t\t\t<goal>sonar</goal>\n\t\t\t\t\t\t</goals>\n\t\t\t\t\t\t<phase>install</phase>\n\t\t\t\t\t</execution>\n\t\t\t\t</executions>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n"
        },
        "database": null,
        "build_system": "Maven",
        "config_files": {
            "docker-compose.yml": "version: '3'\n\nservices:\n  \n  config:\n    build:\n      context: ./config-server\n      dockerfile: dockerfile\n    ports:\n      - 8888:8888\n    networks:\n      - net\n    mem_limit: 512MB\n    hostname: config\n    container_name: config\n  \n  discovery:\n    build:\n      context: ./discovery-service\n      dockerfile: dockerfile\n    ports:\n      - 8761:8761\n    networks:\n      - net\n    mem_limit: 512MB\n    depends_on:\n      - config\n    hostname: discovery\n    container_name: discovery\n    command: [\"./wait-for-it.sh\",\"config:8888\",\"--timeout=100\",\"--\",\"/usr/local/bin/start.sh\"]\n\n  gateway:\n    build:\n      context: ./gateway-service\n      dockerfile: dockerfile\n    ports:\n      - 8080:8080\n    networks:\n      - net\n    mem_limit: 512MB\n    depends_on:\n      - config\n      - discovery\n    hostname: gateway\n    container_name: gateway\n    command: [\"./wait-for-it.sh\",\"discovery:8761\",\"--timeout=100\",\"--\",\"/usr/local/bin/start.sh\"]\n \n  auth:\n    build:\n      context: ./auth-service\n      dockerfile: dockerfile\n    ports:\n      - 8083:8083\n    networks:\n      - net\n    mem_limit: 512MB\n    depends_on:\n      - config\n      - discovery\n      - gateway\n    hostname: auth\n    container_name: auth\n    command: [\"./wait-for-it.sh\",\"gateway:8080\",\"--timeout=100\",\"--\",\"/usr/local/bin/start.sh\"]\n\n  patient:\n    build:\n      context: ./patient-service\n      dockerfile: dockerfile\n    ports:\n      - 8082:8082\n    networks:\n      - net\n    mem_limit: 512MB\n    depends_on:\n      - config\n      - discovery\n      - gateway\n      - auth\n    hostname: patient\n    container_name: patient\n    command: [\"./wait-for-it.sh\",\"gateway:8080\",\"--timeout=100\",\"--\",\"/usr/local/bin/start.sh\"]\n\n  provider:\n    build:\n      context: ./provider-service\n      dockerfile: dockerfile\n    ports:\n      - 8081:8081\n    networks:\n      - net\n    mem_limit: 512MB\n    depends_on:\n      - config\n      - discovery\n      - gateway\n      - auth\n    hostname: provider\n    container_name: provider\n    command: [\"./wait-for-it.sh\",\"gateway:8080\",\"--timeout=100\",\"--\",\"/usr/local/bin/start.sh\"]\n\nnetworks:\n  net:\n    driver: bridge",
            ".circleci/config.yml": "version: 2.1\n\nparameters:\n\n  # ---------------------------------------------------------------------------- #\n  #                                    Trigger                                   #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  # Branch that triggers builds\n  trigger-branch: \n    default: production\n    type: string\n\n  # Used to trigger the main workflow\n  trigger:\n    type: boolean\n    default: true\n\n  # endregion\n\n  # ---------------------------------------------------------------------------- #\n  #                                   Services                                   #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  config-server:\n    type: boolean\n    default: false\n\n  discovery-service:\n    type: boolean\n    default: false\n\n  gateway-service:\n    type: boolean\n    default: false\n\n  identity-service:\n    type: boolean\n    default: false\n\n  patient-service:\n    type: boolean\n    default: false\n\n  provider-service:\n    type: boolean\n    default: false\n\n  # endregion\n\n  # ---------------------------------------------------------------------------- #\n  #                                  Deployment                                  #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  deploy:\n    type: boolean\n    default: false\n\n  #endregion\n\nexecutors:\n  jdk11:\n    docker:\n      - image: circleci/openjdk:11.0.1-jdk\n        auth:\n          username: $DOCKER_USER\n          password: $DOCKER_PASS\n\njobs:\n\n  # ---------------------------------------------------------------------------- #\n  #                                    Trigger                                   #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  trigger-workflows:\n\n    docker:\n      - image: cimg/base:stable\n\n    steps:\n      - checkout\n      - run:\n          # This step is added to demonstrate the possibility to dynamically set the user token\n          name: Set token\n          command: echo \"export CIRCLE_USER_TOKEN=${CIRCLECI_TOKEN}\" >> $BASH_ENV\n      - run:\n          name: Trigger workflows\n          command: chmod +x .circleci/monorepo.sh && .circleci/monorepo.sh\n          environment:\n            # (optional) print additional debug information\n            MONOREPO_DEBUG: \"true\"\n            # (optional) additional CI parameters to include in the pipeline (must be a valid JSON)\n            CI_PARAMETERS: '{ \"deploy\": true }'\n\n  # endregion\n\n  # ---------------------------------------------------------------------------- #\n  #                                     Build                                    #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  build:\n\n    parameters:\n      package_name:\n        type: string\n\n    executor: jdk11\n    working_directory: ~/project/<< parameters.package_name >>\n\n    environment:\n      # Limit max heap to 512MB for Heroku's max memory limit on free apps\n      JVM_OPTS: -Xmx512m\n      TERM: dumb\n      GIT_USERNAME: ${GIT_USERNAME}\n      GIT_PASSWORD: ${GIT_PASSWORD}\n\n    steps:\n\n      - checkout:\n          path: ~/project\n\n      - run: echo \"Building << parameters.package_name >> ...\"\n\n      #  - persist_to_workspace:\n      #    root: ~/project\n      #    paths:\n      #      - << parameters.package_name >>\n\n      - setup_remote_docker:\n          version: 19.03.13\n\n      # Decrypt app properties\n      # - run: openssl enc -d -aes-256-ecb -md md5 -in src/main/resources/application.yml.secrets -out src/main/resources/application.yml -k $DECRYPTION_KEY\n\n      # Restore dependencies cache\n      - restore_cache:\n          key: v1-dependencies-{{ checksum \"pom.xml\" }}\n      - run: mvn dependency:go-offline\n\n      # Cache dependencies\n      - save_cache:\n          key: v1-dependencies-{{ checksum \"pom.xml\" }}\n          paths: \n            - ~/.m2\n\n      # Upload code coverage report\n      - run: bash <(curl -s https://codecov.io/bash)\n\n      # Analyze on SonarCloud\n      - run: mvn verify sonar:sonar -Dsonar.projectKey=ehroute:<< parameters.package_name >> -Dsonar.login=${SONAR_TOKEN}\n\n      # Package application\n      - run: mvn clean install\n\n      # Build and push Docker image\n      - run: |\n          TAG=0.1.$CIRCLE_BUILD_NUM\n          docker build -t muizzmahdy/ehroute-<< parameters.package_name >>:$TAG .\n          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin\n          docker push muizzmahdy/ehroute-<< parameters.package_name >>:$TAG\n\n      #   # store raw contents of src code\n      #  - store_artifacts:\n      #    path: target/classes\n      #    destination: config-server-artifacts\n\n  # endregion\n\n  # ---------------------------------------------------------------------------- #\n  #                                    Deploy                                    #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  deploy:\n    parameters:\n      package_name:\n        type: string\n\n    executor: node\n    working_directory: ~/project/<< parameters.package_name >>\n\n    steps:\n      - attach_workspace:\n          at: ~/project\n      # This step is added to show that files are available from the build job.\n      - run:\n          name: Content to deploy\n          command: ls && cat build.txt\n      - deploy:\n          name: Deploy\n          command: echo \"Deploying << parameters.package_name >> (<< pipeline.parameters.deploy >>) ...\"\n\n  # endregion\n\nworkflows:\n  version: 2\n\n  # ---------------------------------------------------------------------------- #\n  #                                    Trigger                                   #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  # The main workflow responsible for triggering all other workflows\n  # in which changes are detected.\n  ci:\n    when: << pipeline.parameters.trigger >>\n    jobs:\n      - trigger-workflows\n  \n  # endregion\n\n  # ---------------------------------------------------------------------------- #\n  #                                   Services                                   #\n  # ---------------------------------------------------------------------------- #\n  # region\n\n  config-server:\n    when: << pipeline.parameters.config-server >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: config-server\n          name: config-server-build\n\n  discovery-service:\n    when: << pipeline.parameters.discovery-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: discovery-service\n          name: discovery-service-build\n\n  gateway-service:\n    when: << pipeline.parameters.gateway-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: gateway-service\n          name: gateway-service-build\n\n  account-service:\n    when: << pipeline.parameters.account-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: account-service\n          name: account-service-build\n\n  auth-service:\n    when: << pipeline.parameters.auth-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: auth-service\n          name: auth-service-build\n\n  identity-service:\n    when: << pipeline.parameters.identity-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: identity-service\n          name: identity-service-build\n\n  patient-service:\n    when: << pipeline.parameters.patient-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: patient-service\n          name: patient-service-build\n\n  provider-service:\n    when: << pipeline.parameters.provider-service >>\n    jobs:\n      - build:\n          filters:\n            branches:\n              only: << pipeline.parameters.trigger-branch >>\n          package_name: provider-service\n          name: provider-service-build\n    # - deploy:\n    #     package_name: provider-service\n    #     name: provider-service-deploy\n    #     requires:\n    #       - provider-service-build\n\n  # endregion\n"
        },
        "static_files": {}
    },
    "project_structure": {
        "files": [
            ".factorypath",
            "dockerfile",
            "pom.xml"
        ],
        "folders": [
            "src"
        ]
    }
}